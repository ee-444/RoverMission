
RoverMission.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a4  00800100  00006302  00006396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006302  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004ac  008002a4  008002a4  0000653a  2**0
                  ALLOC
  3 .stab         00003b58  00000000  00000000  0000653c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ff3  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003c8  00000000  00000000  0000b087  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000122d  00000000  00000000  0000b44f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000087ca  00000000  00000000  0000c67c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002e14  00000000  00000000  00014e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005929  00000000  00000000  00017c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000cb0  00000000  00000000  0001d584  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001aec  00000000  00000000  0001e234  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004f59  00000000  00000000  0001fd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000578  00000000  00000000  00024c79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__dtors_end>
       4:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
       8:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
       c:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
      10:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
      14:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
      18:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
      1c:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
      20:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
      24:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
      28:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
      2c:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
      30:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
      34:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
      38:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
      3c:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
      40:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__vector_16>
      44:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
      48:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__vector_18>
      4c:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
      50:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
      54:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
      58:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
      5c:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
      60:	0c 94 70 20 	jmp	0x40e0	; 0x40e0 <__vector_24>
      64:	0c 94 c4 03 	jmp	0x788	; 0x788 <__bad_interrupt>
      68:	12 21       	and	r17, r2
      6a:	c0 20       	and	r12, r0
      6c:	c0 20       	and	r12, r0
      6e:	c0 20       	and	r12, r0
      70:	c0 20       	and	r12, r0
      72:	c0 20       	and	r12, r0
      74:	c0 20       	and	r12, r0
      76:	c0 20       	and	r12, r0
      78:	1c 21       	and	r17, r12
      7a:	c0 20       	and	r12, r0
      7c:	c0 20       	and	r12, r0
      7e:	c0 20       	and	r12, r0
      80:	c0 20       	and	r12, r0
      82:	c0 20       	and	r12, r0
      84:	c0 20       	and	r12, r0
      86:	c0 20       	and	r12, r0
      88:	1c 21       	and	r17, r12
      8a:	c0 20       	and	r12, r0
      8c:	c0 20       	and	r12, r0
      8e:	c0 20       	and	r12, r0
      90:	c0 20       	and	r12, r0
      92:	c0 20       	and	r12, r0
      94:	c0 20       	and	r12, r0
      96:	c0 20       	and	r12, r0
      98:	24 21       	and	r18, r4
      9a:	c0 20       	and	r12, r0
      9c:	c0 20       	and	r12, r0
      9e:	c0 20       	and	r12, r0
      a0:	c0 20       	and	r12, r0
      a2:	c0 20       	and	r12, r0
      a4:	c0 20       	and	r12, r0
      a6:	c0 20       	and	r12, r0
      a8:	33 21       	and	r19, r3
      aa:	c0 20       	and	r12, r0
      ac:	c0 20       	and	r12, r0
      ae:	c0 20       	and	r12, r0
      b0:	c0 20       	and	r12, r0
      b2:	c0 20       	and	r12, r0
      b4:	c0 20       	and	r12, r0
      b6:	c0 20       	and	r12, r0
      b8:	24 21       	and	r18, r4
      ba:	c0 20       	and	r12, r0
      bc:	c0 20       	and	r12, r0
      be:	c0 20       	and	r12, r0
      c0:	c0 20       	and	r12, r0
      c2:	c0 20       	and	r12, r0
      c4:	c0 20       	and	r12, r0
      c6:	c0 20       	and	r12, r0
      c8:	5e 21       	and	r21, r14
      ca:	c0 20       	and	r12, r0
      cc:	c0 20       	and	r12, r0
      ce:	c0 20       	and	r12, r0
      d0:	c0 20       	and	r12, r0
      d2:	c0 20       	and	r12, r0
      d4:	c0 20       	and	r12, r0
      d6:	c0 20       	and	r12, r0
      d8:	69 21       	and	r22, r9
      da:	c0 20       	and	r12, r0
      dc:	c0 20       	and	r12, r0
      de:	c0 20       	and	r12, r0
      e0:	c0 20       	and	r12, r0
      e2:	c0 20       	and	r12, r0
      e4:	c0 20       	and	r12, r0
      e6:	c0 20       	and	r12, r0
      e8:	e6 20       	and	r14, r6
      ea:	c0 20       	and	r12, r0
      ec:	c0 20       	and	r12, r0
      ee:	c0 20       	and	r12, r0
      f0:	c0 20       	and	r12, r0
      f2:	c0 20       	and	r12, r0
      f4:	c0 20       	and	r12, r0
      f6:	c0 20       	and	r12, r0
      f8:	f9 20       	and	r15, r9
      fa:	c0 20       	and	r12, r0
      fc:	c0 20       	and	r12, r0
      fe:	c0 20       	and	r12, r0
     100:	c0 20       	and	r12, r0
     102:	c0 20       	and	r12, r0
     104:	c0 20       	and	r12, r0
     106:	c0 20       	and	r12, r0
     108:	da 20       	and	r13, r10
     10a:	c0 20       	and	r12, r0
     10c:	c0 20       	and	r12, r0
     10e:	c0 20       	and	r12, r0
     110:	c0 20       	and	r12, r0
     112:	c0 20       	and	r12, r0
     114:	c0 20       	and	r12, r0
     116:	c0 20       	and	r12, r0
     118:	ed 20       	and	r14, r13
     11a:	c0 20       	and	r12, r0
     11c:	c0 20       	and	r12, r0
     11e:	c0 20       	and	r12, r0
     120:	c0 20       	and	r12, r0
     122:	c0 20       	and	r12, r0
     124:	c0 20       	and	r12, r0
     126:	c0 20       	and	r12, r0
     128:	09 21       	and	r16, r9
     12a:	c0 20       	and	r12, r0
     12c:	c0 20       	and	r12, r0
     12e:	c0 20       	and	r12, r0
     130:	c0 20       	and	r12, r0
     132:	c0 20       	and	r12, r0
     134:	c0 20       	and	r12, r0
     136:	c0 20       	and	r12, r0
     138:	09 21       	and	r16, r9
     13a:	c0 20       	and	r12, r0
     13c:	c0 20       	and	r12, r0
     13e:	c0 20       	and	r12, r0
     140:	c0 20       	and	r12, r0
     142:	c0 20       	and	r12, r0
     144:	c0 20       	and	r12, r0
     146:	c0 20       	and	r12, r0
     148:	09 21       	and	r16, r9
     14a:	c0 20       	and	r12, r0
     14c:	c0 20       	and	r12, r0
     14e:	c0 20       	and	r12, r0
     150:	c0 20       	and	r12, r0
     152:	c0 20       	and	r12, r0
     154:	c0 20       	and	r12, r0
     156:	c0 20       	and	r12, r0
     158:	09 21       	and	r16, r9
     15a:	c0 20       	and	r12, r0
     15c:	c0 20       	and	r12, r0
     15e:	c0 20       	and	r12, r0
     160:	c0 20       	and	r12, r0
     162:	c0 20       	and	r12, r0
     164:	c0 20       	and	r12, r0
     166:	c0 20       	and	r12, r0
     168:	d1 20       	and	r13, r1
     16a:	c0 20       	and	r12, r0
     16c:	c0 20       	and	r12, r0
     16e:	c0 20       	and	r12, r0
     170:	c0 20       	and	r12, r0
     172:	c0 20       	and	r12, r0
     174:	c0 20       	and	r12, r0
     176:	c0 20       	and	r12, r0
     178:	d6 20       	and	r13, r6
     17a:	c0 20       	and	r12, r0
     17c:	c0 20       	and	r12, r0
     17e:	c0 20       	and	r12, r0
     180:	c0 20       	and	r12, r0
     182:	c0 20       	and	r12, r0
     184:	c0 20       	and	r12, r0
     186:	c0 20       	and	r12, r0
     188:	d1 20       	and	r13, r1
     18a:	c0 20       	and	r12, r0
     18c:	c0 20       	and	r12, r0
     18e:	c0 20       	and	r12, r0
     190:	c0 20       	and	r12, r0
     192:	c0 20       	and	r12, r0
     194:	c0 20       	and	r12, r0
     196:	c0 20       	and	r12, r0
     198:	d6 20       	and	r13, r6
     19a:	c0 20       	and	r12, r0
     19c:	c0 20       	and	r12, r0
     19e:	c0 20       	and	r12, r0
     1a0:	c0 20       	and	r12, r0
     1a2:	c0 20       	and	r12, r0
     1a4:	c0 20       	and	r12, r0
     1a6:	c0 20       	and	r12, r0
     1a8:	3e 21       	and	r19, r14
     1aa:	c0 20       	and	r12, r0
     1ac:	c0 20       	and	r12, r0
     1ae:	c0 20       	and	r12, r0
     1b0:	c0 20       	and	r12, r0
     1b2:	c0 20       	and	r12, r0
     1b4:	c0 20       	and	r12, r0
     1b6:	c0 20       	and	r12, r0
     1b8:	96 20       	and	r9, r6
     1ba:	c0 20       	and	r12, r0
     1bc:	c0 20       	and	r12, r0
     1be:	c0 20       	and	r12, r0
     1c0:	c0 20       	and	r12, r0
     1c2:	c0 20       	and	r12, r0
     1c4:	c0 20       	and	r12, r0
     1c6:	c0 20       	and	r12, r0
     1c8:	96 20       	and	r9, r6
     1ca:	c0 20       	and	r12, r0
     1cc:	c0 20       	and	r12, r0
     1ce:	c0 20       	and	r12, r0
     1d0:	c0 20       	and	r12, r0
     1d2:	c0 20       	and	r12, r0
     1d4:	c0 20       	and	r12, r0
     1d6:	c0 20       	and	r12, r0
     1d8:	ab 20       	and	r10, r11
     1da:	c0 20       	and	r12, r0
     1dc:	c0 20       	and	r12, r0
     1de:	c0 20       	and	r12, r0
     1e0:	c0 20       	and	r12, r0
     1e2:	c0 20       	and	r12, r0
     1e4:	c0 20       	and	r12, r0
     1e6:	c0 20       	and	r12, r0
     1e8:	03 21       	and	r16, r3
     1ea:	c0 20       	and	r12, r0
     1ec:	c0 20       	and	r12, r0
     1ee:	c0 20       	and	r12, r0
     1f0:	c0 20       	and	r12, r0
     1f2:	c0 20       	and	r12, r0
     1f4:	c0 20       	and	r12, r0
     1f6:	c0 20       	and	r12, r0
     1f8:	03 21       	and	r16, r3
     1fa:	07 2c       	mov	r0, r7
     1fc:	7a a5       	ldd	r23, Y+42	; 0x2a
     1fe:	ba 6c       	ori	r27, 0xCA	; 202
     200:	c5 90       	lpm	r12, Z+
     202:	da 3b       	cpi	r29, 0xBA	; 186
     204:	93 65       	ori	r25, 0x53	; 83
     206:	fc 8b       	std	Y+20, r31	; 0x14
     208:	bc 53       	subi	r27, 0x3C	; 60
     20a:	f8 10       	cpse	r15, r8
     20c:	fd 3c       	cpi	r31, 0xCD	; 205
     20e:	56 92       	.word	0x9256	; ????
     210:	83 4d       	sbci	r24, 0xD3	; 211
     212:	bd 87       	std	Y+13, r27	; 0x0d
     214:	9d 3a       	cpi	r25, 0xAD	; 173
     216:	b6 3d       	cpi	r27, 0xD6	; 214
     218:	cb c9       	rjmp	.-3178   	; 0xfffff5b0 <__eeprom_end+0xff7ef5b0>
     21a:	bf 5b       	subi	r27, 0xBF	; 191
     21c:	be 73       	andi	r27, 0x3E	; 62
     21e:	da 0f       	add	r29, r26
     220:	c9 3f       	cpi	r28, 0xF9	; 249
     222:	05 a8       	ldd	r0, Z+53	; 0x35
     224:	4c cd       	rjmp	.-1384   	; 0xfffffcbe <__eeprom_end+0xff7efcbe>
     226:	b2 d4       	rcall	.+2404   	; 0xb8c <_ZN7Mission18adjustScanPlatformEhh+0x78>
     228:	4e b9       	out	0x0e, r20	; 14
     22a:	38 36       	cpi	r19, 0x68	; 104
     22c:	a9 02       	muls	r26, r25
     22e:	0c 50       	subi	r16, 0x0C	; 12
     230:	b9 91       	ld	r27, Y+
     232:	86 88       	ldd	r8, Z+22	; 0x16
     234:	08 3c       	cpi	r16, 0xC8	; 200
     236:	a6 aa       	std	Z+54, r10	; 0x36
     238:	aa 2a       	or	r10, r26
     23a:	be 00       	.word	0x00be	; ????
     23c:	00 00       	nop
     23e:	80 3f       	cpi	r24, 0xF0	; 240

00000240 <_ZL17medium_range_data>:
     240:	4b 4a 4a 49 49 48 48 47 47 46 46 45 44 44 44 43     KJJIIHHGGFFEDDDC
     250:	43 42 42 41 41 40 40 3f 3f 3f 3e 3e 3d 3d 3d 3c     CBBAA@@???>>===<
     260:	3c 3b 3b 3b 3a 3a 3a 39 39 39 38 38 38 37 37 37     <;;;:::999888777
     270:	36 36 36 35 35 35 34 34 34 34 33 33 33 32 32 32     6665554444333222
     280:	32 31 31 31 31 30 30 30 30 2f 2f 2f 2f 2e 2e 2e     211110000////...
     290:	2e 2e 2d 2d 2d 2d 2c 2c 2c 2c 2c 2b 2b 2b 2b 2b     ..----,,,,,+++++
     2a0:	2a 2a 2a 2a 2a 2a 29 29 29 29 29 28 28 28 28 28     ******)))))(((((
     2b0:	28 27 27 27 27 27 27 26 26 26 26 26 26 26 25 25     (''''''&&&&&&&%%
     2c0:	25 25 25 25 25 24 24 24 24 24 24 24 23 23 23 23     %%%%%$$$$$$$####
     2d0:	23 23 23 23 22 22 22 22 22 22 22 22 21 21 21 21     ####""""""""!!!!
     2e0:	21 21 21 21 21 20 20 20 20 20 20 20 20 20 1f 1f     !!!!!         ..
     2f0:	1f 1f 1f 1f 1f 1f 1f 1f 1e 1e 1e 1e 1e 1e 1e 1e     ................
     300:	1e 1e 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1c 1c 1c     ................
     310:	1c 1c 1c 1c 1c 1c 1c 1c 1c 1b 1b 1b 1b 1b 1b 1b     ................
     320:	1b 1b 1b 1b 1b 1b 1a 1a 1a 1a 1a 1a 1a 1a 1a 1a     ................
     330:	1a 1a 1a 1a 19 19 19 19 19 19 19 19 19 19 19 19     ................
     340:	19 19 19 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
     350:	18 18 18 18 17 17 17 17 17 17 17 17 17 17 17 17     ................
     360:	17 17 17 17 17 16 16 16 16 16 16 16 16 16 16 16     ................
     370:	16 16 16 16 16 16 16 16 16 15 15 15 15 15 15 15     ................
     380:	15 15 15 15 15 15 15 15 15 15 15 15 15 15 14 14     ................
     390:	14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14     ................
     3a0:	14 14 14 14 14 14 13 13 13 13 13 13 13 13 13 13     ................
     3b0:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
     3c0:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
     3d0:	12 12 12 12 12 12 12 12 12 12 12 12 12 11 11 11     ................
     3e0:	11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11     ................
     3f0:	11 11 11 11 11 11 11 11 11 11 11 11 11 11 10 10     ................
     400:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
     410:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
     420:	10 10 10 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     430:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     440:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0e 0e 0e     ................
     450:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
     460:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
     470:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0d 0d 0d     ................
     480:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     490:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     4a0:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     4b0:	0d 0d 0d 0d 0d 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
     4c0:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
     4d0:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
     4e0:	0c 0c 0c 0c 0c 0a                                   ......

000004e6 <_ZL15long_range_data>:
     4e6:	fe fd fc fb fa f8 f7 f6 f5 f4 f3 f2 f0 ef ee ed     ................
     4f6:	ec eb ea e9 e8 e7 e6 e5 e4 e3 e2 e1 e0 df de dd     ................
     506:	dd dc db da d9 d8 d7 d6 d5 d5 d4 d3 d2 d1 d0 d0     ................
     516:	cf ce cd cc cc cb ca c9 c9 c8 c7 c6 c6 c5 c4 c3     ................
     526:	c3 c2 c1 c1 c0 bf bf be bd bc bc bb bb ba b9 b9     ................
     536:	b8 b7 b7 b6 b5 b5 b4 b4 b3 b2 b2 b1 b1 b0 af af     ................
     546:	ae ae ad ad ac ab ab aa aa a9 a9 a8 a8 a7 a7 a6     ................
     556:	a6 a5 a5 a4 a4 a3 a3 a2 a2 a1 a1 a0 a0 9f 9f 9e     ................
     566:	9e 9d 9d 9c 9c 9b 9b 9b 9a 9a 99 99 98 98 97 97     ................
     576:	97 96 96 95 95 94 94 94 93 93 92 92 92 91 91 90     ................
     586:	90 90 8f 8f 8f 8e 8e 8d 8d 8d 8c 8c 8c 8b 8b 8a     ................
     596:	8a 8a 89 89 89 88 88 88 87 87 87 86 86 86 85 85     ................
     5a6:	85 84 84 84 83 83 83 82 82 82 81 81 81 80 80 80     ................
     5b6:	7f 7f 7f 7f 7e 7e 7e 7d 7d 7d 7c 7c 7c 7c 7b 7b     ....~~~}}}||||{{
     5c6:	7b 7a 7a 7a 7a 79 79 79 79 78 78 78 77 77 77 77     {zzzzyyyyxxxwwww
     5d6:	76 76 76 76 75 75 75 75 74 74 74 74 73 73 73 73     vvvvuuuuttttssss
     5e6:	72 72 72 72 71 71 71 71 70 70 70 70 6f 6f 6f 6f     rrrrqqqqppppoooo
     5f6:	6f 6e 6e 6e 6e 6d 6d 6d 6d 6c 6c 6c 6c 6c 6b 6b     onnnnmmmmlllllkk
     606:	6b 6b 6b 6a 6a 6a 6a 69 69 69 69 69 68 68 68 68     kkkjjjjiiiiihhhh
     616:	68 67 67 67 67 67 66 66 66 66 66 65 65 65 65 65     hgggggfffffeeeee
     626:	64 64 64 64 64 64 63 63 63 63 63 62 62 62 62 62     ddddddcccccbbbbb
     636:	62 61 61 61 61 61 60 60 60 60 60 60 5f 5f 5f 5f     baaaaa``````____
     646:	5f 5f 5e 5e 5e 5e 5e 5e 5d 5d 5d 5d 5d 5d 5c 5c     __^^^^^^]]]]]]\\
     656:	5c 5c 5c 5c 5c 5b 5b 5b 5b 5b 5b 5a 5a 5a 5a 5a     \\\\\[[[[[[ZZZZZ
     666:	5a 5a 59 59 59 59 59 59 58 58 58 58 58 58 58 57     ZZYYYYYYXXXXXXXW
     676:	57 57 57 57 57 57 56 56 56 56 56 56 56 55 55 55     WWWWWWVVVVVVVUUU
     686:	55 55 55 55 55 54 54 54 54 54 54 54 53 53 53 53     UUUUUTTTTTTTSSSS
     696:	53 53 53 53 52 52 52 52 52 52 52 52 51 51 51 51     SSSSRRRRRRRRQQQQ
     6a6:	51 51 51 51 50 50 50 50 50 50 50 50 4f 4f 4f 4f     QQQQPPPPPPPPOOOO
     6b6:	4f 4f 4f 4f 4f 4e 4e 4e 4e 4e 4e 4e 4e 4e 4d 4d     OOOOONNNNNNNNNMM
     6c6:	4d 4d 4d 4d 4d 4d 4d 4c 4c 4c 4c 4c 4c 4c 4c 4c     MMMMMMMLLLLLLLLL

000006d6 <port_to_mode_PGM>:
     6d6:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000006e0 <port_to_output_PGM>:
     6e0:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000006ea <port_to_input_PGM>:
     6ea:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000006f4 <digital_pin_to_port_PGM>:
     6f4:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     704:	03 03 03 03                                         ....

00000708 <digital_pin_to_bit_mask_PGM>:
     708:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     718:	04 08 10 20                                         ... 

0000071c <digital_pin_to_timer_PGM>:
     71c:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     72c:	00 00 00 00                                         ....

00000730 <__ctors_start>:
     730:	27 04       	cpc	r2, r7
     732:	53 09       	sbc	r21, r3
     734:	e2 0f       	add	r30, r18

00000736 <__ctors_end>:
     736:	2c 04       	cpc	r2, r12

00000738 <__dtors_end>:
     738:	11 24       	eor	r1, r1
     73a:	1f be       	out	0x3f, r1	; 63
     73c:	cf ef       	ldi	r28, 0xFF	; 255
     73e:	d8 e0       	ldi	r29, 0x08	; 8
     740:	de bf       	out	0x3e, r29	; 62
     742:	cd bf       	out	0x3d, r28	; 61

00000744 <__do_copy_data>:
     744:	12 e0       	ldi	r17, 0x02	; 2
     746:	a0 e0       	ldi	r26, 0x00	; 0
     748:	b1 e0       	ldi	r27, 0x01	; 1
     74a:	e2 e0       	ldi	r30, 0x02	; 2
     74c:	f3 e6       	ldi	r31, 0x63	; 99
     74e:	02 c0       	rjmp	.+4      	; 0x754 <__do_copy_data+0x10>
     750:	05 90       	lpm	r0, Z+
     752:	0d 92       	st	X+, r0
     754:	a4 3a       	cpi	r26, 0xA4	; 164
     756:	b1 07       	cpc	r27, r17
     758:	d9 f7       	brne	.-10     	; 0x750 <__do_copy_data+0xc>

0000075a <__do_clear_bss>:
     75a:	17 e0       	ldi	r17, 0x07	; 7
     75c:	a4 ea       	ldi	r26, 0xA4	; 164
     75e:	b2 e0       	ldi	r27, 0x02	; 2
     760:	01 c0       	rjmp	.+2      	; 0x764 <.do_clear_bss_start>

00000762 <.do_clear_bss_loop>:
     762:	1d 92       	st	X+, r1

00000764 <.do_clear_bss_start>:
     764:	a0 35       	cpi	r26, 0x50	; 80
     766:	b1 07       	cpc	r27, r17
     768:	e1 f7       	brne	.-8      	; 0x762 <.do_clear_bss_loop>

0000076a <__do_global_ctors>:
     76a:	17 e0       	ldi	r17, 0x07	; 7
     76c:	c6 e3       	ldi	r28, 0x36	; 54
     76e:	d7 e0       	ldi	r29, 0x07	; 7
     770:	04 c0       	rjmp	.+8      	; 0x77a <__do_global_ctors+0x10>
     772:	22 97       	sbiw	r28, 0x02	; 2
     774:	fe 01       	movw	r30, r28
     776:	0e 94 48 29 	call	0x5290	; 0x5290 <__tablejump__>
     77a:	c0 33       	cpi	r28, 0x30	; 48
     77c:	d1 07       	cpc	r29, r17
     77e:	c9 f7       	brne	.-14     	; 0x772 <__do_global_ctors+0x8>
     780:	0e 94 c6 03 	call	0x78c	; 0x78c <main>
     784:	0c 94 74 31 	jmp	0x62e8	; 0x62e8 <__do_global_dtors>

00000788 <__bad_interrupt>:
     788:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000078c <main>:
     78c:	0e 94 ca 14 	call	0x2994	; 0x2994 <init>
     790:	89 e7       	ldi	r24, 0x79	; 121
     792:	96 e0       	ldi	r25, 0x06	; 6
     794:	40 e0       	ldi	r20, 0x00	; 0
     796:	51 ee       	ldi	r21, 0xE1	; 225
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN14HardwareSerial5beginEl>
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <analogReference>
     7a6:	84 ea       	ldi	r24, 0xA4	; 164
     7a8:	92 e0       	ldi	r25, 0x02	; 2
     7aa:	0e 94 84 04 	call	0x908	; 0x908 <_ZN14HMC6352compass10getHeadingEv>
     7ae:	89 e7       	ldi	r24, 0x79	; 121
     7b0:	96 e0       	ldi	r25, 0x06	; 6
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	71 e0       	ldi	r23, 0x01	; 1
     7b6:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZN5Print7printlnEPKc>
     7ba:	88 ea       	ldi	r24, 0xA8	; 168
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	63 e0       	ldi	r22, 0x03	; 3
     7c0:	0e 94 03 06 	call	0xc06	; 0xc06 <_ZN7Mission10irDistanceEh>
     7c4:	90 93 f0 05 	sts	0x05F0, r25
     7c8:	80 93 ef 05 	sts	0x05EF, r24
     7cc:	89 e7       	ldi	r24, 0x79	; 121
     7ce:	96 e0       	ldi	r25, 0x06	; 6
     7d0:	6b e0       	ldi	r22, 0x0B	; 11
     7d2:	71 e0       	ldi	r23, 0x01	; 1
     7d4:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <_ZN5Print5printEPKc>
     7d8:	60 91 ef 05 	lds	r22, 0x05EF
     7dc:	70 91 f0 05 	lds	r23, 0x05F0
     7e0:	89 e7       	ldi	r24, 0x79	; 121
     7e2:	96 e0       	ldi	r25, 0x06	; 6
     7e4:	4a e0       	ldi	r20, 0x0A	; 10
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN5Print7printlnEji>
     7ec:	64 ef       	ldi	r22, 0xF4	; 244
     7ee:	71 e0       	ldi	r23, 0x01	; 1
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 95 14 	call	0x292a	; 0x292a <delay>
     7f8:	e0 cf       	rjmp	.-64     	; 0x7ba <main+0x2e>

000007fa <T.23>:
     7fa:	81 30       	cpi	r24, 0x01	; 1
     7fc:	91 05       	cpc	r25, r1
     7fe:	01 f5       	brne	.+64     	; 0x840 <T.23+0x46>
     800:	84 ea       	ldi	r24, 0xA4	; 164
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	0e 94 ce 04 	call	0x99c	; 0x99c <_ZN14HMC6352compassC1Ev>
     808:	10 92 a9 02 	sts	0x02A9, r1
     80c:	10 92 a8 02 	sts	0x02A8, r1
     810:	8a ea       	ldi	r24, 0xAA	; 170
     812:	92 e0       	ldi	r25, 0x02	; 2
     814:	63 e0       	ldi	r22, 0x03	; 3
     816:	41 e0       	ldi	r20, 0x01	; 1
     818:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <_ZN10AF_DCMotorC1Ehh>
     81c:	8c ea       	ldi	r24, 0xAC	; 172
     81e:	92 e0       	ldi	r25, 0x02	; 2
     820:	64 e0       	ldi	r22, 0x04	; 4
     822:	41 e0       	ldi	r20, 0x01	; 1
     824:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <_ZN10AF_DCMotorC1Ehh>
     828:	8e ea       	ldi	r24, 0xAE	; 174
     82a:	92 e0       	ldi	r25, 0x02	; 2
     82c:	68 ec       	ldi	r22, 0xC8	; 200
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	41 e0       	ldi	r20, 0x01	; 1
     832:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN10AF_StepperC1Ejh>
     836:	8e ee       	ldi	r24, 0xEE	; 238
     838:	95 e0       	ldi	r25, 0x05	; 5
     83a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <_ZN15CmissionconsoleC1Ev>
     83e:	08 95       	ret
     840:	00 97       	sbiw	r24, 0x00	; 0
     842:	21 f4       	brne	.+8      	; 0x84c <T.23+0x52>
     844:	8e ee       	ldi	r24, 0xEE	; 238
     846:	95 e0       	ldi	r25, 0x05	; 5
     848:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_ZN15CmissionconsoleD1Ev>
     84c:	08 95       	ret

0000084e <_GLOBAL__I_compass>:
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 fd 03 	call	0x7fa	; 0x7fa <T.23>
     856:	08 95       	ret

00000858 <_GLOBAL__D_compass>:
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <T.23>
     860:	08 95       	ret

00000862 <_ZN14HMC6352compass14getLastHeadingEv>:
     862:	fc 01       	movw	r30, r24
     864:	82 81       	ldd	r24, Z+2	; 0x02
     866:	93 81       	ldd	r25, Z+3	; 0x03
     868:	08 95       	ret

0000086a <_ZN14HMC6352compass16enterCalibrationEv>:
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	ec 01       	movw	r28, r24
     878:	8c 01       	movw	r16, r24
     87a:	69 81       	ldd	r22, Y+1	; 0x01
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	6e 7f       	andi	r22, 0xFE	; 254
     880:	70 70       	andi	r23, 0x00	; 0
     882:	7e 01       	movw	r14, r28
     884:	9f 2d       	mov	r25, r15
     886:	0e 94 09 13 	call	0x2612	; 0x2612 <_ZN7TwoWire17beginTransmissionEi>
     88a:	ce 01       	movw	r24, r28
     88c:	63 e4       	ldi	r22, 0x43	; 67
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	0e 94 99 13 	call	0x2732	; 0x2732 <_ZN7TwoWire4sendEi>
     894:	ce 01       	movw	r24, r28
     896:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN7TwoWire15endTransmissionEv>
     89a:	ee 24       	eor	r14, r14
     89c:	ff 24       	eor	r15, r15
     89e:	8d e0       	ldi	r24, 0x0D	; 13
     8a0:	61 e0       	ldi	r22, 0x01	; 1
     8a2:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
     8a6:	64 ef       	ldi	r22, 0xF4	; 244
     8a8:	71 e0       	ldi	r23, 0x01	; 1
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 95 14 	call	0x292a	; 0x292a <delay>
     8b2:	8d e0       	ldi	r24, 0x0D	; 13
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
     8ba:	64 ef       	ldi	r22, 0xF4	; 244
     8bc:	71 e0       	ldi	r23, 0x01	; 1
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 95 14 	call	0x292a	; 0x292a <delay>
     8c6:	08 94       	sec
     8c8:	e1 1c       	adc	r14, r1
     8ca:	f1 1c       	adc	r15, r1
     8cc:	24 e1       	ldi	r18, 0x14	; 20
     8ce:	e2 16       	cp	r14, r18
     8d0:	f1 04       	cpc	r15, r1
     8d2:	29 f7       	brne	.-54     	; 0x89e <_ZN14HMC6352compass16enterCalibrationEv+0x34>
     8d4:	69 81       	ldd	r22, Y+1	; 0x01
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	6e 7f       	andi	r22, 0xFE	; 254
     8da:	70 70       	andi	r23, 0x00	; 0
     8dc:	c8 01       	movw	r24, r16
     8de:	0e 94 09 13 	call	0x2612	; 0x2612 <_ZN7TwoWire17beginTransmissionEi>
     8e2:	c8 01       	movw	r24, r16
     8e4:	65 e4       	ldi	r22, 0x45	; 69
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	0e 94 99 13 	call	0x2732	; 0x2732 <_ZN7TwoWire4sendEi>
     8ec:	c8 01       	movw	r24, r16
     8ee:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN7TwoWire15endTransmissionEv>
     8f2:	8d e0       	ldi	r24, 0x0D	; 13
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	08 95       	ret

00000908 <_ZN14HMC6352compass10getHeadingEv>:
     908:	ef 92       	push	r14
     90a:	ff 92       	push	r15
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	ec 01       	movw	r28, r24
     916:	8d e0       	ldi	r24, 0x0D	; 13
     918:	61 e0       	ldi	r22, 0x01	; 1
     91a:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
     91e:	8e 01       	movw	r16, r28
     920:	ce 01       	movw	r24, r28
     922:	69 81       	ldd	r22, Y+1	; 0x01
     924:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7TwoWire17beginTransmissionEh>
     928:	ce 01       	movw	r24, r28
     92a:	61 e4       	ldi	r22, 0x41	; 65
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	0e 94 99 13 	call	0x2732	; 0x2732 <_ZN7TwoWire4sendEi>
     932:	ce 01       	movw	r24, r28
     934:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN7TwoWire15endTransmissionEv>
     938:	66 e0       	ldi	r22, 0x06	; 6
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 95 14 	call	0x292a	; 0x292a <delay>
     944:	69 81       	ldd	r22, Y+1	; 0x01
     946:	ce 01       	movw	r24, r28
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	42 e0       	ldi	r20, 0x02	; 2
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <_ZN7TwoWire11requestFromEii>
     952:	c8 01       	movw	r24, r16
     954:	0e 94 13 13 	call	0x2626	; 0x2626 <_ZN7TwoWire9availableEv>
     958:	88 23       	and	r24, r24
     95a:	d9 f3       	breq	.-10     	; 0x952 <_ZN14HMC6352compass10getHeadingEv+0x4a>
     95c:	c8 01       	movw	r24, r16
     95e:	0e 94 19 13 	call	0x2632	; 0x2632 <_ZN7TwoWire7receiveEv>
     962:	f8 2e       	mov	r15, r24
     964:	c8 01       	movw	r24, r16
     966:	0e 94 13 13 	call	0x2626	; 0x2626 <_ZN7TwoWire9availableEv>
     96a:	88 23       	and	r24, r24
     96c:	d9 f3       	breq	.-10     	; 0x964 <_ZN14HMC6352compass10getHeadingEv+0x5c>
     96e:	c8 01       	movw	r24, r16
     970:	0e 94 19 13 	call	0x2632	; 0x2632 <_ZN7TwoWire7receiveEv>
     974:	3f 2d       	mov	r19, r15
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	08 2f       	mov	r16, r24
     97a:	10 e0       	ldi	r17, 0x00	; 0
     97c:	02 2b       	or	r16, r18
     97e:	13 2b       	or	r17, r19
     980:	1b 83       	std	Y+3, r17	; 0x03
     982:	0a 83       	std	Y+2, r16	; 0x02
     984:	8d e0       	ldi	r24, 0x0D	; 13
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
     98c:	c8 01       	movw	r24, r16
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	ff 90       	pop	r15
     998:	ef 90       	pop	r14
     99a:	08 95       	ret

0000099c <_ZN14HMC6352compassC1Ev>:
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	ec 01       	movw	r28, r24
     9a6:	7e 01       	movw	r14, r28
     9a8:	9f 2d       	mov	r25, r15
     9aa:	0e 94 fe 12 	call	0x25fc	; 0x25fc <_ZN7TwoWireC1Ev>
     9ae:	81 e2       	ldi	r24, 0x21	; 33
     9b0:	89 83       	std	Y+1, r24	; 0x01
     9b2:	8d e0       	ldi	r24, 0x0D	; 13
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
     9ba:	8d e0       	ldi	r24, 0x0D	; 13
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
     9c2:	ce 01       	movw	r24, r28
     9c4:	0e 94 f6 13 	call	0x27ec	; 0x27ec <_ZN7TwoWire5beginEv>
     9c8:	8d e0       	ldi	r24, 0x0D	; 13
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	08 95       	ret

000009da <_ZN14HMC6352compassC2Ev>:
     9da:	ef 92       	push	r14
     9dc:	ff 92       	push	r15
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	ec 01       	movw	r28, r24
     9e4:	7e 01       	movw	r14, r28
     9e6:	9f 2d       	mov	r25, r15
     9e8:	0e 94 fe 12 	call	0x25fc	; 0x25fc <_ZN7TwoWireC1Ev>
     9ec:	81 e2       	ldi	r24, 0x21	; 33
     9ee:	89 83       	std	Y+1, r24	; 0x01
     9f0:	8d e0       	ldi	r24, 0x0D	; 13
     9f2:	61 e0       	ldi	r22, 0x01	; 1
     9f4:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
     9f8:	8d e0       	ldi	r24, 0x0D	; 13
     9fa:	61 e0       	ldi	r22, 0x01	; 1
     9fc:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
     a00:	ce 01       	movw	r24, r28
     a02:	0e 94 f6 13 	call	0x27ec	; 0x27ec <_ZN7TwoWire5beginEv>
     a06:	8d e0       	ldi	r24, 0x0D	; 13
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	08 95       	ret

00000a18 <_ZN7Mission11analyzeRoomEPjS0_S0_S0_>:
     a18:	9f 92       	push	r9
     a1a:	af 92       	push	r10
     a1c:	bf 92       	push	r11
     a1e:	cf 92       	push	r12
     a20:	df 92       	push	r13
     a22:	ef 92       	push	r14
     a24:	ff 92       	push	r15
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	f8 01       	movw	r30, r16
     a34:	e8 0f       	add	r30, r24
     a36:	f9 1f       	adc	r31, r25
     a38:	11 82       	std	Z+1, r1	; 0x01
     a3a:	10 82       	st	Z, r1
     a3c:	f9 01       	movw	r30, r18
     a3e:	e8 0f       	add	r30, r24
     a40:	f9 1f       	adc	r31, r25
     a42:	11 82       	std	Z+1, r1	; 0x01
     a44:	10 82       	st	Z, r1
     a46:	02 96       	adiw	r24, 0x02	; 2
     a48:	8a 30       	cpi	r24, 0x0A	; 10
     a4a:	91 05       	cpc	r25, r1
     a4c:	91 f7       	brne	.-28     	; 0xa32 <_ZN7Mission11analyzeRoomEPjS0_S0_S0_+0x1a>
     a4e:	c0 e0       	ldi	r28, 0x00	; 0
     a50:	d0 e0       	ldi	r29, 0x00	; 0
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	a0 e0       	ldi	r26, 0x00	; 0
     a58:	b0 e0       	ldi	r27, 0x00	; 0
     a5a:	99 24       	eor	r9, r9
     a5c:	7a 01       	movw	r14, r20
     a5e:	e8 0e       	add	r14, r24
     a60:	f9 1e       	adc	r15, r25
     a62:	f7 01       	movw	r30, r14
     a64:	c0 80       	ld	r12, Z
     a66:	d1 80       	ldd	r13, Z+1	; 0x01
     a68:	7b 01       	movw	r14, r22
     a6a:	e8 0e       	add	r14, r24
     a6c:	f9 1e       	adc	r15, r25
     a6e:	f7 01       	movw	r30, r14
     a70:	e0 80       	ld	r14, Z
     a72:	f1 80       	ldd	r15, Z+1	; 0x01
     a74:	ec 18       	sub	r14, r12
     a76:	fd 08       	sbc	r15, r13
     a78:	f5 e6       	ldi	r31, 0x65	; 101
     a7a:	ef 16       	cp	r14, r31
     a7c:	f1 04       	cpc	r15, r1
     a7e:	10 f4       	brcc	.+4      	; 0xa84 <_ZN7Mission11analyzeRoomEPjS0_S0_S0_+0x6c>
     a80:	99 24       	eor	r9, r9
     a82:	35 c0       	rjmp	.+106    	; 0xaee <_ZN7Mission11analyzeRoomEPjS0_S0_S0_+0xd6>
     a84:	e3 e0       	ldi	r30, 0x03	; 3
     a86:	e9 15       	cp	r30, r9
     a88:	88 f5       	brcc	.+98     	; 0xaec <_ZN7Mission11analyzeRoomEPjS0_S0_S0_+0xd4>
     a8a:	7d 01       	movw	r14, r26
     a8c:	ee 0c       	add	r14, r14
     a8e:	ff 1c       	adc	r15, r15
     a90:	59 01       	movw	r10, r18
     a92:	ae 0c       	add	r10, r14
     a94:	bf 1c       	adc	r11, r15
     a96:	f5 01       	movw	r30, r10
     a98:	d1 82       	std	Z+1, r13	; 0x01
     a9a:	c0 82       	st	Z, r12
     a9c:	e0 0e       	add	r14, r16
     a9e:	f1 1e       	adc	r15, r17
     aa0:	f7 01       	movw	r30, r14
     aa2:	d1 83       	std	Z+1, r29	; 0x01
     aa4:	c0 83       	st	Z, r28
     aa6:	11 96       	adiw	r26, 0x01	; 1
     aa8:	a5 30       	cpi	r26, 0x05	; 5
     aaa:	b1 05       	cpc	r27, r1
     aac:	f9 f4       	brne	.+62     	; 0xaec <_ZN7Mission11analyzeRoomEPjS0_S0_S0_+0xd4>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	28 2f       	mov	r18, r24
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	f9 01       	movw	r30, r18
     ab6:	31 96       	adiw	r30, 0x01	; 1
     ab8:	ee 0f       	add	r30, r30
     aba:	ff 1f       	adc	r31, r31
     abc:	e0 0f       	add	r30, r16
     abe:	f1 1f       	adc	r31, r17
     ac0:	40 81       	ld	r20, Z
     ac2:	51 81       	ldd	r21, Z+1	; 0x01
     ac4:	f9 01       	movw	r30, r18
     ac6:	ee 0f       	add	r30, r30
     ac8:	ff 1f       	adc	r31, r31
     aca:	e0 0f       	add	r30, r16
     acc:	f1 1f       	adc	r31, r17
     ace:	20 81       	ld	r18, Z
     ad0:	31 81       	ldd	r19, Z+1	; 0x01
     ad2:	24 17       	cp	r18, r20
     ad4:	35 07       	cpc	r19, r21
     ad6:	10 f0       	brcs	.+4      	; 0xadc <_ZN7Mission11analyzeRoomEPjS0_S0_S0_+0xc4>
     ad8:	85 e0       	ldi	r24, 0x05	; 5
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <_ZN7Mission11analyzeRoomEPjS0_S0_S0_+0xcc>
     adc:	42 1b       	sub	r20, r18
     ade:	53 0b       	sbc	r21, r19
     ae0:	51 83       	std	Z+1, r21	; 0x01
     ae2:	40 83       	st	Z, r20
     ae4:	8f 5f       	subi	r24, 0xFF	; 255
     ae6:	85 30       	cpi	r24, 0x05	; 5
     ae8:	18 f3       	brcs	.-58     	; 0xab0 <_ZN7Mission11analyzeRoomEPjS0_S0_S0_+0x98>
     aea:	08 c0       	rjmp	.+16     	; 0xafc <_ZN7Mission11analyzeRoomEPjS0_S0_S0_+0xe4>
     aec:	93 94       	inc	r9
     aee:	02 96       	adiw	r24, 0x02	; 2
     af0:	62 96       	adiw	r28, 0x12	; 18
     af2:	f1 e0       	ldi	r31, 0x01	; 1
     af4:	80 39       	cpi	r24, 0x90	; 144
     af6:	9f 07       	cpc	r25, r31
     af8:	09 f0       	breq	.+2      	; 0xafc <_ZN7Mission11analyzeRoomEPjS0_S0_S0_+0xe4>
     afa:	b0 cf       	rjmp	.-160    	; 0xa5c <_ZN7Mission11analyzeRoomEPjS0_S0_S0_+0x44>
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	1f 91       	pop	r17
     b02:	0f 91       	pop	r16
     b04:	ff 90       	pop	r15
     b06:	ef 90       	pop	r14
     b08:	df 90       	pop	r13
     b0a:	cf 90       	pop	r12
     b0c:	bf 90       	pop	r11
     b0e:	af 90       	pop	r10
     b10:	9f 90       	pop	r9
     b12:	08 95       	ret

00000b14 <_ZN7Mission18adjustScanPlatformEhh>:
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	ec 01       	movw	r28, r24
     b1e:	68 3c       	cpi	r22, 0xC8	; 200
     b20:	18 f0       	brcs	.+6      	; 0xb28 <_ZN7Mission18adjustScanPlatformEhh+0x14>
     b22:	41 30       	cpi	r20, 0x01	; 1
     b24:	09 f4       	brne	.+2      	; 0xb28 <_ZN7Mission18adjustScanPlatformEhh+0x14>
     b26:	47 c0       	rjmp	.+142    	; 0xbb6 <_ZN7Mission18adjustScanPlatformEhh+0xa2>
     b28:	44 23       	and	r20, r20
     b2a:	09 f4       	brne	.+2      	; 0xb2e <_ZN7Mission18adjustScanPlatformEhh+0x1a>
     b2c:	44 c0       	rjmp	.+136    	; 0xbb6 <_ZN7Mission18adjustScanPlatformEhh+0xa2>
     b2e:	88 81       	ld	r24, Y
     b30:	99 81       	ldd	r25, Y+1	; 0x01
     b32:	06 2f       	mov	r16, r22
     b34:	10 e0       	ldi	r17, 0x00	; 0
     b36:	80 17       	cp	r24, r16
     b38:	91 07       	cpc	r25, r17
     b3a:	bc f0       	brlt	.+46     	; 0xb6a <_ZN7Mission18adjustScanPlatformEhh+0x56>
     b3c:	1c c0       	rjmp	.+56     	; 0xb76 <_ZN7Mission18adjustScanPlatformEhh+0x62>
     b3e:	8e ea       	ldi	r24, 0xAE	; 174
     b40:	92 e0       	ldi	r25, 0x02	; 2
     b42:	61 e0       	ldi	r22, 0x01	; 1
     b44:	41 e0       	ldi	r20, 0x01	; 1
     b46:	0e 94 89 09 	call	0x1312	; 0x1312 <_ZN10AF_Stepper7onestepEhh>
     b4a:	68 81       	ld	r22, Y
     b4c:	79 81       	ldd	r23, Y+1	; 0x01
     b4e:	6f 5f       	subi	r22, 0xFF	; 255
     b50:	7f 4f       	sbci	r23, 0xFF	; 255
     b52:	79 83       	std	Y+1, r23	; 0x01
     b54:	68 83       	st	Y, r22
     b56:	8e ee       	ldi	r24, 0xEE	; 238
     b58:	95 e0       	ldi	r25, 0x05	; 5
     b5a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_ZN15Cmissionconsole13mediumRangeIREj>
     b5e:	6a e0       	ldi	r22, 0x0A	; 10
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 95 14 	call	0x292a	; 0x292a <delay>
     b6a:	88 81       	ld	r24, Y
     b6c:	99 81       	ldd	r25, Y+1	; 0x01
     b6e:	80 17       	cp	r24, r16
     b70:	91 07       	cpc	r25, r17
     b72:	29 f7       	brne	.-54     	; 0xb3e <_ZN7Mission18adjustScanPlatformEhh+0x2a>
     b74:	20 c0       	rjmp	.+64     	; 0xbb6 <_ZN7Mission18adjustScanPlatformEhh+0xa2>
     b76:	08 17       	cp	r16, r24
     b78:	19 07       	cpc	r17, r25
     b7a:	c4 f0       	brlt	.+48     	; 0xbac <_ZN7Mission18adjustScanPlatformEhh+0x98>
     b7c:	1c c0       	rjmp	.+56     	; 0xbb6 <_ZN7Mission18adjustScanPlatformEhh+0xa2>
     b7e:	8e ea       	ldi	r24, 0xAE	; 174
     b80:	92 e0       	ldi	r25, 0x02	; 2
     b82:	62 e0       	ldi	r22, 0x02	; 2
     b84:	41 e0       	ldi	r20, 0x01	; 1
     b86:	0e 94 89 09 	call	0x1312	; 0x1312 <_ZN10AF_Stepper7onestepEhh>
     b8a:	88 81       	ld	r24, Y
     b8c:	99 81       	ldd	r25, Y+1	; 0x01
     b8e:	01 97       	sbiw	r24, 0x01	; 1
     b90:	99 83       	std	Y+1, r25	; 0x01
     b92:	88 83       	st	Y, r24
     b94:	6a e0       	ldi	r22, 0x0A	; 10
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 95 14 	call	0x292a	; 0x292a <delay>
     ba0:	68 81       	ld	r22, Y
     ba2:	79 81       	ldd	r23, Y+1	; 0x01
     ba4:	8e ee       	ldi	r24, 0xEE	; 238
     ba6:	95 e0       	ldi	r25, 0x05	; 5
     ba8:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_ZN15Cmissionconsole13mediumRangeIREj>
     bac:	88 81       	ld	r24, Y
     bae:	99 81       	ldd	r25, Y+1	; 0x01
     bb0:	80 17       	cp	r24, r16
     bb2:	91 07       	cpc	r25, r17
     bb4:	21 f7       	brne	.-56     	; 0xb7e <_ZN7Mission18adjustScanPlatformEhh+0x6a>
     bb6:	88 81       	ld	r24, Y
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	08 95       	ret

00000bc2 <_ZN7Mission7readADCEj>:
     bc2:	ef 92       	push	r14
     bc4:	ff 92       	push	r15
     bc6:	0f 93       	push	r16
     bc8:	1f 93       	push	r17
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	f6 2e       	mov	r15, r22
     bd0:	00 e0       	ldi	r16, 0x00	; 0
     bd2:	10 e0       	ldi	r17, 0x00	; 0
     bd4:	c0 e0       	ldi	r28, 0x00	; 0
     bd6:	d0 e0       	ldi	r29, 0x00	; 0
     bd8:	8f 2d       	mov	r24, r15
     bda:	0e 94 08 15 	call	0x2a10	; 0x2a10 <analogRead>
     bde:	0f 5f       	subi	r16, 0xFF	; 255
     be0:	1f 4f       	sbci	r17, 0xFF	; 255
     be2:	8c 1b       	sub	r24, r28
     be4:	9d 0b       	sbc	r25, r29
     be6:	b8 01       	movw	r22, r16
     be8:	0e 94 da 28 	call	0x51b4	; 0x51b4 <__divmodhi4>
     bec:	c6 0f       	add	r28, r22
     bee:	d7 1f       	adc	r29, r23
     bf0:	04 36       	cpi	r16, 0x64	; 100
     bf2:	11 05       	cpc	r17, r1
     bf4:	89 f7       	brne	.-30     	; 0xbd8 <_ZN7Mission7readADCEj+0x16>
     bf6:	ce 01       	movw	r24, r28
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	ff 90       	pop	r15
     c02:	ef 90       	pop	r14
     c04:	08 95       	ret

00000c06 <_ZN7Mission10irDistanceEh>:
     c06:	cf 92       	push	r12
     c08:	df 92       	push	r13
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	8c 01       	movw	r16, r24
     c18:	63 e0       	ldi	r22, 0x03	; 3
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_ZN7Mission7readADCEj>
     c20:	e8 2e       	mov	r14, r24
     c22:	e7 01       	movw	r28, r14
     c24:	7e 01       	movw	r14, r28
     c26:	f9 2e       	mov	r15, r25
     c28:	e7 01       	movw	r28, r14
     c2a:	c8 01       	movw	r24, r16
     c2c:	62 e0       	ldi	r22, 0x02	; 2
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_ZN7Mission7readADCEj>
     c34:	8c 01       	movw	r16, r24
     c36:	33 e0       	ldi	r19, 0x03	; 3
     c38:	85 33       	cpi	r24, 0x35	; 53
     c3a:	93 07       	cpc	r25, r19
     c3c:	18 f0       	brcs	.+6      	; 0xc44 <_ZN7Mission10irDistanceEh+0x3e>
     c3e:	04 e1       	ldi	r16, 0x14	; 20
     c40:	10 e0       	ldi	r17, 0x00	; 0
     c42:	0d c0       	rjmp	.+26     	; 0xc5e <_ZN7Mission10irDistanceEh+0x58>
     c44:	80 39       	cpi	r24, 0x90	; 144
     c46:	91 05       	cpc	r25, r1
     c48:	18 f4       	brcc	.+6      	; 0xc50 <_ZN7Mission10irDistanceEh+0x4a>
     c4a:	06 e9       	ldi	r16, 0x96	; 150
     c4c:	10 e0       	ldi	r17, 0x00	; 0
     c4e:	07 c0       	rjmp	.+14     	; 0xc5e <_ZN7Mission10irDistanceEh+0x58>
     c50:	00 55       	subi	r16, 0x50	; 80
     c52:	1e 4f       	sbci	r17, 0xFE	; 254
     c54:	f8 01       	movw	r30, r16
     c56:	04 91       	lpm	r16, Z+
     c58:	10 e0       	ldi	r17, 0x00	; 0
     c5a:	00 0f       	add	r16, r16
     c5c:	11 1f       	adc	r17, r17
     c5e:	f2 e0       	ldi	r31, 0x02	; 2
     c60:	cb 3d       	cpi	r28, 0xDB	; 219
     c62:	df 07       	cpc	r29, r31
     c64:	18 f0       	brcs	.+6      	; 0xc6c <_ZN7Mission10irDistanceEh+0x66>
     c66:	c4 e6       	ldi	r28, 0x64	; 100
     c68:	d0 e0       	ldi	r29, 0x00	; 0
     c6a:	0e c0       	rjmp	.+28     	; 0xc88 <_ZN7Mission10irDistanceEh+0x82>
     c6c:	ca 3e       	cpi	r28, 0xEA	; 234
     c6e:	d1 05       	cpc	r29, r1
     c70:	18 f4       	brcc	.+6      	; 0xc78 <_ZN7Mission10irDistanceEh+0x72>
     c72:	cc ec       	ldi	r28, 0xCC	; 204
     c74:	d1 e0       	ldi	r29, 0x01	; 1
     c76:	08 c0       	rjmp	.+16     	; 0xc88 <_ZN7Mission10irDistanceEh+0x82>
     c78:	c4 50       	subi	r28, 0x04	; 4
     c7a:	dc 4f       	sbci	r29, 0xFC	; 252
     c7c:	fe 01       	movw	r30, r28
     c7e:	84 91       	lpm	r24, Z+
     c80:	c8 2f       	mov	r28, r24
     c82:	d0 e0       	ldi	r29, 0x00	; 0
     c84:	cc 0f       	add	r28, r28
     c86:	dd 1f       	adc	r29, r29
     c88:	c8 01       	movw	r24, r16
     c8a:	6a ea       	ldi	r22, 0xAA	; 170
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	0e 94 c6 28 	call	0x518c	; 0x518c <__udivmodhi4>
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__floatunsisf>
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	48 ec       	ldi	r20, 0xC8	; 200
     ca0:	52 e4       	ldi	r21, 0x42	; 66
     ca2:	0e 94 73 23 	call	0x46e6	; 0x46e6 <__mulsf3>
     ca6:	c6 2e       	mov	r12, r22
     ca8:	d7 2e       	mov	r13, r23
     caa:	e8 2e       	mov	r14, r24
     cac:	f9 2e       	mov	r15, r25
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	a9 01       	movw	r20, r18
     cb4:	0e 94 19 25 	call	0x4a32	; 0x4a32 <__gtsf2>
     cb8:	18 16       	cp	r1, r24
     cba:	24 f0       	brlt	.+8      	; 0xcc4 <_ZN7Mission10irDistanceEh+0xbe>
     cbc:	f7 fa       	bst	r15, 7
     cbe:	f0 94       	com	r15
     cc0:	f7 f8       	bld	r15, 7
     cc2:	f0 94       	com	r15
     cc4:	c7 01       	movw	r24, r14
     cc6:	b6 01       	movw	r22, r12
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	a9 01       	movw	r20, r18
     cce:	0e 94 19 25 	call	0x4a32	; 0x4a32 <__gtsf2>
     cd2:	18 16       	cp	r1, r24
     cd4:	34 f4       	brge	.+12     	; 0xce2 <_ZN7Mission10irDistanceEh+0xdc>
     cd6:	04 36       	cpi	r16, 0x64	; 100
     cd8:	11 05       	cpc	r17, r1
     cda:	39 f4       	brne	.+14     	; 0xcea <_ZN7Mission10irDistanceEh+0xe4>
     cdc:	c4 e6       	ldi	r28, 0x64	; 100
     cde:	d0 e0       	ldi	r29, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <_ZN7Mission10irDistanceEh+0xe4>
     ce2:	06 39       	cpi	r16, 0x96	; 150
     ce4:	11 05       	cpc	r17, r1
     ce6:	09 f0       	breq	.+2      	; 0xcea <_ZN7Mission10irDistanceEh+0xe4>
     ce8:	e8 01       	movw	r28, r16
     cea:	ce 01       	movw	r24, r28
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	1f 91       	pop	r17
     cf2:	0f 91       	pop	r16
     cf4:	ff 90       	pop	r15
     cf6:	ef 90       	pop	r14
     cf8:	df 90       	pop	r13
     cfa:	cf 90       	pop	r12
     cfc:	08 95       	ret

00000cfe <_ZN7Mission15scanEnvironmentEPjj>:
     cfe:	af 92       	push	r10
     d00:	bf 92       	push	r11
     d02:	cf 92       	push	r12
     d04:	df 92       	push	r13
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	ec 01       	movw	r28, r24
     d12:	8b 01       	movw	r16, r22
     d14:	6a 01       	movw	r12, r20
     d16:	ff 24       	eor	r15, r15
     d18:	1d c0       	rjmp	.+58     	; 0xd54 <_ZN7Mission15scanEnvironmentEPjj+0x56>
     d1a:	ce 01       	movw	r24, r28
     d1c:	63 e0       	ldi	r22, 0x03	; 3
     d1e:	0e 94 03 06 	call	0xc06	; 0xc06 <_ZN7Mission10irDistanceEh>
     d22:	f5 01       	movw	r30, r10
     d24:	ee 0f       	add	r30, r30
     d26:	ff 1f       	adc	r31, r31
     d28:	e0 0f       	add	r30, r16
     d2a:	f1 1f       	adc	r31, r17
     d2c:	91 83       	std	Z+1, r25	; 0x01
     d2e:	80 83       	st	Z, r24
     d30:	ce 01       	movw	r24, r28
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	40 e0       	ldi	r20, 0x00	; 0
     d36:	0e 94 8a 05 	call	0xb14	; 0xb14 <_ZN7Mission18adjustScanPlatformEhh>
     d3a:	68 2f       	mov	r22, r24
     d3c:	6f 5f       	subi	r22, 0xFF	; 255
     d3e:	ce 01       	movw	r24, r28
     d40:	41 e0       	ldi	r20, 0x01	; 1
     d42:	0e 94 8a 05 	call	0xb14	; 0xb14 <_ZN7Mission18adjustScanPlatformEhh>
     d46:	64 e6       	ldi	r22, 0x64	; 100
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 95 14 	call	0x292a	; 0x292a <delay>
     d52:	f3 94       	inc	r15
     d54:	af 2c       	mov	r10, r15
     d56:	bb 24       	eor	r11, r11
     d58:	ac 14       	cp	r10, r12
     d5a:	bd 04       	cpc	r11, r13
     d5c:	f0 f2       	brcs	.-68     	; 0xd1a <_ZN7Mission15scanEnvironmentEPjj+0x1c>
     d5e:	ce 01       	movw	r24, r28
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	41 e0       	ldi	r20, 0x01	; 1
     d64:	0e 94 8a 05 	call	0xb14	; 0xb14 <_ZN7Mission18adjustScanPlatformEhh>
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	ff 90       	pop	r15
     d72:	df 90       	pop	r13
     d74:	cf 90       	pop	r12
     d76:	bf 90       	pop	r11
     d78:	af 90       	pop	r10
     d7a:	08 95       	ret

00000d7c <_ZN7Mission9stopRobotEv>:
     d7c:	8a ea       	ldi	r24, 0xAA	; 170
     d7e:	92 e0       	ldi	r25, 0x02	; 2
     d80:	64 e0       	ldi	r22, 0x04	; 4
     d82:	0e 94 b6 0b 	call	0x176c	; 0x176c <_ZN10AF_DCMotor3runEh>
     d86:	8c ea       	ldi	r24, 0xAC	; 172
     d88:	92 e0       	ldi	r25, 0x02	; 2
     d8a:	64 e0       	ldi	r22, 0x04	; 4
     d8c:	0e 94 b6 0b 	call	0x176c	; 0x176c <_ZN10AF_DCMotor3runEh>
     d90:	08 95       	ret

00000d92 <_ZN7Mission10goStraightEj>:
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	eb 01       	movw	r28, r22
     d98:	8a ea       	ldi	r24, 0xAA	; 170
     d9a:	92 e0       	ldi	r25, 0x02	; 2
     d9c:	6d e7       	ldi	r22, 0x7D	; 125
     d9e:	0e 94 1d 09 	call	0x123a	; 0x123a <_ZN10AF_DCMotor8setSpeedEh>
     da2:	8c ea       	ldi	r24, 0xAC	; 172
     da4:	92 e0       	ldi	r25, 0x02	; 2
     da6:	6d e7       	ldi	r22, 0x7D	; 125
     da8:	0e 94 1d 09 	call	0x123a	; 0x123a <_ZN10AF_DCMotor8setSpeedEh>
     dac:	8a ea       	ldi	r24, 0xAA	; 170
     dae:	92 e0       	ldi	r25, 0x02	; 2
     db0:	61 e0       	ldi	r22, 0x01	; 1
     db2:	0e 94 b6 0b 	call	0x176c	; 0x176c <_ZN10AF_DCMotor3runEh>
     db6:	8c ea       	ldi	r24, 0xAC	; 172
     db8:	92 e0       	ldi	r25, 0x02	; 2
     dba:	61 e0       	ldi	r22, 0x01	; 1
     dbc:	0e 94 b6 0b 	call	0x176c	; 0x176c <_ZN10AF_DCMotor3runEh>
     dc0:	20 97       	sbiw	r28, 0x00	; 0
     dc2:	79 f0       	breq	.+30     	; 0xde2 <_ZN7Mission10goStraightEj+0x50>
     dc4:	be 01       	movw	r22, r28
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	0e 94 95 14 	call	0x292a	; 0x292a <delay>
     dce:	8a ea       	ldi	r24, 0xAA	; 170
     dd0:	92 e0       	ldi	r25, 0x02	; 2
     dd2:	64 e0       	ldi	r22, 0x04	; 4
     dd4:	0e 94 b6 0b 	call	0x176c	; 0x176c <_ZN10AF_DCMotor3runEh>
     dd8:	8c ea       	ldi	r24, 0xAC	; 172
     dda:	92 e0       	ldi	r25, 0x02	; 2
     ddc:	64 e0       	ldi	r22, 0x04	; 4
     dde:	0e 94 b6 0b 	call	0x176c	; 0x176c <_ZN10AF_DCMotor3runEh>
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	08 95       	ret

00000de8 <_ZN7Mission13adjustHeadingEj>:
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	eb 01       	movw	r28, r22
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <_ZN7Mission13adjustHeadingEj+0xc>
     df0:	c0 51       	subi	r28, 0x10	; 16
     df2:	de 40       	sbci	r29, 0x0E	; 14
     df4:	8e e0       	ldi	r24, 0x0E	; 14
     df6:	c0 31       	cpi	r28, 0x10	; 16
     df8:	d8 07       	cpc	r29, r24
     dfa:	d0 f7       	brcc	.-12     	; 0xdf0 <_ZN7Mission13adjustHeadingEj+0x8>
     dfc:	8c ea       	ldi	r24, 0xAC	; 172
     dfe:	92 e0       	ldi	r25, 0x02	; 2
     e00:	66 e9       	ldi	r22, 0x96	; 150
     e02:	0e 94 1d 09 	call	0x123a	; 0x123a <_ZN10AF_DCMotor8setSpeedEh>
     e06:	8a ea       	ldi	r24, 0xAA	; 170
     e08:	92 e0       	ldi	r25, 0x02	; 2
     e0a:	66 e9       	ldi	r22, 0x96	; 150
     e0c:	0e 94 1d 09 	call	0x123a	; 0x123a <_ZN10AF_DCMotor8setSpeedEh>
     e10:	8c ea       	ldi	r24, 0xAC	; 172
     e12:	92 e0       	ldi	r25, 0x02	; 2
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	0e 94 b6 0b 	call	0x176c	; 0x176c <_ZN10AF_DCMotor3runEh>
     e1a:	8a ea       	ldi	r24, 0xAA	; 170
     e1c:	92 e0       	ldi	r25, 0x02	; 2
     e1e:	62 e0       	ldi	r22, 0x02	; 2
     e20:	0e 94 b6 0b 	call	0x176c	; 0x176c <_ZN10AF_DCMotor3runEh>
     e24:	84 ea       	ldi	r24, 0xA4	; 164
     e26:	92 e0       	ldi	r25, 0x02	; 2
     e28:	0e 94 84 04 	call	0x908	; 0x908 <_ZN14HMC6352compass10getHeadingEv>
     e2c:	9c 01       	movw	r18, r24
     e2e:	c8 17       	cp	r28, r24
     e30:	d9 07       	cpc	r29, r25
     e32:	31 f0       	breq	.+12     	; 0xe40 <_ZN7Mission13adjustHeadingEj+0x58>
     e34:	ce 01       	movw	r24, r28
     e36:	82 1b       	sub	r24, r18
     e38:	93 0b       	sbc	r25, r19
     e3a:	83 33       	cpi	r24, 0x33	; 51
     e3c:	91 05       	cpc	r25, r1
     e3e:	90 f7       	brcc	.-28     	; 0xe24 <_ZN7Mission13adjustHeadingEj+0x3c>
     e40:	8a ea       	ldi	r24, 0xAA	; 170
     e42:	92 e0       	ldi	r25, 0x02	; 2
     e44:	64 e0       	ldi	r22, 0x04	; 4
     e46:	0e 94 b6 0b 	call	0x176c	; 0x176c <_ZN10AF_DCMotor3runEh>
     e4a:	8c ea       	ldi	r24, 0xAC	; 172
     e4c:	92 e0       	ldi	r25, 0x02	; 2
     e4e:	64 e0       	ldi	r22, 0x04	; 4
     e50:	0e 94 b6 0b 	call	0x176c	; 0x176c <_ZN10AF_DCMotor3runEh>
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	08 95       	ret

00000e5a <_ZN7Mission23findPlaqueDistanceAngleEPjS0_hRjS1_>:
     e5a:	2f 92       	push	r2
     e5c:	3f 92       	push	r3
     e5e:	4f 92       	push	r4
     e60:	5f 92       	push	r5
     e62:	6f 92       	push	r6
     e64:	7f 92       	push	r7
     e66:	8f 92       	push	r8
     e68:	9f 92       	push	r9
     e6a:	af 92       	push	r10
     e6c:	bf 92       	push	r11
     e6e:	cf 92       	push	r12
     e70:	df 92       	push	r13
     e72:	ef 92       	push	r14
     e74:	ff 92       	push	r15
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	2a 97       	sbiw	r28, 0x0a	; 10
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	5b 01       	movw	r10, r22
     e90:	5a 83       	std	Y+2, r21	; 0x02
     e92:	49 83       	std	Y+1, r20	; 0x01
     e94:	1e 83       	std	Y+6, r17	; 0x06
     e96:	0d 83       	std	Y+5, r16	; 0x05
     e98:	f8 86       	std	Y+8, r15	; 0x08
     e9a:	ef 82       	std	Y+7, r14	; 0x07
     e9c:	22 30       	cpi	r18, 0x02	; 2
     e9e:	08 f4       	brcc	.+2      	; 0xea2 <_ZN7Mission23findPlaqueDistanceAngleEPjS0_hRjS1_+0x48>
     ea0:	22 e0       	ldi	r18, 0x02	; 2
     ea2:	02 2f       	mov	r16, r18
     ea4:	10 e0       	ldi	r17, 0x00	; 0
     ea6:	c8 01       	movw	r24, r16
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	9a 87       	std	Y+10, r25	; 0x0a
     eb0:	89 87       	std	Y+9, r24	; 0x09
     eb2:	fc 01       	movw	r30, r24
     eb4:	ea 0d       	add	r30, r10
     eb6:	fb 1d       	adc	r31, r11
     eb8:	60 81       	ld	r22, Z
     eba:	71 81       	ldd	r23, Z+1	; 0x01
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__floatunsisf>
     ec4:	6b 01       	movw	r12, r22
     ec6:	7c 01       	movw	r14, r24
     ec8:	f8 01       	movw	r30, r16
     eca:	32 97       	sbiw	r30, 0x02	; 2
     ecc:	ee 0f       	add	r30, r30
     ece:	ff 1f       	adc	r31, r31
     ed0:	ea 0d       	add	r30, r10
     ed2:	fb 1d       	adc	r31, r11
     ed4:	60 81       	ld	r22, Z
     ed6:	71 81       	ldd	r23, Z+1	; 0x01
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__floatunsisf>
     ee0:	8b 01       	movw	r16, r22
     ee2:	b8 2e       	mov	r11, r24
     ee4:	a9 2e       	mov	r10, r25
     ee6:	6c 2d       	mov	r22, r12
     ee8:	7d 2d       	mov	r23, r13
     eea:	8e 2d       	mov	r24, r14
     eec:	9f 2d       	mov	r25, r15
     eee:	2c 2d       	mov	r18, r12
     ef0:	3d 2d       	mov	r19, r13
     ef2:	4e 2d       	mov	r20, r14
     ef4:	5f 2d       	mov	r21, r15
     ef6:	0e 94 73 23 	call	0x46e6	; 0x46e6 <__mulsf3>
     efa:	66 2e       	mov	r6, r22
     efc:	97 2e       	mov	r9, r23
     efe:	88 2e       	mov	r8, r24
     f00:	79 2e       	mov	r7, r25
     f02:	95 01       	movw	r18, r10
     f04:	60 2f       	mov	r22, r16
     f06:	71 2f       	mov	r23, r17
     f08:	83 2f       	mov	r24, r19
     f0a:	92 2f       	mov	r25, r18
     f0c:	f5 01       	movw	r30, r10
     f0e:	20 2f       	mov	r18, r16
     f10:	31 2f       	mov	r19, r17
     f12:	4f 2f       	mov	r20, r31
     f14:	5e 2f       	mov	r21, r30
     f16:	0e 94 73 23 	call	0x46e6	; 0x46e6 <__mulsf3>
     f1a:	56 2e       	mov	r5, r22
     f1c:	47 2e       	mov	r4, r23
     f1e:	38 2e       	mov	r3, r24
     f20:	29 2e       	mov	r2, r25
     f22:	a9 85       	ldd	r26, Y+9	; 0x09
     f24:	ba 85       	ldd	r27, Y+10	; 0x0a
     f26:	e9 81       	ldd	r30, Y+1	; 0x01
     f28:	fa 81       	ldd	r31, Y+2	; 0x02
     f2a:	ae 0f       	add	r26, r30
     f2c:	bf 1f       	adc	r27, r31
     f2e:	6d 91       	ld	r22, X+
     f30:	7c 91       	ld	r23, X
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__floatunsisf>
     f3a:	2b ed       	ldi	r18, 0xDB	; 219
     f3c:	3f e0       	ldi	r19, 0x0F	; 15
     f3e:	49 e4       	ldi	r20, 0x49	; 73
     f40:	50 e4       	ldi	r21, 0x40	; 64
     f42:	0e 94 73 23 	call	0x46e6	; 0x46e6 <__mulsf3>
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	44 e3       	ldi	r20, 0x34	; 52
     f4c:	53 e4       	ldi	r21, 0x43	; 67
     f4e:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <__divsf3>
     f52:	0e 94 ba 29 	call	0x5374	; 0x5374 <cos>
     f56:	69 83       	std	Y+1, r22	; 0x01
     f58:	7a 83       	std	Y+2, r23	; 0x02
     f5a:	8b 83       	std	Y+3, r24	; 0x03
     f5c:	9c 83       	std	Y+4, r25	; 0x04
     f5e:	46 2d       	mov	r20, r6
     f60:	59 2d       	mov	r21, r9
     f62:	68 2d       	mov	r22, r8
     f64:	77 2d       	mov	r23, r7
     f66:	cb 01       	movw	r24, r22
     f68:	ba 01       	movw	r22, r20
     f6a:	d2 01       	movw	r26, r4
     f6c:	f1 01       	movw	r30, r2
     f6e:	2b 2f       	mov	r18, r27
     f70:	3a 2f       	mov	r19, r26
     f72:	4f 2f       	mov	r20, r31
     f74:	5e 2f       	mov	r21, r30
     f76:	0e 94 46 23 	call	0x468c	; 0x468c <__addsf3>
     f7a:	3b 01       	movw	r6, r22
     f7c:	4c 01       	movw	r8, r24
     f7e:	95 01       	movw	r18, r10
     f80:	60 2f       	mov	r22, r16
     f82:	71 2f       	mov	r23, r17
     f84:	83 2f       	mov	r24, r19
     f86:	92 2f       	mov	r25, r18
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	50 ec       	ldi	r21, 0xC0	; 192
     f90:	0e 94 73 23 	call	0x46e6	; 0x46e6 <__mulsf3>
     f94:	2c 2d       	mov	r18, r12
     f96:	3d 2d       	mov	r19, r13
     f98:	4e 2d       	mov	r20, r14
     f9a:	5f 2d       	mov	r21, r15
     f9c:	0e 94 73 23 	call	0x46e6	; 0x46e6 <__mulsf3>
     fa0:	29 81       	ldd	r18, Y+1	; 0x01
     fa2:	3a 81       	ldd	r19, Y+2	; 0x02
     fa4:	4b 81       	ldd	r20, Y+3	; 0x03
     fa6:	5c 81       	ldd	r21, Y+4	; 0x04
     fa8:	0e 94 73 23 	call	0x46e6	; 0x46e6 <__mulsf3>
     fac:	9b 01       	movw	r18, r22
     fae:	ac 01       	movw	r20, r24
     fb0:	c4 01       	movw	r24, r8
     fb2:	b3 01       	movw	r22, r6
     fb4:	0e 94 46 23 	call	0x468c	; 0x468c <__addsf3>
     fb8:	0e 94 ec 2a 	call	0x55d8	; 0x55d8 <sqrt>
     fbc:	0e 94 99 21 	call	0x4332	; 0x4332 <__fixunssfsi>
     fc0:	ed 81       	ldd	r30, Y+5	; 0x05
     fc2:	fe 81       	ldd	r31, Y+6	; 0x06
     fc4:	71 83       	std	Z+1, r23	; 0x01
     fc6:	60 83       	st	Z, r22
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__floatunsisf>
     fd0:	3b 01       	movw	r6, r22
     fd2:	4c 01       	movw	r8, r24
     fd4:	a4 01       	movw	r20, r8
     fd6:	93 01       	movw	r18, r6
     fd8:	0e 94 73 23 	call	0x46e6	; 0x46e6 <__mulsf3>
     fdc:	56 2f       	mov	r21, r22
     fde:	47 2f       	mov	r20, r23
     fe0:	38 2f       	mov	r19, r24
     fe2:	29 2f       	mov	r18, r25
     fe4:	d2 01       	movw	r26, r4
     fe6:	f1 01       	movw	r30, r2
     fe8:	6b 2f       	mov	r22, r27
     fea:	7a 2f       	mov	r23, r26
     fec:	8f 2f       	mov	r24, r31
     fee:	9e 2f       	mov	r25, r30
     ff0:	da 01       	movw	r26, r20
     ff2:	f9 01       	movw	r30, r18
     ff4:	2b 2f       	mov	r18, r27
     ff6:	3a 2f       	mov	r19, r26
     ff8:	4f 2f       	mov	r20, r31
     ffa:	5e 2f       	mov	r21, r30
     ffc:	0e 94 46 23 	call	0x468c	; 0x468c <__addsf3>
    1000:	1b 01       	movw	r2, r22
    1002:	2c 01       	movw	r4, r24
    1004:	6c 2d       	mov	r22, r12
    1006:	7d 2d       	mov	r23, r13
    1008:	8e 2d       	mov	r24, r14
    100a:	9f 2d       	mov	r25, r15
    100c:	a7 01       	movw	r20, r14
    100e:	96 01       	movw	r18, r12
    1010:	0e 94 73 23 	call	0x46e6	; 0x46e6 <__mulsf3>
    1014:	9b 01       	movw	r18, r22
    1016:	ac 01       	movw	r20, r24
    1018:	c2 01       	movw	r24, r4
    101a:	b1 01       	movw	r22, r2
    101c:	0e 94 15 23 	call	0x462a	; 0x462a <__subsf3>
    1020:	6b 01       	movw	r12, r22
    1022:	7c 01       	movw	r14, r24
    1024:	95 01       	movw	r18, r10
    1026:	60 2f       	mov	r22, r16
    1028:	71 2f       	mov	r23, r17
    102a:	83 2f       	mov	r24, r19
    102c:	92 2f       	mov	r25, r18
    102e:	f5 01       	movw	r30, r10
    1030:	20 2f       	mov	r18, r16
    1032:	31 2f       	mov	r19, r17
    1034:	4f 2f       	mov	r20, r31
    1036:	5e 2f       	mov	r21, r30
    1038:	0e 94 46 23 	call	0x468c	; 0x468c <__addsf3>
    103c:	a4 01       	movw	r20, r8
    103e:	93 01       	movw	r18, r6
    1040:	0e 94 73 23 	call	0x46e6	; 0x46e6 <__mulsf3>
    1044:	9b 01       	movw	r18, r22
    1046:	ac 01       	movw	r20, r24
    1048:	c7 01       	movw	r24, r14
    104a:	b6 01       	movw	r22, r12
    104c:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <__divsf3>
    1050:	0e 94 4c 29 	call	0x5298	; 0x5298 <acos>
    1054:	20 ee       	ldi	r18, 0xE0	; 224
    1056:	3e e2       	ldi	r19, 0x2E	; 46
    1058:	45 e6       	ldi	r20, 0x65	; 101
    105a:	52 e4       	ldi	r21, 0x42	; 66
    105c:	0e 94 73 23 	call	0x46e6	; 0x46e6 <__mulsf3>
    1060:	0e 94 99 21 	call	0x4332	; 0x4332 <__fixunssfsi>
    1064:	ef 81       	ldd	r30, Y+7	; 0x07
    1066:	f8 85       	ldd	r31, Y+8	; 0x08
    1068:	71 83       	std	Z+1, r23	; 0x01
    106a:	60 83       	st	Z, r22
    106c:	2a 96       	adiw	r28, 0x0a	; 10
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	df 90       	pop	r13
    1086:	cf 90       	pop	r12
    1088:	bf 90       	pop	r11
    108a:	af 90       	pop	r10
    108c:	9f 90       	pop	r9
    108e:	8f 90       	pop	r8
    1090:	7f 90       	pop	r7
    1092:	6f 90       	pop	r6
    1094:	5f 90       	pop	r5
    1096:	4f 90       	pop	r4
    1098:	3f 90       	pop	r3
    109a:	2f 90       	pop	r2
    109c:	08 95       	ret

0000109e <_ZN15CmissionconsoleC2Ev>:
    109e:	08 95       	ret

000010a0 <_ZN15CmissionconsoleC1Ev>:
    10a0:	08 95       	ret

000010a2 <_ZN15CmissionconsoleD2Ev>:
    10a2:	08 95       	ret

000010a4 <_ZN15CmissionconsoleD1Ev>:
    10a4:	08 95       	ret

000010a6 <_ZN15Cmissionconsole6enableEv>:
    10a6:	08 95       	ret

000010a8 <_ZN15Cmissionconsole7disableEv>:
    10a8:	08 95       	ret

000010aa <_ZN15Cmissionconsole5writeEh>:
    10aa:	08 95       	ret

000010ac <_ZN15Cmissionconsole5writeEPc>:
    10ac:	89 e7       	ldi	r24, 0x79	; 121
    10ae:	96 e0       	ldi	r25, 0x06	; 6
    10b0:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZN5Print7printlnEPKc>
    10b4:	08 95       	ret

000010b6 <_ZN15Cmissionconsole13mediumRangeIREj>:
    10b6:	ef 92       	push	r14
    10b8:	ff 92       	push	r15
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	8b 01       	movw	r16, r22
    10c4:	80 e4       	ldi	r24, 0x40	; 64
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	61 e0       	ldi	r22, 0x01	; 1
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <calloc>
    10d0:	e8 2e       	mov	r14, r24
    10d2:	e7 01       	movw	r28, r14
    10d4:	7e 01       	movw	r14, r28
    10d6:	f9 2e       	mov	r15, r25
    10d8:	e1 14       	cp	r14, r1
    10da:	f1 04       	cpc	r15, r1
    10dc:	29 f1       	breq	.+74     	; 0x1128 <_ZN15Cmissionconsole13mediumRangeIREj+0x72>
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <_ZN15Cmissionconsole13mediumRangeIREj+0x2a>
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <_ZN15Cmissionconsole13mediumRangeIREj+0x2c>
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <_ZN15Cmissionconsole13mediumRangeIREj+0x2e>
    10e4:	ed b7       	in	r30, 0x3d	; 61
    10e6:	fe b7       	in	r31, 0x3e	; 62
    10e8:	31 96       	adiw	r30, 0x01	; 1
    10ea:	ad b7       	in	r26, 0x3d	; 61
    10ec:	be b7       	in	r27, 0x3e	; 62
    10ee:	12 96       	adiw	r26, 0x02	; 2
    10f0:	fc 92       	st	X, r15
    10f2:	ee 92       	st	-X, r14
    10f4:	11 97       	sbiw	r26, 0x01	; 1
    10f6:	85 e2       	ldi	r24, 0x25	; 37
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	93 83       	std	Z+3, r25	; 0x03
    10fc:	82 83       	std	Z+2, r24	; 0x02
    10fe:	15 83       	std	Z+5, r17	; 0x05
    1100:	04 83       	std	Z+4, r16	; 0x04
    1102:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <sprintf>
    1106:	2d b7       	in	r18, 0x3d	; 61
    1108:	3e b7       	in	r19, 0x3e	; 62
    110a:	2a 5f       	subi	r18, 0xFA	; 250
    110c:	3f 4f       	sbci	r19, 0xFF	; 255
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	3e bf       	out	0x3e, r19	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	2d bf       	out	0x3d, r18	; 61
    1118:	89 e7       	ldi	r24, 0x79	; 121
    111a:	96 e0       	ldi	r25, 0x06	; 6
    111c:	b7 01       	movw	r22, r14
    111e:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZN5Print7printlnEPKc>
    1122:	c7 01       	movw	r24, r14
    1124:	0e 94 17 2c 	call	0x582e	; 0x582e <free>
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	ff 90       	pop	r15
    1132:	ef 90       	pop	r14
    1134:	08 95       	ret

00001136 <_ZN15Cmissionconsole11longRangeIREj>:
    1136:	ef 92       	push	r14
    1138:	ff 92       	push	r15
    113a:	0f 93       	push	r16
    113c:	1f 93       	push	r17
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	8b 01       	movw	r16, r22
    1144:	80 e4       	ldi	r24, 0x40	; 64
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	61 e0       	ldi	r22, 0x01	; 1
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <calloc>
    1150:	e8 2e       	mov	r14, r24
    1152:	e7 01       	movw	r28, r14
    1154:	7e 01       	movw	r14, r28
    1156:	f9 2e       	mov	r15, r25
    1158:	e1 14       	cp	r14, r1
    115a:	f1 04       	cpc	r15, r1
    115c:	29 f1       	breq	.+74     	; 0x11a8 <_ZN15Cmissionconsole11longRangeIREj+0x72>
    115e:	00 d0       	rcall	.+0      	; 0x1160 <_ZN15Cmissionconsole11longRangeIREj+0x2a>
    1160:	00 d0       	rcall	.+0      	; 0x1162 <_ZN15Cmissionconsole11longRangeIREj+0x2c>
    1162:	00 d0       	rcall	.+0      	; 0x1164 <_ZN15Cmissionconsole11longRangeIREj+0x2e>
    1164:	ed b7       	in	r30, 0x3d	; 61
    1166:	fe b7       	in	r31, 0x3e	; 62
    1168:	31 96       	adiw	r30, 0x01	; 1
    116a:	ad b7       	in	r26, 0x3d	; 61
    116c:	be b7       	in	r27, 0x3e	; 62
    116e:	12 96       	adiw	r26, 0x02	; 2
    1170:	fc 92       	st	X, r15
    1172:	ee 92       	st	-X, r14
    1174:	11 97       	sbiw	r26, 0x01	; 1
    1176:	86 e3       	ldi	r24, 0x36	; 54
    1178:	91 e0       	ldi	r25, 0x01	; 1
    117a:	93 83       	std	Z+3, r25	; 0x03
    117c:	82 83       	std	Z+2, r24	; 0x02
    117e:	15 83       	std	Z+5, r17	; 0x05
    1180:	04 83       	std	Z+4, r16	; 0x04
    1182:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <sprintf>
    1186:	2d b7       	in	r18, 0x3d	; 61
    1188:	3e b7       	in	r19, 0x3e	; 62
    118a:	2a 5f       	subi	r18, 0xFA	; 250
    118c:	3f 4f       	sbci	r19, 0xFF	; 255
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	3e bf       	out	0x3e, r19	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	2d bf       	out	0x3d, r18	; 61
    1198:	89 e7       	ldi	r24, 0x79	; 121
    119a:	96 e0       	ldi	r25, 0x06	; 6
    119c:	b7 01       	movw	r22, r14
    119e:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZN5Print7printlnEPKc>
    11a2:	c7 01       	movw	r24, r14
    11a4:	0e 94 17 2c 	call	0x582e	; 0x582e <free>
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	ff 90       	pop	r15
    11b2:	ef 90       	pop	r14
    11b4:	08 95       	ret

000011b6 <_ZN15Cmissionconsole7adValueEj>:
    11b6:	ef 92       	push	r14
    11b8:	ff 92       	push	r15
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	8b 01       	movw	r16, r22
    11c4:	80 e4       	ldi	r24, 0x40	; 64
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	61 e0       	ldi	r22, 0x01	; 1
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <calloc>
    11d0:	e8 2e       	mov	r14, r24
    11d2:	e7 01       	movw	r28, r14
    11d4:	7e 01       	movw	r14, r28
    11d6:	f9 2e       	mov	r15, r25
    11d8:	e1 14       	cp	r14, r1
    11da:	f1 04       	cpc	r15, r1
    11dc:	29 f1       	breq	.+74     	; 0x1228 <_ZN15Cmissionconsole7adValueEj+0x72>
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <_ZN15Cmissionconsole7adValueEj+0x2a>
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <_ZN15Cmissionconsole7adValueEj+0x2c>
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <_ZN15Cmissionconsole7adValueEj+0x2e>
    11e4:	ed b7       	in	r30, 0x3d	; 61
    11e6:	fe b7       	in	r31, 0x3e	; 62
    11e8:	31 96       	adiw	r30, 0x01	; 1
    11ea:	ad b7       	in	r26, 0x3d	; 61
    11ec:	be b7       	in	r27, 0x3e	; 62
    11ee:	12 96       	adiw	r26, 0x02	; 2
    11f0:	fc 92       	st	X, r15
    11f2:	ee 92       	st	-X, r14
    11f4:	11 97       	sbiw	r26, 0x01	; 1
    11f6:	87 e4       	ldi	r24, 0x47	; 71
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	93 83       	std	Z+3, r25	; 0x03
    11fc:	82 83       	std	Z+2, r24	; 0x02
    11fe:	15 83       	std	Z+5, r17	; 0x05
    1200:	04 83       	std	Z+4, r16	; 0x04
    1202:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <sprintf>
    1206:	2d b7       	in	r18, 0x3d	; 61
    1208:	3e b7       	in	r19, 0x3e	; 62
    120a:	2a 5f       	subi	r18, 0xFA	; 250
    120c:	3f 4f       	sbci	r19, 0xFF	; 255
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	3e bf       	out	0x3e, r19	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	2d bf       	out	0x3d, r18	; 61
    1218:	89 e7       	ldi	r24, 0x79	; 121
    121a:	96 e0       	ldi	r25, 0x06	; 6
    121c:	b7 01       	movw	r22, r14
    121e:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZN5Print7printlnEPKc>
    1222:	c7 01       	movw	r24, r14
    1224:	0e 94 17 2c 	call	0x582e	; 0x582e <free>
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	08 95       	ret

00001236 <_ZN17AFMotorControllerC2Ev>:
#elif (MICROSTEPS == 16)
uint8_t microstepcurve[] = {0, 25, 50, 74, 98, 120, 141, 162, 180, 197, 212, 225, 236, 244, 250, 253, 255};
#endif

AFMotorController::AFMotorController(void) {
}
    1236:	08 95       	ret

00001238 <_ZN17AFMotorControllerC1Ev>:
    1238:	08 95       	ret

0000123a <_ZN10AF_DCMotor8setSpeedEh>:
    break;
  }
}

void AF_DCMotor::setSpeed(uint8_t speed) {
  switch (motornum) {
    123a:	fc 01       	movw	r30, r24
    123c:	80 81       	ld	r24, Z
    123e:	82 30       	cpi	r24, 0x02	; 2
    1240:	71 f0       	breq	.+28     	; 0x125e <_ZN10AF_DCMotor8setSpeedEh+0x24>
    1242:	83 30       	cpi	r24, 0x03	; 3
    1244:	28 f0       	brcs	.+10     	; 0x1250 <_ZN10AF_DCMotor8setSpeedEh+0x16>
    1246:	83 30       	cpi	r24, 0x03	; 3
    1248:	69 f0       	breq	.+26     	; 0x1264 <_ZN10AF_DCMotor8setSpeedEh+0x2a>
    124a:	84 30       	cpi	r24, 0x04	; 4
    124c:	31 f0       	breq	.+12     	; 0x125a <_ZN10AF_DCMotor8setSpeedEh+0x20>
    124e:	08 95       	ret
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	e9 f7       	brne	.-6      	; 0x124e <_ZN10AF_DCMotor8setSpeedEh+0x14>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    1254:	60 93 b3 00 	sts	0x00B3, r22
}

void AF_DCMotor::setSpeed(uint8_t speed) {
  switch (motornum) {
  case 1:
    setPWM1(speed); break;
    1258:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    125a:	68 bd       	out	0x28, r22	; 40
    125c:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    125e:	60 93 b4 00 	sts	0x00B4, r22
void AF_DCMotor::setSpeed(uint8_t speed) {
  switch (motornum) {
  case 1:
    setPWM1(speed); break;
  case 2:
    setPWM2(speed); break;
    1262:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    1264:	67 bd       	out	0x27, r22	; 39
  case 1:
    setPWM1(speed); break;
  case 2:
    setPWM2(speed); break;
  case 3:
    setPWM3(speed); break;
    1266:	08 95       	ret

00001268 <_ZN10AF_Stepper8setSpeedEj>:
    setPWM3(255);
    setPWM4(255);
  }
}

void AF_Stepper::setSpeed(uint16_t rpm) {
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	ec 01       	movw	r28, r24
  uint32_t tmp = 0;
  tmp = revsteps * rpm;
  usperstep = 60000000 / tmp;
    126e:	88 81       	ld	r24, Y
    1270:	99 81       	ldd	r25, Y+1	; 0x01
    1272:	68 9f       	mul	r22, r24
    1274:	90 01       	movw	r18, r0
    1276:	69 9f       	mul	r22, r25
    1278:	30 0d       	add	r19, r0
    127a:	78 9f       	mul	r23, r24
    127c:	30 0d       	add	r19, r0
    127e:	11 24       	eor	r1, r1
    1280:	40 e0       	ldi	r20, 0x00	; 0
    1282:	50 e0       	ldi	r21, 0x00	; 0
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	77 e8       	ldi	r23, 0x87	; 135
    1288:	83 e9       	ldi	r24, 0x93	; 147
    128a:	93 e0       	ldi	r25, 0x03	; 3
    128c:	0e 94 ed 28 	call	0x51da	; 0x51da <__udivmodsi4>
    1290:	2b 83       	std	Y+3, r18	; 0x03
    1292:	3c 83       	std	Y+4, r19	; 0x04
    1294:	4d 83       	std	Y+5, r20	; 0x05
    1296:	5e 83       	std	Y+6, r21	; 0x06
  // wont compile with -O2 or -O3 - see bug http://gcc.gnu.org/bugzilla/show_bug.cgi?id=44245#c5
  //usperstep = 60000000 / ((uint32_t)revsteps * (uint32_t)rpm);
  steppingcounter = 0;
    1298:	1f 82       	std	Y+7, r1	; 0x07
    129a:	18 86       	std	Y+8, r1	; 0x08
    129c:	19 86       	std	Y+9, r1	; 0x09
    129e:	1a 86       	std	Y+10, r1	; 0x0a
}
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	08 95       	ret

000012a6 <_GLOBAL__I_microstepcurve>:
  }

 
  MC.latch_tx();
  return currentstep;
}
    12a6:	08 95       	ret

000012a8 <_ZN17AFMotorController8latch_txEv>:
  //ENABLE_PORT &= ~_BV(ENABLE); // enable the chip outputs!
  digitalWrite(MOTORENABLE, LOW);
}


void AFMotorController::latch_tx(void) {
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
  uint8_t i;

  //LATCH_PORT &= ~_BV(LATCH);
  digitalWrite(MOTORLATCH, LOW);
    12ac:	8c e0       	ldi	r24, 0x0C	; 12
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>

  //SER_PORT &= ~_BV(SER);
  digitalWrite(MOTORDATA, LOW);
    12b4:	88 e0       	ldi	r24, 0x08	; 8
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
    12bc:	c7 e0       	ldi	r28, 0x07	; 7
    12be:	d0 e0       	ldi	r29, 0x00	; 0
    12c0:	0d c0       	rjmp	.+26     	; 0x12dc <_ZN17AFMotorController8latch_txEv+0x34>
    //CLK_PORT &= ~_BV(CLK);
    digitalWrite(MOTORCLK, LOW);

    if (latch_state & _BV(7-i)) {
      //SER_PORT |= _BV(SER);
      digitalWrite(MOTORDATA, HIGH);
    12c2:	88 e0       	ldi	r24, 0x08	; 8
    12c4:	61 e0       	ldi	r22, 0x01	; 1
    12c6:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
    } else {
      //SER_PORT &= ~_BV(SER);
      digitalWrite(MOTORDATA, LOW);
    }
    //CLK_PORT |= _BV(CLK);
    digitalWrite(MOTORCLK, HIGH);
    12ca:	84 e0       	ldi	r24, 0x04	; 4
    12cc:	61 e0       	ldi	r22, 0x01	; 1
    12ce:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
    12d2:	21 97       	sbiw	r28, 0x01	; 1
  digitalWrite(MOTORLATCH, LOW);

  //SER_PORT &= ~_BV(SER);
  digitalWrite(MOTORDATA, LOW);

  for (i=0; i<8; i++) {
    12d4:	3f ef       	ldi	r19, 0xFF	; 255
    12d6:	cf 3f       	cpi	r28, 0xFF	; 255
    12d8:	d3 07       	cpc	r29, r19
    12da:	a1 f0       	breq	.+40     	; 0x1304 <_ZN17AFMotorController8latch_txEv+0x5c>
    //CLK_PORT &= ~_BV(CLK);
    digitalWrite(MOTORCLK, LOW);
    12dc:	84 e0       	ldi	r24, 0x04	; 4
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>

    if (latch_state & _BV(7-i)) {
    12e4:	80 91 f4 05 	lds	r24, 0x05F4
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0c 2e       	mov	r0, r28
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <_ZN17AFMotorController8latch_txEv+0x4a>
    12ee:	95 95       	asr	r25
    12f0:	87 95       	ror	r24
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <_ZN17AFMotorController8latch_txEv+0x46>
    12f6:	80 fd       	sbrc	r24, 0
    12f8:	e4 cf       	rjmp	.-56     	; 0x12c2 <_ZN17AFMotorController8latch_txEv+0x1a>
      //SER_PORT |= _BV(SER);
      digitalWrite(MOTORDATA, HIGH);
    } else {
      //SER_PORT &= ~_BV(SER);
      digitalWrite(MOTORDATA, LOW);
    12fa:	88 e0       	ldi	r24, 0x08	; 8
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
    1302:	e3 cf       	rjmp	.-58     	; 0x12ca <_ZN17AFMotorController8latch_txEv+0x22>
    }
    //CLK_PORT |= _BV(CLK);
    digitalWrite(MOTORCLK, HIGH);
  }
  //LATCH_PORT |= _BV(LATCH);
  digitalWrite(MOTORLATCH, HIGH);
    1304:	8c e0       	ldi	r24, 0x0C	; 12
    1306:	61 e0       	ldi	r22, 0x01	; 1
    1308:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
}
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	08 95       	ret

00001312 <_ZN10AF_Stepper7onestepEhh>:
      } 
    }
  }
}

uint8_t AF_Stepper::onestep(uint8_t dir, uint8_t style) {
    1312:	df 92       	push	r13
    1314:	ef 92       	push	r14
    1316:	ff 92       	push	r15
    1318:	0f 93       	push	r16
    131a:	1f 93       	push	r17
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	ec 01       	movw	r28, r24
  uint8_t a, b, c, d;
  uint8_t ocrb, ocra;

  ocra = ocrb = 255;

  if (steppernum == 1) {
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	09 f4       	brne	.+2      	; 0x132a <_ZN10AF_Stepper7onestepEhh+0x18>
    1328:	71 c0       	rjmp	.+226    	; 0x140c <_ZN10AF_Stepper7onestepEhh+0xfa>
    a = _BV(MOTOR1_A);
    b = _BV(MOTOR2_A);
    c = _BV(MOTOR1_B);
    d = _BV(MOTOR2_B);
  } else if (steppernum == 2) {
    132a:	82 30       	cpi	r24, 0x02	; 2
    132c:	49 f0       	breq	.+18     	; 0x1340 <_ZN10AF_Stepper7onestepEhh+0x2e>
    132e:	80 e0       	ldi	r24, 0x00	; 0
  }

 
  MC.latch_tx();
  return currentstep;
}
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	ff 90       	pop	r15
    133a:	ef 90       	pop	r14
    133c:	df 90       	pop	r13
    133e:	08 95       	ret
  if (steppernum == 1) {
    a = _BV(MOTOR1_A);
    b = _BV(MOTOR2_A);
    c = _BV(MOTOR1_B);
    d = _BV(MOTOR2_B);
  } else if (steppernum == 2) {
    1340:	2e e1       	ldi	r18, 0x1E	; 30
    1342:	91 e2       	ldi	r25, 0x21	; 33
    1344:	d9 2e       	mov	r13, r25
    1346:	30 e4       	ldi	r19, 0x40	; 64
    1348:	50 e8       	ldi	r21, 0x80	; 128
    134a:	e1 e0       	ldi	r30, 0x01	; 1
    134c:	f0 e2       	ldi	r31, 0x20	; 32
  } else {
    return 0;
  }

  // next determine what sort of stepping procedure we're up to
  if (style == SINGLE) {
    134e:	41 30       	cpi	r20, 0x01	; 1
    1350:	01 f1       	breq	.+64     	; 0x1392 <_ZN10AF_Stepper7onestepEhh+0x80>
      }
      else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == DOUBLE) {
    1352:	42 30       	cpi	r20, 0x02	; 2
    1354:	09 f4       	brne	.+2      	; 0x1358 <_ZN10AF_Stepper7onestepEhh+0x46>
    1356:	95 c0       	rjmp	.+298    	; 0x1482 <_ZN10AF_Stepper7onestepEhh+0x170>
	currentstep += MICROSTEPS;
      } else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == INTERLEAVE) {
    1358:	43 30       	cpi	r20, 0x03	; 3
    135a:	09 f4       	brne	.+2      	; 0x135e <_ZN10AF_Stepper7onestepEhh+0x4c>
    135c:	a2 c0       	rjmp	.+324    	; 0x14a2 <_ZN10AF_Stepper7onestepEhh+0x190>
    135e:	9b 85       	ldd	r25, Y+11	; 0x0b
    } else {
       currentstep -= MICROSTEPS/2;
    }
  } 

  if (style == MICROSTEP) {
    1360:	44 30       	cpi	r20, 0x04	; 4
    1362:	21 f5       	brne	.+72     	; 0x13ac <_ZN10AF_Stepper7onestepEhh+0x9a>
    if (dir == FORWARD) {
    1364:	61 30       	cpi	r22, 0x01	; 1
    1366:	09 f4       	brne	.+2      	; 0x136a <_ZN10AF_Stepper7onestepEhh+0x58>
    1368:	f3 c0       	rjmp	.+486    	; 0x1550 <_ZN10AF_Stepper7onestepEhh+0x23e>
      currentstep++;
    } else {
      // BACKWARDS
      currentstep--;
    136a:	91 50       	subi	r25, 0x01	; 1
    136c:	9b 87       	std	Y+11, r25	; 0x0b
    }

    currentstep += MICROSTEPS*4;
    currentstep %= MICROSTEPS*4;
    136e:	9f 73       	andi	r25, 0x3F	; 63
    1370:	9b 87       	std	Y+11, r25	; 0x0b

    ocra = ocrb = 0;
    if ( (currentstep >= 0) && (currentstep < MICROSTEPS)) {
    1372:	90 31       	cpi	r25, 0x10	; 16
    1374:	08 f0       	brcs	.+2      	; 0x1378 <_ZN10AF_Stepper7onestepEhh+0x66>
    1376:	99 c0       	rjmp	.+306    	; 0x14aa <_ZN10AF_Stepper7onestepEhh+0x198>
      ocra = microstepcurve[MICROSTEPS - currentstep];
    1378:	09 2f       	mov	r16, r25
    137a:	10 e0       	ldi	r17, 0x00	; 0
    137c:	63 e6       	ldi	r22, 0x63	; 99
    137e:	71 e0       	ldi	r23, 0x01	; 1
    1380:	60 1b       	sub	r22, r16
    1382:	71 0b       	sbc	r23, r17
    1384:	db 01       	movw	r26, r22
    1386:	7c 91       	ld	r23, X
      ocrb = microstepcurve[currentstep];
    1388:	0d 5a       	subi	r16, 0xAD	; 173
    138a:	1e 4f       	sbci	r17, 0xFE	; 254
    138c:	d8 01       	movw	r26, r16
    138e:	6c 91       	ld	r22, X
    1390:	0f c0       	rjmp	.+30     	; 0x13b0 <_ZN10AF_Stepper7onestepEhh+0x9e>
    return 0;
  }

  // next determine what sort of stepping procedure we're up to
  if (style == SINGLE) {
    if ((currentstep/(MICROSTEPS/2)) % 2) { // we're at an odd step, weird
    1392:	9b 85       	ldd	r25, Y+11	; 0x0b
    1394:	79 2f       	mov	r23, r25
    1396:	76 95       	lsr	r23
    1398:	76 95       	lsr	r23
    139a:	76 95       	lsr	r23
    139c:	70 ff       	sbrs	r23, 0
    139e:	9b c0       	rjmp	.+310    	; 0x14d6 <_ZN10AF_Stepper7onestepEhh+0x1c4>
      if (dir == FORWARD) {
    13a0:	61 30       	cpi	r22, 0x01	; 1
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <_ZN10AF_Stepper7onestepEhh+0x94>
    13a4:	dc c0       	rjmp	.+440    	; 0x155e <_ZN10AF_Stepper7onestepEhh+0x24c>
	currentstep += MICROSTEPS/2;
      }
      else {
	currentstep -= MICROSTEPS/2;
    13a6:	98 50       	subi	r25, 0x08	; 8
    13a8:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
    13aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    13ac:	7f ef       	ldi	r23, 0xFF	; 255
    13ae:	6f ef       	ldi	r22, 0xFF	; 255
      ocrb = microstepcurve[MICROSTEPS*4 - currentstep];
    }
  }

  currentstep += MICROSTEPS*4;
  currentstep %= MICROSTEPS*4;
    13b0:	9f 73       	andi	r25, 0x3F	; 63
    13b2:	9b 87       	std	Y+11, r25	; 0x0b
  Serial.print("current step: "); Serial.println(currentstep, DEC);
  Serial.print(" pwmA = "); Serial.print(ocra, DEC); 
  Serial.print(" pwmB = "); Serial.println(ocrb, DEC); 
#endif

  if (steppernum == 1) {
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	09 f4       	brne	.+2      	; 0x13ba <_ZN10AF_Stepper7onestepEhh+0xa8>
    13b8:	5f c0       	rjmp	.+190    	; 0x1478 <_ZN10AF_Stepper7onestepEhh+0x166>
    setPWM1(ocra);
    setPWM2(ocrb);
  } else if (steppernum == 2) {
    13ba:	82 30       	cpi	r24, 0x02	; 2
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <_ZN10AF_Stepper7onestepEhh+0xae>
    13be:	6e c0       	rjmp	.+220    	; 0x149c <_ZN10AF_Stepper7onestepEhh+0x18a>
    setPWM4(ocrb);
  }


  // release all
  latch_state &= ~a & ~b & ~c & ~d; // all motor pins to 0
    13c0:	80 91 f4 05 	lds	r24, 0x05F4
    13c4:	82 23       	and	r24, r18
    13c6:	80 93 f4 05 	sts	0x05F4, r24

  //Serial.println(step, DEC);
  if (style == MICROSTEP) {
    13ca:	44 30       	cpi	r20, 0x04	; 4
    13cc:	91 f1       	breq	.+100    	; 0x1432 <_ZN10AF_Stepper7onestepEhh+0x120>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
    13ce:	96 95       	lsr	r25
    13d0:	96 95       	lsr	r25
    13d2:	96 95       	lsr	r25
    13d4:	94 30       	cpi	r25, 0x04	; 4
    13d6:	09 f4       	brne	.+2      	; 0x13da <_ZN10AF_Stepper7onestepEhh+0xc8>
    13d8:	af c0       	rjmp	.+350    	; 0x1538 <_ZN10AF_Stepper7onestepEhh+0x226>
    13da:	95 30       	cpi	r25, 0x05	; 5
    13dc:	f8 f0       	brcs	.+62     	; 0x141c <_ZN10AF_Stepper7onestepEhh+0x10a>
    13de:	96 30       	cpi	r25, 0x06	; 6
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <_ZN10AF_Stepper7onestepEhh+0xd2>
    13e2:	ae c0       	rjmp	.+348    	; 0x1540 <_ZN10AF_Stepper7onestepEhh+0x22e>
    13e4:	96 30       	cpi	r25, 0x06	; 6
    13e6:	08 f0       	brcs	.+2      	; 0x13ea <_ZN10AF_Stepper7onestepEhh+0xd8>
    13e8:	87 c0       	rjmp	.+270    	; 0x14f8 <_ZN10AF_Stepper7onestepEhh+0x1e6>
      break;
    case 4:
      latch_state |= c; // energize coil 3 only
      break; 
    case 5:
      latch_state |= c | d; // energize coil 3+4
    13ea:	35 2b       	or	r19, r21
    13ec:	38 2b       	or	r19, r24
    13ee:	30 93 f4 05 	sts	0x05F4, r19
      break;
    }
  }

 
  MC.latch_tx();
    13f2:	83 ef       	ldi	r24, 0xF3	; 243
    13f4:	95 e0       	ldi	r25, 0x05	; 5
    13f6:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN17AFMotorController8latch_txEv>
  return currentstep;
    13fa:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	ff 90       	pop	r15
    1406:	ef 90       	pop	r14
    1408:	df 90       	pop	r13
    140a:	08 95       	ret
  uint8_t a, b, c, d;
  uint8_t ocrb, ocra;

  ocra = ocrb = 255;

  if (steppernum == 1) {
    140c:	21 ee       	ldi	r18, 0xE1	; 225
    140e:	36 e0       	ldi	r19, 0x06	; 6
    1410:	d3 2e       	mov	r13, r19
    1412:	30 e1       	ldi	r19, 0x10	; 16
    1414:	58 e0       	ldi	r21, 0x08	; 8
    1416:	e2 e0       	ldi	r30, 0x02	; 2
    1418:	f4 e0       	ldi	r31, 0x04	; 4
    141a:	99 cf       	rjmp	.-206    	; 0x134e <_ZN10AF_Stepper7onestepEhh+0x3c>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
    141c:	92 30       	cpi	r25, 0x02	; 2
    141e:	09 f4       	brne	.+2      	; 0x1422 <_ZN10AF_Stepper7onestepEhh+0x110>
    1420:	93 c0       	rjmp	.+294    	; 0x1548 <_ZN10AF_Stepper7onestepEhh+0x236>
    1422:	93 30       	cpi	r25, 0x03	; 3
    1424:	08 f4       	brcc	.+2      	; 0x1428 <_ZN10AF_Stepper7onestepEhh+0x116>
    1426:	62 c0       	rjmp	.+196    	; 0x14ec <_ZN10AF_Stepper7onestepEhh+0x1da>
      break;
    case 2:
      latch_state |= b; // energize coil 2 only
      break;
    case 3:
      latch_state |= b | c; // energize coil 2+3
    1428:	5e 2b       	or	r21, r30
    142a:	58 2b       	or	r21, r24
    142c:	50 93 f4 05 	sts	0x05F4, r21
      break;
    1430:	e0 cf       	rjmp	.-64     	; 0x13f2 <_ZN10AF_Stepper7onestepEhh+0xe0>
  // release all
  latch_state &= ~a & ~b & ~c & ~d; // all motor pins to 0

  //Serial.println(step, DEC);
  if (style == MICROSTEP) {
    if ((currentstep >= 0) && (currentstep < MICROSTEPS))
    1432:	90 31       	cpi	r25, 0x10	; 16
    1434:	18 f4       	brcc	.+6      	; 0x143c <_ZN10AF_Stepper7onestepEhh+0x12a>
      latch_state |= a | b;
    1436:	8d 29       	or	r24, r13
    1438:	80 93 f4 05 	sts	0x05F4, r24
    if ((currentstep >= MICROSTEPS) && (currentstep < MICROSTEPS*2))
    143c:	89 2f       	mov	r24, r25
    143e:	80 51       	subi	r24, 0x10	; 16
    1440:	80 31       	cpi	r24, 0x10	; 16
    1442:	30 f4       	brcc	.+12     	; 0x1450 <_ZN10AF_Stepper7onestepEhh+0x13e>
      latch_state |= b | c;
    1444:	e5 2b       	or	r30, r21
    1446:	20 91 f4 05 	lds	r18, 0x05F4
    144a:	2e 2b       	or	r18, r30
    144c:	20 93 f4 05 	sts	0x05F4, r18
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
    1450:	89 2f       	mov	r24, r25
    1452:	80 52       	subi	r24, 0x20	; 32
    1454:	80 31       	cpi	r24, 0x10	; 16
    1456:	30 f4       	brcc	.+12     	; 0x1464 <_ZN10AF_Stepper7onestepEhh+0x152>
      latch_state |= c | d;
    1458:	53 2b       	or	r21, r19
    145a:	20 91 f4 05 	lds	r18, 0x05F4
    145e:	25 2b       	or	r18, r21
    1460:	20 93 f4 05 	sts	0x05F4, r18
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
    1464:	90 53       	subi	r25, 0x30	; 48
    1466:	90 31       	cpi	r25, 0x10	; 16
    1468:	20 f6       	brcc	.-120    	; 0x13f2 <_ZN10AF_Stepper7onestepEhh+0xe0>
      latch_state |= d | a;
    146a:	3f 2b       	or	r19, r31
    146c:	90 91 f4 05 	lds	r25, 0x05F4
    1470:	93 2b       	or	r25, r19
    1472:	90 93 f4 05 	sts	0x05F4, r25
    1476:	bd cf       	rjmp	.-134    	; 0x13f2 <_ZN10AF_Stepper7onestepEhh+0xe0>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    1478:	70 93 b3 00 	sts	0x00B3, r23
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    147c:	60 93 b4 00 	sts	0x00B4, r22
    1480:	9f cf       	rjmp	.-194    	; 0x13c0 <_ZN10AF_Stepper7onestepEhh+0xae>
      else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == DOUBLE) {
    if (! (currentstep/(MICROSTEPS/2) % 2)) { // we're at an even step, weird
    1482:	9b 85       	ldd	r25, Y+11	; 0x0b
    1484:	79 2f       	mov	r23, r25
    1486:	76 95       	lsr	r23
    1488:	76 95       	lsr	r23
    148a:	76 95       	lsr	r23
    148c:	70 fd       	sbrc	r23, 0
    148e:	29 c0       	rjmp	.+82     	; 0x14e2 <_ZN10AF_Stepper7onestepEhh+0x1d0>
      if (dir == FORWARD) {
    1490:	61 30       	cpi	r22, 0x01	; 1
    1492:	09 f4       	brne	.+2      	; 0x1496 <_ZN10AF_Stepper7onestepEhh+0x184>
    1494:	47 c0       	rjmp	.+142    	; 0x1524 <_ZN10AF_Stepper7onestepEhh+0x212>
    }
  } else if (style == INTERLEAVE) {
    if (dir == FORWARD) {
       currentstep += MICROSTEPS/2;
    } else {
       currentstep -= MICROSTEPS/2;
    1496:	98 50       	subi	r25, 0x08	; 8
    1498:	9b 87       	std	Y+11, r25	; 0x0b
    149a:	88 cf       	rjmp	.-240    	; 0x13ac <_ZN10AF_Stepper7onestepEhh+0x9a>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    149c:	77 bd       	out	0x27, r23	; 39
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    149e:	68 bd       	out	0x28, r22	; 40
    14a0:	8f cf       	rjmp	.-226    	; 0x13c0 <_ZN10AF_Stepper7onestepEhh+0xae>
      } else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == INTERLEAVE) {
    if (dir == FORWARD) {
    14a2:	61 30       	cpi	r22, 0x01	; 1
    14a4:	f1 f1       	breq	.+124    	; 0x1522 <_ZN10AF_Stepper7onestepEhh+0x210>
       currentstep += MICROSTEPS/2;
    } else {
       currentstep -= MICROSTEPS/2;
    14a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    14a8:	f6 cf       	rjmp	.-20     	; 0x1496 <_ZN10AF_Stepper7onestepEhh+0x184>

    ocra = ocrb = 0;
    if ( (currentstep >= 0) && (currentstep < MICROSTEPS)) {
      ocra = microstepcurve[MICROSTEPS - currentstep];
      ocrb = microstepcurve[currentstep];
    } else if  ( (currentstep >= MICROSTEPS) && (currentstep < MICROSTEPS*2)) {
    14aa:	69 2f       	mov	r22, r25
    14ac:	60 51       	subi	r22, 0x10	; 16
    14ae:	60 31       	cpi	r22, 0x10	; 16
    14b0:	50 f1       	brcs	.+84     	; 0x1506 <_ZN10AF_Stepper7onestepEhh+0x1f4>
      ocra = microstepcurve[currentstep - MICROSTEPS];
      ocrb = microstepcurve[MICROSTEPS*2 - currentstep];
    } else if  ( (currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3)) {
    14b2:	69 2f       	mov	r22, r25
    14b4:	60 52       	subi	r22, 0x20	; 32
    14b6:	60 31       	cpi	r22, 0x10	; 16
    14b8:	08 f0       	brcs	.+2      	; 0x14bc <_ZN10AF_Stepper7onestepEhh+0x1aa>
    14ba:	55 c0       	rjmp	.+170    	; 0x1566 <_ZN10AF_Stepper7onestepEhh+0x254>
      ocra = microstepcurve[MICROSTEPS*3 - currentstep];
    14bc:	09 2f       	mov	r16, r25
    14be:	10 e0       	ldi	r17, 0x00	; 0
    14c0:	63 e8       	ldi	r22, 0x83	; 131
    14c2:	71 e0       	ldi	r23, 0x01	; 1
    14c4:	60 1b       	sub	r22, r16
    14c6:	71 0b       	sbc	r23, r17
    14c8:	db 01       	movw	r26, r22
    14ca:	7c 91       	ld	r23, X
      ocrb = microstepcurve[currentstep - MICROSTEPS*2];
    14cc:	0d 5c       	subi	r16, 0xCD	; 205
    14ce:	1e 4f       	sbci	r17, 0xFE	; 254
    14d0:	d8 01       	movw	r26, r16
    14d2:	6c 91       	ld	r22, X
    14d4:	6d cf       	rjmp	.-294    	; 0x13b0 <_ZN10AF_Stepper7onestepEhh+0x9e>
      }
      else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next even step
      if (dir == FORWARD) {
    14d6:	61 30       	cpi	r22, 0x01	; 1
    14d8:	f1 f1       	breq	.+124    	; 0x1556 <_ZN10AF_Stepper7onestepEhh+0x244>
	currentstep += MICROSTEPS;
      }
      else {
	currentstep -= MICROSTEPS;
    14da:	90 51       	subi	r25, 0x10	; 16
    14dc:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
    14de:	9b 85       	ldd	r25, Y+11	; 0x0b
    14e0:	65 cf       	rjmp	.-310    	; 0x13ac <_ZN10AF_Stepper7onestepEhh+0x9a>
	currentstep += MICROSTEPS/2;
      } else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next odd step
      if (dir == FORWARD) {
    14e2:	61 30       	cpi	r22, 0x01	; 1
    14e4:	11 f1       	breq	.+68     	; 0x152a <_ZN10AF_Stepper7onestepEhh+0x218>
	currentstep += MICROSTEPS;
      } else {
	currentstep -= MICROSTEPS;
    14e6:	90 51       	subi	r25, 0x10	; 16
    14e8:	9b 87       	std	Y+11, r25	; 0x0b
    14ea:	60 cf       	rjmp	.-320    	; 0x13ac <_ZN10AF_Stepper7onestepEhh+0x9a>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
    14ec:	91 30       	cpi	r25, 0x01	; 1
    14ee:	01 f1       	breq	.+64     	; 0x1530 <_ZN10AF_Stepper7onestepEhh+0x21e>
    case 0:
      latch_state |= a; // energize coil 1 only
    14f0:	8f 2b       	or	r24, r31
    14f2:	80 93 f4 05 	sts	0x05F4, r24
      break;
    14f6:	7d cf       	rjmp	.-262    	; 0x13f2 <_ZN10AF_Stepper7onestepEhh+0xe0>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
    14f8:	97 30       	cpi	r25, 0x07	; 7
    14fa:	d1 f7       	brne	.-12     	; 0x14f0 <_ZN10AF_Stepper7onestepEhh+0x1de>
      break;
    case 6:
      latch_state |= d; // energize coil 4 only
      break;
    case 7:
      latch_state |= d | a; // energize coil 1+4
    14fc:	3f 2b       	or	r19, r31
    14fe:	38 2b       	or	r19, r24
    1500:	30 93 f4 05 	sts	0x05F4, r19
    1504:	76 cf       	rjmp	.-276    	; 0x13f2 <_ZN10AF_Stepper7onestepEhh+0xe0>
    ocra = ocrb = 0;
    if ( (currentstep >= 0) && (currentstep < MICROSTEPS)) {
      ocra = microstepcurve[MICROSTEPS - currentstep];
      ocrb = microstepcurve[currentstep];
    } else if  ( (currentstep >= MICROSTEPS) && (currentstep < MICROSTEPS*2)) {
      ocra = microstepcurve[currentstep - MICROSTEPS];
    1506:	e9 2e       	mov	r14, r25
    1508:	ff 24       	eor	r15, r15
    150a:	b7 01       	movw	r22, r14
    150c:	6d 5b       	subi	r22, 0xBD	; 189
    150e:	7e 4f       	sbci	r23, 0xFE	; 254
    1510:	db 01       	movw	r26, r22
    1512:	7c 91       	ld	r23, X
      ocrb = microstepcurve[MICROSTEPS*2 - currentstep];
    1514:	03 e7       	ldi	r16, 0x73	; 115
    1516:	11 e0       	ldi	r17, 0x01	; 1
    1518:	0e 19       	sub	r16, r14
    151a:	1f 09       	sbc	r17, r15
    151c:	d8 01       	movw	r26, r16
    151e:	6c 91       	ld	r22, X
    1520:	47 cf       	rjmp	.-370    	; 0x13b0 <_ZN10AF_Stepper7onestepEhh+0x9e>
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == INTERLEAVE) {
    if (dir == FORWARD) {
       currentstep += MICROSTEPS/2;
    1522:	9b 85       	ldd	r25, Y+11	; 0x0b
    1524:	98 5f       	subi	r25, 0xF8	; 248
    1526:	9b 87       	std	Y+11, r25	; 0x0b
    1528:	41 cf       	rjmp	.-382    	; 0x13ac <_ZN10AF_Stepper7onestepEhh+0x9a>
      } else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next odd step
      if (dir == FORWARD) {
	currentstep += MICROSTEPS;
    152a:	90 5f       	subi	r25, 0xF0	; 240
    152c:	9b 87       	std	Y+11, r25	; 0x0b
    152e:	3e cf       	rjmp	.-388    	; 0x13ac <_ZN10AF_Stepper7onestepEhh+0x9a>
    switch (currentstep/(MICROSTEPS/2)) {
    case 0:
      latch_state |= a; // energize coil 1 only
      break;
    case 1:
      latch_state |= a | b; // energize coil 1+2
    1530:	8d 29       	or	r24, r13
    1532:	80 93 f4 05 	sts	0x05F4, r24
      break;
    1536:	5d cf       	rjmp	.-326    	; 0x13f2 <_ZN10AF_Stepper7onestepEhh+0xe0>
      break;
    case 3:
      latch_state |= b | c; // energize coil 2+3
      break;
    case 4:
      latch_state |= c; // energize coil 3 only
    1538:	85 2b       	or	r24, r21
    153a:	80 93 f4 05 	sts	0x05F4, r24
      break; 
    153e:	59 cf       	rjmp	.-334    	; 0x13f2 <_ZN10AF_Stepper7onestepEhh+0xe0>
    case 5:
      latch_state |= c | d; // energize coil 3+4
      break;
    case 6:
      latch_state |= d; // energize coil 4 only
    1540:	83 2b       	or	r24, r19
    1542:	80 93 f4 05 	sts	0x05F4, r24
      break;
    1546:	55 cf       	rjmp	.-342    	; 0x13f2 <_ZN10AF_Stepper7onestepEhh+0xe0>
      break;
    case 1:
      latch_state |= a | b; // energize coil 1+2
      break;
    case 2:
      latch_state |= b; // energize coil 2 only
    1548:	8e 2b       	or	r24, r30
    154a:	80 93 f4 05 	sts	0x05F4, r24
      break;
    154e:	51 cf       	rjmp	.-350    	; 0x13f2 <_ZN10AF_Stepper7onestepEhh+0xe0>
    }
  } 

  if (style == MICROSTEP) {
    if (dir == FORWARD) {
      currentstep++;
    1550:	9f 5f       	subi	r25, 0xFF	; 255
    1552:	9b 87       	std	Y+11, r25	; 0x0b
    1554:	0c cf       	rjmp	.-488    	; 0x136e <_ZN10AF_Stepper7onestepEhh+0x5c>
      else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next even step
      if (dir == FORWARD) {
	currentstep += MICROSTEPS;
    1556:	90 5f       	subi	r25, 0xF0	; 240
    1558:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
    155a:	9b 85       	ldd	r25, Y+11	; 0x0b
    155c:	27 cf       	rjmp	.-434    	; 0x13ac <_ZN10AF_Stepper7onestepEhh+0x9a>

  // next determine what sort of stepping procedure we're up to
  if (style == SINGLE) {
    if ((currentstep/(MICROSTEPS/2)) % 2) { // we're at an odd step, weird
      if (dir == FORWARD) {
	currentstep += MICROSTEPS/2;
    155e:	98 5f       	subi	r25, 0xF8	; 248
    1560:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
    1562:	9b 85       	ldd	r25, Y+11	; 0x0b
    1564:	23 cf       	rjmp	.-442    	; 0x13ac <_ZN10AF_Stepper7onestepEhh+0x9a>
      ocra = microstepcurve[currentstep - MICROSTEPS];
      ocrb = microstepcurve[MICROSTEPS*2 - currentstep];
    } else if  ( (currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3)) {
      ocra = microstepcurve[MICROSTEPS*3 - currentstep];
      ocrb = microstepcurve[currentstep - MICROSTEPS*2];
    } else if  ( (currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4)) {
    1566:	69 2f       	mov	r22, r25
    1568:	60 53       	subi	r22, 0x30	; 48
    156a:	60 31       	cpi	r22, 0x10	; 16
    156c:	18 f0       	brcs	.+6      	; 0x1574 <_ZN10AF_Stepper7onestepEhh+0x262>
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	1e cf       	rjmp	.-452    	; 0x13b0 <_ZN10AF_Stepper7onestepEhh+0x9e>
      ocra = microstepcurve[currentstep - MICROSTEPS*3];
    1574:	e9 2e       	mov	r14, r25
    1576:	ff 24       	eor	r15, r15
    1578:	b7 01       	movw	r22, r14
    157a:	6d 5d       	subi	r22, 0xDD	; 221
    157c:	7e 4f       	sbci	r23, 0xFE	; 254
    157e:	db 01       	movw	r26, r22
    1580:	7c 91       	ld	r23, X
      ocrb = microstepcurve[MICROSTEPS*4 - currentstep];
    1582:	03 e9       	ldi	r16, 0x93	; 147
    1584:	11 e0       	ldi	r17, 0x01	; 1
    1586:	0e 19       	sub	r16, r14
    1588:	1f 09       	sbc	r17, r15
    158a:	d8 01       	movw	r26, r16
    158c:	6c 91       	ld	r22, X
    158e:	10 cf       	rjmp	.-480    	; 0x13b0 <_ZN10AF_Stepper7onestepEhh+0x9e>

00001590 <_ZN10AF_Stepper4stepEjhh>:
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    MC.latch_tx();
  }
}

void AF_Stepper::step(uint16_t steps, uint8_t dir,  uint8_t style) {
    1590:	5f 92       	push	r5
    1592:	6f 92       	push	r6
    1594:	7f 92       	push	r7
    1596:	8f 92       	push	r8
    1598:	9f 92       	push	r9
    159a:	af 92       	push	r10
    159c:	bf 92       	push	r11
    159e:	cf 92       	push	r12
    15a0:	df 92       	push	r13
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	ec 01       	movw	r28, r24
    15b0:	8b 01       	movw	r16, r22
    15b2:	54 2e       	mov	r5, r20
    15b4:	f2 2e       	mov	r15, r18
  uint32_t uspers = usperstep;
    15b6:	8b 80       	ldd	r8, Y+3	; 0x03
    15b8:	9c 80       	ldd	r9, Y+4	; 0x04
    15ba:	ad 80       	ldd	r10, Y+5	; 0x05
    15bc:	be 80       	ldd	r11, Y+6	; 0x06
  uint8_t ret = 0;

  if (style == INTERLEAVE) {
    15be:	23 e0       	ldi	r18, 0x03	; 3
    15c0:	f2 16       	cp	r15, r18
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <_ZN10AF_Stepper4stepEjhh+0x36>
    15c4:	a5 c0       	rjmp	.+330    	; 0x1710 <_ZN10AF_Stepper4stepEjhh+0x180>
    uspers /= 2;
  }
 else if (style == MICROSTEP) {
    15c6:	84 e0       	ldi	r24, 0x04	; 4
    15c8:	f8 16       	cp	r15, r24
    15ca:	09 f4       	brne	.+2      	; 0x15ce <_ZN10AF_Stepper4stepEjhh+0x3e>
    15cc:	a6 c0       	rjmp	.+332    	; 0x171a <_ZN10AF_Stepper4stepEjhh+0x18a>
#endif
  }

  while (steps--) {
    ret = onestep(dir, style);
    delay(uspers/1000); // in ms
    15ce:	c5 01       	movw	r24, r10
    15d0:	b4 01       	movw	r22, r8
    15d2:	28 ee       	ldi	r18, 0xE8	; 232
    15d4:	33 e0       	ldi	r19, 0x03	; 3
    15d6:	40 e0       	ldi	r20, 0x00	; 0
    15d8:	50 e0       	ldi	r21, 0x00	; 0
    15da:	0e 94 ed 28 	call	0x51da	; 0x51da <__udivmodsi4>
    15de:	72 2e       	mov	r7, r18
    15e0:	c3 2e       	mov	r12, r19
    15e2:	d4 2e       	mov	r13, r20
    15e4:	e5 2e       	mov	r14, r21
    steppingcounter += (uspers % 1000);
    15e6:	c5 01       	movw	r24, r10
    15e8:	b4 01       	movw	r22, r8
    15ea:	28 ee       	ldi	r18, 0xE8	; 232
    15ec:	33 e0       	ldi	r19, 0x03	; 3
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	0e 94 ed 28 	call	0x51da	; 0x51da <__udivmodsi4>
    15f6:	4b 01       	movw	r8, r22
    15f8:	5c 01       	movw	r10, r24
    15fa:	66 24       	eor	r6, r6
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <_ZN10AF_Stepper4stepEjhh+0x72>
    if (steppingcounter >= 1000) {
      delay(1);
      steppingcounter -= 1000;
    15fe:	01 50       	subi	r16, 0x01	; 1
    1600:	10 40       	sbci	r17, 0x00	; 0
#ifdef MOTORDEBUG
    Serial.print("steps = "); Serial.println(steps, DEC);
#endif
  }

  while (steps--) {
    1602:	01 15       	cp	r16, r1
    1604:	11 05       	cpc	r17, r1
    1606:	99 f1       	breq	.+102    	; 0x166e <_ZN10AF_Stepper4stepEjhh+0xde>
    ret = onestep(dir, style);
    1608:	ce 01       	movw	r24, r28
    160a:	65 2d       	mov	r22, r5
    160c:	4f 2d       	mov	r20, r15
    160e:	0e 94 89 09 	call	0x1312	; 0x1312 <_ZN10AF_Stepper7onestepEhh>
    1612:	68 2e       	mov	r6, r24
    delay(uspers/1000); // in ms
    1614:	67 2d       	mov	r22, r7
    1616:	7c 2d       	mov	r23, r12
    1618:	8d 2d       	mov	r24, r13
    161a:	9e 2d       	mov	r25, r14
    161c:	0e 94 95 14 	call	0x292a	; 0x292a <delay>
    steppingcounter += (uspers % 1000);
    1620:	8f 81       	ldd	r24, Y+7	; 0x07
    1622:	98 85       	ldd	r25, Y+8	; 0x08
    1624:	a9 85       	ldd	r26, Y+9	; 0x09
    1626:	ba 85       	ldd	r27, Y+10	; 0x0a
    1628:	88 0d       	add	r24, r8
    162a:	99 1d       	adc	r25, r9
    162c:	aa 1d       	adc	r26, r10
    162e:	bb 1d       	adc	r27, r11
    1630:	8f 83       	std	Y+7, r24	; 0x07
    1632:	98 87       	std	Y+8, r25	; 0x08
    1634:	a9 87       	std	Y+9, r26	; 0x09
    1636:	ba 87       	std	Y+10, r27	; 0x0a
    if (steppingcounter >= 1000) {
    1638:	88 3e       	cpi	r24, 0xE8	; 232
    163a:	23 e0       	ldi	r18, 0x03	; 3
    163c:	92 07       	cpc	r25, r18
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	a2 07       	cpc	r26, r18
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	b2 07       	cpc	r27, r18
    1646:	d8 f2       	brcs	.-74     	; 0x15fe <_ZN10AF_Stepper4stepEjhh+0x6e>
      delay(1);
    1648:	61 e0       	ldi	r22, 0x01	; 1
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 95 14 	call	0x292a	; 0x292a <delay>
      steppingcounter -= 1000;
    1654:	8f 81       	ldd	r24, Y+7	; 0x07
    1656:	98 85       	ldd	r25, Y+8	; 0x08
    1658:	a9 85       	ldd	r26, Y+9	; 0x09
    165a:	ba 85       	ldd	r27, Y+10	; 0x0a
    165c:	88 5e       	subi	r24, 0xE8	; 232
    165e:	93 40       	sbci	r25, 0x03	; 3
    1660:	a0 40       	sbci	r26, 0x00	; 0
    1662:	b0 40       	sbci	r27, 0x00	; 0
    1664:	8f 83       	std	Y+7, r24	; 0x07
    1666:	98 87       	std	Y+8, r25	; 0x08
    1668:	a9 87       	std	Y+9, r26	; 0x09
    166a:	ba 87       	std	Y+10, r27	; 0x0a
    166c:	c8 cf       	rjmp	.-112    	; 0x15fe <_ZN10AF_Stepper4stepEjhh+0x6e>
    }
  }
  if (style == MICROSTEP) {
    166e:	84 e0       	ldi	r24, 0x04	; 4
    1670:	f8 16       	cp	r15, r24
    1672:	81 f0       	breq	.+32     	; 0x1694 <_ZN10AF_Stepper4stepEjhh+0x104>
	delay(1);
	steppingcounter -= 1000;
      } 
    }
  }
}
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	ff 90       	pop	r15
    167e:	ef 90       	pop	r14
    1680:	df 90       	pop	r13
    1682:	cf 90       	pop	r12
    1684:	bf 90       	pop	r11
    1686:	af 90       	pop	r10
    1688:	9f 90       	pop	r9
    168a:	8f 90       	pop	r8
    168c:	7f 90       	pop	r7
    168e:	6f 90       	pop	r6
    1690:	5f 90       	pop	r5
    1692:	08 95       	ret
      delay(1);
      steppingcounter -= 1000;
    }
  }
  if (style == MICROSTEP) {
    while ((ret != 0) && (ret != MICROSTEPS)) {
    1694:	66 20       	and	r6, r6
    1696:	71 f3       	breq	.-36     	; 0x1674 <_ZN10AF_Stepper4stepEjhh+0xe4>
    1698:	20 e1       	ldi	r18, 0x10	; 16
    169a:	62 16       	cp	r6, r18
    169c:	19 f4       	brne	.+6      	; 0x16a4 <_ZN10AF_Stepper4stepEjhh+0x114>
    169e:	ea cf       	rjmp	.-44     	; 0x1674 <_ZN10AF_Stepper4stepEjhh+0xe4>
    16a0:	00 31       	cpi	r16, 0x10	; 16
    16a2:	41 f3       	breq	.-48     	; 0x1674 <_ZN10AF_Stepper4stepEjhh+0xe4>
      ret = onestep(dir, style);
    16a4:	ce 01       	movw	r24, r28
    16a6:	65 2d       	mov	r22, r5
    16a8:	44 e0       	ldi	r20, 0x04	; 4
    16aa:	0e 94 89 09 	call	0x1312	; 0x1312 <_ZN10AF_Stepper7onestepEhh>
    16ae:	08 2f       	mov	r16, r24
      delay(uspers/1000); // in ms
    16b0:	67 2d       	mov	r22, r7
    16b2:	7c 2d       	mov	r23, r12
    16b4:	8d 2d       	mov	r24, r13
    16b6:	9e 2d       	mov	r25, r14
    16b8:	0e 94 95 14 	call	0x292a	; 0x292a <delay>
      steppingcounter += (uspers % 1000);
    16bc:	8f 81       	ldd	r24, Y+7	; 0x07
    16be:	98 85       	ldd	r25, Y+8	; 0x08
    16c0:	a9 85       	ldd	r26, Y+9	; 0x09
    16c2:	ba 85       	ldd	r27, Y+10	; 0x0a
    16c4:	88 0d       	add	r24, r8
    16c6:	99 1d       	adc	r25, r9
    16c8:	aa 1d       	adc	r26, r10
    16ca:	bb 1d       	adc	r27, r11
    16cc:	8f 83       	std	Y+7, r24	; 0x07
    16ce:	98 87       	std	Y+8, r25	; 0x08
    16d0:	a9 87       	std	Y+9, r26	; 0x09
    16d2:	ba 87       	std	Y+10, r27	; 0x0a
      if (steppingcounter >= 1000) {
    16d4:	88 3e       	cpi	r24, 0xE8	; 232
    16d6:	23 e0       	ldi	r18, 0x03	; 3
    16d8:	92 07       	cpc	r25, r18
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	a2 07       	cpc	r26, r18
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	b2 07       	cpc	r27, r18
    16e2:	90 f0       	brcs	.+36     	; 0x1708 <_ZN10AF_Stepper4stepEjhh+0x178>
	delay(1);
    16e4:	61 e0       	ldi	r22, 0x01	; 1
    16e6:	70 e0       	ldi	r23, 0x00	; 0
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 94 95 14 	call	0x292a	; 0x292a <delay>
	steppingcounter -= 1000;
    16f0:	8f 81       	ldd	r24, Y+7	; 0x07
    16f2:	98 85       	ldd	r25, Y+8	; 0x08
    16f4:	a9 85       	ldd	r26, Y+9	; 0x09
    16f6:	ba 85       	ldd	r27, Y+10	; 0x0a
    16f8:	88 5e       	subi	r24, 0xE8	; 232
    16fa:	93 40       	sbci	r25, 0x03	; 3
    16fc:	a0 40       	sbci	r26, 0x00	; 0
    16fe:	b0 40       	sbci	r27, 0x00	; 0
    1700:	8f 83       	std	Y+7, r24	; 0x07
    1702:	98 87       	std	Y+8, r25	; 0x08
    1704:	a9 87       	std	Y+9, r26	; 0x09
    1706:	ba 87       	std	Y+10, r27	; 0x0a
      delay(1);
      steppingcounter -= 1000;
    }
  }
  if (style == MICROSTEP) {
    while ((ret != 0) && (ret != MICROSTEPS)) {
    1708:	00 23       	and	r16, r16
    170a:	09 f4       	brne	.+2      	; 0x170e <_ZN10AF_Stepper4stepEjhh+0x17e>
    170c:	b3 cf       	rjmp	.-154    	; 0x1674 <_ZN10AF_Stepper4stepEjhh+0xe4>
    170e:	c8 cf       	rjmp	.-112    	; 0x16a0 <_ZN10AF_Stepper4stepEjhh+0x110>
void AF_Stepper::step(uint16_t steps, uint8_t dir,  uint8_t style) {
  uint32_t uspers = usperstep;
  uint8_t ret = 0;

  if (style == INTERLEAVE) {
    uspers /= 2;
    1710:	b6 94       	lsr	r11
    1712:	a7 94       	ror	r10
    1714:	97 94       	ror	r9
    1716:	87 94       	ror	r8
    1718:	5a cf       	rjmp	.-332    	; 0x15ce <_ZN10AF_Stepper4stepEjhh+0x3e>
  }
 else if (style == MICROSTEP) {
    uspers /= MICROSTEPS;
    171a:	54 e0       	ldi	r21, 0x04	; 4
    171c:	b6 94       	lsr	r11
    171e:	a7 94       	ror	r10
    1720:	97 94       	ror	r9
    1722:	87 94       	ror	r8
    1724:	5a 95       	dec	r21
    1726:	d1 f7       	brne	.-12     	; 0x171c <_ZN10AF_Stepper4stepEjhh+0x18c>
    steps *= MICROSTEPS;
    1728:	02 95       	swap	r16
    172a:	12 95       	swap	r17
    172c:	10 7f       	andi	r17, 0xF0	; 240
    172e:	10 27       	eor	r17, r16
    1730:	00 7f       	andi	r16, 0xF0	; 240
    1732:	10 27       	eor	r17, r16
    1734:	4c cf       	rjmp	.-360    	; 0x15ce <_ZN10AF_Stepper4stepEjhh+0x3e>

00001736 <_ZN10AF_Stepper7releaseEv>:
  //usperstep = 60000000 / ((uint32_t)revsteps * (uint32_t)rpm);
  steppingcounter = 0;
}

void AF_Stepper::release(void) {
  if (steppernum == 1) {
    1736:	fc 01       	movw	r30, r24
    1738:	82 81       	ldd	r24, Z+2	; 0x02
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	69 f0       	breq	.+26     	; 0x1758 <_ZN10AF_Stepper7releaseEv+0x22>
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    MC.latch_tx();
  } else if (steppernum == 2) {
    173e:	82 30       	cpi	r24, 0x02	; 2
    1740:	09 f0       	breq	.+2      	; 0x1744 <_ZN10AF_Stepper7releaseEv+0xe>
    1742:	08 95       	ret
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B) &
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    1744:	80 91 f4 05 	lds	r24, 0x05F4
    1748:	8e 71       	andi	r24, 0x1E	; 30
    174a:	80 93 f4 05 	sts	0x05F4, r24
    MC.latch_tx();
    174e:	83 ef       	ldi	r24, 0xF3	; 243
    1750:	95 e0       	ldi	r25, 0x05	; 5
    1752:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN17AFMotorController8latch_txEv>
    1756:	08 95       	ret
}

void AF_Stepper::release(void) {
  if (steppernum == 1) {
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    1758:	80 91 f4 05 	lds	r24, 0x05F4
    175c:	81 7e       	andi	r24, 0xE1	; 225
    175e:	80 93 f4 05 	sts	0x05F4, r24
    MC.latch_tx();
    1762:	83 ef       	ldi	r24, 0xF3	; 243
    1764:	95 e0       	ldi	r25, 0x05	; 5
    1766:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN17AFMotorController8latch_txEv>
    176a:	08 95       	ret

0000176c <_ZN10AF_DCMotor3runEh>:
  }
}

void AF_DCMotor::run(uint8_t cmd) {
  uint8_t a, b;
  switch (motornum) {
    176c:	fc 01       	movw	r30, r24
    176e:	80 81       	ld	r24, Z
    1770:	82 30       	cpi	r24, 0x02	; 2
    1772:	09 f4       	brne	.+2      	; 0x1776 <_ZN10AF_DCMotor3runEh+0xa>
    1774:	6a c0       	rjmp	.+212    	; 0x184a <_ZN10AF_DCMotor3runEh+0xde>
    1776:	83 30       	cpi	r24, 0x03	; 3
    1778:	30 f0       	brcs	.+12     	; 0x1786 <_ZN10AF_DCMotor3runEh+0x1a>
    177a:	83 30       	cpi	r24, 0x03	; 3
    177c:	09 f4       	brne	.+2      	; 0x1780 <_ZN10AF_DCMotor3runEh+0x14>
    177e:	62 c0       	rjmp	.+196    	; 0x1844 <_ZN10AF_DCMotor3runEh+0xd8>
    1780:	84 30       	cpi	r24, 0x04	; 4
    1782:	39 f1       	breq	.+78     	; 0x17d2 <_ZN10AF_DCMotor3runEh+0x66>
    1784:	08 95       	ret
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	e9 f7       	brne	.-6      	; 0x1784 <_ZN10AF_DCMotor3runEh+0x18>
    178a:	83 e0       	ldi	r24, 0x03	; 3
    178c:	92 e0       	ldi	r25, 0x02	; 2
    a = MOTOR4_A; b = MOTOR4_B; break;
  default:
    return;
  }
  
  switch (cmd) {
    178e:	62 30       	cpi	r22, 0x02	; 2
    1790:	21 f1       	breq	.+72     	; 0x17da <_ZN10AF_DCMotor3runEh+0x6e>
    1792:	64 30       	cpi	r22, 0x04	; 4
    1794:	09 f4       	brne	.+2      	; 0x1798 <_ZN10AF_DCMotor3runEh+0x2c>
    1796:	3b c0       	rjmp	.+118    	; 0x180e <_ZN10AF_DCMotor3runEh+0xa2>
    1798:	61 30       	cpi	r22, 0x01	; 1
    179a:	a1 f7       	brne	.-24     	; 0x1784 <_ZN10AF_DCMotor3runEh+0x18>
  case FORWARD:
    latch_state |= _BV(a);
    latch_state &= ~_BV(b); 
    179c:	21 e0       	ldi	r18, 0x01	; 1
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	a9 01       	movw	r20, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <_ZN10AF_DCMotor3runEh+0x3c>
    17a4:	44 0f       	add	r20, r20
    17a6:	55 1f       	adc	r21, r21
    17a8:	8a 95       	dec	r24
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <_ZN10AF_DCMotor3runEh+0x38>
    17ac:	84 2f       	mov	r24, r20
    17ae:	80 95       	com	r24
    17b0:	a9 01       	movw	r20, r18
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <_ZN10AF_DCMotor3runEh+0x4c>
    17b4:	44 0f       	add	r20, r20
    17b6:	55 1f       	adc	r21, r21
    17b8:	9a 95       	dec	r25
    17ba:	e2 f7       	brpl	.-8      	; 0x17b4 <_ZN10AF_DCMotor3runEh+0x48>
    17bc:	20 91 f4 05 	lds	r18, 0x05F4
    17c0:	24 2b       	or	r18, r20
    17c2:	82 23       	and	r24, r18
    17c4:	80 93 f4 05 	sts	0x05F4, r24
    MC.latch_tx();
    17c8:	83 ef       	ldi	r24, 0xF3	; 243
    17ca:	95 e0       	ldi	r25, 0x05	; 5
    17cc:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN17AFMotorController8latch_txEv>
    break;
    17d0:	08 95       	ret
  case 1:
    a = MOTOR1_A; b = MOTOR1_B; break;
  case 2:
    a = MOTOR2_A; b = MOTOR2_B; break;
  case 3:
    a = MOTOR3_A; b = MOTOR3_B; break;
    17d2:	86 e0       	ldi	r24, 0x06	; 6
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    a = MOTOR4_A; b = MOTOR4_B; break;
  default:
    return;
  }
  
  switch (cmd) {
    17d6:	62 30       	cpi	r22, 0x02	; 2
    17d8:	e1 f6       	brne	.-72     	; 0x1792 <_ZN10AF_DCMotor3runEh+0x26>
    latch_state &= ~_BV(b); 
    MC.latch_tx();
    break;
  case BACKWARD:
    latch_state &= ~_BV(a);
    latch_state |= _BV(b); 
    17da:	21 e0       	ldi	r18, 0x01	; 1
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	a9 01       	movw	r20, r18
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <_ZN10AF_DCMotor3runEh+0x7a>
    17e2:	44 0f       	add	r20, r20
    17e4:	55 1f       	adc	r21, r21
    17e6:	9a 95       	dec	r25
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <_ZN10AF_DCMotor3runEh+0x76>
    17ea:	94 2f       	mov	r25, r20
    17ec:	90 95       	com	r25
    17ee:	40 91 f4 05 	lds	r20, 0x05F4
    17f2:	94 23       	and	r25, r20
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <_ZN10AF_DCMotor3runEh+0x8e>
    17f6:	22 0f       	add	r18, r18
    17f8:	33 1f       	adc	r19, r19
    17fa:	8a 95       	dec	r24
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <_ZN10AF_DCMotor3runEh+0x8a>
    17fe:	92 2b       	or	r25, r18
    1800:	90 93 f4 05 	sts	0x05F4, r25
    MC.latch_tx();
    1804:	83 ef       	ldi	r24, 0xF3	; 243
    1806:	95 e0       	ldi	r25, 0x05	; 5
    1808:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN17AFMotorController8latch_txEv>
    break;
    180c:	08 95       	ret
  case RELEASE:
    latch_state &= ~_BV(a);
    latch_state &= ~_BV(b); 
    180e:	21 e0       	ldi	r18, 0x01	; 1
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	a9 01       	movw	r20, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <_ZN10AF_DCMotor3runEh+0xae>
    1816:	44 0f       	add	r20, r20
    1818:	55 1f       	adc	r21, r21
    181a:	9a 95       	dec	r25
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <_ZN10AF_DCMotor3runEh+0xaa>
    181e:	b9 01       	movw	r22, r18
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <_ZN10AF_DCMotor3runEh+0xba>
    1822:	66 0f       	add	r22, r22
    1824:	77 1f       	adc	r23, r23
    1826:	8a 95       	dec	r24
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <_ZN10AF_DCMotor3runEh+0xb6>
    182a:	cb 01       	movw	r24, r22
    182c:	84 2b       	or	r24, r20
    182e:	80 95       	com	r24
    1830:	20 91 f4 05 	lds	r18, 0x05F4
    1834:	28 23       	and	r18, r24
    1836:	20 93 f4 05 	sts	0x05F4, r18
    MC.latch_tx();
    183a:	83 ef       	ldi	r24, 0xF3	; 243
    183c:	95 e0       	ldi	r25, 0x05	; 5
    183e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN17AFMotorController8latch_txEv>
    1842:	08 95       	ret
  }
}

void AF_DCMotor::run(uint8_t cmd) {
  uint8_t a, b;
  switch (motornum) {
    1844:	87 e0       	ldi	r24, 0x07	; 7
    1846:	95 e0       	ldi	r25, 0x05	; 5
  case 1:
    a = MOTOR1_A; b = MOTOR1_B; break;
  case 2:
    a = MOTOR2_A; b = MOTOR2_B; break;
  case 3:
    a = MOTOR3_A; b = MOTOR3_B; break;
    1848:	a2 cf       	rjmp	.-188    	; 0x178e <_ZN10AF_DCMotor3runEh+0x22>
  }
}

void AF_DCMotor::run(uint8_t cmd) {
  uint8_t a, b;
  switch (motornum) {
    184a:	84 e0       	ldi	r24, 0x04	; 4
    184c:	91 e0       	ldi	r25, 0x01	; 1
    184e:	9f cf       	rjmp	.-194    	; 0x178e <_ZN10AF_DCMotor3runEh+0x22>

00001850 <_ZN17AFMotorController6enableEv>:
#endif

AFMotorController::AFMotorController(void) {
}

void AFMotorController::enable(void) {
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	ec 01       	movw	r28, r24
  LATCH_DDR |= _BV(LATCH);
  ENABLE_DDR |= _BV(ENABLE);
  CLK_DDR |= _BV(CLK);
  SER_DDR |= _BV(SER);
  */
  pinMode(MOTORLATCH, OUTPUT);
    1856:	8c e0       	ldi	r24, 0x0C	; 12
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
  pinMode(MOTORENABLE, OUTPUT);
    185e:	87 e0       	ldi	r24, 0x07	; 7
    1860:	61 e0       	ldi	r22, 0x01	; 1
    1862:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
  pinMode(MOTORDATA, OUTPUT);
    1866:	88 e0       	ldi	r24, 0x08	; 8
    1868:	61 e0       	ldi	r22, 0x01	; 1
    186a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
  pinMode(MOTORCLK, OUTPUT);
    186e:	84 e0       	ldi	r24, 0x04	; 4
    1870:	61 e0       	ldi	r22, 0x01	; 1
    1872:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>

  latch_state = 0;
    1876:	10 92 f4 05 	sts	0x05F4, r1

  latch_tx();  // "reset"
    187a:	ce 01       	movw	r24, r28
    187c:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN17AFMotorController8latch_txEv>

  //ENABLE_PORT &= ~_BV(ENABLE); // enable the chip outputs!
  digitalWrite(MOTORENABLE, LOW);
    1880:	87 e0       	ldi	r24, 0x07	; 7
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
}
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	08 95       	ret

0000188e <_ZN10AF_StepperC1Ejh>:

/******************************************
               STEPPERS
******************************************/

AF_Stepper::AF_Stepper(uint16_t steps, uint8_t num) {
    188e:	ef 92       	push	r14
    1890:	ff 92       	push	r15
    1892:	1f 93       	push	r17
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	ec 01       	movw	r28, r24
    189a:	7b 01       	movw	r14, r22
    189c:	14 2f       	mov	r17, r20
  MC.enable();
    189e:	83 ef       	ldi	r24, 0xF3	; 243
    18a0:	95 e0       	ldi	r25, 0x05	; 5
    18a2:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN17AFMotorController6enableEv>

  revsteps = steps;
    18a6:	f9 82       	std	Y+1, r15	; 0x01
    18a8:	e8 82       	st	Y, r14
  steppernum = num;
    18aa:	1a 83       	std	Y+2, r17	; 0x02
  currentstep = 0;
    18ac:	1b 86       	std	Y+11, r1	; 0x0b

  if (steppernum == 1) {
    18ae:	11 30       	cpi	r17, 0x01	; 1
    18b0:	d1 f1       	breq	.+116    	; 0x1926 <_ZN10AF_StepperC1Ejh+0x98>
    initPWM1(MOTOR12_64KHZ);
    initPWM2(MOTOR12_64KHZ);
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    18b2:	12 30       	cpi	r17, 0x02	; 2
    18b4:	31 f0       	breq	.+12     	; 0x18c2 <_ZN10AF_StepperC1Ejh+0x34>
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	1f 91       	pop	r17
    18bc:	ff 90       	pop	r15
    18be:	ef 90       	pop	r14
    18c0:	08 95       	ret
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B) &
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    18c2:	80 91 f4 05 	lds	r24, 0x05F4
    18c6:	8e 71       	andi	r24, 0x1E	; 30
    18c8:	80 93 f4 05 	sts	0x05F4, r24
    MC.latch_tx();
    18cc:	83 ef       	ldi	r24, 0xF3	; 243
    18ce:	95 e0       	ldi	r25, 0x05	; 5
    18d0:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN17AFMotorController8latch_txEv>

    // enable both H bridges
    pinMode(5, OUTPUT);
    18d4:	85 e0       	ldi	r24, 0x05	; 5
    18d6:	61 e0       	ldi	r22, 0x01	; 1
    18d8:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    pinMode(6, OUTPUT);
    18dc:	86 e0       	ldi	r24, 0x06	; 6
    18de:	61 e0       	ldi	r22, 0x01	; 1
    18e0:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    digitalWrite(5, HIGH);
    18e4:	85 e0       	ldi	r24, 0x05	; 5
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
    digitalWrite(6, HIGH);
    18ec:	86 e0       	ldi	r24, 0x06	; 6
    18ee:	61 e0       	ldi	r22, 0x01	; 1
    18f0:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    18f4:	84 b5       	in	r24, 0x24	; 36
    18f6:	83 68       	ori	r24, 0x83	; 131
    18f8:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    18fa:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    18fc:	86 e0       	ldi	r24, 0x06	; 6
    18fe:	61 e0       	ldi	r22, 0x01	; 1
    1900:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    1904:	84 b5       	in	r24, 0x24	; 36
    1906:	83 62       	ori	r24, 0x23	; 35
    1908:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    190a:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    190c:	85 e0       	ldi	r24, 0x05	; 5
    190e:	61 e0       	ldi	r22, 0x01	; 1
    1910:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    1914:	8f ef       	ldi	r24, 0xFF	; 255
    1916:	87 bd       	out	0x27, r24	; 39
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    1918:	88 bd       	out	0x28, r24	; 40
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	ff 90       	pop	r15
    1922:	ef 90       	pop	r14
    1924:	08 95       	ret
  steppernum = num;
  currentstep = 0;

  if (steppernum == 1) {
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    1926:	80 91 f4 05 	lds	r24, 0x05F4
    192a:	81 7e       	andi	r24, 0xE1	; 225
    192c:	80 93 f4 05 	sts	0x05F4, r24
    MC.latch_tx();
    1930:	83 ef       	ldi	r24, 0xF3	; 243
    1932:	95 e0       	ldi	r25, 0x05	; 5
    1934:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN17AFMotorController8latch_txEv>
    
    // enable both H bridges
    pinMode(11, OUTPUT);
    1938:	8b e0       	ldi	r24, 0x0B	; 11
    193a:	61 e0       	ldi	r22, 0x01	; 1
    193c:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    pinMode(3, OUTPUT);
    1940:	83 e0       	ldi	r24, 0x03	; 3
    1942:	61 e0       	ldi	r22, 0x01	; 1
    1944:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    digitalWrite(11, HIGH);
    1948:	8b e0       	ldi	r24, 0x0B	; 11
    194a:	61 e0       	ldi	r22, 0x01	; 1
    194c:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
    digitalWrite(3, HIGH);
    1950:	83 e0       	ldi	r24, 0x03	; 3
    1952:	61 e0       	ldi	r22, 0x01	; 1
    1954:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    1958:	80 91 b0 00 	lds	r24, 0x00B0
    195c:	83 68       	ori	r24, 0x83	; 131
    195e:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1962:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    1966:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    196a:	8b e0       	ldi	r24, 0x0B	; 11
    196c:	61 e0       	ldi	r22, 0x01	; 1
    196e:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    1972:	80 91 b0 00 	lds	r24, 0x00B0
    1976:	83 62       	ori	r24, 0x23	; 35
    1978:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    197c:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    1980:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    1984:	83 e0       	ldi	r24, 0x03	; 3
    1986:	61 e0       	ldi	r22, 0x01	; 1
    1988:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    198c:	8f ef       	ldi	r24, 0xFF	; 255
    198e:	80 93 b3 00 	sts	0x00B3, r24
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    1992:	80 93 b4 00 	sts	0x00B4, r24
    1996:	8f cf       	rjmp	.-226    	; 0x18b6 <_ZN10AF_StepperC1Ejh+0x28>

00001998 <_ZN10AF_DCMotorC2Ehh>:
#else
   #error "This chip is not supported!"
#endif
}

AF_DCMotor::AF_DCMotor(uint8_t num, uint8_t freq) {
    1998:	1f 93       	push	r17
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	0f 92       	push	r0
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	fc 01       	movw	r30, r24
    19a6:	14 2f       	mov	r17, r20
  motornum = num;
    19a8:	60 83       	st	Z, r22
  pwmfreq = freq;
    19aa:	41 83       	std	Z+1, r20	; 0x01

  MC.enable();
    19ac:	83 ef       	ldi	r24, 0xF3	; 243
    19ae:	95 e0       	ldi	r25, 0x05	; 5
    19b0:	69 83       	std	Y+1, r22	; 0x01
    19b2:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN17AFMotorController6enableEv>

  switch (num) {
    19b6:	69 81       	ldd	r22, Y+1	; 0x01
    19b8:	62 30       	cpi	r22, 0x02	; 2
    19ba:	09 f4       	brne	.+2      	; 0x19be <_ZN10AF_DCMotorC2Ehh+0x26>
    19bc:	50 c0       	rjmp	.+160    	; 0x1a5e <_ZN10AF_DCMotorC2Ehh+0xc6>
    19be:	63 30       	cpi	r22, 0x03	; 3
    19c0:	f0 f4       	brcc	.+60     	; 0x19fe <_ZN10AF_DCMotorC2Ehh+0x66>
    19c2:	61 30       	cpi	r22, 0x01	; 1
    19c4:	b9 f4       	brne	.+46     	; 0x19f4 <_ZN10AF_DCMotorC2Ehh+0x5c>
  case 1:
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    19c6:	80 91 f4 05 	lds	r24, 0x05F4
    19ca:	83 7f       	andi	r24, 0xF3	; 243
    19cc:	80 93 f4 05 	sts	0x05F4, r24
    MC.latch_tx();
    19d0:	83 ef       	ldi	r24, 0xF3	; 243
    19d2:	95 e0       	ldi	r25, 0x05	; 5
    19d4:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    19d8:	80 91 b0 00 	lds	r24, 0x00B0
    19dc:	83 68       	ori	r24, 0x83	; 131
    19de:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    19e2:	17 70       	andi	r17, 0x07	; 7
    19e4:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    19e8:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    19ec:	8b e0       	ldi	r24, 0x0B	; 11
    19ee:	61 e0       	ldi	r22, 0x01	; 1
    19f0:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    19f4:	0f 90       	pop	r0
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	1f 91       	pop	r17
    19fc:	08 95       	ret
  motornum = num;
  pwmfreq = freq;

  MC.enable();

  switch (num) {
    19fe:	63 30       	cpi	r22, 0x03	; 3
    1a00:	c1 f0       	breq	.+48     	; 0x1a32 <_ZN10AF_DCMotorC2Ehh+0x9a>
    1a02:	64 30       	cpi	r22, 0x04	; 4
    1a04:	b9 f7       	brne	.-18     	; 0x19f4 <_ZN10AF_DCMotorC2Ehh+0x5c>
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM3(freq);
    break;
  case 4:
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    1a06:	80 91 f4 05 	lds	r24, 0x05F4
    1a0a:	8e 7b       	andi	r24, 0xBE	; 190
    1a0c:	80 93 f4 05 	sts	0x05F4, r24
    MC.latch_tx();
    1a10:	83 ef       	ldi	r24, 0xF3	; 243
    1a12:	95 e0       	ldi	r25, 0x05	; 5
    1a14:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    1a18:	84 b5       	in	r24, 0x24	; 36
    1a1a:	83 62       	ori	r24, 0x23	; 35
    1a1c:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    1a1e:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    1a20:	85 e0       	ldi	r24, 0x05	; 5
    1a22:	61 e0       	ldi	r22, 0x01	; 1
    1a24:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1a28:	0f 90       	pop	r0
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	1f 91       	pop	r17
    1a30:	08 95       	ret
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM2(freq);
    break;
  case 3:
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    1a32:	80 91 f4 05 	lds	r24, 0x05F4
    1a36:	8f 75       	andi	r24, 0x5F	; 95
    1a38:	80 93 f4 05 	sts	0x05F4, r24
    MC.latch_tx();
    1a3c:	83 ef       	ldi	r24, 0xF3	; 243
    1a3e:	95 e0       	ldi	r25, 0x05	; 5
    1a40:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    1a44:	84 b5       	in	r24, 0x24	; 36
    1a46:	83 68       	ori	r24, 0x83	; 131
    1a48:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    1a4a:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    1a4c:	86 e0       	ldi	r24, 0x06	; 6
    1a4e:	61 e0       	ldi	r22, 0x01	; 1
    1a50:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1a54:	0f 90       	pop	r0
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	1f 91       	pop	r17
    1a5c:	08 95       	ret
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM1(freq);
    break;
  case 2:
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    1a5e:	80 91 f4 05 	lds	r24, 0x05F4
    1a62:	8d 7e       	andi	r24, 0xED	; 237
    1a64:	80 93 f4 05 	sts	0x05F4, r24
    MC.latch_tx();
    1a68:	83 ef       	ldi	r24, 0xF3	; 243
    1a6a:	95 e0       	ldi	r25, 0x05	; 5
    1a6c:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    1a70:	80 91 b0 00 	lds	r24, 0x00B0
    1a74:	83 62       	ori	r24, 0x23	; 35
    1a76:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1a7a:	17 70       	andi	r17, 0x07	; 7
    1a7c:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    1a80:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    1a84:	83 e0       	ldi	r24, 0x03	; 3
    1a86:	61 e0       	ldi	r22, 0x01	; 1
    1a88:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	1f 91       	pop	r17
    1a94:	08 95       	ret

00001a96 <_ZN10AF_DCMotorC1Ehh>:
#else
   #error "This chip is not supported!"
#endif
}

AF_DCMotor::AF_DCMotor(uint8_t num, uint8_t freq) {
    1a96:	1f 93       	push	r17
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	0f 92       	push	r0
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	14 2f       	mov	r17, r20
  motornum = num;
    1aa6:	60 83       	st	Z, r22
  pwmfreq = freq;
    1aa8:	41 83       	std	Z+1, r20	; 0x01

  MC.enable();
    1aaa:	83 ef       	ldi	r24, 0xF3	; 243
    1aac:	95 e0       	ldi	r25, 0x05	; 5
    1aae:	69 83       	std	Y+1, r22	; 0x01
    1ab0:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN17AFMotorController6enableEv>

  switch (num) {
    1ab4:	69 81       	ldd	r22, Y+1	; 0x01
    1ab6:	62 30       	cpi	r22, 0x02	; 2
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <_ZN10AF_DCMotorC1Ehh+0x26>
    1aba:	50 c0       	rjmp	.+160    	; 0x1b5c <_ZN10AF_DCMotorC1Ehh+0xc6>
    1abc:	63 30       	cpi	r22, 0x03	; 3
    1abe:	f0 f4       	brcc	.+60     	; 0x1afc <_ZN10AF_DCMotorC1Ehh+0x66>
    1ac0:	61 30       	cpi	r22, 0x01	; 1
    1ac2:	b9 f4       	brne	.+46     	; 0x1af2 <_ZN10AF_DCMotorC1Ehh+0x5c>
  case 1:
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    1ac4:	80 91 f4 05 	lds	r24, 0x05F4
    1ac8:	83 7f       	andi	r24, 0xF3	; 243
    1aca:	80 93 f4 05 	sts	0x05F4, r24
    MC.latch_tx();
    1ace:	83 ef       	ldi	r24, 0xF3	; 243
    1ad0:	95 e0       	ldi	r25, 0x05	; 5
    1ad2:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    1ad6:	80 91 b0 00 	lds	r24, 0x00B0
    1ada:	83 68       	ori	r24, 0x83	; 131
    1adc:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1ae0:	17 70       	andi	r17, 0x07	; 7
    1ae2:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    1ae6:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    1aea:	8b e0       	ldi	r24, 0x0B	; 11
    1aec:	61 e0       	ldi	r22, 0x01	; 1
    1aee:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1af2:	0f 90       	pop	r0
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	1f 91       	pop	r17
    1afa:	08 95       	ret
  motornum = num;
  pwmfreq = freq;

  MC.enable();

  switch (num) {
    1afc:	63 30       	cpi	r22, 0x03	; 3
    1afe:	c1 f0       	breq	.+48     	; 0x1b30 <_ZN10AF_DCMotorC1Ehh+0x9a>
    1b00:	64 30       	cpi	r22, 0x04	; 4
    1b02:	b9 f7       	brne	.-18     	; 0x1af2 <_ZN10AF_DCMotorC1Ehh+0x5c>
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM3(freq);
    break;
  case 4:
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    1b04:	80 91 f4 05 	lds	r24, 0x05F4
    1b08:	8e 7b       	andi	r24, 0xBE	; 190
    1b0a:	80 93 f4 05 	sts	0x05F4, r24
    MC.latch_tx();
    1b0e:	83 ef       	ldi	r24, 0xF3	; 243
    1b10:	95 e0       	ldi	r25, 0x05	; 5
    1b12:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    1b16:	84 b5       	in	r24, 0x24	; 36
    1b18:	83 62       	ori	r24, 0x23	; 35
    1b1a:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    1b1c:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    1b1e:	85 e0       	ldi	r24, 0x05	; 5
    1b20:	61 e0       	ldi	r22, 0x01	; 1
    1b22:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1b26:	0f 90       	pop	r0
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	1f 91       	pop	r17
    1b2e:	08 95       	ret
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM2(freq);
    break;
  case 3:
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    1b30:	80 91 f4 05 	lds	r24, 0x05F4
    1b34:	8f 75       	andi	r24, 0x5F	; 95
    1b36:	80 93 f4 05 	sts	0x05F4, r24
    MC.latch_tx();
    1b3a:	83 ef       	ldi	r24, 0xF3	; 243
    1b3c:	95 e0       	ldi	r25, 0x05	; 5
    1b3e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    1b42:	84 b5       	in	r24, 0x24	; 36
    1b44:	83 68       	ori	r24, 0x83	; 131
    1b46:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    1b48:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    1b4a:	86 e0       	ldi	r24, 0x06	; 6
    1b4c:	61 e0       	ldi	r22, 0x01	; 1
    1b4e:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1b52:	0f 90       	pop	r0
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	1f 91       	pop	r17
    1b5a:	08 95       	ret
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM1(freq);
    break;
  case 2:
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    1b5c:	80 91 f4 05 	lds	r24, 0x05F4
    1b60:	8d 7e       	andi	r24, 0xED	; 237
    1b62:	80 93 f4 05 	sts	0x05F4, r24
    MC.latch_tx();
    1b66:	83 ef       	ldi	r24, 0xF3	; 243
    1b68:	95 e0       	ldi	r25, 0x05	; 5
    1b6a:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    1b6e:	80 91 b0 00 	lds	r24, 0x00B0
    1b72:	83 62       	ori	r24, 0x23	; 35
    1b74:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1b78:	17 70       	andi	r17, 0x07	; 7
    1b7a:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    1b7e:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    1b82:	83 e0       	ldi	r24, 0x03	; 3
    1b84:	61 e0       	ldi	r22, 0x01	; 1
    1b86:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1b8a:	0f 90       	pop	r0
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	1f 91       	pop	r17
    1b92:	08 95       	ret

00001b94 <_ZN10AF_StepperC2Ejh>:

/******************************************
               STEPPERS
******************************************/

AF_Stepper::AF_Stepper(uint16_t steps, uint8_t num) {
    1b94:	ef 92       	push	r14
    1b96:	ff 92       	push	r15
    1b98:	1f 93       	push	r17
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	ec 01       	movw	r28, r24
    1ba0:	7b 01       	movw	r14, r22
    1ba2:	14 2f       	mov	r17, r20
  MC.enable();
    1ba4:	83 ef       	ldi	r24, 0xF3	; 243
    1ba6:	95 e0       	ldi	r25, 0x05	; 5
    1ba8:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN17AFMotorController6enableEv>

  revsteps = steps;
    1bac:	f9 82       	std	Y+1, r15	; 0x01
    1bae:	e8 82       	st	Y, r14
  steppernum = num;
    1bb0:	1a 83       	std	Y+2, r17	; 0x02
  currentstep = 0;
    1bb2:	1b 86       	std	Y+11, r1	; 0x0b

  if (steppernum == 1) {
    1bb4:	11 30       	cpi	r17, 0x01	; 1
    1bb6:	d1 f1       	breq	.+116    	; 0x1c2c <_ZN10AF_StepperC2Ejh+0x98>
    initPWM1(MOTOR12_64KHZ);
    initPWM2(MOTOR12_64KHZ);
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    1bb8:	12 30       	cpi	r17, 0x02	; 2
    1bba:	31 f0       	breq	.+12     	; 0x1bc8 <_ZN10AF_StepperC2Ejh+0x34>
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	1f 91       	pop	r17
    1bc2:	ff 90       	pop	r15
    1bc4:	ef 90       	pop	r14
    1bc6:	08 95       	ret
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B) &
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    1bc8:	80 91 f4 05 	lds	r24, 0x05F4
    1bcc:	8e 71       	andi	r24, 0x1E	; 30
    1bce:	80 93 f4 05 	sts	0x05F4, r24
    MC.latch_tx();
    1bd2:	83 ef       	ldi	r24, 0xF3	; 243
    1bd4:	95 e0       	ldi	r25, 0x05	; 5
    1bd6:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN17AFMotorController8latch_txEv>

    // enable both H bridges
    pinMode(5, OUTPUT);
    1bda:	85 e0       	ldi	r24, 0x05	; 5
    1bdc:	61 e0       	ldi	r22, 0x01	; 1
    1bde:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    pinMode(6, OUTPUT);
    1be2:	86 e0       	ldi	r24, 0x06	; 6
    1be4:	61 e0       	ldi	r22, 0x01	; 1
    1be6:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    digitalWrite(5, HIGH);
    1bea:	85 e0       	ldi	r24, 0x05	; 5
    1bec:	61 e0       	ldi	r22, 0x01	; 1
    1bee:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
    digitalWrite(6, HIGH);
    1bf2:	86 e0       	ldi	r24, 0x06	; 6
    1bf4:	61 e0       	ldi	r22, 0x01	; 1
    1bf6:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    1bfa:	84 b5       	in	r24, 0x24	; 36
    1bfc:	83 68       	ori	r24, 0x83	; 131
    1bfe:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    1c00:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    1c02:	86 e0       	ldi	r24, 0x06	; 6
    1c04:	61 e0       	ldi	r22, 0x01	; 1
    1c06:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    1c0a:	84 b5       	in	r24, 0x24	; 36
    1c0c:	83 62       	ori	r24, 0x23	; 35
    1c0e:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    1c10:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    1c12:	85 e0       	ldi	r24, 0x05	; 5
    1c14:	61 e0       	ldi	r22, 0x01	; 1
    1c16:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    1c1a:	8f ef       	ldi	r24, 0xFF	; 255
    1c1c:	87 bd       	out	0x27, r24	; 39
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    1c1e:	88 bd       	out	0x28, r24	; 40
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    1c20:	df 91       	pop	r29
    1c22:	cf 91       	pop	r28
    1c24:	1f 91       	pop	r17
    1c26:	ff 90       	pop	r15
    1c28:	ef 90       	pop	r14
    1c2a:	08 95       	ret
  steppernum = num;
  currentstep = 0;

  if (steppernum == 1) {
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    1c2c:	80 91 f4 05 	lds	r24, 0x05F4
    1c30:	81 7e       	andi	r24, 0xE1	; 225
    1c32:	80 93 f4 05 	sts	0x05F4, r24
    MC.latch_tx();
    1c36:	83 ef       	ldi	r24, 0xF3	; 243
    1c38:	95 e0       	ldi	r25, 0x05	; 5
    1c3a:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN17AFMotorController8latch_txEv>
    
    // enable both H bridges
    pinMode(11, OUTPUT);
    1c3e:	8b e0       	ldi	r24, 0x0B	; 11
    1c40:	61 e0       	ldi	r22, 0x01	; 1
    1c42:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    pinMode(3, OUTPUT);
    1c46:	83 e0       	ldi	r24, 0x03	; 3
    1c48:	61 e0       	ldi	r22, 0x01	; 1
    1c4a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    digitalWrite(11, HIGH);
    1c4e:	8b e0       	ldi	r24, 0x0B	; 11
    1c50:	61 e0       	ldi	r22, 0x01	; 1
    1c52:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
    digitalWrite(3, HIGH);
    1c56:	83 e0       	ldi	r24, 0x03	; 3
    1c58:	61 e0       	ldi	r22, 0x01	; 1
    1c5a:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    1c5e:	80 91 b0 00 	lds	r24, 0x00B0
    1c62:	83 68       	ori	r24, 0x83	; 131
    1c64:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1c68:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    1c6c:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    1c70:	8b e0       	ldi	r24, 0x0B	; 11
    1c72:	61 e0       	ldi	r22, 0x01	; 1
    1c74:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    1c78:	80 91 b0 00 	lds	r24, 0x00B0
    1c7c:	83 62       	ori	r24, 0x23	; 35
    1c7e:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1c82:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    1c86:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    1c8a:	83 e0       	ldi	r24, 0x03	; 3
    1c8c:	61 e0       	ldi	r22, 0x01	; 1
    1c8e:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    1c92:	8f ef       	ldi	r24, 0xFF	; 255
    1c94:	80 93 b3 00 	sts	0x00B3, r24
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    1c98:	80 93 b4 00 	sts	0x00B4, r24
    1c9c:	8f cf       	rjmp	.-226    	; 0x1bbc <_ZN10AF_StepperC2Ejh+0x28>

00001c9e <__vector_18>:
  }
}

#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
  {
    1c9e:	1f 92       	push	r1
    1ca0:	0f 92       	push	r0
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	0f 92       	push	r0
    1ca6:	11 24       	eor	r1, r1
    1ca8:	2f 93       	push	r18
    1caa:	3f 93       	push	r19
    1cac:	4f 93       	push	r20
    1cae:	5f 93       	push	r21
    1cb0:	6f 93       	push	r22
    1cb2:	8f 93       	push	r24
    1cb4:	9f 93       	push	r25
    1cb6:	ef 93       	push	r30
    1cb8:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    1cba:	60 91 c6 00 	lds	r22, 0x00C6
  ring_buffer rx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *rx_buffer)
{
  int i = (unsigned int)(rx_buffer->head + 1) % RX_BUFFER_SIZE;
    1cbe:	20 91 75 06 	lds	r18, 0x0675
    1cc2:	30 91 76 06 	lds	r19, 0x0676
    1cc6:	c9 01       	movw	r24, r18
    1cc8:	01 96       	adiw	r24, 0x01	; 1
    1cca:	8f 77       	andi	r24, 0x7F	; 127
    1ccc:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != rx_buffer->tail) {
    1cce:	40 91 77 06 	lds	r20, 0x0677
    1cd2:	50 91 78 06 	lds	r21, 0x0678
    1cd6:	84 17       	cp	r24, r20
    1cd8:	95 07       	cpc	r25, r21
    1cda:	41 f0       	breq	.+16     	; 0x1cec <__vector_18+0x4e>
    rx_buffer->buffer[rx_buffer->head] = c;
    1cdc:	2b 50       	subi	r18, 0x0B	; 11
    1cde:	3a 4f       	sbci	r19, 0xFA	; 250
    1ce0:	f9 01       	movw	r30, r18
    1ce2:	60 83       	st	Z, r22
    rx_buffer->head = i;
    1ce4:	90 93 76 06 	sts	0x0676, r25
    1ce8:	80 93 75 06 	sts	0x0675, r24
    unsigned char c  =  UDR;  //  atmega8535
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    1cec:	ff 91       	pop	r31
    1cee:	ef 91       	pop	r30
    1cf0:	9f 91       	pop	r25
    1cf2:	8f 91       	pop	r24
    1cf4:	6f 91       	pop	r22
    1cf6:	5f 91       	pop	r21
    1cf8:	4f 91       	pop	r20
    1cfa:	3f 91       	pop	r19
    1cfc:	2f 91       	pop	r18
    1cfe:	0f 90       	pop	r0
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	0f 90       	pop	r0
    1d04:	1f 90       	pop	r1
    1d06:	18 95       	reti

00001d08 <_ZN14HardwareSerialC2EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:



// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
    1d08:	8f 92       	push	r8
    1d0a:	af 92       	push	r10
    1d0c:	cf 92       	push	r12
    1d0e:	df 92       	push	r13
    1d10:	ef 92       	push	r14
    1d12:	ff 92       	push	r15
    1d14:	0f 93       	push	r16
    1d16:	1f 93       	push	r17
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
    1d20:	fc 01       	movw	r30, r24
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    1d22:	88 e6       	ldi	r24, 0x68	; 104
    1d24:	91 e0       	ldi	r25, 0x01	; 1
    1d26:	91 83       	std	Z+1, r25	; 0x01
    1d28:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    1d2a:	73 83       	std	Z+3, r23	; 0x03
    1d2c:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
    1d2e:	55 83       	std	Z+5, r21	; 0x05
    1d30:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
    1d32:	37 83       	std	Z+7, r19	; 0x07
    1d34:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
    1d36:	11 87       	std	Z+9, r17	; 0x09
    1d38:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
    1d3a:	f3 86       	std	Z+11, r15	; 0x0b
    1d3c:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
    1d3e:	d5 86       	std	Z+13, r13	; 0x0d
    1d40:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
    1d42:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
    1d44:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
    1d46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d48:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
    1d4a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d4c:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
    1d4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d50:	82 8b       	std	Z+18, r24	; 0x12
}
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	1f 91       	pop	r17
    1d58:	0f 91       	pop	r16
    1d5a:	ff 90       	pop	r15
    1d5c:	ef 90       	pop	r14
    1d5e:	df 90       	pop	r13
    1d60:	cf 90       	pop	r12
    1d62:	af 90       	pop	r10
    1d64:	8f 90       	pop	r8
    1d66:	08 95       	ret

00001d68 <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:



// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
    1d68:	8f 92       	push	r8
    1d6a:	af 92       	push	r10
    1d6c:	cf 92       	push	r12
    1d6e:	df 92       	push	r13
    1d70:	ef 92       	push	r14
    1d72:	ff 92       	push	r15
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	fc 01       	movw	r30, r24
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    1d82:	88 e6       	ldi	r24, 0x68	; 104
    1d84:	91 e0       	ldi	r25, 0x01	; 1
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    1d8a:	73 83       	std	Z+3, r23	; 0x03
    1d8c:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
    1d8e:	55 83       	std	Z+5, r21	; 0x05
    1d90:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
    1d92:	37 83       	std	Z+7, r19	; 0x07
    1d94:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
    1d96:	11 87       	std	Z+9, r17	; 0x09
    1d98:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
    1d9a:	f3 86       	std	Z+11, r15	; 0x0b
    1d9c:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
    1d9e:	d5 86       	std	Z+13, r13	; 0x0d
    1da0:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
    1da2:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
    1da4:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
    1da6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da8:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
    1daa:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dac:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
    1dae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db0:	82 8b       	std	Z+18, r24	; 0x12
}
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	1f 91       	pop	r17
    1db8:	0f 91       	pop	r16
    1dba:	ff 90       	pop	r15
    1dbc:	ef 90       	pop	r14
    1dbe:	df 90       	pop	r13
    1dc0:	cf 90       	pop	r12
    1dc2:	af 90       	pop	r10
    1dc4:	8f 90       	pop	r8
    1dc6:	08 95       	ret

00001dc8 <_ZN14HardwareSerial5beginEl>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(long baud)
{
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	ec 01       	movw	r28, r24
    1dce:	9a 01       	movw	r18, r20
    1dd0:	ab 01       	movw	r20, r22

#if F_CPU == 16000000UL
  // hardcoded exception for compatibility with the bootloader shipped
  // with the Duemilanove and previous boards and the firmware on the 8U2
  // on the Uno and Mega 2560.
  if (baud == 57600) {
    1dd2:	20 30       	cpi	r18, 0x00	; 0
    1dd4:	81 ee       	ldi	r24, 0xE1	; 225
    1dd6:	38 07       	cpc	r19, r24
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	48 07       	cpc	r20, r24
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	58 07       	cpc	r21, r24
    1de0:	09 f4       	brne	.+2      	; 0x1de4 <_ZN14HardwareSerial5beginEl+0x1c>
    1de2:	48 c0       	rjmp	.+144    	; 0x1e74 <_ZN14HardwareSerial5beginEl+0xac>
    use_u2x = false;
  }
#endif
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    1de4:	e8 85       	ldd	r30, Y+8	; 0x08
    1de6:	f9 85       	ldd	r31, Y+9	; 0x09
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	0a 88       	ldd	r0, Y+18	; 0x12
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <_ZN14HardwareSerial5beginEl+0x2c>
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	0a 94       	dec	r0
    1df6:	e2 f7       	brpl	.-8      	; 0x1df0 <_ZN14HardwareSerial5beginEl+0x28>
    1df8:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	79 e0       	ldi	r23, 0x09	; 9
    1dfe:	8d e3       	ldi	r24, 0x3D	; 61
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	0e 94 ed 28 	call	0x51da	; 0x51da <__udivmodsi4>
    1e06:	21 50       	subi	r18, 0x01	; 1
    1e08:	30 40       	sbci	r19, 0x00	; 0
    1e0a:	40 40       	sbci	r20, 0x00	; 0
    1e0c:	50 40       	sbci	r21, 0x00	; 0
    1e0e:	56 95       	lsr	r21
    1e10:	47 95       	ror	r20
    1e12:	37 95       	ror	r19
    1e14:	27 95       	ror	r18
    1e16:	83 2f       	mov	r24, r19
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1e18:	ec 81       	ldd	r30, Y+4	; 0x04
    1e1a:	fd 81       	ldd	r31, Y+5	; 0x05
    1e1c:	80 83       	st	Z, r24
  *_ubrrl = baud_setting;
    1e1e:	ee 81       	ldd	r30, Y+6	; 0x06
    1e20:	ff 81       	ldd	r31, Y+7	; 0x07
    1e22:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    1e24:	ea 85       	ldd	r30, Y+10	; 0x0a
    1e26:	fb 85       	ldd	r31, Y+11	; 0x0b
    1e28:	80 81       	ld	r24, Z
    1e2a:	21 e0       	ldi	r18, 0x01	; 1
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	a9 01       	movw	r20, r18
    1e30:	0e 84       	ldd	r0, Y+14	; 0x0e
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <_ZN14HardwareSerial5beginEl+0x70>
    1e34:	44 0f       	add	r20, r20
    1e36:	55 1f       	adc	r21, r21
    1e38:	0a 94       	dec	r0
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <_ZN14HardwareSerial5beginEl+0x6c>
    1e3c:	84 2b       	or	r24, r20
    1e3e:	80 83       	st	Z, r24
  sbi(*_ucsrb, _txen);
    1e40:	ea 85       	ldd	r30, Y+10	; 0x0a
    1e42:	fb 85       	ldd	r31, Y+11	; 0x0b
    1e44:	80 81       	ld	r24, Z
    1e46:	a9 01       	movw	r20, r18
    1e48:	0f 84       	ldd	r0, Y+15	; 0x0f
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <_ZN14HardwareSerial5beginEl+0x88>
    1e4c:	44 0f       	add	r20, r20
    1e4e:	55 1f       	adc	r21, r21
    1e50:	0a 94       	dec	r0
    1e52:	e2 f7       	brpl	.-8      	; 0x1e4c <_ZN14HardwareSerial5beginEl+0x84>
    1e54:	84 2b       	or	r24, r20
    1e56:	80 83       	st	Z, r24
  sbi(*_ucsrb, _rxcie);
    1e58:	ea 85       	ldd	r30, Y+10	; 0x0a
    1e5a:	fb 85       	ldd	r31, Y+11	; 0x0b
    1e5c:	80 81       	ld	r24, Z
    1e5e:	08 88       	ldd	r0, Y+16	; 0x10
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <_ZN14HardwareSerial5beginEl+0x9e>
    1e62:	22 0f       	add	r18, r18
    1e64:	33 1f       	adc	r19, r19
    1e66:	0a 94       	dec	r0
    1e68:	e2 f7       	brpl	.-8      	; 0x1e62 <_ZN14HardwareSerial5beginEl+0x9a>
    1e6a:	82 2b       	or	r24, r18
    1e6c:	80 83       	st	Z, r24
}
    1e6e:	df 91       	pop	r29
    1e70:	cf 91       	pop	r28
    1e72:	08 95       	ret
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    1e74:	e8 85       	ldd	r30, Y+8	; 0x08
    1e76:	f9 85       	ldd	r31, Y+9	; 0x09
    1e78:	10 82       	st	Z, r1
    1e7a:	20 e1       	ldi	r18, 0x10	; 16
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	cc cf       	rjmp	.-104    	; 0x1e18 <_ZN14HardwareSerial5beginEl+0x50>

00001e80 <_ZN14HardwareSerial3endEv>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
}

void HardwareSerial::end()
{
    1e80:	fc 01       	movw	r30, r24
  cbi(*_ucsrb, _rxen);
    1e82:	a2 85       	ldd	r26, Z+10	; 0x0a
    1e84:	b3 85       	ldd	r27, Z+11	; 0x0b
    1e86:	3c 91       	ld	r19, X
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	ac 01       	movw	r20, r24
    1e8e:	06 84       	ldd	r0, Z+14	; 0x0e
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <_ZN14HardwareSerial3endEv+0x16>
    1e92:	44 0f       	add	r20, r20
    1e94:	55 1f       	adc	r21, r21
    1e96:	0a 94       	dec	r0
    1e98:	e2 f7       	brpl	.-8      	; 0x1e92 <_ZN14HardwareSerial3endEv+0x12>
    1e9a:	24 2f       	mov	r18, r20
    1e9c:	20 95       	com	r18
    1e9e:	23 23       	and	r18, r19
    1ea0:	2c 93       	st	X, r18
  cbi(*_ucsrb, _txen);
    1ea2:	a2 85       	ldd	r26, Z+10	; 0x0a
    1ea4:	b3 85       	ldd	r27, Z+11	; 0x0b
    1ea6:	3c 91       	ld	r19, X
    1ea8:	ac 01       	movw	r20, r24
    1eaa:	07 84       	ldd	r0, Z+15	; 0x0f
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <_ZN14HardwareSerial3endEv+0x32>
    1eae:	44 0f       	add	r20, r20
    1eb0:	55 1f       	adc	r21, r21
    1eb2:	0a 94       	dec	r0
    1eb4:	e2 f7       	brpl	.-8      	; 0x1eae <_ZN14HardwareSerial3endEv+0x2e>
    1eb6:	24 2f       	mov	r18, r20
    1eb8:	20 95       	com	r18
    1eba:	23 23       	and	r18, r19
    1ebc:	2c 93       	st	X, r18
  cbi(*_ucsrb, _rxcie);  
    1ebe:	a2 85       	ldd	r26, Z+10	; 0x0a
    1ec0:	b3 85       	ldd	r27, Z+11	; 0x0b
    1ec2:	2c 91       	ld	r18, X
    1ec4:	00 88       	ldd	r0, Z+16	; 0x10
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <_ZN14HardwareSerial3endEv+0x4c>
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	0a 94       	dec	r0
    1ece:	e2 f7       	brpl	.-8      	; 0x1ec8 <_ZN14HardwareSerial3endEv+0x48>
    1ed0:	80 95       	com	r24
    1ed2:	82 23       	and	r24, r18
    1ed4:	8c 93       	st	X, r24
}
    1ed6:	08 95       	ret

00001ed8 <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
    1ed8:	fc 01       	movw	r30, r24
    1eda:	82 81       	ldd	r24, Z+2	; 0x02
    1edc:	93 81       	ldd	r25, Z+3	; 0x03
    1ede:	fc 01       	movw	r30, r24
    1ee0:	e0 58       	subi	r30, 0x80	; 128
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	20 81       	ld	r18, Z
    1ee6:	31 81       	ldd	r19, Z+1	; 0x01
    1ee8:	8e 57       	subi	r24, 0x7E	; 126
    1eea:	9f 4f       	sbci	r25, 0xFF	; 255
    1eec:	fc 01       	movw	r30, r24
    1eee:	80 81       	ld	r24, Z
    1ef0:	91 81       	ldd	r25, Z+1	; 0x01
    1ef2:	28 1b       	sub	r18, r24
    1ef4:	39 0b       	sbc	r19, r25
    1ef6:	2f 77       	andi	r18, 0x7F	; 127
    1ef8:	30 70       	andi	r19, 0x00	; 0
}
    1efa:	c9 01       	movw	r24, r18
    1efc:	08 95       	ret

00001efe <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    1efe:	fc 01       	movw	r30, r24
    1f00:	82 81       	ldd	r24, Z+2	; 0x02
    1f02:	93 81       	ldd	r25, Z+3	; 0x03
    1f04:	fc 01       	movw	r30, r24
    1f06:	ee 57       	subi	r30, 0x7E	; 126
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	20 81       	ld	r18, Z
    1f0c:	31 81       	ldd	r19, Z+1	; 0x01
    1f0e:	fc 01       	movw	r30, r24
    1f10:	e0 58       	subi	r30, 0x80	; 128
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	40 81       	ld	r20, Z
    1f16:	51 81       	ldd	r21, Z+1	; 0x01
    1f18:	42 17       	cp	r20, r18
    1f1a:	53 07       	cpc	r21, r19
    1f1c:	39 f0       	breq	.+14     	; 0x1f2c <_ZN14HardwareSerial4peekEv+0x2e>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    1f1e:	82 0f       	add	r24, r18
    1f20:	93 1f       	adc	r25, r19
    1f22:	fc 01       	movw	r30, r24
    1f24:	20 81       	ld	r18, Z
    1f26:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1f28:	c9 01       	movw	r24, r18
    1f2a:	08 95       	ret
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    1f2c:	2f ef       	ldi	r18, 0xFF	; 255
    1f2e:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    1f30:	c9 01       	movw	r24, r18
    1f32:	08 95       	ret

00001f34 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    1f34:	dc 01       	movw	r26, r24
    1f36:	12 96       	adiw	r26, 0x02	; 2
    1f38:	8d 91       	ld	r24, X+
    1f3a:	9c 91       	ld	r25, X
    1f3c:	13 97       	sbiw	r26, 0x03	; 3
    1f3e:	fc 01       	movw	r30, r24
    1f40:	ee 57       	subi	r30, 0x7E	; 126
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	40 81       	ld	r20, Z
    1f46:	51 81       	ldd	r21, Z+1	; 0x01
    1f48:	dc 01       	movw	r26, r24
    1f4a:	a0 58       	subi	r26, 0x80	; 128
    1f4c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f4e:	2d 91       	ld	r18, X+
    1f50:	3c 91       	ld	r19, X
    1f52:	11 97       	sbiw	r26, 0x01	; 1
    1f54:	24 17       	cp	r18, r20
    1f56:	35 07       	cpc	r19, r21
    1f58:	69 f0       	breq	.+26     	; 0x1f74 <_ZN14HardwareSerial4readEv+0x40>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1f5a:	84 0f       	add	r24, r20
    1f5c:	95 1f       	adc	r25, r21
    1f5e:	dc 01       	movw	r26, r24
    1f60:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
    1f62:	4f 5f       	subi	r20, 0xFF	; 255
    1f64:	5f 4f       	sbci	r21, 0xFF	; 255
    1f66:	4f 77       	andi	r20, 0x7F	; 127
    1f68:	50 70       	andi	r21, 0x00	; 0
    1f6a:	51 83       	std	Z+1, r21	; 0x01
    1f6c:	40 83       	st	Z, r20
    return c;
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1f70:	c9 01       	movw	r24, r18
    1f72:	08 95       	ret
}

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    1f74:	2f ef       	ldi	r18, 0xFF	; 255
    1f76:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
    return c;
  }
}
    1f78:	c9 01       	movw	r24, r18
    1f7a:	08 95       	ret

00001f7c <_ZN14HardwareSerial5flushEv>:
  // don't reverse this or there may be problems if the RX interrupt
  // occurs after reading the value of rx_buffer_head but before writing
  // the value to rx_buffer_tail; the previous value of rx_buffer_head
  // may be written to rx_buffer_tail, making it appear as if the buffer
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	12 96       	adiw	r26, 0x02	; 2
    1f80:	8d 91       	ld	r24, X+
    1f82:	9c 91       	ld	r25, X
    1f84:	13 97       	sbiw	r26, 0x03	; 3
    1f86:	fc 01       	movw	r30, r24
    1f88:	e0 58       	subi	r30, 0x80	; 128
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	8e 57       	subi	r24, 0x7E	; 126
    1f8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f90:	dc 01       	movw	r26, r24
    1f92:	8d 91       	ld	r24, X+
    1f94:	9c 91       	ld	r25, X
    1f96:	11 97       	sbiw	r26, 0x01	; 1
    1f98:	91 83       	std	Z+1, r25	; 0x01
    1f9a:	80 83       	st	Z, r24
}
    1f9c:	08 95       	ret

00001f9e <_ZN14HardwareSerial5writeEh>:

void HardwareSerial::write(uint8_t c)
{
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	a0 85       	ldd	r26, Z+8	; 0x08
    1fa2:	b1 85       	ldd	r27, Z+9	; 0x09
    1fa4:	21 89       	ldd	r18, Z+17	; 0x11
  while (!((*_ucsra) & (1 << _udre)))
    1fa6:	8c 91       	ld	r24, X
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	02 2e       	mov	r0, r18
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <_ZN14HardwareSerial5writeEh+0x14>
    1fae:	95 95       	asr	r25
    1fb0:	87 95       	ror	r24
    1fb2:	0a 94       	dec	r0
    1fb4:	e2 f7       	brpl	.-8      	; 0x1fae <_ZN14HardwareSerial5writeEh+0x10>
    1fb6:	80 ff       	sbrs	r24, 0
    1fb8:	f6 cf       	rjmp	.-20     	; 0x1fa6 <_ZN14HardwareSerial5writeEh+0x8>
    ;

  *_udr = c;
    1fba:	04 84       	ldd	r0, Z+12	; 0x0c
    1fbc:	f5 85       	ldd	r31, Z+13	; 0x0d
    1fbe:	e0 2d       	mov	r30, r0
    1fc0:	60 83       	st	Z, r22
}
    1fc2:	08 95       	ret

00001fc4 <_GLOBAL__I_rx_buffer>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    1fc4:	88 e6       	ldi	r24, 0x68	; 104
    1fc6:	91 e0       	ldi	r25, 0x01	; 1
    1fc8:	90 93 7a 06 	sts	0x067A, r25
    1fcc:	80 93 79 06 	sts	0x0679, r24
{
  _rx_buffer = rx_buffer;
    1fd0:	85 ef       	ldi	r24, 0xF5	; 245
    1fd2:	95 e0       	ldi	r25, 0x05	; 5
    1fd4:	90 93 7c 06 	sts	0x067C, r25
    1fd8:	80 93 7b 06 	sts	0x067B, r24
  _ubrrh = ubrrh;
    1fdc:	85 ec       	ldi	r24, 0xC5	; 197
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	90 93 7e 06 	sts	0x067E, r25
    1fe4:	80 93 7d 06 	sts	0x067D, r24
  _ubrrl = ubrrl;
    1fe8:	84 ec       	ldi	r24, 0xC4	; 196
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	90 93 80 06 	sts	0x0680, r25
    1ff0:	80 93 7f 06 	sts	0x067F, r24
  _ucsra = ucsra;
    1ff4:	80 ec       	ldi	r24, 0xC0	; 192
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	90 93 82 06 	sts	0x0682, r25
    1ffc:	80 93 81 06 	sts	0x0681, r24
  _ucsrb = ucsrb;
    2000:	81 ec       	ldi	r24, 0xC1	; 193
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	90 93 84 06 	sts	0x0684, r25
    2008:	80 93 83 06 	sts	0x0683, r24
  _udr = udr;
    200c:	86 ec       	ldi	r24, 0xC6	; 198
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	90 93 86 06 	sts	0x0686, r25
    2014:	80 93 85 06 	sts	0x0685, r24
  _rxen = rxen;
    2018:	84 e0       	ldi	r24, 0x04	; 4
    201a:	80 93 87 06 	sts	0x0687, r24
  _txen = txen;
    201e:	83 e0       	ldi	r24, 0x03	; 3
    2020:	80 93 88 06 	sts	0x0688, r24
  _rxcie = rxcie;
    2024:	87 e0       	ldi	r24, 0x07	; 7
    2026:	80 93 89 06 	sts	0x0689, r24
  _udre = udre;
    202a:	85 e0       	ldi	r24, 0x05	; 5
    202c:	80 93 8a 06 	sts	0x068A, r24
  _u2x = u2x;
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	80 93 8b 06 	sts	0x068B, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
    2036:	08 95       	ret

00002038 <_ZN5Print5writeEPKc>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
    2038:	0f 93       	push	r16
    203a:	1f 93       	push	r17
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
    2040:	ec 01       	movw	r28, r24
    2042:	8b 01       	movw	r16, r22
  while (*str)
    2044:	fb 01       	movw	r30, r22
    2046:	60 81       	ld	r22, Z
    2048:	66 23       	and	r22, r22
    204a:	69 f0       	breq	.+26     	; 0x2066 <_ZN5Print5writeEPKc+0x2e>
    write(*str++);
    204c:	0f 5f       	subi	r16, 0xFF	; 255
    204e:	1f 4f       	sbci	r17, 0xFF	; 255
    2050:	e8 81       	ld	r30, Y
    2052:	f9 81       	ldd	r31, Y+1	; 0x01
    2054:	01 90       	ld	r0, Z+
    2056:	f0 81       	ld	r31, Z
    2058:	e0 2d       	mov	r30, r0
    205a:	ce 01       	movw	r24, r28
    205c:	09 95       	icall
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
  while (*str)
    205e:	f8 01       	movw	r30, r16
    2060:	60 81       	ld	r22, Z
    2062:	66 23       	and	r22, r22
    2064:	99 f7       	brne	.-26     	; 0x204c <_ZN5Print5writeEPKc+0x14>
    write(*str++);
}
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	1f 91       	pop	r17
    206c:	0f 91       	pop	r16
    206e:	08 95       	ret

00002070 <_ZN5Print5writeEPKhj>:

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
    2070:	ef 92       	push	r14
    2072:	ff 92       	push	r15
    2074:	0f 93       	push	r16
    2076:	1f 93       	push	r17
    2078:	cf 93       	push	r28
    207a:	df 93       	push	r29
    207c:	ec 01       	movw	r28, r24
    207e:	8b 01       	movw	r16, r22
    2080:	7a 01       	movw	r14, r20
  while (size--)
    2082:	41 15       	cp	r20, r1
    2084:	51 05       	cpc	r21, r1
    2086:	81 f0       	breq	.+32     	; 0x20a8 <_ZN5Print5writeEPKhj+0x38>
    write(*buffer++);
    2088:	f8 01       	movw	r30, r16
    208a:	61 91       	ld	r22, Z+
    208c:	8f 01       	movw	r16, r30
    208e:	e8 81       	ld	r30, Y
    2090:	f9 81       	ldd	r31, Y+1	; 0x01
    2092:	01 90       	ld	r0, Z+
    2094:	f0 81       	ld	r31, Z
    2096:	e0 2d       	mov	r30, r0
    2098:	ce 01       	movw	r24, r28
    209a:	09 95       	icall
    209c:	08 94       	sec
    209e:	e1 08       	sbc	r14, r1
    20a0:	f1 08       	sbc	r15, r1
}

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
  while (size--)
    20a2:	e1 14       	cp	r14, r1
    20a4:	f1 04       	cpc	r15, r1
    20a6:	81 f7       	brne	.-32     	; 0x2088 <_ZN5Print5writeEPKhj+0x18>
    write(*buffer++);
}
    20a8:	df 91       	pop	r29
    20aa:	cf 91       	pop	r28
    20ac:	1f 91       	pop	r17
    20ae:	0f 91       	pop	r16
    20b0:	ff 90       	pop	r15
    20b2:	ef 90       	pop	r14
    20b4:	08 95       	ret

000020b6 <_ZN5Print5printEPKc>:
  }
}

void Print::print(const char str[])
{
  write(str);
    20b6:	dc 01       	movw	r26, r24
    20b8:	ed 91       	ld	r30, X+
    20ba:	fc 91       	ld	r31, X
    20bc:	02 80       	ldd	r0, Z+2	; 0x02
    20be:	f3 81       	ldd	r31, Z+3	; 0x03
    20c0:	e0 2d       	mov	r30, r0
    20c2:	09 95       	icall
}
    20c4:	08 95       	ret

000020c6 <_ZN5Print5printERK6String>:
  while (size--)
    write(*buffer++);
}

void Print::print(const String &s)
{
    20c6:	cf 92       	push	r12
    20c8:	df 92       	push	r13
    20ca:	ef 92       	push	r14
    20cc:	ff 92       	push	r15
    20ce:	0f 93       	push	r16
    20d0:	1f 93       	push	r17
    20d2:	cf 93       	push	r28
    20d4:	df 93       	push	r29
    20d6:	7c 01       	movw	r14, r24
    20d8:	8b 01       	movw	r16, r22
  for (int i = 0; i < s.length(); i++) {
    20da:	db 01       	movw	r26, r22
    20dc:	14 96       	adiw	r26, 0x04	; 4
    20de:	8d 91       	ld	r24, X+
    20e0:	9c 91       	ld	r25, X
    20e2:	15 97       	sbiw	r26, 0x05	; 5
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	c1 f0       	breq	.+48     	; 0x2118 <_ZN5Print5printERK6String+0x52>
    20e8:	60 e0       	ldi	r22, 0x00	; 0
    20ea:	70 e0       	ldi	r23, 0x00	; 0
    20ec:	c0 e0       	ldi	r28, 0x00	; 0
    20ee:	d0 e0       	ldi	r29, 0x00	; 0
    write(s[i]);
    20f0:	d7 01       	movw	r26, r14
    20f2:	ed 91       	ld	r30, X+
    20f4:	fc 91       	ld	r31, X
    20f6:	c0 80       	ld	r12, Z
    20f8:	d1 80       	ldd	r13, Z+1	; 0x01
    20fa:	c8 01       	movw	r24, r16
    20fc:	0e 94 90 16 	call	0x2d20	; 0x2d20 <_ZNK6StringixEj>
    2100:	68 2f       	mov	r22, r24
    2102:	c7 01       	movw	r24, r14
    2104:	f6 01       	movw	r30, r12
    2106:	09 95       	icall
    write(*buffer++);
}

void Print::print(const String &s)
{
  for (int i = 0; i < s.length(); i++) {
    2108:	21 96       	adiw	r28, 0x01	; 1
    210a:	be 01       	movw	r22, r28
    210c:	f8 01       	movw	r30, r16
    210e:	84 81       	ldd	r24, Z+4	; 0x04
    2110:	95 81       	ldd	r25, Z+5	; 0x05
    2112:	c8 17       	cp	r28, r24
    2114:	d9 07       	cpc	r29, r25
    2116:	60 f3       	brcs	.-40     	; 0x20f0 <_ZN5Print5printERK6String+0x2a>
    write(s[i]);
  }
}
    2118:	df 91       	pop	r29
    211a:	cf 91       	pop	r28
    211c:	1f 91       	pop	r17
    211e:	0f 91       	pop	r16
    2120:	ff 90       	pop	r15
    2122:	ef 90       	pop	r14
    2124:	df 90       	pop	r13
    2126:	cf 90       	pop	r12
    2128:	08 95       	ret

0000212a <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

void Print::printNumber(unsigned long n, uint8_t base)
{
    212a:	2f 92       	push	r2
    212c:	3f 92       	push	r3
    212e:	4f 92       	push	r4
    2130:	5f 92       	push	r5
    2132:	6f 92       	push	r6
    2134:	7f 92       	push	r7
    2136:	8f 92       	push	r8
    2138:	9f 92       	push	r9
    213a:	af 92       	push	r10
    213c:	bf 92       	push	r11
    213e:	cf 92       	push	r12
    2140:	df 92       	push	r13
    2142:	ef 92       	push	r14
    2144:	ff 92       	push	r15
    2146:	0f 93       	push	r16
    2148:	1f 93       	push	r17
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
    2152:	a2 97       	sbiw	r28, 0x22	; 34
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	f8 94       	cli
    2158:	de bf       	out	0x3e, r29	; 62
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	cd bf       	out	0x3d, r28	; 61
    215e:	9a a3       	std	Y+34, r25	; 0x22
    2160:	89 a3       	std	Y+33, r24	; 0x21
    2162:	7a 01       	movw	r14, r20
    2164:	8b 01       	movw	r16, r22
  unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
  unsigned long i = 0;

  if (n == 0) {
    2166:	41 15       	cp	r20, r1
    2168:	51 05       	cpc	r21, r1
    216a:	61 05       	cpc	r22, r1
    216c:	71 05       	cpc	r23, r1
    216e:	09 f4       	brne	.+2      	; 0x2172 <_ZN5Print11printNumberEmh+0x48>
    2170:	55 c0       	rjmp	.+170    	; 0x221c <_ZN5Print11printNumberEmh+0xf2>
    print('0');
    return;
    2172:	62 2e       	mov	r6, r18
    2174:	77 24       	eor	r7, r7
    2176:	88 24       	eor	r8, r8
    2178:	99 24       	eor	r9, r9
    217a:	aa 24       	eor	r10, r10
    217c:	bb 24       	eor	r11, r11
    217e:	65 01       	movw	r12, r10
    2180:	1e 01       	movw	r2, r28
    2182:	08 94       	sec
    2184:	21 1c       	adc	r2, r1
    2186:	31 1c       	adc	r3, r1
  } 

  while (n > 0) {
    buf[i++] = n % base;
    2188:	21 01       	movw	r4, r2
    218a:	4a 0c       	add	r4, r10
    218c:	5b 1c       	adc	r5, r11
    218e:	c8 01       	movw	r24, r16
    2190:	b7 01       	movw	r22, r14
    2192:	a4 01       	movw	r20, r8
    2194:	93 01       	movw	r18, r6
    2196:	0e 94 ed 28 	call	0x51da	; 0x51da <__udivmodsi4>
    219a:	f2 01       	movw	r30, r4
    219c:	60 83       	st	Z, r22
    219e:	08 94       	sec
    21a0:	a1 1c       	adc	r10, r1
    21a2:	b1 1c       	adc	r11, r1
    21a4:	c1 1c       	adc	r12, r1
    21a6:	d1 1c       	adc	r13, r1
    n /= base;
    21a8:	c8 01       	movw	r24, r16
    21aa:	b7 01       	movw	r22, r14
    21ac:	a4 01       	movw	r20, r8
    21ae:	93 01       	movw	r18, r6
    21b0:	0e 94 ed 28 	call	0x51da	; 0x51da <__udivmodsi4>
    21b4:	e2 2e       	mov	r14, r18
    21b6:	f3 2e       	mov	r15, r19
    21b8:	04 2f       	mov	r16, r20
    21ba:	15 2f       	mov	r17, r21
  if (n == 0) {
    print('0');
    return;
  } 

  while (n > 0) {
    21bc:	e1 14       	cp	r14, r1
    21be:	f1 04       	cpc	r15, r1
    21c0:	01 05       	cpc	r16, r1
    21c2:	11 05       	cpc	r17, r1
    21c4:	09 f7       	brne	.-62     	; 0x2188 <_ZN5Print11printNumberEmh+0x5e>
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
    21c6:	a1 14       	cp	r10, r1
    21c8:	b1 04       	cpc	r11, r1
    21ca:	c1 04       	cpc	r12, r1
    21cc:	d1 04       	cpc	r13, r1
    21ce:	71 f1       	breq	.+92     	; 0x222c <_ZN5Print11printNumberEmh+0x102>
    21d0:	08 94       	sec
    21d2:	a1 08       	sbc	r10, r1
    21d4:	b1 08       	sbc	r11, r1
    21d6:	c1 08       	sbc	r12, r1
    21d8:	d1 08       	sbc	r13, r1
    21da:	18 c0       	rjmp	.+48     	; 0x220c <_ZN5Print11printNumberEmh+0xe2>
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
    21dc:	40 5d       	subi	r20, 0xD0	; 208
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    21de:	50 e0       	ldi	r21, 0x00	; 0
    21e0:	60 e0       	ldi	r22, 0x00	; 0
    21e2:	70 e0       	ldi	r23, 0x00	; 0
    21e4:	89 a1       	ldd	r24, Y+33	; 0x21
    21e6:	9a a1       	ldd	r25, Y+34	; 0x22
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZN5Print5printEli>
    21f0:	08 94       	sec
    21f2:	a1 08       	sbc	r10, r1
    21f4:	b1 08       	sbc	r11, r1
    21f6:	c1 08       	sbc	r12, r1
    21f8:	d1 08       	sbc	r13, r1
  while (n > 0) {
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
    21fa:	ff ef       	ldi	r31, 0xFF	; 255
    21fc:	af 16       	cp	r10, r31
    21fe:	ff ef       	ldi	r31, 0xFF	; 255
    2200:	bf 06       	cpc	r11, r31
    2202:	ff ef       	ldi	r31, 0xFF	; 255
    2204:	cf 06       	cpc	r12, r31
    2206:	ff ef       	ldi	r31, 0xFF	; 255
    2208:	df 06       	cpc	r13, r31
    220a:	81 f0       	breq	.+32     	; 0x222c <_ZN5Print11printNumberEmh+0x102>
    print((char) (buf[i - 1] < 10 ?
    220c:	f1 01       	movw	r30, r2
    220e:	ea 0d       	add	r30, r10
    2210:	fb 1d       	adc	r31, r11
    2212:	40 81       	ld	r20, Z
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
    2214:	4a 30       	cpi	r20, 0x0A	; 10
    2216:	10 f3       	brcs	.-60     	; 0x21dc <_ZN5Print11printNumberEmh+0xb2>
    2218:	49 5c       	subi	r20, 0xC9	; 201
    221a:	e1 cf       	rjmp	.-62     	; 0x21de <_ZN5Print11printNumberEmh+0xb4>
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    221c:	40 e3       	ldi	r20, 0x30	; 48
    221e:	50 e0       	ldi	r21, 0x00	; 0
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	70 e0       	ldi	r23, 0x00	; 0
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZN5Print5printEli>

  for (; i > 0; i--)
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}
    222c:	a2 96       	adiw	r28, 0x22	; 34
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	1f 91       	pop	r17
    223e:	0f 91       	pop	r16
    2240:	ff 90       	pop	r15
    2242:	ef 90       	pop	r14
    2244:	df 90       	pop	r13
    2246:	cf 90       	pop	r12
    2248:	bf 90       	pop	r11
    224a:	af 90       	pop	r10
    224c:	9f 90       	pop	r9
    224e:	8f 90       	pop	r8
    2250:	7f 90       	pop	r7
    2252:	6f 90       	pop	r6
    2254:	5f 90       	pop	r5
    2256:	4f 90       	pop	r4
    2258:	3f 90       	pop	r3
    225a:	2f 90       	pop	r2
    225c:	08 95       	ret

0000225e <_ZN5Print5printEmi>:
  }
}

void Print::print(unsigned long n, int base)
{
  if (base == 0) write(n);
    225e:	21 15       	cp	r18, r1
    2260:	31 05       	cpc	r19, r1
    2262:	19 f0       	breq	.+6      	; 0x226a <_ZN5Print5printEmi+0xc>
  else printNumber(n, base);
    2264:	0e 94 95 10 	call	0x212a	; 0x212a <_ZN5Print11printNumberEmh>
    2268:	08 95       	ret
  }
}

void Print::print(unsigned long n, int base)
{
  if (base == 0) write(n);
    226a:	dc 01       	movw	r26, r24
    226c:	ed 91       	ld	r30, X+
    226e:	fc 91       	ld	r31, X
    2270:	01 90       	ld	r0, Z+
    2272:	f0 81       	ld	r31, Z
    2274:	e0 2d       	mov	r30, r0
    2276:	64 2f       	mov	r22, r20
    2278:	09 95       	icall
    227a:	08 95       	ret

0000227c <_ZN5Print5printEji>:
{
  print((long) n, base);
}

void Print::print(unsigned int n, int base)
{
    227c:	9a 01       	movw	r18, r20
  print((unsigned long) n, base);
    227e:	ab 01       	movw	r20, r22
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	70 e0       	ldi	r23, 0x00	; 0
    2284:	0e 94 2f 11 	call	0x225e	; 0x225e <_ZN5Print5printEmi>
}
    2288:	08 95       	ret

0000228a <_ZN5Print5printEhi>:
{
  print((long) c, base);
}

void Print::print(unsigned char b, int base)
{
    228a:	9a 01       	movw	r18, r20
  print((unsigned long) b, base);
    228c:	46 2f       	mov	r20, r22
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	60 e0       	ldi	r22, 0x00	; 0
    2292:	70 e0       	ldi	r23, 0x00	; 0
    2294:	0e 94 2f 11 	call	0x225e	; 0x225e <_ZN5Print5printEmi>
}
    2298:	08 95       	ret

0000229a <_ZN5Print5printEli>:
{
  print((unsigned long) n, base);
}

void Print::print(long n, int base)
{
    229a:	ef 92       	push	r14
    229c:	ff 92       	push	r15
    229e:	0f 93       	push	r16
    22a0:	1f 93       	push	r17
    22a2:	cf 93       	push	r28
    22a4:	df 93       	push	r29
    22a6:	ec 01       	movw	r28, r24
    22a8:	7a 01       	movw	r14, r20
    22aa:	8b 01       	movw	r16, r22
  if (base == 0) {
    22ac:	21 15       	cp	r18, r1
    22ae:	31 05       	cpc	r19, r1
    22b0:	d9 f0       	breq	.+54     	; 0x22e8 <_ZN5Print5printEli+0x4e>
    write(n);
  } else if (base == 10) {
    22b2:	2a 30       	cpi	r18, 0x0A	; 10
    22b4:	31 05       	cpc	r19, r1
    22b6:	49 f0       	breq	.+18     	; 0x22ca <_ZN5Print5printEli+0x30>
      print('-');
      n = -n;
    }
    printNumber(n, 10);
  } else {
    printNumber(n, base);
    22b8:	0e 94 95 10 	call	0x212a	; 0x212a <_ZN5Print11printNumberEmh>
  }
}
    22bc:	df 91       	pop	r29
    22be:	cf 91       	pop	r28
    22c0:	1f 91       	pop	r17
    22c2:	0f 91       	pop	r16
    22c4:	ff 90       	pop	r15
    22c6:	ef 90       	pop	r14
    22c8:	08 95       	ret
void Print::print(long n, int base)
{
  if (base == 0) {
    write(n);
  } else if (base == 10) {
    if (n < 0) {
    22ca:	77 fd       	sbrc	r23, 7
    22cc:	1b c0       	rjmp	.+54     	; 0x2304 <_ZN5Print5printEli+0x6a>
      print('-');
      n = -n;
    }
    printNumber(n, 10);
    22ce:	ce 01       	movw	r24, r28
    22d0:	b8 01       	movw	r22, r16
    22d2:	a7 01       	movw	r20, r14
    22d4:	2a e0       	ldi	r18, 0x0A	; 10
    22d6:	0e 94 95 10 	call	0x212a	; 0x212a <_ZN5Print11printNumberEmh>
  } else {
    printNumber(n, base);
  }
}
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	1f 91       	pop	r17
    22e0:	0f 91       	pop	r16
    22e2:	ff 90       	pop	r15
    22e4:	ef 90       	pop	r14
    22e6:	08 95       	ret
}

void Print::print(long n, int base)
{
  if (base == 0) {
    write(n);
    22e8:	e8 81       	ld	r30, Y
    22ea:	f9 81       	ldd	r31, Y+1	; 0x01
    22ec:	01 90       	ld	r0, Z+
    22ee:	f0 81       	ld	r31, Z
    22f0:	e0 2d       	mov	r30, r0
    22f2:	64 2f       	mov	r22, r20
    22f4:	09 95       	icall
    }
    printNumber(n, 10);
  } else {
    printNumber(n, base);
  }
}
    22f6:	df 91       	pop	r29
    22f8:	cf 91       	pop	r28
    22fa:	1f 91       	pop	r17
    22fc:	0f 91       	pop	r16
    22fe:	ff 90       	pop	r15
    2300:	ef 90       	pop	r14
    2302:	08 95       	ret
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    2304:	4d e2       	ldi	r20, 0x2D	; 45
    2306:	50 e0       	ldi	r21, 0x00	; 0
    2308:	60 e0       	ldi	r22, 0x00	; 0
    230a:	70 e0       	ldi	r23, 0x00	; 0
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZN5Print5printEli>
  if (base == 0) {
    write(n);
  } else if (base == 10) {
    if (n < 0) {
      print('-');
      n = -n;
    2314:	10 95       	com	r17
    2316:	00 95       	com	r16
    2318:	f0 94       	com	r15
    231a:	e0 94       	com	r14
    231c:	e1 1c       	adc	r14, r1
    231e:	f1 1c       	adc	r15, r1
    2320:	01 1d       	adc	r16, r1
    2322:	11 1d       	adc	r17, r1
    2324:	d4 cf       	rjmp	.-88     	; 0x22ce <_ZN5Print5printEli+0x34>

00002326 <_ZN5Print5printEii>:
{
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
{
    2326:	ef 92       	push	r14
    2328:	ff 92       	push	r15
    232a:	0f 93       	push	r16
    232c:	1f 93       	push	r17
    232e:	9a 01       	movw	r18, r20
  print((long) n, base);
    2330:	7b 01       	movw	r14, r22
    2332:	00 27       	eor	r16, r16
    2334:	f7 fc       	sbrc	r15, 7
    2336:	00 95       	com	r16
    2338:	10 2f       	mov	r17, r16
    233a:	b8 01       	movw	r22, r16
    233c:	a7 01       	movw	r20, r14
    233e:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZN5Print5printEli>
}
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	ff 90       	pop	r15
    2348:	ef 90       	pop	r14
    234a:	08 95       	ret

0000234c <_ZN5Print5printEci>:
{
  write(str);
}

void Print::print(char c, int base)
{
    234c:	9a 01       	movw	r18, r20
  print((long) c, base);
    234e:	46 2f       	mov	r20, r22
    2350:	50 e0       	ldi	r21, 0x00	; 0
    2352:	60 e0       	ldi	r22, 0x00	; 0
    2354:	70 e0       	ldi	r23, 0x00	; 0
    2356:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZN5Print5printEli>
}
    235a:	08 95       	ret

0000235c <_ZN5Print7printlnEv>:
{
  printFloat(n, digits);
}

void Print::println(void)
{
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
    2360:	ec 01       	movw	r28, r24
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    2362:	4d e0       	ldi	r20, 0x0D	; 13
    2364:	50 e0       	ldi	r21, 0x00	; 0
    2366:	60 e0       	ldi	r22, 0x00	; 0
    2368:	70 e0       	ldi	r23, 0x00	; 0
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZN5Print5printEli>
    2372:	ce 01       	movw	r24, r28
    2374:	4a e0       	ldi	r20, 0x0A	; 10
    2376:	50 e0       	ldi	r21, 0x00	; 0
    2378:	60 e0       	ldi	r22, 0x00	; 0
    237a:	70 e0       	ldi	r23, 0x00	; 0
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZN5Print5printEli>

void Print::println(void)
{
  print('\r');
  print('\n');  
}
    2384:	df 91       	pop	r29
    2386:	cf 91       	pop	r28
    2388:	08 95       	ret

0000238a <_ZN5Print7printlnEmi>:
  print(n, base);
  println();
}

void Print::println(unsigned long n, int base)
{
    238a:	cf 93       	push	r28
    238c:	df 93       	push	r29
    238e:	ec 01       	movw	r28, r24
  print(n, base);
    2390:	0e 94 2f 11 	call	0x225e	; 0x225e <_ZN5Print5printEmi>
  println();
    2394:	ce 01       	movw	r24, r28
    2396:	0e 94 ae 11 	call	0x235c	; 0x235c <_ZN5Print7printlnEv>
}
    239a:	df 91       	pop	r29
    239c:	cf 91       	pop	r28
    239e:	08 95       	ret

000023a0 <_ZN5Print7printlnEji>:
  print(n, base);
  println();
}

void Print::println(unsigned int n, int base)
{
    23a0:	cf 93       	push	r28
    23a2:	df 93       	push	r29
    23a4:	ec 01       	movw	r28, r24
    23a6:	9a 01       	movw	r18, r20
  print((long) n, base);
}

void Print::print(unsigned int n, int base)
{
  print((unsigned long) n, base);
    23a8:	ab 01       	movw	r20, r22
    23aa:	60 e0       	ldi	r22, 0x00	; 0
    23ac:	70 e0       	ldi	r23, 0x00	; 0
    23ae:	0e 94 2f 11 	call	0x225e	; 0x225e <_ZN5Print5printEmi>
}

void Print::println(unsigned int n, int base)
{
  print(n, base);
  println();
    23b2:	ce 01       	movw	r24, r28
    23b4:	0e 94 ae 11 	call	0x235c	; 0x235c <_ZN5Print7printlnEv>
}
    23b8:	df 91       	pop	r29
    23ba:	cf 91       	pop	r28
    23bc:	08 95       	ret

000023be <_ZN5Print7printlnEhi>:
  print(c, base);
  println();
}

void Print::println(unsigned char b, int base)
{
    23be:	cf 93       	push	r28
    23c0:	df 93       	push	r29
    23c2:	ec 01       	movw	r28, r24
    23c4:	9a 01       	movw	r18, r20
  print((long) c, base);
}

void Print::print(unsigned char b, int base)
{
  print((unsigned long) b, base);
    23c6:	46 2f       	mov	r20, r22
    23c8:	50 e0       	ldi	r21, 0x00	; 0
    23ca:	60 e0       	ldi	r22, 0x00	; 0
    23cc:	70 e0       	ldi	r23, 0x00	; 0
    23ce:	0e 94 2f 11 	call	0x225e	; 0x225e <_ZN5Print5printEmi>
}

void Print::println(unsigned char b, int base)
{
  print(b, base);
  println();
    23d2:	ce 01       	movw	r24, r28
    23d4:	0e 94 ae 11 	call	0x235c	; 0x235c <_ZN5Print7printlnEv>
}
    23d8:	df 91       	pop	r29
    23da:	cf 91       	pop	r28
    23dc:	08 95       	ret

000023de <_ZN5Print7printlnEPKc>:
  print(s);
  println();
}

void Print::println(const char c[])
{
    23de:	cf 93       	push	r28
    23e0:	df 93       	push	r29
    23e2:	ec 01       	movw	r28, r24
  print(c);
    23e4:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <_ZN5Print5printEPKc>
  println();
    23e8:	ce 01       	movw	r24, r28
    23ea:	0e 94 ae 11 	call	0x235c	; 0x235c <_ZN5Print7printlnEv>
}
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	08 95       	ret

000023f4 <_ZN5Print7printlnERK6String>:
  print('\r');
  print('\n');  
}

void Print::println(const String &s)
{
    23f4:	cf 93       	push	r28
    23f6:	df 93       	push	r29
    23f8:	ec 01       	movw	r28, r24
  print(s);
    23fa:	0e 94 63 10 	call	0x20c6	; 0x20c6 <_ZN5Print5printERK6String>
  println();
    23fe:	ce 01       	movw	r24, r28
    2400:	0e 94 ae 11 	call	0x235c	; 0x235c <_ZN5Print7printlnEv>
}
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
    2408:	08 95       	ret

0000240a <_ZN5Print7printlnEli>:
  print(n, base);
  println();
}

void Print::println(long n, int base)
{
    240a:	cf 93       	push	r28
    240c:	df 93       	push	r29
    240e:	ec 01       	movw	r28, r24
  print(n, base);
    2410:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZN5Print5printEli>
  println();
    2414:	ce 01       	movw	r24, r28
    2416:	0e 94 ae 11 	call	0x235c	; 0x235c <_ZN5Print7printlnEv>
}
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	08 95       	ret

00002420 <_ZN5Print7printlnEii>:
  print(b, base);
  println();
}

void Print::println(int n, int base)
{
    2420:	cf 93       	push	r28
    2422:	df 93       	push	r29
    2424:	ec 01       	movw	r28, r24
    2426:	cb 01       	movw	r24, r22
    2428:	9a 01       	movw	r18, r20
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
{
  print((long) n, base);
    242a:	ac 01       	movw	r20, r24
    242c:	66 27       	eor	r22, r22
    242e:	57 fd       	sbrc	r21, 7
    2430:	60 95       	com	r22
    2432:	76 2f       	mov	r23, r22
    2434:	ce 01       	movw	r24, r28
    2436:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZN5Print5printEli>
}

void Print::println(int n, int base)
{
  print(n, base);
  println();
    243a:	ce 01       	movw	r24, r28
    243c:	0e 94 ae 11 	call	0x235c	; 0x235c <_ZN5Print7printlnEv>
}
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	08 95       	ret

00002446 <_ZN5Print7printlnEci>:
  print(c);
  println();
}

void Print::println(char c, int base)
{
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	ec 01       	movw	r28, r24
    244c:	9a 01       	movw	r18, r20
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    244e:	46 2f       	mov	r20, r22
    2450:	50 e0       	ldi	r21, 0x00	; 0
    2452:	60 e0       	ldi	r22, 0x00	; 0
    2454:	70 e0       	ldi	r23, 0x00	; 0
    2456:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZN5Print5printEli>
}

void Print::println(char c, int base)
{
  print(c, base);
  println();
    245a:	ce 01       	movw	r24, r28
    245c:	0e 94 ae 11 	call	0x235c	; 0x235c <_ZN5Print7printlnEv>
}
    2460:	df 91       	pop	r29
    2462:	cf 91       	pop	r28
    2464:	08 95       	ret

00002466 <_ZN5Print10printFloatEdh>:
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}

void Print::printFloat(double number, uint8_t digits) 
{ 
    2466:	9f 92       	push	r9
    2468:	af 92       	push	r10
    246a:	bf 92       	push	r11
    246c:	cf 92       	push	r12
    246e:	df 92       	push	r13
    2470:	ef 92       	push	r14
    2472:	ff 92       	push	r15
    2474:	0f 93       	push	r16
    2476:	1f 93       	push	r17
    2478:	cf 93       	push	r28
    247a:	df 93       	push	r29
    247c:	ec 01       	movw	r28, r24
    247e:	6a 01       	movw	r12, r20
    2480:	7b 01       	movw	r14, r22
    2482:	12 2f       	mov	r17, r18
  // Handle negative numbers
  if (number < 0.0)
    2484:	cb 01       	movw	r24, r22
    2486:	ba 01       	movw	r22, r20
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	a9 01       	movw	r20, r18
    248e:	0e 94 79 25 	call	0x4af2	; 0x4af2 <__ltsf2>
    2492:	88 23       	and	r24, r24
    2494:	0c f4       	brge	.+2      	; 0x2498 <_ZN5Print10printFloatEdh+0x32>
    2496:	83 c0       	rjmp	.+262    	; 0x259e <_ZN5Print10printFloatEdh+0x138>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2498:	11 23       	and	r17, r17
    249a:	09 f4       	brne	.+2      	; 0x249e <_ZN5Print10printFloatEdh+0x38>
    249c:	8e c0       	rjmp	.+284    	; 0x25ba <_ZN5Print10printFloatEdh+0x154>
    249e:	00 e0       	ldi	r16, 0x00	; 0
    24a0:	50 e0       	ldi	r21, 0x00	; 0
    24a2:	40 e0       	ldi	r20, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	2f e3       	ldi	r18, 0x3F	; 63
    rounding /= 10.0;
    24a8:	da 01       	movw	r26, r20
    24aa:	f9 01       	movw	r30, r18
    24ac:	6b 2f       	mov	r22, r27
    24ae:	74 2f       	mov	r23, r20
    24b0:	8f 2f       	mov	r24, r31
    24b2:	92 2f       	mov	r25, r18
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e2       	ldi	r20, 0x20	; 32
    24ba:	51 e4       	ldi	r21, 0x41	; 65
    24bc:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <__divsf3>
    24c0:	56 2f       	mov	r21, r22
    24c2:	47 2f       	mov	r20, r23
    24c4:	38 2f       	mov	r19, r24
    24c6:	29 2f       	mov	r18, r25
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    24c8:	0f 5f       	subi	r16, 0xFF	; 255
    24ca:	01 17       	cp	r16, r17
    24cc:	68 f3       	brcs	.-38     	; 0x24a8 <_ZN5Print10printFloatEdh+0x42>
    rounding /= 10.0;
  
  number += rounding;
    24ce:	c7 01       	movw	r24, r14
    24d0:	b6 01       	movw	r22, r12
    24d2:	da 01       	movw	r26, r20
    24d4:	f9 01       	movw	r30, r18
    24d6:	2b 2f       	mov	r18, r27
    24d8:	3a 2f       	mov	r19, r26
    24da:	4f 2f       	mov	r20, r31
    24dc:	5e 2f       	mov	r21, r30
    24de:	0e 94 46 23 	call	0x468c	; 0x468c <__addsf3>
    24e2:	5b 01       	movw	r10, r22
    24e4:	c8 2e       	mov	r12, r24
    24e6:	09 2f       	mov	r16, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    24e8:	7b 2d       	mov	r23, r11
    24ea:	0e 94 99 21 	call	0x4332	; 0x4332 <__fixunssfsi>
    24ee:	96 2e       	mov	r9, r22
    24f0:	f7 2e       	mov	r15, r23
    24f2:	e8 2e       	mov	r14, r24
    24f4:	d9 2e       	mov	r13, r25
  double remainder = number - (double)int_part;
    24f6:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__floatunsisf>
    24fa:	9b 01       	movw	r18, r22
    24fc:	ac 01       	movw	r20, r24
    24fe:	6a 2d       	mov	r22, r10
    2500:	7b 2d       	mov	r23, r11
    2502:	8c 2d       	mov	r24, r12
    2504:	90 2f       	mov	r25, r16
    2506:	0e 94 15 23 	call	0x462a	; 0x462a <__subsf3>
    250a:	5b 01       	movw	r10, r22
    250c:	c8 2e       	mov	r12, r24
    250e:	09 2f       	mov	r16, r25
  print(int_part);
    2510:	ce 01       	movw	r24, r28
    2512:	49 2d       	mov	r20, r9
    2514:	5f 2d       	mov	r21, r15
    2516:	6e 2d       	mov	r22, r14
    2518:	7d 2d       	mov	r23, r13
    251a:	2a e0       	ldi	r18, 0x0A	; 10
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	0e 94 2f 11 	call	0x225e	; 0x225e <_ZN5Print5printEmi>

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    print("."); 
    2522:	ce 01       	movw	r24, r28
    2524:	68 e8       	ldi	r22, 0x88	; 136
    2526:	71 e0       	ldi	r23, 0x01	; 1
    2528:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <_ZN5Print5printEPKc>

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    252c:	6a 2d       	mov	r22, r10
    252e:	7b 2d       	mov	r23, r11
    2530:	8c 2d       	mov	r24, r12
    2532:	90 2f       	mov	r25, r16
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	40 e2       	ldi	r20, 0x20	; 32
    253a:	51 e4       	ldi	r21, 0x41	; 65
    253c:	0e 94 73 23 	call	0x46e6	; 0x46e6 <__mulsf3>
    2540:	06 2f       	mov	r16, r22
    2542:	b7 2e       	mov	r11, r23
    2544:	a8 2e       	mov	r10, r24
    2546:	99 2e       	mov	r9, r25
    int toPrint = int(remainder);
    2548:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <__fixsfsi>
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
{
  print((long) n, base);
    254c:	6b 01       	movw	r12, r22
    254e:	ee 24       	eor	r14, r14
    2550:	d7 fc       	sbrc	r13, 7
    2552:	e0 94       	com	r14
    2554:	fe 2c       	mov	r15, r14
    2556:	ce 01       	movw	r24, r28
    2558:	b7 01       	movw	r22, r14
    255a:	a6 01       	movw	r20, r12
    255c:	2a e0       	ldi	r18, 0x0A	; 10
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZN5Print5printEli>
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
    2564:	c7 01       	movw	r24, r14
    2566:	b6 01       	movw	r22, r12
    2568:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <__floatsisf>
    256c:	9b 01       	movw	r18, r22
    256e:	ac 01       	movw	r20, r24
    2570:	60 2f       	mov	r22, r16
    2572:	7b 2d       	mov	r23, r11
    2574:	8a 2d       	mov	r24, r10
    2576:	99 2d       	mov	r25, r9
    2578:	0e 94 15 23 	call	0x462a	; 0x462a <__subsf3>
    257c:	5b 01       	movw	r10, r22
    257e:	c8 2e       	mov	r12, r24
    2580:	09 2f       	mov	r16, r25
    2582:	11 50       	subi	r17, 0x01	; 1
  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    print("."); 

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2584:	99 f6       	brne	.-90     	; 0x252c <_ZN5Print10printFloatEdh+0xc6>
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
  } 
}
    2586:	df 91       	pop	r29
    2588:	cf 91       	pop	r28
    258a:	1f 91       	pop	r17
    258c:	0f 91       	pop	r16
    258e:	ff 90       	pop	r15
    2590:	ef 90       	pop	r14
    2592:	df 90       	pop	r13
    2594:	cf 90       	pop	r12
    2596:	bf 90       	pop	r11
    2598:	af 90       	pop	r10
    259a:	9f 90       	pop	r9
    259c:	08 95       	ret
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    259e:	ce 01       	movw	r24, r28
    25a0:	4d e2       	ldi	r20, 0x2D	; 45
    25a2:	50 e0       	ldi	r21, 0x00	; 0
    25a4:	60 e0       	ldi	r22, 0x00	; 0
    25a6:	70 e0       	ldi	r23, 0x00	; 0
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZN5Print5printEli>
{ 
  // Handle negative numbers
  if (number < 0.0)
  {
     print('-');
     number = -number;
    25b0:	f7 fa       	bst	r15, 7
    25b2:	f0 94       	com	r15
    25b4:	f7 f8       	bld	r15, 7
    25b6:	f0 94       	com	r15
    25b8:	6f cf       	rjmp	.-290    	; 0x2498 <_ZN5Print10printFloatEdh+0x32>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  print(int_part);
    25ba:	c7 01       	movw	r24, r14
    25bc:	b6 01       	movw	r22, r12
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e0       	ldi	r20, 0x00	; 0
    25c4:	5f e3       	ldi	r21, 0x3F	; 63
    25c6:	0e 94 46 23 	call	0x468c	; 0x468c <__addsf3>
    25ca:	0e 94 99 21 	call	0x4332	; 0x4332 <__fixunssfsi>
    25ce:	ab 01       	movw	r20, r22
    25d0:	bc 01       	movw	r22, r24
    25d2:	ce 01       	movw	r24, r28
    25d4:	2a e0       	ldi	r18, 0x0A	; 10
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	0e 94 2f 11 	call	0x225e	; 0x225e <_ZN5Print5printEmi>
    25dc:	d4 cf       	rjmp	.-88     	; 0x2586 <_ZN5Print10printFloatEdh+0x120>

000025de <_ZN5Print5printEdi>:
  else printNumber(n, base);
}

void Print::print(double n, int digits)
{
  printFloat(n, digits);
    25de:	0e 94 33 12 	call	0x2466	; 0x2466 <_ZN5Print10printFloatEdh>
}
    25e2:	08 95       	ret

000025e4 <_ZN5Print7printlnEdi>:
  print(n, base);
  println();
}

void Print::println(double n, int digits)
{
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
    25e8:	ec 01       	movw	r28, r24
  else printNumber(n, base);
}

void Print::print(double n, int digits)
{
  printFloat(n, digits);
    25ea:	0e 94 33 12 	call	0x2466	; 0x2466 <_ZN5Print10printFloatEdh>
}

void Print::println(double n, int digits)
{
  print(n, digits);
  println();
    25ee:	ce 01       	movw	r24, r28
    25f0:	0e 94 ae 11 	call	0x235c	; 0x235c <_ZN5Print7printlnEv>
}
    25f4:	df 91       	pop	r29
    25f6:	cf 91       	pop	r28
    25f8:	08 95       	ret

000025fa <_ZN7TwoWireC2Ev>:

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
{
}
    25fa:	08 95       	ret

000025fc <_ZN7TwoWireC1Ev>:
    25fc:	08 95       	ret

000025fe <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	80 93 d1 06 	sts	0x06D1, r24
  // set address of targeted slave
  txAddress = address;
    2604:	60 93 ae 06 	sts	0x06AE, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2608:	10 92 cf 06 	sts	0x06CF, r1
  txBufferLength = 0;
    260c:	10 92 d0 06 	sts	0x06D0, r1
}
    2610:	08 95       	ret

00002612 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	80 93 d1 06 	sts	0x06D1, r24
  // set address of targeted slave
  txAddress = address;
    2618:	60 93 ae 06 	sts	0x06AE, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    261c:	10 92 cf 06 	sts	0x06CF, r1
  txBufferLength = 0;
    2620:	10 92 d0 06 	sts	0x06D0, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    2624:	08 95       	ret

00002626 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
uint8_t TwoWire::available(void)
{
    2626:	80 91 ad 06 	lds	r24, 0x06AD
    262a:	90 91 ac 06 	lds	r25, 0x06AC
  return rxBufferLength - rxBufferIndex;
}
    262e:	89 1b       	sub	r24, r25
    2630:	08 95       	ret

00002632 <_ZN7TwoWire7receiveEv>:
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2632:	90 91 ac 06 	lds	r25, 0x06AC
    2636:	80 91 ad 06 	lds	r24, 0x06AD
    263a:	98 17       	cp	r25, r24
    263c:	48 f4       	brcc	.+18     	; 0x2650 <_ZN7TwoWire7receiveEv+0x1e>
    value = rxBuffer[rxBufferIndex];
    263e:	e9 2f       	mov	r30, r25
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	e4 57       	subi	r30, 0x74	; 116
    2644:	f9 4f       	sbci	r31, 0xF9	; 249
    2646:	80 81       	ld	r24, Z
    ++rxBufferIndex;
    2648:	9f 5f       	subi	r25, 0xFF	; 255
    264a:	90 93 ac 06 	sts	0x06AC, r25
  }

  return value;
}
    264e:	08 95       	ret
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	08 95       	ret

00002654 <_ZN7TwoWire16onReceiveServiceEPhi>:
  return value;
}

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
    2654:	cf 93       	push	r28
    2656:	df 93       	push	r29
    2658:	9c 01       	movw	r18, r24
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    265a:	e0 91 d4 06 	lds	r30, 0x06D4
    265e:	f0 91 d5 06 	lds	r31, 0x06D5
    2662:	30 97       	sbiw	r30, 0x00	; 0
    2664:	11 f1       	breq	.+68     	; 0x26aa <_ZN7TwoWire16onReceiveServiceEPhi+0x56>
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    2666:	90 91 ac 06 	lds	r25, 0x06AC
    266a:	80 91 ad 06 	lds	r24, 0x06AD
    266e:	98 17       	cp	r25, r24
    2670:	e0 f0       	brcs	.+56     	; 0x26aa <_ZN7TwoWire16onReceiveServiceEPhi+0x56>
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2672:	16 16       	cp	r1, r22
    2674:	17 06       	cpc	r1, r23
    2676:	9c f4       	brge	.+38     	; 0x269e <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
    2678:	a0 e0       	ldi	r26, 0x00	; 0
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	40 e0       	ldi	r20, 0x00	; 0
    2680:	50 e0       	ldi	r21, 0x00	; 0
    rxBuffer[i] = inBytes[i];    
    2682:	a4 57       	subi	r26, 0x74	; 116
    2684:	b9 4f       	sbci	r27, 0xF9	; 249
    2686:	42 0f       	add	r20, r18
    2688:	53 1f       	adc	r21, r19
    268a:	ea 01       	movw	r28, r20
    268c:	48 81       	ld	r20, Y
    268e:	4c 93       	st	X, r20
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2690:	9f 5f       	subi	r25, 0xFF	; 255
    2692:	49 2f       	mov	r20, r25
    2694:	50 e0       	ldi	r21, 0x00	; 0
    2696:	da 01       	movw	r26, r20
    2698:	46 17       	cp	r20, r22
    269a:	57 07       	cpc	r21, r23
    269c:	94 f3       	brlt	.-28     	; 0x2682 <_ZN7TwoWire16onReceiveServiceEPhi+0x2e>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
    269e:	10 92 ac 06 	sts	0x06AC, r1
  rxBufferLength = numBytes;
    26a2:	60 93 ad 06 	sts	0x06AD, r22
  // alert user program
  user_onReceive(numBytes);
    26a6:	cb 01       	movw	r24, r22
    26a8:	09 95       	icall
}
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	08 95       	ret

000026b0 <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    26b0:	e0 91 d2 06 	lds	r30, 0x06D2
    26b4:	f0 91 d3 06 	lds	r31, 0x06D3
    26b8:	30 97       	sbiw	r30, 0x00	; 0
    26ba:	29 f0       	breq	.+10     	; 0x26c6 <_ZN7TwoWire16onRequestServiceEv+0x16>
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
    26bc:	10 92 cf 06 	sts	0x06CF, r1
  txBufferLength = 0;
    26c0:	10 92 d0 06 	sts	0x06D0, r1
  // alert user program
  user_onRequest();
    26c4:	09 95       	icall
    26c6:	08 95       	ret

000026c8 <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  user_onReceive = function;
    26c8:	70 93 d5 06 	sts	0x06D5, r23
    26cc:	60 93 d4 06 	sts	0x06D4, r22
}
    26d0:	08 95       	ret

000026d2 <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    26d2:	70 93 d3 06 	sts	0x06D3, r23
    26d6:	60 93 d2 06 	sts	0x06D2, r22
}
    26da:	08 95       	ret

000026dc <_ZN7TwoWire4sendEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(uint8_t data)
{
    26dc:	df 93       	push	r29
    26de:	cf 93       	push	r28
    26e0:	0f 92       	push	r0
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
    26e6:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    26e8:	80 91 d1 06 	lds	r24, 0x06D1
    26ec:	88 23       	and	r24, r24
    26ee:	c1 f0       	breq	.+48     	; 0x2720 <_ZN7TwoWire4sendEh+0x44>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    26f0:	80 91 d0 06 	lds	r24, 0x06D0
    26f4:	80 32       	cpi	r24, 0x20	; 32
    26f6:	20 f0       	brcs	.+8      	; 0x2700 <_ZN7TwoWire4sendEh+0x24>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
}
    26f8:	0f 90       	pop	r0
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	08 95       	ret
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
      return;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    2700:	80 91 cf 06 	lds	r24, 0x06CF
    2704:	e8 2f       	mov	r30, r24
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	e1 55       	subi	r30, 0x51	; 81
    270a:	f9 4f       	sbci	r31, 0xF9	; 249
    270c:	60 83       	st	Z, r22
    ++txBufferIndex;
    270e:	8f 5f       	subi	r24, 0xFF	; 255
    2710:	80 93 cf 06 	sts	0x06CF, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    2714:	80 93 d0 06 	sts	0x06D0, r24
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
}
    2718:	0f 90       	pop	r0
    271a:	cf 91       	pop	r28
    271c:	df 91       	pop	r29
    271e:	08 95       	ret
    // update amount in buffer   
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    2720:	ce 01       	movw	r24, r28
    2722:	01 96       	adiw	r24, 0x01	; 1
    2724:	61 e0       	ldi	r22, 0x01	; 1
    2726:	0e 94 2e 20 	call	0x405c	; 0x405c <twi_transmit>
  }
}
    272a:	0f 90       	pop	r0
    272c:	cf 91       	pop	r28
    272e:	df 91       	pop	r29
    2730:	08 95       	ret

00002732 <_ZN7TwoWire4sendEi>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(int data)
{
  send((uint8_t)data);
    2732:	0e 94 6e 13 	call	0x26dc	; 0x26dc <_ZN7TwoWire4sendEh>
}
    2736:	08 95       	ret

00002738 <_ZN7TwoWire4sendEPhh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(uint8_t* data, uint8_t quantity)
{
    2738:	ef 92       	push	r14
    273a:	ff 92       	push	r15
    273c:	0f 93       	push	r16
    273e:	1f 93       	push	r17
    2740:	cf 93       	push	r28
    2742:	df 93       	push	r29
    2744:	ec 01       	movw	r28, r24
    2746:	16 2f       	mov	r17, r22
    2748:	04 2f       	mov	r16, r20
  if(transmitting){
    274a:	80 91 d1 06 	lds	r24, 0x06D1
    274e:	88 23       	and	r24, r24
    2750:	a9 f0       	breq	.+42     	; 0x277c <_ZN7TwoWire4sendEPhh+0x44>
  // in master transmitter mode
    for(uint8_t i = 0; i < quantity; ++i){
    2752:	44 23       	and	r20, r20
    2754:	61 f0       	breq	.+24     	; 0x276e <_ZN7TwoWire4sendEPhh+0x36>
    2756:	e6 2e       	mov	r14, r22
    2758:	f7 2e       	mov	r15, r23
      send(data[i]);
    275a:	ce 01       	movw	r24, r28
    275c:	f7 01       	movw	r30, r14
    275e:	61 91       	ld	r22, Z+
    2760:	7f 01       	movw	r14, r30
    2762:	0e 94 6e 13 	call	0x26dc	; 0x26dc <_ZN7TwoWire4sendEh>
// or after beginTransmission(address)
void TwoWire::send(uint8_t* data, uint8_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(uint8_t i = 0; i < quantity; ++i){
    2766:	8e 2d       	mov	r24, r14
    2768:	81 1b       	sub	r24, r17
    276a:	80 17       	cp	r24, r16
    276c:	b0 f3       	brcs	.-20     	; 0x275a <_ZN7TwoWire4sendEPhh+0x22>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
  }
}
    276e:	df 91       	pop	r29
    2770:	cf 91       	pop	r28
    2772:	1f 91       	pop	r17
    2774:	0f 91       	pop	r16
    2776:	ff 90       	pop	r15
    2778:	ef 90       	pop	r14
    277a:	08 95       	ret
      send(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    277c:	86 2f       	mov	r24, r22
    277e:	97 2f       	mov	r25, r23
    2780:	64 2f       	mov	r22, r20
    2782:	0e 94 2e 20 	call	0x405c	; 0x405c <twi_transmit>
  }
}
    2786:	df 91       	pop	r29
    2788:	cf 91       	pop	r28
    278a:	1f 91       	pop	r17
    278c:	0f 91       	pop	r16
    278e:	ff 90       	pop	r15
    2790:	ef 90       	pop	r14
    2792:	08 95       	ret

00002794 <_ZN7TwoWire4sendEPc>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(char* data)
{
  send((uint8_t*)data, strlen(data));
    2794:	db 01       	movw	r26, r22
    2796:	0d 90       	ld	r0, X+
    2798:	00 20       	and	r0, r0
    279a:	e9 f7       	brne	.-6      	; 0x2796 <_ZN7TwoWire4sendEPc+0x2>
    279c:	ad 01       	movw	r20, r26
    279e:	41 50       	subi	r20, 0x01	; 1
    27a0:	50 40       	sbci	r21, 0x00	; 0
    27a2:	46 1b       	sub	r20, r22
    27a4:	57 0b       	sbc	r21, r23
    27a6:	0e 94 9c 13 	call	0x2738	; 0x2738 <_ZN7TwoWire4sendEPhh>
}
    27aa:	08 95       	ret

000027ac <_ZN7TwoWire15endTransmissionEv>:
}

uint8_t TwoWire::endTransmission(void)
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1);
    27ac:	80 91 ae 06 	lds	r24, 0x06AE
    27b0:	6f ea       	ldi	r22, 0xAF	; 175
    27b2:	76 e0       	ldi	r23, 0x06	; 6
    27b4:	40 91 d0 06 	lds	r20, 0x06D0
    27b8:	21 e0       	ldi	r18, 0x01	; 1
    27ba:	0e 94 de 1f 	call	0x3fbc	; 0x3fbc <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    27be:	10 92 cf 06 	sts	0x06CF, r1
  txBufferLength = 0;
    27c2:	10 92 d0 06 	sts	0x06D0, r1
  // indicate that we are done transmitting
  transmitting = 0;
    27c6:	10 92 d1 06 	sts	0x06D1, r1
  return ret;
}
    27ca:	08 95       	ret

000027cc <_ZN7TwoWire11requestFromEhh>:
{
  begin((uint8_t)address);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
    27cc:	86 2f       	mov	r24, r22
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity);
    27ce:	41 32       	cpi	r20, 0x21	; 33
    27d0:	08 f0       	brcs	.+2      	; 0x27d4 <_ZN7TwoWire11requestFromEhh+0x8>
    27d2:	40 e2       	ldi	r20, 0x20	; 32
    27d4:	6c e8       	ldi	r22, 0x8C	; 140
    27d6:	76 e0       	ldi	r23, 0x06	; 6
    27d8:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    27dc:	10 92 ac 06 	sts	0x06AC, r1
  rxBufferLength = read;
    27e0:	80 93 ad 06 	sts	0x06AD, r24

  return read;
}
    27e4:	08 95       	ret

000027e6 <_ZN7TwoWire11requestFromEii>:

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity);
    27e6:	0e 94 e6 13 	call	0x27cc	; 0x27cc <_ZN7TwoWire11requestFromEhh>
}
    27ea:	08 95       	ret

000027ec <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    27ec:	10 92 ac 06 	sts	0x06AC, r1
  rxBufferLength = 0;
    27f0:	10 92 ad 06 	sts	0x06AD, r1

  txBufferIndex = 0;
    27f4:	10 92 cf 06 	sts	0x06CF, r1
  txBufferLength = 0;
    27f8:	10 92 d0 06 	sts	0x06D0, r1

  twi_init();
    27fc:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <twi_init>
}
    2800:	08 95       	ret

00002802 <_ZN7TwoWire5beginEh>:

void TwoWire::begin(uint8_t address)
{
    2802:	cf 93       	push	r28
    2804:	df 93       	push	r29
    2806:	ec 01       	movw	r28, r24
    2808:	86 2f       	mov	r24, r22
  twi_setAddress(address);
    280a:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <twi_setAddress>
  twi_attachSlaveTxEvent(onRequestService);
    280e:	88 e5       	ldi	r24, 0x58	; 88
    2810:	93 e1       	ldi	r25, 0x13	; 19
    2812:	0e 94 51 20 	call	0x40a2	; 0x40a2 <twi_attachSlaveTxEvent>
  twi_attachSlaveRxEvent(onReceiveService);
    2816:	8a e2       	ldi	r24, 0x2A	; 42
    2818:	93 e1       	ldi	r25, 0x13	; 19
    281a:	0e 94 4c 20 	call	0x4098	; 0x4098 <twi_attachSlaveRxEvent>
  begin();
    281e:	ce 01       	movw	r24, r28
    2820:	0e 94 f6 13 	call	0x27ec	; 0x27ec <_ZN7TwoWire5beginEv>
}
    2824:	df 91       	pop	r29
    2826:	cf 91       	pop	r28
    2828:	08 95       	ret

0000282a <_ZN7TwoWire5beginEi>:

void TwoWire::begin(int address)
{
  begin((uint8_t)address);
    282a:	0e 94 01 14 	call	0x2802	; 0x2802 <_ZN7TwoWire5beginEh>
}
    282e:	08 95       	ret

00002830 <__vector_16>:
volatile unsigned long timer0_overflow_count = 0;
volatile unsigned long timer0_millis = 0;
static unsigned char timer0_fract = 0;

SIGNAL(TIMER0_OVF_vect)
{
    2830:	1f 92       	push	r1
    2832:	0f 92       	push	r0
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	0f 92       	push	r0
    2838:	11 24       	eor	r1, r1
    283a:	2f 93       	push	r18
    283c:	3f 93       	push	r19
    283e:	8f 93       	push	r24
    2840:	9f 93       	push	r25
    2842:	af 93       	push	r26
    2844:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2846:	80 91 da 06 	lds	r24, 0x06DA
    284a:	90 91 db 06 	lds	r25, 0x06DB
    284e:	a0 91 dc 06 	lds	r26, 0x06DC
    2852:	b0 91 dd 06 	lds	r27, 0x06DD
	unsigned char f = timer0_fract;
    2856:	30 91 de 06 	lds	r19, 0x06DE

	m += MILLIS_INC;
    285a:	01 96       	adiw	r24, 0x01	; 1
    285c:	a1 1d       	adc	r26, r1
    285e:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    2860:	23 2f       	mov	r18, r19
    2862:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    2864:	2d 37       	cpi	r18, 0x7D	; 125
    2866:	20 f0       	brcs	.+8      	; 0x2870 <__vector_16+0x40>
		f -= FRACT_MAX;
    2868:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    286a:	01 96       	adiw	r24, 0x01	; 1
    286c:	a1 1d       	adc	r26, r1
    286e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2870:	20 93 de 06 	sts	0x06DE, r18
	timer0_millis = m;
    2874:	80 93 da 06 	sts	0x06DA, r24
    2878:	90 93 db 06 	sts	0x06DB, r25
    287c:	a0 93 dc 06 	sts	0x06DC, r26
    2880:	b0 93 dd 06 	sts	0x06DD, r27
	timer0_overflow_count++;
    2884:	80 91 d6 06 	lds	r24, 0x06D6
    2888:	90 91 d7 06 	lds	r25, 0x06D7
    288c:	a0 91 d8 06 	lds	r26, 0x06D8
    2890:	b0 91 d9 06 	lds	r27, 0x06D9
    2894:	01 96       	adiw	r24, 0x01	; 1
    2896:	a1 1d       	adc	r26, r1
    2898:	b1 1d       	adc	r27, r1
    289a:	80 93 d6 06 	sts	0x06D6, r24
    289e:	90 93 d7 06 	sts	0x06D7, r25
    28a2:	a0 93 d8 06 	sts	0x06D8, r26
    28a6:	b0 93 d9 06 	sts	0x06D9, r27
}
    28aa:	bf 91       	pop	r27
    28ac:	af 91       	pop	r26
    28ae:	9f 91       	pop	r25
    28b0:	8f 91       	pop	r24
    28b2:	3f 91       	pop	r19
    28b4:	2f 91       	pop	r18
    28b6:	0f 90       	pop	r0
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	0f 90       	pop	r0
    28bc:	1f 90       	pop	r1
    28be:	18 95       	reti

000028c0 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    28c0:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    28c2:	f8 94       	cli
	m = timer0_millis;
    28c4:	20 91 da 06 	lds	r18, 0x06DA
    28c8:	30 91 db 06 	lds	r19, 0x06DB
    28cc:	40 91 dc 06 	lds	r20, 0x06DC
    28d0:	50 91 dd 06 	lds	r21, 0x06DD
	SREG = oldSREG;
    28d4:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    28d6:	b9 01       	movw	r22, r18
    28d8:	ca 01       	movw	r24, r20
    28da:	08 95       	ret

000028dc <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    28dc:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    28de:	f8 94       	cli
	m = timer0_overflow_count;
    28e0:	20 91 d6 06 	lds	r18, 0x06D6
    28e4:	30 91 d7 06 	lds	r19, 0x06D7
    28e8:	40 91 d8 06 	lds	r20, 0x06D8
    28ec:	50 91 d9 06 	lds	r21, 0x06D9
#if defined(TCNT0)
	t = TCNT0;
    28f0:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    28f2:	a8 9b       	sbis	0x15, 0	; 21
    28f4:	06 c0       	rjmp	.+12     	; 0x2902 <micros+0x26>
    28f6:	8f 3f       	cpi	r24, 0xFF	; 255
    28f8:	21 f0       	breq	.+8      	; 0x2902 <micros+0x26>
		m++;
    28fa:	2f 5f       	subi	r18, 0xFF	; 255
    28fc:	3f 4f       	sbci	r19, 0xFF	; 255
    28fe:	4f 4f       	sbci	r20, 0xFF	; 255
    2900:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2902:	9f bf       	out	0x3f, r25	; 63
    2904:	54 2f       	mov	r21, r20
    2906:	43 2f       	mov	r20, r19
    2908:	32 2f       	mov	r19, r18
    290a:	22 27       	eor	r18, r18
    290c:	28 0f       	add	r18, r24
    290e:	31 1d       	adc	r19, r1
    2910:	41 1d       	adc	r20, r1
    2912:	51 1d       	adc	r21, r1
    2914:	22 0f       	add	r18, r18
    2916:	33 1f       	adc	r19, r19
    2918:	44 1f       	adc	r20, r20
    291a:	55 1f       	adc	r21, r21
    291c:	22 0f       	add	r18, r18
    291e:	33 1f       	adc	r19, r19
    2920:	44 1f       	adc	r20, r20
    2922:	55 1f       	adc	r21, r21
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
    2924:	b9 01       	movw	r22, r18
    2926:	ca 01       	movw	r24, r20
    2928:	08 95       	ret

0000292a <delay>:

void delay(unsigned long ms)
{
    292a:	ef 92       	push	r14
    292c:	ff 92       	push	r15
    292e:	0f 93       	push	r16
    2930:	1f 93       	push	r17
    2932:	cf 93       	push	r28
    2934:	df 93       	push	r29
    2936:	7b 01       	movw	r14, r22
    2938:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
    293a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <micros>
    293e:	eb 01       	movw	r28, r22

	while (ms > 0) {
    2940:	e1 14       	cp	r14, r1
    2942:	f1 04       	cpc	r15, r1
    2944:	01 05       	cpc	r16, r1
    2946:	11 05       	cpc	r17, r1
    2948:	a1 f0       	breq	.+40     	; 0x2972 <delay+0x48>
		if (((uint16_t)micros() - start) >= 1000) {
    294a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <micros>
    294e:	6c 1b       	sub	r22, r28
    2950:	7d 0b       	sbc	r23, r29
    2952:	83 e0       	ldi	r24, 0x03	; 3
    2954:	68 3e       	cpi	r22, 0xE8	; 232
    2956:	78 07       	cpc	r23, r24
    2958:	c0 f3       	brcs	.-16     	; 0x294a <delay+0x20>
			ms--;
    295a:	08 94       	sec
    295c:	e1 08       	sbc	r14, r1
    295e:	f1 08       	sbc	r15, r1
    2960:	01 09       	sbc	r16, r1
    2962:	11 09       	sbc	r17, r1
			start += 1000;
    2964:	c8 51       	subi	r28, 0x18	; 24
    2966:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    2968:	e1 14       	cp	r14, r1
    296a:	f1 04       	cpc	r15, r1
    296c:	01 05       	cpc	r16, r1
    296e:	11 05       	cpc	r17, r1
    2970:	61 f7       	brne	.-40     	; 0x294a <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2972:	df 91       	pop	r29
    2974:	cf 91       	pop	r28
    2976:	1f 91       	pop	r17
    2978:	0f 91       	pop	r16
    297a:	ff 90       	pop	r15
    297c:	ef 90       	pop	r14
    297e:	08 95       	ret

00002980 <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	39 f0       	breq	.+14     	; 0x2992 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    2984:	88 0f       	add	r24, r24
    2986:	99 1f       	adc	r25, r25
    2988:	88 0f       	add	r24, r24
    298a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    298c:	02 97       	sbiw	r24, 0x02	; 2

	// busy wait
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	f1 f7       	brne	.-4      	; 0x298e <delayMicroseconds+0xe>
    2992:	08 95       	ret

00002994 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2994:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2996:	84 b5       	in	r24, 0x24	; 36
    2998:	82 60       	ori	r24, 0x02	; 2
    299a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    299c:	84 b5       	in	r24, 0x24	; 36
    299e:	81 60       	ori	r24, 0x01	; 1
    29a0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    29a2:	85 b5       	in	r24, 0x25	; 37
    29a4:	82 60       	ori	r24, 0x02	; 2
    29a6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    29a8:	85 b5       	in	r24, 0x25	; 37
    29aa:	81 60       	ori	r24, 0x01	; 1
    29ac:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    29ae:	ee e6       	ldi	r30, 0x6E	; 110
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	81 60       	ori	r24, 0x01	; 1
    29b6:	80 83       	st	Z, r24
	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

	TCCR1B = 0;
    29b8:	e1 e8       	ldi	r30, 0x81	; 129
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	sbi(TCCR1B, CS11);
    29be:	80 81       	ld	r24, Z
    29c0:	82 60       	ori	r24, 0x02	; 2
    29c2:	80 83       	st	Z, r24
	sbi(TCCR1B, CS10);
    29c4:	80 81       	ld	r24, Z
    29c6:	81 60       	ori	r24, 0x01	; 1
    29c8:	80 83       	st	Z, r24
	sbi(TCCR1, CS11);
	sbi(TCCR1, CS10);
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    29ca:	e0 e8       	ldi	r30, 0x80	; 128
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	80 81       	ld	r24, Z
    29d0:	81 60       	ori	r24, 0x01	; 1
    29d2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    29d4:	e1 eb       	ldi	r30, 0xB1	; 177
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	84 60       	ori	r24, 0x04	; 4
    29dc:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    29de:	e0 eb       	ldi	r30, 0xB0	; 176
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	80 81       	ld	r24, Z
    29e4:	81 60       	ori	r24, 0x01	; 1
    29e6:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    29e8:	ea e7       	ldi	r30, 0x7A	; 122
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	84 60       	ori	r24, 0x04	; 4
    29f0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    29f2:	80 81       	ld	r24, Z
    29f4:	82 60       	ori	r24, 0x02	; 2
    29f6:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    29f8:	80 81       	ld	r24, Z
    29fa:	81 60       	ori	r24, 0x01	; 1
    29fc:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    29fe:	80 81       	ld	r24, Z
    2a00:	80 68       	ori	r24, 0x80	; 128
    2a02:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2a04:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    2a08:	08 95       	ret

00002a0a <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    2a0a:	80 93 94 01 	sts	0x0194, r24
}
    2a0e:	08 95       	ret

00002a10 <analogRead>:
	uint8_t low, high;

#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    2a10:	8e 30       	cpi	r24, 0x0E	; 14
    2a12:	08 f0       	brcs	.+2      	; 0x2a16 <analogRead+0x6>
    2a14:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2a16:	87 70       	andi	r24, 0x07	; 7
    2a18:	90 91 94 01 	lds	r25, 0x0194
    2a1c:	92 95       	swap	r25
    2a1e:	99 0f       	add	r25, r25
    2a20:	99 0f       	add	r25, r25
    2a22:	90 7c       	andi	r25, 0xC0	; 192
    2a24:	98 2b       	or	r25, r24
    2a26:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2a2a:	80 91 7a 00 	lds	r24, 0x007A
    2a2e:	80 64       	ori	r24, 0x40	; 64
    2a30:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2a34:	80 91 7a 00 	lds	r24, 0x007A
    2a38:	86 fd       	sbrc	r24, 6
    2a3a:	fc cf       	rjmp	.-8      	; 0x2a34 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2a3c:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    2a40:	30 91 79 00 	lds	r19, 0x0079
    2a44:	93 2f       	mov	r25, r19
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	28 2b       	or	r18, r24
    2a4c:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    2a4e:	c9 01       	movw	r24, r18
    2a50:	08 95       	ret

00002a52 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    2a52:	1f 93       	push	r17
    2a54:	cf 93       	push	r28
    2a56:	df 93       	push	r29
    2a58:	18 2f       	mov	r17, r24
    2a5a:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    2a5c:	61 e0       	ldi	r22, 0x01	; 1
    2a5e:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <pinMode>
	if (val == 0)
    2a62:	20 97       	sbiw	r28, 0x00	; 0
    2a64:	59 f1       	breq	.+86     	; 0x2abc <analogWrite+0x6a>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
    2a66:	cf 3f       	cpi	r28, 0xFF	; 255
    2a68:	d1 05       	cpc	r29, r1
    2a6a:	a1 f0       	breq	.+40     	; 0x2a94 <analogWrite+0x42>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2a6c:	e1 2f       	mov	r30, r17
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	e4 5e       	subi	r30, 0xE4	; 228
    2a72:	f8 4f       	sbci	r31, 0xF8	; 248
    2a74:	84 91       	lpm	r24, Z+
    2a76:	83 30       	cpi	r24, 0x03	; 3
    2a78:	e1 f1       	breq	.+120    	; 0x2af2 <analogWrite+0xa0>
    2a7a:	84 30       	cpi	r24, 0x04	; 4
    2a7c:	98 f0       	brcs	.+38     	; 0x2aa4 <analogWrite+0x52>
    2a7e:	86 30       	cpi	r24, 0x06	; 6
    2a80:	69 f1       	breq	.+90     	; 0x2adc <analogWrite+0x8a>
    2a82:	87 30       	cpi	r24, 0x07	; 7
    2a84:	09 f4       	brne	.+2      	; 0x2a88 <analogWrite+0x36>
    2a86:	4f c0       	rjmp	.+158    	; 0x2b26 <analogWrite+0xd4>
    2a88:	84 30       	cpi	r24, 0x04	; 4
    2a8a:	09 f4       	brne	.+2      	; 0x2a8e <analogWrite+0x3c>
    2a8c:	3f c0       	rjmp	.+126    	; 0x2b0c <analogWrite+0xba>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    2a8e:	c0 38       	cpi	r28, 0x80	; 128
    2a90:	d1 05       	cpc	r29, r1
    2a92:	a4 f0       	brlt	.+40     	; 0x2abc <analogWrite+0x6a>
					digitalWrite(pin, LOW);
				} else {
					digitalWrite(pin, HIGH);
    2a94:	81 2f       	mov	r24, r17
    2a96:	61 e0       	ldi	r22, 0x01	; 1
    2a98:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
				}
		}
	}
}
    2a9c:	df 91       	pop	r29
    2a9e:	cf 91       	pop	r28
    2aa0:	1f 91       	pop	r17
    2aa2:	08 95       	ret
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2aa4:	81 30       	cpi	r24, 0x01	; 1
    2aa6:	91 f0       	breq	.+36     	; 0x2acc <analogWrite+0x7a>
    2aa8:	82 30       	cpi	r24, 0x02	; 2
    2aaa:	89 f7       	brne	.-30     	; 0x2a8e <analogWrite+0x3c>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    2aac:	84 b5       	in	r24, 0x24	; 36
    2aae:	80 62       	ori	r24, 0x20	; 32
    2ab0:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    2ab2:	c8 bd       	out	0x28, r28	; 40
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2ab4:	df 91       	pop	r29
    2ab6:	cf 91       	pop	r28
    2ab8:	1f 91       	pop	r17
    2aba:	08 95       	ret
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
					digitalWrite(pin, LOW);
    2abc:	81 2f       	mov	r24, r17
    2abe:	60 e0       	ldi	r22, 0x00	; 0
    2ac0:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <digitalWrite>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2ac4:	df 91       	pop	r29
    2ac6:	cf 91       	pop	r28
    2ac8:	1f 91       	pop	r17
    2aca:	08 95       	ret
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    2acc:	84 b5       	in	r24, 0x24	; 36
    2ace:	80 68       	ori	r24, 0x80	; 128
    2ad0:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    2ad2:	c7 bd       	out	0x27, r28	; 39
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2ad4:	df 91       	pop	r29
    2ad6:	cf 91       	pop	r28
    2ad8:	1f 91       	pop	r17
    2ada:	08 95       	ret
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    2adc:	80 91 b0 00 	lds	r24, 0x00B0
    2ae0:	80 68       	ori	r24, 0x80	; 128
    2ae2:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    2ae6:	c0 93 b3 00 	sts	0x00B3, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2aea:	df 91       	pop	r29
    2aec:	cf 91       	pop	r28
    2aee:	1f 91       	pop	r17
    2af0:	08 95       	ret
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    2af2:	80 91 80 00 	lds	r24, 0x0080
    2af6:	80 68       	ori	r24, 0x80	; 128
    2af8:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    2afc:	d0 93 89 00 	sts	0x0089, r29
    2b00:	c0 93 88 00 	sts	0x0088, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2b04:	df 91       	pop	r29
    2b06:	cf 91       	pop	r28
    2b08:	1f 91       	pop	r17
    2b0a:	08 95       	ret
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    2b0c:	80 91 80 00 	lds	r24, 0x0080
    2b10:	80 62       	ori	r24, 0x20	; 32
    2b12:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    2b16:	d0 93 8b 00 	sts	0x008B, r29
    2b1a:	c0 93 8a 00 	sts	0x008A, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2b1e:	df 91       	pop	r29
    2b20:	cf 91       	pop	r28
    2b22:	1f 91       	pop	r17
    2b24:	08 95       	ret
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    2b26:	80 91 b0 00 	lds	r24, 0x00B0
    2b2a:	80 62       	ori	r24, 0x20	; 32
    2b2c:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    2b30:	c0 93 b4 00 	sts	0x00B4, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2b34:	df 91       	pop	r29
    2b36:	cf 91       	pop	r28
    2b38:	1f 91       	pop	r17
    2b3a:	08 95       	ret

00002b3c <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	fc 01       	movw	r30, r24
    2b40:	e8 5f       	subi	r30, 0xF8	; 248
    2b42:	f8 4f       	sbci	r31, 0xF8	; 248
    2b44:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    2b46:	fc 01       	movw	r30, r24
    2b48:	ec 50       	subi	r30, 0x0C	; 12
    2b4a:	f9 4f       	sbci	r31, 0xF9	; 249
    2b4c:	e4 91       	lpm	r30, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    2b4e:	ee 23       	and	r30, r30
    2b50:	79 f0       	breq	.+30     	; 0x2b70 <pinMode+0x34>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	ee 0f       	add	r30, r30
    2b56:	ff 1f       	adc	r31, r31
    2b58:	ea 52       	subi	r30, 0x2A	; 42
    2b5a:	f9 4f       	sbci	r31, 0xF9	; 249
    2b5c:	a5 91       	lpm	r26, Z+
    2b5e:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
    2b60:	66 23       	and	r22, r22
    2b62:	39 f0       	breq	.+14     	; 0x2b72 <pinMode+0x36>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    2b64:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2b66:	f8 94       	cli
		*reg |= bit;
    2b68:	8c 91       	ld	r24, X
    2b6a:	82 2b       	or	r24, r18
    2b6c:	8c 93       	st	X, r24
		SREG = oldSREG;
    2b6e:	9f bf       	out	0x3f, r25	; 63
    2b70:	08 95       	ret

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
    2b72:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2b74:	f8 94       	cli
		*reg &= ~bit;
    2b76:	8c 91       	ld	r24, X
    2b78:	20 95       	com	r18
    2b7a:	82 23       	and	r24, r18
    2b7c:	8c 93       	st	X, r24
		SREG = oldSREG;
    2b7e:	9f bf       	out	0x3f, r25	; 63
    2b80:	08 95       	ret

00002b82 <_ZL10turnOffPWMh>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2b82:	83 30       	cpi	r24, 0x03	; 3
    2b84:	39 f1       	breq	.+78     	; 0x2bd4 <_ZL10turnOffPWMh+0x52>
    2b86:	84 30       	cpi	r24, 0x04	; 4
    2b88:	60 f0       	brcs	.+24     	; 0x2ba2 <_ZL10turnOffPWMh+0x20>
    2b8a:	86 30       	cpi	r24, 0x06	; 6
    2b8c:	c9 f0       	breq	.+50     	; 0x2bc0 <_ZL10turnOffPWMh+0x3e>
    2b8e:	87 30       	cpi	r24, 0x07	; 7
    2b90:	69 f0       	breq	.+26     	; 0x2bac <_ZL10turnOffPWMh+0x2a>
    2b92:	84 30       	cpi	r24, 0x04	; 4
    2b94:	51 f4       	brne	.+20     	; 0x2baa <_ZL10turnOffPWMh+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2b96:	80 91 80 00 	lds	r24, 0x0080
    2b9a:	8f 7d       	andi	r24, 0xDF	; 223
    2b9c:	80 93 80 00 	sts	0x0080, r24
    2ba0:	08 95       	ret
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2ba2:	81 30       	cpi	r24, 0x01	; 1
    2ba4:	99 f0       	breq	.+38     	; 0x2bcc <_ZL10turnOffPWMh+0x4a>
    2ba6:	82 30       	cpi	r24, 0x02	; 2
    2ba8:	39 f0       	breq	.+14     	; 0x2bb8 <_ZL10turnOffPWMh+0x36>
    2baa:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2bac:	80 91 b0 00 	lds	r24, 0x00B0
    2bb0:	8f 7d       	andi	r24, 0xDF	; 223
    2bb2:	80 93 b0 00 	sts	0x00B0, r24
    2bb6:	08 95       	ret
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2bb8:	84 b5       	in	r24, 0x24	; 36
    2bba:	8f 7d       	andi	r24, 0xDF	; 223
    2bbc:	84 bd       	out	0x24, r24	; 36
    2bbe:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2bc0:	80 91 b0 00 	lds	r24, 0x00B0
    2bc4:	8f 77       	andi	r24, 0x7F	; 127
    2bc6:	80 93 b0 00 	sts	0x00B0, r24
    2bca:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2bcc:	84 b5       	in	r24, 0x24	; 36
    2bce:	8f 77       	andi	r24, 0x7F	; 127
    2bd0:	84 bd       	out	0x24, r24	; 36
    2bd2:	08 95       	ret
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2bd4:	80 91 80 00 	lds	r24, 0x0080
    2bd8:	8f 77       	andi	r24, 0x7F	; 127
    2bda:	80 93 80 00 	sts	0x0080, r24
    2bde:	08 95       	ret

00002be0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2be0:	0f 93       	push	r16
    2be2:	1f 93       	push	r17
    2be4:	df 93       	push	r29
    2be6:	cf 93       	push	r28
    2be8:	0f 92       	push	r0
    2bea:	cd b7       	in	r28, 0x3d	; 61
    2bec:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    2bee:	28 2f       	mov	r18, r24
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	f9 01       	movw	r30, r18
    2bf4:	e4 5e       	subi	r30, 0xE4	; 228
    2bf6:	f8 4f       	sbci	r31, 0xF8	; 248
    2bf8:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2bfa:	f9 01       	movw	r30, r18
    2bfc:	e8 5f       	subi	r30, 0xF8	; 248
    2bfe:	f8 4f       	sbci	r31, 0xF8	; 248
    2c00:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
    2c02:	2c 50       	subi	r18, 0x0C	; 12
    2c04:	39 4f       	sbci	r19, 0xF9	; 249
    2c06:	f9 01       	movw	r30, r18
    2c08:	14 91       	lpm	r17, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2c0a:	11 23       	and	r17, r17
    2c0c:	91 f0       	breq	.+36     	; 0x2c32 <digitalWrite+0x52>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2c0e:	88 23       	and	r24, r24
    2c10:	19 f5       	brne	.+70     	; 0x2c58 <digitalWrite+0x78>

	out = portOutputRegister(port);
    2c12:	e1 2f       	mov	r30, r17
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	ee 0f       	add	r30, r30
    2c18:	ff 1f       	adc	r31, r31
    2c1a:	e0 52       	subi	r30, 0x20	; 32
    2c1c:	f9 4f       	sbci	r31, 0xF9	; 249
    2c1e:	a5 91       	lpm	r26, Z+
    2c20:	b4 91       	lpm	r27, Z+

	if (val == LOW) {
    2c22:	66 23       	and	r22, r22
    2c24:	61 f0       	breq	.+24     	; 0x2c3e <digitalWrite+0x5e>
		uint8_t oldSREG = SREG;
                cli();
		*out &= ~bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    2c26:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2c28:	f8 94       	cli
		*out |= bit;
    2c2a:	8c 91       	ld	r24, X
    2c2c:	80 2b       	or	r24, r16
    2c2e:	8c 93       	st	X, r24
		SREG = oldSREG;
    2c30:	9f bf       	out	0x3f, r25	; 63
	}
}
    2c32:	0f 90       	pop	r0
    2c34:	cf 91       	pop	r28
    2c36:	df 91       	pop	r29
    2c38:	1f 91       	pop	r17
    2c3a:	0f 91       	pop	r16
    2c3c:	08 95       	ret
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);

	if (val == LOW) {
		uint8_t oldSREG = SREG;
    2c3e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2c40:	f8 94       	cli
		*out &= ~bit;
    2c42:	8c 91       	ld	r24, X
    2c44:	00 95       	com	r16
    2c46:	80 23       	and	r24, r16
    2c48:	8c 93       	st	X, r24
		SREG = oldSREG;
    2c4a:	9f bf       	out	0x3f, r25	; 63
		uint8_t oldSREG = SREG;
                cli();
		*out |= bit;
		SREG = oldSREG;
	}
}
    2c4c:	0f 90       	pop	r0
    2c4e:	cf 91       	pop	r28
    2c50:	df 91       	pop	r29
    2c52:	1f 91       	pop	r17
    2c54:	0f 91       	pop	r16
    2c56:	08 95       	ret

	if (port == NOT_A_PIN) return;

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2c58:	69 83       	std	Y+1, r22	; 0x01
    2c5a:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZL10turnOffPWMh>
    2c5e:	69 81       	ldd	r22, Y+1	; 0x01
    2c60:	d8 cf       	rjmp	.-80     	; 0x2c12 <digitalWrite+0x32>

00002c62 <digitalRead>:
		SREG = oldSREG;
	}
}

int digitalRead(uint8_t pin)
{
    2c62:	0f 93       	push	r16
    2c64:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
    2c66:	28 2f       	mov	r18, r24
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	f9 01       	movw	r30, r18
    2c6c:	e4 5e       	subi	r30, 0xE4	; 228
    2c6e:	f8 4f       	sbci	r31, 0xF8	; 248
    2c70:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2c72:	f9 01       	movw	r30, r18
    2c74:	e8 5f       	subi	r30, 0xF8	; 248
    2c76:	f8 4f       	sbci	r31, 0xF8	; 248
    2c78:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
    2c7a:	2c 50       	subi	r18, 0x0C	; 12
    2c7c:	39 4f       	sbci	r19, 0xF9	; 249
    2c7e:	f9 01       	movw	r30, r18
    2c80:	14 91       	lpm	r17, Z+

	if (port == NOT_A_PIN) return LOW;
    2c82:	11 23       	and	r17, r17
    2c84:	c9 f0       	breq	.+50     	; 0x2cb8 <digitalRead+0x56>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2c86:	88 23       	and	r24, r24
    2c88:	e9 f4       	brne	.+58     	; 0x2cc4 <digitalRead+0x62>

	if (*portInputRegister(port) & bit) return HIGH;
    2c8a:	e1 2f       	mov	r30, r17
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	ee 0f       	add	r30, r30
    2c90:	ff 1f       	adc	r31, r31
    2c92:	e6 51       	subi	r30, 0x16	; 22
    2c94:	f9 4f       	sbci	r31, 0xF9	; 249
    2c96:	a5 91       	lpm	r26, Z+
    2c98:	b4 91       	lpm	r27, Z+
    2c9a:	8c 91       	ld	r24, X
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	80 23       	and	r24, r16
    2ca2:	21 f4       	brne	.+8      	; 0x2cac <digitalRead+0x4a>
	return LOW;
}
    2ca4:	c9 01       	movw	r24, r18
    2ca6:	1f 91       	pop	r17
    2ca8:	0f 91       	pop	r16
    2caa:	08 95       	ret

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    2cac:	21 e0       	ldi	r18, 0x01	; 1
    2cae:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    2cb0:	c9 01       	movw	r24, r18
    2cb2:	1f 91       	pop	r17
    2cb4:	0f 91       	pop	r16
    2cb6:	08 95       	ret
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2cbc:	c9 01       	movw	r24, r18
    2cbe:	1f 91       	pop	r17
    2cc0:	0f 91       	pop	r16
    2cc2:	08 95       	ret

	if (port == NOT_A_PIN) return LOW;

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2cc4:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZL10turnOffPWMh>
    2cc8:	e0 cf       	rjmp	.-64     	; 0x2c8a <digitalRead+0x28>

00002cca <_ZNK6String6charAtEj>:
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

char String::charAt( unsigned int loc ) const
{
    2cca:	dc 01       	movw	r26, r24
    2ccc:	ed 91       	ld	r30, X+
    2cce:	fc 91       	ld	r31, X
    2cd0:	11 97       	sbiw	r26, 0x01	; 1
    2cd2:	e6 0f       	add	r30, r22
    2cd4:	f7 1f       	adc	r31, r23
  return operator[]( loc );
}
    2cd6:	80 81       	ld	r24, Z
    2cd8:	08 95       	ret

00002cda <_ZN6String9setCharAtEjc>:

void String::setCharAt( unsigned int loc, const char aChar ) 
{
    2cda:	fc 01       	movw	r30, r24
  if(_buffer == NULL) return;
    2cdc:	80 81       	ld	r24, Z
    2cde:	91 81       	ldd	r25, Z+1	; 0x01
    2ce0:	00 97       	sbiw	r24, 0x00	; 0
    2ce2:	49 f0       	breq	.+18     	; 0x2cf6 <_ZN6String9setCharAtEjc+0x1c>
  if(_length > loc) {
    2ce4:	24 81       	ldd	r18, Z+4	; 0x04
    2ce6:	35 81       	ldd	r19, Z+5	; 0x05
    2ce8:	62 17       	cp	r22, r18
    2cea:	73 07       	cpc	r23, r19
    2cec:	20 f4       	brcc	.+8      	; 0x2cf6 <_ZN6String9setCharAtEjc+0x1c>
    _buffer[loc] = aChar;
    2cee:	68 0f       	add	r22, r24
    2cf0:	79 1f       	adc	r23, r25
    2cf2:	fb 01       	movw	r30, r22
    2cf4:	40 83       	st	Z, r20
    2cf6:	08 95       	ret

00002cf8 <_ZN6StringixEj>:
{
  return strcmp( _buffer, rhs._buffer ) >= 0;
}

char & String::operator[]( unsigned int index )
{
    2cf8:	fc 01       	movw	r30, r24
  static char dummy_writable_char;
  if (index >= _length || !_buffer) {
    2cfa:	84 81       	ldd	r24, Z+4	; 0x04
    2cfc:	95 81       	ldd	r25, Z+5	; 0x05
    2cfe:	68 17       	cp	r22, r24
    2d00:	79 07       	cpc	r23, r25
    2d02:	40 f4       	brcc	.+16     	; 0x2d14 <_ZN6StringixEj+0x1c>
    2d04:	80 81       	ld	r24, Z
    2d06:	91 81       	ldd	r25, Z+1	; 0x01
    2d08:	00 97       	sbiw	r24, 0x00	; 0
    2d0a:	21 f0       	breq	.+8      	; 0x2d14 <_ZN6StringixEj+0x1c>
    dummy_writable_char = 0;
    return dummy_writable_char;
  }
  return _buffer[ index ];
    2d0c:	68 0f       	add	r22, r24
    2d0e:	79 1f       	adc	r23, r25
}
    2d10:	cb 01       	movw	r24, r22
    2d12:	08 95       	ret

char & String::operator[]( unsigned int index )
{
  static char dummy_writable_char;
  if (index >= _length || !_buffer) {
    dummy_writable_char = 0;
    2d14:	10 92 df 06 	sts	0x06DF, r1
    2d18:	6f ed       	ldi	r22, 0xDF	; 223
    2d1a:	76 e0       	ldi	r23, 0x06	; 6
    return dummy_writable_char;
  }
  return _buffer[ index ];
}
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	08 95       	ret

00002d20 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
    2d20:	dc 01       	movw	r26, r24
    2d22:	ed 91       	ld	r30, X+
    2d24:	fc 91       	ld	r31, X
    2d26:	11 97       	sbiw	r26, 0x01	; 1
    2d28:	e6 0f       	add	r30, r22
    2d2a:	f7 1f       	adc	r31, r23
  // need to check for valid index, to do later
  return _buffer[ index ];
}
    2d2c:	80 81       	ld	r24, Z
    2d2e:	08 95       	ret

00002d30 <_ZN6String5toIntEv>:
  buf[len] = 0;
}


long String::toInt() {
  return atol(_buffer);
    2d30:	fc 01       	movw	r30, r24
    2d32:	80 81       	ld	r24, Z
    2d34:	91 81       	ldd	r25, Z+1	; 0x01
    2d36:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <atol>
}
    2d3a:	08 95       	ret

00002d3c <_ZN6String11toCharArrayEPcj>:
  strncpy((char *)buf, _buffer, len);
  buf[len] = 0;
}

void String::toCharArray(char *buf, unsigned int bufsize)
{
    2d3c:	0f 93       	push	r16
    2d3e:	1f 93       	push	r17
    2d40:	cf 93       	push	r28
    2d42:	df 93       	push	r29
    2d44:	fc 01       	movw	r30, r24
    2d46:	eb 01       	movw	r28, r22
  if (!bufsize || !buf) return;
    2d48:	41 15       	cp	r20, r1
    2d4a:	51 05       	cpc	r21, r1
    2d4c:	a1 f0       	breq	.+40     	; 0x2d76 <_ZN6String11toCharArrayEPcj+0x3a>
    2d4e:	61 15       	cp	r22, r1
    2d50:	71 05       	cpc	r23, r1
    2d52:	89 f0       	breq	.+34     	; 0x2d76 <_ZN6String11toCharArrayEPcj+0x3a>
  unsigned int len = bufsize - 1;
    2d54:	84 81       	ldd	r24, Z+4	; 0x04
    2d56:	95 81       	ldd	r25, Z+5	; 0x05
    2d58:	8a 01       	movw	r16, r20
    2d5a:	01 50       	subi	r16, 0x01	; 1
    2d5c:	10 40       	sbci	r17, 0x00	; 0
    2d5e:	80 17       	cp	r24, r16
    2d60:	91 07       	cpc	r25, r17
    2d62:	70 f0       	brcs	.+28     	; 0x2d80 <_ZN6String11toCharArrayEPcj+0x44>
  if (len > _length) len = _length;
  strncpy(buf, _buffer, len);
    2d64:	60 81       	ld	r22, Z
    2d66:	71 81       	ldd	r23, Z+1	; 0x01
    2d68:	ce 01       	movw	r24, r28
    2d6a:	a8 01       	movw	r20, r16
    2d6c:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <strncpy>
  buf[len] = 0;
    2d70:	c0 0f       	add	r28, r16
    2d72:	d1 1f       	adc	r29, r17
    2d74:	18 82       	st	Y, r1
}
    2d76:	df 91       	pop	r29
    2d78:	cf 91       	pop	r28
    2d7a:	1f 91       	pop	r17
    2d7c:	0f 91       	pop	r16
    2d7e:	08 95       	ret
}

void String::toCharArray(char *buf, unsigned int bufsize)
{
  if (!bufsize || !buf) return;
  unsigned int len = bufsize - 1;
    2d80:	8c 01       	movw	r16, r24
    2d82:	f0 cf       	rjmp	.-32     	; 0x2d64 <_ZN6String11toCharArrayEPcj+0x28>

00002d84 <_ZN6String8getBytesEPhj>:

  return temp.substring( i, j + 1);
}

void String::getBytes(unsigned char *buf, unsigned int bufsize)
{
    2d84:	0f 93       	push	r16
    2d86:	1f 93       	push	r17
    2d88:	cf 93       	push	r28
    2d8a:	df 93       	push	r29
    2d8c:	fc 01       	movw	r30, r24
    2d8e:	eb 01       	movw	r28, r22
  if (!bufsize || !buf) return;
    2d90:	41 15       	cp	r20, r1
    2d92:	51 05       	cpc	r21, r1
    2d94:	a1 f0       	breq	.+40     	; 0x2dbe <_ZN6String8getBytesEPhj+0x3a>
    2d96:	61 15       	cp	r22, r1
    2d98:	71 05       	cpc	r23, r1
    2d9a:	89 f0       	breq	.+34     	; 0x2dbe <_ZN6String8getBytesEPhj+0x3a>
  unsigned int len = bufsize - 1;
    2d9c:	84 81       	ldd	r24, Z+4	; 0x04
    2d9e:	95 81       	ldd	r25, Z+5	; 0x05
    2da0:	8a 01       	movw	r16, r20
    2da2:	01 50       	subi	r16, 0x01	; 1
    2da4:	10 40       	sbci	r17, 0x00	; 0
    2da6:	80 17       	cp	r24, r16
    2da8:	91 07       	cpc	r25, r17
    2daa:	70 f0       	brcs	.+28     	; 0x2dc8 <_ZN6String8getBytesEPhj+0x44>
  if (len > _length) len = _length;
  strncpy((char *)buf, _buffer, len);
    2dac:	60 81       	ld	r22, Z
    2dae:	71 81       	ldd	r23, Z+1	; 0x01
    2db0:	ce 01       	movw	r24, r28
    2db2:	a8 01       	movw	r20, r16
    2db4:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <strncpy>
  buf[len] = 0;
    2db8:	c0 0f       	add	r28, r16
    2dba:	d1 1f       	adc	r29, r17
    2dbc:	18 82       	st	Y, r1
}
    2dbe:	df 91       	pop	r29
    2dc0:	cf 91       	pop	r28
    2dc2:	1f 91       	pop	r17
    2dc4:	0f 91       	pop	r16
    2dc6:	08 95       	ret
}

void String::getBytes(unsigned char *buf, unsigned int bufsize)
{
  if (!bufsize || !buf) return;
  unsigned int len = bufsize - 1;
    2dc8:	8c 01       	movw	r16, r24
    2dca:	f0 cf       	rjmp	.-32     	; 0x2dac <_ZN6String8getBytesEPhj+0x28>

00002dcc <_ZNK6String10startsWithERKS_j>:

  return startsWith( s2, 0 );
}

boolean String::startsWith( const String &s2, unsigned int offset ) const
{
    2dcc:	fc 01       	movw	r30, r24
    2dce:	db 01       	movw	r26, r22
    2dd0:	ca 01       	movw	r24, r20
  if ( offset > _length - s2._length )
    2dd2:	14 96       	adiw	r26, 0x04	; 4
    2dd4:	4d 91       	ld	r20, X+
    2dd6:	5c 91       	ld	r21, X
    2dd8:	15 97       	sbiw	r26, 0x05	; 5
    2dda:	24 81       	ldd	r18, Z+4	; 0x04
    2ddc:	35 81       	ldd	r19, Z+5	; 0x05
    2dde:	24 1b       	sub	r18, r20
    2de0:	35 0b       	sbc	r19, r21
    2de2:	28 17       	cp	r18, r24
    2de4:	39 07       	cpc	r19, r25
    2de6:	80 f0       	brcs	.+32     	; 0x2e08 <_ZNK6String10startsWithERKS_j+0x3c>
    return 0;

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
    2de8:	20 81       	ld	r18, Z
    2dea:	31 81       	ldd	r19, Z+1	; 0x01
    2dec:	6d 91       	ld	r22, X+
    2dee:	7c 91       	ld	r23, X
    2df0:	82 0f       	add	r24, r18
    2df2:	93 1f       	adc	r25, r19
    2df4:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <strncmp>
    2df8:	9c 01       	movw	r18, r24
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	21 15       	cp	r18, r1
    2dfe:	31 05       	cpc	r19, r1
    2e00:	09 f0       	breq	.+2      	; 0x2e04 <_ZNK6String10startsWithERKS_j+0x38>
}
    2e02:	08 95       	ret
boolean String::startsWith( const String &s2, unsigned int offset ) const
{
  if ( offset > _length - s2._length )
    return 0;

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
    2e04:	81 e0       	ldi	r24, 0x01	; 1
}
    2e06:	08 95       	ret
  return startsWith( s2, 0 );
}

boolean String::startsWith( const String &s2, unsigned int offset ) const
{
  if ( offset > _length - s2._length )
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	08 95       	ret

00002e0c <_ZNK6String10startsWithERKS_>:
  return -1;
}

boolean String::startsWith( const String &s2 ) const
{
  if ( _length < s2._length )
    2e0c:	fc 01       	movw	r30, r24
    2e0e:	44 81       	ldd	r20, Z+4	; 0x04
    2e10:	55 81       	ldd	r21, Z+5	; 0x05
    2e12:	fb 01       	movw	r30, r22
    2e14:	24 81       	ldd	r18, Z+4	; 0x04
    2e16:	35 81       	ldd	r19, Z+5	; 0x05
    2e18:	42 17       	cp	r20, r18
    2e1a:	53 07       	cpc	r21, r19
    2e1c:	10 f4       	brcc	.+4      	; 0x2e22 <_ZNK6String10startsWithERKS_+0x16>
    2e1e:	80 e0       	ldi	r24, 0x00	; 0
    2e20:	08 95       	ret
    return 0;

  return startsWith( s2, 0 );
    2e22:	40 e0       	ldi	r20, 0x00	; 0
    2e24:	50 e0       	ldi	r21, 0x00	; 0
    2e26:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <_ZNK6String10startsWithERKS_j>
}
    2e2a:	08 95       	ret

00002e2c <_ZNK6String11lastIndexOfEcj>:
{
  return lastIndexOf( theChar, _length - 1 );
}

int String::lastIndexOf( char ch, unsigned int fromIndex ) const
{
    2e2c:	df 92       	push	r13
    2e2e:	ef 92       	push	r14
    2e30:	ff 92       	push	r15
    2e32:	0f 93       	push	r16
    2e34:	1f 93       	push	r17
    2e36:	cf 93       	push	r28
    2e38:	df 93       	push	r29
    2e3a:	ec 01       	movw	r28, r24
  if ( fromIndex >= _length )
    2e3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e3e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e40:	48 17       	cp	r20, r24
    2e42:	59 07       	cpc	r21, r25
    2e44:	58 f0       	brcs	.+22     	; 0x2e5c <_ZNK6String11lastIndexOfEcj+0x30>
  char tempchar = _buffer[fromIndex + 1];
  _buffer[fromIndex + 1] = '\0';
  char* temp = strrchr( _buffer, ch );
  _buffer[fromIndex + 1] = tempchar;

  if ( temp == NULL )
    2e46:	2f ef       	ldi	r18, 0xFF	; 255
    2e48:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;

  return temp - _buffer;
}
    2e4a:	c9 01       	movw	r24, r18
    2e4c:	df 91       	pop	r29
    2e4e:	cf 91       	pop	r28
    2e50:	1f 91       	pop	r17
    2e52:	0f 91       	pop	r16
    2e54:	ff 90       	pop	r15
    2e56:	ef 90       	pop	r14
    2e58:	df 90       	pop	r13
    2e5a:	08 95       	ret
int String::lastIndexOf( char ch, unsigned int fromIndex ) const
{
  if ( fromIndex >= _length )
    return -1;

  char tempchar = _buffer[fromIndex + 1];
    2e5c:	8a 01       	movw	r16, r20
    2e5e:	0f 5f       	subi	r16, 0xFF	; 255
    2e60:	1f 4f       	sbci	r17, 0xFF	; 255
    2e62:	e8 81       	ld	r30, Y
    2e64:	f9 81       	ldd	r31, Y+1	; 0x01
    2e66:	e0 0f       	add	r30, r16
    2e68:	f1 1f       	adc	r31, r17
    2e6a:	d0 80       	ld	r13, Z
  _buffer[fromIndex + 1] = '\0';
    2e6c:	10 82       	st	Z, r1
  char* temp = strrchr( _buffer, ch );
    2e6e:	e8 80       	ld	r14, Y
    2e70:	f9 80       	ldd	r15, Y+1	; 0x01
    2e72:	c7 01       	movw	r24, r14
    2e74:	70 e0       	ldi	r23, 0x00	; 0
    2e76:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <strrchr>
    2e7a:	9c 01       	movw	r18, r24
  _buffer[fromIndex + 1] = tempchar;
    2e7c:	0e 0d       	add	r16, r14
    2e7e:	1f 1d       	adc	r17, r15
    2e80:	f8 01       	movw	r30, r16
    2e82:	d0 82       	st	Z, r13

  if ( temp == NULL )
    2e84:	00 97       	sbiw	r24, 0x00	; 0
    2e86:	f9 f2       	breq	.-66     	; 0x2e46 <_ZNK6String11lastIndexOfEcj+0x1a>
    return -1;

  return temp - _buffer;
    2e88:	88 81       	ld	r24, Y
    2e8a:	99 81       	ldd	r25, Y+1	; 0x01
    2e8c:	28 1b       	sub	r18, r24
    2e8e:	39 0b       	sbc	r19, r25
    2e90:	dc cf       	rjmp	.-72     	; 0x2e4a <_ZNK6String11lastIndexOfEcj+0x1e>

00002e92 <_ZNK6String11lastIndexOfEc>:
  return theFind - _buffer; // pointer subtraction
}

int String::lastIndexOf( char theChar ) const
{
  return lastIndexOf( theChar, _length - 1 );
    2e92:	fc 01       	movw	r30, r24
    2e94:	44 81       	ldd	r20, Z+4	; 0x04
    2e96:	55 81       	ldd	r21, Z+5	; 0x05
    2e98:	41 50       	subi	r20, 0x01	; 1
    2e9a:	50 40       	sbci	r21, 0x00	; 0
    2e9c:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_ZNK6String11lastIndexOfEcj>
}
    2ea0:	08 95       	ret

00002ea2 <_ZNK6String7indexOfERKS_j>:
{
  return indexOf( s2, 0 );
}

int String::indexOf( const String &s2, unsigned int fromIndex ) const
{
    2ea2:	cf 93       	push	r28
    2ea4:	df 93       	push	r29
    2ea6:	fc 01       	movw	r30, r24
  if ( fromIndex >= _length )
    2ea8:	84 81       	ldd	r24, Z+4	; 0x04
    2eaa:	95 81       	ldd	r25, Z+5	; 0x05
    2eac:	48 17       	cp	r20, r24
    2eae:	59 07       	cpc	r21, r25
    2eb0:	30 f0       	brcs	.+12     	; 0x2ebe <_ZNK6String7indexOfERKS_j+0x1c>
    return -1;

  const char *theFind = strstr( &_buffer[ fromIndex ], s2._buffer );

  if ( theFind == NULL )
    2eb2:	2f ef       	ldi	r18, 0xFF	; 255
    2eb4:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;

  return theFind - _buffer; // pointer subtraction
}
    2eb6:	c9 01       	movw	r24, r18
    2eb8:	df 91       	pop	r29
    2eba:	cf 91       	pop	r28
    2ebc:	08 95       	ret
int String::indexOf( const String &s2, unsigned int fromIndex ) const
{
  if ( fromIndex >= _length )
    return -1;

  const char *theFind = strstr( &_buffer[ fromIndex ], s2._buffer );
    2ebe:	c0 81       	ld	r28, Z
    2ec0:	d1 81       	ldd	r29, Z+1	; 0x01
    2ec2:	fb 01       	movw	r30, r22
    2ec4:	60 81       	ld	r22, Z
    2ec6:	71 81       	ldd	r23, Z+1	; 0x01
    2ec8:	ce 01       	movw	r24, r28
    2eca:	84 0f       	add	r24, r20
    2ecc:	95 1f       	adc	r25, r21
    2ece:	0e 94 1c 2e 	call	0x5c38	; 0x5c38 <strstr>
    2ed2:	9c 01       	movw	r18, r24

  if ( theFind == NULL )
    2ed4:	00 97       	sbiw	r24, 0x00	; 0
    2ed6:	69 f3       	breq	.-38     	; 0x2eb2 <_ZNK6String7indexOfERKS_j+0x10>
    return -1;

  return theFind - _buffer; // pointer subtraction
    2ed8:	2c 1b       	sub	r18, r28
    2eda:	3d 0b       	sbc	r19, r29
    2edc:	ec cf       	rjmp	.-40     	; 0x2eb6 <_ZNK6String7indexOfERKS_j+0x14>

00002ede <_ZNK6String7indexOfERKS_>:
  return temp - _buffer;
}

int String::indexOf( const String &s2 ) const
{
  return indexOf( s2, 0 );
    2ede:	40 e0       	ldi	r20, 0x00	; 0
    2ee0:	50 e0       	ldi	r21, 0x00	; 0
    2ee2:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <_ZNK6String7indexOfERKS_j>
}
    2ee6:	08 95       	ret

00002ee8 <_ZNK6String7indexOfEcj>:
{
  return indexOf( temp, 0 );
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    2ee8:	cf 93       	push	r28
    2eea:	df 93       	push	r29
    2eec:	fc 01       	movw	r30, r24
  if ( fromIndex >= _length )
    2eee:	84 81       	ldd	r24, Z+4	; 0x04
    2ef0:	95 81       	ldd	r25, Z+5	; 0x05
    2ef2:	48 17       	cp	r20, r24
    2ef4:	59 07       	cpc	r21, r25
    2ef6:	30 f0       	brcs	.+12     	; 0x2f04 <_ZNK6String7indexOfEcj+0x1c>
    return -1;

  const char* temp = strchr( &_buffer[fromIndex], ch );
  if ( temp == NULL )
    2ef8:	2f ef       	ldi	r18, 0xFF	; 255
    2efa:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;

  return temp - _buffer;
}
    2efc:	c9 01       	movw	r24, r18
    2efe:	df 91       	pop	r29
    2f00:	cf 91       	pop	r28
    2f02:	08 95       	ret
int String::indexOf( char ch, unsigned int fromIndex ) const
{
  if ( fromIndex >= _length )
    return -1;

  const char* temp = strchr( &_buffer[fromIndex], ch );
    2f04:	c0 81       	ld	r28, Z
    2f06:	d1 81       	ldd	r29, Z+1	; 0x01
    2f08:	ce 01       	movw	r24, r28
    2f0a:	84 0f       	add	r24, r20
    2f0c:	95 1f       	adc	r25, r21
    2f0e:	70 e0       	ldi	r23, 0x00	; 0
    2f10:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <strchr>
    2f14:	9c 01       	movw	r18, r24
  if ( temp == NULL )
    2f16:	00 97       	sbiw	r24, 0x00	; 0
    2f18:	79 f3       	breq	.-34     	; 0x2ef8 <_ZNK6String7indexOfEcj+0x10>
    return -1;

  return temp - _buffer;
    2f1a:	2c 1b       	sub	r18, r28
    2f1c:	3d 0b       	sbc	r19, r29
    2f1e:	ee cf       	rjmp	.-36     	; 0x2efc <_ZNK6String7indexOfEcj+0x14>

00002f20 <_ZNK6String7indexOfEc>:
  return newString;
}

int String::indexOf( char temp ) const
{
  return indexOf( temp, 0 );
    2f20:	40 e0       	ldi	r20, 0x00	; 0
    2f22:	50 e0       	ldi	r21, 0x00	; 0
    2f24:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <_ZNK6String7indexOfEcj>
}
    2f28:	08 95       	ret

00002f2a <_ZNK6String6equalsERKS_>:

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
}

boolean String::equals( const String &s2 ) const
{
    2f2a:	fc 01       	movw	r30, r24
    2f2c:	db 01       	movw	r26, r22
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
    2f2e:	24 81       	ldd	r18, Z+4	; 0x04
    2f30:	35 81       	ldd	r19, Z+5	; 0x05
    2f32:	14 96       	adiw	r26, 0x04	; 4
    2f34:	8d 91       	ld	r24, X+
    2f36:	9c 91       	ld	r25, X
    2f38:	15 97       	sbiw	r26, 0x05	; 5
    2f3a:	28 17       	cp	r18, r24
    2f3c:	39 07       	cpc	r19, r25
    2f3e:	11 f0       	breq	.+4      	; 0x2f44 <_ZNK6String6equalsERKS_+0x1a>
    2f40:	80 e0       	ldi	r24, 0x00	; 0
    2f42:	08 95       	ret
    2f44:	6d 91       	ld	r22, X+
    2f46:	7c 91       	ld	r23, X
    2f48:	80 81       	ld	r24, Z
    2f4a:	91 81       	ldd	r25, Z+1	; 0x01
    2f4c:	0e 94 e4 2d 	call	0x5bc8	; 0x5bc8 <strcmp>
    2f50:	9c 01       	movw	r18, r24
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	21 15       	cp	r18, r1
    2f56:	31 05       	cpc	r19, r1
    2f58:	09 f0       	breq	.+2      	; 0x2f5c <_ZNK6String6equalsERKS_+0x32>
}
    2f5a:	08 95       	ret
  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
}

boolean String::equals( const String &s2 ) const
{
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
}
    2f5e:	08 95       	ret

00002f60 <_ZNK6String8endsWithERKS_>:
  // need to check for valid index, to do later
  return _buffer[ index ];
}

boolean String::endsWith( const String &s2 ) const
{
    2f60:	fc 01       	movw	r30, r24
    2f62:	db 01       	movw	r26, r22
  if ( _length < s2._length )
    2f64:	84 81       	ldd	r24, Z+4	; 0x04
    2f66:	95 81       	ldd	r25, Z+5	; 0x05
    2f68:	14 96       	adiw	r26, 0x04	; 4
    2f6a:	2d 91       	ld	r18, X+
    2f6c:	3c 91       	ld	r19, X
    2f6e:	15 97       	sbiw	r26, 0x05	; 5
    2f70:	82 17       	cp	r24, r18
    2f72:	93 07       	cpc	r25, r19
    2f74:	90 f0       	brcs	.+36     	; 0x2f9a <_ZNK6String8endsWithERKS_+0x3a>
    return 0;

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
    2f76:	82 1b       	sub	r24, r18
    2f78:	93 0b       	sbc	r25, r19
    2f7a:	20 81       	ld	r18, Z
    2f7c:	31 81       	ldd	r19, Z+1	; 0x01
    2f7e:	6d 91       	ld	r22, X+
    2f80:	7c 91       	ld	r23, X
    2f82:	82 0f       	add	r24, r18
    2f84:	93 1f       	adc	r25, r19
    2f86:	0e 94 e4 2d 	call	0x5bc8	; 0x5bc8 <strcmp>
    2f8a:	9c 01       	movw	r18, r24
    2f8c:	80 e0       	ldi	r24, 0x00	; 0
    2f8e:	21 15       	cp	r18, r1
    2f90:	31 05       	cpc	r19, r1
    2f92:	09 f0       	breq	.+2      	; 0x2f96 <_ZNK6String8endsWithERKS_+0x36>
}
    2f94:	08 95       	ret
boolean String::endsWith( const String &s2 ) const
{
  if ( _length < s2._length )
    return 0;

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
    2f96:	81 e0       	ldi	r24, 0x01	; 1
}
    2f98:	08 95       	ret
  return _buffer[ index ];
}

boolean String::endsWith( const String &s2 ) const
{
  if ( _length < s2._length )
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	08 95       	ret

00002f9e <_ZNK6StringgeERKS_>:
  return strcmp( _buffer, rhs._buffer ) <= 0;
}

int String::operator>=( const String & rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) >= 0;
    2f9e:	fb 01       	movw	r30, r22
    2fa0:	60 81       	ld	r22, Z
    2fa2:	71 81       	ldd	r23, Z+1	; 0x01
    2fa4:	fc 01       	movw	r30, r24
    2fa6:	80 81       	ld	r24, Z
    2fa8:	91 81       	ldd	r25, Z+1	; 0x01
    2faa:	0e 94 e4 2d 	call	0x5bc8	; 0x5bc8 <strcmp>
    2fae:	29 2f       	mov	r18, r25
    2fb0:	33 27       	eor	r19, r19
    2fb2:	27 fd       	sbrc	r18, 7
    2fb4:	30 95       	com	r19
    2fb6:	20 95       	com	r18
    2fb8:	30 95       	com	r19
    2fba:	22 27       	eor	r18, r18
    2fbc:	33 0f       	add	r19, r19
    2fbe:	22 1f       	adc	r18, r18
    2fc0:	33 27       	eor	r19, r19
}
    2fc2:	c9 01       	movw	r24, r18
    2fc4:	08 95       	ret

00002fc6 <_ZNK6StringleERKS_>:
  return strcmp( _buffer, rhs._buffer ) > 0;
}

int String::operator<=( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) <= 0;
    2fc6:	fb 01       	movw	r30, r22
    2fc8:	60 81       	ld	r22, Z
    2fca:	71 81       	ldd	r23, Z+1	; 0x01
    2fcc:	fc 01       	movw	r30, r24
    2fce:	80 81       	ld	r24, Z
    2fd0:	91 81       	ldd	r25, Z+1	; 0x01
    2fd2:	0e 94 e4 2d 	call	0x5bc8	; 0x5bc8 <strcmp>
    2fd6:	40 e0       	ldi	r20, 0x00	; 0
    2fd8:	50 e0       	ldi	r21, 0x00	; 0
    2fda:	18 16       	cp	r1, r24
    2fdc:	19 06       	cpc	r1, r25
    2fde:	14 f4       	brge	.+4      	; 0x2fe4 <_ZNK6StringleERKS_+0x1e>
}
    2fe0:	ca 01       	movw	r24, r20
    2fe2:	08 95       	ret
  return strcmp( _buffer, rhs._buffer ) > 0;
}

int String::operator<=( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) <= 0;
    2fe4:	41 e0       	ldi	r20, 0x01	; 1
    2fe6:	50 e0       	ldi	r21, 0x00	; 0
}
    2fe8:	ca 01       	movw	r24, r20
    2fea:	08 95       	ret

00002fec <_ZNK6StringgtERKS_>:
  return strcmp( _buffer, rhs._buffer ) < 0;
}

int String::operator>( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) > 0;
    2fec:	fb 01       	movw	r30, r22
    2fee:	60 81       	ld	r22, Z
    2ff0:	71 81       	ldd	r23, Z+1	; 0x01
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	80 81       	ld	r24, Z
    2ff6:	91 81       	ldd	r25, Z+1	; 0x01
    2ff8:	0e 94 e4 2d 	call	0x5bc8	; 0x5bc8 <strcmp>
    2ffc:	40 e0       	ldi	r20, 0x00	; 0
    2ffe:	50 e0       	ldi	r21, 0x00	; 0
    3000:	18 16       	cp	r1, r24
    3002:	19 06       	cpc	r1, r25
    3004:	14 f4       	brge	.+4      	; 0x300a <_ZNK6StringgtERKS_+0x1e>
    3006:	41 e0       	ldi	r20, 0x01	; 1
    3008:	50 e0       	ldi	r21, 0x00	; 0
}
    300a:	ca 01       	movw	r24, r20
    300c:	08 95       	ret

0000300e <_ZNK6StringltERKS_>:
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
}

int String::operator<( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) < 0;
    300e:	fb 01       	movw	r30, r22
    3010:	60 81       	ld	r22, Z
    3012:	71 81       	ldd	r23, Z+1	; 0x01
    3014:	fc 01       	movw	r30, r24
    3016:	80 81       	ld	r24, Z
    3018:	91 81       	ldd	r25, Z+1	; 0x01
    301a:	0e 94 e4 2d 	call	0x5bc8	; 0x5bc8 <strcmp>
    301e:	29 2f       	mov	r18, r25
    3020:	33 27       	eor	r19, r19
    3022:	27 fd       	sbrc	r18, 7
    3024:	30 95       	com	r19
    3026:	22 27       	eor	r18, r18
    3028:	33 0f       	add	r19, r19
    302a:	22 1f       	adc	r18, r18
    302c:	33 27       	eor	r19, r19
}
    302e:	c9 01       	movw	r24, r18
    3030:	08 95       	ret

00003032 <_ZNK6StringneERKS_>:
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
}

int String::operator!=( const String &rhs ) const
{
    3032:	fc 01       	movw	r30, r24
    3034:	db 01       	movw	r26, r22
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
    3036:	24 81       	ldd	r18, Z+4	; 0x04
    3038:	35 81       	ldd	r19, Z+5	; 0x05
    303a:	14 96       	adiw	r26, 0x04	; 4
    303c:	8d 91       	ld	r24, X+
    303e:	9c 91       	ld	r25, X
    3040:	15 97       	sbiw	r26, 0x05	; 5
    3042:	28 17       	cp	r18, r24
    3044:	39 07       	cpc	r19, r25
    3046:	21 f0       	breq	.+8      	; 0x3050 <_ZNK6StringneERKS_+0x1e>
    3048:	21 e0       	ldi	r18, 0x01	; 1
    304a:	30 e0       	ldi	r19, 0x00	; 0
}
    304c:	c9 01       	movw	r24, r18
    304e:	08 95       	ret
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
}

int String::operator!=( const String &rhs ) const
{
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
    3050:	6d 91       	ld	r22, X+
    3052:	7c 91       	ld	r23, X
    3054:	80 81       	ld	r24, Z
    3056:	91 81       	ldd	r25, Z+1	; 0x01
    3058:	0e 94 e4 2d 	call	0x5bc8	; 0x5bc8 <strcmp>
    305c:	9c 01       	movw	r18, r24
    305e:	21 15       	cp	r18, r1
    3060:	31 05       	cpc	r19, r1
    3062:	91 f7       	brne	.-28     	; 0x3048 <_ZNK6StringneERKS_+0x16>
}
    3064:	c9 01       	movw	r24, r18
    3066:	08 95       	ret

00003068 <_ZNK6StringeqERKS_>:
  return *this;
}


int String::operator==( const String &rhs ) const
{
    3068:	fc 01       	movw	r30, r24
    306a:	db 01       	movw	r26, r22
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
    306c:	24 81       	ldd	r18, Z+4	; 0x04
    306e:	35 81       	ldd	r19, Z+5	; 0x05
    3070:	14 96       	adiw	r26, 0x04	; 4
    3072:	8d 91       	ld	r24, X+
    3074:	9c 91       	ld	r25, X
    3076:	15 97       	sbiw	r26, 0x05	; 5
    3078:	28 17       	cp	r18, r24
    307a:	39 07       	cpc	r19, r25
    307c:	21 f0       	breq	.+8      	; 0x3086 <_ZNK6StringeqERKS_+0x1e>
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
}
    3082:	c9 01       	movw	r24, r18
    3084:	08 95       	ret
}


int String::operator==( const String &rhs ) const
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
    3086:	6d 91       	ld	r22, X+
    3088:	7c 91       	ld	r23, X
    308a:	80 81       	ld	r24, Z
    308c:	91 81       	ldd	r25, Z+1	; 0x01
    308e:	0e 94 e4 2d 	call	0x5bc8	; 0x5bc8 <strcmp>
    3092:	9c 01       	movw	r18, r24
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	21 15       	cp	r18, r1
    309a:	31 05       	cpc	r19, r1
    309c:	19 f0       	breq	.+6      	; 0x30a4 <_ZNK6StringeqERKS_+0x3c>
    309e:	9c 01       	movw	r18, r24
}
    30a0:	c9 01       	movw	r24, r18
    30a2:	08 95       	ret
}


int String::operator==( const String &rhs ) const
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
    30a4:	81 e0       	ldi	r24, 0x01	; 1
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	9c 01       	movw	r18, r24
    30aa:	fa cf       	rjmp	.-12     	; 0x30a0 <_ZNK6StringeqERKS_+0x38>

000030ac <_ZNK6String9compareToERKS_>:
  }
}

int String::compareTo( const String &s2 ) const
{
  return strcmp( _buffer, s2._buffer );
    30ac:	fb 01       	movw	r30, r22
    30ae:	60 81       	ld	r22, Z
    30b0:	71 81       	ldd	r23, Z+1	; 0x01
    30b2:	fc 01       	movw	r30, r24
    30b4:	80 81       	ld	r24, Z
    30b6:	91 81       	ldd	r25, Z+1	; 0x01
    30b8:	0e 94 e4 2d 	call	0x5bc8	; 0x5bc8 <strcmp>
}
    30bc:	08 95       	ret

000030be <_ZN6StringpLERKS_>:
//  _buffer[ _length ] = '\0';
//  return *this;
//}

const String & String::operator+=( const String &other )
{
    30be:	ef 92       	push	r14
    30c0:	ff 92       	push	r15
    30c2:	0f 93       	push	r16
    30c4:	1f 93       	push	r17
    30c6:	cf 93       	push	r28
    30c8:	df 93       	push	r29
    30ca:	ec 01       	movw	r28, r24
    30cc:	8b 01       	movw	r16, r22
  _length += other._length;
    30ce:	fb 01       	movw	r30, r22
    30d0:	64 81       	ldd	r22, Z+4	; 0x04
    30d2:	75 81       	ldd	r23, Z+5	; 0x05
    30d4:	8c 81       	ldd	r24, Y+4	; 0x04
    30d6:	9d 81       	ldd	r25, Y+5	; 0x05
    30d8:	68 0f       	add	r22, r24
    30da:	79 1f       	adc	r23, r25
    30dc:	7d 83       	std	Y+5, r23	; 0x05
    30de:	6c 83       	std	Y+4, r22	; 0x04
  if ( _length > _capacity )
    30e0:	8a 81       	ldd	r24, Y+2	; 0x02
    30e2:	9b 81       	ldd	r25, Y+3	; 0x03
    30e4:	86 17       	cp	r24, r22
    30e6:	97 07       	cpc	r25, r23
    30e8:	78 f4       	brcc	.+30     	; 0x3108 <_ZN6StringpLERKS_+0x4a>
  {
    char *temp = (char *)realloc(_buffer, _length + 1);
    30ea:	6f 5f       	subi	r22, 0xFF	; 255
    30ec:	7f 4f       	sbci	r23, 0xFF	; 255
    30ee:	88 81       	ld	r24, Y
    30f0:	99 81       	ldd	r25, Y+1	; 0x01
    30f2:	0e 94 ae 2c 	call	0x595c	; 0x595c <realloc>
    if ( temp != NULL ) {
    30f6:	00 97       	sbiw	r24, 0x00	; 0
    30f8:	b1 f0       	breq	.+44     	; 0x3126 <_ZN6StringpLERKS_+0x68>
      _buffer = temp;
    30fa:	99 83       	std	Y+1, r25	; 0x01
    30fc:	88 83       	st	Y, r24
      _capacity = _length;
    30fe:	2c 81       	ldd	r18, Y+4	; 0x04
    3100:	3d 81       	ldd	r19, Y+5	; 0x05
    3102:	3b 83       	std	Y+3, r19	; 0x03
    3104:	2a 83       	std	Y+2, r18	; 0x02
    3106:	02 c0       	rjmp	.+4      	; 0x310c <_ZN6StringpLERKS_+0x4e>
    } else {
      _length -= other._length;
      return *this;
    3108:	88 81       	ld	r24, Y
    310a:	99 81       	ldd	r25, Y+1	; 0x01
    }
  }
  strcat( _buffer, other._buffer );
    310c:	f8 01       	movw	r30, r16
    310e:	60 81       	ld	r22, Z
    3110:	71 81       	ldd	r23, Z+1	; 0x01
    3112:	0e 94 ce 2d 	call	0x5b9c	; 0x5b9c <strcat>
  return *this;
}
    3116:	ce 01       	movw	r24, r28
    3118:	df 91       	pop	r29
    311a:	cf 91       	pop	r28
    311c:	1f 91       	pop	r17
    311e:	0f 91       	pop	r16
    3120:	ff 90       	pop	r15
    3122:	ef 90       	pop	r14
    3124:	08 95       	ret
    char *temp = (char *)realloc(_buffer, _length + 1);
    if ( temp != NULL ) {
      _buffer = temp;
      _capacity = _length;
    } else {
      _length -= other._length;
    3126:	8c 81       	ldd	r24, Y+4	; 0x04
    3128:	9d 81       	ldd	r25, Y+5	; 0x05
    312a:	f8 01       	movw	r30, r16
    312c:	24 81       	ldd	r18, Z+4	; 0x04
    312e:	35 81       	ldd	r19, Z+5	; 0x05
    3130:	82 1b       	sub	r24, r18
    3132:	93 0b       	sbc	r25, r19
    3134:	9d 83       	std	Y+5, r25	; 0x05
    3136:	8c 83       	std	Y+4, r24	; 0x04
      return *this;
    3138:	ee cf       	rjmp	.-36     	; 0x3116 <_ZN6StringpLERKS_+0x58>

0000313a <_ZN6String6concatERKS_>:
  return strcmp( _buffer, s2._buffer );
}

const String & String::concat( const String &s2 )
{
  return (*this) += s2;
    313a:	0e 94 5f 18 	call	0x30be	; 0x30be <_ZN6StringpLERKS_>
}
    313e:	08 95       	ret

00003140 <_ZN6StringaSERKS_>:

const String & String::operator=( const String &rhs )
{
    3140:	ef 92       	push	r14
    3142:	ff 92       	push	r15
    3144:	0f 93       	push	r16
    3146:	1f 93       	push	r17
    3148:	cf 93       	push	r28
    314a:	df 93       	push	r29
    314c:	ec 01       	movw	r28, r24
    314e:	8b 01       	movw	r16, r22
  if ( this == &rhs )
    3150:	86 17       	cp	r24, r22
    3152:	97 07       	cpc	r25, r23
    3154:	99 f0       	breq	.+38     	; 0x317c <_ZN6StringaSERKS_+0x3c>
    return *this;

  if ( rhs._length > _length )
    3156:	fb 01       	movw	r30, r22
    3158:	44 81       	ldd	r20, Z+4	; 0x04
    315a:	55 81       	ldd	r21, Z+5	; 0x05
    315c:	8c 81       	ldd	r24, Y+4	; 0x04
    315e:	9d 81       	ldd	r25, Y+5	; 0x05
    3160:	84 17       	cp	r24, r20
    3162:	95 07       	cpc	r25, r21
    3164:	98 f0       	brcs	.+38     	; 0x318c <_ZN6StringaSERKS_+0x4c>
  {
    free(_buffer);
    getBuffer( rhs._length );
  }
  
  if ( _buffer != NULL ) {
    3166:	88 81       	ld	r24, Y
    3168:	99 81       	ldd	r25, Y+1	; 0x01
    316a:	00 97       	sbiw	r24, 0x00	; 0
    316c:	39 f0       	breq	.+14     	; 0x317c <_ZN6StringaSERKS_+0x3c>
    _length = rhs._length;
    316e:	5d 83       	std	Y+5, r21	; 0x05
    3170:	4c 83       	std	Y+4, r20	; 0x04
    strcpy( _buffer, rhs._buffer );
    3172:	f8 01       	movw	r30, r16
    3174:	60 81       	ld	r22, Z
    3176:	71 81       	ldd	r23, Z+1	; 0x01
    3178:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <strcpy>
  }
  return *this;
}
    317c:	ce 01       	movw	r24, r28
    317e:	df 91       	pop	r29
    3180:	cf 91       	pop	r28
    3182:	1f 91       	pop	r17
    3184:	0f 91       	pop	r16
    3186:	ff 90       	pop	r15
    3188:	ef 90       	pop	r14
    318a:	08 95       	ret
  if ( this == &rhs )
    return *this;

  if ( rhs._length > _length )
  {
    free(_buffer);
    318c:	88 81       	ld	r24, Y
    318e:	99 81       	ldd	r25, Y+1	; 0x01
    3190:	0e 94 17 2c 	call	0x582e	; 0x582e <free>
    getBuffer( rhs._length );
    3194:	f8 01       	movw	r30, r16
    3196:	84 81       	ldd	r24, Z+4	; 0x04
    3198:	95 81       	ldd	r25, Z+5	; 0x05
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    319a:	9b 83       	std	Y+3, r25	; 0x03
    319c:	8a 83       	std	Y+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    319e:	01 96       	adiw	r24, 0x01	; 1
    31a0:	0e 94 75 2b 	call	0x56ea	; 0x56ea <malloc>
    31a4:	99 83       	std	Y+1, r25	; 0x01
    31a6:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    31a8:	00 97       	sbiw	r24, 0x00	; 0
    31aa:	21 f0       	breq	.+8      	; 0x31b4 <_ZN6StringaSERKS_+0x74>
    31ac:	f8 01       	movw	r30, r16
    31ae:	44 81       	ldd	r20, Z+4	; 0x04
    31b0:	55 81       	ldd	r21, Z+5	; 0x05
    31b2:	dd cf       	rjmp	.-70     	; 0x316e <_ZN6StringaSERKS_+0x2e>
    31b4:	1b 82       	std	Y+3, r1	; 0x03
    31b6:	1a 82       	std	Y+2, r1	; 0x02
    31b8:	1d 82       	std	Y+5, r1	; 0x05
    31ba:	1c 82       	std	Y+4, r1	; 0x04
    31bc:	df cf       	rjmp	.-66     	; 0x317c <_ZN6StringaSERKS_+0x3c>

000031be <_ZN6StringC1Eh>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const unsigned char value )
    31be:	0f 93       	push	r16
    31c0:	1f 93       	push	r17
    31c2:	df 93       	push	r29
    31c4:	cf 93       	push	r28
    31c6:	0f 92       	push	r0
    31c8:	cd b7       	in	r28, 0x3d	; 61
    31ca:	de b7       	in	r29, 0x3e	; 62
    31cc:	8c 01       	movw	r16, r24
{
  _length = 1;
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	d8 01       	movw	r26, r16
    31d4:	15 96       	adiw	r26, 0x05	; 5
    31d6:	9c 93       	st	X, r25
    31d8:	8e 93       	st	-X, r24
    31da:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    31dc:	13 96       	adiw	r26, 0x03	; 3
    31de:	9c 93       	st	X, r25
    31e0:	8e 93       	st	-X, r24
    31e2:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    31e4:	82 e0       	ldi	r24, 0x02	; 2
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	69 83       	std	Y+1, r22	; 0x01
    31ea:	0e 94 75 2b 	call	0x56ea	; 0x56ea <malloc>
    31ee:	fc 01       	movw	r30, r24
    31f0:	d8 01       	movw	r26, r16
    31f2:	11 96       	adiw	r26, 0x01	; 1
    31f4:	9c 93       	st	X, r25
    31f6:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    31f8:	69 81       	ldd	r22, Y+1	; 0x01
    31fa:	00 97       	sbiw	r24, 0x00	; 0
    31fc:	61 f0       	breq	.+24     	; 0x3216 <_ZN6StringC1Eh+0x58>
  getBuffer(1);
  if ( _buffer != NULL) {
    _buffer[0] = value;
    31fe:	60 83       	st	Z, r22
    _buffer[1] = 0;
    3200:	d8 01       	movw	r26, r16
    3202:	ed 91       	ld	r30, X+
    3204:	fc 91       	ld	r31, X
    3206:	11 97       	sbiw	r26, 0x01	; 1
    3208:	11 82       	std	Z+1, r1	; 0x01
  }
}
    320a:	0f 90       	pop	r0
    320c:	cf 91       	pop	r28
    320e:	df 91       	pop	r29
    3210:	1f 91       	pop	r17
    3212:	0f 91       	pop	r16
    3214:	08 95       	ret
    3216:	13 96       	adiw	r26, 0x03	; 3
    3218:	1c 92       	st	X, r1
    321a:	1e 92       	st	-X, r1
    321c:	12 97       	sbiw	r26, 0x02	; 2
    321e:	15 96       	adiw	r26, 0x05	; 5
    3220:	1c 92       	st	X, r1
    3222:	1e 92       	st	-X, r1
    3224:	14 97       	sbiw	r26, 0x04	; 4
    3226:	0f 90       	pop	r0
    3228:	cf 91       	pop	r28
    322a:	df 91       	pop	r29
    322c:	1f 91       	pop	r17
    322e:	0f 91       	pop	r16
    3230:	08 95       	ret

00003232 <_ZN6StringC2Eh>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const unsigned char value )
    3232:	0f 93       	push	r16
    3234:	1f 93       	push	r17
    3236:	df 93       	push	r29
    3238:	cf 93       	push	r28
    323a:	0f 92       	push	r0
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	8c 01       	movw	r16, r24
{
  _length = 1;
    3242:	81 e0       	ldi	r24, 0x01	; 1
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	d8 01       	movw	r26, r16
    3248:	15 96       	adiw	r26, 0x05	; 5
    324a:	9c 93       	st	X, r25
    324c:	8e 93       	st	-X, r24
    324e:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3250:	13 96       	adiw	r26, 0x03	; 3
    3252:	9c 93       	st	X, r25
    3254:	8e 93       	st	-X, r24
    3256:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    3258:	82 e0       	ldi	r24, 0x02	; 2
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	69 83       	std	Y+1, r22	; 0x01
    325e:	0e 94 75 2b 	call	0x56ea	; 0x56ea <malloc>
    3262:	fc 01       	movw	r30, r24
    3264:	d8 01       	movw	r26, r16
    3266:	11 96       	adiw	r26, 0x01	; 1
    3268:	9c 93       	st	X, r25
    326a:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    326c:	69 81       	ldd	r22, Y+1	; 0x01
    326e:	00 97       	sbiw	r24, 0x00	; 0
    3270:	61 f0       	breq	.+24     	; 0x328a <_ZN6StringC2Eh+0x58>
  getBuffer(1);
  if ( _buffer != NULL) {
    _buffer[0] = value;
    3272:	60 83       	st	Z, r22
    _buffer[1] = 0;
    3274:	d8 01       	movw	r26, r16
    3276:	ed 91       	ld	r30, X+
    3278:	fc 91       	ld	r31, X
    327a:	11 97       	sbiw	r26, 0x01	; 1
    327c:	11 82       	std	Z+1, r1	; 0x01
  }
}
    327e:	0f 90       	pop	r0
    3280:	cf 91       	pop	r28
    3282:	df 91       	pop	r29
    3284:	1f 91       	pop	r17
    3286:	0f 91       	pop	r16
    3288:	08 95       	ret
    328a:	13 96       	adiw	r26, 0x03	; 3
    328c:	1c 92       	st	X, r1
    328e:	1e 92       	st	-X, r1
    3290:	12 97       	sbiw	r26, 0x02	; 2
    3292:	15 96       	adiw	r26, 0x05	; 5
    3294:	1c 92       	st	X, r1
    3296:	1e 92       	st	-X, r1
    3298:	14 97       	sbiw	r26, 0x04	; 4
    329a:	0f 90       	pop	r0
    329c:	cf 91       	pop	r28
    329e:	df 91       	pop	r29
    32a0:	1f 91       	pop	r17
    32a2:	0f 91       	pop	r16
    32a4:	08 95       	ret

000032a6 <_ZN6StringC1Ec>:
  getBuffer( _length = value._length );
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
}

String::String( const char value )
    32a6:	0f 93       	push	r16
    32a8:	1f 93       	push	r17
    32aa:	df 93       	push	r29
    32ac:	cf 93       	push	r28
    32ae:	0f 92       	push	r0
    32b0:	cd b7       	in	r28, 0x3d	; 61
    32b2:	de b7       	in	r29, 0x3e	; 62
    32b4:	8c 01       	movw	r16, r24
{
  _length = 1;
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	d8 01       	movw	r26, r16
    32bc:	15 96       	adiw	r26, 0x05	; 5
    32be:	9c 93       	st	X, r25
    32c0:	8e 93       	st	-X, r24
    32c2:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    32c4:	13 96       	adiw	r26, 0x03	; 3
    32c6:	9c 93       	st	X, r25
    32c8:	8e 93       	st	-X, r24
    32ca:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    32cc:	82 e0       	ldi	r24, 0x02	; 2
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	69 83       	std	Y+1, r22	; 0x01
    32d2:	0e 94 75 2b 	call	0x56ea	; 0x56ea <malloc>
    32d6:	fc 01       	movw	r30, r24
    32d8:	d8 01       	movw	r26, r16
    32da:	11 96       	adiw	r26, 0x01	; 1
    32dc:	9c 93       	st	X, r25
    32de:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    32e0:	69 81       	ldd	r22, Y+1	; 0x01
    32e2:	00 97       	sbiw	r24, 0x00	; 0
    32e4:	61 f0       	breq	.+24     	; 0x32fe <_ZN6StringC1Ec+0x58>
  getBuffer(1);
  if ( _buffer != NULL ) {
    _buffer[0] = value;
    32e6:	60 83       	st	Z, r22
    _buffer[1] = 0;
    32e8:	d8 01       	movw	r26, r16
    32ea:	ed 91       	ld	r30, X+
    32ec:	fc 91       	ld	r31, X
    32ee:	11 97       	sbiw	r26, 0x01	; 1
    32f0:	11 82       	std	Z+1, r1	; 0x01
  }
}
    32f2:	0f 90       	pop	r0
    32f4:	cf 91       	pop	r28
    32f6:	df 91       	pop	r29
    32f8:	1f 91       	pop	r17
    32fa:	0f 91       	pop	r16
    32fc:	08 95       	ret
    32fe:	13 96       	adiw	r26, 0x03	; 3
    3300:	1c 92       	st	X, r1
    3302:	1e 92       	st	-X, r1
    3304:	12 97       	sbiw	r26, 0x02	; 2
    3306:	15 96       	adiw	r26, 0x05	; 5
    3308:	1c 92       	st	X, r1
    330a:	1e 92       	st	-X, r1
    330c:	14 97       	sbiw	r26, 0x04	; 4
    330e:	0f 90       	pop	r0
    3310:	cf 91       	pop	r28
    3312:	df 91       	pop	r29
    3314:	1f 91       	pop	r17
    3316:	0f 91       	pop	r16
    3318:	08 95       	ret

0000331a <_ZN6StringC2Ec>:
  getBuffer( _length = value._length );
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
}

String::String( const char value )
    331a:	0f 93       	push	r16
    331c:	1f 93       	push	r17
    331e:	df 93       	push	r29
    3320:	cf 93       	push	r28
    3322:	0f 92       	push	r0
    3324:	cd b7       	in	r28, 0x3d	; 61
    3326:	de b7       	in	r29, 0x3e	; 62
    3328:	8c 01       	movw	r16, r24
{
  _length = 1;
    332a:	81 e0       	ldi	r24, 0x01	; 1
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	d8 01       	movw	r26, r16
    3330:	15 96       	adiw	r26, 0x05	; 5
    3332:	9c 93       	st	X, r25
    3334:	8e 93       	st	-X, r24
    3336:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3338:	13 96       	adiw	r26, 0x03	; 3
    333a:	9c 93       	st	X, r25
    333c:	8e 93       	st	-X, r24
    333e:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    3340:	82 e0       	ldi	r24, 0x02	; 2
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	69 83       	std	Y+1, r22	; 0x01
    3346:	0e 94 75 2b 	call	0x56ea	; 0x56ea <malloc>
    334a:	fc 01       	movw	r30, r24
    334c:	d8 01       	movw	r26, r16
    334e:	11 96       	adiw	r26, 0x01	; 1
    3350:	9c 93       	st	X, r25
    3352:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3354:	69 81       	ldd	r22, Y+1	; 0x01
    3356:	00 97       	sbiw	r24, 0x00	; 0
    3358:	61 f0       	breq	.+24     	; 0x3372 <_ZN6StringC2Ec+0x58>
  getBuffer(1);
  if ( _buffer != NULL ) {
    _buffer[0] = value;
    335a:	60 83       	st	Z, r22
    _buffer[1] = 0;
    335c:	d8 01       	movw	r26, r16
    335e:	ed 91       	ld	r30, X+
    3360:	fc 91       	ld	r31, X
    3362:	11 97       	sbiw	r26, 0x01	; 1
    3364:	11 82       	std	Z+1, r1	; 0x01
  }
}
    3366:	0f 90       	pop	r0
    3368:	cf 91       	pop	r28
    336a:	df 91       	pop	r29
    336c:	1f 91       	pop	r17
    336e:	0f 91       	pop	r16
    3370:	08 95       	ret
    3372:	13 96       	adiw	r26, 0x03	; 3
    3374:	1c 92       	st	X, r1
    3376:	1e 92       	st	-X, r1
    3378:	12 97       	sbiw	r26, 0x02	; 2
    337a:	15 96       	adiw	r26, 0x05	; 5
    337c:	1c 92       	st	X, r1
    337e:	1e 92       	st	-X, r1
    3380:	14 97       	sbiw	r26, 0x04	; 4
    3382:	0f 90       	pop	r0
    3384:	cf 91       	pop	r28
    3386:	df 91       	pop	r29
    3388:	1f 91       	pop	r17
    338a:	0f 91       	pop	r16
    338c:	08 95       	ret

0000338e <_ZN6StringC1ERKS_>:
  getBuffer( _length = strlen( value ) );
  if ( _buffer != NULL )
    strcpy( _buffer, value );
}

String::String( const String &value )
    338e:	0f 93       	push	r16
    3390:	1f 93       	push	r17
    3392:	cf 93       	push	r28
    3394:	df 93       	push	r29
    3396:	ec 01       	movw	r28, r24
    3398:	8b 01       	movw	r16, r22
{
  getBuffer( _length = value._length );
    339a:	fb 01       	movw	r30, r22
    339c:	84 81       	ldd	r24, Z+4	; 0x04
    339e:	95 81       	ldd	r25, Z+5	; 0x05
    33a0:	9d 83       	std	Y+5, r25	; 0x05
    33a2:	8c 83       	std	Y+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    33a4:	9b 83       	std	Y+3, r25	; 0x03
    33a6:	8a 83       	std	Y+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    33a8:	01 96       	adiw	r24, 0x01	; 1
    33aa:	0e 94 75 2b 	call	0x56ea	; 0x56ea <malloc>
    33ae:	99 83       	std	Y+1, r25	; 0x01
    33b0:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    33b2:	00 97       	sbiw	r24, 0x00	; 0
    33b4:	51 f0       	breq	.+20     	; 0x33ca <_ZN6StringC1ERKS_+0x3c>
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
    33b6:	f8 01       	movw	r30, r16
    33b8:	60 81       	ld	r22, Z
    33ba:	71 81       	ldd	r23, Z+1	; 0x01
    33bc:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <strcpy>
}
    33c0:	df 91       	pop	r29
    33c2:	cf 91       	pop	r28
    33c4:	1f 91       	pop	r17
    33c6:	0f 91       	pop	r16
    33c8:	08 95       	ret
    33ca:	1b 82       	std	Y+3, r1	; 0x03
    33cc:	1a 82       	std	Y+2, r1	; 0x02
    33ce:	1d 82       	std	Y+5, r1	; 0x05
    33d0:	1c 82       	std	Y+4, r1	; 0x04
    33d2:	df 91       	pop	r29
    33d4:	cf 91       	pop	r28
    33d6:	1f 91       	pop	r17
    33d8:	0f 91       	pop	r16
    33da:	08 95       	ret

000033dc <_ZN6StringC2ERKS_>:
  getBuffer( _length = strlen( value ) );
  if ( _buffer != NULL )
    strcpy( _buffer, value );
}

String::String( const String &value )
    33dc:	0f 93       	push	r16
    33de:	1f 93       	push	r17
    33e0:	cf 93       	push	r28
    33e2:	df 93       	push	r29
    33e4:	ec 01       	movw	r28, r24
    33e6:	8b 01       	movw	r16, r22
{
  getBuffer( _length = value._length );
    33e8:	fb 01       	movw	r30, r22
    33ea:	84 81       	ldd	r24, Z+4	; 0x04
    33ec:	95 81       	ldd	r25, Z+5	; 0x05
    33ee:	9d 83       	std	Y+5, r25	; 0x05
    33f0:	8c 83       	std	Y+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    33f2:	9b 83       	std	Y+3, r25	; 0x03
    33f4:	8a 83       	std	Y+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    33f6:	01 96       	adiw	r24, 0x01	; 1
    33f8:	0e 94 75 2b 	call	0x56ea	; 0x56ea <malloc>
    33fc:	99 83       	std	Y+1, r25	; 0x01
    33fe:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3400:	00 97       	sbiw	r24, 0x00	; 0
    3402:	51 f0       	breq	.+20     	; 0x3418 <_ZN6StringC2ERKS_+0x3c>
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
    3404:	f8 01       	movw	r30, r16
    3406:	60 81       	ld	r22, Z
    3408:	71 81       	ldd	r23, Z+1	; 0x01
    340a:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <strcpy>
}
    340e:	df 91       	pop	r29
    3410:	cf 91       	pop	r28
    3412:	1f 91       	pop	r17
    3414:	0f 91       	pop	r16
    3416:	08 95       	ret
    3418:	1b 82       	std	Y+3, r1	; 0x03
    341a:	1a 82       	std	Y+2, r1	; 0x02
    341c:	1d 82       	std	Y+5, r1	; 0x05
    341e:	1c 82       	std	Y+4, r1	; 0x04
    3420:	df 91       	pop	r29
    3422:	cf 91       	pop	r28
    3424:	1f 91       	pop	r17
    3426:	0f 91       	pop	r16
    3428:	08 95       	ret

0000342a <_ZN6StringC1Emi>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned long value, const int base )
    342a:	ef 92       	push	r14
    342c:	ff 92       	push	r15
    342e:	0f 93       	push	r16
    3430:	1f 93       	push	r17
    3432:	df 93       	push	r29
    3434:	cf 93       	push	r28
    3436:	cd b7       	in	r28, 0x3d	; 61
    3438:	de b7       	in	r29, 0x3e	; 62
    343a:	a1 97       	sbiw	r28, 0x21	; 33
    343c:	0f b6       	in	r0, 0x3f	; 63
    343e:	f8 94       	cli
    3440:	de bf       	out	0x3e, r29	; 62
    3442:	0f be       	out	0x3f, r0	; 63
    3444:	cd bf       	out	0x3d, r28	; 61
    3446:	7c 01       	movw	r14, r24
    3448:	cb 01       	movw	r24, r22
    344a:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ultoa(value, buf, 10);
    344c:	8e 01       	movw	r16, r28
    344e:	0f 5f       	subi	r16, 0xFF	; 255
    3450:	1f 4f       	sbci	r17, 0xFF	; 255
    3452:	a8 01       	movw	r20, r16
    3454:	2a e0       	ldi	r18, 0x0A	; 10
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <ultoa>
  getBuffer( _length = strlen(buf) );
    345c:	f8 01       	movw	r30, r16
    345e:	01 90       	ld	r0, Z+
    3460:	00 20       	and	r0, r0
    3462:	e9 f7       	brne	.-6      	; 0x345e <_ZN6StringC1Emi+0x34>
    3464:	cf 01       	movw	r24, r30
    3466:	01 97       	sbiw	r24, 0x01	; 1
    3468:	80 1b       	sub	r24, r16
    346a:	91 0b       	sbc	r25, r17
    346c:	f7 01       	movw	r30, r14
    346e:	95 83       	std	Z+5, r25	; 0x05
    3470:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3472:	93 83       	std	Z+3, r25	; 0x03
    3474:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3476:	01 96       	adiw	r24, 0x01	; 1
    3478:	0e 94 75 2b 	call	0x56ea	; 0x56ea <malloc>
    347c:	f7 01       	movw	r30, r14
    347e:	91 83       	std	Z+1, r25	; 0x01
    3480:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3482:	00 97       	sbiw	r24, 0x00	; 0
    3484:	81 f0       	breq	.+32     	; 0x34a6 <_ZN6StringC1Emi+0x7c>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    3486:	b8 01       	movw	r22, r16
    3488:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <strcpy>
}
    348c:	a1 96       	adiw	r28, 0x21	; 33
    348e:	0f b6       	in	r0, 0x3f	; 63
    3490:	f8 94       	cli
    3492:	de bf       	out	0x3e, r29	; 62
    3494:	0f be       	out	0x3f, r0	; 63
    3496:	cd bf       	out	0x3d, r28	; 61
    3498:	cf 91       	pop	r28
    349a:	df 91       	pop	r29
    349c:	1f 91       	pop	r17
    349e:	0f 91       	pop	r16
    34a0:	ff 90       	pop	r15
    34a2:	ef 90       	pop	r14
    34a4:	08 95       	ret
    34a6:	13 82       	std	Z+3, r1	; 0x03
    34a8:	12 82       	std	Z+2, r1	; 0x02
    34aa:	15 82       	std	Z+5, r1	; 0x05
    34ac:	14 82       	std	Z+4, r1	; 0x04
    34ae:	ee cf       	rjmp	.-36     	; 0x348c <_ZN6StringC1Emi+0x62>

000034b0 <_ZN6StringC2Emi>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned long value, const int base )
    34b0:	ef 92       	push	r14
    34b2:	ff 92       	push	r15
    34b4:	0f 93       	push	r16
    34b6:	1f 93       	push	r17
    34b8:	df 93       	push	r29
    34ba:	cf 93       	push	r28
    34bc:	cd b7       	in	r28, 0x3d	; 61
    34be:	de b7       	in	r29, 0x3e	; 62
    34c0:	a1 97       	sbiw	r28, 0x21	; 33
    34c2:	0f b6       	in	r0, 0x3f	; 63
    34c4:	f8 94       	cli
    34c6:	de bf       	out	0x3e, r29	; 62
    34c8:	0f be       	out	0x3f, r0	; 63
    34ca:	cd bf       	out	0x3d, r28	; 61
    34cc:	7c 01       	movw	r14, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ultoa(value, buf, 10);
    34d2:	8e 01       	movw	r16, r28
    34d4:	0f 5f       	subi	r16, 0xFF	; 255
    34d6:	1f 4f       	sbci	r17, 0xFF	; 255
    34d8:	a8 01       	movw	r20, r16
    34da:	2a e0       	ldi	r18, 0x0A	; 10
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <ultoa>
  getBuffer( _length = strlen(buf) );
    34e2:	f8 01       	movw	r30, r16
    34e4:	01 90       	ld	r0, Z+
    34e6:	00 20       	and	r0, r0
    34e8:	e9 f7       	brne	.-6      	; 0x34e4 <_ZN6StringC2Emi+0x34>
    34ea:	cf 01       	movw	r24, r30
    34ec:	01 97       	sbiw	r24, 0x01	; 1
    34ee:	80 1b       	sub	r24, r16
    34f0:	91 0b       	sbc	r25, r17
    34f2:	f7 01       	movw	r30, r14
    34f4:	95 83       	std	Z+5, r25	; 0x05
    34f6:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    34f8:	93 83       	std	Z+3, r25	; 0x03
    34fa:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    34fc:	01 96       	adiw	r24, 0x01	; 1
    34fe:	0e 94 75 2b 	call	0x56ea	; 0x56ea <malloc>
    3502:	f7 01       	movw	r30, r14
    3504:	91 83       	std	Z+1, r25	; 0x01
    3506:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3508:	00 97       	sbiw	r24, 0x00	; 0
    350a:	81 f0       	breq	.+32     	; 0x352c <_ZN6StringC2Emi+0x7c>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    350c:	b8 01       	movw	r22, r16
    350e:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <strcpy>
}
    3512:	a1 96       	adiw	r28, 0x21	; 33
    3514:	0f b6       	in	r0, 0x3f	; 63
    3516:	f8 94       	cli
    3518:	de bf       	out	0x3e, r29	; 62
    351a:	0f be       	out	0x3f, r0	; 63
    351c:	cd bf       	out	0x3d, r28	; 61
    351e:	cf 91       	pop	r28
    3520:	df 91       	pop	r29
    3522:	1f 91       	pop	r17
    3524:	0f 91       	pop	r16
    3526:	ff 90       	pop	r15
    3528:	ef 90       	pop	r14
    352a:	08 95       	ret
    352c:	13 82       	std	Z+3, r1	; 0x03
    352e:	12 82       	std	Z+2, r1	; 0x02
    3530:	15 82       	std	Z+5, r1	; 0x05
    3532:	14 82       	std	Z+4, r1	; 0x04
    3534:	ee cf       	rjmp	.-36     	; 0x3512 <_ZN6StringC2Emi+0x62>

00003536 <_ZN6StringC1Eji>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned int value, const int base )
    3536:	ef 92       	push	r14
    3538:	ff 92       	push	r15
    353a:	0f 93       	push	r16
    353c:	1f 93       	push	r17
    353e:	df 93       	push	r29
    3540:	cf 93       	push	r28
    3542:	cd b7       	in	r28, 0x3d	; 61
    3544:	de b7       	in	r29, 0x3e	; 62
    3546:	a1 97       	sbiw	r28, 0x21	; 33
    3548:	0f b6       	in	r0, 0x3f	; 63
    354a:	f8 94       	cli
    354c:	de bf       	out	0x3e, r29	; 62
    354e:	0f be       	out	0x3f, r0	; 63
    3550:	cd bf       	out	0x3d, r28	; 61
    3552:	7c 01       	movw	r14, r24
    3554:	9a 01       	movw	r18, r20
{
  char buf[33];   
  ultoa((unsigned long)value, buf, base);
    3556:	80 e0       	ldi	r24, 0x00	; 0
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	8e 01       	movw	r16, r28
    355c:	0f 5f       	subi	r16, 0xFF	; 255
    355e:	1f 4f       	sbci	r17, 0xFF	; 255
    3560:	a8 01       	movw	r20, r16
    3562:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <ultoa>
  getBuffer( _length = strlen(buf) );
    3566:	f8 01       	movw	r30, r16
    3568:	01 90       	ld	r0, Z+
    356a:	00 20       	and	r0, r0
    356c:	e9 f7       	brne	.-6      	; 0x3568 <_ZN6StringC1Eji+0x32>
    356e:	cf 01       	movw	r24, r30
    3570:	01 97       	sbiw	r24, 0x01	; 1
    3572:	80 1b       	sub	r24, r16
    3574:	91 0b       	sbc	r25, r17
    3576:	f7 01       	movw	r30, r14
    3578:	95 83       	std	Z+5, r25	; 0x05
    357a:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    357c:	93 83       	std	Z+3, r25	; 0x03
    357e:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3580:	01 96       	adiw	r24, 0x01	; 1
    3582:	0e 94 75 2b 	call	0x56ea	; 0x56ea <malloc>
    3586:	f7 01       	movw	r30, r14
    3588:	91 83       	std	Z+1, r25	; 0x01
    358a:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    358c:	00 97       	sbiw	r24, 0x00	; 0
    358e:	81 f0       	breq	.+32     	; 0x35b0 <_ZN6StringC1Eji+0x7a>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    3590:	b8 01       	movw	r22, r16
    3592:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <strcpy>
}
    3596:	a1 96       	adiw	r28, 0x21	; 33
    3598:	0f b6       	in	r0, 0x3f	; 63
    359a:	f8 94       	cli
    359c:	de bf       	out	0x3e, r29	; 62
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	cd bf       	out	0x3d, r28	; 61
    35a2:	cf 91       	pop	r28
    35a4:	df 91       	pop	r29
    35a6:	1f 91       	pop	r17
    35a8:	0f 91       	pop	r16
    35aa:	ff 90       	pop	r15
    35ac:	ef 90       	pop	r14
    35ae:	08 95       	ret
    35b0:	13 82       	std	Z+3, r1	; 0x03
    35b2:	12 82       	std	Z+2, r1	; 0x02
    35b4:	15 82       	std	Z+5, r1	; 0x05
    35b6:	14 82       	std	Z+4, r1	; 0x04
    35b8:	ee cf       	rjmp	.-36     	; 0x3596 <_ZN6StringC1Eji+0x60>

000035ba <_ZN6StringC2Eji>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned int value, const int base )
    35ba:	ef 92       	push	r14
    35bc:	ff 92       	push	r15
    35be:	0f 93       	push	r16
    35c0:	1f 93       	push	r17
    35c2:	df 93       	push	r29
    35c4:	cf 93       	push	r28
    35c6:	cd b7       	in	r28, 0x3d	; 61
    35c8:	de b7       	in	r29, 0x3e	; 62
    35ca:	a1 97       	sbiw	r28, 0x21	; 33
    35cc:	0f b6       	in	r0, 0x3f	; 63
    35ce:	f8 94       	cli
    35d0:	de bf       	out	0x3e, r29	; 62
    35d2:	0f be       	out	0x3f, r0	; 63
    35d4:	cd bf       	out	0x3d, r28	; 61
    35d6:	7c 01       	movw	r14, r24
    35d8:	9a 01       	movw	r18, r20
{
  char buf[33];   
  ultoa((unsigned long)value, buf, base);
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	8e 01       	movw	r16, r28
    35e0:	0f 5f       	subi	r16, 0xFF	; 255
    35e2:	1f 4f       	sbci	r17, 0xFF	; 255
    35e4:	a8 01       	movw	r20, r16
    35e6:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <ultoa>
  getBuffer( _length = strlen(buf) );
    35ea:	f8 01       	movw	r30, r16
    35ec:	01 90       	ld	r0, Z+
    35ee:	00 20       	and	r0, r0
    35f0:	e9 f7       	brne	.-6      	; 0x35ec <_ZN6StringC2Eji+0x32>
    35f2:	cf 01       	movw	r24, r30
    35f4:	01 97       	sbiw	r24, 0x01	; 1
    35f6:	80 1b       	sub	r24, r16
    35f8:	91 0b       	sbc	r25, r17
    35fa:	f7 01       	movw	r30, r14
    35fc:	95 83       	std	Z+5, r25	; 0x05
    35fe:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3600:	93 83       	std	Z+3, r25	; 0x03
    3602:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3604:	01 96       	adiw	r24, 0x01	; 1
    3606:	0e 94 75 2b 	call	0x56ea	; 0x56ea <malloc>
    360a:	f7 01       	movw	r30, r14
    360c:	91 83       	std	Z+1, r25	; 0x01
    360e:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3610:	00 97       	sbiw	r24, 0x00	; 0
    3612:	81 f0       	breq	.+32     	; 0x3634 <_ZN6StringC2Eji+0x7a>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    3614:	b8 01       	movw	r22, r16
    3616:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <strcpy>
}
    361a:	a1 96       	adiw	r28, 0x21	; 33
    361c:	0f b6       	in	r0, 0x3f	; 63
    361e:	f8 94       	cli
    3620:	de bf       	out	0x3e, r29	; 62
    3622:	0f be       	out	0x3f, r0	; 63
    3624:	cd bf       	out	0x3d, r28	; 61
    3626:	cf 91       	pop	r28
    3628:	df 91       	pop	r29
    362a:	1f 91       	pop	r17
    362c:	0f 91       	pop	r16
    362e:	ff 90       	pop	r15
    3630:	ef 90       	pop	r14
    3632:	08 95       	ret
    3634:	13 82       	std	Z+3, r1	; 0x03
    3636:	12 82       	std	Z+2, r1	; 0x02
    3638:	15 82       	std	Z+5, r1	; 0x05
    363a:	14 82       	std	Z+4, r1	; 0x04
    363c:	ee cf       	rjmp	.-36     	; 0x361a <_ZN6StringC2Eji+0x60>

0000363e <_ZN6StringC1EPKc>:
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    363e:	0f 93       	push	r16
    3640:	1f 93       	push	r17
    3642:	cf 93       	push	r28
    3644:	df 93       	push	r29
    3646:	ec 01       	movw	r28, r24
    3648:	8b 01       	movw	r16, r22
{
  if ( value == NULL )
    364a:	61 15       	cp	r22, r1
    364c:	71 05       	cpc	r23, r1
    364e:	21 f1       	breq	.+72     	; 0x3698 <_ZN6StringC1EPKc+0x5a>
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    3650:	fb 01       	movw	r30, r22
    3652:	01 90       	ld	r0, Z+
    3654:	00 20       	and	r0, r0
    3656:	e9 f7       	brne	.-6      	; 0x3652 <_ZN6StringC1EPKc+0x14>
    3658:	31 97       	sbiw	r30, 0x01	; 1
    365a:	e6 1b       	sub	r30, r22
    365c:	f7 0b       	sbc	r31, r23
    365e:	cf 01       	movw	r24, r30
    3660:	01 96       	adiw	r24, 0x01	; 1
{
  if ( value == NULL )
    value = "";
  getBuffer( _length = strlen( value ) );
    3662:	fd 83       	std	Y+5, r31	; 0x05
    3664:	ec 83       	std	Y+4, r30	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3666:	fb 83       	std	Y+3, r31	; 0x03
    3668:	ea 83       	std	Y+2, r30	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    366a:	0e 94 75 2b 	call	0x56ea	; 0x56ea <malloc>
    366e:	99 83       	std	Y+1, r25	; 0x01
    3670:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3672:	00 97       	sbiw	r24, 0x00	; 0
    3674:	41 f0       	breq	.+16     	; 0x3686 <_ZN6StringC1EPKc+0x48>
  if ( _buffer != NULL )
    strcpy( _buffer, value );
    3676:	b8 01       	movw	r22, r16
    3678:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <strcpy>
}
    367c:	df 91       	pop	r29
    367e:	cf 91       	pop	r28
    3680:	1f 91       	pop	r17
    3682:	0f 91       	pop	r16
    3684:	08 95       	ret
    3686:	1b 82       	std	Y+3, r1	; 0x03
    3688:	1a 82       	std	Y+2, r1	; 0x02
    368a:	1d 82       	std	Y+5, r1	; 0x05
    368c:	1c 82       	std	Y+4, r1	; 0x04
    368e:	df 91       	pop	r29
    3690:	cf 91       	pop	r28
    3692:	1f 91       	pop	r17
    3694:	0f 91       	pop	r16
    3696:	08 95       	ret
#include "WString.h"


String::String( const char *value )
{
  if ( value == NULL )
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	e0 e0       	ldi	r30, 0x00	; 0
    369e:	f0 e0       	ldi	r31, 0x00	; 0
    36a0:	05 e9       	ldi	r16, 0x95	; 149
    36a2:	11 e0       	ldi	r17, 0x01	; 1
    36a4:	de cf       	rjmp	.-68     	; 0x3662 <_ZN6StringC1EPKc+0x24>

000036a6 <_ZNK6String11toUpperCaseEv>:
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
  return temp;
}

String String::toUpperCase() const
{
    36a6:	af 92       	push	r10
    36a8:	bf 92       	push	r11
    36aa:	cf 92       	push	r12
    36ac:	df 92       	push	r13
    36ae:	ef 92       	push	r14
    36b0:	ff 92       	push	r15
    36b2:	0f 93       	push	r16
    36b4:	1f 93       	push	r17
    36b6:	cf 93       	push	r28
    36b8:	df 93       	push	r29
    36ba:	7c 01       	movw	r14, r24
    36bc:	8b 01       	movw	r16, r22
  String temp = _buffer;
    36be:	c8 2e       	mov	r12, r24
    36c0:	e6 01       	movw	r28, r12
    36c2:	6e 01       	movw	r12, r28
    36c4:	df 2c       	mov	r13, r15
    36c6:	e6 01       	movw	r28, r12
    36c8:	fb 01       	movw	r30, r22
    36ca:	60 81       	ld	r22, Z
    36cc:	71 81       	ldd	r23, Z+1	; 0x01
    36ce:	c6 01       	movw	r24, r12
    36d0:	0e 94 1f 1b 	call	0x363e	; 0x363e <_ZN6StringC1EPKc>

  for ( unsigned int i = 0; i < _length; i++ )
    36d4:	f8 01       	movw	r30, r16
    36d6:	84 81       	ldd	r24, Z+4	; 0x04
    36d8:	95 81       	ldd	r25, Z+5	; 0x05
    36da:	00 97       	sbiw	r24, 0x00	; 0
    36dc:	b1 f0       	breq	.+44     	; 0x370a <_ZNK6String11toUpperCaseEv+0x64>
    36de:	aa 24       	eor	r10, r10
    36e0:	bb 24       	eor	r11, r11
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
    36e2:	c8 80       	ld	r12, Y
    36e4:	d9 80       	ldd	r13, Y+1	; 0x01
    36e6:	ca 0c       	add	r12, r10
    36e8:	db 1c       	adc	r13, r11
    36ea:	f6 01       	movw	r30, r12
    36ec:	80 81       	ld	r24, Z
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <toupper>
    36f4:	f6 01       	movw	r30, r12
    36f6:	80 83       	st	Z, r24

String String::toUpperCase() const
{
  String temp = _buffer;

  for ( unsigned int i = 0; i < _length; i++ )
    36f8:	08 94       	sec
    36fa:	a1 1c       	adc	r10, r1
    36fc:	b1 1c       	adc	r11, r1
    36fe:	f8 01       	movw	r30, r16
    3700:	84 81       	ldd	r24, Z+4	; 0x04
    3702:	95 81       	ldd	r25, Z+5	; 0x05
    3704:	a8 16       	cp	r10, r24
    3706:	b9 06       	cpc	r11, r25
    3708:	60 f3       	brcs	.-40     	; 0x36e2 <_ZNK6String11toUpperCaseEv+0x3c>
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
  return temp;
}
    370a:	c7 01       	movw	r24, r14
    370c:	df 91       	pop	r29
    370e:	cf 91       	pop	r28
    3710:	1f 91       	pop	r17
    3712:	0f 91       	pop	r16
    3714:	ff 90       	pop	r15
    3716:	ef 90       	pop	r14
    3718:	df 90       	pop	r13
    371a:	cf 90       	pop	r12
    371c:	bf 90       	pop	r11
    371e:	af 90       	pop	r10
    3720:	08 95       	ret

00003722 <_ZNK6String11toLowerCaseEv>:
  _buffer[ right ] = temp;  //restore character
  return outPut;
}

String String::toLowerCase() const
{
    3722:	af 92       	push	r10
    3724:	bf 92       	push	r11
    3726:	cf 92       	push	r12
    3728:	df 92       	push	r13
    372a:	ef 92       	push	r14
    372c:	ff 92       	push	r15
    372e:	0f 93       	push	r16
    3730:	1f 93       	push	r17
    3732:	cf 93       	push	r28
    3734:	df 93       	push	r29
    3736:	7c 01       	movw	r14, r24
    3738:	8b 01       	movw	r16, r22
  String temp = _buffer;
    373a:	c8 2e       	mov	r12, r24
    373c:	e6 01       	movw	r28, r12
    373e:	6e 01       	movw	r12, r28
    3740:	df 2c       	mov	r13, r15
    3742:	e6 01       	movw	r28, r12
    3744:	fb 01       	movw	r30, r22
    3746:	60 81       	ld	r22, Z
    3748:	71 81       	ldd	r23, Z+1	; 0x01
    374a:	c6 01       	movw	r24, r12
    374c:	0e 94 1f 1b 	call	0x363e	; 0x363e <_ZN6StringC1EPKc>

  for ( unsigned int i = 0; i < _length; i++ )
    3750:	f8 01       	movw	r30, r16
    3752:	84 81       	ldd	r24, Z+4	; 0x04
    3754:	95 81       	ldd	r25, Z+5	; 0x05
    3756:	00 97       	sbiw	r24, 0x00	; 0
    3758:	b1 f0       	breq	.+44     	; 0x3786 <_ZNK6String11toLowerCaseEv+0x64>
    375a:	aa 24       	eor	r10, r10
    375c:	bb 24       	eor	r11, r11
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
    375e:	c8 80       	ld	r12, Y
    3760:	d9 80       	ldd	r13, Y+1	; 0x01
    3762:	ca 0c       	add	r12, r10
    3764:	db 1c       	adc	r13, r11
    3766:	f6 01       	movw	r30, r12
    3768:	80 81       	ld	r24, Z
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <tolower>
    3770:	f6 01       	movw	r30, r12
    3772:	80 83       	st	Z, r24

String String::toLowerCase() const
{
  String temp = _buffer;

  for ( unsigned int i = 0; i < _length; i++ )
    3774:	08 94       	sec
    3776:	a1 1c       	adc	r10, r1
    3778:	b1 1c       	adc	r11, r1
    377a:	f8 01       	movw	r30, r16
    377c:	84 81       	ldd	r24, Z+4	; 0x04
    377e:	95 81       	ldd	r25, Z+5	; 0x05
    3780:	a8 16       	cp	r10, r24
    3782:	b9 06       	cpc	r11, r25
    3784:	60 f3       	brcs	.-40     	; 0x375e <_ZNK6String11toLowerCaseEv+0x3c>
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
  return temp;
}
    3786:	c7 01       	movw	r24, r14
    3788:	df 91       	pop	r29
    378a:	cf 91       	pop	r28
    378c:	1f 91       	pop	r17
    378e:	0f 91       	pop	r16
    3790:	ff 90       	pop	r15
    3792:	ef 90       	pop	r14
    3794:	df 90       	pop	r13
    3796:	cf 90       	pop	r12
    3798:	bf 90       	pop	r11
    379a:	af 90       	pop	r10
    379c:	08 95       	ret

0000379e <_ZNK6String16equalsIgnoreCaseERKS_>:
{
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
}

boolean String::equalsIgnoreCase( const String &s2 ) const
{
    379e:	ef 92       	push	r14
    37a0:	ff 92       	push	r15
    37a2:	0f 93       	push	r16
    37a4:	1f 93       	push	r17
    37a6:	df 93       	push	r29
    37a8:	cf 93       	push	r28
    37aa:	cd b7       	in	r28, 0x3d	; 61
    37ac:	de b7       	in	r29, 0x3e	; 62
    37ae:	2d 97       	sbiw	r28, 0x0d	; 13
    37b0:	0f b6       	in	r0, 0x3f	; 63
    37b2:	f8 94       	cli
    37b4:	de bf       	out	0x3e, r29	; 62
    37b6:	0f be       	out	0x3f, r0	; 63
    37b8:	cd bf       	out	0x3d, r28	; 61
    37ba:	fc 01       	movw	r30, r24
    37bc:	8b 01       	movw	r16, r22
  if ( this == &s2 )
    37be:	86 17       	cp	r24, r22
    37c0:	97 07       	cpc	r25, r23
    37c2:	e9 f1       	breq	.+122    	; 0x383e <_ZNK6String16equalsIgnoreCaseERKS_+0xa0>
    return true; //1;
  else if ( _length != s2._length )
    37c4:	24 81       	ldd	r18, Z+4	; 0x04
    37c6:	35 81       	ldd	r19, Z+5	; 0x05
    37c8:	db 01       	movw	r26, r22
    37ca:	14 96       	adiw	r26, 0x04	; 4
    37cc:	8d 91       	ld	r24, X+
    37ce:	9c 91       	ld	r25, X
    37d0:	15 97       	sbiw	r26, 0x05	; 5
    37d2:	28 17       	cp	r18, r24
    37d4:	39 07       	cpc	r19, r25
    37d6:	79 f0       	breq	.+30     	; 0x37f6 <_ZNK6String16equalsIgnoreCaseERKS_+0x58>
    37d8:	20 e0       	ldi	r18, 0x00	; 0
    return false; //0;

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}
    37da:	82 2f       	mov	r24, r18
    37dc:	2d 96       	adiw	r28, 0x0d	; 13
    37de:	0f b6       	in	r0, 0x3f	; 63
    37e0:	f8 94       	cli
    37e2:	de bf       	out	0x3e, r29	; 62
    37e4:	0f be       	out	0x3f, r0	; 63
    37e6:	cd bf       	out	0x3d, r28	; 61
    37e8:	cf 91       	pop	r28
    37ea:	df 91       	pop	r29
    37ec:	1f 91       	pop	r17
    37ee:	0f 91       	pop	r16
    37f0:	ff 90       	pop	r15
    37f2:	ef 90       	pop	r14
    37f4:	08 95       	ret
  if ( this == &s2 )
    return true; //1;
  else if ( _length != s2._length )
    return false; //0;

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
    37f6:	ce 01       	movw	r24, r28
    37f8:	01 96       	adiw	r24, 0x01	; 1
    37fa:	bf 01       	movw	r22, r30
    37fc:	0e 94 91 1b 	call	0x3722	; 0x3722 <_ZNK6String11toLowerCaseEv>
    3800:	e9 80       	ldd	r14, Y+1	; 0x01
    3802:	fa 80       	ldd	r15, Y+2	; 0x02
    3804:	ce 01       	movw	r24, r28
    3806:	07 96       	adiw	r24, 0x07	; 7
    3808:	b8 01       	movw	r22, r16
    380a:	0e 94 91 1b 	call	0x3722	; 0x3722 <_ZNK6String11toLowerCaseEv>
    380e:	0f 81       	ldd	r16, Y+7	; 0x07
    3810:	18 85       	ldd	r17, Y+8	; 0x08
    3812:	c7 01       	movw	r24, r14
    3814:	b8 01       	movw	r22, r16
    3816:	0e 94 e4 2d 	call	0x5bc8	; 0x5bc8 <strcmp>
    381a:	20 e0       	ldi	r18, 0x00	; 0
    381c:	00 97       	sbiw	r24, 0x00	; 0
    381e:	09 f4       	brne	.+2      	; 0x3822 <_ZNK6String16equalsIgnoreCaseERKS_+0x84>
    3820:	21 e0       	ldi	r18, 0x01	; 1
    String( const unsigned char );
    String( const int, const int base=10);
    String( const unsigned int, const int base=10 );
    String( const long, const int base=10 );
    String( const unsigned long, const int base=10 );
    ~String() { free(_buffer); _length = _capacity = 0;}     //added _length = _capacity = 0;
    3822:	c8 01       	movw	r24, r16
    3824:	2d 87       	std	Y+13, r18	; 0x0d
    3826:	0e 94 17 2c 	call	0x582e	; 0x582e <free>
    382a:	1a 86       	std	Y+10, r1	; 0x0a
    382c:	19 86       	std	Y+9, r1	; 0x09
    382e:	1c 86       	std	Y+12, r1	; 0x0c
    3830:	1b 86       	std	Y+11, r1	; 0x0b
    3832:	89 81       	ldd	r24, Y+1	; 0x01
    3834:	9a 81       	ldd	r25, Y+2	; 0x02
    3836:	0e 94 17 2c 	call	0x582e	; 0x582e <free>
    383a:	2d 85       	ldd	r18, Y+13	; 0x0d
    383c:	ce cf       	rjmp	.-100    	; 0x37da <_ZNK6String16equalsIgnoreCaseERKS_+0x3c>
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
}

boolean String::equalsIgnoreCase( const String &s2 ) const
{
  if ( this == &s2 )
    383e:	21 e0       	ldi	r18, 0x01	; 1
    3840:	cc cf       	rjmp	.-104    	; 0x37da <_ZNK6String16equalsIgnoreCaseERKS_+0x3c>

00003842 <_ZNK6String9substringEjj>:
{
  return substring( left, _length );
}

String String::substring( unsigned int left, unsigned int right ) const
{
    3842:	df 92       	push	r13
    3844:	ef 92       	push	r14
    3846:	ff 92       	push	r15
    3848:	0f 93       	push	r16
    384a:	1f 93       	push	r17
    384c:	cf 93       	push	r28
    384e:	df 93       	push	r29
    3850:	8c 01       	movw	r16, r24
    3852:	eb 01       	movw	r28, r22
    3854:	79 01       	movw	r14, r18
  if ( left > right )
    3856:	24 17       	cp	r18, r20
    3858:	35 07       	cpc	r19, r21
    385a:	30 f4       	brcc	.+12     	; 0x3868 <_ZNK6String9substringEjj+0x26>
    385c:	34 2f       	mov	r19, r20
    385e:	25 2f       	mov	r18, r21
    3860:	a7 01       	movw	r20, r14
    3862:	c9 01       	movw	r24, r18
    3864:	e9 2e       	mov	r14, r25
    3866:	f8 2e       	mov	r15, r24
    3868:	8c 81       	ldd	r24, Y+4	; 0x04
    386a:	9d 81       	ldd	r25, Y+5	; 0x05
    386c:	8e 15       	cp	r24, r14
    386e:	9f 05       	cpc	r25, r15
    3870:	08 f4       	brcc	.+2      	; 0x3874 <_ZNK6String9substringEjj+0x32>
    3872:	7c 01       	movw	r14, r24
  if ( right > _length )
  {
    right = _length;
  } 

  char temp = _buffer[ right ];  // save the replaced character
    3874:	e8 81       	ld	r30, Y
    3876:	f9 81       	ldd	r31, Y+1	; 0x01
    3878:	ee 0d       	add	r30, r14
    387a:	ff 1d       	adc	r31, r15
    387c:	d0 80       	ld	r13, Z
  _buffer[ right ] = '\0';	
    387e:	10 82       	st	Z, r1
  String outPut = ( _buffer + left );  // pointer arithmetic
    3880:	68 81       	ld	r22, Y
    3882:	79 81       	ldd	r23, Y+1	; 0x01
    3884:	64 0f       	add	r22, r20
    3886:	75 1f       	adc	r23, r21
    3888:	c8 01       	movw	r24, r16
    388a:	0e 94 1f 1b 	call	0x363e	; 0x363e <_ZN6StringC1EPKc>
  _buffer[ right ] = temp;  //restore character
    388e:	e8 81       	ld	r30, Y
    3890:	f9 81       	ldd	r31, Y+1	; 0x01
    3892:	ee 0d       	add	r30, r14
    3894:	ff 1d       	adc	r31, r15
    3896:	d0 82       	st	Z, r13
  return outPut;
}
    3898:	c8 01       	movw	r24, r16
    389a:	df 91       	pop	r29
    389c:	cf 91       	pop	r28
    389e:	1f 91       	pop	r17
    38a0:	0f 91       	pop	r16
    38a2:	ff 90       	pop	r15
    38a4:	ef 90       	pop	r14
    38a6:	df 90       	pop	r13
    38a8:	08 95       	ret

000038aa <_ZNK6String9substringEj>:

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
}

String String::substring( unsigned int left ) const
{
    38aa:	cf 93       	push	r28
    38ac:	df 93       	push	r29
    38ae:	ec 01       	movw	r28, r24
  return substring( left, _length );
    38b0:	fb 01       	movw	r30, r22
    38b2:	24 81       	ldd	r18, Z+4	; 0x04
    38b4:	35 81       	ldd	r19, Z+5	; 0x05
    38b6:	0e 94 21 1c 	call	0x3842	; 0x3842 <_ZNK6String9substringEjj>
}
    38ba:	ce 01       	movw	r24, r28
    38bc:	df 91       	pop	r29
    38be:	cf 91       	pop	r28
    38c0:	08 95       	ret

000038c2 <_ZNK6String11lastIndexOfERKS_j>:
{
  return lastIndexOf( s2, _length - s2._length );
}

int String::lastIndexOf( const String &s2, unsigned int fromIndex ) const
{
    38c2:	8f 92       	push	r8
    38c4:	9f 92       	push	r9
    38c6:	af 92       	push	r10
    38c8:	bf 92       	push	r11
    38ca:	cf 92       	push	r12
    38cc:	df 92       	push	r13
    38ce:	ef 92       	push	r14
    38d0:	ff 92       	push	r15
    38d2:	0f 93       	push	r16
    38d4:	1f 93       	push	r17
    38d6:	df 93       	push	r29
    38d8:	cf 93       	push	r28
    38da:	00 d0       	rcall	.+0      	; 0x38dc <_ZNK6String11lastIndexOfERKS_j+0x1a>
    38dc:	00 d0       	rcall	.+0      	; 0x38de <_ZNK6String11lastIndexOfERKS_j+0x1c>
    38de:	00 d0       	rcall	.+0      	; 0x38e0 <_ZNK6String11lastIndexOfERKS_j+0x1e>
    38e0:	cd b7       	in	r28, 0x3d	; 61
    38e2:	de b7       	in	r29, 0x3e	; 62
    38e4:	6c 01       	movw	r12, r24
    38e6:	7b 01       	movw	r14, r22
  // check for empty strings
  if ( s2._length == 0 || s2._length - 1 > fromIndex || fromIndex >= _length )
    38e8:	db 01       	movw	r26, r22
    38ea:	14 96       	adiw	r26, 0x04	; 4
    38ec:	8d 91       	ld	r24, X+
    38ee:	9c 91       	ld	r25, X
    38f0:	15 97       	sbiw	r26, 0x05	; 5
    38f2:	00 97       	sbiw	r24, 0x00	; 0
    38f4:	b1 f4       	brne	.+44     	; 0x3922 <_ZNK6String11lastIndexOfERKS_j+0x60>
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    38f6:	0f ef       	ldi	r16, 0xFF	; 255
    38f8:	1f ef       	ldi	r17, 0xFF	; 255
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    return i;
  }
  return -1;
}
    38fa:	c8 01       	movw	r24, r16
    38fc:	26 96       	adiw	r28, 0x06	; 6
    38fe:	0f b6       	in	r0, 0x3f	; 63
    3900:	f8 94       	cli
    3902:	de bf       	out	0x3e, r29	; 62
    3904:	0f be       	out	0x3f, r0	; 63
    3906:	cd bf       	out	0x3d, r28	; 61
    3908:	cf 91       	pop	r28
    390a:	df 91       	pop	r29
    390c:	1f 91       	pop	r17
    390e:	0f 91       	pop	r16
    3910:	ff 90       	pop	r15
    3912:	ef 90       	pop	r14
    3914:	df 90       	pop	r13
    3916:	cf 90       	pop	r12
    3918:	bf 90       	pop	r11
    391a:	af 90       	pop	r10
    391c:	9f 90       	pop	r9
    391e:	8f 90       	pop	r8
    3920:	08 95       	ret
}

int String::lastIndexOf( const String &s2, unsigned int fromIndex ) const
{
  // check for empty strings
  if ( s2._length == 0 || s2._length - 1 > fromIndex || fromIndex >= _length )
    3922:	01 97       	sbiw	r24, 0x01	; 1
    3924:	48 17       	cp	r20, r24
    3926:	59 07       	cpc	r21, r25
    3928:	30 f3       	brcs	.-52     	; 0x38f6 <_ZNK6String11lastIndexOfERKS_j+0x34>
    392a:	f6 01       	movw	r30, r12
    392c:	84 81       	ldd	r24, Z+4	; 0x04
    392e:	95 81       	ldd	r25, Z+5	; 0x05
    3930:	48 17       	cp	r20, r24
    3932:	59 07       	cpc	r21, r25
    3934:	00 f7       	brcc	.-64     	; 0x38f6 <_ZNK6String11lastIndexOfERKS_j+0x34>
}

char String::operator[]( unsigned int index ) const
{
  // need to check for valid index, to do later
  return _buffer[ index ];
    3936:	ed 91       	ld	r30, X+
    3938:	fc 91       	ld	r31, X
    393a:	11 97       	sbiw	r26, 0x01	; 1
    393c:	90 80       	ld	r9, Z
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    393e:	8a 01       	movw	r16, r20
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    3940:	5e 01       	movw	r10, r28
    3942:	08 94       	sec
    3944:	a1 1c       	adc	r10, r1
    3946:	b1 1c       	adc	r11, r1
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    3948:	02 c0       	rjmp	.+4      	; 0x394e <_ZNK6String11lastIndexOfERKS_j+0x8c>
    394a:	01 50       	subi	r16, 0x01	; 1
    394c:	10 40       	sbci	r17, 0x00	; 0
    394e:	17 fd       	sbrc	r17, 7
    3950:	d2 cf       	rjmp	.-92     	; 0x38f6 <_ZNK6String11lastIndexOfERKS_j+0x34>
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    3952:	d6 01       	movw	r26, r12
    3954:	ed 91       	ld	r30, X+
    3956:	fc 91       	ld	r31, X
    3958:	11 97       	sbiw	r26, 0x01	; 1
    395a:	e0 0f       	add	r30, r16
    395c:	f1 1f       	adc	r31, r17
    395e:	80 81       	ld	r24, Z
    3960:	89 15       	cp	r24, r9
    3962:	99 f7       	brne	.-26     	; 0x394a <_ZNK6String11lastIndexOfERKS_j+0x88>
    3964:	f7 01       	movw	r30, r14
    3966:	24 81       	ldd	r18, Z+4	; 0x04
    3968:	35 81       	ldd	r19, Z+5	; 0x05
    396a:	20 0f       	add	r18, r16
    396c:	31 1f       	adc	r19, r17
    396e:	c5 01       	movw	r24, r10
    3970:	b6 01       	movw	r22, r12
    3972:	a8 01       	movw	r20, r16
    3974:	0e 94 21 1c 	call	0x3842	; 0x3842 <_ZNK6String9substringEjj>
    3978:	c5 01       	movw	r24, r10
    397a:	b7 01       	movw	r22, r14
    397c:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <_ZNK6String6equalsERKS_>
    3980:	88 2e       	mov	r8, r24
    3982:	89 81       	ldd	r24, Y+1	; 0x01
    3984:	9a 81       	ldd	r25, Y+2	; 0x02
    3986:	0e 94 17 2c 	call	0x582e	; 0x582e <free>
    398a:	88 20       	and	r8, r8
    398c:	09 f0       	breq	.+2      	; 0x3990 <_ZNK6String11lastIndexOfERKS_j+0xce>
    398e:	b5 cf       	rjmp	.-150    	; 0x38fa <_ZNK6String11lastIndexOfERKS_j+0x38>
    3990:	1c 82       	std	Y+4, r1	; 0x04
    3992:	1b 82       	std	Y+3, r1	; 0x03
    3994:	1e 82       	std	Y+6, r1	; 0x06
    3996:	1d 82       	std	Y+5, r1	; 0x05
    3998:	d8 cf       	rjmp	.-80     	; 0x394a <_ZNK6String11lastIndexOfERKS_j+0x88>

0000399a <_ZNK6String11lastIndexOfERKS_>:
  return temp - _buffer;
}

int String::lastIndexOf( const String &s2 ) const
{
  return lastIndexOf( s2, _length - s2._length );
    399a:	fc 01       	movw	r30, r24
    399c:	44 81       	ldd	r20, Z+4	; 0x04
    399e:	55 81       	ldd	r21, Z+5	; 0x05
    39a0:	fb 01       	movw	r30, r22
    39a2:	24 81       	ldd	r18, Z+4	; 0x04
    39a4:	35 81       	ldd	r19, Z+5	; 0x05
    39a6:	42 1b       	sub	r20, r18
    39a8:	53 0b       	sbc	r21, r19
    39aa:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <_ZNK6String11lastIndexOfERKS_j>
}
    39ae:	08 95       	ret

000039b0 <_ZNK6String4trimEv>:
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
  return temp;
}

String String::trim() const
{
    39b0:	6f 92       	push	r6
    39b2:	7f 92       	push	r7
    39b4:	8f 92       	push	r8
    39b6:	9f 92       	push	r9
    39b8:	af 92       	push	r10
    39ba:	bf 92       	push	r11
    39bc:	cf 92       	push	r12
    39be:	df 92       	push	r13
    39c0:	ef 92       	push	r14
    39c2:	ff 92       	push	r15
    39c4:	0f 93       	push	r16
    39c6:	1f 93       	push	r17
    39c8:	df 93       	push	r29
    39ca:	cf 93       	push	r28
    39cc:	00 d0       	rcall	.+0      	; 0x39ce <_ZNK6String4trimEv+0x1e>
    39ce:	00 d0       	rcall	.+0      	; 0x39d0 <_ZNK6String4trimEv+0x20>
    39d0:	00 d0       	rcall	.+0      	; 0x39d2 <_ZNK6String4trimEv+0x22>
    39d2:	cd b7       	in	r28, 0x3d	; 61
    39d4:	de b7       	in	r29, 0x3e	; 62
    39d6:	8c 01       	movw	r16, r24
    39d8:	6b 01       	movw	r12, r22
  if ( _buffer == NULL ) return *this;
    39da:	fb 01       	movw	r30, r22
    39dc:	60 81       	ld	r22, Z
    39de:	71 81       	ldd	r23, Z+1	; 0x01
    39e0:	61 15       	cp	r22, r1
    39e2:	71 05       	cpc	r23, r1
    39e4:	09 f4       	brne	.+2      	; 0x39e8 <_ZNK6String4trimEv+0x38>
    39e6:	63 c0       	rjmp	.+198    	; 0x3aae <_ZNK6String4trimEv+0xfe>
  String temp = _buffer;
    39e8:	5e 01       	movw	r10, r28
    39ea:	08 94       	sec
    39ec:	a1 1c       	adc	r10, r1
    39ee:	b1 1c       	adc	r11, r1
    39f0:	c5 01       	movw	r24, r10
    39f2:	0e 94 1f 1b 	call	0x363e	; 0x363e <_ZN6StringC1EPKc>
  unsigned int i,j;

  for ( i = 0; i < _length; i++ )
    39f6:	f6 01       	movw	r30, r12
    39f8:	84 80       	ldd	r8, Z+4	; 0x04
    39fa:	95 80       	ldd	r9, Z+5	; 0x05
    39fc:	81 14       	cp	r8, r1
    39fe:	91 04       	cpc	r9, r1
    3a00:	09 f4       	brne	.+2      	; 0x3a04 <_ZNK6String4trimEv+0x54>
    3a02:	59 c0       	rjmp	.+178    	; 0x3ab6 <_ZNK6String4trimEv+0x106>
    3a04:	f6 01       	movw	r30, r12
    3a06:	60 80       	ld	r6, Z
    3a08:	71 80       	ldd	r7, Z+1	; 0x01
    3a0a:	ee 24       	eor	r14, r14
    3a0c:	ff 24       	eor	r15, r15
    3a0e:	06 c0       	rjmp	.+12     	; 0x3a1c <_ZNK6String4trimEv+0x6c>
    3a10:	08 94       	sec
    3a12:	e1 1c       	adc	r14, r1
    3a14:	f1 1c       	adc	r15, r1
    3a16:	e8 14       	cp	r14, r8
    3a18:	f9 04       	cpc	r15, r9
    3a1a:	48 f4       	brcc	.+18     	; 0x3a2e <_ZNK6String4trimEv+0x7e>
  {
    if ( !isspace(_buffer[i]) )
    3a1c:	f3 01       	movw	r30, r6
    3a1e:	ee 0d       	add	r30, r14
    3a20:	ff 1d       	adc	r31, r15
    3a22:	80 81       	ld	r24, Z
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <isspace>
    3a2a:	00 97       	sbiw	r24, 0x00	; 0
    3a2c:	89 f7       	brne	.-30     	; 0x3a10 <_ZNK6String4trimEv+0x60>
      break;
  }

  for ( j = temp._length - 1; j > i; j-- )
    3a2e:	8d 80       	ldd	r8, Y+5	; 0x05
    3a30:	9e 80       	ldd	r9, Y+6	; 0x06
    3a32:	08 94       	sec
    3a34:	81 08       	sbc	r8, r1
    3a36:	91 08       	sbc	r9, r1
    3a38:	e8 14       	cp	r14, r8
    3a3a:	f9 04       	cpc	r15, r9
    3a3c:	b0 f4       	brcc	.+44     	; 0x3a6a <_ZNK6String4trimEv+0xba>
    3a3e:	f6 01       	movw	r30, r12
    3a40:	c0 80       	ld	r12, Z
    3a42:	d1 80       	ldd	r13, Z+1	; 0x01
    3a44:	c8 0c       	add	r12, r8
    3a46:	d9 1c       	adc	r13, r9
    3a48:	09 c0       	rjmp	.+18     	; 0x3a5c <_ZNK6String4trimEv+0xac>
    3a4a:	08 94       	sec
    3a4c:	81 08       	sbc	r8, r1
    3a4e:	91 08       	sbc	r9, r1
    3a50:	08 94       	sec
    3a52:	c1 08       	sbc	r12, r1
    3a54:	d1 08       	sbc	r13, r1
    3a56:	e8 14       	cp	r14, r8
    3a58:	f9 04       	cpc	r15, r9
    3a5a:	38 f4       	brcc	.+14     	; 0x3a6a <_ZNK6String4trimEv+0xba>
  {
    if ( !isspace(_buffer[j]) )
    3a5c:	f6 01       	movw	r30, r12
    3a5e:	80 81       	ld	r24, Z
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <isspace>
    3a66:	00 97       	sbiw	r24, 0x00	; 0
    3a68:	81 f7       	brne	.-32     	; 0x3a4a <_ZNK6String4trimEv+0x9a>
      break;
  }

  return temp.substring( i, j + 1);
    3a6a:	94 01       	movw	r18, r8
    3a6c:	2f 5f       	subi	r18, 0xFF	; 255
    3a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a70:	c8 01       	movw	r24, r16
    3a72:	b5 01       	movw	r22, r10
    3a74:	a7 01       	movw	r20, r14
    3a76:	0e 94 21 1c 	call	0x3842	; 0x3842 <_ZNK6String9substringEjj>
    3a7a:	89 81       	ldd	r24, Y+1	; 0x01
    3a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a7e:	0e 94 17 2c 	call	0x582e	; 0x582e <free>
}
    3a82:	c8 01       	movw	r24, r16
    3a84:	26 96       	adiw	r28, 0x06	; 6
    3a86:	0f b6       	in	r0, 0x3f	; 63
    3a88:	f8 94       	cli
    3a8a:	de bf       	out	0x3e, r29	; 62
    3a8c:	0f be       	out	0x3f, r0	; 63
    3a8e:	cd bf       	out	0x3d, r28	; 61
    3a90:	cf 91       	pop	r28
    3a92:	df 91       	pop	r29
    3a94:	1f 91       	pop	r17
    3a96:	0f 91       	pop	r16
    3a98:	ff 90       	pop	r15
    3a9a:	ef 90       	pop	r14
    3a9c:	df 90       	pop	r13
    3a9e:	cf 90       	pop	r12
    3aa0:	bf 90       	pop	r11
    3aa2:	af 90       	pop	r10
    3aa4:	9f 90       	pop	r9
    3aa6:	8f 90       	pop	r8
    3aa8:	7f 90       	pop	r7
    3aaa:	6f 90       	pop	r6
    3aac:	08 95       	ret
  return temp;
}

String String::trim() const
{
  if ( _buffer == NULL ) return *this;
    3aae:	b6 01       	movw	r22, r12
    3ab0:	0e 94 c7 19 	call	0x338e	; 0x338e <_ZN6StringC1ERKS_>
    3ab4:	e6 cf       	rjmp	.-52     	; 0x3a82 <_ZNK6String4trimEv+0xd2>
  String temp = _buffer;
  unsigned int i,j;

  for ( i = 0; i < _length; i++ )
    3ab6:	ee 24       	eor	r14, r14
    3ab8:	ff 24       	eor	r15, r15
    3aba:	b9 cf       	rjmp	.-142    	; 0x3a2e <_ZNK6String4trimEv+0x7e>

00003abc <_ZN6String7replaceERKS_S1_>:

  return theReturn;
}

String String::replace( const String& match, const String& replace )
{
    3abc:	2f 92       	push	r2
    3abe:	3f 92       	push	r3
    3ac0:	4f 92       	push	r4
    3ac2:	5f 92       	push	r5
    3ac4:	6f 92       	push	r6
    3ac6:	7f 92       	push	r7
    3ac8:	8f 92       	push	r8
    3aca:	9f 92       	push	r9
    3acc:	af 92       	push	r10
    3ace:	bf 92       	push	r11
    3ad0:	cf 92       	push	r12
    3ad2:	df 92       	push	r13
    3ad4:	ef 92       	push	r14
    3ad6:	ff 92       	push	r15
    3ad8:	0f 93       	push	r16
    3ada:	1f 93       	push	r17
    3adc:	df 93       	push	r29
    3ade:	cf 93       	push	r28
    3ae0:	cd b7       	in	r28, 0x3d	; 61
    3ae2:	de b7       	in	r29, 0x3e	; 62
    3ae4:	68 97       	sbiw	r28, 0x18	; 24
    3ae6:	0f b6       	in	r0, 0x3f	; 63
    3ae8:	f8 94       	cli
    3aea:	de bf       	out	0x3e, r29	; 62
    3aec:	0f be       	out	0x3f, r0	; 63
    3aee:	cd bf       	out	0x3d, r28	; 61
    3af0:	1c 01       	movw	r2, r24
    3af2:	fb 01       	movw	r30, r22
    3af4:	5a 01       	movw	r10, r20
    3af6:	29 01       	movw	r4, r18
  if ( _buffer == NULL ) return *this;
    3af8:	60 81       	ld	r22, Z
    3afa:	71 81       	ldd	r23, Z+1	; 0x01
    3afc:	61 15       	cp	r22, r1
    3afe:	71 05       	cpc	r23, r1
    3b00:	09 f4       	brne	.+2      	; 0x3b04 <_ZN6String7replaceERKS_S1_+0x48>
    3b02:	7e c0       	rjmp	.+252    	; 0x3c00 <_ZN6String7replaceERKS_S1_+0x144>
  String temp = _buffer, newString;
    3b04:	8e 01       	movw	r16, r28
    3b06:	0f 5f       	subi	r16, 0xFF	; 255
    3b08:	1f 4f       	sbci	r17, 0xFF	; 255
    3b0a:	c8 01       	movw	r24, r16
    3b0c:	0e 94 1f 1b 	call	0x363e	; 0x363e <_ZN6StringC1EPKc>
    3b10:	47 e0       	ldi	r20, 0x07	; 7
    3b12:	c4 2e       	mov	r12, r20
    3b14:	d1 2c       	mov	r13, r1
    3b16:	cc 0e       	add	r12, r28
    3b18:	dd 1e       	adc	r13, r29
    3b1a:	c6 01       	movw	r24, r12
    3b1c:	65 e9       	ldi	r22, 0x95	; 149
    3b1e:	71 e0       	ldi	r23, 0x01	; 1
    3b20:	0e 94 1f 1b 	call	0x363e	; 0x363e <_ZN6StringC1EPKc>

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
  {
    newString += temp.substring( 0, loc );
    3b24:	3d e0       	ldi	r19, 0x0D	; 13
    3b26:	83 2e       	mov	r8, r19
    3b28:	91 2c       	mov	r9, r1
    3b2a:	8c 0e       	add	r8, r28
    3b2c:	9d 1e       	adc	r9, r29
    newString += replace;
    temp = temp.substring( loc + match._length );
    3b2e:	23 e1       	ldi	r18, 0x13	; 19
    3b30:	62 2e       	mov	r6, r18
    3b32:	71 2c       	mov	r7, r1
    3b34:	6c 0e       	add	r6, r28
    3b36:	7d 1e       	adc	r7, r29
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer, newString;

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
    3b38:	2c c0       	rjmp	.+88     	; 0x3b92 <_ZN6String7replaceERKS_S1_+0xd6>
  {
    newString += temp.substring( 0, loc );
    3b3a:	c4 01       	movw	r24, r8
    3b3c:	b8 01       	movw	r22, r16
    3b3e:	40 e0       	ldi	r20, 0x00	; 0
    3b40:	50 e0       	ldi	r21, 0x00	; 0
    3b42:	97 01       	movw	r18, r14
    3b44:	0e 94 21 1c 	call	0x3842	; 0x3842 <_ZNK6String9substringEjj>
    3b48:	c6 01       	movw	r24, r12
    3b4a:	b4 01       	movw	r22, r8
    3b4c:	0e 94 5f 18 	call	0x30be	; 0x30be <_ZN6StringpLERKS_>
    3b50:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b52:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b54:	0e 94 17 2c 	call	0x582e	; 0x582e <free>
    3b58:	18 8a       	std	Y+16, r1	; 0x10
    3b5a:	1f 86       	std	Y+15, r1	; 0x0f
    3b5c:	1a 8a       	std	Y+18, r1	; 0x12
    3b5e:	19 8a       	std	Y+17, r1	; 0x11
    newString += replace;
    3b60:	c6 01       	movw	r24, r12
    3b62:	b2 01       	movw	r22, r4
    3b64:	0e 94 5f 18 	call	0x30be	; 0x30be <_ZN6StringpLERKS_>
    temp = temp.substring( loc + match._length );
    3b68:	f5 01       	movw	r30, r10
    3b6a:	44 81       	ldd	r20, Z+4	; 0x04
    3b6c:	55 81       	ldd	r21, Z+5	; 0x05
    3b6e:	4e 0d       	add	r20, r14
    3b70:	5f 1d       	adc	r21, r15
    3b72:	c3 01       	movw	r24, r6
    3b74:	b8 01       	movw	r22, r16
    3b76:	0e 94 55 1c 	call	0x38aa	; 0x38aa <_ZNK6String9substringEj>
    3b7a:	c8 01       	movw	r24, r16
    3b7c:	b3 01       	movw	r22, r6
    3b7e:	0e 94 a0 18 	call	0x3140	; 0x3140 <_ZN6StringaSERKS_>
    3b82:	8b 89       	ldd	r24, Y+19	; 0x13
    3b84:	9c 89       	ldd	r25, Y+20	; 0x14
    3b86:	0e 94 17 2c 	call	0x582e	; 0x582e <free>
    3b8a:	1e 8a       	std	Y+22, r1	; 0x16
    3b8c:	1d 8a       	std	Y+21, r1	; 0x15
    3b8e:	18 8e       	std	Y+24, r1	; 0x18
    3b90:	1f 8a       	std	Y+23, r1	; 0x17
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer, newString;

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
    3b92:	c8 01       	movw	r24, r16
    3b94:	b5 01       	movw	r22, r10
    3b96:	0e 94 6f 17 	call	0x2ede	; 0x2ede <_ZNK6String7indexOfERKS_>
    3b9a:	7c 01       	movw	r14, r24
    3b9c:	ff ef       	ldi	r31, 0xFF	; 255
    3b9e:	8f 3f       	cpi	r24, 0xFF	; 255
    3ba0:	9f 07       	cpc	r25, r31
    3ba2:	59 f6       	brne	.-106    	; 0x3b3a <_ZN6String7replaceERKS_S1_+0x7e>
  {
    newString += temp.substring( 0, loc );
    newString += replace;
    temp = temp.substring( loc + match._length );
  }
  newString += temp;  
    3ba4:	c6 01       	movw	r24, r12
    3ba6:	b8 01       	movw	r22, r16
    3ba8:	0e 94 5f 18 	call	0x30be	; 0x30be <_ZN6StringpLERKS_>
  return newString;
    3bac:	c1 01       	movw	r24, r2
    3bae:	b6 01       	movw	r22, r12
    3bb0:	0e 94 c7 19 	call	0x338e	; 0x338e <_ZN6StringC1ERKS_>
    3bb4:	8f 81       	ldd	r24, Y+7	; 0x07
    3bb6:	98 85       	ldd	r25, Y+8	; 0x08
    3bb8:	0e 94 17 2c 	call	0x582e	; 0x582e <free>
    3bbc:	1a 86       	std	Y+10, r1	; 0x0a
    3bbe:	19 86       	std	Y+9, r1	; 0x09
    3bc0:	1c 86       	std	Y+12, r1	; 0x0c
    3bc2:	1b 86       	std	Y+11, r1	; 0x0b
    3bc4:	89 81       	ldd	r24, Y+1	; 0x01
    3bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc8:	0e 94 17 2c 	call	0x582e	; 0x582e <free>
}
    3bcc:	c1 01       	movw	r24, r2
    3bce:	68 96       	adiw	r28, 0x18	; 24
    3bd0:	0f b6       	in	r0, 0x3f	; 63
    3bd2:	f8 94       	cli
    3bd4:	de bf       	out	0x3e, r29	; 62
    3bd6:	0f be       	out	0x3f, r0	; 63
    3bd8:	cd bf       	out	0x3d, r28	; 61
    3bda:	cf 91       	pop	r28
    3bdc:	df 91       	pop	r29
    3bde:	1f 91       	pop	r17
    3be0:	0f 91       	pop	r16
    3be2:	ff 90       	pop	r15
    3be4:	ef 90       	pop	r14
    3be6:	df 90       	pop	r13
    3be8:	cf 90       	pop	r12
    3bea:	bf 90       	pop	r11
    3bec:	af 90       	pop	r10
    3bee:	9f 90       	pop	r9
    3bf0:	8f 90       	pop	r8
    3bf2:	7f 90       	pop	r7
    3bf4:	6f 90       	pop	r6
    3bf6:	5f 90       	pop	r5
    3bf8:	4f 90       	pop	r4
    3bfa:	3f 90       	pop	r3
    3bfc:	2f 90       	pop	r2
    3bfe:	08 95       	ret
  return theReturn;
}

String String::replace( const String& match, const String& replace )
{
  if ( _buffer == NULL ) return *this;
    3c00:	bf 01       	movw	r22, r30
    3c02:	0e 94 c7 19 	call	0x338e	; 0x338e <_ZN6StringC1ERKS_>
    3c06:	e2 cf       	rjmp	.-60     	; 0x3bcc <_ZN6String7replaceERKS_S1_+0x110>

00003c08 <_ZN6String7replaceEcc>:

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}

String String::replace( char findChar, char replaceChar )
{
    3c08:	cf 92       	push	r12
    3c0a:	df 92       	push	r13
    3c0c:	ef 92       	push	r14
    3c0e:	ff 92       	push	r15
    3c10:	0f 93       	push	r16
    3c12:	1f 93       	push	r17
    3c14:	df 93       	push	r29
    3c16:	cf 93       	push	r28
    3c18:	00 d0       	rcall	.+0      	; 0x3c1a <_ZN6String7replaceEcc+0x12>
    3c1a:	00 d0       	rcall	.+0      	; 0x3c1c <_ZN6String7replaceEcc+0x14>
    3c1c:	00 d0       	rcall	.+0      	; 0x3c1e <_ZN6String7replaceEcc+0x16>
    3c1e:	cd b7       	in	r28, 0x3d	; 61
    3c20:	de b7       	in	r29, 0x3e	; 62
    3c22:	8c 01       	movw	r16, r24
    3c24:	fb 01       	movw	r30, r22
    3c26:	f4 2e       	mov	r15, r20
    3c28:	e2 2e       	mov	r14, r18
  if ( _buffer == NULL ) return *this;
    3c2a:	60 81       	ld	r22, Z
    3c2c:	71 81       	ldd	r23, Z+1	; 0x01
    3c2e:	61 15       	cp	r22, r1
    3c30:	71 05       	cpc	r23, r1
    3c32:	51 f1       	breq	.+84     	; 0x3c88 <_ZN6String7replaceEcc+0x80>
  String theReturn = _buffer;
    3c34:	6e 01       	movw	r12, r28
    3c36:	08 94       	sec
    3c38:	c1 1c       	adc	r12, r1
    3c3a:	d1 1c       	adc	r13, r1
    3c3c:	c6 01       	movw	r24, r12
    3c3e:	0e 94 1f 1b 	call	0x363e	; 0x363e <_ZN6StringC1EPKc>
  char* temp = theReturn._buffer;
    3c42:	89 81       	ldd	r24, Y+1	; 0x01
    3c44:	9a 81       	ldd	r25, Y+2	; 0x02
  while( (temp = strchr( temp, findChar )) != 0 )
    3c46:	01 c0       	rjmp	.+2      	; 0x3c4a <_ZN6String7replaceEcc+0x42>
    *temp = replaceChar;
    3c48:	e0 82       	st	Z, r14
String String::replace( char findChar, char replaceChar )
{
  if ( _buffer == NULL ) return *this;
  String theReturn = _buffer;
  char* temp = theReturn._buffer;
  while( (temp = strchr( temp, findChar )) != 0 )
    3c4a:	6f 2d       	mov	r22, r15
    3c4c:	70 e0       	ldi	r23, 0x00	; 0
    3c4e:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <strchr>
    3c52:	fc 01       	movw	r30, r24
    3c54:	00 97       	sbiw	r24, 0x00	; 0
    3c56:	c1 f7       	brne	.-16     	; 0x3c48 <_ZN6String7replaceEcc+0x40>
    *temp = replaceChar;

  return theReturn;
    3c58:	c8 01       	movw	r24, r16
    3c5a:	b6 01       	movw	r22, r12
    3c5c:	0e 94 c7 19 	call	0x338e	; 0x338e <_ZN6StringC1ERKS_>
    3c60:	89 81       	ldd	r24, Y+1	; 0x01
    3c62:	9a 81       	ldd	r25, Y+2	; 0x02
    3c64:	0e 94 17 2c 	call	0x582e	; 0x582e <free>
}
    3c68:	c8 01       	movw	r24, r16
    3c6a:	26 96       	adiw	r28, 0x06	; 6
    3c6c:	0f b6       	in	r0, 0x3f	; 63
    3c6e:	f8 94       	cli
    3c70:	de bf       	out	0x3e, r29	; 62
    3c72:	0f be       	out	0x3f, r0	; 63
    3c74:	cd bf       	out	0x3d, r28	; 61
    3c76:	cf 91       	pop	r28
    3c78:	df 91       	pop	r29
    3c7a:	1f 91       	pop	r17
    3c7c:	0f 91       	pop	r16
    3c7e:	ff 90       	pop	r15
    3c80:	ef 90       	pop	r14
    3c82:	df 90       	pop	r13
    3c84:	cf 90       	pop	r12
    3c86:	08 95       	ret
  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}

String String::replace( char findChar, char replaceChar )
{
  if ( _buffer == NULL ) return *this;
    3c88:	bf 01       	movw	r22, r30
    3c8a:	0e 94 c7 19 	call	0x338e	; 0x338e <_ZN6StringC1ERKS_>
    3c8e:	ec cf       	rjmp	.-40     	; 0x3c68 <_ZN6String7replaceEcc+0x60>

00003c90 <_ZN6StringC2EPKc>:
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    3c90:	0f 93       	push	r16
    3c92:	1f 93       	push	r17
    3c94:	cf 93       	push	r28
    3c96:	df 93       	push	r29
    3c98:	ec 01       	movw	r28, r24
    3c9a:	8b 01       	movw	r16, r22
{
  if ( value == NULL )
    3c9c:	61 15       	cp	r22, r1
    3c9e:	71 05       	cpc	r23, r1
    3ca0:	21 f1       	breq	.+72     	; 0x3cea <_ZN6StringC2EPKc+0x5a>
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    3ca2:	fb 01       	movw	r30, r22
    3ca4:	01 90       	ld	r0, Z+
    3ca6:	00 20       	and	r0, r0
    3ca8:	e9 f7       	brne	.-6      	; 0x3ca4 <_ZN6StringC2EPKc+0x14>
    3caa:	31 97       	sbiw	r30, 0x01	; 1
    3cac:	e6 1b       	sub	r30, r22
    3cae:	f7 0b       	sbc	r31, r23
    3cb0:	cf 01       	movw	r24, r30
    3cb2:	01 96       	adiw	r24, 0x01	; 1
{
  if ( value == NULL )
    value = "";
  getBuffer( _length = strlen( value ) );
    3cb4:	fd 83       	std	Y+5, r31	; 0x05
    3cb6:	ec 83       	std	Y+4, r30	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3cb8:	fb 83       	std	Y+3, r31	; 0x03
    3cba:	ea 83       	std	Y+2, r30	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3cbc:	0e 94 75 2b 	call	0x56ea	; 0x56ea <malloc>
    3cc0:	99 83       	std	Y+1, r25	; 0x01
    3cc2:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3cc4:	00 97       	sbiw	r24, 0x00	; 0
    3cc6:	41 f0       	breq	.+16     	; 0x3cd8 <_ZN6StringC2EPKc+0x48>
  if ( _buffer != NULL )
    strcpy( _buffer, value );
    3cc8:	b8 01       	movw	r22, r16
    3cca:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <strcpy>
}
    3cce:	df 91       	pop	r29
    3cd0:	cf 91       	pop	r28
    3cd2:	1f 91       	pop	r17
    3cd4:	0f 91       	pop	r16
    3cd6:	08 95       	ret
    3cd8:	1b 82       	std	Y+3, r1	; 0x03
    3cda:	1a 82       	std	Y+2, r1	; 0x02
    3cdc:	1d 82       	std	Y+5, r1	; 0x05
    3cde:	1c 82       	std	Y+4, r1	; 0x04
    3ce0:	df 91       	pop	r29
    3ce2:	cf 91       	pop	r28
    3ce4:	1f 91       	pop	r17
    3ce6:	0f 91       	pop	r16
    3ce8:	08 95       	ret
#include "WString.h"


String::String( const char *value )
{
  if ( value == NULL )
    3cea:	81 e0       	ldi	r24, 0x01	; 1
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	e0 e0       	ldi	r30, 0x00	; 0
    3cf0:	f0 e0       	ldi	r31, 0x00	; 0
    3cf2:	05 e9       	ldi	r16, 0x95	; 149
    3cf4:	11 e0       	ldi	r17, 0x01	; 1
    3cf6:	de cf       	rjmp	.-68     	; 0x3cb4 <_ZN6StringC2EPKc+0x24>

00003cf8 <_ZN6StringC1Eli>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const long value, const int base )
    3cf8:	ef 92       	push	r14
    3cfa:	ff 92       	push	r15
    3cfc:	0f 93       	push	r16
    3cfe:	1f 93       	push	r17
    3d00:	df 93       	push	r29
    3d02:	cf 93       	push	r28
    3d04:	cd b7       	in	r28, 0x3d	; 61
    3d06:	de b7       	in	r29, 0x3e	; 62
    3d08:	a1 97       	sbiw	r28, 0x21	; 33
    3d0a:	0f b6       	in	r0, 0x3f	; 63
    3d0c:	f8 94       	cli
    3d0e:	de bf       	out	0x3e, r29	; 62
    3d10:	0f be       	out	0x3f, r0	; 63
    3d12:	cd bf       	out	0x3d, r28	; 61
    3d14:	7c 01       	movw	r14, r24
    3d16:	cb 01       	movw	r24, r22
    3d18:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ltoa(value, buf, base);
    3d1a:	8e 01       	movw	r16, r28
    3d1c:	0f 5f       	subi	r16, 0xFF	; 255
    3d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d20:	a8 01       	movw	r20, r16
    3d22:	0e 94 57 2e 	call	0x5cae	; 0x5cae <ltoa>
  getBuffer( _length = strlen(buf) );
    3d26:	f8 01       	movw	r30, r16
    3d28:	01 90       	ld	r0, Z+
    3d2a:	00 20       	and	r0, r0
    3d2c:	e9 f7       	brne	.-6      	; 0x3d28 <_ZN6StringC1Eli+0x30>
    3d2e:	cf 01       	movw	r24, r30
    3d30:	01 97       	sbiw	r24, 0x01	; 1
    3d32:	80 1b       	sub	r24, r16
    3d34:	91 0b       	sbc	r25, r17
    3d36:	f7 01       	movw	r30, r14
    3d38:	95 83       	std	Z+5, r25	; 0x05
    3d3a:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3d3c:	93 83       	std	Z+3, r25	; 0x03
    3d3e:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3d40:	01 96       	adiw	r24, 0x01	; 1
    3d42:	0e 94 75 2b 	call	0x56ea	; 0x56ea <malloc>
    3d46:	f7 01       	movw	r30, r14
    3d48:	91 83       	std	Z+1, r25	; 0x01
    3d4a:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3d4c:	00 97       	sbiw	r24, 0x00	; 0
    3d4e:	81 f0       	breq	.+32     	; 0x3d70 <_ZN6StringC1Eli+0x78>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    3d50:	b8 01       	movw	r22, r16
    3d52:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <strcpy>
}
    3d56:	a1 96       	adiw	r28, 0x21	; 33
    3d58:	0f b6       	in	r0, 0x3f	; 63
    3d5a:	f8 94       	cli
    3d5c:	de bf       	out	0x3e, r29	; 62
    3d5e:	0f be       	out	0x3f, r0	; 63
    3d60:	cd bf       	out	0x3d, r28	; 61
    3d62:	cf 91       	pop	r28
    3d64:	df 91       	pop	r29
    3d66:	1f 91       	pop	r17
    3d68:	0f 91       	pop	r16
    3d6a:	ff 90       	pop	r15
    3d6c:	ef 90       	pop	r14
    3d6e:	08 95       	ret
    3d70:	13 82       	std	Z+3, r1	; 0x03
    3d72:	12 82       	std	Z+2, r1	; 0x02
    3d74:	15 82       	std	Z+5, r1	; 0x05
    3d76:	14 82       	std	Z+4, r1	; 0x04
    3d78:	ee cf       	rjmp	.-36     	; 0x3d56 <_ZN6StringC1Eli+0x5e>

00003d7a <_ZN6StringC2Eli>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const long value, const int base )
    3d7a:	ef 92       	push	r14
    3d7c:	ff 92       	push	r15
    3d7e:	0f 93       	push	r16
    3d80:	1f 93       	push	r17
    3d82:	df 93       	push	r29
    3d84:	cf 93       	push	r28
    3d86:	cd b7       	in	r28, 0x3d	; 61
    3d88:	de b7       	in	r29, 0x3e	; 62
    3d8a:	a1 97       	sbiw	r28, 0x21	; 33
    3d8c:	0f b6       	in	r0, 0x3f	; 63
    3d8e:	f8 94       	cli
    3d90:	de bf       	out	0x3e, r29	; 62
    3d92:	0f be       	out	0x3f, r0	; 63
    3d94:	cd bf       	out	0x3d, r28	; 61
    3d96:	7c 01       	movw	r14, r24
    3d98:	cb 01       	movw	r24, r22
    3d9a:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ltoa(value, buf, base);
    3d9c:	8e 01       	movw	r16, r28
    3d9e:	0f 5f       	subi	r16, 0xFF	; 255
    3da0:	1f 4f       	sbci	r17, 0xFF	; 255
    3da2:	a8 01       	movw	r20, r16
    3da4:	0e 94 57 2e 	call	0x5cae	; 0x5cae <ltoa>
  getBuffer( _length = strlen(buf) );
    3da8:	f8 01       	movw	r30, r16
    3daa:	01 90       	ld	r0, Z+
    3dac:	00 20       	and	r0, r0
    3dae:	e9 f7       	brne	.-6      	; 0x3daa <_ZN6StringC2Eli+0x30>
    3db0:	cf 01       	movw	r24, r30
    3db2:	01 97       	sbiw	r24, 0x01	; 1
    3db4:	80 1b       	sub	r24, r16
    3db6:	91 0b       	sbc	r25, r17
    3db8:	f7 01       	movw	r30, r14
    3dba:	95 83       	std	Z+5, r25	; 0x05
    3dbc:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3dbe:	93 83       	std	Z+3, r25	; 0x03
    3dc0:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3dc2:	01 96       	adiw	r24, 0x01	; 1
    3dc4:	0e 94 75 2b 	call	0x56ea	; 0x56ea <malloc>
    3dc8:	f7 01       	movw	r30, r14
    3dca:	91 83       	std	Z+1, r25	; 0x01
    3dcc:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3dce:	00 97       	sbiw	r24, 0x00	; 0
    3dd0:	81 f0       	breq	.+32     	; 0x3df2 <_ZN6StringC2Eli+0x78>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    3dd2:	b8 01       	movw	r22, r16
    3dd4:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <strcpy>
}
    3dd8:	a1 96       	adiw	r28, 0x21	; 33
    3dda:	0f b6       	in	r0, 0x3f	; 63
    3ddc:	f8 94       	cli
    3dde:	de bf       	out	0x3e, r29	; 62
    3de0:	0f be       	out	0x3f, r0	; 63
    3de2:	cd bf       	out	0x3d, r28	; 61
    3de4:	cf 91       	pop	r28
    3de6:	df 91       	pop	r29
    3de8:	1f 91       	pop	r17
    3dea:	0f 91       	pop	r16
    3dec:	ff 90       	pop	r15
    3dee:	ef 90       	pop	r14
    3df0:	08 95       	ret
    3df2:	13 82       	std	Z+3, r1	; 0x03
    3df4:	12 82       	std	Z+2, r1	; 0x02
    3df6:	15 82       	std	Z+5, r1	; 0x05
    3df8:	14 82       	std	Z+4, r1	; 0x04
    3dfa:	ee cf       	rjmp	.-36     	; 0x3dd8 <_ZN6StringC2Eli+0x5e>

00003dfc <_ZN6StringC1Eii>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const int value, const int base )
    3dfc:	ef 92       	push	r14
    3dfe:	ff 92       	push	r15
    3e00:	0f 93       	push	r16
    3e02:	1f 93       	push	r17
    3e04:	df 93       	push	r29
    3e06:	cf 93       	push	r28
    3e08:	cd b7       	in	r28, 0x3d	; 61
    3e0a:	de b7       	in	r29, 0x3e	; 62
    3e0c:	a1 97       	sbiw	r28, 0x21	; 33
    3e0e:	0f b6       	in	r0, 0x3f	; 63
    3e10:	f8 94       	cli
    3e12:	de bf       	out	0x3e, r29	; 62
    3e14:	0f be       	out	0x3f, r0	; 63
    3e16:	cd bf       	out	0x3d, r28	; 61
    3e18:	7c 01       	movw	r14, r24
    3e1a:	cb 01       	movw	r24, r22
{
  char buf[33];   
  itoa((signed long)value, buf, base);
    3e1c:	8e 01       	movw	r16, r28
    3e1e:	0f 5f       	subi	r16, 0xFF	; 255
    3e20:	1f 4f       	sbci	r17, 0xFF	; 255
    3e22:	b8 01       	movw	r22, r16
    3e24:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <itoa>
  getBuffer( _length = strlen(buf) );
    3e28:	f8 01       	movw	r30, r16
    3e2a:	01 90       	ld	r0, Z+
    3e2c:	00 20       	and	r0, r0
    3e2e:	e9 f7       	brne	.-6      	; 0x3e2a <_ZN6StringC1Eii+0x2e>
    3e30:	cf 01       	movw	r24, r30
    3e32:	01 97       	sbiw	r24, 0x01	; 1
    3e34:	80 1b       	sub	r24, r16
    3e36:	91 0b       	sbc	r25, r17
    3e38:	f7 01       	movw	r30, r14
    3e3a:	95 83       	std	Z+5, r25	; 0x05
    3e3c:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3e3e:	93 83       	std	Z+3, r25	; 0x03
    3e40:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3e42:	01 96       	adiw	r24, 0x01	; 1
    3e44:	0e 94 75 2b 	call	0x56ea	; 0x56ea <malloc>
    3e48:	f7 01       	movw	r30, r14
    3e4a:	91 83       	std	Z+1, r25	; 0x01
    3e4c:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3e4e:	00 97       	sbiw	r24, 0x00	; 0
    3e50:	81 f0       	breq	.+32     	; 0x3e72 <_ZN6StringC1Eii+0x76>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    3e52:	b8 01       	movw	r22, r16
    3e54:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <strcpy>
}
    3e58:	a1 96       	adiw	r28, 0x21	; 33
    3e5a:	0f b6       	in	r0, 0x3f	; 63
    3e5c:	f8 94       	cli
    3e5e:	de bf       	out	0x3e, r29	; 62
    3e60:	0f be       	out	0x3f, r0	; 63
    3e62:	cd bf       	out	0x3d, r28	; 61
    3e64:	cf 91       	pop	r28
    3e66:	df 91       	pop	r29
    3e68:	1f 91       	pop	r17
    3e6a:	0f 91       	pop	r16
    3e6c:	ff 90       	pop	r15
    3e6e:	ef 90       	pop	r14
    3e70:	08 95       	ret
    3e72:	13 82       	std	Z+3, r1	; 0x03
    3e74:	12 82       	std	Z+2, r1	; 0x02
    3e76:	15 82       	std	Z+5, r1	; 0x05
    3e78:	14 82       	std	Z+4, r1	; 0x04
    3e7a:	ee cf       	rjmp	.-36     	; 0x3e58 <_ZN6StringC1Eii+0x5c>

00003e7c <_ZN6StringC2Eii>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const int value, const int base )
    3e7c:	ef 92       	push	r14
    3e7e:	ff 92       	push	r15
    3e80:	0f 93       	push	r16
    3e82:	1f 93       	push	r17
    3e84:	df 93       	push	r29
    3e86:	cf 93       	push	r28
    3e88:	cd b7       	in	r28, 0x3d	; 61
    3e8a:	de b7       	in	r29, 0x3e	; 62
    3e8c:	a1 97       	sbiw	r28, 0x21	; 33
    3e8e:	0f b6       	in	r0, 0x3f	; 63
    3e90:	f8 94       	cli
    3e92:	de bf       	out	0x3e, r29	; 62
    3e94:	0f be       	out	0x3f, r0	; 63
    3e96:	cd bf       	out	0x3d, r28	; 61
    3e98:	7c 01       	movw	r14, r24
    3e9a:	cb 01       	movw	r24, r22
{
  char buf[33];   
  itoa((signed long)value, buf, base);
    3e9c:	8e 01       	movw	r16, r28
    3e9e:	0f 5f       	subi	r16, 0xFF	; 255
    3ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea2:	b8 01       	movw	r22, r16
    3ea4:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <itoa>
  getBuffer( _length = strlen(buf) );
    3ea8:	f8 01       	movw	r30, r16
    3eaa:	01 90       	ld	r0, Z+
    3eac:	00 20       	and	r0, r0
    3eae:	e9 f7       	brne	.-6      	; 0x3eaa <_ZN6StringC2Eii+0x2e>
    3eb0:	cf 01       	movw	r24, r30
    3eb2:	01 97       	sbiw	r24, 0x01	; 1
    3eb4:	80 1b       	sub	r24, r16
    3eb6:	91 0b       	sbc	r25, r17
    3eb8:	f7 01       	movw	r30, r14
    3eba:	95 83       	std	Z+5, r25	; 0x05
    3ebc:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3ebe:	93 83       	std	Z+3, r25	; 0x03
    3ec0:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3ec2:	01 96       	adiw	r24, 0x01	; 1
    3ec4:	0e 94 75 2b 	call	0x56ea	; 0x56ea <malloc>
    3ec8:	f7 01       	movw	r30, r14
    3eca:	91 83       	std	Z+1, r25	; 0x01
    3ecc:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3ece:	00 97       	sbiw	r24, 0x00	; 0
    3ed0:	81 f0       	breq	.+32     	; 0x3ef2 <_ZN6StringC2Eii+0x76>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    3ed2:	b8 01       	movw	r22, r16
    3ed4:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <strcpy>
}
    3ed8:	a1 96       	adiw	r28, 0x21	; 33
    3eda:	0f b6       	in	r0, 0x3f	; 63
    3edc:	f8 94       	cli
    3ede:	de bf       	out	0x3e, r29	; 62
    3ee0:	0f be       	out	0x3f, r0	; 63
    3ee2:	cd bf       	out	0x3d, r28	; 61
    3ee4:	cf 91       	pop	r28
    3ee6:	df 91       	pop	r29
    3ee8:	1f 91       	pop	r17
    3eea:	0f 91       	pop	r16
    3eec:	ff 90       	pop	r15
    3eee:	ef 90       	pop	r14
    3ef0:	08 95       	ret
    3ef2:	13 82       	std	Z+3, r1	; 0x03
    3ef4:	12 82       	std	Z+2, r1	; 0x02
    3ef6:	15 82       	std	Z+5, r1	; 0x05
    3ef8:	14 82       	std	Z+4, r1	; 0x04
    3efa:	ee cf       	rjmp	.-36     	; 0x3ed8 <_ZN6StringC2Eii+0x5c>

00003efc <__cxa_pure_virtual>:
#include "cplusplushelper.h"
#include <stdlib.h>

void __cxa_pure_virtual(void)
{

    3efc:	08 95       	ret

00003efe <__cxa_guard_acquire>:
}

int __cxa_guard_acquire(__guard *g)
    3efe:	20 e0       	ldi	r18, 0x00	; 0
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	fc 01       	movw	r30, r24
    3f04:	80 81       	ld	r24, Z
    3f06:	88 23       	and	r24, r24
    3f08:	11 f4       	brne	.+4      	; 0x3f0e <__cxa_guard_acquire+0x10>
    3f0a:	21 e0       	ldi	r18, 0x01	; 1
    3f0c:	30 e0       	ldi	r19, 0x00	; 0
{
	return !*(char *)(g);
    3f0e:	c9 01       	movw	r24, r18
    3f10:	08 95       	ret

00003f12 <__cxa_guard_release>:
}
 
void __cxa_guard_release (__guard *g)
{
    3f12:	21 e0       	ldi	r18, 0x01	; 1
    3f14:	fc 01       	movw	r30, r24
    3f16:	20 83       	st	Z, r18
	*(char *)g = 1;
    3f18:	08 95       	ret

00003f1a <__cxa_guard_abort>:
}
 
void __cxa_guard_abort (__guard *)
{

    3f1a:	08 95       	ret

00003f1c <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    3f1c:	10 92 04 07 	sts	0x0704, r1

  #if defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega328P__)
    // activate internal pull-ups for twi
    // as per note from atmega8 manual pg167
    sbi(PORTC, 4);
    3f20:	44 9a       	sbi	0x08, 4	; 8
    sbi(PORTC, 5);
    3f22:	45 9a       	sbi	0x08, 5	; 8
    sbi(PORTD, 0);
    sbi(PORTD, 1);
  #endif

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    3f24:	e9 eb       	ldi	r30, 0xB9	; 185
    3f26:	f0 e0       	ldi	r31, 0x00	; 0
    3f28:	80 81       	ld	r24, Z
    3f2a:	8e 7f       	andi	r24, 0xFE	; 254
    3f2c:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    3f2e:	80 81       	ld	r24, Z
    3f30:	8d 7f       	andi	r24, 0xFD	; 253
    3f32:	80 83       	st	Z, r24
  TWBR = ((CPU_FREQ / TWI_FREQ) - 16) / 2;
    3f34:	88 e4       	ldi	r24, 0x48	; 72
    3f36:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    3f3a:	85 e4       	ldi	r24, 0x45	; 69
    3f3c:	80 93 bc 00 	sts	0x00BC, r24
}
    3f40:	08 95       	ret

00003f42 <twi_setAddress>:
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
    3f42:	88 0f       	add	r24, r24
    3f44:	80 93 ba 00 	sts	0x00BA, r24
}
    3f48:	08 95       	ret

00003f4a <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3f4a:	41 32       	cpi	r20, 0x21	; 33
    3f4c:	a0 f5       	brcc	.+104    	; 0x3fb6 <twi_readFrom+0x6c>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    3f4e:	90 91 04 07 	lds	r25, 0x0704
    3f52:	99 23       	and	r25, r25
    3f54:	e1 f7       	brne	.-8      	; 0x3f4e <twi_readFrom+0x4>
    continue;
  }
  twi_state = TWI_MRX;
    3f56:	91 e0       	ldi	r25, 0x01	; 1
    3f58:	90 93 04 07 	sts	0x0704, r25
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    3f5c:	9f ef       	ldi	r25, 0xFF	; 255
    3f5e:	90 93 03 07 	sts	0x0703, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    3f62:	10 92 e1 06 	sts	0x06E1, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    3f66:	94 2f       	mov	r25, r20
    3f68:	91 50       	subi	r25, 0x01	; 1
    3f6a:	90 93 e2 06 	sts	0x06E2, r25
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
  twi_slarw |= address << 1;
    3f6e:	88 0f       	add	r24, r24
    3f70:	81 60       	ori	r24, 0x01	; 1
    3f72:	80 93 e0 06 	sts	0x06E0, r24

  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    3f76:	85 ee       	ldi	r24, 0xE5	; 229
    3f78:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    3f7c:	80 91 04 07 	lds	r24, 0x0704
    3f80:	81 30       	cpi	r24, 0x01	; 1
    3f82:	e1 f3       	breq	.-8      	; 0x3f7c <twi_readFrom+0x32>
    continue;
  }

  if (twi_masterBufferIndex < length)
    3f84:	80 91 e1 06 	lds	r24, 0x06E1
    3f88:	84 17       	cp	r24, r20
    3f8a:	90 f0       	brcs	.+36     	; 0x3fb0 <twi_readFrom+0x66>
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    3f8c:	44 23       	and	r20, r20
    3f8e:	71 f0       	breq	.+28     	; 0x3fac <twi_readFrom+0x62>
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    data[i] = twi_masterBuffer[i];
    3f94:	fb 01       	movw	r30, r22
    3f96:	e2 0f       	add	r30, r18
    3f98:	f3 1f       	adc	r31, r19
    3f9a:	d9 01       	movw	r26, r18
    3f9c:	ad 51       	subi	r26, 0x1D	; 29
    3f9e:	b9 4f       	sbci	r27, 0xF9	; 249
    3fa0:	9c 91       	ld	r25, X
    3fa2:	90 83       	st	Z, r25
    3fa4:	2f 5f       	subi	r18, 0xFF	; 255
    3fa6:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    3fa8:	24 17       	cp	r18, r20
    3faa:	a0 f3       	brcs	.-24     	; 0x3f94 <twi_readFrom+0x4a>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    3fac:	84 2f       	mov	r24, r20
    3fae:	08 95       	ret
  while(TWI_MRX == twi_state){
    continue;
  }

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;
    3fb0:	40 91 e1 06 	lds	r20, 0x06E1
    3fb4:	eb cf       	rjmp	.-42     	; 0x3f8c <twi_readFrom+0x42>
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3fb6:	40 e0       	ldi	r20, 0x00	; 0
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    3fb8:	84 2f       	mov	r24, r20
    3fba:	08 95       	ret

00003fbc <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait)
{
    3fbc:	cf 93       	push	r28
    3fbe:	df 93       	push	r29
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3fc0:	41 32       	cpi	r20, 0x21	; 33
    3fc2:	08 f0       	brcs	.+2      	; 0x3fc6 <twi_writeTo+0xa>
    3fc4:	43 c0       	rjmp	.+134    	; 0x404c <twi_writeTo+0x90>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    3fc6:	90 91 04 07 	lds	r25, 0x0704
    3fca:	99 23       	and	r25, r25
    3fcc:	e1 f7       	brne	.-8      	; 0x3fc6 <twi_writeTo+0xa>
    continue;
  }
  twi_state = TWI_MTX;
    3fce:	92 e0       	ldi	r25, 0x02	; 2
    3fd0:	90 93 04 07 	sts	0x0704, r25
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    3fd4:	9f ef       	ldi	r25, 0xFF	; 255
    3fd6:	90 93 03 07 	sts	0x0703, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    3fda:	10 92 e1 06 	sts	0x06E1, r1
  twi_masterBufferLength = length;
    3fde:	40 93 e2 06 	sts	0x06E2, r20
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    3fe2:	44 23       	and	r20, r20
    3fe4:	69 f0       	breq	.+26     	; 0x4000 <twi_writeTo+0x44>
    3fe6:	e0 e0       	ldi	r30, 0x00	; 0
    3fe8:	f0 e0       	ldi	r31, 0x00	; 0
    twi_masterBuffer[i] = data[i];
    3fea:	df 01       	movw	r26, r30
    3fec:	ad 51       	subi	r26, 0x1D	; 29
    3fee:	b9 4f       	sbci	r27, 0xF9	; 249
    3ff0:	eb 01       	movw	r28, r22
    3ff2:	ce 0f       	add	r28, r30
    3ff4:	df 1f       	adc	r29, r31
    3ff6:	98 81       	ld	r25, Y
    3ff8:	9c 93       	st	X, r25
    3ffa:	31 96       	adiw	r30, 0x01	; 1
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    3ffc:	e4 17       	cp	r30, r20
    3ffe:	a8 f3       	brcs	.-22     	; 0x3fea <twi_writeTo+0x2e>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
  twi_slarw |= address << 1;
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	88 0f       	add	r24, r24
    4004:	99 1f       	adc	r25, r25
    4006:	80 93 e0 06 	sts	0x06E0, r24
  
  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    400a:	85 ee       	ldi	r24, 0xE5	; 229
    400c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    4010:	22 23       	and	r18, r18
    4012:	81 f4       	brne	.+32     	; 0x4034 <twi_writeTo+0x78>
    continue;
  }
  
  if (twi_error == 0xFF)
    4014:	80 91 03 07 	lds	r24, 0x0703
    4018:	8f 3f       	cpi	r24, 0xFF	; 255
    401a:	a1 f0       	breq	.+40     	; 0x4044 <twi_writeTo+0x88>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    401c:	80 91 03 07 	lds	r24, 0x0703
    4020:	80 32       	cpi	r24, 0x20	; 32
    4022:	c1 f0       	breq	.+48     	; 0x4054 <twi_writeTo+0x98>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    4024:	80 91 03 07 	lds	r24, 0x0703
    4028:	80 33       	cpi	r24, 0x30	; 48
    402a:	b1 f0       	breq	.+44     	; 0x4058 <twi_writeTo+0x9c>
    402c:	84 e0       	ldi	r24, 0x04	; 4
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    402e:	df 91       	pop	r29
    4030:	cf 91       	pop	r28
    4032:	08 95       	ret
  
  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    4034:	80 91 04 07 	lds	r24, 0x0704
    4038:	82 30       	cpi	r24, 0x02	; 2
    403a:	e1 f3       	breq	.-8      	; 0x4034 <twi_writeTo+0x78>
    continue;
  }
  
  if (twi_error == 0xFF)
    403c:	80 91 03 07 	lds	r24, 0x0703
    4040:	8f 3f       	cpi	r24, 0xFF	; 255
    4042:	61 f7       	brne	.-40     	; 0x401c <twi_writeTo+0x60>
    4044:	80 e0       	ldi	r24, 0x00	; 0
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    4046:	df 91       	pop	r29
    4048:	cf 91       	pop	r28
    404a:	08 95       	ret
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    404c:	81 e0       	ldi	r24, 0x01	; 1
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    404e:	df 91       	pop	r29
    4050:	cf 91       	pop	r28
    4052:	08 95       	ret
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    4054:	82 e0       	ldi	r24, 0x02	; 2
    4056:	eb cf       	rjmp	.-42     	; 0x402e <twi_writeTo+0x72>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    4058:	83 e0       	ldi	r24, 0x03	; 3
    405a:	e9 cf       	rjmp	.-46     	; 0x402e <twi_writeTo+0x72>

0000405c <twi_transmit>:
uint8_t twi_transmit(uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    405c:	61 32       	cpi	r22, 0x21	; 33
    405e:	d0 f4       	brcc	.+52     	; 0x4094 <twi_transmit+0x38>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    4060:	20 91 04 07 	lds	r18, 0x0704
    4064:	24 30       	cpi	r18, 0x04	; 4
    4066:	11 f0       	breq	.+4      	; 0x406c <twi_transmit+0x10>
    4068:	82 e0       	ldi	r24, 0x02	; 2
    406a:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    406c:	60 93 29 07 	sts	0x0729, r22
  for(i = 0; i < length; ++i){
    4070:	66 23       	and	r22, r22
    4072:	71 f0       	breq	.+28     	; 0x4090 <twi_transmit+0x34>
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	30 e0       	ldi	r19, 0x00	; 0
    twi_txBuffer[i] = data[i];
    4078:	f9 01       	movw	r30, r18
    407a:	e4 5d       	subi	r30, 0xD4	; 212
    407c:	f8 4f       	sbci	r31, 0xF8	; 248
    407e:	dc 01       	movw	r26, r24
    4080:	a2 0f       	add	r26, r18
    4082:	b3 1f       	adc	r27, r19
    4084:	4c 91       	ld	r20, X
    4086:	40 83       	st	Z, r20
    4088:	2f 5f       	subi	r18, 0xFF	; 255
    408a:	3f 4f       	sbci	r19, 0xFF	; 255
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    408c:	26 17       	cp	r18, r22
    408e:	a0 f3       	brcs	.-24     	; 0x4078 <twi_transmit+0x1c>
    4090:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    4092:	08 95       	ret
uint8_t twi_transmit(uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4094:	81 e0       	ldi	r24, 0x01	; 1
    4096:	08 95       	ret

00004098 <twi_attachSlaveRxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    4098:	90 93 27 07 	sts	0x0727, r25
    409c:	80 93 26 07 	sts	0x0726, r24
}
    40a0:	08 95       	ret

000040a2 <twi_attachSlaveTxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    40a2:	90 93 2b 07 	sts	0x072B, r25
    40a6:	80 93 2a 07 	sts	0x072A, r24
}
    40aa:	08 95       	ret

000040ac <twi_reply>:
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    40ac:	88 23       	and	r24, r24
    40ae:	21 f4       	brne	.+8      	; 0x40b8 <twi_reply+0xc>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    40b0:	85 e8       	ldi	r24, 0x85	; 133
    40b2:	80 93 bc 00 	sts	0x00BC, r24
    40b6:	08 95       	ret
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    40b8:	85 ec       	ldi	r24, 0xC5	; 197
    40ba:	80 93 bc 00 	sts	0x00BC, r24
    40be:	08 95       	ret

000040c0 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    40c0:	85 ed       	ldi	r24, 0xD5	; 213
    40c2:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    40c6:	80 91 bc 00 	lds	r24, 0x00BC
    40ca:	84 fd       	sbrc	r24, 4
    40cc:	fc cf       	rjmp	.-8      	; 0x40c6 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    40ce:	10 92 04 07 	sts	0x0704, r1
}
    40d2:	08 95       	ret

000040d4 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    40d4:	85 ec       	ldi	r24, 0xC5	; 197
    40d6:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    40da:	10 92 04 07 	sts	0x0704, r1
}
    40de:	08 95       	ret

000040e0 <__vector_24>:

SIGNAL(TWI_vect)
{
    40e0:	1f 92       	push	r1
    40e2:	0f 92       	push	r0
    40e4:	0f b6       	in	r0, 0x3f	; 63
    40e6:	0f 92       	push	r0
    40e8:	11 24       	eor	r1, r1
    40ea:	2f 93       	push	r18
    40ec:	3f 93       	push	r19
    40ee:	4f 93       	push	r20
    40f0:	5f 93       	push	r21
    40f2:	6f 93       	push	r22
    40f4:	7f 93       	push	r23
    40f6:	8f 93       	push	r24
    40f8:	9f 93       	push	r25
    40fa:	af 93       	push	r26
    40fc:	bf 93       	push	r27
    40fe:	ef 93       	push	r30
    4100:	ff 93       	push	r31
  switch(TW_STATUS){
    4102:	80 91 b9 00 	lds	r24, 0x00B9
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	a0 e0       	ldi	r26, 0x00	; 0
    410a:	b0 e0       	ldi	r27, 0x00	; 0
    410c:	88 7f       	andi	r24, 0xF8	; 248
    410e:	90 70       	andi	r25, 0x00	; 0
    4110:	a0 70       	andi	r26, 0x00	; 0
    4112:	b0 70       	andi	r27, 0x00	; 0
    4114:	89 3c       	cpi	r24, 0xC9	; 201
    4116:	91 05       	cpc	r25, r1
    4118:	98 f5       	brcc	.+102    	; 0x4180 <__vector_24+0xa0>
    411a:	8c 5c       	subi	r24, 0xCC	; 204
    411c:	9f 4f       	sbci	r25, 0xFF	; 255
    411e:	fc 01       	movw	r30, r24
    4120:	ee 0f       	add	r30, r30
    4122:	ff 1f       	adc	r31, r31
    4124:	05 90       	lpm	r0, Z+
    4126:	f4 91       	lpm	r31, Z+
    4128:	e0 2d       	mov	r30, r0
    412a:	09 94       	ijmp
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    412c:	84 e0       	ldi	r24, 0x04	; 4
    412e:	80 93 04 07 	sts	0x0704, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4132:	10 92 28 07 	sts	0x0728, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4136:	10 92 29 07 	sts	0x0729, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    413a:	e0 91 2a 07 	lds	r30, 0x072A
    413e:	f0 91 2b 07 	lds	r31, 0x072B
    4142:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4144:	80 91 29 07 	lds	r24, 0x0729
    4148:	88 23       	and	r24, r24
    414a:	29 f4       	brne	.+10     	; 0x4156 <__vector_24+0x76>
        twi_txBufferLength = 1;
    414c:	81 e0       	ldi	r24, 0x01	; 1
    414e:	80 93 29 07 	sts	0x0729, r24
        twi_txBuffer[0] = 0x00;
    4152:	10 92 2c 07 	sts	0x072C, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4156:	80 91 28 07 	lds	r24, 0x0728
    415a:	e8 2f       	mov	r30, r24
    415c:	f0 e0       	ldi	r31, 0x00	; 0
    415e:	e4 5d       	subi	r30, 0xD4	; 212
    4160:	f8 4f       	sbci	r31, 0xF8	; 248
    4162:	90 81       	ld	r25, Z
    4164:	90 93 bb 00 	sts	0x00BB, r25
    4168:	8f 5f       	subi	r24, 0xFF	; 255
    416a:	80 93 28 07 	sts	0x0728, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    416e:	90 91 28 07 	lds	r25, 0x0728
    4172:	80 91 29 07 	lds	r24, 0x0729
    4176:	98 17       	cp	r25, r24
    4178:	c8 f4       	brcc	.+50     	; 0x41ac <__vector_24+0xcc>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    417a:	85 ec       	ldi	r24, 0xC5	; 197
    417c:	80 93 bc 00 	sts	0x00BC, r24
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    4180:	ff 91       	pop	r31
    4182:	ef 91       	pop	r30
    4184:	bf 91       	pop	r27
    4186:	af 91       	pop	r26
    4188:	9f 91       	pop	r25
    418a:	8f 91       	pop	r24
    418c:	7f 91       	pop	r23
    418e:	6f 91       	pop	r22
    4190:	5f 91       	pop	r21
    4192:	4f 91       	pop	r20
    4194:	3f 91       	pop	r19
    4196:	2f 91       	pop	r18
    4198:	0f 90       	pop	r0
    419a:	0f be       	out	0x3f, r0	; 63
    419c:	0f 90       	pop	r0
    419e:	1f 90       	pop	r1
    41a0:	18 95       	reti
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    41a2:	80 91 05 07 	lds	r24, 0x0705
    41a6:	80 32       	cpi	r24, 0x20	; 32
    41a8:	08 f4       	brcc	.+2      	; 0x41ac <__vector_24+0xcc>
    41aa:	9c c0       	rjmp	.+312    	; 0x42e4 <__vector_24+0x204>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    41ac:	85 e8       	ldi	r24, 0x85	; 133
    41ae:	80 93 bc 00 	sts	0x00BC, r24
    41b2:	e6 cf       	rjmp	.-52     	; 0x4180 <__vector_24+0xa0>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    41b4:	80 91 e1 06 	lds	r24, 0x06E1
    41b8:	90 91 bb 00 	lds	r25, 0x00BB
    41bc:	e8 2f       	mov	r30, r24
    41be:	f0 e0       	ldi	r31, 0x00	; 0
    41c0:	ed 51       	subi	r30, 0x1D	; 29
    41c2:	f9 4f       	sbci	r31, 0xF9	; 249
    41c4:	90 83       	st	Z, r25
    41c6:	8f 5f       	subi	r24, 0xFF	; 255
    41c8:	80 93 e1 06 	sts	0x06E1, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    41cc:	90 91 e1 06 	lds	r25, 0x06E1
    41d0:	80 91 e2 06 	lds	r24, 0x06E2
    41d4:	98 17       	cp	r25, r24
    41d6:	50 f7       	brcc	.-44     	; 0x41ac <__vector_24+0xcc>
    41d8:	d0 cf       	rjmp	.-96     	; 0x417a <__vector_24+0x9a>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    41da:	80 91 e1 06 	lds	r24, 0x06E1
    41de:	90 91 bb 00 	lds	r25, 0x00BB
    41e2:	e8 2f       	mov	r30, r24
    41e4:	f0 e0       	ldi	r31, 0x00	; 0
    41e6:	ed 51       	subi	r30, 0x1D	; 29
    41e8:	f9 4f       	sbci	r31, 0xF9	; 249
    41ea:	90 83       	st	Z, r25
    41ec:	8f 5f       	subi	r24, 0xFF	; 255
    41ee:	80 93 e1 06 	sts	0x06E1, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    41f2:	85 ed       	ldi	r24, 0xD5	; 213
    41f4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    41f8:	80 91 bc 00 	lds	r24, 0x00BC
    41fc:	84 fd       	sbrc	r24, 4
    41fe:	fc cf       	rjmp	.-8      	; 0x41f8 <__vector_24+0x118>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    4200:	10 92 04 07 	sts	0x0704, r1
    4204:	bd cf       	rjmp	.-134    	; 0x4180 <__vector_24+0xa0>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4206:	85 ec       	ldi	r24, 0xC5	; 197
    4208:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    420c:	10 92 04 07 	sts	0x0704, r1
      break;
    4210:	b7 cf       	rjmp	.-146    	; 0x4180 <__vector_24+0xa0>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4212:	83 e0       	ldi	r24, 0x03	; 3
    4214:	80 93 04 07 	sts	0x0704, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4218:	10 92 05 07 	sts	0x0705, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    421c:	85 ec       	ldi	r24, 0xC5	; 197
    421e:	80 93 bc 00 	sts	0x00BC, r24
    4222:	ae cf       	rjmp	.-164    	; 0x4180 <__vector_24+0xa0>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4224:	10 92 03 07 	sts	0x0703, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4228:	85 ed       	ldi	r24, 0xD5	; 213
    422a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    422e:	80 91 bc 00 	lds	r24, 0x00BC
    4232:	84 fd       	sbrc	r24, 4
    4234:	fc cf       	rjmp	.-8      	; 0x422e <__vector_24+0x14e>
    4236:	e4 cf       	rjmp	.-56     	; 0x4200 <__vector_24+0x120>
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4238:	80 91 e0 06 	lds	r24, 0x06E0
    423c:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4240:	85 ec       	ldi	r24, 0xC5	; 197
    4242:	80 93 bc 00 	sts	0x00BC, r24
    4246:	9c cf       	rjmp	.-200    	; 0x4180 <__vector_24+0xa0>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4248:	90 91 e1 06 	lds	r25, 0x06E1
    424c:	80 91 e2 06 	lds	r24, 0x06E2
    4250:	98 17       	cp	r25, r24
    4252:	08 f4       	brcc	.+2      	; 0x4256 <__vector_24+0x176>
    4254:	5e c0       	rjmp	.+188    	; 0x4312 <__vector_24+0x232>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4256:	85 ed       	ldi	r24, 0xD5	; 213
    4258:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    425c:	80 91 bc 00 	lds	r24, 0x00BC
    4260:	84 fd       	sbrc	r24, 4
    4262:	fc cf       	rjmp	.-8      	; 0x425c <__vector_24+0x17c>
    4264:	cd cf       	rjmp	.-102    	; 0x4200 <__vector_24+0x120>
      }else{
        twi_stop();
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    4266:	80 e2       	ldi	r24, 0x20	; 32
    4268:	80 93 03 07 	sts	0x0703, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    426c:	85 ed       	ldi	r24, 0xD5	; 213
    426e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4272:	80 91 bc 00 	lds	r24, 0x00BC
    4276:	84 fd       	sbrc	r24, 4
    4278:	fc cf       	rjmp	.-8      	; 0x4272 <__vector_24+0x192>
    427a:	c2 cf       	rjmp	.-124    	; 0x4200 <__vector_24+0x120>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    427c:	80 91 05 07 	lds	r24, 0x0705
    4280:	80 32       	cpi	r24, 0x20	; 32
    4282:	08 f4       	brcc	.+2      	; 0x4286 <__vector_24+0x1a6>
    4284:	3f c0       	rjmp	.+126    	; 0x4304 <__vector_24+0x224>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4286:	85 ed       	ldi	r24, 0xD5	; 213
    4288:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    428c:	80 91 bc 00 	lds	r24, 0x00BC
    4290:	84 fd       	sbrc	r24, 4
    4292:	fc cf       	rjmp	.-8      	; 0x428c <__vector_24+0x1ac>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    4294:	10 92 04 07 	sts	0x0704, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4298:	60 91 05 07 	lds	r22, 0x0705
    429c:	e0 91 26 07 	lds	r30, 0x0726
    42a0:	f0 91 27 07 	lds	r31, 0x0727
    42a4:	86 e0       	ldi	r24, 0x06	; 6
    42a6:	97 e0       	ldi	r25, 0x07	; 7
    42a8:	70 e0       	ldi	r23, 0x00	; 0
    42aa:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    42ac:	10 92 05 07 	sts	0x0705, r1
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    42b0:	85 ec       	ldi	r24, 0xC5	; 197
    42b2:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    42b6:	10 92 04 07 	sts	0x0704, r1
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      break;
    42ba:	62 cf       	rjmp	.-316    	; 0x4180 <__vector_24+0xa0>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    42bc:	80 e3       	ldi	r24, 0x30	; 48
    42be:	80 93 03 07 	sts	0x0703, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    42c2:	85 ed       	ldi	r24, 0xD5	; 213
    42c4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    42c8:	80 91 bc 00 	lds	r24, 0x00BC
    42cc:	84 fd       	sbrc	r24, 4
    42ce:	fc cf       	rjmp	.-8      	; 0x42c8 <__vector_24+0x1e8>
    42d0:	97 cf       	rjmp	.-210    	; 0x4200 <__vector_24+0x120>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    42d2:	88 e3       	ldi	r24, 0x38	; 56
    42d4:	80 93 03 07 	sts	0x0703, r24
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    42d8:	85 ec       	ldi	r24, 0xC5	; 197
    42da:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    42de:	10 92 04 07 	sts	0x0704, r1
    42e2:	4e cf       	rjmp	.-356    	; 0x4180 <__vector_24+0xa0>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    42e4:	80 91 05 07 	lds	r24, 0x0705
    42e8:	90 91 bb 00 	lds	r25, 0x00BB
    42ec:	e8 2f       	mov	r30, r24
    42ee:	f0 e0       	ldi	r31, 0x00	; 0
    42f0:	ea 5f       	subi	r30, 0xFA	; 250
    42f2:	f8 4f       	sbci	r31, 0xF8	; 248
    42f4:	90 83       	st	Z, r25
    42f6:	8f 5f       	subi	r24, 0xFF	; 255
    42f8:	80 93 05 07 	sts	0x0705, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    42fc:	85 ec       	ldi	r24, 0xC5	; 197
    42fe:	80 93 bc 00 	sts	0x00BC, r24
    4302:	3e cf       	rjmp	.-388    	; 0x4180 <__vector_24+0xa0>
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4304:	e0 91 05 07 	lds	r30, 0x0705
    4308:	f0 e0       	ldi	r31, 0x00	; 0
    430a:	ea 5f       	subi	r30, 0xFA	; 250
    430c:	f8 4f       	sbci	r31, 0xF8	; 248
    430e:	10 82       	st	Z, r1
    4310:	ba cf       	rjmp	.-140    	; 0x4286 <__vector_24+0x1a6>
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4312:	80 91 e1 06 	lds	r24, 0x06E1
    4316:	e8 2f       	mov	r30, r24
    4318:	f0 e0       	ldi	r31, 0x00	; 0
    431a:	ed 51       	subi	r30, 0x1D	; 29
    431c:	f9 4f       	sbci	r31, 0xF9	; 249
    431e:	90 81       	ld	r25, Z
    4320:	90 93 bb 00 	sts	0x00BB, r25
    4324:	8f 5f       	subi	r24, 0xFF	; 255
    4326:	80 93 e1 06 	sts	0x06E1, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    432a:	85 ec       	ldi	r24, 0xC5	; 197
    432c:	80 93 bc 00 	sts	0x00BC, r24
    4330:	27 cf       	rjmp	.-434    	; 0x4180 <__vector_24+0xa0>

00004332 <__fixunssfsi>:
    4332:	ef 92       	push	r14
    4334:	ff 92       	push	r15
    4336:	0f 93       	push	r16
    4338:	1f 93       	push	r17
    433a:	7b 01       	movw	r14, r22
    433c:	8c 01       	movw	r16, r24
    433e:	20 e0       	ldi	r18, 0x00	; 0
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	40 e0       	ldi	r20, 0x00	; 0
    4344:	5f e4       	ldi	r21, 0x4F	; 79
    4346:	0e 94 49 25 	call	0x4a92	; 0x4a92 <__gesf2>
    434a:	88 23       	and	r24, r24
    434c:	8c f0       	brlt	.+34     	; 0x4370 <__fixunssfsi+0x3e>
    434e:	c8 01       	movw	r24, r16
    4350:	b7 01       	movw	r22, r14
    4352:	20 e0       	ldi	r18, 0x00	; 0
    4354:	30 e0       	ldi	r19, 0x00	; 0
    4356:	40 e0       	ldi	r20, 0x00	; 0
    4358:	5f e4       	ldi	r21, 0x4F	; 79
    435a:	0e 94 15 23 	call	0x462a	; 0x462a <__subsf3>
    435e:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <__fixsfsi>
    4362:	9b 01       	movw	r18, r22
    4364:	ac 01       	movw	r20, r24
    4366:	20 50       	subi	r18, 0x00	; 0
    4368:	30 40       	sbci	r19, 0x00	; 0
    436a:	40 40       	sbci	r20, 0x00	; 0
    436c:	50 48       	sbci	r21, 0x80	; 128
    436e:	06 c0       	rjmp	.+12     	; 0x437c <__fixunssfsi+0x4a>
    4370:	c8 01       	movw	r24, r16
    4372:	b7 01       	movw	r22, r14
    4374:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <__fixsfsi>
    4378:	9b 01       	movw	r18, r22
    437a:	ac 01       	movw	r20, r24
    437c:	b9 01       	movw	r22, r18
    437e:	ca 01       	movw	r24, r20
    4380:	1f 91       	pop	r17
    4382:	0f 91       	pop	r16
    4384:	ff 90       	pop	r15
    4386:	ef 90       	pop	r14
    4388:	08 95       	ret

0000438a <_fpadd_parts>:
    438a:	a0 e0       	ldi	r26, 0x00	; 0
    438c:	b0 e0       	ldi	r27, 0x00	; 0
    438e:	eb ec       	ldi	r30, 0xCB	; 203
    4390:	f1 e2       	ldi	r31, 0x21	; 33
    4392:	0c 94 11 29 	jmp	0x5222	; 0x5222 <__prologue_saves__+0x4>
    4396:	fc 01       	movw	r30, r24
    4398:	2b 01       	movw	r4, r22
    439a:	ea 01       	movw	r28, r20
    439c:	80 81       	ld	r24, Z
    439e:	82 30       	cpi	r24, 0x02	; 2
    43a0:	08 f4       	brcc	.+2      	; 0x43a4 <_fpadd_parts+0x1a>
    43a2:	3d c1       	rjmp	.+634    	; 0x461e <_fpadd_parts+0x294>
    43a4:	db 01       	movw	r26, r22
    43a6:	9c 91       	ld	r25, X
    43a8:	92 30       	cpi	r25, 0x02	; 2
    43aa:	08 f4       	brcc	.+2      	; 0x43ae <_fpadd_parts+0x24>
    43ac:	37 c1       	rjmp	.+622    	; 0x461c <_fpadd_parts+0x292>
    43ae:	84 30       	cpi	r24, 0x04	; 4
    43b0:	69 f4       	brne	.+26     	; 0x43cc <_fpadd_parts+0x42>
    43b2:	94 30       	cpi	r25, 0x04	; 4
    43b4:	09 f0       	breq	.+2      	; 0x43b8 <_fpadd_parts+0x2e>
    43b6:	33 c1       	rjmp	.+614    	; 0x461e <_fpadd_parts+0x294>
    43b8:	91 81       	ldd	r25, Z+1	; 0x01
    43ba:	11 96       	adiw	r26, 0x01	; 1
    43bc:	8c 91       	ld	r24, X
    43be:	11 97       	sbiw	r26, 0x01	; 1
    43c0:	98 17       	cp	r25, r24
    43c2:	09 f4       	brne	.+2      	; 0x43c6 <_fpadd_parts+0x3c>
    43c4:	2c c1       	rjmp	.+600    	; 0x461e <_fpadd_parts+0x294>
    43c6:	e6 e9       	ldi	r30, 0x96	; 150
    43c8:	f1 e0       	ldi	r31, 0x01	; 1
    43ca:	29 c1       	rjmp	.+594    	; 0x461e <_fpadd_parts+0x294>
    43cc:	94 30       	cpi	r25, 0x04	; 4
    43ce:	09 f4       	brne	.+2      	; 0x43d2 <_fpadd_parts+0x48>
    43d0:	25 c1       	rjmp	.+586    	; 0x461c <_fpadd_parts+0x292>
    43d2:	92 30       	cpi	r25, 0x02	; 2
    43d4:	a9 f4       	brne	.+42     	; 0x4400 <_fpadd_parts+0x76>
    43d6:	82 30       	cpi	r24, 0x02	; 2
    43d8:	09 f0       	breq	.+2      	; 0x43dc <_fpadd_parts+0x52>
    43da:	21 c1       	rjmp	.+578    	; 0x461e <_fpadd_parts+0x294>
    43dc:	9f 01       	movw	r18, r30
    43de:	88 e0       	ldi	r24, 0x08	; 8
    43e0:	d9 01       	movw	r26, r18
    43e2:	0d 90       	ld	r0, X+
    43e4:	9d 01       	movw	r18, r26
    43e6:	da 01       	movw	r26, r20
    43e8:	0d 92       	st	X+, r0
    43ea:	ad 01       	movw	r20, r26
    43ec:	81 50       	subi	r24, 0x01	; 1
    43ee:	c1 f7       	brne	.-16     	; 0x43e0 <_fpadd_parts+0x56>
    43f0:	d2 01       	movw	r26, r4
    43f2:	11 96       	adiw	r26, 0x01	; 1
    43f4:	8c 91       	ld	r24, X
    43f6:	11 97       	sbiw	r26, 0x01	; 1
    43f8:	91 81       	ldd	r25, Z+1	; 0x01
    43fa:	89 23       	and	r24, r25
    43fc:	89 83       	std	Y+1, r24	; 0x01
    43fe:	0c c1       	rjmp	.+536    	; 0x4618 <_fpadd_parts+0x28e>
    4400:	82 30       	cpi	r24, 0x02	; 2
    4402:	09 f4       	brne	.+2      	; 0x4406 <_fpadd_parts+0x7c>
    4404:	0b c1       	rjmp	.+534    	; 0x461c <_fpadd_parts+0x292>
    4406:	82 81       	ldd	r24, Z+2	; 0x02
    4408:	93 81       	ldd	r25, Z+3	; 0x03
    440a:	db 01       	movw	r26, r22
    440c:	12 96       	adiw	r26, 0x02	; 2
    440e:	4d 91       	ld	r20, X+
    4410:	5c 91       	ld	r21, X
    4412:	13 97       	sbiw	r26, 0x03	; 3
    4414:	e4 80       	ldd	r14, Z+4	; 0x04
    4416:	f5 80       	ldd	r15, Z+5	; 0x05
    4418:	06 81       	ldd	r16, Z+6	; 0x06
    441a:	17 81       	ldd	r17, Z+7	; 0x07
    441c:	14 96       	adiw	r26, 0x04	; 4
    441e:	ad 90       	ld	r10, X+
    4420:	bd 90       	ld	r11, X+
    4422:	cd 90       	ld	r12, X+
    4424:	dc 90       	ld	r13, X
    4426:	17 97       	sbiw	r26, 0x07	; 7
    4428:	9c 01       	movw	r18, r24
    442a:	24 1b       	sub	r18, r20
    442c:	35 0b       	sbc	r19, r21
    442e:	b9 01       	movw	r22, r18
    4430:	37 ff       	sbrs	r19, 7
    4432:	04 c0       	rjmp	.+8      	; 0x443c <_fpadd_parts+0xb2>
    4434:	66 27       	eor	r22, r22
    4436:	77 27       	eor	r23, r23
    4438:	62 1b       	sub	r22, r18
    443a:	73 0b       	sbc	r23, r19
    443c:	60 32       	cpi	r22, 0x20	; 32
    443e:	71 05       	cpc	r23, r1
    4440:	0c f0       	brlt	.+2      	; 0x4444 <_fpadd_parts+0xba>
    4442:	62 c0       	rjmp	.+196    	; 0x4508 <_fpadd_parts+0x17e>
    4444:	12 16       	cp	r1, r18
    4446:	13 06       	cpc	r1, r19
    4448:	6c f5       	brge	.+90     	; 0x44a4 <_fpadd_parts+0x11a>
    444a:	35 01       	movw	r6, r10
    444c:	46 01       	movw	r8, r12
    444e:	06 2e       	mov	r0, r22
    4450:	04 c0       	rjmp	.+8      	; 0x445a <_fpadd_parts+0xd0>
    4452:	96 94       	lsr	r9
    4454:	87 94       	ror	r8
    4456:	77 94       	ror	r7
    4458:	67 94       	ror	r6
    445a:	0a 94       	dec	r0
    445c:	d2 f7       	brpl	.-12     	; 0x4452 <_fpadd_parts+0xc8>
    445e:	21 e0       	ldi	r18, 0x01	; 1
    4460:	30 e0       	ldi	r19, 0x00	; 0
    4462:	40 e0       	ldi	r20, 0x00	; 0
    4464:	50 e0       	ldi	r21, 0x00	; 0
    4466:	04 c0       	rjmp	.+8      	; 0x4470 <_fpadd_parts+0xe6>
    4468:	22 0f       	add	r18, r18
    446a:	33 1f       	adc	r19, r19
    446c:	44 1f       	adc	r20, r20
    446e:	55 1f       	adc	r21, r21
    4470:	6a 95       	dec	r22
    4472:	d2 f7       	brpl	.-12     	; 0x4468 <_fpadd_parts+0xde>
    4474:	21 50       	subi	r18, 0x01	; 1
    4476:	30 40       	sbci	r19, 0x00	; 0
    4478:	40 40       	sbci	r20, 0x00	; 0
    447a:	50 40       	sbci	r21, 0x00	; 0
    447c:	2a 21       	and	r18, r10
    447e:	3b 21       	and	r19, r11
    4480:	4c 21       	and	r20, r12
    4482:	5d 21       	and	r21, r13
    4484:	21 15       	cp	r18, r1
    4486:	31 05       	cpc	r19, r1
    4488:	41 05       	cpc	r20, r1
    448a:	51 05       	cpc	r21, r1
    448c:	21 f0       	breq	.+8      	; 0x4496 <_fpadd_parts+0x10c>
    448e:	21 e0       	ldi	r18, 0x01	; 1
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	40 e0       	ldi	r20, 0x00	; 0
    4494:	50 e0       	ldi	r21, 0x00	; 0
    4496:	59 01       	movw	r10, r18
    4498:	6a 01       	movw	r12, r20
    449a:	a6 28       	or	r10, r6
    449c:	b7 28       	or	r11, r7
    449e:	c8 28       	or	r12, r8
    44a0:	d9 28       	or	r13, r9
    44a2:	3d c0       	rjmp	.+122    	; 0x451e <_fpadd_parts+0x194>
    44a4:	21 15       	cp	r18, r1
    44a6:	31 05       	cpc	r19, r1
    44a8:	d1 f1       	breq	.+116    	; 0x451e <_fpadd_parts+0x194>
    44aa:	86 0f       	add	r24, r22
    44ac:	97 1f       	adc	r25, r23
    44ae:	37 01       	movw	r6, r14
    44b0:	48 01       	movw	r8, r16
    44b2:	06 2e       	mov	r0, r22
    44b4:	04 c0       	rjmp	.+8      	; 0x44be <_fpadd_parts+0x134>
    44b6:	96 94       	lsr	r9
    44b8:	87 94       	ror	r8
    44ba:	77 94       	ror	r7
    44bc:	67 94       	ror	r6
    44be:	0a 94       	dec	r0
    44c0:	d2 f7       	brpl	.-12     	; 0x44b6 <_fpadd_parts+0x12c>
    44c2:	21 e0       	ldi	r18, 0x01	; 1
    44c4:	30 e0       	ldi	r19, 0x00	; 0
    44c6:	40 e0       	ldi	r20, 0x00	; 0
    44c8:	50 e0       	ldi	r21, 0x00	; 0
    44ca:	04 c0       	rjmp	.+8      	; 0x44d4 <_fpadd_parts+0x14a>
    44cc:	22 0f       	add	r18, r18
    44ce:	33 1f       	adc	r19, r19
    44d0:	44 1f       	adc	r20, r20
    44d2:	55 1f       	adc	r21, r21
    44d4:	6a 95       	dec	r22
    44d6:	d2 f7       	brpl	.-12     	; 0x44cc <_fpadd_parts+0x142>
    44d8:	21 50       	subi	r18, 0x01	; 1
    44da:	30 40       	sbci	r19, 0x00	; 0
    44dc:	40 40       	sbci	r20, 0x00	; 0
    44de:	50 40       	sbci	r21, 0x00	; 0
    44e0:	2e 21       	and	r18, r14
    44e2:	3f 21       	and	r19, r15
    44e4:	40 23       	and	r20, r16
    44e6:	51 23       	and	r21, r17
    44e8:	21 15       	cp	r18, r1
    44ea:	31 05       	cpc	r19, r1
    44ec:	41 05       	cpc	r20, r1
    44ee:	51 05       	cpc	r21, r1
    44f0:	21 f0       	breq	.+8      	; 0x44fa <_fpadd_parts+0x170>
    44f2:	21 e0       	ldi	r18, 0x01	; 1
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	40 e0       	ldi	r20, 0x00	; 0
    44f8:	50 e0       	ldi	r21, 0x00	; 0
    44fa:	79 01       	movw	r14, r18
    44fc:	8a 01       	movw	r16, r20
    44fe:	e6 28       	or	r14, r6
    4500:	f7 28       	or	r15, r7
    4502:	08 29       	or	r16, r8
    4504:	19 29       	or	r17, r9
    4506:	0b c0       	rjmp	.+22     	; 0x451e <_fpadd_parts+0x194>
    4508:	48 17       	cp	r20, r24
    450a:	59 07       	cpc	r21, r25
    450c:	2c f0       	brlt	.+10     	; 0x4518 <_fpadd_parts+0x18e>
    450e:	ca 01       	movw	r24, r20
    4510:	ee 24       	eor	r14, r14
    4512:	ff 24       	eor	r15, r15
    4514:	87 01       	movw	r16, r14
    4516:	03 c0       	rjmp	.+6      	; 0x451e <_fpadd_parts+0x194>
    4518:	aa 24       	eor	r10, r10
    451a:	bb 24       	eor	r11, r11
    451c:	65 01       	movw	r12, r10
    451e:	21 81       	ldd	r18, Z+1	; 0x01
    4520:	f2 01       	movw	r30, r4
    4522:	31 81       	ldd	r19, Z+1	; 0x01
    4524:	23 17       	cp	r18, r19
    4526:	09 f4       	brne	.+2      	; 0x452a <_fpadd_parts+0x1a0>
    4528:	4a c0       	rjmp	.+148    	; 0x45be <_fpadd_parts+0x234>
    452a:	22 23       	and	r18, r18
    452c:	49 f0       	breq	.+18     	; 0x4540 <_fpadd_parts+0x1b6>
    452e:	a6 01       	movw	r20, r12
    4530:	95 01       	movw	r18, r10
    4532:	2e 19       	sub	r18, r14
    4534:	3f 09       	sbc	r19, r15
    4536:	40 0b       	sbc	r20, r16
    4538:	51 0b       	sbc	r21, r17
    453a:	79 01       	movw	r14, r18
    453c:	8a 01       	movw	r16, r20
    453e:	04 c0       	rjmp	.+8      	; 0x4548 <_fpadd_parts+0x1be>
    4540:	ea 18       	sub	r14, r10
    4542:	fb 08       	sbc	r15, r11
    4544:	0c 09       	sbc	r16, r12
    4546:	1d 09       	sbc	r17, r13
    4548:	17 fd       	sbrc	r17, 7
    454a:	0c c0       	rjmp	.+24     	; 0x4564 <_fpadd_parts+0x1da>
    454c:	19 82       	std	Y+1, r1	; 0x01
    454e:	9b 83       	std	Y+3, r25	; 0x03
    4550:	8a 83       	std	Y+2, r24	; 0x02
    4552:	ec 82       	std	Y+4, r14	; 0x04
    4554:	fd 82       	std	Y+5, r15	; 0x05
    4556:	0e 83       	std	Y+6, r16	; 0x06
    4558:	1f 83       	std	Y+7, r17	; 0x07
    455a:	8c 81       	ldd	r24, Y+4	; 0x04
    455c:	9d 81       	ldd	r25, Y+5	; 0x05
    455e:	ae 81       	ldd	r26, Y+6	; 0x06
    4560:	bf 81       	ldd	r27, Y+7	; 0x07
    4562:	1a c0       	rjmp	.+52     	; 0x4598 <_fpadd_parts+0x20e>
    4564:	21 e0       	ldi	r18, 0x01	; 1
    4566:	29 83       	std	Y+1, r18	; 0x01
    4568:	9b 83       	std	Y+3, r25	; 0x03
    456a:	8a 83       	std	Y+2, r24	; 0x02
    456c:	88 27       	eor	r24, r24
    456e:	99 27       	eor	r25, r25
    4570:	dc 01       	movw	r26, r24
    4572:	8e 19       	sub	r24, r14
    4574:	9f 09       	sbc	r25, r15
    4576:	a0 0b       	sbc	r26, r16
    4578:	b1 0b       	sbc	r27, r17
    457a:	8c 83       	std	Y+4, r24	; 0x04
    457c:	9d 83       	std	Y+5, r25	; 0x05
    457e:	ae 83       	std	Y+6, r26	; 0x06
    4580:	bf 83       	std	Y+7, r27	; 0x07
    4582:	eb cf       	rjmp	.-42     	; 0x455a <_fpadd_parts+0x1d0>
    4584:	88 0f       	add	r24, r24
    4586:	99 1f       	adc	r25, r25
    4588:	aa 1f       	adc	r26, r26
    458a:	bb 1f       	adc	r27, r27
    458c:	2a 81       	ldd	r18, Y+2	; 0x02
    458e:	3b 81       	ldd	r19, Y+3	; 0x03
    4590:	21 50       	subi	r18, 0x01	; 1
    4592:	30 40       	sbci	r19, 0x00	; 0
    4594:	3b 83       	std	Y+3, r19	; 0x03
    4596:	2a 83       	std	Y+2, r18	; 0x02
    4598:	9c 01       	movw	r18, r24
    459a:	ad 01       	movw	r20, r26
    459c:	21 50       	subi	r18, 0x01	; 1
    459e:	30 40       	sbci	r19, 0x00	; 0
    45a0:	40 40       	sbci	r20, 0x00	; 0
    45a2:	50 40       	sbci	r21, 0x00	; 0
    45a4:	2f 3f       	cpi	r18, 0xFF	; 255
    45a6:	6f ef       	ldi	r22, 0xFF	; 255
    45a8:	36 07       	cpc	r19, r22
    45aa:	6f ef       	ldi	r22, 0xFF	; 255
    45ac:	46 07       	cpc	r20, r22
    45ae:	6f e3       	ldi	r22, 0x3F	; 63
    45b0:	56 07       	cpc	r21, r22
    45b2:	40 f3       	brcs	.-48     	; 0x4584 <_fpadd_parts+0x1fa>
    45b4:	8c 83       	std	Y+4, r24	; 0x04
    45b6:	9d 83       	std	Y+5, r25	; 0x05
    45b8:	ae 83       	std	Y+6, r26	; 0x06
    45ba:	bf 83       	std	Y+7, r27	; 0x07
    45bc:	0b c0       	rjmp	.+22     	; 0x45d4 <_fpadd_parts+0x24a>
    45be:	29 83       	std	Y+1, r18	; 0x01
    45c0:	9b 83       	std	Y+3, r25	; 0x03
    45c2:	8a 83       	std	Y+2, r24	; 0x02
    45c4:	ea 0c       	add	r14, r10
    45c6:	fb 1c       	adc	r15, r11
    45c8:	0c 1d       	adc	r16, r12
    45ca:	1d 1d       	adc	r17, r13
    45cc:	ec 82       	std	Y+4, r14	; 0x04
    45ce:	fd 82       	std	Y+5, r15	; 0x05
    45d0:	0e 83       	std	Y+6, r16	; 0x06
    45d2:	1f 83       	std	Y+7, r17	; 0x07
    45d4:	83 e0       	ldi	r24, 0x03	; 3
    45d6:	88 83       	st	Y, r24
    45d8:	2c 81       	ldd	r18, Y+4	; 0x04
    45da:	3d 81       	ldd	r19, Y+5	; 0x05
    45dc:	4e 81       	ldd	r20, Y+6	; 0x06
    45de:	5f 81       	ldd	r21, Y+7	; 0x07
    45e0:	57 ff       	sbrs	r21, 7
    45e2:	1a c0       	rjmp	.+52     	; 0x4618 <_fpadd_parts+0x28e>
    45e4:	c9 01       	movw	r24, r18
    45e6:	aa 27       	eor	r26, r26
    45e8:	97 fd       	sbrc	r25, 7
    45ea:	a0 95       	com	r26
    45ec:	ba 2f       	mov	r27, r26
    45ee:	81 70       	andi	r24, 0x01	; 1
    45f0:	90 70       	andi	r25, 0x00	; 0
    45f2:	a0 70       	andi	r26, 0x00	; 0
    45f4:	b0 70       	andi	r27, 0x00	; 0
    45f6:	56 95       	lsr	r21
    45f8:	47 95       	ror	r20
    45fa:	37 95       	ror	r19
    45fc:	27 95       	ror	r18
    45fe:	82 2b       	or	r24, r18
    4600:	93 2b       	or	r25, r19
    4602:	a4 2b       	or	r26, r20
    4604:	b5 2b       	or	r27, r21
    4606:	8c 83       	std	Y+4, r24	; 0x04
    4608:	9d 83       	std	Y+5, r25	; 0x05
    460a:	ae 83       	std	Y+6, r26	; 0x06
    460c:	bf 83       	std	Y+7, r27	; 0x07
    460e:	8a 81       	ldd	r24, Y+2	; 0x02
    4610:	9b 81       	ldd	r25, Y+3	; 0x03
    4612:	01 96       	adiw	r24, 0x01	; 1
    4614:	9b 83       	std	Y+3, r25	; 0x03
    4616:	8a 83       	std	Y+2, r24	; 0x02
    4618:	fe 01       	movw	r30, r28
    461a:	01 c0       	rjmp	.+2      	; 0x461e <_fpadd_parts+0x294>
    461c:	f2 01       	movw	r30, r4
    461e:	cf 01       	movw	r24, r30
    4620:	cd b7       	in	r28, 0x3d	; 61
    4622:	de b7       	in	r29, 0x3e	; 62
    4624:	e0 e1       	ldi	r30, 0x10	; 16
    4626:	0c 94 2d 29 	jmp	0x525a	; 0x525a <__epilogue_restores__+0x4>

0000462a <__subsf3>:
    462a:	a0 e2       	ldi	r26, 0x20	; 32
    462c:	b0 e0       	ldi	r27, 0x00	; 0
    462e:	eb e1       	ldi	r30, 0x1B	; 27
    4630:	f3 e2       	ldi	r31, 0x23	; 35
    4632:	0c 94 1b 29 	jmp	0x5236	; 0x5236 <__prologue_saves__+0x18>
    4636:	69 83       	std	Y+1, r22	; 0x01
    4638:	7a 83       	std	Y+2, r23	; 0x02
    463a:	8b 83       	std	Y+3, r24	; 0x03
    463c:	9c 83       	std	Y+4, r25	; 0x04
    463e:	2d 83       	std	Y+5, r18	; 0x05
    4640:	3e 83       	std	Y+6, r19	; 0x06
    4642:	4f 83       	std	Y+7, r20	; 0x07
    4644:	58 87       	std	Y+8, r21	; 0x08
    4646:	e9 e0       	ldi	r30, 0x09	; 9
    4648:	ee 2e       	mov	r14, r30
    464a:	f1 2c       	mov	r15, r1
    464c:	ec 0e       	add	r14, r28
    464e:	fd 1e       	adc	r15, r29
    4650:	ce 01       	movw	r24, r28
    4652:	01 96       	adiw	r24, 0x01	; 1
    4654:	b7 01       	movw	r22, r14
    4656:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <__unpack_f>
    465a:	8e 01       	movw	r16, r28
    465c:	0f 5e       	subi	r16, 0xEF	; 239
    465e:	1f 4f       	sbci	r17, 0xFF	; 255
    4660:	ce 01       	movw	r24, r28
    4662:	05 96       	adiw	r24, 0x05	; 5
    4664:	b8 01       	movw	r22, r16
    4666:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <__unpack_f>
    466a:	8a 89       	ldd	r24, Y+18	; 0x12
    466c:	91 e0       	ldi	r25, 0x01	; 1
    466e:	89 27       	eor	r24, r25
    4670:	8a 8b       	std	Y+18, r24	; 0x12
    4672:	c7 01       	movw	r24, r14
    4674:	b8 01       	movw	r22, r16
    4676:	ae 01       	movw	r20, r28
    4678:	47 5e       	subi	r20, 0xE7	; 231
    467a:	5f 4f       	sbci	r21, 0xFF	; 255
    467c:	0e 94 c5 21 	call	0x438a	; 0x438a <_fpadd_parts>
    4680:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__pack_f>
    4684:	a0 96       	adiw	r28, 0x20	; 32
    4686:	e6 e0       	ldi	r30, 0x06	; 6
    4688:	0c 94 37 29 	jmp	0x526e	; 0x526e <__epilogue_restores__+0x18>

0000468c <__addsf3>:
    468c:	a0 e2       	ldi	r26, 0x20	; 32
    468e:	b0 e0       	ldi	r27, 0x00	; 0
    4690:	ec e4       	ldi	r30, 0x4C	; 76
    4692:	f3 e2       	ldi	r31, 0x23	; 35
    4694:	0c 94 1b 29 	jmp	0x5236	; 0x5236 <__prologue_saves__+0x18>
    4698:	69 83       	std	Y+1, r22	; 0x01
    469a:	7a 83       	std	Y+2, r23	; 0x02
    469c:	8b 83       	std	Y+3, r24	; 0x03
    469e:	9c 83       	std	Y+4, r25	; 0x04
    46a0:	2d 83       	std	Y+5, r18	; 0x05
    46a2:	3e 83       	std	Y+6, r19	; 0x06
    46a4:	4f 83       	std	Y+7, r20	; 0x07
    46a6:	58 87       	std	Y+8, r21	; 0x08
    46a8:	f9 e0       	ldi	r31, 0x09	; 9
    46aa:	ef 2e       	mov	r14, r31
    46ac:	f1 2c       	mov	r15, r1
    46ae:	ec 0e       	add	r14, r28
    46b0:	fd 1e       	adc	r15, r29
    46b2:	ce 01       	movw	r24, r28
    46b4:	01 96       	adiw	r24, 0x01	; 1
    46b6:	b7 01       	movw	r22, r14
    46b8:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <__unpack_f>
    46bc:	8e 01       	movw	r16, r28
    46be:	0f 5e       	subi	r16, 0xEF	; 239
    46c0:	1f 4f       	sbci	r17, 0xFF	; 255
    46c2:	ce 01       	movw	r24, r28
    46c4:	05 96       	adiw	r24, 0x05	; 5
    46c6:	b8 01       	movw	r22, r16
    46c8:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <__unpack_f>
    46cc:	c7 01       	movw	r24, r14
    46ce:	b8 01       	movw	r22, r16
    46d0:	ae 01       	movw	r20, r28
    46d2:	47 5e       	subi	r20, 0xE7	; 231
    46d4:	5f 4f       	sbci	r21, 0xFF	; 255
    46d6:	0e 94 c5 21 	call	0x438a	; 0x438a <_fpadd_parts>
    46da:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__pack_f>
    46de:	a0 96       	adiw	r28, 0x20	; 32
    46e0:	e6 e0       	ldi	r30, 0x06	; 6
    46e2:	0c 94 37 29 	jmp	0x526e	; 0x526e <__epilogue_restores__+0x18>

000046e6 <__mulsf3>:
    46e6:	a0 e2       	ldi	r26, 0x20	; 32
    46e8:	b0 e0       	ldi	r27, 0x00	; 0
    46ea:	e9 e7       	ldi	r30, 0x79	; 121
    46ec:	f3 e2       	ldi	r31, 0x23	; 35
    46ee:	0c 94 0f 29 	jmp	0x521e	; 0x521e <__prologue_saves__>
    46f2:	69 83       	std	Y+1, r22	; 0x01
    46f4:	7a 83       	std	Y+2, r23	; 0x02
    46f6:	8b 83       	std	Y+3, r24	; 0x03
    46f8:	9c 83       	std	Y+4, r25	; 0x04
    46fa:	2d 83       	std	Y+5, r18	; 0x05
    46fc:	3e 83       	std	Y+6, r19	; 0x06
    46fe:	4f 83       	std	Y+7, r20	; 0x07
    4700:	58 87       	std	Y+8, r21	; 0x08
    4702:	ce 01       	movw	r24, r28
    4704:	01 96       	adiw	r24, 0x01	; 1
    4706:	be 01       	movw	r22, r28
    4708:	67 5f       	subi	r22, 0xF7	; 247
    470a:	7f 4f       	sbci	r23, 0xFF	; 255
    470c:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <__unpack_f>
    4710:	ce 01       	movw	r24, r28
    4712:	05 96       	adiw	r24, 0x05	; 5
    4714:	be 01       	movw	r22, r28
    4716:	6f 5e       	subi	r22, 0xEF	; 239
    4718:	7f 4f       	sbci	r23, 0xFF	; 255
    471a:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <__unpack_f>
    471e:	99 85       	ldd	r25, Y+9	; 0x09
    4720:	92 30       	cpi	r25, 0x02	; 2
    4722:	88 f0       	brcs	.+34     	; 0x4746 <__mulsf3+0x60>
    4724:	89 89       	ldd	r24, Y+17	; 0x11
    4726:	82 30       	cpi	r24, 0x02	; 2
    4728:	c8 f0       	brcs	.+50     	; 0x475c <__mulsf3+0x76>
    472a:	94 30       	cpi	r25, 0x04	; 4
    472c:	19 f4       	brne	.+6      	; 0x4734 <__mulsf3+0x4e>
    472e:	82 30       	cpi	r24, 0x02	; 2
    4730:	51 f4       	brne	.+20     	; 0x4746 <__mulsf3+0x60>
    4732:	04 c0       	rjmp	.+8      	; 0x473c <__mulsf3+0x56>
    4734:	84 30       	cpi	r24, 0x04	; 4
    4736:	29 f4       	brne	.+10     	; 0x4742 <__mulsf3+0x5c>
    4738:	92 30       	cpi	r25, 0x02	; 2
    473a:	81 f4       	brne	.+32     	; 0x475c <__mulsf3+0x76>
    473c:	86 e9       	ldi	r24, 0x96	; 150
    473e:	91 e0       	ldi	r25, 0x01	; 1
    4740:	c4 c0       	rjmp	.+392    	; 0x48ca <__mulsf3+0x1e4>
    4742:	92 30       	cpi	r25, 0x02	; 2
    4744:	49 f4       	brne	.+18     	; 0x4758 <__mulsf3+0x72>
    4746:	80 e0       	ldi	r24, 0x00	; 0
    4748:	2a 85       	ldd	r18, Y+10	; 0x0a
    474a:	9a 89       	ldd	r25, Y+18	; 0x12
    474c:	29 13       	cpse	r18, r25
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	8a 87       	std	Y+10, r24	; 0x0a
    4752:	ce 01       	movw	r24, r28
    4754:	09 96       	adiw	r24, 0x09	; 9
    4756:	b9 c0       	rjmp	.+370    	; 0x48ca <__mulsf3+0x1e4>
    4758:	82 30       	cpi	r24, 0x02	; 2
    475a:	49 f4       	brne	.+18     	; 0x476e <__mulsf3+0x88>
    475c:	80 e0       	ldi	r24, 0x00	; 0
    475e:	2a 85       	ldd	r18, Y+10	; 0x0a
    4760:	9a 89       	ldd	r25, Y+18	; 0x12
    4762:	29 13       	cpse	r18, r25
    4764:	81 e0       	ldi	r24, 0x01	; 1
    4766:	8a 8b       	std	Y+18, r24	; 0x12
    4768:	ce 01       	movw	r24, r28
    476a:	41 96       	adiw	r24, 0x11	; 17
    476c:	ae c0       	rjmp	.+348    	; 0x48ca <__mulsf3+0x1e4>
    476e:	6d 84       	ldd	r6, Y+13	; 0x0d
    4770:	7e 84       	ldd	r7, Y+14	; 0x0e
    4772:	8f 84       	ldd	r8, Y+15	; 0x0f
    4774:	98 88       	ldd	r9, Y+16	; 0x10
    4776:	ad 88       	ldd	r10, Y+21	; 0x15
    4778:	be 88       	ldd	r11, Y+22	; 0x16
    477a:	cf 88       	ldd	r12, Y+23	; 0x17
    477c:	d8 8c       	ldd	r13, Y+24	; 0x18
    477e:	60 e0       	ldi	r22, 0x00	; 0
    4780:	70 e0       	ldi	r23, 0x00	; 0
    4782:	80 e0       	ldi	r24, 0x00	; 0
    4784:	90 e0       	ldi	r25, 0x00	; 0
    4786:	dc 01       	movw	r26, r24
    4788:	ee 24       	eor	r14, r14
    478a:	ff 24       	eor	r15, r15
    478c:	87 01       	movw	r16, r14
    478e:	20 e0       	ldi	r18, 0x00	; 0
    4790:	30 e0       	ldi	r19, 0x00	; 0
    4792:	a9 01       	movw	r20, r18
    4794:	f3 01       	movw	r30, r6
    4796:	e1 70       	andi	r30, 0x01	; 1
    4798:	f0 70       	andi	r31, 0x00	; 0
    479a:	30 97       	sbiw	r30, 0x00	; 0
    479c:	c9 f0       	breq	.+50     	; 0x47d0 <__mulsf3+0xea>
    479e:	2a 0d       	add	r18, r10
    47a0:	3b 1d       	adc	r19, r11
    47a2:	4c 1d       	adc	r20, r12
    47a4:	5d 1d       	adc	r21, r13
    47a6:	8e 0d       	add	r24, r14
    47a8:	9f 1d       	adc	r25, r15
    47aa:	a0 1f       	adc	r26, r16
    47ac:	b1 1f       	adc	r27, r17
    47ae:	22 24       	eor	r2, r2
    47b0:	33 24       	eor	r3, r3
    47b2:	21 01       	movw	r4, r2
    47b4:	2a 15       	cp	r18, r10
    47b6:	3b 05       	cpc	r19, r11
    47b8:	4c 05       	cpc	r20, r12
    47ba:	5d 05       	cpc	r21, r13
    47bc:	28 f4       	brcc	.+10     	; 0x47c8 <__mulsf3+0xe2>
    47be:	e1 e0       	ldi	r30, 0x01	; 1
    47c0:	2e 2e       	mov	r2, r30
    47c2:	31 2c       	mov	r3, r1
    47c4:	41 2c       	mov	r4, r1
    47c6:	51 2c       	mov	r5, r1
    47c8:	82 0d       	add	r24, r2
    47ca:	93 1d       	adc	r25, r3
    47cc:	a4 1d       	adc	r26, r4
    47ce:	b5 1d       	adc	r27, r5
    47d0:	ee 0c       	add	r14, r14
    47d2:	ff 1c       	adc	r15, r15
    47d4:	00 1f       	adc	r16, r16
    47d6:	11 1f       	adc	r17, r17
    47d8:	d7 fe       	sbrs	r13, 7
    47da:	09 c0       	rjmp	.+18     	; 0x47ee <__mulsf3+0x108>
    47dc:	e1 e0       	ldi	r30, 0x01	; 1
    47de:	2e 2e       	mov	r2, r30
    47e0:	31 2c       	mov	r3, r1
    47e2:	41 2c       	mov	r4, r1
    47e4:	51 2c       	mov	r5, r1
    47e6:	e2 28       	or	r14, r2
    47e8:	f3 28       	or	r15, r3
    47ea:	04 29       	or	r16, r4
    47ec:	15 29       	or	r17, r5
    47ee:	6f 5f       	subi	r22, 0xFF	; 255
    47f0:	7f 4f       	sbci	r23, 0xFF	; 255
    47f2:	60 32       	cpi	r22, 0x20	; 32
    47f4:	71 05       	cpc	r23, r1
    47f6:	49 f0       	breq	.+18     	; 0x480a <__mulsf3+0x124>
    47f8:	aa 0c       	add	r10, r10
    47fa:	bb 1c       	adc	r11, r11
    47fc:	cc 1c       	adc	r12, r12
    47fe:	dd 1c       	adc	r13, r13
    4800:	96 94       	lsr	r9
    4802:	87 94       	ror	r8
    4804:	77 94       	ror	r7
    4806:	67 94       	ror	r6
    4808:	c5 cf       	rjmp	.-118    	; 0x4794 <__mulsf3+0xae>
    480a:	6b 89       	ldd	r22, Y+19	; 0x13
    480c:	7c 89       	ldd	r23, Y+20	; 0x14
    480e:	eb 85       	ldd	r30, Y+11	; 0x0b
    4810:	fc 85       	ldd	r31, Y+12	; 0x0c
    4812:	6e 0f       	add	r22, r30
    4814:	7f 1f       	adc	r23, r31
    4816:	6e 5f       	subi	r22, 0xFE	; 254
    4818:	7f 4f       	sbci	r23, 0xFF	; 255
    481a:	7c 8f       	std	Y+28, r23	; 0x1c
    481c:	6b 8f       	std	Y+27, r22	; 0x1b
    481e:	1a 8e       	std	Y+26, r1	; 0x1a
    4820:	7a 85       	ldd	r23, Y+10	; 0x0a
    4822:	6a 89       	ldd	r22, Y+18	; 0x12
    4824:	76 17       	cp	r23, r22
    4826:	11 f0       	breq	.+4      	; 0x482c <__mulsf3+0x146>
    4828:	61 e0       	ldi	r22, 0x01	; 1
    482a:	6a 8f       	std	Y+26, r22	; 0x1a
    482c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    482e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    4830:	10 c0       	rjmp	.+32     	; 0x4852 <__mulsf3+0x16c>
    4832:	fc 01       	movw	r30, r24
    4834:	e1 70       	andi	r30, 0x01	; 1
    4836:	f0 70       	andi	r31, 0x00	; 0
    4838:	30 97       	sbiw	r30, 0x00	; 0
    483a:	29 f0       	breq	.+10     	; 0x4846 <__mulsf3+0x160>
    483c:	56 95       	lsr	r21
    483e:	47 95       	ror	r20
    4840:	37 95       	ror	r19
    4842:	27 95       	ror	r18
    4844:	50 68       	ori	r21, 0x80	; 128
    4846:	b6 95       	lsr	r27
    4848:	a7 95       	ror	r26
    484a:	97 95       	ror	r25
    484c:	87 95       	ror	r24
    484e:	6f 5f       	subi	r22, 0xFF	; 255
    4850:	7f 4f       	sbci	r23, 0xFF	; 255
    4852:	b7 fd       	sbrc	r27, 7
    4854:	ee cf       	rjmp	.-36     	; 0x4832 <__mulsf3+0x14c>
    4856:	0c c0       	rjmp	.+24     	; 0x4870 <__mulsf3+0x18a>
    4858:	88 0f       	add	r24, r24
    485a:	99 1f       	adc	r25, r25
    485c:	aa 1f       	adc	r26, r26
    485e:	bb 1f       	adc	r27, r27
    4860:	57 fd       	sbrc	r21, 7
    4862:	81 60       	ori	r24, 0x01	; 1
    4864:	22 0f       	add	r18, r18
    4866:	33 1f       	adc	r19, r19
    4868:	44 1f       	adc	r20, r20
    486a:	55 1f       	adc	r21, r21
    486c:	61 50       	subi	r22, 0x01	; 1
    486e:	70 40       	sbci	r23, 0x00	; 0
    4870:	80 30       	cpi	r24, 0x00	; 0
    4872:	e0 e0       	ldi	r30, 0x00	; 0
    4874:	9e 07       	cpc	r25, r30
    4876:	e0 e0       	ldi	r30, 0x00	; 0
    4878:	ae 07       	cpc	r26, r30
    487a:	e0 e4       	ldi	r30, 0x40	; 64
    487c:	be 07       	cpc	r27, r30
    487e:	60 f3       	brcs	.-40     	; 0x4858 <__mulsf3+0x172>
    4880:	6b 8f       	std	Y+27, r22	; 0x1b
    4882:	7c 8f       	std	Y+28, r23	; 0x1c
    4884:	6f e7       	ldi	r22, 0x7F	; 127
    4886:	e6 2e       	mov	r14, r22
    4888:	f1 2c       	mov	r15, r1
    488a:	01 2d       	mov	r16, r1
    488c:	11 2d       	mov	r17, r1
    488e:	e8 22       	and	r14, r24
    4890:	f9 22       	and	r15, r25
    4892:	0a 23       	and	r16, r26
    4894:	1b 23       	and	r17, r27
    4896:	60 e4       	ldi	r22, 0x40	; 64
    4898:	e6 16       	cp	r14, r22
    489a:	f1 04       	cpc	r15, r1
    489c:	01 05       	cpc	r16, r1
    489e:	11 05       	cpc	r17, r1
    48a0:	61 f4       	brne	.+24     	; 0x48ba <__mulsf3+0x1d4>
    48a2:	87 fd       	sbrc	r24, 7
    48a4:	0a c0       	rjmp	.+20     	; 0x48ba <__mulsf3+0x1d4>
    48a6:	21 15       	cp	r18, r1
    48a8:	31 05       	cpc	r19, r1
    48aa:	41 05       	cpc	r20, r1
    48ac:	51 05       	cpc	r21, r1
    48ae:	29 f0       	breq	.+10     	; 0x48ba <__mulsf3+0x1d4>
    48b0:	80 5c       	subi	r24, 0xC0	; 192
    48b2:	9f 4f       	sbci	r25, 0xFF	; 255
    48b4:	af 4f       	sbci	r26, 0xFF	; 255
    48b6:	bf 4f       	sbci	r27, 0xFF	; 255
    48b8:	80 78       	andi	r24, 0x80	; 128
    48ba:	8d 8f       	std	Y+29, r24	; 0x1d
    48bc:	9e 8f       	std	Y+30, r25	; 0x1e
    48be:	af 8f       	std	Y+31, r26	; 0x1f
    48c0:	b8 a3       	std	Y+32, r27	; 0x20
    48c2:	83 e0       	ldi	r24, 0x03	; 3
    48c4:	89 8f       	std	Y+25, r24	; 0x19
    48c6:	ce 01       	movw	r24, r28
    48c8:	49 96       	adiw	r24, 0x19	; 25
    48ca:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__pack_f>
    48ce:	a0 96       	adiw	r28, 0x20	; 32
    48d0:	e2 e1       	ldi	r30, 0x12	; 18
    48d2:	0c 94 2b 29 	jmp	0x5256	; 0x5256 <__epilogue_restores__>

000048d6 <__divsf3>:
    48d6:	a8 e1       	ldi	r26, 0x18	; 24
    48d8:	b0 e0       	ldi	r27, 0x00	; 0
    48da:	e1 e7       	ldi	r30, 0x71	; 113
    48dc:	f4 e2       	ldi	r31, 0x24	; 36
    48de:	0c 94 17 29 	jmp	0x522e	; 0x522e <__prologue_saves__+0x10>
    48e2:	69 83       	std	Y+1, r22	; 0x01
    48e4:	7a 83       	std	Y+2, r23	; 0x02
    48e6:	8b 83       	std	Y+3, r24	; 0x03
    48e8:	9c 83       	std	Y+4, r25	; 0x04
    48ea:	2d 83       	std	Y+5, r18	; 0x05
    48ec:	3e 83       	std	Y+6, r19	; 0x06
    48ee:	4f 83       	std	Y+7, r20	; 0x07
    48f0:	58 87       	std	Y+8, r21	; 0x08
    48f2:	8e 01       	movw	r16, r28
    48f4:	07 5f       	subi	r16, 0xF7	; 247
    48f6:	1f 4f       	sbci	r17, 0xFF	; 255
    48f8:	ce 01       	movw	r24, r28
    48fa:	01 96       	adiw	r24, 0x01	; 1
    48fc:	b8 01       	movw	r22, r16
    48fe:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <__unpack_f>
    4902:	81 e1       	ldi	r24, 0x11	; 17
    4904:	e8 2e       	mov	r14, r24
    4906:	f1 2c       	mov	r15, r1
    4908:	ec 0e       	add	r14, r28
    490a:	fd 1e       	adc	r15, r29
    490c:	ce 01       	movw	r24, r28
    490e:	05 96       	adiw	r24, 0x05	; 5
    4910:	b7 01       	movw	r22, r14
    4912:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <__unpack_f>
    4916:	99 85       	ldd	r25, Y+9	; 0x09
    4918:	92 30       	cpi	r25, 0x02	; 2
    491a:	08 f4       	brcc	.+2      	; 0x491e <__divsf3+0x48>
    491c:	83 c0       	rjmp	.+262    	; 0x4a24 <__divsf3+0x14e>
    491e:	89 89       	ldd	r24, Y+17	; 0x11
    4920:	82 30       	cpi	r24, 0x02	; 2
    4922:	10 f4       	brcc	.+4      	; 0x4928 <__divsf3+0x52>
    4924:	87 01       	movw	r16, r14
    4926:	7e c0       	rjmp	.+252    	; 0x4a24 <__divsf3+0x14e>
    4928:	2a 85       	ldd	r18, Y+10	; 0x0a
    492a:	3a 89       	ldd	r19, Y+18	; 0x12
    492c:	23 27       	eor	r18, r19
    492e:	2a 87       	std	Y+10, r18	; 0x0a
    4930:	94 30       	cpi	r25, 0x04	; 4
    4932:	11 f0       	breq	.+4      	; 0x4938 <__divsf3+0x62>
    4934:	92 30       	cpi	r25, 0x02	; 2
    4936:	31 f4       	brne	.+12     	; 0x4944 <__divsf3+0x6e>
    4938:	98 17       	cp	r25, r24
    493a:	09 f0       	breq	.+2      	; 0x493e <__divsf3+0x68>
    493c:	70 c0       	rjmp	.+224    	; 0x4a1e <__divsf3+0x148>
    493e:	06 e9       	ldi	r16, 0x96	; 150
    4940:	11 e0       	ldi	r17, 0x01	; 1
    4942:	70 c0       	rjmp	.+224    	; 0x4a24 <__divsf3+0x14e>
    4944:	84 30       	cpi	r24, 0x04	; 4
    4946:	39 f4       	brne	.+14     	; 0x4956 <__divsf3+0x80>
    4948:	1d 86       	std	Y+13, r1	; 0x0d
    494a:	1e 86       	std	Y+14, r1	; 0x0e
    494c:	1f 86       	std	Y+15, r1	; 0x0f
    494e:	18 8a       	std	Y+16, r1	; 0x10
    4950:	1c 86       	std	Y+12, r1	; 0x0c
    4952:	1b 86       	std	Y+11, r1	; 0x0b
    4954:	67 c0       	rjmp	.+206    	; 0x4a24 <__divsf3+0x14e>
    4956:	82 30       	cpi	r24, 0x02	; 2
    4958:	19 f4       	brne	.+6      	; 0x4960 <__divsf3+0x8a>
    495a:	84 e0       	ldi	r24, 0x04	; 4
    495c:	89 87       	std	Y+9, r24	; 0x09
    495e:	62 c0       	rjmp	.+196    	; 0x4a24 <__divsf3+0x14e>
    4960:	8b 85       	ldd	r24, Y+11	; 0x0b
    4962:	9c 85       	ldd	r25, Y+12	; 0x0c
    4964:	2b 89       	ldd	r18, Y+19	; 0x13
    4966:	3c 89       	ldd	r19, Y+20	; 0x14
    4968:	82 1b       	sub	r24, r18
    496a:	93 0b       	sbc	r25, r19
    496c:	9c 87       	std	Y+12, r25	; 0x0c
    496e:	8b 87       	std	Y+11, r24	; 0x0b
    4970:	2d 85       	ldd	r18, Y+13	; 0x0d
    4972:	3e 85       	ldd	r19, Y+14	; 0x0e
    4974:	4f 85       	ldd	r20, Y+15	; 0x0f
    4976:	58 89       	ldd	r21, Y+16	; 0x10
    4978:	ad 88       	ldd	r10, Y+21	; 0x15
    497a:	be 88       	ldd	r11, Y+22	; 0x16
    497c:	cf 88       	ldd	r12, Y+23	; 0x17
    497e:	d8 8c       	ldd	r13, Y+24	; 0x18
    4980:	2a 15       	cp	r18, r10
    4982:	3b 05       	cpc	r19, r11
    4984:	4c 05       	cpc	r20, r12
    4986:	5d 05       	cpc	r21, r13
    4988:	38 f4       	brcc	.+14     	; 0x4998 <__divsf3+0xc2>
    498a:	22 0f       	add	r18, r18
    498c:	33 1f       	adc	r19, r19
    498e:	44 1f       	adc	r20, r20
    4990:	55 1f       	adc	r21, r21
    4992:	01 97       	sbiw	r24, 0x01	; 1
    4994:	9c 87       	std	Y+12, r25	; 0x0c
    4996:	8b 87       	std	Y+11, r24	; 0x0b
    4998:	60 e0       	ldi	r22, 0x00	; 0
    499a:	70 e0       	ldi	r23, 0x00	; 0
    499c:	e1 2c       	mov	r14, r1
    499e:	f1 2c       	mov	r15, r1
    49a0:	01 2d       	mov	r16, r1
    49a2:	a0 e4       	ldi	r26, 0x40	; 64
    49a4:	1a 2f       	mov	r17, r26
    49a6:	80 e0       	ldi	r24, 0x00	; 0
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	dc 01       	movw	r26, r24
    49ac:	2a 15       	cp	r18, r10
    49ae:	3b 05       	cpc	r19, r11
    49b0:	4c 05       	cpc	r20, r12
    49b2:	5d 05       	cpc	r21, r13
    49b4:	40 f0       	brcs	.+16     	; 0x49c6 <__divsf3+0xf0>
    49b6:	8e 29       	or	r24, r14
    49b8:	9f 29       	or	r25, r15
    49ba:	a0 2b       	or	r26, r16
    49bc:	b1 2b       	or	r27, r17
    49be:	2a 19       	sub	r18, r10
    49c0:	3b 09       	sbc	r19, r11
    49c2:	4c 09       	sbc	r20, r12
    49c4:	5d 09       	sbc	r21, r13
    49c6:	16 95       	lsr	r17
    49c8:	07 95       	ror	r16
    49ca:	f7 94       	ror	r15
    49cc:	e7 94       	ror	r14
    49ce:	22 0f       	add	r18, r18
    49d0:	33 1f       	adc	r19, r19
    49d2:	44 1f       	adc	r20, r20
    49d4:	55 1f       	adc	r21, r21
    49d6:	6f 5f       	subi	r22, 0xFF	; 255
    49d8:	7f 4f       	sbci	r23, 0xFF	; 255
    49da:	6f 31       	cpi	r22, 0x1F	; 31
    49dc:	71 05       	cpc	r23, r1
    49de:	31 f7       	brne	.-52     	; 0x49ac <__divsf3+0xd6>
    49e0:	6f e7       	ldi	r22, 0x7F	; 127
    49e2:	e6 2e       	mov	r14, r22
    49e4:	f1 2c       	mov	r15, r1
    49e6:	01 2d       	mov	r16, r1
    49e8:	11 2d       	mov	r17, r1
    49ea:	e8 22       	and	r14, r24
    49ec:	f9 22       	and	r15, r25
    49ee:	0a 23       	and	r16, r26
    49f0:	1b 23       	and	r17, r27
    49f2:	60 e4       	ldi	r22, 0x40	; 64
    49f4:	e6 16       	cp	r14, r22
    49f6:	f1 04       	cpc	r15, r1
    49f8:	01 05       	cpc	r16, r1
    49fa:	11 05       	cpc	r17, r1
    49fc:	61 f4       	brne	.+24     	; 0x4a16 <__divsf3+0x140>
    49fe:	87 fd       	sbrc	r24, 7
    4a00:	0a c0       	rjmp	.+20     	; 0x4a16 <__divsf3+0x140>
    4a02:	21 15       	cp	r18, r1
    4a04:	31 05       	cpc	r19, r1
    4a06:	41 05       	cpc	r20, r1
    4a08:	51 05       	cpc	r21, r1
    4a0a:	29 f0       	breq	.+10     	; 0x4a16 <__divsf3+0x140>
    4a0c:	80 5c       	subi	r24, 0xC0	; 192
    4a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    4a10:	af 4f       	sbci	r26, 0xFF	; 255
    4a12:	bf 4f       	sbci	r27, 0xFF	; 255
    4a14:	80 78       	andi	r24, 0x80	; 128
    4a16:	8d 87       	std	Y+13, r24	; 0x0d
    4a18:	9e 87       	std	Y+14, r25	; 0x0e
    4a1a:	af 87       	std	Y+15, r26	; 0x0f
    4a1c:	b8 8b       	std	Y+16, r27	; 0x10
    4a1e:	8e 01       	movw	r16, r28
    4a20:	07 5f       	subi	r16, 0xF7	; 247
    4a22:	1f 4f       	sbci	r17, 0xFF	; 255
    4a24:	c8 01       	movw	r24, r16
    4a26:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__pack_f>
    4a2a:	68 96       	adiw	r28, 0x18	; 24
    4a2c:	ea e0       	ldi	r30, 0x0A	; 10
    4a2e:	0c 94 33 29 	jmp	0x5266	; 0x5266 <__epilogue_restores__+0x10>

00004a32 <__gtsf2>:
    4a32:	a8 e1       	ldi	r26, 0x18	; 24
    4a34:	b0 e0       	ldi	r27, 0x00	; 0
    4a36:	ef e1       	ldi	r30, 0x1F	; 31
    4a38:	f5 e2       	ldi	r31, 0x25	; 37
    4a3a:	0c 94 1b 29 	jmp	0x5236	; 0x5236 <__prologue_saves__+0x18>
    4a3e:	69 83       	std	Y+1, r22	; 0x01
    4a40:	7a 83       	std	Y+2, r23	; 0x02
    4a42:	8b 83       	std	Y+3, r24	; 0x03
    4a44:	9c 83       	std	Y+4, r25	; 0x04
    4a46:	2d 83       	std	Y+5, r18	; 0x05
    4a48:	3e 83       	std	Y+6, r19	; 0x06
    4a4a:	4f 83       	std	Y+7, r20	; 0x07
    4a4c:	58 87       	std	Y+8, r21	; 0x08
    4a4e:	89 e0       	ldi	r24, 0x09	; 9
    4a50:	e8 2e       	mov	r14, r24
    4a52:	f1 2c       	mov	r15, r1
    4a54:	ec 0e       	add	r14, r28
    4a56:	fd 1e       	adc	r15, r29
    4a58:	ce 01       	movw	r24, r28
    4a5a:	01 96       	adiw	r24, 0x01	; 1
    4a5c:	b7 01       	movw	r22, r14
    4a5e:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <__unpack_f>
    4a62:	8e 01       	movw	r16, r28
    4a64:	0f 5e       	subi	r16, 0xEF	; 239
    4a66:	1f 4f       	sbci	r17, 0xFF	; 255
    4a68:	ce 01       	movw	r24, r28
    4a6a:	05 96       	adiw	r24, 0x05	; 5
    4a6c:	b8 01       	movw	r22, r16
    4a6e:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <__unpack_f>
    4a72:	89 85       	ldd	r24, Y+9	; 0x09
    4a74:	82 30       	cpi	r24, 0x02	; 2
    4a76:	40 f0       	brcs	.+16     	; 0x4a88 <__gtsf2+0x56>
    4a78:	89 89       	ldd	r24, Y+17	; 0x11
    4a7a:	82 30       	cpi	r24, 0x02	; 2
    4a7c:	28 f0       	brcs	.+10     	; 0x4a88 <__gtsf2+0x56>
    4a7e:	c7 01       	movw	r24, r14
    4a80:	b8 01       	movw	r22, r16
    4a82:	0e 94 67 28 	call	0x50ce	; 0x50ce <__fpcmp_parts_f>
    4a86:	01 c0       	rjmp	.+2      	; 0x4a8a <__gtsf2+0x58>
    4a88:	8f ef       	ldi	r24, 0xFF	; 255
    4a8a:	68 96       	adiw	r28, 0x18	; 24
    4a8c:	e6 e0       	ldi	r30, 0x06	; 6
    4a8e:	0c 94 37 29 	jmp	0x526e	; 0x526e <__epilogue_restores__+0x18>

00004a92 <__gesf2>:
    4a92:	a8 e1       	ldi	r26, 0x18	; 24
    4a94:	b0 e0       	ldi	r27, 0x00	; 0
    4a96:	ef e4       	ldi	r30, 0x4F	; 79
    4a98:	f5 e2       	ldi	r31, 0x25	; 37
    4a9a:	0c 94 1b 29 	jmp	0x5236	; 0x5236 <__prologue_saves__+0x18>
    4a9e:	69 83       	std	Y+1, r22	; 0x01
    4aa0:	7a 83       	std	Y+2, r23	; 0x02
    4aa2:	8b 83       	std	Y+3, r24	; 0x03
    4aa4:	9c 83       	std	Y+4, r25	; 0x04
    4aa6:	2d 83       	std	Y+5, r18	; 0x05
    4aa8:	3e 83       	std	Y+6, r19	; 0x06
    4aaa:	4f 83       	std	Y+7, r20	; 0x07
    4aac:	58 87       	std	Y+8, r21	; 0x08
    4aae:	89 e0       	ldi	r24, 0x09	; 9
    4ab0:	e8 2e       	mov	r14, r24
    4ab2:	f1 2c       	mov	r15, r1
    4ab4:	ec 0e       	add	r14, r28
    4ab6:	fd 1e       	adc	r15, r29
    4ab8:	ce 01       	movw	r24, r28
    4aba:	01 96       	adiw	r24, 0x01	; 1
    4abc:	b7 01       	movw	r22, r14
    4abe:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <__unpack_f>
    4ac2:	8e 01       	movw	r16, r28
    4ac4:	0f 5e       	subi	r16, 0xEF	; 239
    4ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ac8:	ce 01       	movw	r24, r28
    4aca:	05 96       	adiw	r24, 0x05	; 5
    4acc:	b8 01       	movw	r22, r16
    4ace:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <__unpack_f>
    4ad2:	89 85       	ldd	r24, Y+9	; 0x09
    4ad4:	82 30       	cpi	r24, 0x02	; 2
    4ad6:	40 f0       	brcs	.+16     	; 0x4ae8 <__gesf2+0x56>
    4ad8:	89 89       	ldd	r24, Y+17	; 0x11
    4ada:	82 30       	cpi	r24, 0x02	; 2
    4adc:	28 f0       	brcs	.+10     	; 0x4ae8 <__gesf2+0x56>
    4ade:	c7 01       	movw	r24, r14
    4ae0:	b8 01       	movw	r22, r16
    4ae2:	0e 94 67 28 	call	0x50ce	; 0x50ce <__fpcmp_parts_f>
    4ae6:	01 c0       	rjmp	.+2      	; 0x4aea <__gesf2+0x58>
    4ae8:	8f ef       	ldi	r24, 0xFF	; 255
    4aea:	68 96       	adiw	r28, 0x18	; 24
    4aec:	e6 e0       	ldi	r30, 0x06	; 6
    4aee:	0c 94 37 29 	jmp	0x526e	; 0x526e <__epilogue_restores__+0x18>

00004af2 <__ltsf2>:
    4af2:	a8 e1       	ldi	r26, 0x18	; 24
    4af4:	b0 e0       	ldi	r27, 0x00	; 0
    4af6:	ef e7       	ldi	r30, 0x7F	; 127
    4af8:	f5 e2       	ldi	r31, 0x25	; 37
    4afa:	0c 94 1b 29 	jmp	0x5236	; 0x5236 <__prologue_saves__+0x18>
    4afe:	69 83       	std	Y+1, r22	; 0x01
    4b00:	7a 83       	std	Y+2, r23	; 0x02
    4b02:	8b 83       	std	Y+3, r24	; 0x03
    4b04:	9c 83       	std	Y+4, r25	; 0x04
    4b06:	2d 83       	std	Y+5, r18	; 0x05
    4b08:	3e 83       	std	Y+6, r19	; 0x06
    4b0a:	4f 83       	std	Y+7, r20	; 0x07
    4b0c:	58 87       	std	Y+8, r21	; 0x08
    4b0e:	89 e0       	ldi	r24, 0x09	; 9
    4b10:	e8 2e       	mov	r14, r24
    4b12:	f1 2c       	mov	r15, r1
    4b14:	ec 0e       	add	r14, r28
    4b16:	fd 1e       	adc	r15, r29
    4b18:	ce 01       	movw	r24, r28
    4b1a:	01 96       	adiw	r24, 0x01	; 1
    4b1c:	b7 01       	movw	r22, r14
    4b1e:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <__unpack_f>
    4b22:	8e 01       	movw	r16, r28
    4b24:	0f 5e       	subi	r16, 0xEF	; 239
    4b26:	1f 4f       	sbci	r17, 0xFF	; 255
    4b28:	ce 01       	movw	r24, r28
    4b2a:	05 96       	adiw	r24, 0x05	; 5
    4b2c:	b8 01       	movw	r22, r16
    4b2e:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <__unpack_f>
    4b32:	89 85       	ldd	r24, Y+9	; 0x09
    4b34:	82 30       	cpi	r24, 0x02	; 2
    4b36:	40 f0       	brcs	.+16     	; 0x4b48 <__ltsf2+0x56>
    4b38:	89 89       	ldd	r24, Y+17	; 0x11
    4b3a:	82 30       	cpi	r24, 0x02	; 2
    4b3c:	28 f0       	brcs	.+10     	; 0x4b48 <__ltsf2+0x56>
    4b3e:	c7 01       	movw	r24, r14
    4b40:	b8 01       	movw	r22, r16
    4b42:	0e 94 67 28 	call	0x50ce	; 0x50ce <__fpcmp_parts_f>
    4b46:	01 c0       	rjmp	.+2      	; 0x4b4a <__ltsf2+0x58>
    4b48:	81 e0       	ldi	r24, 0x01	; 1
    4b4a:	68 96       	adiw	r28, 0x18	; 24
    4b4c:	e6 e0       	ldi	r30, 0x06	; 6
    4b4e:	0c 94 37 29 	jmp	0x526e	; 0x526e <__epilogue_restores__+0x18>

00004b52 <__floatsisf>:
    4b52:	a8 e0       	ldi	r26, 0x08	; 8
    4b54:	b0 e0       	ldi	r27, 0x00	; 0
    4b56:	ef ea       	ldi	r30, 0xAF	; 175
    4b58:	f5 e2       	ldi	r31, 0x25	; 37
    4b5a:	0c 94 19 29 	jmp	0x5232	; 0x5232 <__prologue_saves__+0x14>
    4b5e:	23 e0       	ldi	r18, 0x03	; 3
    4b60:	29 83       	std	Y+1, r18	; 0x01
    4b62:	9b 01       	movw	r18, r22
    4b64:	ac 01       	movw	r20, r24
    4b66:	22 27       	eor	r18, r18
    4b68:	57 fd       	sbrc	r21, 7
    4b6a:	23 95       	inc	r18
    4b6c:	33 27       	eor	r19, r19
    4b6e:	44 27       	eor	r20, r20
    4b70:	55 27       	eor	r21, r21
    4b72:	2a 83       	std	Y+2, r18	; 0x02
    4b74:	61 15       	cp	r22, r1
    4b76:	71 05       	cpc	r23, r1
    4b78:	81 05       	cpc	r24, r1
    4b7a:	91 05       	cpc	r25, r1
    4b7c:	19 f4       	brne	.+6      	; 0x4b84 <__floatsisf+0x32>
    4b7e:	82 e0       	ldi	r24, 0x02	; 2
    4b80:	89 83       	std	Y+1, r24	; 0x01
    4b82:	3c c0       	rjmp	.+120    	; 0x4bfc <__floatsisf+0xaa>
    4b84:	22 23       	and	r18, r18
    4b86:	a9 f0       	breq	.+42     	; 0x4bb2 <__floatsisf+0x60>
    4b88:	60 30       	cpi	r22, 0x00	; 0
    4b8a:	20 e0       	ldi	r18, 0x00	; 0
    4b8c:	72 07       	cpc	r23, r18
    4b8e:	20 e0       	ldi	r18, 0x00	; 0
    4b90:	82 07       	cpc	r24, r18
    4b92:	20 e8       	ldi	r18, 0x80	; 128
    4b94:	92 07       	cpc	r25, r18
    4b96:	29 f4       	brne	.+10     	; 0x4ba2 <__floatsisf+0x50>
    4b98:	60 e0       	ldi	r22, 0x00	; 0
    4b9a:	70 e0       	ldi	r23, 0x00	; 0
    4b9c:	80 e0       	ldi	r24, 0x00	; 0
    4b9e:	9f ec       	ldi	r25, 0xCF	; 207
    4ba0:	31 c0       	rjmp	.+98     	; 0x4c04 <__floatsisf+0xb2>
    4ba2:	ee 24       	eor	r14, r14
    4ba4:	ff 24       	eor	r15, r15
    4ba6:	87 01       	movw	r16, r14
    4ba8:	e6 1a       	sub	r14, r22
    4baa:	f7 0a       	sbc	r15, r23
    4bac:	08 0b       	sbc	r16, r24
    4bae:	19 0b       	sbc	r17, r25
    4bb0:	02 c0       	rjmp	.+4      	; 0x4bb6 <__floatsisf+0x64>
    4bb2:	7b 01       	movw	r14, r22
    4bb4:	8c 01       	movw	r16, r24
    4bb6:	8e e1       	ldi	r24, 0x1E	; 30
    4bb8:	c8 2e       	mov	r12, r24
    4bba:	d1 2c       	mov	r13, r1
    4bbc:	dc 82       	std	Y+4, r13	; 0x04
    4bbe:	cb 82       	std	Y+3, r12	; 0x03
    4bc0:	ed 82       	std	Y+5, r14	; 0x05
    4bc2:	fe 82       	std	Y+6, r15	; 0x06
    4bc4:	0f 83       	std	Y+7, r16	; 0x07
    4bc6:	18 87       	std	Y+8, r17	; 0x08
    4bc8:	c8 01       	movw	r24, r16
    4bca:	b7 01       	movw	r22, r14
    4bcc:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <__clzsi2>
    4bd0:	9c 01       	movw	r18, r24
    4bd2:	21 50       	subi	r18, 0x01	; 1
    4bd4:	30 40       	sbci	r19, 0x00	; 0
    4bd6:	12 16       	cp	r1, r18
    4bd8:	13 06       	cpc	r1, r19
    4bda:	84 f4       	brge	.+32     	; 0x4bfc <__floatsisf+0xaa>
    4bdc:	02 2e       	mov	r0, r18
    4bde:	04 c0       	rjmp	.+8      	; 0x4be8 <__floatsisf+0x96>
    4be0:	ee 0c       	add	r14, r14
    4be2:	ff 1c       	adc	r15, r15
    4be4:	00 1f       	adc	r16, r16
    4be6:	11 1f       	adc	r17, r17
    4be8:	0a 94       	dec	r0
    4bea:	d2 f7       	brpl	.-12     	; 0x4be0 <__floatsisf+0x8e>
    4bec:	ed 82       	std	Y+5, r14	; 0x05
    4bee:	fe 82       	std	Y+6, r15	; 0x06
    4bf0:	0f 83       	std	Y+7, r16	; 0x07
    4bf2:	18 87       	std	Y+8, r17	; 0x08
    4bf4:	c2 1a       	sub	r12, r18
    4bf6:	d3 0a       	sbc	r13, r19
    4bf8:	dc 82       	std	Y+4, r13	; 0x04
    4bfa:	cb 82       	std	Y+3, r12	; 0x03
    4bfc:	ce 01       	movw	r24, r28
    4bfe:	01 96       	adiw	r24, 0x01	; 1
    4c00:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__pack_f>
    4c04:	28 96       	adiw	r28, 0x08	; 8
    4c06:	e8 e0       	ldi	r30, 0x08	; 8
    4c08:	0c 94 35 29 	jmp	0x526a	; 0x526a <__epilogue_restores__+0x14>

00004c0c <__fixsfsi>:
    4c0c:	ac e0       	ldi	r26, 0x0C	; 12
    4c0e:	b0 e0       	ldi	r27, 0x00	; 0
    4c10:	ec e0       	ldi	r30, 0x0C	; 12
    4c12:	f6 e2       	ldi	r31, 0x26	; 38
    4c14:	0c 94 1f 29 	jmp	0x523e	; 0x523e <__prologue_saves__+0x20>
    4c18:	69 83       	std	Y+1, r22	; 0x01
    4c1a:	7a 83       	std	Y+2, r23	; 0x02
    4c1c:	8b 83       	std	Y+3, r24	; 0x03
    4c1e:	9c 83       	std	Y+4, r25	; 0x04
    4c20:	ce 01       	movw	r24, r28
    4c22:	01 96       	adiw	r24, 0x01	; 1
    4c24:	be 01       	movw	r22, r28
    4c26:	6b 5f       	subi	r22, 0xFB	; 251
    4c28:	7f 4f       	sbci	r23, 0xFF	; 255
    4c2a:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <__unpack_f>
    4c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    4c30:	82 30       	cpi	r24, 0x02	; 2
    4c32:	61 f1       	breq	.+88     	; 0x4c8c <__fixsfsi+0x80>
    4c34:	82 30       	cpi	r24, 0x02	; 2
    4c36:	50 f1       	brcs	.+84     	; 0x4c8c <__fixsfsi+0x80>
    4c38:	84 30       	cpi	r24, 0x04	; 4
    4c3a:	21 f4       	brne	.+8      	; 0x4c44 <__fixsfsi+0x38>
    4c3c:	8e 81       	ldd	r24, Y+6	; 0x06
    4c3e:	88 23       	and	r24, r24
    4c40:	49 f1       	breq	.+82     	; 0x4c94 <__fixsfsi+0x88>
    4c42:	2d c0       	rjmp	.+90     	; 0x4c9e <__fixsfsi+0x92>
    4c44:	2f 81       	ldd	r18, Y+7	; 0x07
    4c46:	38 85       	ldd	r19, Y+8	; 0x08
    4c48:	37 fd       	sbrc	r19, 7
    4c4a:	20 c0       	rjmp	.+64     	; 0x4c8c <__fixsfsi+0x80>
    4c4c:	6e 81       	ldd	r22, Y+6	; 0x06
    4c4e:	2f 31       	cpi	r18, 0x1F	; 31
    4c50:	31 05       	cpc	r19, r1
    4c52:	1c f0       	brlt	.+6      	; 0x4c5a <__fixsfsi+0x4e>
    4c54:	66 23       	and	r22, r22
    4c56:	f1 f0       	breq	.+60     	; 0x4c94 <__fixsfsi+0x88>
    4c58:	22 c0       	rjmp	.+68     	; 0x4c9e <__fixsfsi+0x92>
    4c5a:	8e e1       	ldi	r24, 0x1E	; 30
    4c5c:	90 e0       	ldi	r25, 0x00	; 0
    4c5e:	82 1b       	sub	r24, r18
    4c60:	93 0b       	sbc	r25, r19
    4c62:	29 85       	ldd	r18, Y+9	; 0x09
    4c64:	3a 85       	ldd	r19, Y+10	; 0x0a
    4c66:	4b 85       	ldd	r20, Y+11	; 0x0b
    4c68:	5c 85       	ldd	r21, Y+12	; 0x0c
    4c6a:	04 c0       	rjmp	.+8      	; 0x4c74 <__fixsfsi+0x68>
    4c6c:	56 95       	lsr	r21
    4c6e:	47 95       	ror	r20
    4c70:	37 95       	ror	r19
    4c72:	27 95       	ror	r18
    4c74:	8a 95       	dec	r24
    4c76:	d2 f7       	brpl	.-12     	; 0x4c6c <__fixsfsi+0x60>
    4c78:	66 23       	and	r22, r22
    4c7a:	a9 f0       	breq	.+42     	; 0x4ca6 <__fixsfsi+0x9a>
    4c7c:	50 95       	com	r21
    4c7e:	40 95       	com	r20
    4c80:	30 95       	com	r19
    4c82:	21 95       	neg	r18
    4c84:	3f 4f       	sbci	r19, 0xFF	; 255
    4c86:	4f 4f       	sbci	r20, 0xFF	; 255
    4c88:	5f 4f       	sbci	r21, 0xFF	; 255
    4c8a:	0d c0       	rjmp	.+26     	; 0x4ca6 <__fixsfsi+0x9a>
    4c8c:	20 e0       	ldi	r18, 0x00	; 0
    4c8e:	30 e0       	ldi	r19, 0x00	; 0
    4c90:	a9 01       	movw	r20, r18
    4c92:	09 c0       	rjmp	.+18     	; 0x4ca6 <__fixsfsi+0x9a>
    4c94:	2f ef       	ldi	r18, 0xFF	; 255
    4c96:	3f ef       	ldi	r19, 0xFF	; 255
    4c98:	4f ef       	ldi	r20, 0xFF	; 255
    4c9a:	5f e7       	ldi	r21, 0x7F	; 127
    4c9c:	04 c0       	rjmp	.+8      	; 0x4ca6 <__fixsfsi+0x9a>
    4c9e:	20 e0       	ldi	r18, 0x00	; 0
    4ca0:	30 e0       	ldi	r19, 0x00	; 0
    4ca2:	40 e0       	ldi	r20, 0x00	; 0
    4ca4:	50 e8       	ldi	r21, 0x80	; 128
    4ca6:	b9 01       	movw	r22, r18
    4ca8:	ca 01       	movw	r24, r20
    4caa:	2c 96       	adiw	r28, 0x0c	; 12
    4cac:	e2 e0       	ldi	r30, 0x02	; 2
    4cae:	0c 94 3b 29 	jmp	0x5276	; 0x5276 <__epilogue_restores__+0x20>

00004cb2 <__floatunsisf>:
    4cb2:	a8 e0       	ldi	r26, 0x08	; 8
    4cb4:	b0 e0       	ldi	r27, 0x00	; 0
    4cb6:	ef e5       	ldi	r30, 0x5F	; 95
    4cb8:	f6 e2       	ldi	r31, 0x26	; 38
    4cba:	0c 94 19 29 	jmp	0x5232	; 0x5232 <__prologue_saves__+0x14>
    4cbe:	7b 01       	movw	r14, r22
    4cc0:	8c 01       	movw	r16, r24
    4cc2:	1a 82       	std	Y+2, r1	; 0x02
    4cc4:	61 15       	cp	r22, r1
    4cc6:	71 05       	cpc	r23, r1
    4cc8:	81 05       	cpc	r24, r1
    4cca:	91 05       	cpc	r25, r1
    4ccc:	19 f4       	brne	.+6      	; 0x4cd4 <__floatunsisf+0x22>
    4cce:	82 e0       	ldi	r24, 0x02	; 2
    4cd0:	89 83       	std	Y+1, r24	; 0x01
    4cd2:	5f c0       	rjmp	.+190    	; 0x4d92 <__floatunsisf+0xe0>
    4cd4:	83 e0       	ldi	r24, 0x03	; 3
    4cd6:	89 83       	std	Y+1, r24	; 0x01
    4cd8:	8e e1       	ldi	r24, 0x1E	; 30
    4cda:	c8 2e       	mov	r12, r24
    4cdc:	d1 2c       	mov	r13, r1
    4cde:	dc 82       	std	Y+4, r13	; 0x04
    4ce0:	cb 82       	std	Y+3, r12	; 0x03
    4ce2:	ed 82       	std	Y+5, r14	; 0x05
    4ce4:	fe 82       	std	Y+6, r15	; 0x06
    4ce6:	0f 83       	std	Y+7, r16	; 0x07
    4ce8:	18 87       	std	Y+8, r17	; 0x08
    4cea:	c8 01       	movw	r24, r16
    4cec:	b7 01       	movw	r22, r14
    4cee:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <__clzsi2>
    4cf2:	9c 01       	movw	r18, r24
    4cf4:	21 50       	subi	r18, 0x01	; 1
    4cf6:	30 40       	sbci	r19, 0x00	; 0
    4cf8:	37 ff       	sbrs	r19, 7
    4cfa:	38 c0       	rjmp	.+112    	; 0x4d6c <__floatunsisf+0xba>
    4cfc:	ee 27       	eor	r30, r30
    4cfe:	ff 27       	eor	r31, r31
    4d00:	e2 1b       	sub	r30, r18
    4d02:	f3 0b       	sbc	r31, r19
    4d04:	40 e0       	ldi	r20, 0x00	; 0
    4d06:	50 e0       	ldi	r21, 0x00	; 0
    4d08:	ba 01       	movw	r22, r20
    4d0a:	81 e0       	ldi	r24, 0x01	; 1
    4d0c:	90 e0       	ldi	r25, 0x00	; 0
    4d0e:	a0 e0       	ldi	r26, 0x00	; 0
    4d10:	b0 e0       	ldi	r27, 0x00	; 0
    4d12:	0e 2e       	mov	r0, r30
    4d14:	04 c0       	rjmp	.+8      	; 0x4d1e <__floatunsisf+0x6c>
    4d16:	88 0f       	add	r24, r24
    4d18:	99 1f       	adc	r25, r25
    4d1a:	aa 1f       	adc	r26, r26
    4d1c:	bb 1f       	adc	r27, r27
    4d1e:	0a 94       	dec	r0
    4d20:	d2 f7       	brpl	.-12     	; 0x4d16 <__floatunsisf+0x64>
    4d22:	01 97       	sbiw	r24, 0x01	; 1
    4d24:	a1 09       	sbc	r26, r1
    4d26:	b1 09       	sbc	r27, r1
    4d28:	8e 21       	and	r24, r14
    4d2a:	9f 21       	and	r25, r15
    4d2c:	a0 23       	and	r26, r16
    4d2e:	b1 23       	and	r27, r17
    4d30:	00 97       	sbiw	r24, 0x00	; 0
    4d32:	a1 05       	cpc	r26, r1
    4d34:	b1 05       	cpc	r27, r1
    4d36:	21 f0       	breq	.+8      	; 0x4d40 <__floatunsisf+0x8e>
    4d38:	41 e0       	ldi	r20, 0x01	; 1
    4d3a:	50 e0       	ldi	r21, 0x00	; 0
    4d3c:	60 e0       	ldi	r22, 0x00	; 0
    4d3e:	70 e0       	ldi	r23, 0x00	; 0
    4d40:	04 c0       	rjmp	.+8      	; 0x4d4a <__floatunsisf+0x98>
    4d42:	16 95       	lsr	r17
    4d44:	07 95       	ror	r16
    4d46:	f7 94       	ror	r15
    4d48:	e7 94       	ror	r14
    4d4a:	ea 95       	dec	r30
    4d4c:	d2 f7       	brpl	.-12     	; 0x4d42 <__floatunsisf+0x90>
    4d4e:	e4 2a       	or	r14, r20
    4d50:	f5 2a       	or	r15, r21
    4d52:	06 2b       	or	r16, r22
    4d54:	17 2b       	or	r17, r23
    4d56:	ed 82       	std	Y+5, r14	; 0x05
    4d58:	fe 82       	std	Y+6, r15	; 0x06
    4d5a:	0f 83       	std	Y+7, r16	; 0x07
    4d5c:	18 87       	std	Y+8, r17	; 0x08
    4d5e:	8e e1       	ldi	r24, 0x1E	; 30
    4d60:	90 e0       	ldi	r25, 0x00	; 0
    4d62:	82 1b       	sub	r24, r18
    4d64:	93 0b       	sbc	r25, r19
    4d66:	9c 83       	std	Y+4, r25	; 0x04
    4d68:	8b 83       	std	Y+3, r24	; 0x03
    4d6a:	13 c0       	rjmp	.+38     	; 0x4d92 <__floatunsisf+0xe0>
    4d6c:	21 15       	cp	r18, r1
    4d6e:	31 05       	cpc	r19, r1
    4d70:	81 f0       	breq	.+32     	; 0x4d92 <__floatunsisf+0xe0>
    4d72:	02 2e       	mov	r0, r18
    4d74:	04 c0       	rjmp	.+8      	; 0x4d7e <__floatunsisf+0xcc>
    4d76:	ee 0c       	add	r14, r14
    4d78:	ff 1c       	adc	r15, r15
    4d7a:	00 1f       	adc	r16, r16
    4d7c:	11 1f       	adc	r17, r17
    4d7e:	0a 94       	dec	r0
    4d80:	d2 f7       	brpl	.-12     	; 0x4d76 <__floatunsisf+0xc4>
    4d82:	ed 82       	std	Y+5, r14	; 0x05
    4d84:	fe 82       	std	Y+6, r15	; 0x06
    4d86:	0f 83       	std	Y+7, r16	; 0x07
    4d88:	18 87       	std	Y+8, r17	; 0x08
    4d8a:	c2 1a       	sub	r12, r18
    4d8c:	d3 0a       	sbc	r13, r19
    4d8e:	dc 82       	std	Y+4, r13	; 0x04
    4d90:	cb 82       	std	Y+3, r12	; 0x03
    4d92:	ce 01       	movw	r24, r28
    4d94:	01 96       	adiw	r24, 0x01	; 1
    4d96:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__pack_f>
    4d9a:	28 96       	adiw	r28, 0x08	; 8
    4d9c:	e8 e0       	ldi	r30, 0x08	; 8
    4d9e:	0c 94 35 29 	jmp	0x526a	; 0x526a <__epilogue_restores__+0x14>

00004da2 <__clzsi2>:
    4da2:	af 92       	push	r10
    4da4:	bf 92       	push	r11
    4da6:	cf 92       	push	r12
    4da8:	df 92       	push	r13
    4daa:	ef 92       	push	r14
    4dac:	ff 92       	push	r15
    4dae:	0f 93       	push	r16
    4db0:	1f 93       	push	r17
    4db2:	7b 01       	movw	r14, r22
    4db4:	8c 01       	movw	r16, r24
    4db6:	80 e0       	ldi	r24, 0x00	; 0
    4db8:	e8 16       	cp	r14, r24
    4dba:	80 e0       	ldi	r24, 0x00	; 0
    4dbc:	f8 06       	cpc	r15, r24
    4dbe:	81 e0       	ldi	r24, 0x01	; 1
    4dc0:	08 07       	cpc	r16, r24
    4dc2:	80 e0       	ldi	r24, 0x00	; 0
    4dc4:	18 07       	cpc	r17, r24
    4dc6:	80 f4       	brcc	.+32     	; 0x4de8 <__clzsi2+0x46>
    4dc8:	8f ef       	ldi	r24, 0xFF	; 255
    4dca:	e8 16       	cp	r14, r24
    4dcc:	f1 04       	cpc	r15, r1
    4dce:	01 05       	cpc	r16, r1
    4dd0:	11 05       	cpc	r17, r1
    4dd2:	31 f0       	breq	.+12     	; 0x4de0 <__clzsi2+0x3e>
    4dd4:	28 f0       	brcs	.+10     	; 0x4de0 <__clzsi2+0x3e>
    4dd6:	88 e0       	ldi	r24, 0x08	; 8
    4dd8:	90 e0       	ldi	r25, 0x00	; 0
    4dda:	a0 e0       	ldi	r26, 0x00	; 0
    4ddc:	b0 e0       	ldi	r27, 0x00	; 0
    4dde:	16 c0       	rjmp	.+44     	; 0x4e0c <__clzsi2+0x6a>
    4de0:	80 e0       	ldi	r24, 0x00	; 0
    4de2:	90 e0       	ldi	r25, 0x00	; 0
    4de4:	dc 01       	movw	r26, r24
    4de6:	12 c0       	rjmp	.+36     	; 0x4e0c <__clzsi2+0x6a>
    4de8:	80 e0       	ldi	r24, 0x00	; 0
    4dea:	e8 16       	cp	r14, r24
    4dec:	80 e0       	ldi	r24, 0x00	; 0
    4dee:	f8 06       	cpc	r15, r24
    4df0:	80 e0       	ldi	r24, 0x00	; 0
    4df2:	08 07       	cpc	r16, r24
    4df4:	81 e0       	ldi	r24, 0x01	; 1
    4df6:	18 07       	cpc	r17, r24
    4df8:	28 f0       	brcs	.+10     	; 0x4e04 <__clzsi2+0x62>
    4dfa:	88 e1       	ldi	r24, 0x18	; 24
    4dfc:	90 e0       	ldi	r25, 0x00	; 0
    4dfe:	a0 e0       	ldi	r26, 0x00	; 0
    4e00:	b0 e0       	ldi	r27, 0x00	; 0
    4e02:	04 c0       	rjmp	.+8      	; 0x4e0c <__clzsi2+0x6a>
    4e04:	80 e1       	ldi	r24, 0x10	; 16
    4e06:	90 e0       	ldi	r25, 0x00	; 0
    4e08:	a0 e0       	ldi	r26, 0x00	; 0
    4e0a:	b0 e0       	ldi	r27, 0x00	; 0
    4e0c:	20 e2       	ldi	r18, 0x20	; 32
    4e0e:	30 e0       	ldi	r19, 0x00	; 0
    4e10:	40 e0       	ldi	r20, 0x00	; 0
    4e12:	50 e0       	ldi	r21, 0x00	; 0
    4e14:	28 1b       	sub	r18, r24
    4e16:	39 0b       	sbc	r19, r25
    4e18:	4a 0b       	sbc	r20, r26
    4e1a:	5b 0b       	sbc	r21, r27
    4e1c:	57 01       	movw	r10, r14
    4e1e:	68 01       	movw	r12, r16
    4e20:	04 c0       	rjmp	.+8      	; 0x4e2a <__clzsi2+0x88>
    4e22:	d6 94       	lsr	r13
    4e24:	c7 94       	ror	r12
    4e26:	b7 94       	ror	r11
    4e28:	a7 94       	ror	r10
    4e2a:	8a 95       	dec	r24
    4e2c:	d2 f7       	brpl	.-12     	; 0x4e22 <__clzsi2+0x80>
    4e2e:	f5 01       	movw	r30, r10
    4e30:	e2 56       	subi	r30, 0x62	; 98
    4e32:	fe 4f       	sbci	r31, 0xFE	; 254
    4e34:	80 81       	ld	r24, Z
    4e36:	28 1b       	sub	r18, r24
    4e38:	31 09       	sbc	r19, r1
    4e3a:	41 09       	sbc	r20, r1
    4e3c:	51 09       	sbc	r21, r1
    4e3e:	c9 01       	movw	r24, r18
    4e40:	1f 91       	pop	r17
    4e42:	0f 91       	pop	r16
    4e44:	ff 90       	pop	r15
    4e46:	ef 90       	pop	r14
    4e48:	df 90       	pop	r13
    4e4a:	cf 90       	pop	r12
    4e4c:	bf 90       	pop	r11
    4e4e:	af 90       	pop	r10
    4e50:	08 95       	ret

00004e52 <__pack_f>:
    4e52:	cf 92       	push	r12
    4e54:	df 92       	push	r13
    4e56:	ef 92       	push	r14
    4e58:	ff 92       	push	r15
    4e5a:	0f 93       	push	r16
    4e5c:	1f 93       	push	r17
    4e5e:	fc 01       	movw	r30, r24
    4e60:	24 81       	ldd	r18, Z+4	; 0x04
    4e62:	35 81       	ldd	r19, Z+5	; 0x05
    4e64:	46 81       	ldd	r20, Z+6	; 0x06
    4e66:	57 81       	ldd	r21, Z+7	; 0x07
    4e68:	01 81       	ldd	r16, Z+1	; 0x01
    4e6a:	80 81       	ld	r24, Z
    4e6c:	82 30       	cpi	r24, 0x02	; 2
    4e6e:	20 f4       	brcc	.+8      	; 0x4e78 <__pack_f+0x26>
    4e70:	40 61       	ori	r20, 0x10	; 16
    4e72:	8f ef       	ldi	r24, 0xFF	; 255
    4e74:	90 e0       	ldi	r25, 0x00	; 0
    4e76:	a2 c0       	rjmp	.+324    	; 0x4fbc <__pack_f+0x16a>
    4e78:	84 30       	cpi	r24, 0x04	; 4
    4e7a:	09 f4       	brne	.+2      	; 0x4e7e <__pack_f+0x2c>
    4e7c:	9a c0       	rjmp	.+308    	; 0x4fb2 <__pack_f+0x160>
    4e7e:	82 30       	cpi	r24, 0x02	; 2
    4e80:	19 f4       	brne	.+6      	; 0x4e88 <__pack_f+0x36>
    4e82:	80 e0       	ldi	r24, 0x00	; 0
    4e84:	90 e0       	ldi	r25, 0x00	; 0
    4e86:	97 c0       	rjmp	.+302    	; 0x4fb6 <__pack_f+0x164>
    4e88:	21 15       	cp	r18, r1
    4e8a:	31 05       	cpc	r19, r1
    4e8c:	41 05       	cpc	r20, r1
    4e8e:	51 05       	cpc	r21, r1
    4e90:	19 f4       	brne	.+6      	; 0x4e98 <__pack_f+0x46>
    4e92:	80 e0       	ldi	r24, 0x00	; 0
    4e94:	90 e0       	ldi	r25, 0x00	; 0
    4e96:	92 c0       	rjmp	.+292    	; 0x4fbc <__pack_f+0x16a>
    4e98:	82 81       	ldd	r24, Z+2	; 0x02
    4e9a:	93 81       	ldd	r25, Z+3	; 0x03
    4e9c:	6f ef       	ldi	r22, 0xFF	; 255
    4e9e:	82 38       	cpi	r24, 0x82	; 130
    4ea0:	96 07       	cpc	r25, r22
    4ea2:	0c f0       	brlt	.+2      	; 0x4ea6 <__pack_f+0x54>
    4ea4:	58 c0       	rjmp	.+176    	; 0x4f56 <__pack_f+0x104>
    4ea6:	62 e8       	ldi	r22, 0x82	; 130
    4ea8:	7f ef       	ldi	r23, 0xFF	; 255
    4eaa:	68 1b       	sub	r22, r24
    4eac:	79 0b       	sbc	r23, r25
    4eae:	6a 31       	cpi	r22, 0x1A	; 26
    4eb0:	71 05       	cpc	r23, r1
    4eb2:	24 f0       	brlt	.+8      	; 0x4ebc <__pack_f+0x6a>
    4eb4:	20 e0       	ldi	r18, 0x00	; 0
    4eb6:	30 e0       	ldi	r19, 0x00	; 0
    4eb8:	a9 01       	movw	r20, r18
    4eba:	2a c0       	rjmp	.+84     	; 0x4f10 <__pack_f+0xbe>
    4ebc:	69 01       	movw	r12, r18
    4ebe:	7a 01       	movw	r14, r20
    4ec0:	06 2e       	mov	r0, r22
    4ec2:	04 c0       	rjmp	.+8      	; 0x4ecc <__pack_f+0x7a>
    4ec4:	f6 94       	lsr	r15
    4ec6:	e7 94       	ror	r14
    4ec8:	d7 94       	ror	r13
    4eca:	c7 94       	ror	r12
    4ecc:	0a 94       	dec	r0
    4ece:	d2 f7       	brpl	.-12     	; 0x4ec4 <__pack_f+0x72>
    4ed0:	81 e0       	ldi	r24, 0x01	; 1
    4ed2:	90 e0       	ldi	r25, 0x00	; 0
    4ed4:	a0 e0       	ldi	r26, 0x00	; 0
    4ed6:	b0 e0       	ldi	r27, 0x00	; 0
    4ed8:	04 c0       	rjmp	.+8      	; 0x4ee2 <__pack_f+0x90>
    4eda:	88 0f       	add	r24, r24
    4edc:	99 1f       	adc	r25, r25
    4ede:	aa 1f       	adc	r26, r26
    4ee0:	bb 1f       	adc	r27, r27
    4ee2:	6a 95       	dec	r22
    4ee4:	d2 f7       	brpl	.-12     	; 0x4eda <__pack_f+0x88>
    4ee6:	01 97       	sbiw	r24, 0x01	; 1
    4ee8:	a1 09       	sbc	r26, r1
    4eea:	b1 09       	sbc	r27, r1
    4eec:	82 23       	and	r24, r18
    4eee:	93 23       	and	r25, r19
    4ef0:	a4 23       	and	r26, r20
    4ef2:	b5 23       	and	r27, r21
    4ef4:	00 97       	sbiw	r24, 0x00	; 0
    4ef6:	a1 05       	cpc	r26, r1
    4ef8:	b1 05       	cpc	r27, r1
    4efa:	21 f0       	breq	.+8      	; 0x4f04 <__pack_f+0xb2>
    4efc:	81 e0       	ldi	r24, 0x01	; 1
    4efe:	90 e0       	ldi	r25, 0x00	; 0
    4f00:	a0 e0       	ldi	r26, 0x00	; 0
    4f02:	b0 e0       	ldi	r27, 0x00	; 0
    4f04:	9c 01       	movw	r18, r24
    4f06:	ad 01       	movw	r20, r26
    4f08:	2c 29       	or	r18, r12
    4f0a:	3d 29       	or	r19, r13
    4f0c:	4e 29       	or	r20, r14
    4f0e:	5f 29       	or	r21, r15
    4f10:	da 01       	movw	r26, r20
    4f12:	c9 01       	movw	r24, r18
    4f14:	8f 77       	andi	r24, 0x7F	; 127
    4f16:	90 70       	andi	r25, 0x00	; 0
    4f18:	a0 70       	andi	r26, 0x00	; 0
    4f1a:	b0 70       	andi	r27, 0x00	; 0
    4f1c:	80 34       	cpi	r24, 0x40	; 64
    4f1e:	91 05       	cpc	r25, r1
    4f20:	a1 05       	cpc	r26, r1
    4f22:	b1 05       	cpc	r27, r1
    4f24:	39 f4       	brne	.+14     	; 0x4f34 <__pack_f+0xe2>
    4f26:	27 ff       	sbrs	r18, 7
    4f28:	09 c0       	rjmp	.+18     	; 0x4f3c <__pack_f+0xea>
    4f2a:	20 5c       	subi	r18, 0xC0	; 192
    4f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    4f2e:	4f 4f       	sbci	r20, 0xFF	; 255
    4f30:	5f 4f       	sbci	r21, 0xFF	; 255
    4f32:	04 c0       	rjmp	.+8      	; 0x4f3c <__pack_f+0xea>
    4f34:	21 5c       	subi	r18, 0xC1	; 193
    4f36:	3f 4f       	sbci	r19, 0xFF	; 255
    4f38:	4f 4f       	sbci	r20, 0xFF	; 255
    4f3a:	5f 4f       	sbci	r21, 0xFF	; 255
    4f3c:	80 e0       	ldi	r24, 0x00	; 0
    4f3e:	90 e0       	ldi	r25, 0x00	; 0
    4f40:	20 30       	cpi	r18, 0x00	; 0
    4f42:	60 e0       	ldi	r22, 0x00	; 0
    4f44:	36 07       	cpc	r19, r22
    4f46:	60 e0       	ldi	r22, 0x00	; 0
    4f48:	46 07       	cpc	r20, r22
    4f4a:	60 e4       	ldi	r22, 0x40	; 64
    4f4c:	56 07       	cpc	r21, r22
    4f4e:	48 f1       	brcs	.+82     	; 0x4fa2 <__pack_f+0x150>
    4f50:	81 e0       	ldi	r24, 0x01	; 1
    4f52:	90 e0       	ldi	r25, 0x00	; 0
    4f54:	26 c0       	rjmp	.+76     	; 0x4fa2 <__pack_f+0x150>
    4f56:	80 38       	cpi	r24, 0x80	; 128
    4f58:	91 05       	cpc	r25, r1
    4f5a:	5c f5       	brge	.+86     	; 0x4fb2 <__pack_f+0x160>
    4f5c:	81 58       	subi	r24, 0x81	; 129
    4f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    4f60:	7f e7       	ldi	r23, 0x7F	; 127
    4f62:	c7 2e       	mov	r12, r23
    4f64:	d1 2c       	mov	r13, r1
    4f66:	e1 2c       	mov	r14, r1
    4f68:	f1 2c       	mov	r15, r1
    4f6a:	c2 22       	and	r12, r18
    4f6c:	d3 22       	and	r13, r19
    4f6e:	e4 22       	and	r14, r20
    4f70:	f5 22       	and	r15, r21
    4f72:	60 e4       	ldi	r22, 0x40	; 64
    4f74:	c6 16       	cp	r12, r22
    4f76:	d1 04       	cpc	r13, r1
    4f78:	e1 04       	cpc	r14, r1
    4f7a:	f1 04       	cpc	r15, r1
    4f7c:	39 f4       	brne	.+14     	; 0x4f8c <__pack_f+0x13a>
    4f7e:	27 ff       	sbrs	r18, 7
    4f80:	09 c0       	rjmp	.+18     	; 0x4f94 <__pack_f+0x142>
    4f82:	20 5c       	subi	r18, 0xC0	; 192
    4f84:	3f 4f       	sbci	r19, 0xFF	; 255
    4f86:	4f 4f       	sbci	r20, 0xFF	; 255
    4f88:	5f 4f       	sbci	r21, 0xFF	; 255
    4f8a:	04 c0       	rjmp	.+8      	; 0x4f94 <__pack_f+0x142>
    4f8c:	21 5c       	subi	r18, 0xC1	; 193
    4f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    4f90:	4f 4f       	sbci	r20, 0xFF	; 255
    4f92:	5f 4f       	sbci	r21, 0xFF	; 255
    4f94:	57 ff       	sbrs	r21, 7
    4f96:	05 c0       	rjmp	.+10     	; 0x4fa2 <__pack_f+0x150>
    4f98:	56 95       	lsr	r21
    4f9a:	47 95       	ror	r20
    4f9c:	37 95       	ror	r19
    4f9e:	27 95       	ror	r18
    4fa0:	01 96       	adiw	r24, 0x01	; 1
    4fa2:	97 e0       	ldi	r25, 0x07	; 7
    4fa4:	56 95       	lsr	r21
    4fa6:	47 95       	ror	r20
    4fa8:	37 95       	ror	r19
    4faa:	27 95       	ror	r18
    4fac:	9a 95       	dec	r25
    4fae:	d1 f7       	brne	.-12     	; 0x4fa4 <__pack_f+0x152>
    4fb0:	05 c0       	rjmp	.+10     	; 0x4fbc <__pack_f+0x16a>
    4fb2:	8f ef       	ldi	r24, 0xFF	; 255
    4fb4:	90 e0       	ldi	r25, 0x00	; 0
    4fb6:	20 e0       	ldi	r18, 0x00	; 0
    4fb8:	30 e0       	ldi	r19, 0x00	; 0
    4fba:	a9 01       	movw	r20, r18
    4fbc:	78 2f       	mov	r23, r24
    4fbe:	77 95       	ror	r23
    4fc0:	77 27       	eor	r23, r23
    4fc2:	77 95       	ror	r23
    4fc4:	14 2f       	mov	r17, r20
    4fc6:	1f 77       	andi	r17, 0x7F	; 127
    4fc8:	60 2f       	mov	r22, r16
    4fca:	67 95       	ror	r22
    4fcc:	66 27       	eor	r22, r22
    4fce:	67 95       	ror	r22
    4fd0:	86 95       	lsr	r24
    4fd2:	f1 2f       	mov	r31, r17
    4fd4:	f7 2b       	or	r31, r23
    4fd6:	e8 2f       	mov	r30, r24
    4fd8:	e6 2b       	or	r30, r22
    4fda:	62 2f       	mov	r22, r18
    4fdc:	73 2f       	mov	r23, r19
    4fde:	8f 2f       	mov	r24, r31
    4fe0:	9e 2f       	mov	r25, r30
    4fe2:	1f 91       	pop	r17
    4fe4:	0f 91       	pop	r16
    4fe6:	ff 90       	pop	r15
    4fe8:	ef 90       	pop	r14
    4fea:	df 90       	pop	r13
    4fec:	cf 90       	pop	r12
    4fee:	08 95       	ret

00004ff0 <__unpack_f>:
    4ff0:	fc 01       	movw	r30, r24
    4ff2:	db 01       	movw	r26, r22
    4ff4:	20 81       	ld	r18, Z
    4ff6:	31 81       	ldd	r19, Z+1	; 0x01
    4ff8:	82 81       	ldd	r24, Z+2	; 0x02
    4ffa:	48 2f       	mov	r20, r24
    4ffc:	4f 77       	andi	r20, 0x7F	; 127
    4ffe:	50 e0       	ldi	r21, 0x00	; 0
    5000:	98 2f       	mov	r25, r24
    5002:	99 1f       	adc	r25, r25
    5004:	99 27       	eor	r25, r25
    5006:	99 1f       	adc	r25, r25
    5008:	63 81       	ldd	r22, Z+3	; 0x03
    500a:	86 2f       	mov	r24, r22
    500c:	88 0f       	add	r24, r24
    500e:	89 2b       	or	r24, r25
    5010:	90 e0       	ldi	r25, 0x00	; 0
    5012:	66 1f       	adc	r22, r22
    5014:	66 27       	eor	r22, r22
    5016:	66 1f       	adc	r22, r22
    5018:	11 96       	adiw	r26, 0x01	; 1
    501a:	6c 93       	st	X, r22
    501c:	11 97       	sbiw	r26, 0x01	; 1
    501e:	00 97       	sbiw	r24, 0x00	; 0
    5020:	69 f5       	brne	.+90     	; 0x507c <__unpack_f+0x8c>
    5022:	21 15       	cp	r18, r1
    5024:	31 05       	cpc	r19, r1
    5026:	41 05       	cpc	r20, r1
    5028:	51 05       	cpc	r21, r1
    502a:	11 f4       	brne	.+4      	; 0x5030 <__unpack_f+0x40>
    502c:	82 e0       	ldi	r24, 0x02	; 2
    502e:	2f c0       	rjmp	.+94     	; 0x508e <__unpack_f+0x9e>
    5030:	82 e8       	ldi	r24, 0x82	; 130
    5032:	9f ef       	ldi	r25, 0xFF	; 255
    5034:	13 96       	adiw	r26, 0x03	; 3
    5036:	9c 93       	st	X, r25
    5038:	8e 93       	st	-X, r24
    503a:	12 97       	sbiw	r26, 0x02	; 2
    503c:	67 e0       	ldi	r22, 0x07	; 7
    503e:	22 0f       	add	r18, r18
    5040:	33 1f       	adc	r19, r19
    5042:	44 1f       	adc	r20, r20
    5044:	55 1f       	adc	r21, r21
    5046:	6a 95       	dec	r22
    5048:	d1 f7       	brne	.-12     	; 0x503e <__unpack_f+0x4e>
    504a:	83 e0       	ldi	r24, 0x03	; 3
    504c:	8c 93       	st	X, r24
    504e:	0d c0       	rjmp	.+26     	; 0x506a <__unpack_f+0x7a>
    5050:	22 0f       	add	r18, r18
    5052:	33 1f       	adc	r19, r19
    5054:	44 1f       	adc	r20, r20
    5056:	55 1f       	adc	r21, r21
    5058:	12 96       	adiw	r26, 0x02	; 2
    505a:	8d 91       	ld	r24, X+
    505c:	9c 91       	ld	r25, X
    505e:	13 97       	sbiw	r26, 0x03	; 3
    5060:	01 97       	sbiw	r24, 0x01	; 1
    5062:	13 96       	adiw	r26, 0x03	; 3
    5064:	9c 93       	st	X, r25
    5066:	8e 93       	st	-X, r24
    5068:	12 97       	sbiw	r26, 0x02	; 2
    506a:	20 30       	cpi	r18, 0x00	; 0
    506c:	80 e0       	ldi	r24, 0x00	; 0
    506e:	38 07       	cpc	r19, r24
    5070:	80 e0       	ldi	r24, 0x00	; 0
    5072:	48 07       	cpc	r20, r24
    5074:	80 e4       	ldi	r24, 0x40	; 64
    5076:	58 07       	cpc	r21, r24
    5078:	58 f3       	brcs	.-42     	; 0x5050 <__unpack_f+0x60>
    507a:	22 c0       	rjmp	.+68     	; 0x50c0 <__unpack_f+0xd0>
    507c:	8f 3f       	cpi	r24, 0xFF	; 255
    507e:	91 05       	cpc	r25, r1
    5080:	79 f4       	brne	.+30     	; 0x50a0 <__unpack_f+0xb0>
    5082:	21 15       	cp	r18, r1
    5084:	31 05       	cpc	r19, r1
    5086:	41 05       	cpc	r20, r1
    5088:	51 05       	cpc	r21, r1
    508a:	19 f4       	brne	.+6      	; 0x5092 <__unpack_f+0xa2>
    508c:	84 e0       	ldi	r24, 0x04	; 4
    508e:	8c 93       	st	X, r24
    5090:	08 95       	ret
    5092:	44 ff       	sbrs	r20, 4
    5094:	03 c0       	rjmp	.+6      	; 0x509c <__unpack_f+0xac>
    5096:	81 e0       	ldi	r24, 0x01	; 1
    5098:	8c 93       	st	X, r24
    509a:	12 c0       	rjmp	.+36     	; 0x50c0 <__unpack_f+0xd0>
    509c:	1c 92       	st	X, r1
    509e:	10 c0       	rjmp	.+32     	; 0x50c0 <__unpack_f+0xd0>
    50a0:	8f 57       	subi	r24, 0x7F	; 127
    50a2:	90 40       	sbci	r25, 0x00	; 0
    50a4:	13 96       	adiw	r26, 0x03	; 3
    50a6:	9c 93       	st	X, r25
    50a8:	8e 93       	st	-X, r24
    50aa:	12 97       	sbiw	r26, 0x02	; 2
    50ac:	83 e0       	ldi	r24, 0x03	; 3
    50ae:	8c 93       	st	X, r24
    50b0:	87 e0       	ldi	r24, 0x07	; 7
    50b2:	22 0f       	add	r18, r18
    50b4:	33 1f       	adc	r19, r19
    50b6:	44 1f       	adc	r20, r20
    50b8:	55 1f       	adc	r21, r21
    50ba:	8a 95       	dec	r24
    50bc:	d1 f7       	brne	.-12     	; 0x50b2 <__unpack_f+0xc2>
    50be:	50 64       	ori	r21, 0x40	; 64
    50c0:	14 96       	adiw	r26, 0x04	; 4
    50c2:	2d 93       	st	X+, r18
    50c4:	3d 93       	st	X+, r19
    50c6:	4d 93       	st	X+, r20
    50c8:	5c 93       	st	X, r21
    50ca:	17 97       	sbiw	r26, 0x07	; 7
    50cc:	08 95       	ret

000050ce <__fpcmp_parts_f>:
    50ce:	ef 92       	push	r14
    50d0:	ff 92       	push	r15
    50d2:	0f 93       	push	r16
    50d4:	1f 93       	push	r17
    50d6:	fc 01       	movw	r30, r24
    50d8:	db 01       	movw	r26, r22
    50da:	80 81       	ld	r24, Z
    50dc:	82 30       	cpi	r24, 0x02	; 2
    50de:	08 f4       	brcc	.+2      	; 0x50e2 <__fpcmp_parts_f+0x14>
    50e0:	47 c0       	rjmp	.+142    	; 0x5170 <__fpcmp_parts_f+0xa2>
    50e2:	9c 91       	ld	r25, X
    50e4:	92 30       	cpi	r25, 0x02	; 2
    50e6:	08 f4       	brcc	.+2      	; 0x50ea <__fpcmp_parts_f+0x1c>
    50e8:	43 c0       	rjmp	.+134    	; 0x5170 <__fpcmp_parts_f+0xa2>
    50ea:	84 30       	cpi	r24, 0x04	; 4
    50ec:	51 f4       	brne	.+20     	; 0x5102 <__fpcmp_parts_f+0x34>
    50ee:	81 81       	ldd	r24, Z+1	; 0x01
    50f0:	94 30       	cpi	r25, 0x04	; 4
    50f2:	a1 f5       	brne	.+104    	; 0x515c <__fpcmp_parts_f+0x8e>
    50f4:	11 96       	adiw	r26, 0x01	; 1
    50f6:	2c 91       	ld	r18, X
    50f8:	11 97       	sbiw	r26, 0x01	; 1
    50fa:	30 e0       	ldi	r19, 0x00	; 0
    50fc:	28 1b       	sub	r18, r24
    50fe:	31 09       	sbc	r19, r1
    5100:	3f c0       	rjmp	.+126    	; 0x5180 <__fpcmp_parts_f+0xb2>
    5102:	94 30       	cpi	r25, 0x04	; 4
    5104:	21 f0       	breq	.+8      	; 0x510e <__fpcmp_parts_f+0x40>
    5106:	82 30       	cpi	r24, 0x02	; 2
    5108:	31 f4       	brne	.+12     	; 0x5116 <__fpcmp_parts_f+0x48>
    510a:	92 30       	cpi	r25, 0x02	; 2
    510c:	b9 f1       	breq	.+110    	; 0x517c <__fpcmp_parts_f+0xae>
    510e:	11 96       	adiw	r26, 0x01	; 1
    5110:	8c 91       	ld	r24, X
    5112:	11 97       	sbiw	r26, 0x01	; 1
    5114:	2b c0       	rjmp	.+86     	; 0x516c <__fpcmp_parts_f+0x9e>
    5116:	81 81       	ldd	r24, Z+1	; 0x01
    5118:	92 30       	cpi	r25, 0x02	; 2
    511a:	01 f1       	breq	.+64     	; 0x515c <__fpcmp_parts_f+0x8e>
    511c:	11 96       	adiw	r26, 0x01	; 1
    511e:	9c 91       	ld	r25, X
    5120:	11 97       	sbiw	r26, 0x01	; 1
    5122:	89 17       	cp	r24, r25
    5124:	d9 f4       	brne	.+54     	; 0x515c <__fpcmp_parts_f+0x8e>
    5126:	42 81       	ldd	r20, Z+2	; 0x02
    5128:	53 81       	ldd	r21, Z+3	; 0x03
    512a:	12 96       	adiw	r26, 0x02	; 2
    512c:	2d 91       	ld	r18, X+
    512e:	3c 91       	ld	r19, X
    5130:	13 97       	sbiw	r26, 0x03	; 3
    5132:	24 17       	cp	r18, r20
    5134:	35 07       	cpc	r19, r21
    5136:	94 f0       	brlt	.+36     	; 0x515c <__fpcmp_parts_f+0x8e>
    5138:	42 17       	cp	r20, r18
    513a:	53 07       	cpc	r21, r19
    513c:	bc f0       	brlt	.+46     	; 0x516c <__fpcmp_parts_f+0x9e>
    513e:	e4 80       	ldd	r14, Z+4	; 0x04
    5140:	f5 80       	ldd	r15, Z+5	; 0x05
    5142:	06 81       	ldd	r16, Z+6	; 0x06
    5144:	17 81       	ldd	r17, Z+7	; 0x07
    5146:	14 96       	adiw	r26, 0x04	; 4
    5148:	2d 91       	ld	r18, X+
    514a:	3d 91       	ld	r19, X+
    514c:	4d 91       	ld	r20, X+
    514e:	5c 91       	ld	r21, X
    5150:	17 97       	sbiw	r26, 0x07	; 7
    5152:	2e 15       	cp	r18, r14
    5154:	3f 05       	cpc	r19, r15
    5156:	40 07       	cpc	r20, r16
    5158:	51 07       	cpc	r21, r17
    515a:	18 f4       	brcc	.+6      	; 0x5162 <__fpcmp_parts_f+0x94>
    515c:	88 23       	and	r24, r24
    515e:	41 f0       	breq	.+16     	; 0x5170 <__fpcmp_parts_f+0xa2>
    5160:	0a c0       	rjmp	.+20     	; 0x5176 <__fpcmp_parts_f+0xa8>
    5162:	e2 16       	cp	r14, r18
    5164:	f3 06       	cpc	r15, r19
    5166:	04 07       	cpc	r16, r20
    5168:	15 07       	cpc	r17, r21
    516a:	40 f4       	brcc	.+16     	; 0x517c <__fpcmp_parts_f+0xae>
    516c:	88 23       	and	r24, r24
    516e:	19 f0       	breq	.+6      	; 0x5176 <__fpcmp_parts_f+0xa8>
    5170:	21 e0       	ldi	r18, 0x01	; 1
    5172:	30 e0       	ldi	r19, 0x00	; 0
    5174:	05 c0       	rjmp	.+10     	; 0x5180 <__fpcmp_parts_f+0xb2>
    5176:	2f ef       	ldi	r18, 0xFF	; 255
    5178:	3f ef       	ldi	r19, 0xFF	; 255
    517a:	02 c0       	rjmp	.+4      	; 0x5180 <__fpcmp_parts_f+0xb2>
    517c:	20 e0       	ldi	r18, 0x00	; 0
    517e:	30 e0       	ldi	r19, 0x00	; 0
    5180:	c9 01       	movw	r24, r18
    5182:	1f 91       	pop	r17
    5184:	0f 91       	pop	r16
    5186:	ff 90       	pop	r15
    5188:	ef 90       	pop	r14
    518a:	08 95       	ret

0000518c <__udivmodhi4>:
    518c:	aa 1b       	sub	r26, r26
    518e:	bb 1b       	sub	r27, r27
    5190:	51 e1       	ldi	r21, 0x11	; 17
    5192:	07 c0       	rjmp	.+14     	; 0x51a2 <__udivmodhi4_ep>

00005194 <__udivmodhi4_loop>:
    5194:	aa 1f       	adc	r26, r26
    5196:	bb 1f       	adc	r27, r27
    5198:	a6 17       	cp	r26, r22
    519a:	b7 07       	cpc	r27, r23
    519c:	10 f0       	brcs	.+4      	; 0x51a2 <__udivmodhi4_ep>
    519e:	a6 1b       	sub	r26, r22
    51a0:	b7 0b       	sbc	r27, r23

000051a2 <__udivmodhi4_ep>:
    51a2:	88 1f       	adc	r24, r24
    51a4:	99 1f       	adc	r25, r25
    51a6:	5a 95       	dec	r21
    51a8:	a9 f7       	brne	.-22     	; 0x5194 <__udivmodhi4_loop>
    51aa:	80 95       	com	r24
    51ac:	90 95       	com	r25
    51ae:	bc 01       	movw	r22, r24
    51b0:	cd 01       	movw	r24, r26
    51b2:	08 95       	ret

000051b4 <__divmodhi4>:
    51b4:	97 fb       	bst	r25, 7
    51b6:	09 2e       	mov	r0, r25
    51b8:	07 26       	eor	r0, r23
    51ba:	0a d0       	rcall	.+20     	; 0x51d0 <__divmodhi4_neg1>
    51bc:	77 fd       	sbrc	r23, 7
    51be:	04 d0       	rcall	.+8      	; 0x51c8 <__divmodhi4_neg2>
    51c0:	e5 df       	rcall	.-54     	; 0x518c <__udivmodhi4>
    51c2:	06 d0       	rcall	.+12     	; 0x51d0 <__divmodhi4_neg1>
    51c4:	00 20       	and	r0, r0
    51c6:	1a f4       	brpl	.+6      	; 0x51ce <__divmodhi4_exit>

000051c8 <__divmodhi4_neg2>:
    51c8:	70 95       	com	r23
    51ca:	61 95       	neg	r22
    51cc:	7f 4f       	sbci	r23, 0xFF	; 255

000051ce <__divmodhi4_exit>:
    51ce:	08 95       	ret

000051d0 <__divmodhi4_neg1>:
    51d0:	f6 f7       	brtc	.-4      	; 0x51ce <__divmodhi4_exit>
    51d2:	90 95       	com	r25
    51d4:	81 95       	neg	r24
    51d6:	9f 4f       	sbci	r25, 0xFF	; 255
    51d8:	08 95       	ret

000051da <__udivmodsi4>:
    51da:	a1 e2       	ldi	r26, 0x21	; 33
    51dc:	1a 2e       	mov	r1, r26
    51de:	aa 1b       	sub	r26, r26
    51e0:	bb 1b       	sub	r27, r27
    51e2:	fd 01       	movw	r30, r26
    51e4:	0d c0       	rjmp	.+26     	; 0x5200 <__udivmodsi4_ep>

000051e6 <__udivmodsi4_loop>:
    51e6:	aa 1f       	adc	r26, r26
    51e8:	bb 1f       	adc	r27, r27
    51ea:	ee 1f       	adc	r30, r30
    51ec:	ff 1f       	adc	r31, r31
    51ee:	a2 17       	cp	r26, r18
    51f0:	b3 07       	cpc	r27, r19
    51f2:	e4 07       	cpc	r30, r20
    51f4:	f5 07       	cpc	r31, r21
    51f6:	20 f0       	brcs	.+8      	; 0x5200 <__udivmodsi4_ep>
    51f8:	a2 1b       	sub	r26, r18
    51fa:	b3 0b       	sbc	r27, r19
    51fc:	e4 0b       	sbc	r30, r20
    51fe:	f5 0b       	sbc	r31, r21

00005200 <__udivmodsi4_ep>:
    5200:	66 1f       	adc	r22, r22
    5202:	77 1f       	adc	r23, r23
    5204:	88 1f       	adc	r24, r24
    5206:	99 1f       	adc	r25, r25
    5208:	1a 94       	dec	r1
    520a:	69 f7       	brne	.-38     	; 0x51e6 <__udivmodsi4_loop>
    520c:	60 95       	com	r22
    520e:	70 95       	com	r23
    5210:	80 95       	com	r24
    5212:	90 95       	com	r25
    5214:	9b 01       	movw	r18, r22
    5216:	ac 01       	movw	r20, r24
    5218:	bd 01       	movw	r22, r26
    521a:	cf 01       	movw	r24, r30
    521c:	08 95       	ret

0000521e <__prologue_saves__>:
    521e:	2f 92       	push	r2
    5220:	3f 92       	push	r3
    5222:	4f 92       	push	r4
    5224:	5f 92       	push	r5
    5226:	6f 92       	push	r6
    5228:	7f 92       	push	r7
    522a:	8f 92       	push	r8
    522c:	9f 92       	push	r9
    522e:	af 92       	push	r10
    5230:	bf 92       	push	r11
    5232:	cf 92       	push	r12
    5234:	df 92       	push	r13
    5236:	ef 92       	push	r14
    5238:	ff 92       	push	r15
    523a:	0f 93       	push	r16
    523c:	1f 93       	push	r17
    523e:	cf 93       	push	r28
    5240:	df 93       	push	r29
    5242:	cd b7       	in	r28, 0x3d	; 61
    5244:	de b7       	in	r29, 0x3e	; 62
    5246:	ca 1b       	sub	r28, r26
    5248:	db 0b       	sbc	r29, r27
    524a:	0f b6       	in	r0, 0x3f	; 63
    524c:	f8 94       	cli
    524e:	de bf       	out	0x3e, r29	; 62
    5250:	0f be       	out	0x3f, r0	; 63
    5252:	cd bf       	out	0x3d, r28	; 61
    5254:	09 94       	ijmp

00005256 <__epilogue_restores__>:
    5256:	2a 88       	ldd	r2, Y+18	; 0x12
    5258:	39 88       	ldd	r3, Y+17	; 0x11
    525a:	48 88       	ldd	r4, Y+16	; 0x10
    525c:	5f 84       	ldd	r5, Y+15	; 0x0f
    525e:	6e 84       	ldd	r6, Y+14	; 0x0e
    5260:	7d 84       	ldd	r7, Y+13	; 0x0d
    5262:	8c 84       	ldd	r8, Y+12	; 0x0c
    5264:	9b 84       	ldd	r9, Y+11	; 0x0b
    5266:	aa 84       	ldd	r10, Y+10	; 0x0a
    5268:	b9 84       	ldd	r11, Y+9	; 0x09
    526a:	c8 84       	ldd	r12, Y+8	; 0x08
    526c:	df 80       	ldd	r13, Y+7	; 0x07
    526e:	ee 80       	ldd	r14, Y+6	; 0x06
    5270:	fd 80       	ldd	r15, Y+5	; 0x05
    5272:	0c 81       	ldd	r16, Y+4	; 0x04
    5274:	1b 81       	ldd	r17, Y+3	; 0x03
    5276:	aa 81       	ldd	r26, Y+2	; 0x02
    5278:	b9 81       	ldd	r27, Y+1	; 0x01
    527a:	ce 0f       	add	r28, r30
    527c:	d1 1d       	adc	r29, r1
    527e:	0f b6       	in	r0, 0x3f	; 63
    5280:	f8 94       	cli
    5282:	de bf       	out	0x3e, r29	; 62
    5284:	0f be       	out	0x3f, r0	; 63
    5286:	cd bf       	out	0x3d, r28	; 61
    5288:	ed 01       	movw	r28, r26
    528a:	08 95       	ret

0000528c <__tablejump2__>:
    528c:	ee 0f       	add	r30, r30
    528e:	ff 1f       	adc	r31, r31

00005290 <__tablejump__>:
    5290:	05 90       	lpm	r0, Z+
    5292:	f4 91       	lpm	r31, Z+
    5294:	e0 2d       	mov	r30, r0
    5296:	09 94       	ijmp

00005298 <acos>:
    5298:	9f 93       	push	r25
    529a:	9f 77       	andi	r25, 0x7F	; 127
    529c:	6e d0       	rcall	.+220    	; 0x537a <__fp_arccos>
    529e:	0f 90       	pop	r0
    52a0:	00 20       	and	r0, r0
    52a2:	3a f4       	brpl	.+14     	; 0x52b2 <acos+0x1a>
    52a4:	90 58       	subi	r25, 0x80	; 128
    52a6:	a2 ea       	ldi	r26, 0xA2	; 162
    52a8:	2a ed       	ldi	r18, 0xDA	; 218
    52aa:	3f e0       	ldi	r19, 0x0F	; 15
    52ac:	49 e4       	ldi	r20, 0x49	; 73
    52ae:	50 e4       	ldi	r21, 0x40	; 64
    52b0:	0e d0       	rcall	.+28     	; 0x52ce <__addsf3x>
    52b2:	e2 c0       	rjmp	.+452    	; 0x5478 <__fp_round>
    52b4:	ab d0       	rcall	.+342    	; 0x540c <__fp_pscA>
    52b6:	30 f0       	brcs	.+12     	; 0x52c4 <acos+0x2c>
    52b8:	b0 d0       	rcall	.+352    	; 0x541a <__fp_pscB>
    52ba:	20 f0       	brcs	.+8      	; 0x52c4 <acos+0x2c>
    52bc:	31 f4       	brne	.+12     	; 0x52ca <acos+0x32>
    52be:	9f 3f       	cpi	r25, 0xFF	; 255
    52c0:	11 f4       	brne	.+4      	; 0x52c6 <acos+0x2e>
    52c2:	1e f4       	brtc	.+6      	; 0x52ca <acos+0x32>
    52c4:	7b c0       	rjmp	.+246    	; 0x53bc <__fp_nan>
    52c6:	0e f4       	brtc	.+2      	; 0x52ca <acos+0x32>
    52c8:	e0 95       	com	r30
    52ca:	e7 fb       	bst	r30, 7
    52cc:	71 c0       	rjmp	.+226    	; 0x53b0 <__fp_inf>

000052ce <__addsf3x>:
    52ce:	e9 2f       	mov	r30, r25
    52d0:	f5 d0       	rcall	.+490    	; 0x54bc <__fp_split3>
    52d2:	80 f3       	brcs	.-32     	; 0x52b4 <acos+0x1c>
    52d4:	ba 17       	cp	r27, r26
    52d6:	62 07       	cpc	r22, r18
    52d8:	73 07       	cpc	r23, r19
    52da:	84 07       	cpc	r24, r20
    52dc:	95 07       	cpc	r25, r21
    52de:	18 f0       	brcs	.+6      	; 0x52e6 <__addsf3x+0x18>
    52e0:	71 f4       	brne	.+28     	; 0x52fe <__addsf3x+0x30>
    52e2:	9e f5       	brtc	.+102    	; 0x534a <__addsf3x+0x7c>
    52e4:	0d c1       	rjmp	.+538    	; 0x5500 <__fp_zero>
    52e6:	0e f4       	brtc	.+2      	; 0x52ea <__addsf3x+0x1c>
    52e8:	e0 95       	com	r30
    52ea:	0b 2e       	mov	r0, r27
    52ec:	ba 2f       	mov	r27, r26
    52ee:	a0 2d       	mov	r26, r0
    52f0:	0b 01       	movw	r0, r22
    52f2:	b9 01       	movw	r22, r18
    52f4:	90 01       	movw	r18, r0
    52f6:	0c 01       	movw	r0, r24
    52f8:	ca 01       	movw	r24, r20
    52fa:	a0 01       	movw	r20, r0
    52fc:	11 24       	eor	r1, r1
    52fe:	ff 27       	eor	r31, r31
    5300:	59 1b       	sub	r21, r25
    5302:	99 f0       	breq	.+38     	; 0x532a <__addsf3x+0x5c>
    5304:	59 3f       	cpi	r21, 0xF9	; 249
    5306:	50 f4       	brcc	.+20     	; 0x531c <__addsf3x+0x4e>
    5308:	50 3e       	cpi	r21, 0xE0	; 224
    530a:	68 f1       	brcs	.+90     	; 0x5366 <__addsf3x+0x98>
    530c:	1a 16       	cp	r1, r26
    530e:	f0 40       	sbci	r31, 0x00	; 0
    5310:	a2 2f       	mov	r26, r18
    5312:	23 2f       	mov	r18, r19
    5314:	34 2f       	mov	r19, r20
    5316:	44 27       	eor	r20, r20
    5318:	58 5f       	subi	r21, 0xF8	; 248
    531a:	f3 cf       	rjmp	.-26     	; 0x5302 <__addsf3x+0x34>
    531c:	46 95       	lsr	r20
    531e:	37 95       	ror	r19
    5320:	27 95       	ror	r18
    5322:	a7 95       	ror	r26
    5324:	f0 40       	sbci	r31, 0x00	; 0
    5326:	53 95       	inc	r21
    5328:	c9 f7       	brne	.-14     	; 0x531c <__addsf3x+0x4e>
    532a:	7e f4       	brtc	.+30     	; 0x534a <__addsf3x+0x7c>
    532c:	1f 16       	cp	r1, r31
    532e:	ba 0b       	sbc	r27, r26
    5330:	62 0b       	sbc	r22, r18
    5332:	73 0b       	sbc	r23, r19
    5334:	84 0b       	sbc	r24, r20
    5336:	ba f0       	brmi	.+46     	; 0x5366 <__addsf3x+0x98>
    5338:	91 50       	subi	r25, 0x01	; 1
    533a:	a1 f0       	breq	.+40     	; 0x5364 <__addsf3x+0x96>
    533c:	ff 0f       	add	r31, r31
    533e:	bb 1f       	adc	r27, r27
    5340:	66 1f       	adc	r22, r22
    5342:	77 1f       	adc	r23, r23
    5344:	88 1f       	adc	r24, r24
    5346:	c2 f7       	brpl	.-16     	; 0x5338 <__addsf3x+0x6a>
    5348:	0e c0       	rjmp	.+28     	; 0x5366 <__addsf3x+0x98>
    534a:	ba 0f       	add	r27, r26
    534c:	62 1f       	adc	r22, r18
    534e:	73 1f       	adc	r23, r19
    5350:	84 1f       	adc	r24, r20
    5352:	48 f4       	brcc	.+18     	; 0x5366 <__addsf3x+0x98>
    5354:	87 95       	ror	r24
    5356:	77 95       	ror	r23
    5358:	67 95       	ror	r22
    535a:	b7 95       	ror	r27
    535c:	f7 95       	ror	r31
    535e:	9e 3f       	cpi	r25, 0xFE	; 254
    5360:	08 f0       	brcs	.+2      	; 0x5364 <__addsf3x+0x96>
    5362:	b3 cf       	rjmp	.-154    	; 0x52ca <acos+0x32>
    5364:	93 95       	inc	r25
    5366:	88 0f       	add	r24, r24
    5368:	08 f0       	brcs	.+2      	; 0x536c <__addsf3x+0x9e>
    536a:	99 27       	eor	r25, r25
    536c:	ee 0f       	add	r30, r30
    536e:	97 95       	ror	r25
    5370:	87 95       	ror	r24
    5372:	08 95       	ret

00005374 <cos>:
    5374:	5a d0       	rcall	.+180    	; 0x542a <__fp_rempio2>
    5376:	e3 95       	inc	r30
    5378:	90 c0       	rjmp	.+288    	; 0x549a <__fp_sinus>

0000537a <__fp_arccos>:
    537a:	df 93       	push	r29
    537c:	cf 93       	push	r28
    537e:	1f 93       	push	r17
    5380:	0f 93       	push	r16
    5382:	8b 01       	movw	r16, r22
    5384:	ec 01       	movw	r28, r24
    5386:	ea ef       	ldi	r30, 0xFA	; 250
    5388:	f1 e0       	ldi	r31, 0x01	; 1
    538a:	1b d0       	rcall	.+54     	; 0x53c2 <__fp_powser>
    538c:	75 d0       	rcall	.+234    	; 0x5478 <__fp_round>
    538e:	98 01       	movw	r18, r16
    5390:	ae 01       	movw	r20, r28
    5392:	8b 01       	movw	r16, r22
    5394:	ec 01       	movw	r28, r24
    5396:	60 e0       	ldi	r22, 0x00	; 0
    5398:	70 e0       	ldi	r23, 0x00	; 0
    539a:	80 e8       	ldi	r24, 0x80	; 128
    539c:	9f e3       	ldi	r25, 0x3F	; 63
    539e:	45 d9       	rcall	.-3446   	; 0x462a <__subsf3>
    53a0:	1b d1       	rcall	.+566    	; 0x55d8 <sqrt>
    53a2:	98 01       	movw	r18, r16
    53a4:	ae 01       	movw	r20, r28
    53a6:	0f 91       	pop	r16
    53a8:	1f 91       	pop	r17
    53aa:	cf 91       	pop	r28
    53ac:	df 91       	pop	r29
    53ae:	b9 c0       	rjmp	.+370    	; 0x5522 <__mulsf3x>

000053b0 <__fp_inf>:
    53b0:	97 f9       	bld	r25, 7
    53b2:	9f 67       	ori	r25, 0x7F	; 127
    53b4:	80 e8       	ldi	r24, 0x80	; 128
    53b6:	70 e0       	ldi	r23, 0x00	; 0
    53b8:	60 e0       	ldi	r22, 0x00	; 0
    53ba:	08 95       	ret

000053bc <__fp_nan>:
    53bc:	9f ef       	ldi	r25, 0xFF	; 255
    53be:	80 ec       	ldi	r24, 0xC0	; 192
    53c0:	08 95       	ret

000053c2 <__fp_powser>:
    53c2:	df 93       	push	r29
    53c4:	cf 93       	push	r28
    53c6:	1f 93       	push	r17
    53c8:	0f 93       	push	r16
    53ca:	ff 92       	push	r15
    53cc:	ef 92       	push	r14
    53ce:	df 92       	push	r13
    53d0:	7b 01       	movw	r14, r22
    53d2:	8c 01       	movw	r16, r24
    53d4:	68 94       	set
    53d6:	05 c0       	rjmp	.+10     	; 0x53e2 <__fp_powser+0x20>
    53d8:	da 2e       	mov	r13, r26
    53da:	ef 01       	movw	r28, r30
    53dc:	a2 d0       	rcall	.+324    	; 0x5522 <__mulsf3x>
    53de:	fe 01       	movw	r30, r28
    53e0:	e8 94       	clt
    53e2:	a5 91       	lpm	r26, Z+
    53e4:	25 91       	lpm	r18, Z+
    53e6:	35 91       	lpm	r19, Z+
    53e8:	45 91       	lpm	r20, Z+
    53ea:	55 91       	lpm	r21, Z+
    53ec:	ae f3       	brts	.-22     	; 0x53d8 <__fp_powser+0x16>
    53ee:	ef 01       	movw	r28, r30
    53f0:	6e df       	rcall	.-292    	; 0x52ce <__addsf3x>
    53f2:	fe 01       	movw	r30, r28
    53f4:	97 01       	movw	r18, r14
    53f6:	a8 01       	movw	r20, r16
    53f8:	da 94       	dec	r13
    53fa:	79 f7       	brne	.-34     	; 0x53da <__fp_powser+0x18>
    53fc:	df 90       	pop	r13
    53fe:	ef 90       	pop	r14
    5400:	ff 90       	pop	r15
    5402:	0f 91       	pop	r16
    5404:	1f 91       	pop	r17
    5406:	cf 91       	pop	r28
    5408:	df 91       	pop	r29
    540a:	08 95       	ret

0000540c <__fp_pscA>:
    540c:	00 24       	eor	r0, r0
    540e:	0a 94       	dec	r0
    5410:	16 16       	cp	r1, r22
    5412:	17 06       	cpc	r1, r23
    5414:	18 06       	cpc	r1, r24
    5416:	09 06       	cpc	r0, r25
    5418:	08 95       	ret

0000541a <__fp_pscB>:
    541a:	00 24       	eor	r0, r0
    541c:	0a 94       	dec	r0
    541e:	12 16       	cp	r1, r18
    5420:	13 06       	cpc	r1, r19
    5422:	14 06       	cpc	r1, r20
    5424:	05 06       	cpc	r0, r21
    5426:	08 95       	ret
    5428:	c9 cf       	rjmp	.-110    	; 0x53bc <__fp_nan>

0000542a <__fp_rempio2>:
    542a:	50 d0       	rcall	.+160    	; 0x54cc <__fp_splitA>
    542c:	e8 f3       	brcs	.-6      	; 0x5428 <__fp_pscB+0xe>
    542e:	e8 94       	clt
    5430:	e0 e0       	ldi	r30, 0x00	; 0
    5432:	bb 27       	eor	r27, r27
    5434:	9f 57       	subi	r25, 0x7F	; 127
    5436:	f0 f0       	brcs	.+60     	; 0x5474 <__fp_rempio2+0x4a>
    5438:	2a ed       	ldi	r18, 0xDA	; 218
    543a:	3f e0       	ldi	r19, 0x0F	; 15
    543c:	49 ec       	ldi	r20, 0xC9	; 201
    543e:	06 c0       	rjmp	.+12     	; 0x544c <__fp_rempio2+0x22>
    5440:	ee 0f       	add	r30, r30
    5442:	bb 0f       	add	r27, r27
    5444:	66 1f       	adc	r22, r22
    5446:	77 1f       	adc	r23, r23
    5448:	88 1f       	adc	r24, r24
    544a:	28 f0       	brcs	.+10     	; 0x5456 <__fp_rempio2+0x2c>
    544c:	b2 3a       	cpi	r27, 0xA2	; 162
    544e:	62 07       	cpc	r22, r18
    5450:	73 07       	cpc	r23, r19
    5452:	84 07       	cpc	r24, r20
    5454:	28 f0       	brcs	.+10     	; 0x5460 <__fp_rempio2+0x36>
    5456:	b2 5a       	subi	r27, 0xA2	; 162
    5458:	62 0b       	sbc	r22, r18
    545a:	73 0b       	sbc	r23, r19
    545c:	84 0b       	sbc	r24, r20
    545e:	e3 95       	inc	r30
    5460:	9a 95       	dec	r25
    5462:	72 f7       	brpl	.-36     	; 0x5440 <__fp_rempio2+0x16>
    5464:	80 38       	cpi	r24, 0x80	; 128
    5466:	30 f4       	brcc	.+12     	; 0x5474 <__fp_rempio2+0x4a>
    5468:	9a 95       	dec	r25
    546a:	bb 0f       	add	r27, r27
    546c:	66 1f       	adc	r22, r22
    546e:	77 1f       	adc	r23, r23
    5470:	88 1f       	adc	r24, r24
    5472:	d2 f7       	brpl	.-12     	; 0x5468 <__fp_rempio2+0x3e>
    5474:	90 48       	sbci	r25, 0x80	; 128
    5476:	f0 c0       	rjmp	.+480    	; 0x5658 <__fp_mpack_finite>

00005478 <__fp_round>:
    5478:	09 2e       	mov	r0, r25
    547a:	03 94       	inc	r0
    547c:	00 0c       	add	r0, r0
    547e:	11 f4       	brne	.+4      	; 0x5484 <__fp_round+0xc>
    5480:	88 23       	and	r24, r24
    5482:	52 f0       	brmi	.+20     	; 0x5498 <__fp_round+0x20>
    5484:	bb 0f       	add	r27, r27
    5486:	40 f4       	brcc	.+16     	; 0x5498 <__fp_round+0x20>
    5488:	bf 2b       	or	r27, r31
    548a:	11 f4       	brne	.+4      	; 0x5490 <__fp_round+0x18>
    548c:	60 ff       	sbrs	r22, 0
    548e:	04 c0       	rjmp	.+8      	; 0x5498 <__fp_round+0x20>
    5490:	6f 5f       	subi	r22, 0xFF	; 255
    5492:	7f 4f       	sbci	r23, 0xFF	; 255
    5494:	8f 4f       	sbci	r24, 0xFF	; 255
    5496:	9f 4f       	sbci	r25, 0xFF	; 255
    5498:	08 95       	ret

0000549a <__fp_sinus>:
    549a:	ef 93       	push	r30
    549c:	e0 ff       	sbrs	r30, 0
    549e:	06 c0       	rjmp	.+12     	; 0x54ac <__fp_sinus+0x12>
    54a0:	a2 ea       	ldi	r26, 0xA2	; 162
    54a2:	2a ed       	ldi	r18, 0xDA	; 218
    54a4:	3f e0       	ldi	r19, 0x0F	; 15
    54a6:	49 ec       	ldi	r20, 0xC9	; 201
    54a8:	5f eb       	ldi	r21, 0xBF	; 191
    54aa:	11 df       	rcall	.-478    	; 0x52ce <__addsf3x>
    54ac:	e5 df       	rcall	.-54     	; 0x5478 <__fp_round>
    54ae:	0f 90       	pop	r0
    54b0:	03 94       	inc	r0
    54b2:	01 fc       	sbrc	r0, 1
    54b4:	90 58       	subi	r25, 0x80	; 128
    54b6:	e2 e2       	ldi	r30, 0x22	; 34
    54b8:	f2 e0       	ldi	r31, 0x02	; 2
    54ba:	e1 c0       	rjmp	.+450    	; 0x567e <__fp_powsodd>

000054bc <__fp_split3>:
    54bc:	57 fd       	sbrc	r21, 7
    54be:	90 58       	subi	r25, 0x80	; 128
    54c0:	44 0f       	add	r20, r20
    54c2:	55 1f       	adc	r21, r21
    54c4:	59 f0       	breq	.+22     	; 0x54dc <__fp_splitA+0x10>
    54c6:	5f 3f       	cpi	r21, 0xFF	; 255
    54c8:	71 f0       	breq	.+28     	; 0x54e6 <__fp_splitA+0x1a>
    54ca:	47 95       	ror	r20

000054cc <__fp_splitA>:
    54cc:	88 0f       	add	r24, r24
    54ce:	97 fb       	bst	r25, 7
    54d0:	99 1f       	adc	r25, r25
    54d2:	61 f0       	breq	.+24     	; 0x54ec <__fp_splitA+0x20>
    54d4:	9f 3f       	cpi	r25, 0xFF	; 255
    54d6:	79 f0       	breq	.+30     	; 0x54f6 <__fp_splitA+0x2a>
    54d8:	87 95       	ror	r24
    54da:	08 95       	ret
    54dc:	12 16       	cp	r1, r18
    54de:	13 06       	cpc	r1, r19
    54e0:	14 06       	cpc	r1, r20
    54e2:	55 1f       	adc	r21, r21
    54e4:	f2 cf       	rjmp	.-28     	; 0x54ca <__fp_split3+0xe>
    54e6:	46 95       	lsr	r20
    54e8:	f1 df       	rcall	.-30     	; 0x54cc <__fp_splitA>
    54ea:	08 c0       	rjmp	.+16     	; 0x54fc <__fp_splitA+0x30>
    54ec:	16 16       	cp	r1, r22
    54ee:	17 06       	cpc	r1, r23
    54f0:	18 06       	cpc	r1, r24
    54f2:	99 1f       	adc	r25, r25
    54f4:	f1 cf       	rjmp	.-30     	; 0x54d8 <__fp_splitA+0xc>
    54f6:	86 95       	lsr	r24
    54f8:	71 05       	cpc	r23, r1
    54fa:	61 05       	cpc	r22, r1
    54fc:	08 94       	sec
    54fe:	08 95       	ret

00005500 <__fp_zero>:
    5500:	e8 94       	clt

00005502 <__fp_szero>:
    5502:	bb 27       	eor	r27, r27
    5504:	66 27       	eor	r22, r22
    5506:	77 27       	eor	r23, r23
    5508:	cb 01       	movw	r24, r22
    550a:	97 f9       	bld	r25, 7
    550c:	08 95       	ret
    550e:	7e df       	rcall	.-260    	; 0x540c <__fp_pscA>
    5510:	28 f0       	brcs	.+10     	; 0x551c <__fp_szero+0x1a>
    5512:	83 df       	rcall	.-250    	; 0x541a <__fp_pscB>
    5514:	18 f0       	brcs	.+6      	; 0x551c <__fp_szero+0x1a>
    5516:	95 23       	and	r25, r21
    5518:	09 f0       	breq	.+2      	; 0x551c <__fp_szero+0x1a>
    551a:	4a cf       	rjmp	.-364    	; 0x53b0 <__fp_inf>
    551c:	4f cf       	rjmp	.-354    	; 0x53bc <__fp_nan>
    551e:	11 24       	eor	r1, r1
    5520:	f0 cf       	rjmp	.-32     	; 0x5502 <__fp_szero>

00005522 <__mulsf3x>:
    5522:	cc df       	rcall	.-104    	; 0x54bc <__fp_split3>
    5524:	a0 f3       	brcs	.-24     	; 0x550e <__fp_szero+0xc>

00005526 <__mulsf3_pse>:
    5526:	95 9f       	mul	r25, r21
    5528:	d1 f3       	breq	.-12     	; 0x551e <__fp_szero+0x1c>
    552a:	95 0f       	add	r25, r21
    552c:	50 e0       	ldi	r21, 0x00	; 0
    552e:	55 1f       	adc	r21, r21
    5530:	62 9f       	mul	r22, r18
    5532:	f0 01       	movw	r30, r0
    5534:	72 9f       	mul	r23, r18
    5536:	bb 27       	eor	r27, r27
    5538:	f0 0d       	add	r31, r0
    553a:	b1 1d       	adc	r27, r1
    553c:	63 9f       	mul	r22, r19
    553e:	aa 27       	eor	r26, r26
    5540:	f0 0d       	add	r31, r0
    5542:	b1 1d       	adc	r27, r1
    5544:	aa 1f       	adc	r26, r26
    5546:	64 9f       	mul	r22, r20
    5548:	66 27       	eor	r22, r22
    554a:	b0 0d       	add	r27, r0
    554c:	a1 1d       	adc	r26, r1
    554e:	66 1f       	adc	r22, r22
    5550:	82 9f       	mul	r24, r18
    5552:	22 27       	eor	r18, r18
    5554:	b0 0d       	add	r27, r0
    5556:	a1 1d       	adc	r26, r1
    5558:	62 1f       	adc	r22, r18
    555a:	73 9f       	mul	r23, r19
    555c:	b0 0d       	add	r27, r0
    555e:	a1 1d       	adc	r26, r1
    5560:	62 1f       	adc	r22, r18
    5562:	83 9f       	mul	r24, r19
    5564:	a0 0d       	add	r26, r0
    5566:	61 1d       	adc	r22, r1
    5568:	22 1f       	adc	r18, r18
    556a:	74 9f       	mul	r23, r20
    556c:	33 27       	eor	r19, r19
    556e:	a0 0d       	add	r26, r0
    5570:	61 1d       	adc	r22, r1
    5572:	23 1f       	adc	r18, r19
    5574:	84 9f       	mul	r24, r20
    5576:	60 0d       	add	r22, r0
    5578:	21 1d       	adc	r18, r1
    557a:	82 2f       	mov	r24, r18
    557c:	76 2f       	mov	r23, r22
    557e:	6a 2f       	mov	r22, r26
    5580:	11 24       	eor	r1, r1
    5582:	9f 57       	subi	r25, 0x7F	; 127
    5584:	50 40       	sbci	r21, 0x00	; 0
    5586:	8a f0       	brmi	.+34     	; 0x55aa <__mulsf3_pse+0x84>
    5588:	e1 f0       	breq	.+56     	; 0x55c2 <__mulsf3_pse+0x9c>
    558a:	88 23       	and	r24, r24
    558c:	4a f0       	brmi	.+18     	; 0x55a0 <__mulsf3_pse+0x7a>
    558e:	ee 0f       	add	r30, r30
    5590:	ff 1f       	adc	r31, r31
    5592:	bb 1f       	adc	r27, r27
    5594:	66 1f       	adc	r22, r22
    5596:	77 1f       	adc	r23, r23
    5598:	88 1f       	adc	r24, r24
    559a:	91 50       	subi	r25, 0x01	; 1
    559c:	50 40       	sbci	r21, 0x00	; 0
    559e:	a9 f7       	brne	.-22     	; 0x558a <__mulsf3_pse+0x64>
    55a0:	9e 3f       	cpi	r25, 0xFE	; 254
    55a2:	51 05       	cpc	r21, r1
    55a4:	70 f0       	brcs	.+28     	; 0x55c2 <__mulsf3_pse+0x9c>
    55a6:	04 cf       	rjmp	.-504    	; 0x53b0 <__fp_inf>
    55a8:	ac cf       	rjmp	.-168    	; 0x5502 <__fp_szero>
    55aa:	5f 3f       	cpi	r21, 0xFF	; 255
    55ac:	ec f3       	brlt	.-6      	; 0x55a8 <__mulsf3_pse+0x82>
    55ae:	98 3e       	cpi	r25, 0xE8	; 232
    55b0:	dc f3       	brlt	.-10     	; 0x55a8 <__mulsf3_pse+0x82>
    55b2:	86 95       	lsr	r24
    55b4:	77 95       	ror	r23
    55b6:	67 95       	ror	r22
    55b8:	b7 95       	ror	r27
    55ba:	f7 95       	ror	r31
    55bc:	e7 95       	ror	r30
    55be:	9f 5f       	subi	r25, 0xFF	; 255
    55c0:	c1 f7       	brne	.-16     	; 0x55b2 <__mulsf3_pse+0x8c>
    55c2:	fe 2b       	or	r31, r30
    55c4:	88 0f       	add	r24, r24
    55c6:	91 1d       	adc	r25, r1
    55c8:	96 95       	lsr	r25
    55ca:	87 95       	ror	r24
    55cc:	97 f9       	bld	r25, 7
    55ce:	08 95       	ret
    55d0:	11 f4       	brne	.+4      	; 0x55d6 <__mulsf3_pse+0xb0>
    55d2:	0e f4       	brtc	.+2      	; 0x55d6 <__mulsf3_pse+0xb0>
    55d4:	f3 ce       	rjmp	.-538    	; 0x53bc <__fp_nan>
    55d6:	3e c0       	rjmp	.+124    	; 0x5654 <__fp_mpack>

000055d8 <sqrt>:
    55d8:	79 df       	rcall	.-270    	; 0x54cc <__fp_splitA>
    55da:	d0 f3       	brcs	.-12     	; 0x55d0 <__mulsf3_pse+0xaa>
    55dc:	99 23       	and	r25, r25
    55de:	d9 f3       	breq	.-10     	; 0x55d6 <__mulsf3_pse+0xb0>
    55e0:	ce f3       	brts	.-14     	; 0x55d4 <__mulsf3_pse+0xae>
    55e2:	9f 57       	subi	r25, 0x7F	; 127
    55e4:	55 0b       	sbc	r21, r21
    55e6:	87 ff       	sbrs	r24, 7
    55e8:	43 d0       	rcall	.+134    	; 0x5670 <__fp_norm2>
    55ea:	00 24       	eor	r0, r0
    55ec:	a0 e6       	ldi	r26, 0x60	; 96
    55ee:	40 ea       	ldi	r20, 0xA0	; 160
    55f0:	90 01       	movw	r18, r0
    55f2:	80 58       	subi	r24, 0x80	; 128
    55f4:	56 95       	lsr	r21
    55f6:	97 95       	ror	r25
    55f8:	28 f4       	brcc	.+10     	; 0x5604 <sqrt+0x2c>
    55fa:	80 5c       	subi	r24, 0xC0	; 192
    55fc:	66 0f       	add	r22, r22
    55fe:	77 1f       	adc	r23, r23
    5600:	88 1f       	adc	r24, r24
    5602:	20 f0       	brcs	.+8      	; 0x560c <sqrt+0x34>
    5604:	26 17       	cp	r18, r22
    5606:	37 07       	cpc	r19, r23
    5608:	48 07       	cpc	r20, r24
    560a:	30 f4       	brcc	.+12     	; 0x5618 <sqrt+0x40>
    560c:	62 1b       	sub	r22, r18
    560e:	73 0b       	sbc	r23, r19
    5610:	84 0b       	sbc	r24, r20
    5612:	20 29       	or	r18, r0
    5614:	31 29       	or	r19, r1
    5616:	4a 2b       	or	r20, r26
    5618:	a6 95       	lsr	r26
    561a:	17 94       	ror	r1
    561c:	07 94       	ror	r0
    561e:	20 25       	eor	r18, r0
    5620:	31 25       	eor	r19, r1
    5622:	4a 27       	eor	r20, r26
    5624:	58 f7       	brcc	.-42     	; 0x55fc <sqrt+0x24>
    5626:	66 0f       	add	r22, r22
    5628:	77 1f       	adc	r23, r23
    562a:	88 1f       	adc	r24, r24
    562c:	20 f0       	brcs	.+8      	; 0x5636 <sqrt+0x5e>
    562e:	26 17       	cp	r18, r22
    5630:	37 07       	cpc	r19, r23
    5632:	48 07       	cpc	r20, r24
    5634:	30 f4       	brcc	.+12     	; 0x5642 <sqrt+0x6a>
    5636:	62 0b       	sbc	r22, r18
    5638:	73 0b       	sbc	r23, r19
    563a:	84 0b       	sbc	r24, r20
    563c:	20 0d       	add	r18, r0
    563e:	31 1d       	adc	r19, r1
    5640:	41 1d       	adc	r20, r1
    5642:	a0 95       	com	r26
    5644:	81 f7       	brne	.-32     	; 0x5626 <sqrt+0x4e>
    5646:	b9 01       	movw	r22, r18
    5648:	84 2f       	mov	r24, r20
    564a:	91 58       	subi	r25, 0x81	; 129
    564c:	88 0f       	add	r24, r24
    564e:	96 95       	lsr	r25
    5650:	87 95       	ror	r24
    5652:	08 95       	ret

00005654 <__fp_mpack>:
    5654:	9f 3f       	cpi	r25, 0xFF	; 255
    5656:	31 f0       	breq	.+12     	; 0x5664 <__fp_mpack_finite+0xc>

00005658 <__fp_mpack_finite>:
    5658:	91 50       	subi	r25, 0x01	; 1
    565a:	20 f4       	brcc	.+8      	; 0x5664 <__fp_mpack_finite+0xc>
    565c:	87 95       	ror	r24
    565e:	77 95       	ror	r23
    5660:	67 95       	ror	r22
    5662:	b7 95       	ror	r27
    5664:	88 0f       	add	r24, r24
    5666:	91 1d       	adc	r25, r1
    5668:	96 95       	lsr	r25
    566a:	87 95       	ror	r24
    566c:	97 f9       	bld	r25, 7
    566e:	08 95       	ret

00005670 <__fp_norm2>:
    5670:	91 50       	subi	r25, 0x01	; 1
    5672:	50 40       	sbci	r21, 0x00	; 0
    5674:	66 0f       	add	r22, r22
    5676:	77 1f       	adc	r23, r23
    5678:	88 1f       	adc	r24, r24
    567a:	d2 f7       	brpl	.-12     	; 0x5670 <__fp_norm2>
    567c:	08 95       	ret

0000567e <__fp_powsodd>:
    567e:	9f 93       	push	r25
    5680:	8f 93       	push	r24
    5682:	7f 93       	push	r23
    5684:	6f 93       	push	r22
    5686:	ff 93       	push	r31
    5688:	ef 93       	push	r30
    568a:	9b 01       	movw	r18, r22
    568c:	ac 01       	movw	r20, r24
    568e:	2b d8       	rcall	.-4010   	; 0x46e6 <__mulsf3>
    5690:	ef 91       	pop	r30
    5692:	ff 91       	pop	r31
    5694:	96 de       	rcall	.-724    	; 0x53c2 <__fp_powser>
    5696:	2f 91       	pop	r18
    5698:	3f 91       	pop	r19
    569a:	4f 91       	pop	r20
    569c:	5f 91       	pop	r21
    569e:	23 c8       	rjmp	.-4026   	; 0x46e6 <__mulsf3>

000056a0 <calloc>:
    56a0:	ef 92       	push	r14
    56a2:	ff 92       	push	r15
    56a4:	0f 93       	push	r16
    56a6:	1f 93       	push	r17
    56a8:	cf 93       	push	r28
    56aa:	df 93       	push	r29
    56ac:	68 9f       	mul	r22, r24
    56ae:	80 01       	movw	r16, r0
    56b0:	69 9f       	mul	r22, r25
    56b2:	10 0d       	add	r17, r0
    56b4:	78 9f       	mul	r23, r24
    56b6:	10 0d       	add	r17, r0
    56b8:	11 24       	eor	r1, r1
    56ba:	c8 01       	movw	r24, r16
    56bc:	0e 94 75 2b 	call	0x56ea	; 0x56ea <malloc>
    56c0:	e8 2e       	mov	r14, r24
    56c2:	e7 01       	movw	r28, r14
    56c4:	7e 01       	movw	r14, r28
    56c6:	f9 2e       	mov	r15, r25
    56c8:	e7 01       	movw	r28, r14
    56ca:	e1 14       	cp	r14, r1
    56cc:	f1 04       	cpc	r15, r1
    56ce:	31 f0       	breq	.+12     	; 0x56dc <calloc+0x3c>
    56d0:	8e 2d       	mov	r24, r14
    56d2:	60 e0       	ldi	r22, 0x00	; 0
    56d4:	70 e0       	ldi	r23, 0x00	; 0
    56d6:	a8 01       	movw	r20, r16
    56d8:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <memset>
    56dc:	7e 01       	movw	r14, r28
    56de:	ce 01       	movw	r24, r28
    56e0:	cd b7       	in	r28, 0x3d	; 61
    56e2:	de b7       	in	r29, 0x3e	; 62
    56e4:	e6 e0       	ldi	r30, 0x06	; 6
    56e6:	0c 94 37 29 	jmp	0x526e	; 0x526e <__epilogue_restores__+0x18>

000056ea <malloc>:
    56ea:	ef 92       	push	r14
    56ec:	ff 92       	push	r15
    56ee:	0f 93       	push	r16
    56f0:	1f 93       	push	r17
    56f2:	cf 93       	push	r28
    56f4:	df 93       	push	r29
    56f6:	82 30       	cpi	r24, 0x02	; 2
    56f8:	91 05       	cpc	r25, r1
    56fa:	10 f4       	brcc	.+4      	; 0x5700 <malloc+0x16>
    56fc:	82 e0       	ldi	r24, 0x02	; 2
    56fe:	90 e0       	ldi	r25, 0x00	; 0
    5700:	c0 91 4e 07 	lds	r28, 0x074E
    5704:	d0 91 4f 07 	lds	r29, 0x074F
    5708:	20 e0       	ldi	r18, 0x00	; 0
    570a:	30 e0       	ldi	r19, 0x00	; 0
    570c:	40 e0       	ldi	r20, 0x00	; 0
    570e:	50 e0       	ldi	r21, 0x00	; 0
    5710:	29 c0       	rjmp	.+82     	; 0x5764 <malloc+0x7a>
    5712:	68 81       	ld	r22, Y
    5714:	79 81       	ldd	r23, Y+1	; 0x01
    5716:	68 17       	cp	r22, r24
    5718:	79 07       	cpc	r23, r25
    571a:	d8 f0       	brcs	.+54     	; 0x5752 <malloc+0x68>
    571c:	68 17       	cp	r22, r24
    571e:	79 07       	cpc	r23, r25
    5720:	79 f4       	brne	.+30     	; 0x5740 <malloc+0x56>
    5722:	8a 81       	ldd	r24, Y+2	; 0x02
    5724:	9b 81       	ldd	r25, Y+3	; 0x03
    5726:	21 15       	cp	r18, r1
    5728:	31 05       	cpc	r19, r1
    572a:	21 f0       	breq	.+8      	; 0x5734 <malloc+0x4a>
    572c:	f9 01       	movw	r30, r18
    572e:	93 83       	std	Z+3, r25	; 0x03
    5730:	82 83       	std	Z+2, r24	; 0x02
    5732:	04 c0       	rjmp	.+8      	; 0x573c <malloc+0x52>
    5734:	90 93 4f 07 	sts	0x074F, r25
    5738:	80 93 4e 07 	sts	0x074E, r24
    573c:	de 01       	movw	r26, r28
    573e:	2a c0       	rjmp	.+84     	; 0x5794 <malloc+0xaa>
    5740:	41 15       	cp	r20, r1
    5742:	51 05       	cpc	r21, r1
    5744:	19 f0       	breq	.+6      	; 0x574c <malloc+0x62>
    5746:	64 17       	cp	r22, r20
    5748:	75 07       	cpc	r23, r21
    574a:	18 f4       	brcc	.+6      	; 0x5752 <malloc+0x68>
    574c:	fe 01       	movw	r30, r28
    574e:	ab 01       	movw	r20, r22
    5750:	d9 01       	movw	r26, r18
    5752:	9e 01       	movw	r18, r28
    5754:	7a 81       	ldd	r23, Y+2	; 0x02
    5756:	6b 81       	ldd	r22, Y+3	; 0x03
    5758:	e7 2e       	mov	r14, r23
    575a:	e7 01       	movw	r28, r14
    575c:	7e 01       	movw	r14, r28
    575e:	06 2f       	mov	r16, r22
    5760:	f6 2e       	mov	r15, r22
    5762:	e7 01       	movw	r28, r14
    5764:	20 97       	sbiw	r28, 0x00	; 0
    5766:	a9 f6       	brne	.-86     	; 0x5712 <malloc+0x28>
    5768:	41 15       	cp	r20, r1
    576a:	51 05       	cpc	r21, r1
    576c:	f9 f0       	breq	.+62     	; 0x57ac <malloc+0xc2>
    576e:	48 1b       	sub	r20, r24
    5770:	59 0b       	sbc	r21, r25
    5772:	44 30       	cpi	r20, 0x04	; 4
    5774:	51 05       	cpc	r21, r1
    5776:	80 f4       	brcc	.+32     	; 0x5798 <malloc+0xae>
    5778:	82 81       	ldd	r24, Z+2	; 0x02
    577a:	93 81       	ldd	r25, Z+3	; 0x03
    577c:	10 97       	sbiw	r26, 0x00	; 0
    577e:	29 f0       	breq	.+10     	; 0x578a <malloc+0xa0>
    5780:	13 96       	adiw	r26, 0x03	; 3
    5782:	9c 93       	st	X, r25
    5784:	8e 93       	st	-X, r24
    5786:	12 97       	sbiw	r26, 0x02	; 2
    5788:	04 c0       	rjmp	.+8      	; 0x5792 <malloc+0xa8>
    578a:	90 93 4f 07 	sts	0x074F, r25
    578e:	80 93 4e 07 	sts	0x074E, r24
    5792:	df 01       	movw	r26, r30
    5794:	12 96       	adiw	r26, 0x02	; 2
    5796:	45 c0       	rjmp	.+138    	; 0x5822 <malloc+0x138>
    5798:	df 01       	movw	r26, r30
    579a:	a4 0f       	add	r26, r20
    579c:	b5 1f       	adc	r27, r21
    579e:	8d 93       	st	X+, r24
    57a0:	9d 93       	st	X+, r25
    57a2:	42 50       	subi	r20, 0x02	; 2
    57a4:	50 40       	sbci	r21, 0x00	; 0
    57a6:	51 83       	std	Z+1, r21	; 0x01
    57a8:	40 83       	st	Z, r20
    57aa:	3b c0       	rjmp	.+118    	; 0x5822 <malloc+0x138>
    57ac:	20 91 4c 07 	lds	r18, 0x074C
    57b0:	30 91 4d 07 	lds	r19, 0x074D
    57b4:	21 15       	cp	r18, r1
    57b6:	31 05       	cpc	r19, r1
    57b8:	41 f4       	brne	.+16     	; 0x57ca <malloc+0xe0>
    57ba:	20 91 a0 02 	lds	r18, 0x02A0
    57be:	30 91 a1 02 	lds	r19, 0x02A1
    57c2:	30 93 4d 07 	sts	0x074D, r19
    57c6:	20 93 4c 07 	sts	0x074C, r18
    57ca:	20 91 a2 02 	lds	r18, 0x02A2
    57ce:	30 91 a3 02 	lds	r19, 0x02A3
    57d2:	21 15       	cp	r18, r1
    57d4:	31 05       	cpc	r19, r1
    57d6:	41 f4       	brne	.+16     	; 0x57e8 <malloc+0xfe>
    57d8:	2d b7       	in	r18, 0x3d	; 61
    57da:	3e b7       	in	r19, 0x3e	; 62
    57dc:	40 91 9e 02 	lds	r20, 0x029E
    57e0:	50 91 9f 02 	lds	r21, 0x029F
    57e4:	24 1b       	sub	r18, r20
    57e6:	35 0b       	sbc	r19, r21
    57e8:	a0 91 4c 07 	lds	r26, 0x074C
    57ec:	b0 91 4d 07 	lds	r27, 0x074D
    57f0:	a2 17       	cp	r26, r18
    57f2:	b3 07       	cpc	r27, r19
    57f4:	a0 f4       	brcc	.+40     	; 0x581e <malloc+0x134>
    57f6:	2a 1b       	sub	r18, r26
    57f8:	3b 0b       	sbc	r19, r27
    57fa:	28 17       	cp	r18, r24
    57fc:	39 07       	cpc	r19, r25
    57fe:	78 f0       	brcs	.+30     	; 0x581e <malloc+0x134>
    5800:	ac 01       	movw	r20, r24
    5802:	4e 5f       	subi	r20, 0xFE	; 254
    5804:	5f 4f       	sbci	r21, 0xFF	; 255
    5806:	24 17       	cp	r18, r20
    5808:	35 07       	cpc	r19, r21
    580a:	48 f0       	brcs	.+18     	; 0x581e <malloc+0x134>
    580c:	4a 0f       	add	r20, r26
    580e:	5b 1f       	adc	r21, r27
    5810:	50 93 4d 07 	sts	0x074D, r21
    5814:	40 93 4c 07 	sts	0x074C, r20
    5818:	8d 93       	st	X+, r24
    581a:	9d 93       	st	X+, r25
    581c:	02 c0       	rjmp	.+4      	; 0x5822 <malloc+0x138>
    581e:	a0 e0       	ldi	r26, 0x00	; 0
    5820:	b0 e0       	ldi	r27, 0x00	; 0
    5822:	cd 01       	movw	r24, r26
    5824:	cd b7       	in	r28, 0x3d	; 61
    5826:	de b7       	in	r29, 0x3e	; 62
    5828:	e6 e0       	ldi	r30, 0x06	; 6
    582a:	0c 94 37 29 	jmp	0x526e	; 0x526e <__epilogue_restores__+0x18>

0000582e <free>:
    582e:	cf 93       	push	r28
    5830:	df 93       	push	r29
    5832:	00 97       	sbiw	r24, 0x00	; 0
    5834:	09 f4       	brne	.+2      	; 0x5838 <free+0xa>
    5836:	8f c0       	rjmp	.+286    	; 0x5956 <free+0x128>
    5838:	fc 01       	movw	r30, r24
    583a:	32 97       	sbiw	r30, 0x02	; 2
    583c:	13 82       	std	Z+3, r1	; 0x03
    583e:	12 82       	std	Z+2, r1	; 0x02
    5840:	60 91 4e 07 	lds	r22, 0x074E
    5844:	70 91 4f 07 	lds	r23, 0x074F
    5848:	61 15       	cp	r22, r1
    584a:	71 05       	cpc	r23, r1
    584c:	81 f4       	brne	.+32     	; 0x586e <free+0x40>
    584e:	20 81       	ld	r18, Z
    5850:	31 81       	ldd	r19, Z+1	; 0x01
    5852:	28 0f       	add	r18, r24
    5854:	39 1f       	adc	r19, r25
    5856:	80 91 4c 07 	lds	r24, 0x074C
    585a:	90 91 4d 07 	lds	r25, 0x074D
    585e:	82 17       	cp	r24, r18
    5860:	93 07       	cpc	r25, r19
    5862:	61 f5       	brne	.+88     	; 0x58bc <free+0x8e>
    5864:	f0 93 4d 07 	sts	0x074D, r31
    5868:	e0 93 4c 07 	sts	0x074C, r30
    586c:	74 c0       	rjmp	.+232    	; 0x5956 <free+0x128>
    586e:	eb 01       	movw	r28, r22
    5870:	80 e0       	ldi	r24, 0x00	; 0
    5872:	90 e0       	ldi	r25, 0x00	; 0
    5874:	ce 17       	cp	r28, r30
    5876:	df 07       	cpc	r29, r31
    5878:	40 f4       	brcc	.+16     	; 0x588a <free+0x5c>
    587a:	2a 81       	ldd	r18, Y+2	; 0x02
    587c:	3b 81       	ldd	r19, Y+3	; 0x03
    587e:	ce 01       	movw	r24, r28
    5880:	21 15       	cp	r18, r1
    5882:	31 05       	cpc	r19, r1
    5884:	01 f1       	breq	.+64     	; 0x58c6 <free+0x98>
    5886:	e9 01       	movw	r28, r18
    5888:	f5 cf       	rjmp	.-22     	; 0x5874 <free+0x46>
    588a:	d3 83       	std	Z+3, r29	; 0x03
    588c:	c2 83       	std	Z+2, r28	; 0x02
    588e:	df 01       	movw	r26, r30
    5890:	4d 91       	ld	r20, X+
    5892:	5d 91       	ld	r21, X+
    5894:	9d 01       	movw	r18, r26
    5896:	24 0f       	add	r18, r20
    5898:	35 1f       	adc	r19, r21
    589a:	c2 17       	cp	r28, r18
    589c:	d3 07       	cpc	r29, r19
    589e:	61 f4       	brne	.+24     	; 0x58b8 <free+0x8a>
    58a0:	28 81       	ld	r18, Y
    58a2:	39 81       	ldd	r19, Y+1	; 0x01
    58a4:	24 0f       	add	r18, r20
    58a6:	35 1f       	adc	r19, r21
    58a8:	2e 5f       	subi	r18, 0xFE	; 254
    58aa:	3f 4f       	sbci	r19, 0xFF	; 255
    58ac:	31 83       	std	Z+1, r19	; 0x01
    58ae:	20 83       	st	Z, r18
    58b0:	2a 81       	ldd	r18, Y+2	; 0x02
    58b2:	3b 81       	ldd	r19, Y+3	; 0x03
    58b4:	33 83       	std	Z+3, r19	; 0x03
    58b6:	22 83       	std	Z+2, r18	; 0x02
    58b8:	00 97       	sbiw	r24, 0x00	; 0
    58ba:	29 f4       	brne	.+10     	; 0x58c6 <free+0x98>
    58bc:	f0 93 4f 07 	sts	0x074F, r31
    58c0:	e0 93 4e 07 	sts	0x074E, r30
    58c4:	48 c0       	rjmp	.+144    	; 0x5956 <free+0x128>
    58c6:	dc 01       	movw	r26, r24
    58c8:	13 96       	adiw	r26, 0x03	; 3
    58ca:	fc 93       	st	X, r31
    58cc:	ee 93       	st	-X, r30
    58ce:	12 97       	sbiw	r26, 0x02	; 2
    58d0:	ec 01       	movw	r28, r24
    58d2:	49 91       	ld	r20, Y+
    58d4:	59 91       	ld	r21, Y+
    58d6:	c4 0f       	add	r28, r20
    58d8:	d5 1f       	adc	r29, r21
    58da:	ec 17       	cp	r30, r28
    58dc:	fd 07       	cpc	r31, r29
    58de:	79 f4       	brne	.+30     	; 0x58fe <free+0xd0>
    58e0:	20 81       	ld	r18, Z
    58e2:	31 81       	ldd	r19, Z+1	; 0x01
    58e4:	24 0f       	add	r18, r20
    58e6:	35 1f       	adc	r19, r21
    58e8:	2e 5f       	subi	r18, 0xFE	; 254
    58ea:	3f 4f       	sbci	r19, 0xFF	; 255
    58ec:	11 96       	adiw	r26, 0x01	; 1
    58ee:	3c 93       	st	X, r19
    58f0:	2e 93       	st	-X, r18
    58f2:	22 81       	ldd	r18, Z+2	; 0x02
    58f4:	33 81       	ldd	r19, Z+3	; 0x03
    58f6:	13 96       	adiw	r26, 0x03	; 3
    58f8:	3c 93       	st	X, r19
    58fa:	2e 93       	st	-X, r18
    58fc:	12 97       	sbiw	r26, 0x02	; 2
    58fe:	e0 e0       	ldi	r30, 0x00	; 0
    5900:	f0 e0       	ldi	r31, 0x00	; 0
    5902:	db 01       	movw	r26, r22
    5904:	12 96       	adiw	r26, 0x02	; 2
    5906:	8d 91       	ld	r24, X+
    5908:	9c 91       	ld	r25, X
    590a:	13 97       	sbiw	r26, 0x03	; 3
    590c:	00 97       	sbiw	r24, 0x00	; 0
    590e:	21 f0       	breq	.+8      	; 0x5918 <free+0xea>
    5910:	e6 2f       	mov	r30, r22
    5912:	f7 2f       	mov	r31, r23
    5914:	bc 01       	movw	r22, r24
    5916:	f5 cf       	rjmp	.-22     	; 0x5902 <free+0xd4>
    5918:	9b 01       	movw	r18, r22
    591a:	2e 5f       	subi	r18, 0xFE	; 254
    591c:	3f 4f       	sbci	r19, 0xFF	; 255
    591e:	db 01       	movw	r26, r22
    5920:	8d 91       	ld	r24, X+
    5922:	9c 91       	ld	r25, X
    5924:	11 97       	sbiw	r26, 0x01	; 1
    5926:	82 0f       	add	r24, r18
    5928:	93 1f       	adc	r25, r19
    592a:	40 91 4c 07 	lds	r20, 0x074C
    592e:	50 91 4d 07 	lds	r21, 0x074D
    5932:	48 17       	cp	r20, r24
    5934:	59 07       	cpc	r21, r25
    5936:	79 f4       	brne	.+30     	; 0x5956 <free+0x128>
    5938:	30 97       	sbiw	r30, 0x00	; 0
    593a:	29 f4       	brne	.+10     	; 0x5946 <free+0x118>
    593c:	10 92 4f 07 	sts	0x074F, r1
    5940:	10 92 4e 07 	sts	0x074E, r1
    5944:	02 c0       	rjmp	.+4      	; 0x594a <free+0x11c>
    5946:	13 82       	std	Z+3, r1	; 0x03
    5948:	12 82       	std	Z+2, r1	; 0x02
    594a:	22 50       	subi	r18, 0x02	; 2
    594c:	30 40       	sbci	r19, 0x00	; 0
    594e:	30 93 4d 07 	sts	0x074D, r19
    5952:	20 93 4c 07 	sts	0x074C, r18
    5956:	df 91       	pop	r29
    5958:	cf 91       	pop	r28
    595a:	08 95       	ret

0000595c <realloc>:
    595c:	a0 e0       	ldi	r26, 0x00	; 0
    595e:	b0 e0       	ldi	r27, 0x00	; 0
    5960:	e4 eb       	ldi	r30, 0xB4	; 180
    5962:	fc e2       	ldi	r31, 0x2C	; 44
    5964:	0c 94 13 29 	jmp	0x5226	; 0x5226 <__prologue_saves__+0x8>
    5968:	ec 01       	movw	r28, r24
    596a:	cb 01       	movw	r24, r22
    596c:	20 97       	sbiw	r28, 0x00	; 0
    596e:	41 f4       	brne	.+16     	; 0x5980 <realloc+0x24>
    5970:	0e 94 75 2b 	call	0x56ea	; 0x56ea <malloc>
    5974:	e8 2e       	mov	r14, r24
    5976:	e7 01       	movw	r28, r14
    5978:	7e 01       	movw	r14, r28
    597a:	f9 2e       	mov	r15, r25
    597c:	e7 01       	movw	r28, r14
    597e:	b9 c0       	rjmp	.+370    	; 0x5af2 <realloc+0x196>
    5980:	be ef       	ldi	r27, 0xFE	; 254
    5982:	eb 2e       	mov	r14, r27
    5984:	bf ef       	ldi	r27, 0xFF	; 255
    5986:	fb 2e       	mov	r15, r27
    5988:	ec 0e       	add	r14, r28
    598a:	fd 1e       	adc	r15, r29
    598c:	ae 01       	movw	r20, r28
    598e:	46 0f       	add	r20, r22
    5990:	57 1f       	adc	r21, r23
    5992:	4e 15       	cp	r20, r14
    5994:	5f 05       	cpc	r21, r15
    5996:	08 f4       	brcc	.+2      	; 0x599a <realloc+0x3e>
    5998:	aa c0       	rjmp	.+340    	; 0x5aee <realloc+0x192>
    599a:	d7 01       	movw	r26, r14
    599c:	2d 91       	ld	r18, X+
    599e:	3c 91       	ld	r19, X
    59a0:	11 97       	sbiw	r26, 0x01	; 1
    59a2:	26 17       	cp	r18, r22
    59a4:	37 07       	cpc	r19, r23
    59a6:	c0 f0       	brcs	.+48     	; 0x59d8 <realloc+0x7c>
    59a8:	25 30       	cpi	r18, 0x05	; 5
    59aa:	31 05       	cpc	r19, r1
    59ac:	08 f4       	brcc	.+2      	; 0x59b0 <realloc+0x54>
    59ae:	a1 c0       	rjmp	.+322    	; 0x5af2 <realloc+0x196>
    59b0:	b9 01       	movw	r22, r18
    59b2:	64 50       	subi	r22, 0x04	; 4
    59b4:	70 40       	sbci	r23, 0x00	; 0
    59b6:	68 17       	cp	r22, r24
    59b8:	79 07       	cpc	r23, r25
    59ba:	08 f4       	brcc	.+2      	; 0x59be <realloc+0x62>
    59bc:	9a c0       	rjmp	.+308    	; 0x5af2 <realloc+0x196>
    59be:	22 50       	subi	r18, 0x02	; 2
    59c0:	30 40       	sbci	r19, 0x00	; 0
    59c2:	28 1b       	sub	r18, r24
    59c4:	39 0b       	sbc	r19, r25
    59c6:	fa 01       	movw	r30, r20
    59c8:	21 93       	st	Z+, r18
    59ca:	31 93       	st	Z+, r19
    59cc:	8d 93       	st	X+, r24
    59ce:	9c 93       	st	X, r25
    59d0:	cf 01       	movw	r24, r30
    59d2:	0e 94 17 2c 	call	0x582e	; 0x582e <free>
    59d6:	8d c0       	rjmp	.+282    	; 0x5af2 <realloc+0x196>
    59d8:	6b 01       	movw	r12, r22
    59da:	c2 1a       	sub	r12, r18
    59dc:	d3 0a       	sbc	r13, r19
    59de:	5e 01       	movw	r10, r28
    59e0:	a2 0e       	add	r10, r18
    59e2:	b3 1e       	adc	r11, r19
    59e4:	e0 91 4e 07 	lds	r30, 0x074E
    59e8:	f0 91 4f 07 	lds	r31, 0x074F
    59ec:	66 24       	eor	r6, r6
    59ee:	77 24       	eor	r7, r7
    59f0:	00 e0       	ldi	r16, 0x00	; 0
    59f2:	10 e0       	ldi	r17, 0x00	; 0
    59f4:	45 c0       	rjmp	.+138    	; 0x5a80 <realloc+0x124>
    59f6:	ea 15       	cp	r30, r10
    59f8:	fb 05       	cpc	r31, r11
    59fa:	b9 f5       	brne	.+110    	; 0x5a6a <realloc+0x10e>
    59fc:	60 81       	ld	r22, Z
    59fe:	71 81       	ldd	r23, Z+1	; 0x01
    5a00:	a2 e0       	ldi	r26, 0x02	; 2
    5a02:	8a 2e       	mov	r8, r26
    5a04:	91 2c       	mov	r9, r1
    5a06:	86 0e       	add	r8, r22
    5a08:	97 1e       	adc	r9, r23
    5a0a:	8c 14       	cp	r8, r12
    5a0c:	9d 04       	cpc	r9, r13
    5a0e:	68 f1       	brcs	.+90     	; 0x5a6a <realloc+0x10e>
    5a10:	8b 01       	movw	r16, r22
    5a12:	0c 19       	sub	r16, r12
    5a14:	1d 09       	sbc	r17, r13
    5a16:	0e 5f       	subi	r16, 0xFE	; 254
    5a18:	1f 4f       	sbci	r17, 0xFF	; 255
    5a1a:	b2 80       	ldd	r11, Z+2	; 0x02
    5a1c:	a3 80       	ldd	r10, Z+3	; 0x03
    5a1e:	05 30       	cpi	r16, 0x05	; 5
    5a20:	11 05       	cpc	r17, r1
    5a22:	60 f0       	brcs	.+24     	; 0x5a3c <realloc+0xe0>
    5a24:	fa 01       	movw	r30, r20
    5a26:	b2 82       	std	Z+2, r11	; 0x02
    5a28:	a3 82       	std	Z+3, r10	; 0x03
    5a2a:	6c 19       	sub	r22, r12
    5a2c:	7d 09       	sbc	r23, r13
    5a2e:	71 83       	std	Z+1, r23	; 0x01
    5a30:	60 83       	st	Z, r22
    5a32:	d7 01       	movw	r26, r14
    5a34:	11 96       	adiw	r26, 0x01	; 1
    5a36:	9c 93       	st	X, r25
    5a38:	8e 93       	st	-X, r24
    5a3a:	09 c0       	rjmp	.+18     	; 0x5a4e <realloc+0xf2>
    5a3c:	2e 5f       	subi	r18, 0xFE	; 254
    5a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    5a40:	26 0f       	add	r18, r22
    5a42:	37 1f       	adc	r19, r23
    5a44:	f7 01       	movw	r30, r14
    5a46:	31 83       	std	Z+1, r19	; 0x01
    5a48:	20 83       	st	Z, r18
    5a4a:	eb 2d       	mov	r30, r11
    5a4c:	fa 2d       	mov	r31, r10
    5a4e:	61 14       	cp	r6, r1
    5a50:	71 04       	cpc	r7, r1
    5a52:	31 f0       	breq	.+12     	; 0x5a60 <realloc+0x104>
    5a54:	d3 01       	movw	r26, r6
    5a56:	13 96       	adiw	r26, 0x03	; 3
    5a58:	fc 93       	st	X, r31
    5a5a:	ee 93       	st	-X, r30
    5a5c:	12 97       	sbiw	r26, 0x02	; 2
    5a5e:	49 c0       	rjmp	.+146    	; 0x5af2 <realloc+0x196>
    5a60:	f0 93 4f 07 	sts	0x074F, r31
    5a64:	e0 93 4e 07 	sts	0x074E, r30
    5a68:	44 c0       	rjmp	.+136    	; 0x5af2 <realloc+0x196>
    5a6a:	60 81       	ld	r22, Z
    5a6c:	71 81       	ldd	r23, Z+1	; 0x01
    5a6e:	06 17       	cp	r16, r22
    5a70:	17 07       	cpc	r17, r23
    5a72:	08 f4       	brcc	.+2      	; 0x5a76 <realloc+0x11a>
    5a74:	8b 01       	movw	r16, r22
    5a76:	3f 01       	movw	r6, r30
    5a78:	72 81       	ldd	r23, Z+2	; 0x02
    5a7a:	63 81       	ldd	r22, Z+3	; 0x03
    5a7c:	e7 2f       	mov	r30, r23
    5a7e:	f6 2f       	mov	r31, r22
    5a80:	30 97       	sbiw	r30, 0x00	; 0
    5a82:	09 f0       	breq	.+2      	; 0x5a86 <realloc+0x12a>
    5a84:	b8 cf       	rjmp	.-144    	; 0x59f6 <realloc+0x9a>
    5a86:	20 91 4c 07 	lds	r18, 0x074C
    5a8a:	30 91 4d 07 	lds	r19, 0x074D
    5a8e:	2a 15       	cp	r18, r10
    5a90:	3b 05       	cpc	r19, r11
    5a92:	e9 f4       	brne	.+58     	; 0x5ace <realloc+0x172>
    5a94:	08 17       	cp	r16, r24
    5a96:	19 07       	cpc	r17, r25
    5a98:	d0 f4       	brcc	.+52     	; 0x5ace <realloc+0x172>
    5a9a:	20 91 a2 02 	lds	r18, 0x02A2
    5a9e:	30 91 a3 02 	lds	r19, 0x02A3
    5aa2:	21 15       	cp	r18, r1
    5aa4:	31 05       	cpc	r19, r1
    5aa6:	41 f4       	brne	.+16     	; 0x5ab8 <realloc+0x15c>
    5aa8:	2d b7       	in	r18, 0x3d	; 61
    5aaa:	3e b7       	in	r19, 0x3e	; 62
    5aac:	60 91 9e 02 	lds	r22, 0x029E
    5ab0:	70 91 9f 02 	lds	r23, 0x029F
    5ab4:	26 1b       	sub	r18, r22
    5ab6:	37 0b       	sbc	r19, r23
    5ab8:	42 17       	cp	r20, r18
    5aba:	53 07       	cpc	r21, r19
    5abc:	c0 f4       	brcc	.+48     	; 0x5aee <realloc+0x192>
    5abe:	50 93 4d 07 	sts	0x074D, r21
    5ac2:	40 93 4c 07 	sts	0x074C, r20
    5ac6:	f7 01       	movw	r30, r14
    5ac8:	91 83       	std	Z+1, r25	; 0x01
    5aca:	80 83       	st	Z, r24
    5acc:	12 c0       	rjmp	.+36     	; 0x5af2 <realloc+0x196>
    5ace:	0e 94 75 2b 	call	0x56ea	; 0x56ea <malloc>
    5ad2:	8c 01       	movw	r16, r24
    5ad4:	00 97       	sbiw	r24, 0x00	; 0
    5ad6:	59 f0       	breq	.+22     	; 0x5aee <realloc+0x192>
    5ad8:	d7 01       	movw	r26, r14
    5ada:	4d 91       	ld	r20, X+
    5adc:	5c 91       	ld	r21, X
    5ade:	be 01       	movw	r22, r28
    5ae0:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <memcpy>
    5ae4:	ce 01       	movw	r24, r28
    5ae6:	0e 94 17 2c 	call	0x582e	; 0x582e <free>
    5aea:	e8 01       	movw	r28, r16
    5aec:	02 c0       	rjmp	.+4      	; 0x5af2 <realloc+0x196>
    5aee:	c0 e0       	ldi	r28, 0x00	; 0
    5af0:	d0 e0       	ldi	r29, 0x00	; 0
    5af2:	ce 01       	movw	r24, r28
    5af4:	cd b7       	in	r28, 0x3d	; 61
    5af6:	de b7       	in	r29, 0x3e	; 62
    5af8:	ee e0       	ldi	r30, 0x0E	; 14
    5afa:	0c 94 2f 29 	jmp	0x525e	; 0x525e <__epilogue_restores__+0x8>

00005afe <atol>:
    5afe:	1f 93       	push	r17
    5b00:	fc 01       	movw	r30, r24
    5b02:	99 27       	eor	r25, r25
    5b04:	88 27       	eor	r24, r24
    5b06:	bc 01       	movw	r22, r24
    5b08:	e8 94       	clt
    5b0a:	11 91       	ld	r17, Z+
    5b0c:	10 32       	cpi	r17, 0x20	; 32
    5b0e:	e9 f3       	breq	.-6      	; 0x5b0a <atol+0xc>
    5b10:	19 30       	cpi	r17, 0x09	; 9
    5b12:	10 f0       	brcs	.+4      	; 0x5b18 <atol+0x1a>
    5b14:	1e 30       	cpi	r17, 0x0E	; 14
    5b16:	c8 f3       	brcs	.-14     	; 0x5b0a <atol+0xc>
    5b18:	1b 32       	cpi	r17, 0x2B	; 43
    5b1a:	51 f0       	breq	.+20     	; 0x5b30 <atol+0x32>
    5b1c:	1d 32       	cpi	r17, 0x2D	; 45
    5b1e:	49 f4       	brne	.+18     	; 0x5b32 <atol+0x34>
    5b20:	68 94       	set
    5b22:	06 c0       	rjmp	.+12     	; 0x5b30 <atol+0x32>
    5b24:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__mulsi_const_10>
    5b28:	61 0f       	add	r22, r17
    5b2a:	71 1d       	adc	r23, r1
    5b2c:	81 1d       	adc	r24, r1
    5b2e:	91 1d       	adc	r25, r1
    5b30:	11 91       	ld	r17, Z+
    5b32:	10 53       	subi	r17, 0x30	; 48
    5b34:	1a 30       	cpi	r17, 0x0A	; 10
    5b36:	b0 f3       	brcs	.-20     	; 0x5b24 <atol+0x26>
    5b38:	3e f4       	brtc	.+14     	; 0x5b48 <atol+0x4a>
    5b3a:	90 95       	com	r25
    5b3c:	80 95       	com	r24
    5b3e:	70 95       	com	r23
    5b40:	61 95       	neg	r22
    5b42:	7f 4f       	sbci	r23, 0xFF	; 255
    5b44:	8f 4f       	sbci	r24, 0xFF	; 255
    5b46:	9f 4f       	sbci	r25, 0xFF	; 255
    5b48:	1f 91       	pop	r17
    5b4a:	08 95       	ret

00005b4c <isspace>:
    5b4c:	91 11       	cpse	r25, r1
    5b4e:	19 c3       	rjmp	.+1586   	; 0x6182 <__ctype_isfalse>
    5b50:	80 32       	cpi	r24, 0x20	; 32
    5b52:	19 f0       	breq	.+6      	; 0x5b5a <isspace+0xe>
    5b54:	89 50       	subi	r24, 0x09	; 9
    5b56:	85 50       	subi	r24, 0x05	; 5
    5b58:	d0 f7       	brcc	.-12     	; 0x5b4e <isspace+0x2>
    5b5a:	08 95       	ret

00005b5c <tolower>:
    5b5c:	91 11       	cpse	r25, r1
    5b5e:	08 95       	ret
    5b60:	81 54       	subi	r24, 0x41	; 65
    5b62:	8a 51       	subi	r24, 0x1A	; 26
    5b64:	08 f4       	brcc	.+2      	; 0x5b68 <tolower+0xc>
    5b66:	80 5e       	subi	r24, 0xE0	; 224
    5b68:	85 5a       	subi	r24, 0xA5	; 165
    5b6a:	08 95       	ret

00005b6c <toupper>:
    5b6c:	91 11       	cpse	r25, r1
    5b6e:	08 95       	ret
    5b70:	81 56       	subi	r24, 0x61	; 97
    5b72:	8a 51       	subi	r24, 0x1A	; 26
    5b74:	08 f4       	brcc	.+2      	; 0x5b78 <toupper+0xc>
    5b76:	80 52       	subi	r24, 0x20	; 32
    5b78:	85 58       	subi	r24, 0x85	; 133
    5b7a:	08 95       	ret

00005b7c <memcpy>:
    5b7c:	fb 01       	movw	r30, r22
    5b7e:	dc 01       	movw	r26, r24
    5b80:	02 c0       	rjmp	.+4      	; 0x5b86 <memcpy+0xa>
    5b82:	01 90       	ld	r0, Z+
    5b84:	0d 92       	st	X+, r0
    5b86:	41 50       	subi	r20, 0x01	; 1
    5b88:	50 40       	sbci	r21, 0x00	; 0
    5b8a:	d8 f7       	brcc	.-10     	; 0x5b82 <memcpy+0x6>
    5b8c:	08 95       	ret

00005b8e <memset>:
    5b8e:	dc 01       	movw	r26, r24
    5b90:	01 c0       	rjmp	.+2      	; 0x5b94 <memset+0x6>
    5b92:	6d 93       	st	X+, r22
    5b94:	41 50       	subi	r20, 0x01	; 1
    5b96:	50 40       	sbci	r21, 0x00	; 0
    5b98:	e0 f7       	brcc	.-8      	; 0x5b92 <memset+0x4>
    5b9a:	08 95       	ret

00005b9c <strcat>:
    5b9c:	fb 01       	movw	r30, r22
    5b9e:	dc 01       	movw	r26, r24
    5ba0:	0d 90       	ld	r0, X+
    5ba2:	00 20       	and	r0, r0
    5ba4:	e9 f7       	brne	.-6      	; 0x5ba0 <strcat+0x4>
    5ba6:	11 97       	sbiw	r26, 0x01	; 1
    5ba8:	01 90       	ld	r0, Z+
    5baa:	0d 92       	st	X+, r0
    5bac:	00 20       	and	r0, r0
    5bae:	e1 f7       	brne	.-8      	; 0x5ba8 <strcat+0xc>
    5bb0:	08 95       	ret

00005bb2 <strchr>:
    5bb2:	fc 01       	movw	r30, r24
    5bb4:	81 91       	ld	r24, Z+
    5bb6:	86 17       	cp	r24, r22
    5bb8:	21 f0       	breq	.+8      	; 0x5bc2 <strchr+0x10>
    5bba:	88 23       	and	r24, r24
    5bbc:	d9 f7       	brne	.-10     	; 0x5bb4 <strchr+0x2>
    5bbe:	99 27       	eor	r25, r25
    5bc0:	08 95       	ret
    5bc2:	31 97       	sbiw	r30, 0x01	; 1
    5bc4:	cf 01       	movw	r24, r30
    5bc6:	08 95       	ret

00005bc8 <strcmp>:
    5bc8:	fb 01       	movw	r30, r22
    5bca:	dc 01       	movw	r26, r24
    5bcc:	8d 91       	ld	r24, X+
    5bce:	01 90       	ld	r0, Z+
    5bd0:	80 19       	sub	r24, r0
    5bd2:	01 10       	cpse	r0, r1
    5bd4:	d9 f3       	breq	.-10     	; 0x5bcc <strcmp+0x4>
    5bd6:	99 0b       	sbc	r25, r25
    5bd8:	08 95       	ret

00005bda <strcpy>:
    5bda:	fb 01       	movw	r30, r22
    5bdc:	dc 01       	movw	r26, r24
    5bde:	01 90       	ld	r0, Z+
    5be0:	0d 92       	st	X+, r0
    5be2:	00 20       	and	r0, r0
    5be4:	e1 f7       	brne	.-8      	; 0x5bde <strcpy+0x4>
    5be6:	08 95       	ret

00005be8 <strncmp>:
    5be8:	fb 01       	movw	r30, r22
    5bea:	dc 01       	movw	r26, r24
    5bec:	41 50       	subi	r20, 0x01	; 1
    5bee:	50 40       	sbci	r21, 0x00	; 0
    5bf0:	30 f0       	brcs	.+12     	; 0x5bfe <strncmp+0x16>
    5bf2:	8d 91       	ld	r24, X+
    5bf4:	01 90       	ld	r0, Z+
    5bf6:	80 19       	sub	r24, r0
    5bf8:	19 f4       	brne	.+6      	; 0x5c00 <strncmp+0x18>
    5bfa:	00 20       	and	r0, r0
    5bfc:	b9 f7       	brne	.-18     	; 0x5bec <strncmp+0x4>
    5bfe:	88 1b       	sub	r24, r24
    5c00:	99 0b       	sbc	r25, r25
    5c02:	08 95       	ret

00005c04 <strncpy>:
    5c04:	fb 01       	movw	r30, r22
    5c06:	dc 01       	movw	r26, r24
    5c08:	41 50       	subi	r20, 0x01	; 1
    5c0a:	50 40       	sbci	r21, 0x00	; 0
    5c0c:	48 f0       	brcs	.+18     	; 0x5c20 <strncpy+0x1c>
    5c0e:	01 90       	ld	r0, Z+
    5c10:	0d 92       	st	X+, r0
    5c12:	00 20       	and	r0, r0
    5c14:	c9 f7       	brne	.-14     	; 0x5c08 <strncpy+0x4>
    5c16:	01 c0       	rjmp	.+2      	; 0x5c1a <strncpy+0x16>
    5c18:	1d 92       	st	X+, r1
    5c1a:	41 50       	subi	r20, 0x01	; 1
    5c1c:	50 40       	sbci	r21, 0x00	; 0
    5c1e:	e0 f7       	brcc	.-8      	; 0x5c18 <strncpy+0x14>
    5c20:	08 95       	ret

00005c22 <strrchr>:
    5c22:	fc 01       	movw	r30, r24
    5c24:	81 e0       	ldi	r24, 0x01	; 1
    5c26:	90 e0       	ldi	r25, 0x00	; 0
    5c28:	01 90       	ld	r0, Z+
    5c2a:	06 16       	cp	r0, r22
    5c2c:	09 f4       	brne	.+2      	; 0x5c30 <strrchr+0xe>
    5c2e:	cf 01       	movw	r24, r30
    5c30:	00 20       	and	r0, r0
    5c32:	d1 f7       	brne	.-12     	; 0x5c28 <strrchr+0x6>
    5c34:	01 97       	sbiw	r24, 0x01	; 1
    5c36:	08 95       	ret

00005c38 <strstr>:
    5c38:	fb 01       	movw	r30, r22
    5c3a:	51 91       	ld	r21, Z+
    5c3c:	55 23       	and	r21, r21
    5c3e:	a9 f0       	breq	.+42     	; 0x5c6a <strstr+0x32>
    5c40:	bf 01       	movw	r22, r30
    5c42:	dc 01       	movw	r26, r24
    5c44:	4d 91       	ld	r20, X+
    5c46:	45 17       	cp	r20, r21
    5c48:	41 11       	cpse	r20, r1
    5c4a:	e1 f7       	brne	.-8      	; 0x5c44 <strstr+0xc>
    5c4c:	59 f4       	brne	.+22     	; 0x5c64 <strstr+0x2c>
    5c4e:	cd 01       	movw	r24, r26
    5c50:	01 90       	ld	r0, Z+
    5c52:	00 20       	and	r0, r0
    5c54:	49 f0       	breq	.+18     	; 0x5c68 <strstr+0x30>
    5c56:	4d 91       	ld	r20, X+
    5c58:	40 15       	cp	r20, r0
    5c5a:	41 11       	cpse	r20, r1
    5c5c:	c9 f3       	breq	.-14     	; 0x5c50 <strstr+0x18>
    5c5e:	fb 01       	movw	r30, r22
    5c60:	41 11       	cpse	r20, r1
    5c62:	ef cf       	rjmp	.-34     	; 0x5c42 <strstr+0xa>
    5c64:	81 e0       	ldi	r24, 0x01	; 1
    5c66:	90 e0       	ldi	r25, 0x00	; 0
    5c68:	01 97       	sbiw	r24, 0x01	; 1
    5c6a:	08 95       	ret

00005c6c <itoa>:
    5c6c:	fb 01       	movw	r30, r22
    5c6e:	9f 01       	movw	r18, r30
    5c70:	e8 94       	clt
    5c72:	42 30       	cpi	r20, 0x02	; 2
    5c74:	c4 f0       	brlt	.+48     	; 0x5ca6 <itoa+0x3a>
    5c76:	45 32       	cpi	r20, 0x25	; 37
    5c78:	b4 f4       	brge	.+44     	; 0x5ca6 <itoa+0x3a>
    5c7a:	4a 30       	cpi	r20, 0x0A	; 10
    5c7c:	29 f4       	brne	.+10     	; 0x5c88 <itoa+0x1c>
    5c7e:	97 fb       	bst	r25, 7
    5c80:	1e f4       	brtc	.+6      	; 0x5c88 <itoa+0x1c>
    5c82:	90 95       	com	r25
    5c84:	81 95       	neg	r24
    5c86:	9f 4f       	sbci	r25, 0xFF	; 255
    5c88:	64 2f       	mov	r22, r20
    5c8a:	77 27       	eor	r23, r23
    5c8c:	0e 94 c6 28 	call	0x518c	; 0x518c <__udivmodhi4>
    5c90:	80 5d       	subi	r24, 0xD0	; 208
    5c92:	8a 33       	cpi	r24, 0x3A	; 58
    5c94:	0c f0       	brlt	.+2      	; 0x5c98 <itoa+0x2c>
    5c96:	89 5d       	subi	r24, 0xD9	; 217
    5c98:	81 93       	st	Z+, r24
    5c9a:	cb 01       	movw	r24, r22
    5c9c:	00 97       	sbiw	r24, 0x00	; 0
    5c9e:	a1 f7       	brne	.-24     	; 0x5c88 <itoa+0x1c>
    5ca0:	16 f4       	brtc	.+4      	; 0x5ca6 <itoa+0x3a>
    5ca2:	5d e2       	ldi	r21, 0x2D	; 45
    5ca4:	51 93       	st	Z+, r21
    5ca6:	10 82       	st	Z, r1
    5ca8:	c9 01       	movw	r24, r18
    5caa:	0c 94 da 30 	jmp	0x61b4	; 0x61b4 <strrev>

00005cae <ltoa>:
    5cae:	fa 01       	movw	r30, r20
    5cb0:	cf 93       	push	r28
    5cb2:	ff 93       	push	r31
    5cb4:	ef 93       	push	r30
    5cb6:	22 30       	cpi	r18, 0x02	; 2
    5cb8:	44 f1       	brlt	.+80     	; 0x5d0a <ltoa+0x5c>
    5cba:	25 32       	cpi	r18, 0x25	; 37
    5cbc:	34 f5       	brge	.+76     	; 0x5d0a <ltoa+0x5c>
    5cbe:	c2 2f       	mov	r28, r18
    5cc0:	e8 94       	clt
    5cc2:	ca 30       	cpi	r28, 0x0A	; 10
    5cc4:	49 f4       	brne	.+18     	; 0x5cd8 <ltoa+0x2a>
    5cc6:	97 fb       	bst	r25, 7
    5cc8:	3e f4       	brtc	.+14     	; 0x5cd8 <ltoa+0x2a>
    5cca:	90 95       	com	r25
    5ccc:	80 95       	com	r24
    5cce:	70 95       	com	r23
    5cd0:	61 95       	neg	r22
    5cd2:	7f 4f       	sbci	r23, 0xFF	; 255
    5cd4:	8f 4f       	sbci	r24, 0xFF	; 255
    5cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    5cd8:	2c 2f       	mov	r18, r28
    5cda:	33 27       	eor	r19, r19
    5cdc:	44 27       	eor	r20, r20
    5cde:	55 27       	eor	r21, r21
    5ce0:	ff 93       	push	r31
    5ce2:	ef 93       	push	r30
    5ce4:	0e 94 ed 28 	call	0x51da	; 0x51da <__udivmodsi4>
    5ce8:	ef 91       	pop	r30
    5cea:	ff 91       	pop	r31
    5cec:	60 5d       	subi	r22, 0xD0	; 208
    5cee:	6a 33       	cpi	r22, 0x3A	; 58
    5cf0:	0c f0       	brlt	.+2      	; 0x5cf4 <ltoa+0x46>
    5cf2:	69 5d       	subi	r22, 0xD9	; 217
    5cf4:	61 93       	st	Z+, r22
    5cf6:	b9 01       	movw	r22, r18
    5cf8:	ca 01       	movw	r24, r20
    5cfa:	60 50       	subi	r22, 0x00	; 0
    5cfc:	70 40       	sbci	r23, 0x00	; 0
    5cfe:	80 40       	sbci	r24, 0x00	; 0
    5d00:	90 40       	sbci	r25, 0x00	; 0
    5d02:	51 f7       	brne	.-44     	; 0x5cd8 <ltoa+0x2a>
    5d04:	16 f4       	brtc	.+4      	; 0x5d0a <ltoa+0x5c>
    5d06:	cd e2       	ldi	r28, 0x2D	; 45
    5d08:	c1 93       	st	Z+, r28
    5d0a:	10 82       	st	Z, r1
    5d0c:	8f 91       	pop	r24
    5d0e:	9f 91       	pop	r25
    5d10:	cf 91       	pop	r28
    5d12:	0c 94 da 30 	jmp	0x61b4	; 0x61b4 <strrev>

00005d16 <__mulsi_const_10>:
    5d16:	59 2f       	mov	r21, r25
    5d18:	48 2f       	mov	r20, r24
    5d1a:	37 2f       	mov	r19, r23
    5d1c:	26 2f       	mov	r18, r22
    5d1e:	66 0f       	add	r22, r22
    5d20:	77 1f       	adc	r23, r23
    5d22:	88 1f       	adc	r24, r24
    5d24:	99 1f       	adc	r25, r25
    5d26:	66 0f       	add	r22, r22
    5d28:	77 1f       	adc	r23, r23
    5d2a:	88 1f       	adc	r24, r24
    5d2c:	99 1f       	adc	r25, r25
    5d2e:	62 0f       	add	r22, r18
    5d30:	73 1f       	adc	r23, r19
    5d32:	84 1f       	adc	r24, r20
    5d34:	95 1f       	adc	r25, r21
    5d36:	66 0f       	add	r22, r22
    5d38:	77 1f       	adc	r23, r23
    5d3a:	88 1f       	adc	r24, r24
    5d3c:	99 1f       	adc	r25, r25
    5d3e:	08 95       	ret

00005d40 <ultoa>:
    5d40:	fa 01       	movw	r30, r20
    5d42:	cf 93       	push	r28
    5d44:	ff 93       	push	r31
    5d46:	ef 93       	push	r30
    5d48:	22 30       	cpi	r18, 0x02	; 2
    5d4a:	cc f0       	brlt	.+50     	; 0x5d7e <ultoa+0x3e>
    5d4c:	25 32       	cpi	r18, 0x25	; 37
    5d4e:	bc f4       	brge	.+46     	; 0x5d7e <ultoa+0x3e>
    5d50:	c2 2f       	mov	r28, r18
    5d52:	2c 2f       	mov	r18, r28
    5d54:	33 27       	eor	r19, r19
    5d56:	44 27       	eor	r20, r20
    5d58:	55 27       	eor	r21, r21
    5d5a:	ff 93       	push	r31
    5d5c:	ef 93       	push	r30
    5d5e:	0e 94 ed 28 	call	0x51da	; 0x51da <__udivmodsi4>
    5d62:	ef 91       	pop	r30
    5d64:	ff 91       	pop	r31
    5d66:	60 5d       	subi	r22, 0xD0	; 208
    5d68:	6a 33       	cpi	r22, 0x3A	; 58
    5d6a:	0c f0       	brlt	.+2      	; 0x5d6e <ultoa+0x2e>
    5d6c:	69 5d       	subi	r22, 0xD9	; 217
    5d6e:	61 93       	st	Z+, r22
    5d70:	b9 01       	movw	r22, r18
    5d72:	ca 01       	movw	r24, r20
    5d74:	60 50       	subi	r22, 0x00	; 0
    5d76:	70 40       	sbci	r23, 0x00	; 0
    5d78:	80 40       	sbci	r24, 0x00	; 0
    5d7a:	90 40       	sbci	r25, 0x00	; 0
    5d7c:	51 f7       	brne	.-44     	; 0x5d52 <ultoa+0x12>
    5d7e:	10 82       	st	Z, r1
    5d80:	8f 91       	pop	r24
    5d82:	9f 91       	pop	r25
    5d84:	cf 91       	pop	r28
    5d86:	0c 94 da 30 	jmp	0x61b4	; 0x61b4 <strrev>

00005d8a <sprintf>:
    5d8a:	ae e0       	ldi	r26, 0x0E	; 14
    5d8c:	b0 e0       	ldi	r27, 0x00	; 0
    5d8e:	eb ec       	ldi	r30, 0xCB	; 203
    5d90:	fe e2       	ldi	r31, 0x2E	; 46
    5d92:	0c 94 1d 29 	jmp	0x523a	; 0x523a <__prologue_saves__+0x1c>
    5d96:	0d 89       	ldd	r16, Y+21	; 0x15
    5d98:	1e 89       	ldd	r17, Y+22	; 0x16
    5d9a:	86 e0       	ldi	r24, 0x06	; 6
    5d9c:	8c 83       	std	Y+4, r24	; 0x04
    5d9e:	1a 83       	std	Y+2, r17	; 0x02
    5da0:	09 83       	std	Y+1, r16	; 0x01
    5da2:	8f ef       	ldi	r24, 0xFF	; 255
    5da4:	9f e7       	ldi	r25, 0x7F	; 127
    5da6:	9e 83       	std	Y+6, r25	; 0x06
    5da8:	8d 83       	std	Y+5, r24	; 0x05
    5daa:	9e 01       	movw	r18, r28
    5dac:	27 5e       	subi	r18, 0xE7	; 231
    5dae:	3f 4f       	sbci	r19, 0xFF	; 255
    5db0:	ce 01       	movw	r24, r28
    5db2:	01 96       	adiw	r24, 0x01	; 1
    5db4:	6f 89       	ldd	r22, Y+23	; 0x17
    5db6:	78 8d       	ldd	r23, Y+24	; 0x18
    5db8:	a9 01       	movw	r20, r18
    5dba:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <vfprintf>
    5dbe:	ef 81       	ldd	r30, Y+7	; 0x07
    5dc0:	f8 85       	ldd	r31, Y+8	; 0x08
    5dc2:	e0 0f       	add	r30, r16
    5dc4:	f1 1f       	adc	r31, r17
    5dc6:	10 82       	st	Z, r1
    5dc8:	2e 96       	adiw	r28, 0x0e	; 14
    5dca:	e4 e0       	ldi	r30, 0x04	; 4
    5dcc:	0c 94 39 29 	jmp	0x5272	; 0x5272 <__epilogue_restores__+0x1c>

00005dd0 <vfprintf>:
    5dd0:	ac e0       	ldi	r26, 0x0C	; 12
    5dd2:	b0 e0       	ldi	r27, 0x00	; 0
    5dd4:	ee ee       	ldi	r30, 0xEE	; 238
    5dd6:	fe e2       	ldi	r31, 0x2E	; 46
    5dd8:	0c 94 10 29 	jmp	0x5220	; 0x5220 <__prologue_saves__+0x2>
    5ddc:	6c 01       	movw	r12, r24
    5dde:	2b 01       	movw	r4, r22
    5de0:	8a 01       	movw	r16, r20
    5de2:	fc 01       	movw	r30, r24
    5de4:	17 82       	std	Z+7, r1	; 0x07
    5de6:	16 82       	std	Z+6, r1	; 0x06
    5de8:	83 81       	ldd	r24, Z+3	; 0x03
    5dea:	81 fd       	sbrc	r24, 1
    5dec:	03 c0       	rjmp	.+6      	; 0x5df4 <vfprintf+0x24>
    5dee:	2f ef       	ldi	r18, 0xFF	; 255
    5df0:	3f ef       	ldi	r19, 0xFF	; 255
    5df2:	c2 c1       	rjmp	.+900    	; 0x6178 <vfprintf+0x3a8>
    5df4:	4e 01       	movw	r8, r28
    5df6:	08 94       	sec
    5df8:	81 1c       	adc	r8, r1
    5dfa:	91 1c       	adc	r9, r1
    5dfc:	6f e3       	ldi	r22, 0x3F	; 63
    5dfe:	36 2e       	mov	r3, r22
    5e00:	f6 01       	movw	r30, r12
    5e02:	93 81       	ldd	r25, Z+3	; 0x03
    5e04:	f2 01       	movw	r30, r4
    5e06:	93 fd       	sbrc	r25, 3
    5e08:	85 91       	lpm	r24, Z+
    5e0a:	93 ff       	sbrs	r25, 3
    5e0c:	81 91       	ld	r24, Z+
    5e0e:	2f 01       	movw	r4, r30
    5e10:	88 23       	and	r24, r24
    5e12:	09 f4       	brne	.+2      	; 0x5e16 <vfprintf+0x46>
    5e14:	ae c1       	rjmp	.+860    	; 0x6172 <vfprintf+0x3a2>
    5e16:	85 32       	cpi	r24, 0x25	; 37
    5e18:	39 f4       	brne	.+14     	; 0x5e28 <vfprintf+0x58>
    5e1a:	93 fd       	sbrc	r25, 3
    5e1c:	85 91       	lpm	r24, Z+
    5e1e:	93 ff       	sbrs	r25, 3
    5e20:	81 91       	ld	r24, Z+
    5e22:	2f 01       	movw	r4, r30
    5e24:	85 32       	cpi	r24, 0x25	; 37
    5e26:	29 f4       	brne	.+10     	; 0x5e32 <vfprintf+0x62>
    5e28:	90 e0       	ldi	r25, 0x00	; 0
    5e2a:	b6 01       	movw	r22, r12
    5e2c:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <fputc>
    5e30:	e7 cf       	rjmp	.-50     	; 0x5e00 <vfprintf+0x30>
    5e32:	ee 24       	eor	r14, r14
    5e34:	ff 24       	eor	r15, r15
    5e36:	20 e0       	ldi	r18, 0x00	; 0
    5e38:	20 32       	cpi	r18, 0x20	; 32
    5e3a:	b0 f4       	brcc	.+44     	; 0x5e68 <vfprintf+0x98>
    5e3c:	8b 32       	cpi	r24, 0x2B	; 43
    5e3e:	69 f0       	breq	.+26     	; 0x5e5a <vfprintf+0x8a>
    5e40:	8c 32       	cpi	r24, 0x2C	; 44
    5e42:	28 f4       	brcc	.+10     	; 0x5e4e <vfprintf+0x7e>
    5e44:	80 32       	cpi	r24, 0x20	; 32
    5e46:	51 f0       	breq	.+20     	; 0x5e5c <vfprintf+0x8c>
    5e48:	83 32       	cpi	r24, 0x23	; 35
    5e4a:	71 f4       	brne	.+28     	; 0x5e68 <vfprintf+0x98>
    5e4c:	0b c0       	rjmp	.+22     	; 0x5e64 <vfprintf+0x94>
    5e4e:	8d 32       	cpi	r24, 0x2D	; 45
    5e50:	39 f0       	breq	.+14     	; 0x5e60 <vfprintf+0x90>
    5e52:	80 33       	cpi	r24, 0x30	; 48
    5e54:	49 f4       	brne	.+18     	; 0x5e68 <vfprintf+0x98>
    5e56:	21 60       	ori	r18, 0x01	; 1
    5e58:	2c c0       	rjmp	.+88     	; 0x5eb2 <vfprintf+0xe2>
    5e5a:	22 60       	ori	r18, 0x02	; 2
    5e5c:	24 60       	ori	r18, 0x04	; 4
    5e5e:	29 c0       	rjmp	.+82     	; 0x5eb2 <vfprintf+0xe2>
    5e60:	28 60       	ori	r18, 0x08	; 8
    5e62:	27 c0       	rjmp	.+78     	; 0x5eb2 <vfprintf+0xe2>
    5e64:	20 61       	ori	r18, 0x10	; 16
    5e66:	25 c0       	rjmp	.+74     	; 0x5eb2 <vfprintf+0xe2>
    5e68:	27 fd       	sbrc	r18, 7
    5e6a:	2c c0       	rjmp	.+88     	; 0x5ec4 <vfprintf+0xf4>
    5e6c:	38 2f       	mov	r19, r24
    5e6e:	30 53       	subi	r19, 0x30	; 48
    5e70:	3a 30       	cpi	r19, 0x0A	; 10
    5e72:	98 f4       	brcc	.+38     	; 0x5e9a <vfprintf+0xca>
    5e74:	26 ff       	sbrs	r18, 6
    5e76:	08 c0       	rjmp	.+16     	; 0x5e88 <vfprintf+0xb8>
    5e78:	8e 2d       	mov	r24, r14
    5e7a:	88 0f       	add	r24, r24
    5e7c:	e8 2e       	mov	r14, r24
    5e7e:	ee 0c       	add	r14, r14
    5e80:	ee 0c       	add	r14, r14
    5e82:	e8 0e       	add	r14, r24
    5e84:	e3 0e       	add	r14, r19
    5e86:	15 c0       	rjmp	.+42     	; 0x5eb2 <vfprintf+0xe2>
    5e88:	8f 2d       	mov	r24, r15
    5e8a:	88 0f       	add	r24, r24
    5e8c:	f8 2e       	mov	r15, r24
    5e8e:	ff 0c       	add	r15, r15
    5e90:	ff 0c       	add	r15, r15
    5e92:	f8 0e       	add	r15, r24
    5e94:	f3 0e       	add	r15, r19
    5e96:	20 62       	ori	r18, 0x20	; 32
    5e98:	0c c0       	rjmp	.+24     	; 0x5eb2 <vfprintf+0xe2>
    5e9a:	8e 32       	cpi	r24, 0x2E	; 46
    5e9c:	21 f4       	brne	.+8      	; 0x5ea6 <vfprintf+0xd6>
    5e9e:	26 fd       	sbrc	r18, 6
    5ea0:	68 c1       	rjmp	.+720    	; 0x6172 <vfprintf+0x3a2>
    5ea2:	20 64       	ori	r18, 0x40	; 64
    5ea4:	06 c0       	rjmp	.+12     	; 0x5eb2 <vfprintf+0xe2>
    5ea6:	8c 36       	cpi	r24, 0x6C	; 108
    5ea8:	11 f4       	brne	.+4      	; 0x5eae <vfprintf+0xde>
    5eaa:	20 68       	ori	r18, 0x80	; 128
    5eac:	02 c0       	rjmp	.+4      	; 0x5eb2 <vfprintf+0xe2>
    5eae:	88 36       	cpi	r24, 0x68	; 104
    5eb0:	49 f4       	brne	.+18     	; 0x5ec4 <vfprintf+0xf4>
    5eb2:	f2 01       	movw	r30, r4
    5eb4:	93 fd       	sbrc	r25, 3
    5eb6:	85 91       	lpm	r24, Z+
    5eb8:	93 ff       	sbrs	r25, 3
    5eba:	81 91       	ld	r24, Z+
    5ebc:	2f 01       	movw	r4, r30
    5ebe:	88 23       	and	r24, r24
    5ec0:	09 f0       	breq	.+2      	; 0x5ec4 <vfprintf+0xf4>
    5ec2:	ba cf       	rjmp	.-140    	; 0x5e38 <vfprintf+0x68>
    5ec4:	98 2f       	mov	r25, r24
    5ec6:	95 54       	subi	r25, 0x45	; 69
    5ec8:	93 30       	cpi	r25, 0x03	; 3
    5eca:	18 f0       	brcs	.+6      	; 0x5ed2 <vfprintf+0x102>
    5ecc:	90 52       	subi	r25, 0x20	; 32
    5ece:	93 30       	cpi	r25, 0x03	; 3
    5ed0:	20 f4       	brcc	.+8      	; 0x5eda <vfprintf+0x10a>
    5ed2:	0c 5f       	subi	r16, 0xFC	; 252
    5ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    5ed6:	39 82       	std	Y+1, r3	; 0x01
    5ed8:	0d c0       	rjmp	.+26     	; 0x5ef4 <vfprintf+0x124>
    5eda:	83 36       	cpi	r24, 0x63	; 99
    5edc:	31 f0       	breq	.+12     	; 0x5eea <vfprintf+0x11a>
    5ede:	83 37       	cpi	r24, 0x73	; 115
    5ee0:	71 f0       	breq	.+28     	; 0x5efe <vfprintf+0x12e>
    5ee2:	83 35       	cpi	r24, 0x53	; 83
    5ee4:	09 f0       	breq	.+2      	; 0x5ee8 <vfprintf+0x118>
    5ee6:	58 c0       	rjmp	.+176    	; 0x5f98 <vfprintf+0x1c8>
    5ee8:	1e c0       	rjmp	.+60     	; 0x5f26 <vfprintf+0x156>
    5eea:	f8 01       	movw	r30, r16
    5eec:	80 81       	ld	r24, Z
    5eee:	89 83       	std	Y+1, r24	; 0x01
    5ef0:	0e 5f       	subi	r16, 0xFE	; 254
    5ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    5ef4:	54 01       	movw	r10, r8
    5ef6:	51 e0       	ldi	r21, 0x01	; 1
    5ef8:	65 2e       	mov	r6, r21
    5efa:	71 2c       	mov	r7, r1
    5efc:	12 c0       	rjmp	.+36     	; 0x5f22 <vfprintf+0x152>
    5efe:	f8 01       	movw	r30, r16
    5f00:	a0 80       	ld	r10, Z
    5f02:	b1 80       	ldd	r11, Z+1	; 0x01
    5f04:	26 fd       	sbrc	r18, 6
    5f06:	03 c0       	rjmp	.+6      	; 0x5f0e <vfprintf+0x13e>
    5f08:	6f ef       	ldi	r22, 0xFF	; 255
    5f0a:	7f ef       	ldi	r23, 0xFF	; 255
    5f0c:	02 c0       	rjmp	.+4      	; 0x5f12 <vfprintf+0x142>
    5f0e:	6e 2d       	mov	r22, r14
    5f10:	70 e0       	ldi	r23, 0x00	; 0
    5f12:	0e 5f       	subi	r16, 0xFE	; 254
    5f14:	1f 4f       	sbci	r17, 0xFF	; 255
    5f16:	c5 01       	movw	r24, r10
    5f18:	2c 87       	std	Y+12, r18	; 0x0c
    5f1a:	0e 94 cf 30 	call	0x619e	; 0x619e <strnlen>
    5f1e:	3c 01       	movw	r6, r24
    5f20:	2c 85       	ldd	r18, Y+12	; 0x0c
    5f22:	2f 77       	andi	r18, 0x7F	; 127
    5f24:	13 c0       	rjmp	.+38     	; 0x5f4c <vfprintf+0x17c>
    5f26:	f8 01       	movw	r30, r16
    5f28:	a0 80       	ld	r10, Z
    5f2a:	b1 80       	ldd	r11, Z+1	; 0x01
    5f2c:	26 fd       	sbrc	r18, 6
    5f2e:	03 c0       	rjmp	.+6      	; 0x5f36 <vfprintf+0x166>
    5f30:	6f ef       	ldi	r22, 0xFF	; 255
    5f32:	7f ef       	ldi	r23, 0xFF	; 255
    5f34:	02 c0       	rjmp	.+4      	; 0x5f3a <vfprintf+0x16a>
    5f36:	6e 2d       	mov	r22, r14
    5f38:	70 e0       	ldi	r23, 0x00	; 0
    5f3a:	0e 5f       	subi	r16, 0xFE	; 254
    5f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    5f3e:	c5 01       	movw	r24, r10
    5f40:	2c 87       	std	Y+12, r18	; 0x0c
    5f42:	0e 94 c4 30 	call	0x6188	; 0x6188 <strnlen_P>
    5f46:	3c 01       	movw	r6, r24
    5f48:	2c 85       	ldd	r18, Y+12	; 0x0c
    5f4a:	20 68       	ori	r18, 0x80	; 128
    5f4c:	23 ff       	sbrs	r18, 3
    5f4e:	09 c0       	rjmp	.+18     	; 0x5f62 <vfprintf+0x192>
    5f50:	1f c0       	rjmp	.+62     	; 0x5f90 <vfprintf+0x1c0>
    5f52:	80 e2       	ldi	r24, 0x20	; 32
    5f54:	90 e0       	ldi	r25, 0x00	; 0
    5f56:	b6 01       	movw	r22, r12
    5f58:	2c 87       	std	Y+12, r18	; 0x0c
    5f5a:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <fputc>
    5f5e:	fa 94       	dec	r15
    5f60:	2c 85       	ldd	r18, Y+12	; 0x0c
    5f62:	8f 2d       	mov	r24, r15
    5f64:	90 e0       	ldi	r25, 0x00	; 0
    5f66:	68 16       	cp	r6, r24
    5f68:	79 06       	cpc	r7, r25
    5f6a:	98 f3       	brcs	.-26     	; 0x5f52 <vfprintf+0x182>
    5f6c:	11 c0       	rjmp	.+34     	; 0x5f90 <vfprintf+0x1c0>
    5f6e:	f5 01       	movw	r30, r10
    5f70:	27 fd       	sbrc	r18, 7
    5f72:	85 91       	lpm	r24, Z+
    5f74:	27 ff       	sbrs	r18, 7
    5f76:	81 91       	ld	r24, Z+
    5f78:	5f 01       	movw	r10, r30
    5f7a:	90 e0       	ldi	r25, 0x00	; 0
    5f7c:	b6 01       	movw	r22, r12
    5f7e:	2c 87       	std	Y+12, r18	; 0x0c
    5f80:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <fputc>
    5f84:	2c 85       	ldd	r18, Y+12	; 0x0c
    5f86:	f1 10       	cpse	r15, r1
    5f88:	fa 94       	dec	r15
    5f8a:	08 94       	sec
    5f8c:	61 08       	sbc	r6, r1
    5f8e:	71 08       	sbc	r7, r1
    5f90:	61 14       	cp	r6, r1
    5f92:	71 04       	cpc	r7, r1
    5f94:	61 f7       	brne	.-40     	; 0x5f6e <vfprintf+0x19e>
    5f96:	ea c0       	rjmp	.+468    	; 0x616c <vfprintf+0x39c>
    5f98:	84 36       	cpi	r24, 0x64	; 100
    5f9a:	11 f0       	breq	.+4      	; 0x5fa0 <vfprintf+0x1d0>
    5f9c:	89 36       	cpi	r24, 0x69	; 105
    5f9e:	51 f5       	brne	.+84     	; 0x5ff4 <vfprintf+0x224>
    5fa0:	27 ff       	sbrs	r18, 7
    5fa2:	08 c0       	rjmp	.+16     	; 0x5fb4 <vfprintf+0x1e4>
    5fa4:	f8 01       	movw	r30, r16
    5fa6:	60 81       	ld	r22, Z
    5fa8:	71 81       	ldd	r23, Z+1	; 0x01
    5faa:	82 81       	ldd	r24, Z+2	; 0x02
    5fac:	93 81       	ldd	r25, Z+3	; 0x03
    5fae:	0c 5f       	subi	r16, 0xFC	; 252
    5fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    5fb2:	0a c0       	rjmp	.+20     	; 0x5fc8 <vfprintf+0x1f8>
    5fb4:	f8 01       	movw	r30, r16
    5fb6:	40 81       	ld	r20, Z
    5fb8:	51 81       	ldd	r21, Z+1	; 0x01
    5fba:	ba 01       	movw	r22, r20
    5fbc:	88 27       	eor	r24, r24
    5fbe:	77 fd       	sbrc	r23, 7
    5fc0:	80 95       	com	r24
    5fc2:	98 2f       	mov	r25, r24
    5fc4:	0e 5f       	subi	r16, 0xFE	; 254
    5fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    5fc8:	4f e6       	ldi	r20, 0x6F	; 111
    5fca:	b4 2e       	mov	r11, r20
    5fcc:	b2 22       	and	r11, r18
    5fce:	97 ff       	sbrs	r25, 7
    5fd0:	09 c0       	rjmp	.+18     	; 0x5fe4 <vfprintf+0x214>
    5fd2:	90 95       	com	r25
    5fd4:	80 95       	com	r24
    5fd6:	70 95       	com	r23
    5fd8:	61 95       	neg	r22
    5fda:	7f 4f       	sbci	r23, 0xFF	; 255
    5fdc:	8f 4f       	sbci	r24, 0xFF	; 255
    5fde:	9f 4f       	sbci	r25, 0xFF	; 255
    5fe0:	f0 e8       	ldi	r31, 0x80	; 128
    5fe2:	bf 2a       	or	r11, r31
    5fe4:	a4 01       	movw	r20, r8
    5fe6:	2a e0       	ldi	r18, 0x0A	; 10
    5fe8:	30 e0       	ldi	r19, 0x00	; 0
    5fea:	0e 94 16 31 	call	0x622c	; 0x622c <__ultoa_invert>
    5fee:	78 2e       	mov	r7, r24
    5ff0:	78 18       	sub	r7, r8
    5ff2:	43 c0       	rjmp	.+134    	; 0x607a <vfprintf+0x2aa>
    5ff4:	85 37       	cpi	r24, 0x75	; 117
    5ff6:	31 f4       	brne	.+12     	; 0x6004 <vfprintf+0x234>
    5ff8:	3f ee       	ldi	r19, 0xEF	; 239
    5ffa:	b3 2e       	mov	r11, r19
    5ffc:	b2 22       	and	r11, r18
    5ffe:	2a e0       	ldi	r18, 0x0A	; 10
    6000:	30 e0       	ldi	r19, 0x00	; 0
    6002:	23 c0       	rjmp	.+70     	; 0x604a <vfprintf+0x27a>
    6004:	99 ef       	ldi	r25, 0xF9	; 249
    6006:	b9 2e       	mov	r11, r25
    6008:	b2 22       	and	r11, r18
    600a:	8f 36       	cpi	r24, 0x6F	; 111
    600c:	61 f0       	breq	.+24     	; 0x6026 <vfprintf+0x256>
    600e:	80 37       	cpi	r24, 0x70	; 112
    6010:	20 f4       	brcc	.+8      	; 0x601a <vfprintf+0x24a>
    6012:	88 35       	cpi	r24, 0x58	; 88
    6014:	09 f0       	breq	.+2      	; 0x6018 <vfprintf+0x248>
    6016:	ad c0       	rjmp	.+346    	; 0x6172 <vfprintf+0x3a2>
    6018:	12 c0       	rjmp	.+36     	; 0x603e <vfprintf+0x26e>
    601a:	80 37       	cpi	r24, 0x70	; 112
    601c:	39 f0       	breq	.+14     	; 0x602c <vfprintf+0x25c>
    601e:	88 37       	cpi	r24, 0x78	; 120
    6020:	09 f0       	breq	.+2      	; 0x6024 <vfprintf+0x254>
    6022:	a7 c0       	rjmp	.+334    	; 0x6172 <vfprintf+0x3a2>
    6024:	05 c0       	rjmp	.+10     	; 0x6030 <vfprintf+0x260>
    6026:	28 e0       	ldi	r18, 0x08	; 8
    6028:	30 e0       	ldi	r19, 0x00	; 0
    602a:	0f c0       	rjmp	.+30     	; 0x604a <vfprintf+0x27a>
    602c:	20 e1       	ldi	r18, 0x10	; 16
    602e:	b2 2a       	or	r11, r18
    6030:	b4 fe       	sbrs	r11, 4
    6032:	02 c0       	rjmp	.+4      	; 0x6038 <vfprintf+0x268>
    6034:	84 e0       	ldi	r24, 0x04	; 4
    6036:	b8 2a       	or	r11, r24
    6038:	20 e1       	ldi	r18, 0x10	; 16
    603a:	30 e0       	ldi	r19, 0x00	; 0
    603c:	06 c0       	rjmp	.+12     	; 0x604a <vfprintf+0x27a>
    603e:	b4 fe       	sbrs	r11, 4
    6040:	02 c0       	rjmp	.+4      	; 0x6046 <vfprintf+0x276>
    6042:	e6 e0       	ldi	r30, 0x06	; 6
    6044:	be 2a       	or	r11, r30
    6046:	20 e1       	ldi	r18, 0x10	; 16
    6048:	32 e0       	ldi	r19, 0x02	; 2
    604a:	b7 fe       	sbrs	r11, 7
    604c:	08 c0       	rjmp	.+16     	; 0x605e <vfprintf+0x28e>
    604e:	f8 01       	movw	r30, r16
    6050:	60 81       	ld	r22, Z
    6052:	71 81       	ldd	r23, Z+1	; 0x01
    6054:	82 81       	ldd	r24, Z+2	; 0x02
    6056:	93 81       	ldd	r25, Z+3	; 0x03
    6058:	0c 5f       	subi	r16, 0xFC	; 252
    605a:	1f 4f       	sbci	r17, 0xFF	; 255
    605c:	07 c0       	rjmp	.+14     	; 0x606c <vfprintf+0x29c>
    605e:	f8 01       	movw	r30, r16
    6060:	60 81       	ld	r22, Z
    6062:	71 81       	ldd	r23, Z+1	; 0x01
    6064:	80 e0       	ldi	r24, 0x00	; 0
    6066:	90 e0       	ldi	r25, 0x00	; 0
    6068:	0e 5f       	subi	r16, 0xFE	; 254
    606a:	1f 4f       	sbci	r17, 0xFF	; 255
    606c:	a4 01       	movw	r20, r8
    606e:	0e 94 16 31 	call	0x622c	; 0x622c <__ultoa_invert>
    6072:	78 2e       	mov	r7, r24
    6074:	78 18       	sub	r7, r8
    6076:	ff e7       	ldi	r31, 0x7F	; 127
    6078:	bf 22       	and	r11, r31
    607a:	b6 fe       	sbrs	r11, 6
    607c:	0b c0       	rjmp	.+22     	; 0x6094 <vfprintf+0x2c4>
    607e:	2e ef       	ldi	r18, 0xFE	; 254
    6080:	b2 22       	and	r11, r18
    6082:	7e 14       	cp	r7, r14
    6084:	38 f4       	brcc	.+14     	; 0x6094 <vfprintf+0x2c4>
    6086:	b4 fe       	sbrs	r11, 4
    6088:	07 c0       	rjmp	.+14     	; 0x6098 <vfprintf+0x2c8>
    608a:	b2 fc       	sbrc	r11, 2
    608c:	05 c0       	rjmp	.+10     	; 0x6098 <vfprintf+0x2c8>
    608e:	8f ee       	ldi	r24, 0xEF	; 239
    6090:	b8 22       	and	r11, r24
    6092:	02 c0       	rjmp	.+4      	; 0x6098 <vfprintf+0x2c8>
    6094:	a7 2c       	mov	r10, r7
    6096:	01 c0       	rjmp	.+2      	; 0x609a <vfprintf+0x2ca>
    6098:	ae 2c       	mov	r10, r14
    609a:	8b 2d       	mov	r24, r11
    609c:	b4 fe       	sbrs	r11, 4
    609e:	0d c0       	rjmp	.+26     	; 0x60ba <vfprintf+0x2ea>
    60a0:	fe 01       	movw	r30, r28
    60a2:	e7 0d       	add	r30, r7
    60a4:	f1 1d       	adc	r31, r1
    60a6:	90 81       	ld	r25, Z
    60a8:	90 33       	cpi	r25, 0x30	; 48
    60aa:	19 f4       	brne	.+6      	; 0x60b2 <vfprintf+0x2e2>
    60ac:	e9 ee       	ldi	r30, 0xE9	; 233
    60ae:	be 22       	and	r11, r30
    60b0:	07 c0       	rjmp	.+14     	; 0x60c0 <vfprintf+0x2f0>
    60b2:	a3 94       	inc	r10
    60b4:	b2 fe       	sbrs	r11, 2
    60b6:	04 c0       	rjmp	.+8      	; 0x60c0 <vfprintf+0x2f0>
    60b8:	02 c0       	rjmp	.+4      	; 0x60be <vfprintf+0x2ee>
    60ba:	86 78       	andi	r24, 0x86	; 134
    60bc:	09 f0       	breq	.+2      	; 0x60c0 <vfprintf+0x2f0>
    60be:	a3 94       	inc	r10
    60c0:	6b 2c       	mov	r6, r11
    60c2:	b3 fc       	sbrc	r11, 3
    60c4:	14 c0       	rjmp	.+40     	; 0x60ee <vfprintf+0x31e>
    60c6:	b0 fe       	sbrs	r11, 0
    60c8:	0f c0       	rjmp	.+30     	; 0x60e8 <vfprintf+0x318>
    60ca:	af 14       	cp	r10, r15
    60cc:	10 f0       	brcs	.+4      	; 0x60d2 <vfprintf+0x302>
    60ce:	e7 2c       	mov	r14, r7
    60d0:	0b c0       	rjmp	.+22     	; 0x60e8 <vfprintf+0x318>
    60d2:	e7 2c       	mov	r14, r7
    60d4:	ef 0c       	add	r14, r15
    60d6:	ea 18       	sub	r14, r10
    60d8:	af 2c       	mov	r10, r15
    60da:	06 c0       	rjmp	.+12     	; 0x60e8 <vfprintf+0x318>
    60dc:	80 e2       	ldi	r24, 0x20	; 32
    60de:	90 e0       	ldi	r25, 0x00	; 0
    60e0:	b6 01       	movw	r22, r12
    60e2:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <fputc>
    60e6:	a3 94       	inc	r10
    60e8:	af 14       	cp	r10, r15
    60ea:	c0 f3       	brcs	.-16     	; 0x60dc <vfprintf+0x30c>
    60ec:	04 c0       	rjmp	.+8      	; 0x60f6 <vfprintf+0x326>
    60ee:	af 14       	cp	r10, r15
    60f0:	10 f4       	brcc	.+4      	; 0x60f6 <vfprintf+0x326>
    60f2:	fa 18       	sub	r15, r10
    60f4:	01 c0       	rjmp	.+2      	; 0x60f8 <vfprintf+0x328>
    60f6:	ff 24       	eor	r15, r15
    60f8:	64 fe       	sbrs	r6, 4
    60fa:	0f c0       	rjmp	.+30     	; 0x611a <vfprintf+0x34a>
    60fc:	80 e3       	ldi	r24, 0x30	; 48
    60fe:	90 e0       	ldi	r25, 0x00	; 0
    6100:	b6 01       	movw	r22, r12
    6102:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <fputc>
    6106:	62 fe       	sbrs	r6, 2
    6108:	1d c0       	rjmp	.+58     	; 0x6144 <vfprintf+0x374>
    610a:	61 fc       	sbrc	r6, 1
    610c:	03 c0       	rjmp	.+6      	; 0x6114 <vfprintf+0x344>
    610e:	88 e7       	ldi	r24, 0x78	; 120
    6110:	90 e0       	ldi	r25, 0x00	; 0
    6112:	0e c0       	rjmp	.+28     	; 0x6130 <vfprintf+0x360>
    6114:	88 e5       	ldi	r24, 0x58	; 88
    6116:	90 e0       	ldi	r25, 0x00	; 0
    6118:	0b c0       	rjmp	.+22     	; 0x6130 <vfprintf+0x360>
    611a:	86 2d       	mov	r24, r6
    611c:	86 78       	andi	r24, 0x86	; 134
    611e:	91 f0       	breq	.+36     	; 0x6144 <vfprintf+0x374>
    6120:	61 fe       	sbrs	r6, 1
    6122:	02 c0       	rjmp	.+4      	; 0x6128 <vfprintf+0x358>
    6124:	8b e2       	ldi	r24, 0x2B	; 43
    6126:	01 c0       	rjmp	.+2      	; 0x612a <vfprintf+0x35a>
    6128:	80 e2       	ldi	r24, 0x20	; 32
    612a:	b7 fc       	sbrc	r11, 7
    612c:	8d e2       	ldi	r24, 0x2D	; 45
    612e:	90 e0       	ldi	r25, 0x00	; 0
    6130:	b6 01       	movw	r22, r12
    6132:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <fputc>
    6136:	06 c0       	rjmp	.+12     	; 0x6144 <vfprintf+0x374>
    6138:	80 e3       	ldi	r24, 0x30	; 48
    613a:	90 e0       	ldi	r25, 0x00	; 0
    613c:	b6 01       	movw	r22, r12
    613e:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <fputc>
    6142:	ea 94       	dec	r14
    6144:	7e 14       	cp	r7, r14
    6146:	c0 f3       	brcs	.-16     	; 0x6138 <vfprintf+0x368>
    6148:	7a 94       	dec	r7
    614a:	f4 01       	movw	r30, r8
    614c:	e7 0d       	add	r30, r7
    614e:	f1 1d       	adc	r31, r1
    6150:	80 81       	ld	r24, Z
    6152:	90 e0       	ldi	r25, 0x00	; 0
    6154:	b6 01       	movw	r22, r12
    6156:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <fputc>
    615a:	77 20       	and	r7, r7
    615c:	a9 f7       	brne	.-22     	; 0x6148 <vfprintf+0x378>
    615e:	06 c0       	rjmp	.+12     	; 0x616c <vfprintf+0x39c>
    6160:	80 e2       	ldi	r24, 0x20	; 32
    6162:	90 e0       	ldi	r25, 0x00	; 0
    6164:	b6 01       	movw	r22, r12
    6166:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <fputc>
    616a:	fa 94       	dec	r15
    616c:	ff 20       	and	r15, r15
    616e:	c1 f7       	brne	.-16     	; 0x6160 <vfprintf+0x390>
    6170:	47 ce       	rjmp	.-882    	; 0x5e00 <vfprintf+0x30>
    6172:	f6 01       	movw	r30, r12
    6174:	26 81       	ldd	r18, Z+6	; 0x06
    6176:	37 81       	ldd	r19, Z+7	; 0x07
    6178:	c9 01       	movw	r24, r18
    617a:	2c 96       	adiw	r28, 0x0c	; 12
    617c:	e1 e1       	ldi	r30, 0x11	; 17
    617e:	0c 94 2c 29 	jmp	0x5258	; 0x5258 <__epilogue_restores__+0x2>

00006182 <__ctype_isfalse>:
    6182:	99 27       	eor	r25, r25
    6184:	88 27       	eor	r24, r24

00006186 <__ctype_istrue>:
    6186:	08 95       	ret

00006188 <strnlen_P>:
    6188:	fc 01       	movw	r30, r24
    618a:	05 90       	lpm	r0, Z+
    618c:	61 50       	subi	r22, 0x01	; 1
    618e:	70 40       	sbci	r23, 0x00	; 0
    6190:	01 10       	cpse	r0, r1
    6192:	d8 f7       	brcc	.-10     	; 0x618a <strnlen_P+0x2>
    6194:	80 95       	com	r24
    6196:	90 95       	com	r25
    6198:	8e 0f       	add	r24, r30
    619a:	9f 1f       	adc	r25, r31
    619c:	08 95       	ret

0000619e <strnlen>:
    619e:	fc 01       	movw	r30, r24
    61a0:	61 50       	subi	r22, 0x01	; 1
    61a2:	70 40       	sbci	r23, 0x00	; 0
    61a4:	01 90       	ld	r0, Z+
    61a6:	01 10       	cpse	r0, r1
    61a8:	d8 f7       	brcc	.-10     	; 0x61a0 <strnlen+0x2>
    61aa:	80 95       	com	r24
    61ac:	90 95       	com	r25
    61ae:	8e 0f       	add	r24, r30
    61b0:	9f 1f       	adc	r25, r31
    61b2:	08 95       	ret

000061b4 <strrev>:
    61b4:	dc 01       	movw	r26, r24
    61b6:	fc 01       	movw	r30, r24
    61b8:	67 2f       	mov	r22, r23
    61ba:	71 91       	ld	r23, Z+
    61bc:	77 23       	and	r23, r23
    61be:	e1 f7       	brne	.-8      	; 0x61b8 <strrev+0x4>
    61c0:	32 97       	sbiw	r30, 0x02	; 2
    61c2:	04 c0       	rjmp	.+8      	; 0x61cc <strrev+0x18>
    61c4:	7c 91       	ld	r23, X
    61c6:	6d 93       	st	X+, r22
    61c8:	70 83       	st	Z, r23
    61ca:	62 91       	ld	r22, -Z
    61cc:	ae 17       	cp	r26, r30
    61ce:	bf 07       	cpc	r27, r31
    61d0:	c8 f3       	brcs	.-14     	; 0x61c4 <strrev+0x10>
    61d2:	08 95       	ret

000061d4 <fputc>:
    61d4:	0f 93       	push	r16
    61d6:	1f 93       	push	r17
    61d8:	cf 93       	push	r28
    61da:	df 93       	push	r29
    61dc:	8c 01       	movw	r16, r24
    61de:	eb 01       	movw	r28, r22
    61e0:	8b 81       	ldd	r24, Y+3	; 0x03
    61e2:	81 ff       	sbrs	r24, 1
    61e4:	1b c0       	rjmp	.+54     	; 0x621c <fputc+0x48>
    61e6:	82 ff       	sbrs	r24, 2
    61e8:	0d c0       	rjmp	.+26     	; 0x6204 <fputc+0x30>
    61ea:	2e 81       	ldd	r18, Y+6	; 0x06
    61ec:	3f 81       	ldd	r19, Y+7	; 0x07
    61ee:	8c 81       	ldd	r24, Y+4	; 0x04
    61f0:	9d 81       	ldd	r25, Y+5	; 0x05
    61f2:	28 17       	cp	r18, r24
    61f4:	39 07       	cpc	r19, r25
    61f6:	64 f4       	brge	.+24     	; 0x6210 <fputc+0x3c>
    61f8:	e8 81       	ld	r30, Y
    61fa:	f9 81       	ldd	r31, Y+1	; 0x01
    61fc:	01 93       	st	Z+, r16
    61fe:	f9 83       	std	Y+1, r31	; 0x01
    6200:	e8 83       	st	Y, r30
    6202:	06 c0       	rjmp	.+12     	; 0x6210 <fputc+0x3c>
    6204:	e8 85       	ldd	r30, Y+8	; 0x08
    6206:	f9 85       	ldd	r31, Y+9	; 0x09
    6208:	80 2f       	mov	r24, r16
    620a:	09 95       	icall
    620c:	00 97       	sbiw	r24, 0x00	; 0
    620e:	31 f4       	brne	.+12     	; 0x621c <fputc+0x48>
    6210:	8e 81       	ldd	r24, Y+6	; 0x06
    6212:	9f 81       	ldd	r25, Y+7	; 0x07
    6214:	01 96       	adiw	r24, 0x01	; 1
    6216:	9f 83       	std	Y+7, r25	; 0x07
    6218:	8e 83       	std	Y+6, r24	; 0x06
    621a:	02 c0       	rjmp	.+4      	; 0x6220 <fputc+0x4c>
    621c:	0f ef       	ldi	r16, 0xFF	; 255
    621e:	1f ef       	ldi	r17, 0xFF	; 255
    6220:	c8 01       	movw	r24, r16
    6222:	df 91       	pop	r29
    6224:	cf 91       	pop	r28
    6226:	1f 91       	pop	r17
    6228:	0f 91       	pop	r16
    622a:	08 95       	ret

0000622c <__ultoa_invert>:
    622c:	fa 01       	movw	r30, r20
    622e:	aa 27       	eor	r26, r26
    6230:	28 30       	cpi	r18, 0x08	; 8
    6232:	51 f1       	breq	.+84     	; 0x6288 <__ultoa_invert+0x5c>
    6234:	20 31       	cpi	r18, 0x10	; 16
    6236:	81 f1       	breq	.+96     	; 0x6298 <__ultoa_invert+0x6c>
    6238:	e8 94       	clt
    623a:	6f 93       	push	r22
    623c:	6e 7f       	andi	r22, 0xFE	; 254
    623e:	6e 5f       	subi	r22, 0xFE	; 254
    6240:	7f 4f       	sbci	r23, 0xFF	; 255
    6242:	8f 4f       	sbci	r24, 0xFF	; 255
    6244:	9f 4f       	sbci	r25, 0xFF	; 255
    6246:	af 4f       	sbci	r26, 0xFF	; 255
    6248:	b1 e0       	ldi	r27, 0x01	; 1
    624a:	3e d0       	rcall	.+124    	; 0x62c8 <__ultoa_invert+0x9c>
    624c:	b4 e0       	ldi	r27, 0x04	; 4
    624e:	3c d0       	rcall	.+120    	; 0x62c8 <__ultoa_invert+0x9c>
    6250:	67 0f       	add	r22, r23
    6252:	78 1f       	adc	r23, r24
    6254:	89 1f       	adc	r24, r25
    6256:	9a 1f       	adc	r25, r26
    6258:	a1 1d       	adc	r26, r1
    625a:	68 0f       	add	r22, r24
    625c:	79 1f       	adc	r23, r25
    625e:	8a 1f       	adc	r24, r26
    6260:	91 1d       	adc	r25, r1
    6262:	a1 1d       	adc	r26, r1
    6264:	6a 0f       	add	r22, r26
    6266:	71 1d       	adc	r23, r1
    6268:	81 1d       	adc	r24, r1
    626a:	91 1d       	adc	r25, r1
    626c:	a1 1d       	adc	r26, r1
    626e:	20 d0       	rcall	.+64     	; 0x62b0 <__ultoa_invert+0x84>
    6270:	09 f4       	brne	.+2      	; 0x6274 <__ultoa_invert+0x48>
    6272:	68 94       	set
    6274:	3f 91       	pop	r19
    6276:	2a e0       	ldi	r18, 0x0A	; 10
    6278:	26 9f       	mul	r18, r22
    627a:	11 24       	eor	r1, r1
    627c:	30 19       	sub	r19, r0
    627e:	30 5d       	subi	r19, 0xD0	; 208
    6280:	31 93       	st	Z+, r19
    6282:	de f6       	brtc	.-74     	; 0x623a <__ultoa_invert+0xe>
    6284:	cf 01       	movw	r24, r30
    6286:	08 95       	ret
    6288:	46 2f       	mov	r20, r22
    628a:	47 70       	andi	r20, 0x07	; 7
    628c:	40 5d       	subi	r20, 0xD0	; 208
    628e:	41 93       	st	Z+, r20
    6290:	b3 e0       	ldi	r27, 0x03	; 3
    6292:	0f d0       	rcall	.+30     	; 0x62b2 <__ultoa_invert+0x86>
    6294:	c9 f7       	brne	.-14     	; 0x6288 <__ultoa_invert+0x5c>
    6296:	f6 cf       	rjmp	.-20     	; 0x6284 <__ultoa_invert+0x58>
    6298:	46 2f       	mov	r20, r22
    629a:	4f 70       	andi	r20, 0x0F	; 15
    629c:	40 5d       	subi	r20, 0xD0	; 208
    629e:	4a 33       	cpi	r20, 0x3A	; 58
    62a0:	18 f0       	brcs	.+6      	; 0x62a8 <__ultoa_invert+0x7c>
    62a2:	49 5d       	subi	r20, 0xD9	; 217
    62a4:	31 fd       	sbrc	r19, 1
    62a6:	40 52       	subi	r20, 0x20	; 32
    62a8:	41 93       	st	Z+, r20
    62aa:	02 d0       	rcall	.+4      	; 0x62b0 <__ultoa_invert+0x84>
    62ac:	a9 f7       	brne	.-22     	; 0x6298 <__ultoa_invert+0x6c>
    62ae:	ea cf       	rjmp	.-44     	; 0x6284 <__ultoa_invert+0x58>
    62b0:	b4 e0       	ldi	r27, 0x04	; 4
    62b2:	a6 95       	lsr	r26
    62b4:	97 95       	ror	r25
    62b6:	87 95       	ror	r24
    62b8:	77 95       	ror	r23
    62ba:	67 95       	ror	r22
    62bc:	ba 95       	dec	r27
    62be:	c9 f7       	brne	.-14     	; 0x62b2 <__ultoa_invert+0x86>
    62c0:	00 97       	sbiw	r24, 0x00	; 0
    62c2:	61 05       	cpc	r22, r1
    62c4:	71 05       	cpc	r23, r1
    62c6:	08 95       	ret
    62c8:	9b 01       	movw	r18, r22
    62ca:	ac 01       	movw	r20, r24
    62cc:	0a 2e       	mov	r0, r26
    62ce:	06 94       	lsr	r0
    62d0:	57 95       	ror	r21
    62d2:	47 95       	ror	r20
    62d4:	37 95       	ror	r19
    62d6:	27 95       	ror	r18
    62d8:	ba 95       	dec	r27
    62da:	c9 f7       	brne	.-14     	; 0x62ce <__ultoa_invert+0xa2>
    62dc:	62 0f       	add	r22, r18
    62de:	73 1f       	adc	r23, r19
    62e0:	84 1f       	adc	r24, r20
    62e2:	95 1f       	adc	r25, r21
    62e4:	a0 1d       	adc	r26, r0
    62e6:	08 95       	ret

000062e8 <__do_global_dtors>:
    62e8:	17 e0       	ldi	r17, 0x07	; 7
    62ea:	c6 e3       	ldi	r28, 0x36	; 54
    62ec:	d7 e0       	ldi	r29, 0x07	; 7
    62ee:	04 c0       	rjmp	.+8      	; 0x62f8 <__do_global_dtors+0x10>
    62f0:	fe 01       	movw	r30, r28
    62f2:	0e 94 48 29 	call	0x5290	; 0x5290 <__tablejump__>
    62f6:	22 96       	adiw	r28, 0x02	; 2
    62f8:	c8 33       	cpi	r28, 0x38	; 56
    62fa:	d1 07       	cpc	r29, r17
    62fc:	c9 f7       	brne	.-14     	; 0x62f0 <__do_global_dtors+0x8>
    62fe:	f8 94       	cli

00006300 <__stop_program>:
    6300:	ff cf       	rjmp	.-2      	; 0x6300 <__stop_program>
