
RoverMission.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000020a  00800100  000063ea  0000647e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000063ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000199  0080030a  0080030a  00006688  2**0
                  ALLOC
  3 .stab         00003b58  00000000  00000000  00006688  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ff3  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003a8  00000000  00000000  0000b1d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000120f  00000000  00000000  0000b57b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000854b  00000000  00000000  0000c78a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002cba  00000000  00000000  00014cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005834  00000000  00000000  0001798f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c90  00000000  00000000  0001d1c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001ae4  00000000  00000000  0001de54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004f1d  00000000  00000000  0001f938  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000578  00000000  00000000  00024855  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__dtors_end>
       4:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
       8:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
       c:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      10:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      14:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      18:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      1c:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      20:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      24:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      28:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      2c:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      30:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      34:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      38:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      3c:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      40:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <__vector_16>
      44:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      48:	0c 94 f3 0e 	jmp	0x1de6	; 0x1de6 <__vector_18>
      4c:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      50:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      54:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      58:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      5c:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      60:	0c 94 14 21 	jmp	0x4228	; 0x4228 <__vector_24>
      64:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      68:	b6 21       	and	r27, r6
      6a:	64 21       	and	r22, r4
      6c:	64 21       	and	r22, r4
      6e:	64 21       	and	r22, r4
      70:	64 21       	and	r22, r4
      72:	64 21       	and	r22, r4
      74:	64 21       	and	r22, r4
      76:	64 21       	and	r22, r4
      78:	c0 21       	and	r28, r0
      7a:	64 21       	and	r22, r4
      7c:	64 21       	and	r22, r4
      7e:	64 21       	and	r22, r4
      80:	64 21       	and	r22, r4
      82:	64 21       	and	r22, r4
      84:	64 21       	and	r22, r4
      86:	64 21       	and	r22, r4
      88:	c0 21       	and	r28, r0
      8a:	64 21       	and	r22, r4
      8c:	64 21       	and	r22, r4
      8e:	64 21       	and	r22, r4
      90:	64 21       	and	r22, r4
      92:	64 21       	and	r22, r4
      94:	64 21       	and	r22, r4
      96:	64 21       	and	r22, r4
      98:	c8 21       	and	r28, r8
      9a:	64 21       	and	r22, r4
      9c:	64 21       	and	r22, r4
      9e:	64 21       	and	r22, r4
      a0:	64 21       	and	r22, r4
      a2:	64 21       	and	r22, r4
      a4:	64 21       	and	r22, r4
      a6:	64 21       	and	r22, r4
      a8:	d7 21       	and	r29, r7
      aa:	64 21       	and	r22, r4
      ac:	64 21       	and	r22, r4
      ae:	64 21       	and	r22, r4
      b0:	64 21       	and	r22, r4
      b2:	64 21       	and	r22, r4
      b4:	64 21       	and	r22, r4
      b6:	64 21       	and	r22, r4
      b8:	c8 21       	and	r28, r8
      ba:	64 21       	and	r22, r4
      bc:	64 21       	and	r22, r4
      be:	64 21       	and	r22, r4
      c0:	64 21       	and	r22, r4
      c2:	64 21       	and	r22, r4
      c4:	64 21       	and	r22, r4
      c6:	64 21       	and	r22, r4
      c8:	02 22       	and	r0, r18
      ca:	64 21       	and	r22, r4
      cc:	64 21       	and	r22, r4
      ce:	64 21       	and	r22, r4
      d0:	64 21       	and	r22, r4
      d2:	64 21       	and	r22, r4
      d4:	64 21       	and	r22, r4
      d6:	64 21       	and	r22, r4
      d8:	0d 22       	and	r0, r29
      da:	64 21       	and	r22, r4
      dc:	64 21       	and	r22, r4
      de:	64 21       	and	r22, r4
      e0:	64 21       	and	r22, r4
      e2:	64 21       	and	r22, r4
      e4:	64 21       	and	r22, r4
      e6:	64 21       	and	r22, r4
      e8:	8a 21       	and	r24, r10
      ea:	64 21       	and	r22, r4
      ec:	64 21       	and	r22, r4
      ee:	64 21       	and	r22, r4
      f0:	64 21       	and	r22, r4
      f2:	64 21       	and	r22, r4
      f4:	64 21       	and	r22, r4
      f6:	64 21       	and	r22, r4
      f8:	9d 21       	and	r25, r13
      fa:	64 21       	and	r22, r4
      fc:	64 21       	and	r22, r4
      fe:	64 21       	and	r22, r4
     100:	64 21       	and	r22, r4
     102:	64 21       	and	r22, r4
     104:	64 21       	and	r22, r4
     106:	64 21       	and	r22, r4
     108:	7e 21       	and	r23, r14
     10a:	64 21       	and	r22, r4
     10c:	64 21       	and	r22, r4
     10e:	64 21       	and	r22, r4
     110:	64 21       	and	r22, r4
     112:	64 21       	and	r22, r4
     114:	64 21       	and	r22, r4
     116:	64 21       	and	r22, r4
     118:	91 21       	and	r25, r1
     11a:	64 21       	and	r22, r4
     11c:	64 21       	and	r22, r4
     11e:	64 21       	and	r22, r4
     120:	64 21       	and	r22, r4
     122:	64 21       	and	r22, r4
     124:	64 21       	and	r22, r4
     126:	64 21       	and	r22, r4
     128:	ad 21       	and	r26, r13
     12a:	64 21       	and	r22, r4
     12c:	64 21       	and	r22, r4
     12e:	64 21       	and	r22, r4
     130:	64 21       	and	r22, r4
     132:	64 21       	and	r22, r4
     134:	64 21       	and	r22, r4
     136:	64 21       	and	r22, r4
     138:	ad 21       	and	r26, r13
     13a:	64 21       	and	r22, r4
     13c:	64 21       	and	r22, r4
     13e:	64 21       	and	r22, r4
     140:	64 21       	and	r22, r4
     142:	64 21       	and	r22, r4
     144:	64 21       	and	r22, r4
     146:	64 21       	and	r22, r4
     148:	ad 21       	and	r26, r13
     14a:	64 21       	and	r22, r4
     14c:	64 21       	and	r22, r4
     14e:	64 21       	and	r22, r4
     150:	64 21       	and	r22, r4
     152:	64 21       	and	r22, r4
     154:	64 21       	and	r22, r4
     156:	64 21       	and	r22, r4
     158:	ad 21       	and	r26, r13
     15a:	64 21       	and	r22, r4
     15c:	64 21       	and	r22, r4
     15e:	64 21       	and	r22, r4
     160:	64 21       	and	r22, r4
     162:	64 21       	and	r22, r4
     164:	64 21       	and	r22, r4
     166:	64 21       	and	r22, r4
     168:	75 21       	and	r23, r5
     16a:	64 21       	and	r22, r4
     16c:	64 21       	and	r22, r4
     16e:	64 21       	and	r22, r4
     170:	64 21       	and	r22, r4
     172:	64 21       	and	r22, r4
     174:	64 21       	and	r22, r4
     176:	64 21       	and	r22, r4
     178:	7a 21       	and	r23, r10
     17a:	64 21       	and	r22, r4
     17c:	64 21       	and	r22, r4
     17e:	64 21       	and	r22, r4
     180:	64 21       	and	r22, r4
     182:	64 21       	and	r22, r4
     184:	64 21       	and	r22, r4
     186:	64 21       	and	r22, r4
     188:	75 21       	and	r23, r5
     18a:	64 21       	and	r22, r4
     18c:	64 21       	and	r22, r4
     18e:	64 21       	and	r22, r4
     190:	64 21       	and	r22, r4
     192:	64 21       	and	r22, r4
     194:	64 21       	and	r22, r4
     196:	64 21       	and	r22, r4
     198:	7a 21       	and	r23, r10
     19a:	64 21       	and	r22, r4
     19c:	64 21       	and	r22, r4
     19e:	64 21       	and	r22, r4
     1a0:	64 21       	and	r22, r4
     1a2:	64 21       	and	r22, r4
     1a4:	64 21       	and	r22, r4
     1a6:	64 21       	and	r22, r4
     1a8:	e2 21       	and	r30, r2
     1aa:	64 21       	and	r22, r4
     1ac:	64 21       	and	r22, r4
     1ae:	64 21       	and	r22, r4
     1b0:	64 21       	and	r22, r4
     1b2:	64 21       	and	r22, r4
     1b4:	64 21       	and	r22, r4
     1b6:	64 21       	and	r22, r4
     1b8:	3a 21       	and	r19, r10
     1ba:	64 21       	and	r22, r4
     1bc:	64 21       	and	r22, r4
     1be:	64 21       	and	r22, r4
     1c0:	64 21       	and	r22, r4
     1c2:	64 21       	and	r22, r4
     1c4:	64 21       	and	r22, r4
     1c6:	64 21       	and	r22, r4
     1c8:	3a 21       	and	r19, r10
     1ca:	64 21       	and	r22, r4
     1cc:	64 21       	and	r22, r4
     1ce:	64 21       	and	r22, r4
     1d0:	64 21       	and	r22, r4
     1d2:	64 21       	and	r22, r4
     1d4:	64 21       	and	r22, r4
     1d6:	64 21       	and	r22, r4
     1d8:	4f 21       	and	r20, r15
     1da:	64 21       	and	r22, r4
     1dc:	64 21       	and	r22, r4
     1de:	64 21       	and	r22, r4
     1e0:	64 21       	and	r22, r4
     1e2:	64 21       	and	r22, r4
     1e4:	64 21       	and	r22, r4
     1e6:	64 21       	and	r22, r4
     1e8:	a7 21       	and	r26, r7
     1ea:	64 21       	and	r22, r4
     1ec:	64 21       	and	r22, r4
     1ee:	64 21       	and	r22, r4
     1f0:	64 21       	and	r22, r4
     1f2:	64 21       	and	r22, r4
     1f4:	64 21       	and	r22, r4
     1f6:	64 21       	and	r22, r4
     1f8:	a7 21       	and	r26, r7
     1fa:	07 2c       	mov	r0, r7
     1fc:	7a a5       	ldd	r23, Y+42	; 0x2a
     1fe:	ba 6c       	ori	r27, 0xCA	; 202
     200:	c5 90       	lpm	r12, Z+
     202:	da 3b       	cpi	r29, 0xBA	; 186
     204:	93 65       	ori	r25, 0x53	; 83
     206:	fc 8b       	std	Y+20, r31	; 0x14
     208:	bc 53       	subi	r27, 0x3C	; 60
     20a:	f8 10       	cpse	r15, r8
     20c:	fd 3c       	cpi	r31, 0xCD	; 205
     20e:	56 92       	.word	0x9256	; ????
     210:	83 4d       	sbci	r24, 0xD3	; 211
     212:	bd 87       	std	Y+13, r27	; 0x0d
     214:	9d 3a       	cpi	r25, 0xAD	; 173
     216:	b6 3d       	cpi	r27, 0xD6	; 214
     218:	cb c9       	rjmp	.-3178   	; 0xfffff5b0 <__eeprom_end+0xff7ef5b0>
     21a:	bf 5b       	subi	r27, 0xBF	; 191
     21c:	be 73       	andi	r27, 0x3E	; 62
     21e:	da 0f       	add	r29, r26
     220:	c9 3f       	cpi	r28, 0xF9	; 249
     222:	05 a8       	ldd	r0, Z+53	; 0x35
     224:	4c cd       	rjmp	.-1384   	; 0xfffffcbe <__eeprom_end+0xff7efcbe>
     226:	b2 d4       	rcall	.+2404   	; 0xb8c <_ZN14HMC6352compass10getHeadingEv+0x5a>
     228:	4e b9       	out	0x0e, r20	; 14
     22a:	38 36       	cpi	r19, 0x68	; 104
     22c:	a9 02       	muls	r26, r25
     22e:	0c 50       	subi	r16, 0x0C	; 12
     230:	b9 91       	ld	r27, Y+
     232:	86 88       	ldd	r8, Z+22	; 0x16
     234:	08 3c       	cpi	r16, 0xC8	; 200
     236:	a6 aa       	std	Z+54, r10	; 0x36
     238:	aa 2a       	or	r10, r26
     23a:	be 00       	.word	0x00be	; ????
     23c:	00 00       	nop
     23e:	80 3f       	cpi	r24, 0xF0	; 240

00000240 <_ZL17medium_range_data>:
     240:	4b 4a 4a 49 49 48 48 47 47 46 46 45 44 44 44 43     KJJIIHHGGFFEDDDC
     250:	43 42 42 41 41 40 40 3f 3f 3f 3e 3e 3d 3d 3d 3c     CBBAA@@???>>===<
     260:	3c 3b 3b 3b 3a 3a 3a 39 39 39 38 38 38 37 37 37     <;;;:::999888777
     270:	36 36 36 35 35 35 34 34 34 34 33 33 33 32 32 32     6665554444333222
     280:	32 31 31 31 31 30 30 30 30 2f 2f 2f 2f 2e 2e 2e     211110000////...
     290:	2e 2e 2d 2d 2d 2d 2c 2c 2c 2c 2c 2b 2b 2b 2b 2b     ..----,,,,,+++++
     2a0:	2a 2a 2a 2a 2a 2a 29 29 29 29 29 28 28 28 28 28     ******)))))(((((
     2b0:	28 27 27 27 27 27 27 26 26 26 26 26 26 26 25 25     (''''''&&&&&&&%%
     2c0:	25 25 25 25 25 24 24 24 24 24 24 24 23 23 23 23     %%%%%$$$$$$$####
     2d0:	23 23 23 23 22 22 22 22 22 22 22 22 21 21 21 21     ####""""""""!!!!
     2e0:	21 21 21 21 21 20 20 20 20 20 20 20 20 20 1f 1f     !!!!!         ..
     2f0:	1f 1f 1f 1f 1f 1f 1f 1f 1e 1e 1e 1e 1e 1e 1e 1e     ................
     300:	1e 1e 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1c 1c 1c     ................
     310:	1c 1c 1c 1c 1c 1c 1c 1c 1c 1b 1b 1b 1b 1b 1b 1b     ................
     320:	1b 1b 1b 1b 1b 1b 1a 1a 1a 1a 1a 1a 1a 1a 1a 1a     ................
     330:	1a 1a 1a 1a 19 19 19 19 19 19 19 19 19 19 19 19     ................
     340:	19 19 19 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
     350:	18 18 18 18 17 17 17 17 17 17 17 17 17 17 17 17     ................
     360:	17 17 17 17 17 16 16 16 16 16 16 16 16 16 16 16     ................
     370:	16 16 16 16 16 16 16 16 16 15 15 15 15 15 15 15     ................
     380:	15 15 15 15 15 15 15 15 15 15 15 15 15 15 14 14     ................
     390:	14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14     ................
     3a0:	14 14 14 14 14 14 13 13 13 13 13 13 13 13 13 13     ................
     3b0:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
     3c0:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
     3d0:	12 12 12 12 12 12 12 12 12 12 12 12 12 11 11 11     ................
     3e0:	11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11     ................
     3f0:	11 11 11 11 11 11 11 11 11 11 11 11 11 11 10 10     ................
     400:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
     410:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
     420:	10 10 10 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     430:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     440:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0e 0e 0e     ................
     450:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
     460:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
     470:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0d 0d 0d     ................
     480:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     490:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     4a0:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     4b0:	0d 0d 0d 0d 0d 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
     4c0:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
     4d0:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
     4e0:	0c 0c 0c 0c 0c 0a                                   ......

000004e6 <_ZL15long_range_data>:
     4e6:	e6 db d9 d7 d5 d3 d2 d0 ce cd cb c9 c8 c6 c5 c3     ................
     4f6:	c2 c0 bf be bc bb b9 b8 b7 b6 b4 b3 b2 b1 af ae     ................
     506:	ad ac ab aa a8 a7 a6 a5 a4 a3 a2 a1 a0 9f 9e 9d     ................
     516:	9c 9b 9a 99 98 98 97 96 95 94 93 92 92 91 90 8f     ................
     526:	8e 8d 8d 8c 8b 8a 8a 89 88 88 87 86 85 85 84 83     ................
     536:	83 82 81 81 80 7f 7f 7e 7e 7d 7c 7c 7b 7b 7a 79     .......~~}||{{zy
     546:	79 78 78 77 77 76 76 75 74 74 73 73 72 72 71 71     yxxwwvvuttssrrqq
     556:	70 70 6f 6f 6e 6e 6d 6d 6d 6c 6c 6b 6b 6a 6a 69     ppoonnmmmllkkjji
     566:	69 69 68 68 67 67 66 66 66 65 65 64 64 64 63 63     iihhggfffeedddcc
     576:	63 62 62 61 61 61 60 60 60 5f 5f 5f 5e 5e 5d 5d     cbbaaa```___^^]]
     586:	5d 5c 5c 5c 5b 5b 5b 5b 5a 5a 5a 59 59 59 58 58     ]\\\[[[[ZZZYYYXX
     596:	58 57 57 57 57 56 56 56 55 55 55 55 54 54 54 53     XWWWWVVVUUUUTTTS
     5a6:	53 53 53 52 52 52 52 51 51 51 51 50 50 50 50 4f     SSSRRRRQQQQPPPPO
     5b6:	4f 4f 4f 4e 4e 4e 4e 4d 4d 4d 4d 4c 4c 4c 4c 4c     OOONNNNMMMMLLLLL
     5c6:	4b 4b 4b 4b 4a 4a 4a 4a 4a 49 49 49 49 49 48 48     KKKKJJJJJIIIIIHH
     5d6:	48 48 48 47 47 47 47 47 46 46 46 46 46 45 45 45     HHHGGGGGFFFFFEEE
     5e6:	45 45 44 44 44 44 44 44 43 43 43 43 43 43 42 42     EEDDDDDDCCCCCCBB
     5f6:	42 42 42 41 41 41 41 41 41 41 40 40 40 40 40 40     BBBAAAAAAA@@@@@@
     606:	3f 3f 3f 3f 3f 3f 3e 3e 3e 3e 3e 3e 3e 3d 3d 3d     ??????>>>>>>>===
     616:	3d 3d 3d 3d 3c 3c 3c 3c 3c 3c 3c 3b 3b 3b 3b 3b     ====<<<<<<<;;;;;
     626:	3b 3b 3a 3a 3a 3a 3a 3a 3a 3a 39 39 39 39 39 39     ;;::::::::999999
     636:	39 39 38 38 38 38 38 38 38 38 37 37 37 37 37 37     9988888888777777
     646:	37 37 36 36 36 36 36 36 36 36 36 35 35 35 35 35     7766666666655555
     656:	35 35 35 35 34 34 34 34 34 34 34 34 34 34 33 33     5555444444444433
     666:	33 33 33 33 33 33 33 32 32                          333333322

0000066f <port_to_mode_PGM>:
     66f:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000679 <port_to_output_PGM>:
     679:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000683 <port_to_input_PGM>:
     683:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000068d <digital_pin_to_port_PGM>:
     68d:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     69d:	03 03 03 03                                         ....

000006a1 <digital_pin_to_bit_mask_PGM>:
     6a1:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     6b1:	04 08 10 20                                         ... 

000006b5 <digital_pin_to_timer_PGM>:
     6b5:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     6c5:	00 00 00 00 00                                      .....

000006ca <__ctors_start>:
     6ca:	3c 05       	cpc	r19, r12
     6cc:	f7 09       	sbc	r31, r7
     6ce:	86 10       	cpse	r8, r6

000006d0 <__ctors_end>:
     6d0:	41 05       	cpc	r20, r1

000006d2 <__dtors_end>:
     6d2:	11 24       	eor	r1, r1
     6d4:	1f be       	out	0x3f, r1	; 63
     6d6:	cf ef       	ldi	r28, 0xFF	; 255
     6d8:	d8 e0       	ldi	r29, 0x08	; 8
     6da:	de bf       	out	0x3e, r29	; 62
     6dc:	cd bf       	out	0x3d, r28	; 61

000006de <__do_copy_data>:
     6de:	13 e0       	ldi	r17, 0x03	; 3
     6e0:	a0 e0       	ldi	r26, 0x00	; 0
     6e2:	b1 e0       	ldi	r27, 0x01	; 1
     6e4:	ea ee       	ldi	r30, 0xEA	; 234
     6e6:	f3 e6       	ldi	r31, 0x63	; 99
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <__do_copy_data+0x10>
     6ea:	05 90       	lpm	r0, Z+
     6ec:	0d 92       	st	X+, r0
     6ee:	aa 30       	cpi	r26, 0x0A	; 10
     6f0:	b1 07       	cpc	r27, r17
     6f2:	d9 f7       	brne	.-10     	; 0x6ea <__do_copy_data+0xc>

000006f4 <__do_clear_bss>:
     6f4:	14 e0       	ldi	r17, 0x04	; 4
     6f6:	aa e0       	ldi	r26, 0x0A	; 10
     6f8:	b3 e0       	ldi	r27, 0x03	; 3
     6fa:	01 c0       	rjmp	.+2      	; 0x6fe <.do_clear_bss_start>

000006fc <.do_clear_bss_loop>:
     6fc:	1d 92       	st	X+, r1

000006fe <.do_clear_bss_start>:
     6fe:	a3 3a       	cpi	r26, 0xA3	; 163
     700:	b1 07       	cpc	r27, r17
     702:	e1 f7       	brne	.-8      	; 0x6fc <.do_clear_bss_loop>

00000704 <__do_global_ctors>:
     704:	16 e0       	ldi	r17, 0x06	; 6
     706:	c0 ed       	ldi	r28, 0xD0	; 208
     708:	d6 e0       	ldi	r29, 0x06	; 6
     70a:	04 c0       	rjmp	.+8      	; 0x714 <__do_global_ctors+0x10>
     70c:	22 97       	sbiw	r28, 0x02	; 2
     70e:	fe 01       	movw	r30, r28
     710:	0e 94 bc 29 	call	0x5378	; 0x5378 <__tablejump__>
     714:	ca 3c       	cpi	r28, 0xCA	; 202
     716:	d1 07       	cpc	r29, r17
     718:	c9 f7       	brne	.-14     	; 0x70c <__do_global_ctors+0x8>
     71a:	0e 94 93 03 	call	0x726	; 0x726 <main>
     71e:	0c 94 e8 31 	jmp	0x63d0	; 0x63d0 <__do_global_dtors>

00000722 <__bad_interrupt>:
     722:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000726 <main>:
     726:	6f 92       	push	r6
     728:	7f 92       	push	r7
     72a:	8f 92       	push	r8
     72c:	9f 92       	push	r9
     72e:	af 92       	push	r10
     730:	bf 92       	push	r11
     732:	cf 92       	push	r12
     734:	df 92       	push	r13
     736:	ef 92       	push	r14
     738:	ff 92       	push	r15
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	df 93       	push	r29
     740:	cf 93       	push	r28
     742:	00 d0       	rcall	.+0      	; 0x744 <main+0x1e>
     744:	00 d0       	rcall	.+0      	; 0x746 <main+0x20>
     746:	cd b7       	in	r28, 0x3d	; 61
     748:	de b7       	in	r29, 0x3e	; 62
     74a:	0e 94 6e 15 	call	0x2adc	; 0x2adc <init>
     74e:	8c ec       	ldi	r24, 0xCC	; 204
     750:	93 e0       	ldi	r25, 0x03	; 3
     752:	40 e0       	ldi	r20, 0x00	; 0
     754:	51 ee       	ldi	r21, 0xE1	; 225
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <_ZN14HardwareSerial5beginEl>
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <analogReference>
     764:	8a e0       	ldi	r24, 0x0A	; 10
     766:	93 e0       	ldi	r25, 0x03	; 3
     768:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN14HMC6352compass10getHeadingEv>
     76c:	8c 01       	movw	r16, r24
     76e:	8c ec       	ldi	r24, 0xCC	; 204
     770:	93 e0       	ldi	r25, 0x03	; 3
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	71 e0       	ldi	r23, 0x01	; 1
     776:	0e 94 93 12 	call	0x2526	; 0x2526 <_ZN5Print7printlnEPKc>
     77a:	20 91 85 01 	lds	r18, 0x0185
     77e:	30 91 86 01 	lds	r19, 0x0186
     782:	c9 01       	movw	r24, r18
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	43 e0       	ldi	r20, 0x03	; 3
     78a:	22 0f       	add	r18, r18
     78c:	33 1f       	adc	r19, r19
     78e:	4a 95       	dec	r20
     790:	e1 f7       	brne	.-8      	; 0x78a <main+0x64>
     792:	82 0f       	add	r24, r18
     794:	93 1f       	adc	r25, r19
     796:	80 0f       	add	r24, r16
     798:	91 1f       	adc	r25, r17
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	0e 94 98 07 	call	0xf30	; 0xf30 <_Z13adjustHeadingjh>
     7a0:	80 91 7f 01 	lds	r24, 0x017F
     7a4:	90 91 80 01 	lds	r25, 0x0180
     7a8:	63 e5       	ldi	r22, 0x53	; 83
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	0e 94 3a 29 	call	0x5274	; 0x5274 <__udivmodhi4>
     7b0:	80 e1       	ldi	r24, 0x10	; 16
     7b2:	c8 2e       	mov	r12, r24
     7b4:	87 e2       	ldi	r24, 0x27	; 39
     7b6:	d8 2e       	mov	r13, r24
     7b8:	6c 9d       	mul	r22, r12
     7ba:	c0 01       	movw	r24, r0
     7bc:	6d 9d       	mul	r22, r13
     7be:	90 0d       	add	r25, r0
     7c0:	7c 9d       	mul	r23, r12
     7c2:	90 0d       	add	r25, r0
     7c4:	11 24       	eor	r1, r1
     7c6:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z10goStraightj>
     7ca:	03 e0       	ldi	r16, 0x03	; 3
     7cc:	e0 2e       	mov	r14, r16
     7ce:	f1 2c       	mov	r15, r1
     7d0:	ec 0e       	add	r14, r28
     7d2:	fd 1e       	adc	r15, r29
     7d4:	8f e7       	ldi	r24, 0x7F	; 127
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	65 e8       	ldi	r22, 0x85	; 133
     7da:	71 e0       	ldi	r23, 0x01	; 1
     7dc:	42 e0       	ldi	r20, 0x02	; 2
     7de:	5e 01       	movw	r10, r28
     7e0:	08 94       	sec
     7e2:	a1 1c       	adc	r10, r1
     7e4:	b1 1c       	adc	r11, r1
     7e6:	95 01       	movw	r18, r10
     7e8:	87 01       	movw	r16, r14
     7ea:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <_Z23findPlaqueDistanceAnglePjS_hRjS0_>
     7ee:	8c ec       	ldi	r24, 0xCC	; 204
     7f0:	93 e0       	ldi	r25, 0x03	; 3
     7f2:	6b e0       	ldi	r22, 0x0B	; 11
     7f4:	71 e0       	ldi	r23, 0x01	; 1
     7f6:	0e 94 ff 10 	call	0x21fe	; 0x21fe <_ZN5Print5printEPKc>
     7fa:	6b 81       	ldd	r22, Y+3	; 0x03
     7fc:	7c 81       	ldd	r23, Y+4	; 0x04
     7fe:	8c ec       	ldi	r24, 0xCC	; 204
     800:	93 e0       	ldi	r25, 0x03	; 3
     802:	4a e0       	ldi	r20, 0x0A	; 10
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	0e 94 74 12 	call	0x24e8	; 0x24e8 <_ZN5Print7printlnEji>
     80a:	8c ec       	ldi	r24, 0xCC	; 204
     80c:	93 e0       	ldi	r25, 0x03	; 3
     80e:	68 e1       	ldi	r22, 0x18	; 24
     810:	71 e0       	ldi	r23, 0x01	; 1
     812:	0e 94 ff 10 	call	0x21fe	; 0x21fe <_ZN5Print5printEPKc>
     816:	69 81       	ldd	r22, Y+1	; 0x01
     818:	7a 81       	ldd	r23, Y+2	; 0x02
     81a:	8c ec       	ldi	r24, 0xCC	; 204
     81c:	93 e0       	ldi	r25, 0x03	; 3
     81e:	4a e0       	ldi	r20, 0x0A	; 10
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	0e 94 74 12 	call	0x24e8	; 0x24e8 <_ZN5Print7printlnEji>
     826:	2b 81       	ldd	r18, Y+3	; 0x03
     828:	3c 81       	ldd	r19, Y+4	; 0x04
     82a:	c9 01       	movw	r24, r18
     82c:	88 0f       	add	r24, r24
     82e:	99 1f       	adc	r25, r25
     830:	b3 e0       	ldi	r27, 0x03	; 3
     832:	22 0f       	add	r18, r18
     834:	33 1f       	adc	r19, r19
     836:	ba 95       	dec	r27
     838:	e1 f7       	brne	.-8      	; 0x832 <main+0x10c>
     83a:	82 0f       	add	r24, r18
     83c:	93 1f       	adc	r25, r19
     83e:	a8 e0       	ldi	r26, 0x08	; 8
     840:	8a 2e       	mov	r8, r26
     842:	a7 e0       	ldi	r26, 0x07	; 7
     844:	9a 2e       	mov	r9, r26
     846:	94 01       	movw	r18, r8
     848:	28 1b       	sub	r18, r24
     84a:	39 0b       	sbc	r19, r25
     84c:	c9 01       	movw	r24, r18
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 98 07 	call	0xf30	; 0xf30 <_Z13adjustHeadingjh>
     854:	8c ec       	ldi	r24, 0xCC	; 204
     856:	93 e0       	ldi	r25, 0x03	; 3
     858:	68 e2       	ldi	r22, 0x28	; 40
     85a:	71 e0       	ldi	r23, 0x01	; 1
     85c:	0e 94 ff 10 	call	0x21fe	; 0x21fe <_ZN5Print5printEPKc>
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	9a 81       	ldd	r25, Y+2	; 0x02
     864:	63 e5       	ldi	r22, 0x53	; 83
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	0e 94 3a 29 	call	0x5274	; 0x5274 <__udivmodhi4>
     86c:	6c 9d       	mul	r22, r12
     86e:	80 01       	movw	r16, r0
     870:	6d 9d       	mul	r22, r13
     872:	10 0d       	add	r17, r0
     874:	7c 9d       	mul	r23, r12
     876:	10 0d       	add	r17, r0
     878:	11 24       	eor	r1, r1
     87a:	8c ec       	ldi	r24, 0xCC	; 204
     87c:	93 e0       	ldi	r25, 0x03	; 3
     87e:	b8 01       	movw	r22, r16
     880:	4a e0       	ldi	r20, 0x0A	; 10
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	0e 94 74 12 	call	0x24e8	; 0x24e8 <_ZN5Print7printlnEji>
     888:	c8 01       	movw	r24, r16
     88a:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z10goStraightj>
     88e:	80 91 87 01 	lds	r24, 0x0187
     892:	90 91 88 01 	lds	r25, 0x0188
     896:	2b 81       	ldd	r18, Y+3	; 0x03
     898:	3c 81       	ldd	r19, Y+4	; 0x04
     89a:	82 0f       	add	r24, r18
     89c:	93 1f       	adc	r25, r19
     89e:	8c 01       	movw	r16, r24
     8a0:	00 0f       	add	r16, r16
     8a2:	11 1f       	adc	r17, r17
     8a4:	e3 e0       	ldi	r30, 0x03	; 3
     8a6:	88 0f       	add	r24, r24
     8a8:	99 1f       	adc	r25, r25
     8aa:	ea 95       	dec	r30
     8ac:	e1 f7       	brne	.-8      	; 0x8a6 <main+0x180>
     8ae:	08 0f       	add	r16, r24
     8b0:	19 1f       	adc	r17, r25
     8b2:	8c ec       	ldi	r24, 0xCC	; 204
     8b4:	93 e0       	ldi	r25, 0x03	; 3
     8b6:	69 e3       	ldi	r22, 0x39	; 57
     8b8:	71 e0       	ldi	r23, 0x01	; 1
     8ba:	0e 94 ff 10 	call	0x21fe	; 0x21fe <_ZN5Print5printEPKc>
     8be:	8c ec       	ldi	r24, 0xCC	; 204
     8c0:	93 e0       	ldi	r25, 0x03	; 3
     8c2:	b8 01       	movw	r22, r16
     8c4:	4a e0       	ldi	r20, 0x0A	; 10
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	0e 94 74 12 	call	0x24e8	; 0x24e8 <_ZN5Print7printlnEji>
     8cc:	8a e0       	ldi	r24, 0x0A	; 10
     8ce:	93 e0       	ldi	r25, 0x03	; 3
     8d0:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN14HMC6352compass10getHeadingEv>
     8d4:	3c 01       	movw	r6, r24
     8d6:	80 0f       	add	r24, r16
     8d8:	91 1f       	adc	r25, r17
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	0e 94 98 07 	call	0xf30	; 0xf30 <_Z13adjustHeadingjh>
     8e0:	68 eb       	ldi	r22, 0xB8	; 184
     8e2:	7b e0       	ldi	r23, 0x0B	; 11
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 39 15 	call	0x2a72	; 0x2a72 <delay>
     8ec:	8c ec       	ldi	r24, 0xCC	; 204
     8ee:	93 e0       	ldi	r25, 0x03	; 3
     8f0:	69 e4       	ldi	r22, 0x49	; 73
     8f2:	71 e0       	ldi	r23, 0x01	; 1
     8f4:	0e 94 ff 10 	call	0x21fe	; 0x21fe <_ZN5Print5printEPKc>
     8f8:	8c ec       	ldi	r24, 0xCC	; 204
     8fa:	93 e0       	ldi	r25, 0x03	; 3
     8fc:	b3 01       	movw	r22, r6
     8fe:	4a e0       	ldi	r20, 0x0A	; 10
     900:	50 e0       	ldi	r21, 0x00	; 0
     902:	0e 94 74 12 	call	0x24e8	; 0x24e8 <_ZN5Print7printlnEji>
     906:	8a e0       	ldi	r24, 0x0A	; 10
     908:	93 e0       	ldi	r25, 0x03	; 3
     90a:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN14HMC6352compass10getHeadingEv>
     90e:	88 5f       	subi	r24, 0xF8	; 248
     910:	98 4f       	sbci	r25, 0xF8	; 248
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	0e 94 98 07 	call	0xf30	; 0xf30 <_Z13adjustHeadingjh>
     918:	68 eb       	ldi	r22, 0xB8	; 184
     91a:	7b e0       	ldi	r23, 0x0B	; 11
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 39 15 	call	0x2a72	; 0x2a72 <delay>
     924:	8f e7       	ldi	r24, 0x7F	; 127
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	65 e8       	ldi	r22, 0x85	; 133
     92a:	71 e0       	ldi	r23, 0x01	; 1
     92c:	43 e0       	ldi	r20, 0x03	; 3
     92e:	95 01       	movw	r18, r10
     930:	87 01       	movw	r16, r14
     932:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <_Z23findPlaqueDistanceAnglePjS_hRjS0_>
     936:	8c ec       	ldi	r24, 0xCC	; 204
     938:	93 e0       	ldi	r25, 0x03	; 3
     93a:	68 e5       	ldi	r22, 0x58	; 88
     93c:	71 e0       	ldi	r23, 0x01	; 1
     93e:	0e 94 ff 10 	call	0x21fe	; 0x21fe <_ZN5Print5printEPKc>
     942:	6b 81       	ldd	r22, Y+3	; 0x03
     944:	7c 81       	ldd	r23, Y+4	; 0x04
     946:	8c ec       	ldi	r24, 0xCC	; 204
     948:	93 e0       	ldi	r25, 0x03	; 3
     94a:	4a e0       	ldi	r20, 0x0A	; 10
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	0e 94 74 12 	call	0x24e8	; 0x24e8 <_ZN5Print7printlnEji>
     952:	8a e0       	ldi	r24, 0x0A	; 10
     954:	93 e0       	ldi	r25, 0x03	; 3
     956:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN14HMC6352compass10getHeadingEv>
     95a:	2b 81       	ldd	r18, Y+3	; 0x03
     95c:	3c 81       	ldd	r19, Y+4	; 0x04
     95e:	a9 01       	movw	r20, r18
     960:	44 0f       	add	r20, r20
     962:	55 1f       	adc	r21, r21
     964:	63 e0       	ldi	r22, 0x03	; 3
     966:	22 0f       	add	r18, r18
     968:	33 1f       	adc	r19, r19
     96a:	6a 95       	dec	r22
     96c:	e1 f7       	brne	.-8      	; 0x966 <__stack+0x67>
     96e:	42 0f       	add	r20, r18
     970:	53 1f       	adc	r21, r19
     972:	84 1a       	sub	r8, r20
     974:	95 0a       	sbc	r9, r21
     976:	88 0d       	add	r24, r8
     978:	99 1d       	adc	r25, r9
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	0e 94 98 07 	call	0xf30	; 0xf30 <_Z13adjustHeadingjh>
     980:	8c ec       	ldi	r24, 0xCC	; 204
     982:	93 e0       	ldi	r25, 0x03	; 3
     984:	6e e6       	ldi	r22, 0x6E	; 110
     986:	71 e0       	ldi	r23, 0x01	; 1
     988:	0e 94 ff 10 	call	0x21fe	; 0x21fe <_ZN5Print5printEPKc>
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	9a 81       	ldd	r25, Y+2	; 0x02
     990:	63 e5       	ldi	r22, 0x53	; 83
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	0e 94 3a 29 	call	0x5274	; 0x5274 <__udivmodhi4>
     998:	6c 9d       	mul	r22, r12
     99a:	80 01       	movw	r16, r0
     99c:	6d 9d       	mul	r22, r13
     99e:	10 0d       	add	r17, r0
     9a0:	7c 9d       	mul	r23, r12
     9a2:	10 0d       	add	r17, r0
     9a4:	11 24       	eor	r1, r1
     9a6:	8c ec       	ldi	r24, 0xCC	; 204
     9a8:	93 e0       	ldi	r25, 0x03	; 3
     9aa:	b8 01       	movw	r22, r16
     9ac:	4a e0       	ldi	r20, 0x0A	; 10
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	0e 94 74 12 	call	0x24e8	; 0x24e8 <_ZN5Print7printlnEji>
     9b4:	c8 01       	movw	r24, r16
     9b6:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z10goStraightj>
     9ba:	ff cf       	rjmp	.-2      	; 0x9ba <__stack+0xbb>

000009bc <T.11>:
     9bc:	81 30       	cpi	r24, 0x01	; 1
     9be:	91 05       	cpc	r25, r1
     9c0:	09 f0       	breq	.+2      	; 0x9c4 <T.11+0x8>
     9c2:	53 c0       	rjmp	.+166    	; 0xa6a <T.11+0xae>
     9c4:	8a e0       	ldi	r24, 0x0A	; 10
     9c6:	93 e0       	ldi	r25, 0x03	; 3
     9c8:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <_ZN14HMC6352compassC1Ev>
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	dc 01       	movw	r26, r24
     9d2:	80 93 0e 03 	sts	0x030E, r24
     9d6:	90 93 0f 03 	sts	0x030F, r25
     9da:	a0 93 10 03 	sts	0x0310, r26
     9de:	b0 93 11 03 	sts	0x0311, r27
     9e2:	80 93 12 03 	sts	0x0312, r24
     9e6:	90 93 13 03 	sts	0x0313, r25
     9ea:	a0 93 14 03 	sts	0x0314, r26
     9ee:	b0 93 15 03 	sts	0x0315, r27
     9f2:	86 e6       	ldi	r24, 0x66	; 102
     9f4:	96 e6       	ldi	r25, 0x66	; 102
     9f6:	a6 e6       	ldi	r26, 0x66	; 102
     9f8:	bf e3       	ldi	r27, 0x3F	; 63
     9fa:	80 93 26 03 	sts	0x0326, r24
     9fe:	90 93 27 03 	sts	0x0327, r25
     a02:	a0 93 28 03 	sts	0x0328, r26
     a06:	b0 93 29 03 	sts	0x0329, r27
     a0a:	8a e0       	ldi	r24, 0x0A	; 10
     a0c:	97 ed       	ldi	r25, 0xD7	; 215
     a0e:	a3 e2       	ldi	r26, 0x23	; 35
     a10:	bc e3       	ldi	r27, 0x3C	; 60
     a12:	80 93 2a 03 	sts	0x032A, r24
     a16:	90 93 2b 03 	sts	0x032B, r25
     a1a:	a0 93 2c 03 	sts	0x032C, r26
     a1e:	b0 93 2d 03 	sts	0x032D, r27
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	a0 e8       	ldi	r26, 0x80	; 128
     a28:	bf e3       	ldi	r27, 0x3F	; 63
     a2a:	80 93 2e 03 	sts	0x032E, r24
     a2e:	90 93 2f 03 	sts	0x032F, r25
     a32:	a0 93 30 03 	sts	0x0330, r26
     a36:	b0 93 31 03 	sts	0x0331, r27
     a3a:	83 e3       	ldi	r24, 0x33	; 51
     a3c:	93 e0       	ldi	r25, 0x03	; 3
     a3e:	63 e0       	ldi	r22, 0x03	; 3
     a40:	41 e0       	ldi	r20, 0x01	; 1
     a42:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <_ZN10AF_DCMotorC1Ehh>
     a46:	85 e3       	ldi	r24, 0x35	; 53
     a48:	93 e0       	ldi	r25, 0x03	; 3
     a4a:	64 e0       	ldi	r22, 0x04	; 4
     a4c:	41 e0       	ldi	r20, 0x01	; 1
     a4e:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <_ZN10AF_DCMotorC1Ehh>
     a52:	87 e3       	ldi	r24, 0x37	; 55
     a54:	93 e0       	ldi	r25, 0x03	; 3
     a56:	68 ec       	ldi	r22, 0xC8	; 200
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	41 e0       	ldi	r20, 0x01	; 1
     a5c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <_ZN10AF_StepperC1Ejh>
     a60:	83 e4       	ldi	r24, 0x43	; 67
     a62:	93 e0       	ldi	r25, 0x03	; 3
     a64:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <_ZN15CmissionconsoleC1Ev>
     a68:	08 95       	ret
     a6a:	00 97       	sbiw	r24, 0x00	; 0
     a6c:	21 f4       	brne	.+8      	; 0xa76 <T.11+0xba>
     a6e:	83 e4       	ldi	r24, 0x43	; 67
     a70:	93 e0       	ldi	r25, 0x03	; 3
     a72:	0e 94 f6 08 	call	0x11ec	; 0x11ec <_ZN15CmissionconsoleD1Ev>
     a76:	08 95       	ret

00000a78 <_GLOBAL__I_compass>:
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 de 04 	call	0x9bc	; 0x9bc <T.11>
     a80:	08 95       	ret

00000a82 <_GLOBAL__D_compass>:
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	0e 94 de 04 	call	0x9bc	; 0x9bc <T.11>
     a8a:	08 95       	ret

00000a8c <_ZN14HMC6352compass14getLastHeadingEv>:
     a8c:	fc 01       	movw	r30, r24
     a8e:	82 81       	ldd	r24, Z+2	; 0x02
     a90:	93 81       	ldd	r25, Z+3	; 0x03
     a92:	08 95       	ret

00000a94 <_ZN14HMC6352compass16enterCalibrationEv>:
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	ec 01       	movw	r28, r24
     aa2:	8c 01       	movw	r16, r24
     aa4:	69 81       	ldd	r22, Y+1	; 0x01
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	6e 7f       	andi	r22, 0xFE	; 254
     aaa:	70 70       	andi	r23, 0x00	; 0
     aac:	7e 01       	movw	r14, r28
     aae:	9f 2d       	mov	r25, r15
     ab0:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN7TwoWire17beginTransmissionEi>
     ab4:	ce 01       	movw	r24, r28
     ab6:	63 e4       	ldi	r22, 0x43	; 67
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN7TwoWire4sendEi>
     abe:	ce 01       	movw	r24, r28
     ac0:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <_ZN7TwoWire15endTransmissionEv>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	8d e0       	ldi	r24, 0x0D	; 13
     aca:	61 e0       	ldi	r22, 0x01	; 1
     acc:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
     ad0:	64 ef       	ldi	r22, 0xF4	; 244
     ad2:	71 e0       	ldi	r23, 0x01	; 1
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 39 15 	call	0x2a72	; 0x2a72 <delay>
     adc:	8d e0       	ldi	r24, 0x0D	; 13
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
     ae4:	64 ef       	ldi	r22, 0xF4	; 244
     ae6:	71 e0       	ldi	r23, 0x01	; 1
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 39 15 	call	0x2a72	; 0x2a72 <delay>
     af0:	08 94       	sec
     af2:	e1 1c       	adc	r14, r1
     af4:	f1 1c       	adc	r15, r1
     af6:	24 e1       	ldi	r18, 0x14	; 20
     af8:	e2 16       	cp	r14, r18
     afa:	f1 04       	cpc	r15, r1
     afc:	29 f7       	brne	.-54     	; 0xac8 <_ZN14HMC6352compass16enterCalibrationEv+0x34>
     afe:	69 81       	ldd	r22, Y+1	; 0x01
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	6e 7f       	andi	r22, 0xFE	; 254
     b04:	70 70       	andi	r23, 0x00	; 0
     b06:	c8 01       	movw	r24, r16
     b08:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN7TwoWire17beginTransmissionEi>
     b0c:	c8 01       	movw	r24, r16
     b0e:	65 e4       	ldi	r22, 0x45	; 69
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN7TwoWire4sendEi>
     b16:	c8 01       	movw	r24, r16
     b18:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <_ZN7TwoWire15endTransmissionEv>
     b1c:	8d e0       	ldi	r24, 0x0D	; 13
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	08 95       	ret

00000b32 <_ZN14HMC6352compass10getHeadingEv>:
     b32:	ef 92       	push	r14
     b34:	ff 92       	push	r15
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	ec 01       	movw	r28, r24
     b40:	8d e0       	ldi	r24, 0x0D	; 13
     b42:	61 e0       	ldi	r22, 0x01	; 1
     b44:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
     b48:	8e 01       	movw	r16, r28
     b4a:	ce 01       	movw	r24, r28
     b4c:	69 81       	ldd	r22, Y+1	; 0x01
     b4e:	0e 94 a3 13 	call	0x2746	; 0x2746 <_ZN7TwoWire17beginTransmissionEh>
     b52:	ce 01       	movw	r24, r28
     b54:	61 e4       	ldi	r22, 0x41	; 65
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN7TwoWire4sendEi>
     b5c:	ce 01       	movw	r24, r28
     b5e:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <_ZN7TwoWire15endTransmissionEv>
     b62:	66 e0       	ldi	r22, 0x06	; 6
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 39 15 	call	0x2a72	; 0x2a72 <delay>
     b6e:	69 81       	ldd	r22, Y+1	; 0x01
     b70:	ce 01       	movw	r24, r28
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	42 e0       	ldi	r20, 0x02	; 2
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	0e 94 97 14 	call	0x292e	; 0x292e <_ZN7TwoWire11requestFromEii>
     b7c:	c8 01       	movw	r24, r16
     b7e:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN7TwoWire9availableEv>
     b82:	88 23       	and	r24, r24
     b84:	d9 f3       	breq	.-10     	; 0xb7c <_ZN14HMC6352compass10getHeadingEv+0x4a>
     b86:	c8 01       	movw	r24, r16
     b88:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN7TwoWire7receiveEv>
     b8c:	f8 2e       	mov	r15, r24
     b8e:	c8 01       	movw	r24, r16
     b90:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN7TwoWire9availableEv>
     b94:	88 23       	and	r24, r24
     b96:	d9 f3       	breq	.-10     	; 0xb8e <_ZN14HMC6352compass10getHeadingEv+0x5c>
     b98:	c8 01       	movw	r24, r16
     b9a:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN7TwoWire7receiveEv>
     b9e:	3f 2d       	mov	r19, r15
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	08 2f       	mov	r16, r24
     ba4:	10 e0       	ldi	r17, 0x00	; 0
     ba6:	02 2b       	or	r16, r18
     ba8:	13 2b       	or	r17, r19
     baa:	1b 83       	std	Y+3, r17	; 0x03
     bac:	0a 83       	std	Y+2, r16	; 0x02
     bae:	8d e0       	ldi	r24, 0x0D	; 13
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
     bb6:	c8 01       	movw	r24, r16
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	08 95       	ret

00000bc6 <_ZN14HMC6352compassC1Ev>:
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	ec 01       	movw	r28, r24
     bd0:	7e 01       	movw	r14, r28
     bd2:	9f 2d       	mov	r25, r15
     bd4:	0e 94 a2 13 	call	0x2744	; 0x2744 <_ZN7TwoWireC1Ev>
     bd8:	81 e2       	ldi	r24, 0x21	; 33
     bda:	89 83       	std	Y+1, r24	; 0x01
     bdc:	8d e0       	ldi	r24, 0x0D	; 13
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
     be4:	8d e0       	ldi	r24, 0x0D	; 13
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
     bec:	ce 01       	movw	r24, r28
     bee:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN7TwoWire5beginEv>
     bf2:	8d e0       	ldi	r24, 0x0D	; 13
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	ff 90       	pop	r15
     c00:	ef 90       	pop	r14
     c02:	08 95       	ret

00000c04 <_ZN14HMC6352compassC2Ev>:
     c04:	ef 92       	push	r14
     c06:	ff 92       	push	r15
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	ec 01       	movw	r28, r24
     c0e:	7e 01       	movw	r14, r28
     c10:	9f 2d       	mov	r25, r15
     c12:	0e 94 a2 13 	call	0x2744	; 0x2744 <_ZN7TwoWireC1Ev>
     c16:	81 e2       	ldi	r24, 0x21	; 33
     c18:	89 83       	std	Y+1, r24	; 0x01
     c1a:	8d e0       	ldi	r24, 0x0D	; 13
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
     c22:	8d e0       	ldi	r24, 0x0D	; 13
     c24:	61 e0       	ldi	r22, 0x01	; 1
     c26:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
     c2a:	ce 01       	movw	r24, r28
     c2c:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN7TwoWire5beginEv>
     c30:	8d e0       	ldi	r24, 0x0D	; 13
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	ff 90       	pop	r15
     c3e:	ef 90       	pop	r14
     c40:	08 95       	ret

00000c42 <_Z11analyzeRoomPjS_S_>:
     c42:	cf 92       	push	r12
     c44:	df 92       	push	r13
     c46:	ef 92       	push	r14
     c48:	ff 92       	push	r15
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	8a 01       	movw	r16, r20
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	f8 01       	movw	r30, r16
     c5a:	e2 0f       	add	r30, r18
     c5c:	f3 1f       	adc	r31, r19
     c5e:	11 82       	std	Z+1, r1	; 0x01
     c60:	10 82       	st	Z, r1
     c62:	2e 5f       	subi	r18, 0xFE	; 254
     c64:	3f 4f       	sbci	r19, 0xFF	; 255
     c66:	2a 30       	cpi	r18, 0x0A	; 10
     c68:	31 05       	cpc	r19, r1
     c6a:	b1 f7       	brne	.-20     	; 0xc58 <_Z11analyzeRoomPjS_S_+0x16>
     c6c:	cc 24       	eor	r12, r12
     c6e:	dd 24       	eor	r13, r13
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	e0 e0       	ldi	r30, 0x00	; 0
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	50 e0       	ldi	r21, 0x00	; 0
     c7a:	ec 01       	movw	r28, r24
     c7c:	c2 0f       	add	r28, r18
     c7e:	d3 1f       	adc	r29, r19
     c80:	7b 01       	movw	r14, r22
     c82:	e2 0e       	add	r14, r18
     c84:	f3 1e       	adc	r15, r19
     c86:	09 90       	ld	r0, Y+
     c88:	d8 81       	ld	r29, Y
     c8a:	c0 2d       	mov	r28, r0
     c8c:	d7 01       	movw	r26, r14
     c8e:	ed 90       	ld	r14, X+
     c90:	fc 90       	ld	r15, X
     c92:	11 97       	sbiw	r26, 0x01	; 1
     c94:	ce 19       	sub	r28, r14
     c96:	df 09       	sbc	r29, r15
     c98:	c5 36       	cpi	r28, 0x65	; 101
     c9a:	d1 05       	cpc	r29, r1
     c9c:	10 f4       	brcc	.+4      	; 0xca2 <_Z11analyzeRoomPjS_S_+0x60>
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	0e c0       	rjmp	.+28     	; 0xcbe <_Z11analyzeRoomPjS_S_+0x7c>
     ca2:	54 30       	cpi	r21, 0x04	; 4
     ca4:	58 f0       	brcs	.+22     	; 0xcbc <_Z11analyzeRoomPjS_S_+0x7a>
     ca6:	ef 01       	movw	r28, r30
     ca8:	cc 0f       	add	r28, r28
     caa:	dd 1f       	adc	r29, r29
     cac:	c0 0f       	add	r28, r16
     cae:	d1 1f       	adc	r29, r17
     cb0:	d9 82       	std	Y+1, r13	; 0x01
     cb2:	c8 82       	st	Y, r12
     cb4:	31 96       	adiw	r30, 0x01	; 1
     cb6:	e5 30       	cpi	r30, 0x05	; 5
     cb8:	f1 05       	cpc	r31, r1
     cba:	59 f0       	breq	.+22     	; 0xcd2 <_Z11analyzeRoomPjS_S_+0x90>
     cbc:	5f 5f       	subi	r21, 0xFF	; 255
     cbe:	2e 5f       	subi	r18, 0xFE	; 254
     cc0:	3f 4f       	sbci	r19, 0xFF	; 255
     cc2:	a2 e1       	ldi	r26, 0x12	; 18
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ca 0e       	add	r12, r26
     cc8:	db 1e       	adc	r13, r27
     cca:	b1 e0       	ldi	r27, 0x01	; 1
     ccc:	20 39       	cpi	r18, 0x90	; 144
     cce:	3b 07       	cpc	r19, r27
     cd0:	a1 f6       	brne	.-88     	; 0xc7a <_Z11analyzeRoomPjS_S_+0x38>
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	1f 91       	pop	r17
     cd8:	0f 91       	pop	r16
     cda:	ff 90       	pop	r15
     cdc:	ef 90       	pop	r14
     cde:	df 90       	pop	r13
     ce0:	cf 90       	pop	r12
     ce2:	08 95       	ret

00000ce4 <_Z18adjustScanPlatformhh>:
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	88 3c       	cpi	r24, 0xC8	; 200
     cea:	08 f0       	brcs	.+2      	; 0xcee <_Z18adjustScanPlatformhh+0xa>
     cec:	57 c0       	rjmp	.+174    	; 0xd9c <_Z18adjustScanPlatformhh+0xb8>
     cee:	61 30       	cpi	r22, 0x01	; 1
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <_Z18adjustScanPlatformhh+0x10>
     cf2:	54 c0       	rjmp	.+168    	; 0xd9c <_Z18adjustScanPlatformhh+0xb8>
     cf4:	20 91 44 03 	lds	r18, 0x0344
     cf8:	30 91 45 03 	lds	r19, 0x0345
     cfc:	c8 2f       	mov	r28, r24
     cfe:	d0 e0       	ldi	r29, 0x00	; 0
     d00:	2c 17       	cp	r18, r28
     d02:	3d 07       	cpc	r19, r29
     d04:	dc f0       	brlt	.+54     	; 0xd3c <_Z18adjustScanPlatformhh+0x58>
     d06:	22 c0       	rjmp	.+68     	; 0xd4c <_Z18adjustScanPlatformhh+0x68>
     d08:	87 e3       	ldi	r24, 0x37	; 55
     d0a:	93 e0       	ldi	r25, 0x03	; 3
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	41 e0       	ldi	r20, 0x01	; 1
     d10:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN10AF_Stepper7onestepEhh>
     d14:	60 91 44 03 	lds	r22, 0x0344
     d18:	70 91 45 03 	lds	r23, 0x0345
     d1c:	6f 5f       	subi	r22, 0xFF	; 255
     d1e:	7f 4f       	sbci	r23, 0xFF	; 255
     d20:	70 93 45 03 	sts	0x0345, r23
     d24:	60 93 44 03 	sts	0x0344, r22
     d28:	83 e4       	ldi	r24, 0x43	; 67
     d2a:	93 e0       	ldi	r25, 0x03	; 3
     d2c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <_ZN15Cmissionconsole13mediumRangeIREj>
     d30:	6a e0       	ldi	r22, 0x0A	; 10
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 39 15 	call	0x2a72	; 0x2a72 <delay>
     d3c:	80 91 44 03 	lds	r24, 0x0344
     d40:	90 91 45 03 	lds	r25, 0x0345
     d44:	8c 17       	cp	r24, r28
     d46:	9d 07       	cpc	r25, r29
     d48:	f9 f6       	brne	.-66     	; 0xd08 <_Z18adjustScanPlatformhh+0x24>
     d4a:	28 c0       	rjmp	.+80     	; 0xd9c <_Z18adjustScanPlatformhh+0xb8>
     d4c:	c2 17       	cp	r28, r18
     d4e:	d3 07       	cpc	r29, r19
     d50:	f4 f0       	brlt	.+60     	; 0xd8e <_Z18adjustScanPlatformhh+0xaa>
     d52:	24 c0       	rjmp	.+72     	; 0xd9c <_Z18adjustScanPlatformhh+0xb8>
     d54:	87 e3       	ldi	r24, 0x37	; 55
     d56:	93 e0       	ldi	r25, 0x03	; 3
     d58:	62 e0       	ldi	r22, 0x02	; 2
     d5a:	41 e0       	ldi	r20, 0x01	; 1
     d5c:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN10AF_Stepper7onestepEhh>
     d60:	80 91 44 03 	lds	r24, 0x0344
     d64:	90 91 45 03 	lds	r25, 0x0345
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	90 93 45 03 	sts	0x0345, r25
     d6e:	80 93 44 03 	sts	0x0344, r24
     d72:	6a e0       	ldi	r22, 0x0A	; 10
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 39 15 	call	0x2a72	; 0x2a72 <delay>
     d7e:	60 91 44 03 	lds	r22, 0x0344
     d82:	70 91 45 03 	lds	r23, 0x0345
     d86:	83 e4       	ldi	r24, 0x43	; 67
     d88:	93 e0       	ldi	r25, 0x03	; 3
     d8a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <_ZN15Cmissionconsole13mediumRangeIREj>
     d8e:	80 91 44 03 	lds	r24, 0x0344
     d92:	90 91 45 03 	lds	r25, 0x0345
     d96:	8c 17       	cp	r24, r28
     d98:	9d 07       	cpc	r25, r29
     d9a:	e1 f6       	brne	.-72     	; 0xd54 <_Z18adjustScanPlatformhh+0x70>
     d9c:	80 91 44 03 	lds	r24, 0x0344
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <_Z7readADCj>:
     da6:	ef 92       	push	r14
     da8:	ff 92       	push	r15
     daa:	0f 93       	push	r16
     dac:	1f 93       	push	r17
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	f8 2e       	mov	r15, r24
     db4:	00 e0       	ldi	r16, 0x00	; 0
     db6:	10 e0       	ldi	r17, 0x00	; 0
     db8:	c0 e0       	ldi	r28, 0x00	; 0
     dba:	d0 e0       	ldi	r29, 0x00	; 0
     dbc:	8f 2d       	mov	r24, r15
     dbe:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <analogRead>
     dc2:	0f 5f       	subi	r16, 0xFF	; 255
     dc4:	1f 4f       	sbci	r17, 0xFF	; 255
     dc6:	8c 1b       	sub	r24, r28
     dc8:	9d 0b       	sbc	r25, r29
     dca:	b8 01       	movw	r22, r16
     dcc:	0e 94 4e 29 	call	0x529c	; 0x529c <__divmodhi4>
     dd0:	c6 0f       	add	r28, r22
     dd2:	d7 1f       	adc	r29, r23
     dd4:	04 36       	cpi	r16, 0x64	; 100
     dd6:	11 05       	cpc	r17, r1
     dd8:	89 f7       	brne	.-30     	; 0xdbc <_Z7readADCj+0x16>
     dda:	ce 01       	movw	r24, r28
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	ff 90       	pop	r15
     de6:	ef 90       	pop	r14
     de8:	08 95       	ret

00000dea <_Z10irDistanceh>:
     dea:	1f 93       	push	r17
     dec:	18 2f       	mov	r17, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 d3 06 	call	0xda6	; 0xda6 <_Z7readADCj>
     df4:	11 30       	cpi	r17, 0x01	; 1
     df6:	61 f1       	breq	.+88     	; 0xe50 <_Z10irDistanceh+0x66>
     df8:	9c 01       	movw	r18, r24
     dfa:	12 30       	cpi	r17, 0x02	; 2
     dfc:	91 f4       	brne	.+36     	; 0xe22 <_Z10irDistanceh+0x38>
     dfe:	83 e0       	ldi	r24, 0x03	; 3
     e00:	25 33       	cpi	r18, 0x35	; 53
     e02:	38 07       	cpc	r19, r24
     e04:	18 f0       	brcs	.+6      	; 0xe0c <_Z10irDistanceh+0x22>
     e06:	26 e9       	ldi	r18, 0x96	; 150
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	24 c0       	rjmp	.+72     	; 0xe54 <_Z10irDistanceh+0x6a>
     e0c:	20 39       	cpi	r18, 0x90	; 144
     e0e:	31 05       	cpc	r19, r1
     e10:	18 f4       	brcc	.+6      	; 0xe18 <_Z10irDistanceh+0x2e>
     e12:	24 e1       	ldi	r18, 0x14	; 20
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	1e c0       	rjmp	.+60     	; 0xe54 <_Z10irDistanceh+0x6a>
     e18:	20 55       	subi	r18, 0x50	; 80
     e1a:	3e 4f       	sbci	r19, 0xFE	; 254
     e1c:	f9 01       	movw	r30, r18
     e1e:	24 91       	lpm	r18, Z+
     e20:	13 c0       	rjmp	.+38     	; 0xe48 <_Z10irDistanceh+0x5e>
     e22:	13 30       	cpi	r17, 0x03	; 3
     e24:	a9 f4       	brne	.+42     	; 0xe50 <_Z10irDistanceh+0x66>
     e26:	f2 e0       	ldi	r31, 0x02	; 2
     e28:	8b 32       	cpi	r24, 0x2B	; 43
     e2a:	9f 07       	cpc	r25, r31
     e2c:	18 f0       	brcs	.+6      	; 0xe34 <_Z10irDistanceh+0x4a>
     e2e:	2c ec       	ldi	r18, 0xCC	; 204
     e30:	31 e0       	ldi	r19, 0x01	; 1
     e32:	10 c0       	rjmp	.+32     	; 0xe54 <_Z10irDistanceh+0x6a>
     e34:	83 3a       	cpi	r24, 0xA3	; 163
     e36:	91 05       	cpc	r25, r1
     e38:	18 f4       	brcc	.+6      	; 0xe40 <_Z10irDistanceh+0x56>
     e3a:	24 e6       	ldi	r18, 0x64	; 100
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	0a c0       	rjmp	.+20     	; 0xe54 <_Z10irDistanceh+0x6a>
     e40:	2d 5b       	subi	r18, 0xBD	; 189
     e42:	3b 4f       	sbci	r19, 0xFB	; 251
     e44:	f9 01       	movw	r30, r18
     e46:	24 91       	lpm	r18, Z+
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	22 0f       	add	r18, r18
     e4c:	33 1f       	adc	r19, r19
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <_Z10irDistanceh+0x6a>
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	c9 01       	movw	r24, r18
     e56:	1f 91       	pop	r17
     e58:	08 95       	ret

00000e5a <_Z15scanEnvironmentPjj>:
     e5a:	cf 92       	push	r12
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	7c 01       	movw	r14, r24
     e6a:	eb 01       	movw	r28, r22
     e6c:	10 e0       	ldi	r17, 0x00	; 0
     e6e:	19 c0       	rjmp	.+50     	; 0xea2 <_Z15scanEnvironmentPjj+0x48>
     e70:	83 e0       	ldi	r24, 0x03	; 3
     e72:	0e 94 f5 06 	call	0xdea	; 0xdea <_Z10irDistanceh>
     e76:	f6 01       	movw	r30, r12
     e78:	ee 0f       	add	r30, r30
     e7a:	ff 1f       	adc	r31, r31
     e7c:	ee 0d       	add	r30, r14
     e7e:	ff 1d       	adc	r31, r15
     e80:	91 83       	std	Z+1, r25	; 0x01
     e82:	80 83       	st	Z, r24
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	0e 94 72 06 	call	0xce4	; 0xce4 <_Z18adjustScanPlatformhh>
     e8c:	8f 5f       	subi	r24, 0xFF	; 255
     e8e:	61 e0       	ldi	r22, 0x01	; 1
     e90:	0e 94 72 06 	call	0xce4	; 0xce4 <_Z18adjustScanPlatformhh>
     e94:	64 e6       	ldi	r22, 0x64	; 100
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 39 15 	call	0x2a72	; 0x2a72 <delay>
     ea0:	1f 5f       	subi	r17, 0xFF	; 255
     ea2:	c1 2e       	mov	r12, r17
     ea4:	dd 24       	eor	r13, r13
     ea6:	cc 16       	cp	r12, r28
     ea8:	dd 06       	cpc	r13, r29
     eaa:	10 f3       	brcs	.-60     	; 0xe70 <_Z15scanEnvironmentPjj+0x16>
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	61 e0       	ldi	r22, 0x01	; 1
     eb0:	0e 94 72 06 	call	0xce4	; 0xce4 <_Z18adjustScanPlatformhh>
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
     eba:	ff 90       	pop	r15
     ebc:	ef 90       	pop	r14
     ebe:	df 90       	pop	r13
     ec0:	cf 90       	pop	r12
     ec2:	08 95       	ret

00000ec4 <_Z9stopRobotv>:
     ec4:	83 e3       	ldi	r24, 0x33	; 51
     ec6:	93 e0       	ldi	r25, 0x03	; 3
     ec8:	64 e0       	ldi	r22, 0x04	; 4
     eca:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN10AF_DCMotor3runEh>
     ece:	85 e3       	ldi	r24, 0x35	; 53
     ed0:	93 e0       	ldi	r25, 0x03	; 3
     ed2:	64 e0       	ldi	r22, 0x04	; 4
     ed4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN10AF_DCMotor3runEh>
     ed8:	08 95       	ret

00000eda <_Z10goStraightj>:
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	ec 01       	movw	r28, r24
     ee0:	83 e3       	ldi	r24, 0x33	; 51
     ee2:	93 e0       	ldi	r25, 0x03	; 3
     ee4:	6d e7       	ldi	r22, 0x7D	; 125
     ee6:	0e 94 c1 09 	call	0x1382	; 0x1382 <_ZN10AF_DCMotor8setSpeedEh>
     eea:	85 e3       	ldi	r24, 0x35	; 53
     eec:	93 e0       	ldi	r25, 0x03	; 3
     eee:	6d e7       	ldi	r22, 0x7D	; 125
     ef0:	0e 94 c1 09 	call	0x1382	; 0x1382 <_ZN10AF_DCMotor8setSpeedEh>
     ef4:	83 e3       	ldi	r24, 0x33	; 51
     ef6:	93 e0       	ldi	r25, 0x03	; 3
     ef8:	61 e0       	ldi	r22, 0x01	; 1
     efa:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN10AF_DCMotor3runEh>
     efe:	85 e3       	ldi	r24, 0x35	; 53
     f00:	93 e0       	ldi	r25, 0x03	; 3
     f02:	61 e0       	ldi	r22, 0x01	; 1
     f04:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN10AF_DCMotor3runEh>
     f08:	20 97       	sbiw	r28, 0x00	; 0
     f0a:	79 f0       	breq	.+30     	; 0xf2a <_Z10goStraightj+0x50>
     f0c:	be 01       	movw	r22, r28
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 39 15 	call	0x2a72	; 0x2a72 <delay>
     f16:	83 e3       	ldi	r24, 0x33	; 51
     f18:	93 e0       	ldi	r25, 0x03	; 3
     f1a:	64 e0       	ldi	r22, 0x04	; 4
     f1c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN10AF_DCMotor3runEh>
     f20:	85 e3       	ldi	r24, 0x35	; 53
     f22:	93 e0       	ldi	r25, 0x03	; 3
     f24:	64 e0       	ldi	r22, 0x04	; 4
     f26:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN10AF_DCMotor3runEh>
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	08 95       	ret

00000f30 <_Z13adjustHeadingjh>:
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	ec 01       	movw	r28, r24
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <_Z13adjustHeadingjh+0xc>
     f38:	c0 51       	subi	r28, 0x10	; 16
     f3a:	de 40       	sbci	r29, 0x0E	; 14
     f3c:	8e e0       	ldi	r24, 0x0E	; 14
     f3e:	c0 31       	cpi	r28, 0x10	; 16
     f40:	d8 07       	cpc	r29, r24
     f42:	d0 f7       	brcc	.-12     	; 0xf38 <_Z13adjustHeadingjh+0x8>
     f44:	85 e3       	ldi	r24, 0x35	; 53
     f46:	93 e0       	ldi	r25, 0x03	; 3
     f48:	66 e9       	ldi	r22, 0x96	; 150
     f4a:	0e 94 c1 09 	call	0x1382	; 0x1382 <_ZN10AF_DCMotor8setSpeedEh>
     f4e:	83 e3       	ldi	r24, 0x33	; 51
     f50:	93 e0       	ldi	r25, 0x03	; 3
     f52:	66 e9       	ldi	r22, 0x96	; 150
     f54:	0e 94 c1 09 	call	0x1382	; 0x1382 <_ZN10AF_DCMotor8setSpeedEh>
     f58:	85 e3       	ldi	r24, 0x35	; 53
     f5a:	93 e0       	ldi	r25, 0x03	; 3
     f5c:	61 e0       	ldi	r22, 0x01	; 1
     f5e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN10AF_DCMotor3runEh>
     f62:	83 e3       	ldi	r24, 0x33	; 51
     f64:	93 e0       	ldi	r25, 0x03	; 3
     f66:	62 e0       	ldi	r22, 0x02	; 2
     f68:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN10AF_DCMotor3runEh>
     f6c:	8a e0       	ldi	r24, 0x0A	; 10
     f6e:	93 e0       	ldi	r25, 0x03	; 3
     f70:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN14HMC6352compass10getHeadingEv>
     f74:	9c 01       	movw	r18, r24
     f76:	c8 17       	cp	r28, r24
     f78:	d9 07       	cpc	r29, r25
     f7a:	31 f0       	breq	.+12     	; 0xf88 <_Z13adjustHeadingjh+0x58>
     f7c:	ce 01       	movw	r24, r28
     f7e:	82 1b       	sub	r24, r18
     f80:	93 0b       	sbc	r25, r19
     f82:	83 33       	cpi	r24, 0x33	; 51
     f84:	91 05       	cpc	r25, r1
     f86:	90 f7       	brcc	.-28     	; 0xf6c <_Z13adjustHeadingjh+0x3c>
     f88:	83 e3       	ldi	r24, 0x33	; 51
     f8a:	93 e0       	ldi	r25, 0x03	; 3
     f8c:	64 e0       	ldi	r22, 0x04	; 4
     f8e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN10AF_DCMotor3runEh>
     f92:	85 e3       	ldi	r24, 0x35	; 53
     f94:	93 e0       	ldi	r25, 0x03	; 3
     f96:	64 e0       	ldi	r22, 0x04	; 4
     f98:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN10AF_DCMotor3runEh>
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	08 95       	ret

00000fa2 <_Z23findPlaqueDistanceAnglePjS_hRjS0_>:
     fa2:	2f 92       	push	r2
     fa4:	3f 92       	push	r3
     fa6:	4f 92       	push	r4
     fa8:	5f 92       	push	r5
     faa:	6f 92       	push	r6
     fac:	7f 92       	push	r7
     fae:	8f 92       	push	r8
     fb0:	9f 92       	push	r9
     fb2:	af 92       	push	r10
     fb4:	bf 92       	push	r11
     fb6:	cf 92       	push	r12
     fb8:	df 92       	push	r13
     fba:	ef 92       	push	r14
     fbc:	ff 92       	push	r15
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	2a 97       	sbiw	r28, 0x0a	; 10
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	5c 01       	movw	r10, r24
     fd8:	7a 83       	std	Y+2, r23	; 0x02
     fda:	69 83       	std	Y+1, r22	; 0x01
     fdc:	3e 83       	std	Y+6, r19	; 0x06
     fde:	2d 83       	std	Y+5, r18	; 0x05
     fe0:	18 87       	std	Y+8, r17	; 0x08
     fe2:	0f 83       	std	Y+7, r16	; 0x07
     fe4:	42 30       	cpi	r20, 0x02	; 2
     fe6:	08 f4       	brcc	.+2      	; 0xfea <_Z23findPlaqueDistanceAnglePjS_hRjS0_+0x48>
     fe8:	42 e0       	ldi	r20, 0x02	; 2
     fea:	04 2f       	mov	r16, r20
     fec:	10 e0       	ldi	r17, 0x00	; 0
     fee:	c8 01       	movw	r24, r16
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	9a 87       	std	Y+10, r25	; 0x0a
     ff8:	89 87       	std	Y+9, r24	; 0x09
     ffa:	fc 01       	movw	r30, r24
     ffc:	ea 0d       	add	r30, r10
     ffe:	fb 1d       	adc	r31, r11
    1000:	60 81       	ld	r22, Z
    1002:	71 81       	ldd	r23, Z+1	; 0x01
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <__floatunsisf>
    100c:	6b 01       	movw	r12, r22
    100e:	7c 01       	movw	r14, r24
    1010:	f8 01       	movw	r30, r16
    1012:	32 97       	sbiw	r30, 0x02	; 2
    1014:	ee 0f       	add	r30, r30
    1016:	ff 1f       	adc	r31, r31
    1018:	ea 0d       	add	r30, r10
    101a:	fb 1d       	adc	r31, r11
    101c:	60 81       	ld	r22, Z
    101e:	71 81       	ldd	r23, Z+1	; 0x01
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <__floatunsisf>
    1028:	8b 01       	movw	r16, r22
    102a:	b8 2e       	mov	r11, r24
    102c:	a9 2e       	mov	r10, r25
    102e:	6c 2d       	mov	r22, r12
    1030:	7d 2d       	mov	r23, r13
    1032:	8e 2d       	mov	r24, r14
    1034:	9f 2d       	mov	r25, r15
    1036:	2c 2d       	mov	r18, r12
    1038:	3d 2d       	mov	r19, r13
    103a:	4e 2d       	mov	r20, r14
    103c:	5f 2d       	mov	r21, r15
    103e:	0e 94 17 24 	call	0x482e	; 0x482e <__mulsf3>
    1042:	66 2e       	mov	r6, r22
    1044:	97 2e       	mov	r9, r23
    1046:	88 2e       	mov	r8, r24
    1048:	79 2e       	mov	r7, r25
    104a:	95 01       	movw	r18, r10
    104c:	60 2f       	mov	r22, r16
    104e:	71 2f       	mov	r23, r17
    1050:	83 2f       	mov	r24, r19
    1052:	92 2f       	mov	r25, r18
    1054:	f5 01       	movw	r30, r10
    1056:	20 2f       	mov	r18, r16
    1058:	31 2f       	mov	r19, r17
    105a:	4f 2f       	mov	r20, r31
    105c:	5e 2f       	mov	r21, r30
    105e:	0e 94 17 24 	call	0x482e	; 0x482e <__mulsf3>
    1062:	56 2e       	mov	r5, r22
    1064:	47 2e       	mov	r4, r23
    1066:	38 2e       	mov	r3, r24
    1068:	29 2e       	mov	r2, r25
    106a:	a9 85       	ldd	r26, Y+9	; 0x09
    106c:	ba 85       	ldd	r27, Y+10	; 0x0a
    106e:	e9 81       	ldd	r30, Y+1	; 0x01
    1070:	fa 81       	ldd	r31, Y+2	; 0x02
    1072:	ae 0f       	add	r26, r30
    1074:	bf 1f       	adc	r27, r31
    1076:	6d 91       	ld	r22, X+
    1078:	7c 91       	ld	r23, X
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <__floatunsisf>
    1082:	2b ed       	ldi	r18, 0xDB	; 219
    1084:	3f e0       	ldi	r19, 0x0F	; 15
    1086:	49 e4       	ldi	r20, 0x49	; 73
    1088:	50 e4       	ldi	r21, 0x40	; 64
    108a:	0e 94 17 24 	call	0x482e	; 0x482e <__mulsf3>
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	44 e3       	ldi	r20, 0x34	; 52
    1094:	53 e4       	ldi	r21, 0x43	; 67
    1096:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <__divsf3>
    109a:	0e 94 2e 2a 	call	0x545c	; 0x545c <cos>
    109e:	69 83       	std	Y+1, r22	; 0x01
    10a0:	7a 83       	std	Y+2, r23	; 0x02
    10a2:	8b 83       	std	Y+3, r24	; 0x03
    10a4:	9c 83       	std	Y+4, r25	; 0x04
    10a6:	46 2d       	mov	r20, r6
    10a8:	59 2d       	mov	r21, r9
    10aa:	68 2d       	mov	r22, r8
    10ac:	77 2d       	mov	r23, r7
    10ae:	cb 01       	movw	r24, r22
    10b0:	ba 01       	movw	r22, r20
    10b2:	d2 01       	movw	r26, r4
    10b4:	f1 01       	movw	r30, r2
    10b6:	2b 2f       	mov	r18, r27
    10b8:	3a 2f       	mov	r19, r26
    10ba:	4f 2f       	mov	r20, r31
    10bc:	5e 2f       	mov	r21, r30
    10be:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <__addsf3>
    10c2:	3b 01       	movw	r6, r22
    10c4:	4c 01       	movw	r8, r24
    10c6:	95 01       	movw	r18, r10
    10c8:	60 2f       	mov	r22, r16
    10ca:	71 2f       	mov	r23, r17
    10cc:	83 2f       	mov	r24, r19
    10ce:	92 2f       	mov	r25, r18
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e0       	ldi	r20, 0x00	; 0
    10d6:	50 ec       	ldi	r21, 0xC0	; 192
    10d8:	0e 94 17 24 	call	0x482e	; 0x482e <__mulsf3>
    10dc:	2c 2d       	mov	r18, r12
    10de:	3d 2d       	mov	r19, r13
    10e0:	4e 2d       	mov	r20, r14
    10e2:	5f 2d       	mov	r21, r15
    10e4:	0e 94 17 24 	call	0x482e	; 0x482e <__mulsf3>
    10e8:	29 81       	ldd	r18, Y+1	; 0x01
    10ea:	3a 81       	ldd	r19, Y+2	; 0x02
    10ec:	4b 81       	ldd	r20, Y+3	; 0x03
    10ee:	5c 81       	ldd	r21, Y+4	; 0x04
    10f0:	0e 94 17 24 	call	0x482e	; 0x482e <__mulsf3>
    10f4:	9b 01       	movw	r18, r22
    10f6:	ac 01       	movw	r20, r24
    10f8:	c4 01       	movw	r24, r8
    10fa:	b3 01       	movw	r22, r6
    10fc:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <__addsf3>
    1100:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <sqrt>
    1104:	0e 94 3d 22 	call	0x447a	; 0x447a <__fixunssfsi>
    1108:	ed 81       	ldd	r30, Y+5	; 0x05
    110a:	fe 81       	ldd	r31, Y+6	; 0x06
    110c:	71 83       	std	Z+1, r23	; 0x01
    110e:	60 83       	st	Z, r22
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <__floatunsisf>
    1118:	3b 01       	movw	r6, r22
    111a:	4c 01       	movw	r8, r24
    111c:	a4 01       	movw	r20, r8
    111e:	93 01       	movw	r18, r6
    1120:	0e 94 17 24 	call	0x482e	; 0x482e <__mulsf3>
    1124:	56 2f       	mov	r21, r22
    1126:	47 2f       	mov	r20, r23
    1128:	38 2f       	mov	r19, r24
    112a:	29 2f       	mov	r18, r25
    112c:	d2 01       	movw	r26, r4
    112e:	f1 01       	movw	r30, r2
    1130:	6b 2f       	mov	r22, r27
    1132:	7a 2f       	mov	r23, r26
    1134:	8f 2f       	mov	r24, r31
    1136:	9e 2f       	mov	r25, r30
    1138:	da 01       	movw	r26, r20
    113a:	f9 01       	movw	r30, r18
    113c:	2b 2f       	mov	r18, r27
    113e:	3a 2f       	mov	r19, r26
    1140:	4f 2f       	mov	r20, r31
    1142:	5e 2f       	mov	r21, r30
    1144:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <__addsf3>
    1148:	1b 01       	movw	r2, r22
    114a:	2c 01       	movw	r4, r24
    114c:	6c 2d       	mov	r22, r12
    114e:	7d 2d       	mov	r23, r13
    1150:	8e 2d       	mov	r24, r14
    1152:	9f 2d       	mov	r25, r15
    1154:	a7 01       	movw	r20, r14
    1156:	96 01       	movw	r18, r12
    1158:	0e 94 17 24 	call	0x482e	; 0x482e <__mulsf3>
    115c:	9b 01       	movw	r18, r22
    115e:	ac 01       	movw	r20, r24
    1160:	c2 01       	movw	r24, r4
    1162:	b1 01       	movw	r22, r2
    1164:	0e 94 b9 23 	call	0x4772	; 0x4772 <__subsf3>
    1168:	6b 01       	movw	r12, r22
    116a:	7c 01       	movw	r14, r24
    116c:	95 01       	movw	r18, r10
    116e:	60 2f       	mov	r22, r16
    1170:	71 2f       	mov	r23, r17
    1172:	83 2f       	mov	r24, r19
    1174:	92 2f       	mov	r25, r18
    1176:	f5 01       	movw	r30, r10
    1178:	20 2f       	mov	r18, r16
    117a:	31 2f       	mov	r19, r17
    117c:	4f 2f       	mov	r20, r31
    117e:	5e 2f       	mov	r21, r30
    1180:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <__addsf3>
    1184:	a4 01       	movw	r20, r8
    1186:	93 01       	movw	r18, r6
    1188:	0e 94 17 24 	call	0x482e	; 0x482e <__mulsf3>
    118c:	9b 01       	movw	r18, r22
    118e:	ac 01       	movw	r20, r24
    1190:	c7 01       	movw	r24, r14
    1192:	b6 01       	movw	r22, r12
    1194:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <__divsf3>
    1198:	0e 94 c0 29 	call	0x5380	; 0x5380 <acos>
    119c:	20 ee       	ldi	r18, 0xE0	; 224
    119e:	3e e2       	ldi	r19, 0x2E	; 46
    11a0:	45 e6       	ldi	r20, 0x65	; 101
    11a2:	52 e4       	ldi	r21, 0x42	; 66
    11a4:	0e 94 17 24 	call	0x482e	; 0x482e <__mulsf3>
    11a8:	0e 94 3d 22 	call	0x447a	; 0x447a <__fixunssfsi>
    11ac:	ef 81       	ldd	r30, Y+7	; 0x07
    11ae:	f8 85       	ldd	r31, Y+8	; 0x08
    11b0:	71 83       	std	Z+1, r23	; 0x01
    11b2:	60 83       	st	Z, r22
    11b4:	2a 96       	adiw	r28, 0x0a	; 10
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	ff 90       	pop	r15
    11ca:	ef 90       	pop	r14
    11cc:	df 90       	pop	r13
    11ce:	cf 90       	pop	r12
    11d0:	bf 90       	pop	r11
    11d2:	af 90       	pop	r10
    11d4:	9f 90       	pop	r9
    11d6:	8f 90       	pop	r8
    11d8:	7f 90       	pop	r7
    11da:	6f 90       	pop	r6
    11dc:	5f 90       	pop	r5
    11de:	4f 90       	pop	r4
    11e0:	3f 90       	pop	r3
    11e2:	2f 90       	pop	r2
    11e4:	08 95       	ret

000011e6 <_ZN15CmissionconsoleC2Ev>:
    11e6:	08 95       	ret

000011e8 <_ZN15CmissionconsoleC1Ev>:
    11e8:	08 95       	ret

000011ea <_ZN15CmissionconsoleD2Ev>:
    11ea:	08 95       	ret

000011ec <_ZN15CmissionconsoleD1Ev>:
    11ec:	08 95       	ret

000011ee <_ZN15Cmissionconsole6enableEv>:
    11ee:	08 95       	ret

000011f0 <_ZN15Cmissionconsole7disableEv>:
    11f0:	08 95       	ret

000011f2 <_ZN15Cmissionconsole5writeEh>:
    11f2:	08 95       	ret

000011f4 <_ZN15Cmissionconsole5writeEPc>:
    11f4:	8c ec       	ldi	r24, 0xCC	; 204
    11f6:	93 e0       	ldi	r25, 0x03	; 3
    11f8:	0e 94 93 12 	call	0x2526	; 0x2526 <_ZN5Print7printlnEPKc>
    11fc:	08 95       	ret

000011fe <_ZN15Cmissionconsole13mediumRangeIREj>:
    11fe:	ef 92       	push	r14
    1200:	ff 92       	push	r15
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	8b 01       	movw	r16, r22
    120c:	80 e4       	ldi	r24, 0x40	; 64
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	61 e0       	ldi	r22, 0x01	; 1
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	0e 94 c4 2b 	call	0x5788	; 0x5788 <calloc>
    1218:	e8 2e       	mov	r14, r24
    121a:	e7 01       	movw	r28, r14
    121c:	7e 01       	movw	r14, r28
    121e:	f9 2e       	mov	r15, r25
    1220:	e1 14       	cp	r14, r1
    1222:	f1 04       	cpc	r15, r1
    1224:	29 f1       	breq	.+74     	; 0x1270 <_ZN15Cmissionconsole13mediumRangeIREj+0x72>
    1226:	00 d0       	rcall	.+0      	; 0x1228 <_ZN15Cmissionconsole13mediumRangeIREj+0x2a>
    1228:	00 d0       	rcall	.+0      	; 0x122a <_ZN15Cmissionconsole13mediumRangeIREj+0x2c>
    122a:	00 d0       	rcall	.+0      	; 0x122c <_ZN15Cmissionconsole13mediumRangeIREj+0x2e>
    122c:	ed b7       	in	r30, 0x3d	; 61
    122e:	fe b7       	in	r31, 0x3e	; 62
    1230:	31 96       	adiw	r30, 0x01	; 1
    1232:	ad b7       	in	r26, 0x3d	; 61
    1234:	be b7       	in	r27, 0x3e	; 62
    1236:	12 96       	adiw	r26, 0x02	; 2
    1238:	fc 92       	st	X, r15
    123a:	ee 92       	st	-X, r14
    123c:	11 97       	sbiw	r26, 0x01	; 1
    123e:	8b e8       	ldi	r24, 0x8B	; 139
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	93 83       	std	Z+3, r25	; 0x03
    1244:	82 83       	std	Z+2, r24	; 0x02
    1246:	15 83       	std	Z+5, r17	; 0x05
    1248:	04 83       	std	Z+4, r16	; 0x04
    124a:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <sprintf>
    124e:	2d b7       	in	r18, 0x3d	; 61
    1250:	3e b7       	in	r19, 0x3e	; 62
    1252:	2a 5f       	subi	r18, 0xFA	; 250
    1254:	3f 4f       	sbci	r19, 0xFF	; 255
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	3e bf       	out	0x3e, r19	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	2d bf       	out	0x3d, r18	; 61
    1260:	8c ec       	ldi	r24, 0xCC	; 204
    1262:	93 e0       	ldi	r25, 0x03	; 3
    1264:	b7 01       	movw	r22, r14
    1266:	0e 94 93 12 	call	0x2526	; 0x2526 <_ZN5Print7printlnEPKc>
    126a:	c7 01       	movw	r24, r14
    126c:	0e 94 8b 2c 	call	0x5916	; 0x5916 <free>
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	1f 91       	pop	r17
    1276:	0f 91       	pop	r16
    1278:	ff 90       	pop	r15
    127a:	ef 90       	pop	r14
    127c:	08 95       	ret

0000127e <_ZN15Cmissionconsole11longRangeIREj>:
    127e:	ef 92       	push	r14
    1280:	ff 92       	push	r15
    1282:	0f 93       	push	r16
    1284:	1f 93       	push	r17
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	8b 01       	movw	r16, r22
    128c:	80 e4       	ldi	r24, 0x40	; 64
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	61 e0       	ldi	r22, 0x01	; 1
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	0e 94 c4 2b 	call	0x5788	; 0x5788 <calloc>
    1298:	e8 2e       	mov	r14, r24
    129a:	e7 01       	movw	r28, r14
    129c:	7e 01       	movw	r14, r28
    129e:	f9 2e       	mov	r15, r25
    12a0:	e1 14       	cp	r14, r1
    12a2:	f1 04       	cpc	r15, r1
    12a4:	29 f1       	breq	.+74     	; 0x12f0 <_ZN15Cmissionconsole11longRangeIREj+0x72>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <_ZN15Cmissionconsole11longRangeIREj+0x2a>
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <_ZN15Cmissionconsole11longRangeIREj+0x2c>
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <_ZN15Cmissionconsole11longRangeIREj+0x2e>
    12ac:	ed b7       	in	r30, 0x3d	; 61
    12ae:	fe b7       	in	r31, 0x3e	; 62
    12b0:	31 96       	adiw	r30, 0x01	; 1
    12b2:	ad b7       	in	r26, 0x3d	; 61
    12b4:	be b7       	in	r27, 0x3e	; 62
    12b6:	12 96       	adiw	r26, 0x02	; 2
    12b8:	fc 92       	st	X, r15
    12ba:	ee 92       	st	-X, r14
    12bc:	11 97       	sbiw	r26, 0x01	; 1
    12be:	8c e9       	ldi	r24, 0x9C	; 156
    12c0:	91 e0       	ldi	r25, 0x01	; 1
    12c2:	93 83       	std	Z+3, r25	; 0x03
    12c4:	82 83       	std	Z+2, r24	; 0x02
    12c6:	15 83       	std	Z+5, r17	; 0x05
    12c8:	04 83       	std	Z+4, r16	; 0x04
    12ca:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <sprintf>
    12ce:	2d b7       	in	r18, 0x3d	; 61
    12d0:	3e b7       	in	r19, 0x3e	; 62
    12d2:	2a 5f       	subi	r18, 0xFA	; 250
    12d4:	3f 4f       	sbci	r19, 0xFF	; 255
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	3e bf       	out	0x3e, r19	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	2d bf       	out	0x3d, r18	; 61
    12e0:	8c ec       	ldi	r24, 0xCC	; 204
    12e2:	93 e0       	ldi	r25, 0x03	; 3
    12e4:	b7 01       	movw	r22, r14
    12e6:	0e 94 93 12 	call	0x2526	; 0x2526 <_ZN5Print7printlnEPKc>
    12ea:	c7 01       	movw	r24, r14
    12ec:	0e 94 8b 2c 	call	0x5916	; 0x5916 <free>
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	ff 90       	pop	r15
    12fa:	ef 90       	pop	r14
    12fc:	08 95       	ret

000012fe <_ZN15Cmissionconsole7adValueEj>:
    12fe:	ef 92       	push	r14
    1300:	ff 92       	push	r15
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	8b 01       	movw	r16, r22
    130c:	80 e4       	ldi	r24, 0x40	; 64
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	61 e0       	ldi	r22, 0x01	; 1
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	0e 94 c4 2b 	call	0x5788	; 0x5788 <calloc>
    1318:	e8 2e       	mov	r14, r24
    131a:	e7 01       	movw	r28, r14
    131c:	7e 01       	movw	r14, r28
    131e:	f9 2e       	mov	r15, r25
    1320:	e1 14       	cp	r14, r1
    1322:	f1 04       	cpc	r15, r1
    1324:	29 f1       	breq	.+74     	; 0x1370 <_ZN15Cmissionconsole7adValueEj+0x72>
    1326:	00 d0       	rcall	.+0      	; 0x1328 <_ZN15Cmissionconsole7adValueEj+0x2a>
    1328:	00 d0       	rcall	.+0      	; 0x132a <_ZN15Cmissionconsole7adValueEj+0x2c>
    132a:	00 d0       	rcall	.+0      	; 0x132c <_ZN15Cmissionconsole7adValueEj+0x2e>
    132c:	ed b7       	in	r30, 0x3d	; 61
    132e:	fe b7       	in	r31, 0x3e	; 62
    1330:	31 96       	adiw	r30, 0x01	; 1
    1332:	ad b7       	in	r26, 0x3d	; 61
    1334:	be b7       	in	r27, 0x3e	; 62
    1336:	12 96       	adiw	r26, 0x02	; 2
    1338:	fc 92       	st	X, r15
    133a:	ee 92       	st	-X, r14
    133c:	11 97       	sbiw	r26, 0x01	; 1
    133e:	8d ea       	ldi	r24, 0xAD	; 173
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	93 83       	std	Z+3, r25	; 0x03
    1344:	82 83       	std	Z+2, r24	; 0x02
    1346:	15 83       	std	Z+5, r17	; 0x05
    1348:	04 83       	std	Z+4, r16	; 0x04
    134a:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <sprintf>
    134e:	2d b7       	in	r18, 0x3d	; 61
    1350:	3e b7       	in	r19, 0x3e	; 62
    1352:	2a 5f       	subi	r18, 0xFA	; 250
    1354:	3f 4f       	sbci	r19, 0xFF	; 255
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	3e bf       	out	0x3e, r19	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	2d bf       	out	0x3d, r18	; 61
    1360:	8c ec       	ldi	r24, 0xCC	; 204
    1362:	93 e0       	ldi	r25, 0x03	; 3
    1364:	b7 01       	movw	r22, r14
    1366:	0e 94 93 12 	call	0x2526	; 0x2526 <_ZN5Print7printlnEPKc>
    136a:	c7 01       	movw	r24, r14
    136c:	0e 94 8b 2c 	call	0x5916	; 0x5916 <free>
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	ff 90       	pop	r15
    137a:	ef 90       	pop	r14
    137c:	08 95       	ret

0000137e <_ZN17AFMotorControllerC2Ev>:
#elif (MICROSTEPS == 16)
uint8_t microstepcurve[] = {0, 25, 50, 74, 98, 120, 141, 162, 180, 197, 212, 225, 236, 244, 250, 253, 255};
#endif

AFMotorController::AFMotorController(void) {
}
    137e:	08 95       	ret

00001380 <_ZN17AFMotorControllerC1Ev>:
    1380:	08 95       	ret

00001382 <_ZN10AF_DCMotor8setSpeedEh>:
    break;
  }
}

void AF_DCMotor::setSpeed(uint8_t speed) {
  switch (motornum) {
    1382:	fc 01       	movw	r30, r24
    1384:	80 81       	ld	r24, Z
    1386:	82 30       	cpi	r24, 0x02	; 2
    1388:	71 f0       	breq	.+28     	; 0x13a6 <_ZN10AF_DCMotor8setSpeedEh+0x24>
    138a:	83 30       	cpi	r24, 0x03	; 3
    138c:	28 f0       	brcs	.+10     	; 0x1398 <_ZN10AF_DCMotor8setSpeedEh+0x16>
    138e:	83 30       	cpi	r24, 0x03	; 3
    1390:	69 f0       	breq	.+26     	; 0x13ac <_ZN10AF_DCMotor8setSpeedEh+0x2a>
    1392:	84 30       	cpi	r24, 0x04	; 4
    1394:	31 f0       	breq	.+12     	; 0x13a2 <_ZN10AF_DCMotor8setSpeedEh+0x20>
    1396:	08 95       	ret
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	e9 f7       	brne	.-6      	; 0x1396 <_ZN10AF_DCMotor8setSpeedEh+0x14>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    139c:	60 93 b3 00 	sts	0x00B3, r22
}

void AF_DCMotor::setSpeed(uint8_t speed) {
  switch (motornum) {
  case 1:
    setPWM1(speed); break;
    13a0:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    13a2:	68 bd       	out	0x28, r22	; 40
    13a4:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    13a6:	60 93 b4 00 	sts	0x00B4, r22
void AF_DCMotor::setSpeed(uint8_t speed) {
  switch (motornum) {
  case 1:
    setPWM1(speed); break;
  case 2:
    setPWM2(speed); break;
    13aa:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    13ac:	67 bd       	out	0x27, r22	; 39
  case 1:
    setPWM1(speed); break;
  case 2:
    setPWM2(speed); break;
  case 3:
    setPWM3(speed); break;
    13ae:	08 95       	ret

000013b0 <_ZN10AF_Stepper8setSpeedEj>:
    setPWM3(255);
    setPWM4(255);
  }
}

void AF_Stepper::setSpeed(uint16_t rpm) {
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	ec 01       	movw	r28, r24
  uint32_t tmp = 0;
  tmp = revsteps * rpm;
  usperstep = 60000000 / tmp;
    13b6:	88 81       	ld	r24, Y
    13b8:	99 81       	ldd	r25, Y+1	; 0x01
    13ba:	68 9f       	mul	r22, r24
    13bc:	90 01       	movw	r18, r0
    13be:	69 9f       	mul	r22, r25
    13c0:	30 0d       	add	r19, r0
    13c2:	78 9f       	mul	r23, r24
    13c4:	30 0d       	add	r19, r0
    13c6:	11 24       	eor	r1, r1
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	60 e0       	ldi	r22, 0x00	; 0
    13ce:	77 e8       	ldi	r23, 0x87	; 135
    13d0:	83 e9       	ldi	r24, 0x93	; 147
    13d2:	93 e0       	ldi	r25, 0x03	; 3
    13d4:	0e 94 61 29 	call	0x52c2	; 0x52c2 <__udivmodsi4>
    13d8:	2b 83       	std	Y+3, r18	; 0x03
    13da:	3c 83       	std	Y+4, r19	; 0x04
    13dc:	4d 83       	std	Y+5, r20	; 0x05
    13de:	5e 83       	std	Y+6, r21	; 0x06
  // wont compile with -O2 or -O3 - see bug http://gcc.gnu.org/bugzilla/show_bug.cgi?id=44245#c5
  //usperstep = 60000000 / ((uint32_t)revsteps * (uint32_t)rpm);
  steppingcounter = 0;
    13e0:	1f 82       	std	Y+7, r1	; 0x07
    13e2:	18 86       	std	Y+8, r1	; 0x08
    13e4:	19 86       	std	Y+9, r1	; 0x09
    13e6:	1a 86       	std	Y+10, r1	; 0x0a
}
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	08 95       	ret

000013ee <_GLOBAL__I_microstepcurve>:
  }

 
  MC.latch_tx();
  return currentstep;
}
    13ee:	08 95       	ret

000013f0 <_ZN17AFMotorController8latch_txEv>:
  //ENABLE_PORT &= ~_BV(ENABLE); // enable the chip outputs!
  digitalWrite(MOTORENABLE, LOW);
}


void AFMotorController::latch_tx(void) {
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
  uint8_t i;

  //LATCH_PORT &= ~_BV(LATCH);
  digitalWrite(MOTORLATCH, LOW);
    13f4:	8c e0       	ldi	r24, 0x0C	; 12
    13f6:	60 e0       	ldi	r22, 0x00	; 0
    13f8:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>

  //SER_PORT &= ~_BV(SER);
  digitalWrite(MOTORDATA, LOW);
    13fc:	88 e0       	ldi	r24, 0x08	; 8
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
    1404:	c7 e0       	ldi	r28, 0x07	; 7
    1406:	d0 e0       	ldi	r29, 0x00	; 0
    1408:	0d c0       	rjmp	.+26     	; 0x1424 <_ZN17AFMotorController8latch_txEv+0x34>
    //CLK_PORT &= ~_BV(CLK);
    digitalWrite(MOTORCLK, LOW);

    if (latch_state & _BV(7-i)) {
      //SER_PORT |= _BV(SER);
      digitalWrite(MOTORDATA, HIGH);
    140a:	88 e0       	ldi	r24, 0x08	; 8
    140c:	61 e0       	ldi	r22, 0x01	; 1
    140e:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
    } else {
      //SER_PORT &= ~_BV(SER);
      digitalWrite(MOTORDATA, LOW);
    }
    //CLK_PORT |= _BV(CLK);
    digitalWrite(MOTORCLK, HIGH);
    1412:	84 e0       	ldi	r24, 0x04	; 4
    1414:	61 e0       	ldi	r22, 0x01	; 1
    1416:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
    141a:	21 97       	sbiw	r28, 0x01	; 1
  digitalWrite(MOTORLATCH, LOW);

  //SER_PORT &= ~_BV(SER);
  digitalWrite(MOTORDATA, LOW);

  for (i=0; i<8; i++) {
    141c:	3f ef       	ldi	r19, 0xFF	; 255
    141e:	cf 3f       	cpi	r28, 0xFF	; 255
    1420:	d3 07       	cpc	r29, r19
    1422:	a1 f0       	breq	.+40     	; 0x144c <_ZN17AFMotorController8latch_txEv+0x5c>
    //CLK_PORT &= ~_BV(CLK);
    digitalWrite(MOTORCLK, LOW);
    1424:	84 e0       	ldi	r24, 0x04	; 4
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>

    if (latch_state & _BV(7-i)) {
    142c:	80 91 47 03 	lds	r24, 0x0347
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	0c 2e       	mov	r0, r28
    1434:	02 c0       	rjmp	.+4      	; 0x143a <_ZN17AFMotorController8latch_txEv+0x4a>
    1436:	95 95       	asr	r25
    1438:	87 95       	ror	r24
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <_ZN17AFMotorController8latch_txEv+0x46>
    143e:	80 fd       	sbrc	r24, 0
    1440:	e4 cf       	rjmp	.-56     	; 0x140a <_ZN17AFMotorController8latch_txEv+0x1a>
      //SER_PORT |= _BV(SER);
      digitalWrite(MOTORDATA, HIGH);
    } else {
      //SER_PORT &= ~_BV(SER);
      digitalWrite(MOTORDATA, LOW);
    1442:	88 e0       	ldi	r24, 0x08	; 8
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
    144a:	e3 cf       	rjmp	.-58     	; 0x1412 <_ZN17AFMotorController8latch_txEv+0x22>
    }
    //CLK_PORT |= _BV(CLK);
    digitalWrite(MOTORCLK, HIGH);
  }
  //LATCH_PORT |= _BV(LATCH);
  digitalWrite(MOTORLATCH, HIGH);
    144c:	8c e0       	ldi	r24, 0x0C	; 12
    144e:	61 e0       	ldi	r22, 0x01	; 1
    1450:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
}
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	08 95       	ret

0000145a <_ZN10AF_Stepper7onestepEhh>:
      } 
    }
  }
}

uint8_t AF_Stepper::onestep(uint8_t dir, uint8_t style) {
    145a:	df 92       	push	r13
    145c:	ef 92       	push	r14
    145e:	ff 92       	push	r15
    1460:	0f 93       	push	r16
    1462:	1f 93       	push	r17
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
    1468:	ec 01       	movw	r28, r24
  uint8_t a, b, c, d;
  uint8_t ocrb, ocra;

  ocra = ocrb = 255;

  if (steppernum == 1) {
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	09 f4       	brne	.+2      	; 0x1472 <_ZN10AF_Stepper7onestepEhh+0x18>
    1470:	71 c0       	rjmp	.+226    	; 0x1554 <_ZN10AF_Stepper7onestepEhh+0xfa>
    a = _BV(MOTOR1_A);
    b = _BV(MOTOR2_A);
    c = _BV(MOTOR1_B);
    d = _BV(MOTOR2_B);
  } else if (steppernum == 2) {
    1472:	82 30       	cpi	r24, 0x02	; 2
    1474:	49 f0       	breq	.+18     	; 0x1488 <_ZN10AF_Stepper7onestepEhh+0x2e>
    1476:	80 e0       	ldi	r24, 0x00	; 0
  }

 
  MC.latch_tx();
  return currentstep;
}
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	1f 91       	pop	r17
    147e:	0f 91       	pop	r16
    1480:	ff 90       	pop	r15
    1482:	ef 90       	pop	r14
    1484:	df 90       	pop	r13
    1486:	08 95       	ret
  if (steppernum == 1) {
    a = _BV(MOTOR1_A);
    b = _BV(MOTOR2_A);
    c = _BV(MOTOR1_B);
    d = _BV(MOTOR2_B);
  } else if (steppernum == 2) {
    1488:	2e e1       	ldi	r18, 0x1E	; 30
    148a:	91 e2       	ldi	r25, 0x21	; 33
    148c:	d9 2e       	mov	r13, r25
    148e:	30 e4       	ldi	r19, 0x40	; 64
    1490:	50 e8       	ldi	r21, 0x80	; 128
    1492:	e1 e0       	ldi	r30, 0x01	; 1
    1494:	f0 e2       	ldi	r31, 0x20	; 32
  } else {
    return 0;
  }

  // next determine what sort of stepping procedure we're up to
  if (style == SINGLE) {
    1496:	41 30       	cpi	r20, 0x01	; 1
    1498:	01 f1       	breq	.+64     	; 0x14da <_ZN10AF_Stepper7onestepEhh+0x80>
      }
      else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == DOUBLE) {
    149a:	42 30       	cpi	r20, 0x02	; 2
    149c:	09 f4       	brne	.+2      	; 0x14a0 <_ZN10AF_Stepper7onestepEhh+0x46>
    149e:	95 c0       	rjmp	.+298    	; 0x15ca <_ZN10AF_Stepper7onestepEhh+0x170>
	currentstep += MICROSTEPS;
      } else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == INTERLEAVE) {
    14a0:	43 30       	cpi	r20, 0x03	; 3
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <_ZN10AF_Stepper7onestepEhh+0x4c>
    14a4:	a2 c0       	rjmp	.+324    	; 0x15ea <_ZN10AF_Stepper7onestepEhh+0x190>
    14a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    } else {
       currentstep -= MICROSTEPS/2;
    }
  } 

  if (style == MICROSTEP) {
    14a8:	44 30       	cpi	r20, 0x04	; 4
    14aa:	21 f5       	brne	.+72     	; 0x14f4 <_ZN10AF_Stepper7onestepEhh+0x9a>
    if (dir == FORWARD) {
    14ac:	61 30       	cpi	r22, 0x01	; 1
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <_ZN10AF_Stepper7onestepEhh+0x58>
    14b0:	f3 c0       	rjmp	.+486    	; 0x1698 <_ZN10AF_Stepper7onestepEhh+0x23e>
      currentstep++;
    } else {
      // BACKWARDS
      currentstep--;
    14b2:	91 50       	subi	r25, 0x01	; 1
    14b4:	9b 87       	std	Y+11, r25	; 0x0b
    }

    currentstep += MICROSTEPS*4;
    currentstep %= MICROSTEPS*4;
    14b6:	9f 73       	andi	r25, 0x3F	; 63
    14b8:	9b 87       	std	Y+11, r25	; 0x0b

    ocra = ocrb = 0;
    if ( (currentstep >= 0) && (currentstep < MICROSTEPS)) {
    14ba:	90 31       	cpi	r25, 0x10	; 16
    14bc:	08 f0       	brcs	.+2      	; 0x14c0 <_ZN10AF_Stepper7onestepEhh+0x66>
    14be:	99 c0       	rjmp	.+306    	; 0x15f2 <_ZN10AF_Stepper7onestepEhh+0x198>
      ocra = microstepcurve[MICROSTEPS - currentstep];
    14c0:	09 2f       	mov	r16, r25
    14c2:	10 e0       	ldi	r17, 0x00	; 0
    14c4:	69 ec       	ldi	r22, 0xC9	; 201
    14c6:	71 e0       	ldi	r23, 0x01	; 1
    14c8:	60 1b       	sub	r22, r16
    14ca:	71 0b       	sbc	r23, r17
    14cc:	db 01       	movw	r26, r22
    14ce:	7c 91       	ld	r23, X
      ocrb = microstepcurve[currentstep];
    14d0:	07 54       	subi	r16, 0x47	; 71
    14d2:	1e 4f       	sbci	r17, 0xFE	; 254
    14d4:	d8 01       	movw	r26, r16
    14d6:	6c 91       	ld	r22, X
    14d8:	0f c0       	rjmp	.+30     	; 0x14f8 <_ZN10AF_Stepper7onestepEhh+0x9e>
    return 0;
  }

  // next determine what sort of stepping procedure we're up to
  if (style == SINGLE) {
    if ((currentstep/(MICROSTEPS/2)) % 2) { // we're at an odd step, weird
    14da:	9b 85       	ldd	r25, Y+11	; 0x0b
    14dc:	79 2f       	mov	r23, r25
    14de:	76 95       	lsr	r23
    14e0:	76 95       	lsr	r23
    14e2:	76 95       	lsr	r23
    14e4:	70 ff       	sbrs	r23, 0
    14e6:	9b c0       	rjmp	.+310    	; 0x161e <_ZN10AF_Stepper7onestepEhh+0x1c4>
      if (dir == FORWARD) {
    14e8:	61 30       	cpi	r22, 0x01	; 1
    14ea:	09 f4       	brne	.+2      	; 0x14ee <_ZN10AF_Stepper7onestepEhh+0x94>
    14ec:	dc c0       	rjmp	.+440    	; 0x16a6 <_ZN10AF_Stepper7onestepEhh+0x24c>
	currentstep += MICROSTEPS/2;
      }
      else {
	currentstep -= MICROSTEPS/2;
    14ee:	98 50       	subi	r25, 0x08	; 8
    14f0:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
    14f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    14f4:	7f ef       	ldi	r23, 0xFF	; 255
    14f6:	6f ef       	ldi	r22, 0xFF	; 255
      ocrb = microstepcurve[MICROSTEPS*4 - currentstep];
    }
  }

  currentstep += MICROSTEPS*4;
  currentstep %= MICROSTEPS*4;
    14f8:	9f 73       	andi	r25, 0x3F	; 63
    14fa:	9b 87       	std	Y+11, r25	; 0x0b
  Serial.print("current step: "); Serial.println(currentstep, DEC);
  Serial.print(" pwmA = "); Serial.print(ocra, DEC); 
  Serial.print(" pwmB = "); Serial.println(ocrb, DEC); 
#endif

  if (steppernum == 1) {
    14fc:	81 30       	cpi	r24, 0x01	; 1
    14fe:	09 f4       	brne	.+2      	; 0x1502 <_ZN10AF_Stepper7onestepEhh+0xa8>
    1500:	5f c0       	rjmp	.+190    	; 0x15c0 <_ZN10AF_Stepper7onestepEhh+0x166>
    setPWM1(ocra);
    setPWM2(ocrb);
  } else if (steppernum == 2) {
    1502:	82 30       	cpi	r24, 0x02	; 2
    1504:	09 f4       	brne	.+2      	; 0x1508 <_ZN10AF_Stepper7onestepEhh+0xae>
    1506:	6e c0       	rjmp	.+220    	; 0x15e4 <_ZN10AF_Stepper7onestepEhh+0x18a>
    setPWM4(ocrb);
  }


  // release all
  latch_state &= ~a & ~b & ~c & ~d; // all motor pins to 0
    1508:	80 91 47 03 	lds	r24, 0x0347
    150c:	82 23       	and	r24, r18
    150e:	80 93 47 03 	sts	0x0347, r24

  //Serial.println(step, DEC);
  if (style == MICROSTEP) {
    1512:	44 30       	cpi	r20, 0x04	; 4
    1514:	91 f1       	breq	.+100    	; 0x157a <_ZN10AF_Stepper7onestepEhh+0x120>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
    1516:	96 95       	lsr	r25
    1518:	96 95       	lsr	r25
    151a:	96 95       	lsr	r25
    151c:	94 30       	cpi	r25, 0x04	; 4
    151e:	09 f4       	brne	.+2      	; 0x1522 <_ZN10AF_Stepper7onestepEhh+0xc8>
    1520:	af c0       	rjmp	.+350    	; 0x1680 <_ZN10AF_Stepper7onestepEhh+0x226>
    1522:	95 30       	cpi	r25, 0x05	; 5
    1524:	f8 f0       	brcs	.+62     	; 0x1564 <_ZN10AF_Stepper7onestepEhh+0x10a>
    1526:	96 30       	cpi	r25, 0x06	; 6
    1528:	09 f4       	brne	.+2      	; 0x152c <_ZN10AF_Stepper7onestepEhh+0xd2>
    152a:	ae c0       	rjmp	.+348    	; 0x1688 <_ZN10AF_Stepper7onestepEhh+0x22e>
    152c:	96 30       	cpi	r25, 0x06	; 6
    152e:	08 f0       	brcs	.+2      	; 0x1532 <_ZN10AF_Stepper7onestepEhh+0xd8>
    1530:	87 c0       	rjmp	.+270    	; 0x1640 <_ZN10AF_Stepper7onestepEhh+0x1e6>
      break;
    case 4:
      latch_state |= c; // energize coil 3 only
      break; 
    case 5:
      latch_state |= c | d; // energize coil 3+4
    1532:	35 2b       	or	r19, r21
    1534:	38 2b       	or	r19, r24
    1536:	30 93 47 03 	sts	0x0347, r19
      break;
    }
  }

 
  MC.latch_tx();
    153a:	86 e4       	ldi	r24, 0x46	; 70
    153c:	93 e0       	ldi	r25, 0x03	; 3
    153e:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN17AFMotorController8latch_txEv>
  return currentstep;
    1542:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	ff 90       	pop	r15
    154e:	ef 90       	pop	r14
    1550:	df 90       	pop	r13
    1552:	08 95       	ret
  uint8_t a, b, c, d;
  uint8_t ocrb, ocra;

  ocra = ocrb = 255;

  if (steppernum == 1) {
    1554:	21 ee       	ldi	r18, 0xE1	; 225
    1556:	36 e0       	ldi	r19, 0x06	; 6
    1558:	d3 2e       	mov	r13, r19
    155a:	30 e1       	ldi	r19, 0x10	; 16
    155c:	58 e0       	ldi	r21, 0x08	; 8
    155e:	e2 e0       	ldi	r30, 0x02	; 2
    1560:	f4 e0       	ldi	r31, 0x04	; 4
    1562:	99 cf       	rjmp	.-206    	; 0x1496 <_ZN10AF_Stepper7onestepEhh+0x3c>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
    1564:	92 30       	cpi	r25, 0x02	; 2
    1566:	09 f4       	brne	.+2      	; 0x156a <_ZN10AF_Stepper7onestepEhh+0x110>
    1568:	93 c0       	rjmp	.+294    	; 0x1690 <_ZN10AF_Stepper7onestepEhh+0x236>
    156a:	93 30       	cpi	r25, 0x03	; 3
    156c:	08 f4       	brcc	.+2      	; 0x1570 <_ZN10AF_Stepper7onestepEhh+0x116>
    156e:	62 c0       	rjmp	.+196    	; 0x1634 <_ZN10AF_Stepper7onestepEhh+0x1da>
      break;
    case 2:
      latch_state |= b; // energize coil 2 only
      break;
    case 3:
      latch_state |= b | c; // energize coil 2+3
    1570:	5e 2b       	or	r21, r30
    1572:	58 2b       	or	r21, r24
    1574:	50 93 47 03 	sts	0x0347, r21
      break;
    1578:	e0 cf       	rjmp	.-64     	; 0x153a <_ZN10AF_Stepper7onestepEhh+0xe0>
  // release all
  latch_state &= ~a & ~b & ~c & ~d; // all motor pins to 0

  //Serial.println(step, DEC);
  if (style == MICROSTEP) {
    if ((currentstep >= 0) && (currentstep < MICROSTEPS))
    157a:	90 31       	cpi	r25, 0x10	; 16
    157c:	18 f4       	brcc	.+6      	; 0x1584 <_ZN10AF_Stepper7onestepEhh+0x12a>
      latch_state |= a | b;
    157e:	8d 29       	or	r24, r13
    1580:	80 93 47 03 	sts	0x0347, r24
    if ((currentstep >= MICROSTEPS) && (currentstep < MICROSTEPS*2))
    1584:	89 2f       	mov	r24, r25
    1586:	80 51       	subi	r24, 0x10	; 16
    1588:	80 31       	cpi	r24, 0x10	; 16
    158a:	30 f4       	brcc	.+12     	; 0x1598 <_ZN10AF_Stepper7onestepEhh+0x13e>
      latch_state |= b | c;
    158c:	e5 2b       	or	r30, r21
    158e:	20 91 47 03 	lds	r18, 0x0347
    1592:	2e 2b       	or	r18, r30
    1594:	20 93 47 03 	sts	0x0347, r18
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
    1598:	89 2f       	mov	r24, r25
    159a:	80 52       	subi	r24, 0x20	; 32
    159c:	80 31       	cpi	r24, 0x10	; 16
    159e:	30 f4       	brcc	.+12     	; 0x15ac <_ZN10AF_Stepper7onestepEhh+0x152>
      latch_state |= c | d;
    15a0:	53 2b       	or	r21, r19
    15a2:	20 91 47 03 	lds	r18, 0x0347
    15a6:	25 2b       	or	r18, r21
    15a8:	20 93 47 03 	sts	0x0347, r18
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
    15ac:	90 53       	subi	r25, 0x30	; 48
    15ae:	90 31       	cpi	r25, 0x10	; 16
    15b0:	20 f6       	brcc	.-120    	; 0x153a <_ZN10AF_Stepper7onestepEhh+0xe0>
      latch_state |= d | a;
    15b2:	3f 2b       	or	r19, r31
    15b4:	90 91 47 03 	lds	r25, 0x0347
    15b8:	93 2b       	or	r25, r19
    15ba:	90 93 47 03 	sts	0x0347, r25
    15be:	bd cf       	rjmp	.-134    	; 0x153a <_ZN10AF_Stepper7onestepEhh+0xe0>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    15c0:	70 93 b3 00 	sts	0x00B3, r23
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    15c4:	60 93 b4 00 	sts	0x00B4, r22
    15c8:	9f cf       	rjmp	.-194    	; 0x1508 <_ZN10AF_Stepper7onestepEhh+0xae>
      else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == DOUBLE) {
    if (! (currentstep/(MICROSTEPS/2) % 2)) { // we're at an even step, weird
    15ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    15cc:	79 2f       	mov	r23, r25
    15ce:	76 95       	lsr	r23
    15d0:	76 95       	lsr	r23
    15d2:	76 95       	lsr	r23
    15d4:	70 fd       	sbrc	r23, 0
    15d6:	29 c0       	rjmp	.+82     	; 0x162a <_ZN10AF_Stepper7onestepEhh+0x1d0>
      if (dir == FORWARD) {
    15d8:	61 30       	cpi	r22, 0x01	; 1
    15da:	09 f4       	brne	.+2      	; 0x15de <_ZN10AF_Stepper7onestepEhh+0x184>
    15dc:	47 c0       	rjmp	.+142    	; 0x166c <_ZN10AF_Stepper7onestepEhh+0x212>
    }
  } else if (style == INTERLEAVE) {
    if (dir == FORWARD) {
       currentstep += MICROSTEPS/2;
    } else {
       currentstep -= MICROSTEPS/2;
    15de:	98 50       	subi	r25, 0x08	; 8
    15e0:	9b 87       	std	Y+11, r25	; 0x0b
    15e2:	88 cf       	rjmp	.-240    	; 0x14f4 <_ZN10AF_Stepper7onestepEhh+0x9a>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    15e4:	77 bd       	out	0x27, r23	; 39
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    15e6:	68 bd       	out	0x28, r22	; 40
    15e8:	8f cf       	rjmp	.-226    	; 0x1508 <_ZN10AF_Stepper7onestepEhh+0xae>
      } else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == INTERLEAVE) {
    if (dir == FORWARD) {
    15ea:	61 30       	cpi	r22, 0x01	; 1
    15ec:	f1 f1       	breq	.+124    	; 0x166a <_ZN10AF_Stepper7onestepEhh+0x210>
       currentstep += MICROSTEPS/2;
    } else {
       currentstep -= MICROSTEPS/2;
    15ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    15f0:	f6 cf       	rjmp	.-20     	; 0x15de <_ZN10AF_Stepper7onestepEhh+0x184>

    ocra = ocrb = 0;
    if ( (currentstep >= 0) && (currentstep < MICROSTEPS)) {
      ocra = microstepcurve[MICROSTEPS - currentstep];
      ocrb = microstepcurve[currentstep];
    } else if  ( (currentstep >= MICROSTEPS) && (currentstep < MICROSTEPS*2)) {
    15f2:	69 2f       	mov	r22, r25
    15f4:	60 51       	subi	r22, 0x10	; 16
    15f6:	60 31       	cpi	r22, 0x10	; 16
    15f8:	50 f1       	brcs	.+84     	; 0x164e <_ZN10AF_Stepper7onestepEhh+0x1f4>
      ocra = microstepcurve[currentstep - MICROSTEPS];
      ocrb = microstepcurve[MICROSTEPS*2 - currentstep];
    } else if  ( (currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3)) {
    15fa:	69 2f       	mov	r22, r25
    15fc:	60 52       	subi	r22, 0x20	; 32
    15fe:	60 31       	cpi	r22, 0x10	; 16
    1600:	08 f0       	brcs	.+2      	; 0x1604 <_ZN10AF_Stepper7onestepEhh+0x1aa>
    1602:	55 c0       	rjmp	.+170    	; 0x16ae <_ZN10AF_Stepper7onestepEhh+0x254>
      ocra = microstepcurve[MICROSTEPS*3 - currentstep];
    1604:	09 2f       	mov	r16, r25
    1606:	10 e0       	ldi	r17, 0x00	; 0
    1608:	69 ee       	ldi	r22, 0xE9	; 233
    160a:	71 e0       	ldi	r23, 0x01	; 1
    160c:	60 1b       	sub	r22, r16
    160e:	71 0b       	sbc	r23, r17
    1610:	db 01       	movw	r26, r22
    1612:	7c 91       	ld	r23, X
      ocrb = microstepcurve[currentstep - MICROSTEPS*2];
    1614:	07 56       	subi	r16, 0x67	; 103
    1616:	1e 4f       	sbci	r17, 0xFE	; 254
    1618:	d8 01       	movw	r26, r16
    161a:	6c 91       	ld	r22, X
    161c:	6d cf       	rjmp	.-294    	; 0x14f8 <_ZN10AF_Stepper7onestepEhh+0x9e>
      }
      else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next even step
      if (dir == FORWARD) {
    161e:	61 30       	cpi	r22, 0x01	; 1
    1620:	f1 f1       	breq	.+124    	; 0x169e <_ZN10AF_Stepper7onestepEhh+0x244>
	currentstep += MICROSTEPS;
      }
      else {
	currentstep -= MICROSTEPS;
    1622:	90 51       	subi	r25, 0x10	; 16
    1624:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
    1626:	9b 85       	ldd	r25, Y+11	; 0x0b
    1628:	65 cf       	rjmp	.-310    	; 0x14f4 <_ZN10AF_Stepper7onestepEhh+0x9a>
	currentstep += MICROSTEPS/2;
      } else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next odd step
      if (dir == FORWARD) {
    162a:	61 30       	cpi	r22, 0x01	; 1
    162c:	11 f1       	breq	.+68     	; 0x1672 <_ZN10AF_Stepper7onestepEhh+0x218>
	currentstep += MICROSTEPS;
      } else {
	currentstep -= MICROSTEPS;
    162e:	90 51       	subi	r25, 0x10	; 16
    1630:	9b 87       	std	Y+11, r25	; 0x0b
    1632:	60 cf       	rjmp	.-320    	; 0x14f4 <_ZN10AF_Stepper7onestepEhh+0x9a>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
    1634:	91 30       	cpi	r25, 0x01	; 1
    1636:	01 f1       	breq	.+64     	; 0x1678 <_ZN10AF_Stepper7onestepEhh+0x21e>
    case 0:
      latch_state |= a; // energize coil 1 only
    1638:	8f 2b       	or	r24, r31
    163a:	80 93 47 03 	sts	0x0347, r24
      break;
    163e:	7d cf       	rjmp	.-262    	; 0x153a <_ZN10AF_Stepper7onestepEhh+0xe0>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
    1640:	97 30       	cpi	r25, 0x07	; 7
    1642:	d1 f7       	brne	.-12     	; 0x1638 <_ZN10AF_Stepper7onestepEhh+0x1de>
      break;
    case 6:
      latch_state |= d; // energize coil 4 only
      break;
    case 7:
      latch_state |= d | a; // energize coil 1+4
    1644:	3f 2b       	or	r19, r31
    1646:	38 2b       	or	r19, r24
    1648:	30 93 47 03 	sts	0x0347, r19
    164c:	76 cf       	rjmp	.-276    	; 0x153a <_ZN10AF_Stepper7onestepEhh+0xe0>
    ocra = ocrb = 0;
    if ( (currentstep >= 0) && (currentstep < MICROSTEPS)) {
      ocra = microstepcurve[MICROSTEPS - currentstep];
      ocrb = microstepcurve[currentstep];
    } else if  ( (currentstep >= MICROSTEPS) && (currentstep < MICROSTEPS*2)) {
      ocra = microstepcurve[currentstep - MICROSTEPS];
    164e:	e9 2e       	mov	r14, r25
    1650:	ff 24       	eor	r15, r15
    1652:	b7 01       	movw	r22, r14
    1654:	67 55       	subi	r22, 0x57	; 87
    1656:	7e 4f       	sbci	r23, 0xFE	; 254
    1658:	db 01       	movw	r26, r22
    165a:	7c 91       	ld	r23, X
      ocrb = microstepcurve[MICROSTEPS*2 - currentstep];
    165c:	09 ed       	ldi	r16, 0xD9	; 217
    165e:	11 e0       	ldi	r17, 0x01	; 1
    1660:	0e 19       	sub	r16, r14
    1662:	1f 09       	sbc	r17, r15
    1664:	d8 01       	movw	r26, r16
    1666:	6c 91       	ld	r22, X
    1668:	47 cf       	rjmp	.-370    	; 0x14f8 <_ZN10AF_Stepper7onestepEhh+0x9e>
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == INTERLEAVE) {
    if (dir == FORWARD) {
       currentstep += MICROSTEPS/2;
    166a:	9b 85       	ldd	r25, Y+11	; 0x0b
    166c:	98 5f       	subi	r25, 0xF8	; 248
    166e:	9b 87       	std	Y+11, r25	; 0x0b
    1670:	41 cf       	rjmp	.-382    	; 0x14f4 <_ZN10AF_Stepper7onestepEhh+0x9a>
      } else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next odd step
      if (dir == FORWARD) {
	currentstep += MICROSTEPS;
    1672:	90 5f       	subi	r25, 0xF0	; 240
    1674:	9b 87       	std	Y+11, r25	; 0x0b
    1676:	3e cf       	rjmp	.-388    	; 0x14f4 <_ZN10AF_Stepper7onestepEhh+0x9a>
    switch (currentstep/(MICROSTEPS/2)) {
    case 0:
      latch_state |= a; // energize coil 1 only
      break;
    case 1:
      latch_state |= a | b; // energize coil 1+2
    1678:	8d 29       	or	r24, r13
    167a:	80 93 47 03 	sts	0x0347, r24
      break;
    167e:	5d cf       	rjmp	.-326    	; 0x153a <_ZN10AF_Stepper7onestepEhh+0xe0>
      break;
    case 3:
      latch_state |= b | c; // energize coil 2+3
      break;
    case 4:
      latch_state |= c; // energize coil 3 only
    1680:	85 2b       	or	r24, r21
    1682:	80 93 47 03 	sts	0x0347, r24
      break; 
    1686:	59 cf       	rjmp	.-334    	; 0x153a <_ZN10AF_Stepper7onestepEhh+0xe0>
    case 5:
      latch_state |= c | d; // energize coil 3+4
      break;
    case 6:
      latch_state |= d; // energize coil 4 only
    1688:	83 2b       	or	r24, r19
    168a:	80 93 47 03 	sts	0x0347, r24
      break;
    168e:	55 cf       	rjmp	.-342    	; 0x153a <_ZN10AF_Stepper7onestepEhh+0xe0>
      break;
    case 1:
      latch_state |= a | b; // energize coil 1+2
      break;
    case 2:
      latch_state |= b; // energize coil 2 only
    1690:	8e 2b       	or	r24, r30
    1692:	80 93 47 03 	sts	0x0347, r24
      break;
    1696:	51 cf       	rjmp	.-350    	; 0x153a <_ZN10AF_Stepper7onestepEhh+0xe0>
    }
  } 

  if (style == MICROSTEP) {
    if (dir == FORWARD) {
      currentstep++;
    1698:	9f 5f       	subi	r25, 0xFF	; 255
    169a:	9b 87       	std	Y+11, r25	; 0x0b
    169c:	0c cf       	rjmp	.-488    	; 0x14b6 <_ZN10AF_Stepper7onestepEhh+0x5c>
      else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next even step
      if (dir == FORWARD) {
	currentstep += MICROSTEPS;
    169e:	90 5f       	subi	r25, 0xF0	; 240
    16a0:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
    16a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16a4:	27 cf       	rjmp	.-434    	; 0x14f4 <_ZN10AF_Stepper7onestepEhh+0x9a>

  // next determine what sort of stepping procedure we're up to
  if (style == SINGLE) {
    if ((currentstep/(MICROSTEPS/2)) % 2) { // we're at an odd step, weird
      if (dir == FORWARD) {
	currentstep += MICROSTEPS/2;
    16a6:	98 5f       	subi	r25, 0xF8	; 248
    16a8:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
    16aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    16ac:	23 cf       	rjmp	.-442    	; 0x14f4 <_ZN10AF_Stepper7onestepEhh+0x9a>
      ocra = microstepcurve[currentstep - MICROSTEPS];
      ocrb = microstepcurve[MICROSTEPS*2 - currentstep];
    } else if  ( (currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3)) {
      ocra = microstepcurve[MICROSTEPS*3 - currentstep];
      ocrb = microstepcurve[currentstep - MICROSTEPS*2];
    } else if  ( (currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4)) {
    16ae:	69 2f       	mov	r22, r25
    16b0:	60 53       	subi	r22, 0x30	; 48
    16b2:	60 31       	cpi	r22, 0x10	; 16
    16b4:	18 f0       	brcs	.+6      	; 0x16bc <_ZN10AF_Stepper7onestepEhh+0x262>
    16b6:	70 e0       	ldi	r23, 0x00	; 0
    16b8:	60 e0       	ldi	r22, 0x00	; 0
    16ba:	1e cf       	rjmp	.-452    	; 0x14f8 <_ZN10AF_Stepper7onestepEhh+0x9e>
      ocra = microstepcurve[currentstep - MICROSTEPS*3];
    16bc:	e9 2e       	mov	r14, r25
    16be:	ff 24       	eor	r15, r15
    16c0:	b7 01       	movw	r22, r14
    16c2:	67 57       	subi	r22, 0x77	; 119
    16c4:	7e 4f       	sbci	r23, 0xFE	; 254
    16c6:	db 01       	movw	r26, r22
    16c8:	7c 91       	ld	r23, X
      ocrb = microstepcurve[MICROSTEPS*4 - currentstep];
    16ca:	09 ef       	ldi	r16, 0xF9	; 249
    16cc:	11 e0       	ldi	r17, 0x01	; 1
    16ce:	0e 19       	sub	r16, r14
    16d0:	1f 09       	sbc	r17, r15
    16d2:	d8 01       	movw	r26, r16
    16d4:	6c 91       	ld	r22, X
    16d6:	10 cf       	rjmp	.-480    	; 0x14f8 <_ZN10AF_Stepper7onestepEhh+0x9e>

000016d8 <_ZN10AF_Stepper4stepEjhh>:
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    MC.latch_tx();
  }
}

void AF_Stepper::step(uint16_t steps, uint8_t dir,  uint8_t style) {
    16d8:	5f 92       	push	r5
    16da:	6f 92       	push	r6
    16dc:	7f 92       	push	r7
    16de:	8f 92       	push	r8
    16e0:	9f 92       	push	r9
    16e2:	af 92       	push	r10
    16e4:	bf 92       	push	r11
    16e6:	cf 92       	push	r12
    16e8:	df 92       	push	r13
    16ea:	ef 92       	push	r14
    16ec:	ff 92       	push	r15
    16ee:	0f 93       	push	r16
    16f0:	1f 93       	push	r17
    16f2:	cf 93       	push	r28
    16f4:	df 93       	push	r29
    16f6:	ec 01       	movw	r28, r24
    16f8:	8b 01       	movw	r16, r22
    16fa:	54 2e       	mov	r5, r20
    16fc:	f2 2e       	mov	r15, r18
  uint32_t uspers = usperstep;
    16fe:	8b 80       	ldd	r8, Y+3	; 0x03
    1700:	9c 80       	ldd	r9, Y+4	; 0x04
    1702:	ad 80       	ldd	r10, Y+5	; 0x05
    1704:	be 80       	ldd	r11, Y+6	; 0x06
  uint8_t ret = 0;

  if (style == INTERLEAVE) {
    1706:	23 e0       	ldi	r18, 0x03	; 3
    1708:	f2 16       	cp	r15, r18
    170a:	09 f4       	brne	.+2      	; 0x170e <_ZN10AF_Stepper4stepEjhh+0x36>
    170c:	a5 c0       	rjmp	.+330    	; 0x1858 <_ZN10AF_Stepper4stepEjhh+0x180>
    uspers /= 2;
  }
 else if (style == MICROSTEP) {
    170e:	84 e0       	ldi	r24, 0x04	; 4
    1710:	f8 16       	cp	r15, r24
    1712:	09 f4       	brne	.+2      	; 0x1716 <_ZN10AF_Stepper4stepEjhh+0x3e>
    1714:	a6 c0       	rjmp	.+332    	; 0x1862 <_ZN10AF_Stepper4stepEjhh+0x18a>
#endif
  }

  while (steps--) {
    ret = onestep(dir, style);
    delay(uspers/1000); // in ms
    1716:	c5 01       	movw	r24, r10
    1718:	b4 01       	movw	r22, r8
    171a:	28 ee       	ldi	r18, 0xE8	; 232
    171c:	33 e0       	ldi	r19, 0x03	; 3
    171e:	40 e0       	ldi	r20, 0x00	; 0
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	0e 94 61 29 	call	0x52c2	; 0x52c2 <__udivmodsi4>
    1726:	72 2e       	mov	r7, r18
    1728:	c3 2e       	mov	r12, r19
    172a:	d4 2e       	mov	r13, r20
    172c:	e5 2e       	mov	r14, r21
    steppingcounter += (uspers % 1000);
    172e:	c5 01       	movw	r24, r10
    1730:	b4 01       	movw	r22, r8
    1732:	28 ee       	ldi	r18, 0xE8	; 232
    1734:	33 e0       	ldi	r19, 0x03	; 3
    1736:	40 e0       	ldi	r20, 0x00	; 0
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	0e 94 61 29 	call	0x52c2	; 0x52c2 <__udivmodsi4>
    173e:	4b 01       	movw	r8, r22
    1740:	5c 01       	movw	r10, r24
    1742:	66 24       	eor	r6, r6
    1744:	02 c0       	rjmp	.+4      	; 0x174a <_ZN10AF_Stepper4stepEjhh+0x72>
    if (steppingcounter >= 1000) {
      delay(1);
      steppingcounter -= 1000;
    1746:	01 50       	subi	r16, 0x01	; 1
    1748:	10 40       	sbci	r17, 0x00	; 0
#ifdef MOTORDEBUG
    Serial.print("steps = "); Serial.println(steps, DEC);
#endif
  }

  while (steps--) {
    174a:	01 15       	cp	r16, r1
    174c:	11 05       	cpc	r17, r1
    174e:	99 f1       	breq	.+102    	; 0x17b6 <_ZN10AF_Stepper4stepEjhh+0xde>
    ret = onestep(dir, style);
    1750:	ce 01       	movw	r24, r28
    1752:	65 2d       	mov	r22, r5
    1754:	4f 2d       	mov	r20, r15
    1756:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN10AF_Stepper7onestepEhh>
    175a:	68 2e       	mov	r6, r24
    delay(uspers/1000); // in ms
    175c:	67 2d       	mov	r22, r7
    175e:	7c 2d       	mov	r23, r12
    1760:	8d 2d       	mov	r24, r13
    1762:	9e 2d       	mov	r25, r14
    1764:	0e 94 39 15 	call	0x2a72	; 0x2a72 <delay>
    steppingcounter += (uspers % 1000);
    1768:	8f 81       	ldd	r24, Y+7	; 0x07
    176a:	98 85       	ldd	r25, Y+8	; 0x08
    176c:	a9 85       	ldd	r26, Y+9	; 0x09
    176e:	ba 85       	ldd	r27, Y+10	; 0x0a
    1770:	88 0d       	add	r24, r8
    1772:	99 1d       	adc	r25, r9
    1774:	aa 1d       	adc	r26, r10
    1776:	bb 1d       	adc	r27, r11
    1778:	8f 83       	std	Y+7, r24	; 0x07
    177a:	98 87       	std	Y+8, r25	; 0x08
    177c:	a9 87       	std	Y+9, r26	; 0x09
    177e:	ba 87       	std	Y+10, r27	; 0x0a
    if (steppingcounter >= 1000) {
    1780:	88 3e       	cpi	r24, 0xE8	; 232
    1782:	23 e0       	ldi	r18, 0x03	; 3
    1784:	92 07       	cpc	r25, r18
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	a2 07       	cpc	r26, r18
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	b2 07       	cpc	r27, r18
    178e:	d8 f2       	brcs	.-74     	; 0x1746 <_ZN10AF_Stepper4stepEjhh+0x6e>
      delay(1);
    1790:	61 e0       	ldi	r22, 0x01	; 1
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	0e 94 39 15 	call	0x2a72	; 0x2a72 <delay>
      steppingcounter -= 1000;
    179c:	8f 81       	ldd	r24, Y+7	; 0x07
    179e:	98 85       	ldd	r25, Y+8	; 0x08
    17a0:	a9 85       	ldd	r26, Y+9	; 0x09
    17a2:	ba 85       	ldd	r27, Y+10	; 0x0a
    17a4:	88 5e       	subi	r24, 0xE8	; 232
    17a6:	93 40       	sbci	r25, 0x03	; 3
    17a8:	a0 40       	sbci	r26, 0x00	; 0
    17aa:	b0 40       	sbci	r27, 0x00	; 0
    17ac:	8f 83       	std	Y+7, r24	; 0x07
    17ae:	98 87       	std	Y+8, r25	; 0x08
    17b0:	a9 87       	std	Y+9, r26	; 0x09
    17b2:	ba 87       	std	Y+10, r27	; 0x0a
    17b4:	c8 cf       	rjmp	.-112    	; 0x1746 <_ZN10AF_Stepper4stepEjhh+0x6e>
    }
  }
  if (style == MICROSTEP) {
    17b6:	84 e0       	ldi	r24, 0x04	; 4
    17b8:	f8 16       	cp	r15, r24
    17ba:	81 f0       	breq	.+32     	; 0x17dc <_ZN10AF_Stepper4stepEjhh+0x104>
	delay(1);
	steppingcounter -= 1000;
      } 
    }
  }
}
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	df 90       	pop	r13
    17ca:	cf 90       	pop	r12
    17cc:	bf 90       	pop	r11
    17ce:	af 90       	pop	r10
    17d0:	9f 90       	pop	r9
    17d2:	8f 90       	pop	r8
    17d4:	7f 90       	pop	r7
    17d6:	6f 90       	pop	r6
    17d8:	5f 90       	pop	r5
    17da:	08 95       	ret
      delay(1);
      steppingcounter -= 1000;
    }
  }
  if (style == MICROSTEP) {
    while ((ret != 0) && (ret != MICROSTEPS)) {
    17dc:	66 20       	and	r6, r6
    17de:	71 f3       	breq	.-36     	; 0x17bc <_ZN10AF_Stepper4stepEjhh+0xe4>
    17e0:	20 e1       	ldi	r18, 0x10	; 16
    17e2:	62 16       	cp	r6, r18
    17e4:	19 f4       	brne	.+6      	; 0x17ec <_ZN10AF_Stepper4stepEjhh+0x114>
    17e6:	ea cf       	rjmp	.-44     	; 0x17bc <_ZN10AF_Stepper4stepEjhh+0xe4>
    17e8:	00 31       	cpi	r16, 0x10	; 16
    17ea:	41 f3       	breq	.-48     	; 0x17bc <_ZN10AF_Stepper4stepEjhh+0xe4>
      ret = onestep(dir, style);
    17ec:	ce 01       	movw	r24, r28
    17ee:	65 2d       	mov	r22, r5
    17f0:	44 e0       	ldi	r20, 0x04	; 4
    17f2:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN10AF_Stepper7onestepEhh>
    17f6:	08 2f       	mov	r16, r24
      delay(uspers/1000); // in ms
    17f8:	67 2d       	mov	r22, r7
    17fa:	7c 2d       	mov	r23, r12
    17fc:	8d 2d       	mov	r24, r13
    17fe:	9e 2d       	mov	r25, r14
    1800:	0e 94 39 15 	call	0x2a72	; 0x2a72 <delay>
      steppingcounter += (uspers % 1000);
    1804:	8f 81       	ldd	r24, Y+7	; 0x07
    1806:	98 85       	ldd	r25, Y+8	; 0x08
    1808:	a9 85       	ldd	r26, Y+9	; 0x09
    180a:	ba 85       	ldd	r27, Y+10	; 0x0a
    180c:	88 0d       	add	r24, r8
    180e:	99 1d       	adc	r25, r9
    1810:	aa 1d       	adc	r26, r10
    1812:	bb 1d       	adc	r27, r11
    1814:	8f 83       	std	Y+7, r24	; 0x07
    1816:	98 87       	std	Y+8, r25	; 0x08
    1818:	a9 87       	std	Y+9, r26	; 0x09
    181a:	ba 87       	std	Y+10, r27	; 0x0a
      if (steppingcounter >= 1000) {
    181c:	88 3e       	cpi	r24, 0xE8	; 232
    181e:	23 e0       	ldi	r18, 0x03	; 3
    1820:	92 07       	cpc	r25, r18
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	a2 07       	cpc	r26, r18
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	b2 07       	cpc	r27, r18
    182a:	90 f0       	brcs	.+36     	; 0x1850 <_ZN10AF_Stepper4stepEjhh+0x178>
	delay(1);
    182c:	61 e0       	ldi	r22, 0x01	; 1
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	0e 94 39 15 	call	0x2a72	; 0x2a72 <delay>
	steppingcounter -= 1000;
    1838:	8f 81       	ldd	r24, Y+7	; 0x07
    183a:	98 85       	ldd	r25, Y+8	; 0x08
    183c:	a9 85       	ldd	r26, Y+9	; 0x09
    183e:	ba 85       	ldd	r27, Y+10	; 0x0a
    1840:	88 5e       	subi	r24, 0xE8	; 232
    1842:	93 40       	sbci	r25, 0x03	; 3
    1844:	a0 40       	sbci	r26, 0x00	; 0
    1846:	b0 40       	sbci	r27, 0x00	; 0
    1848:	8f 83       	std	Y+7, r24	; 0x07
    184a:	98 87       	std	Y+8, r25	; 0x08
    184c:	a9 87       	std	Y+9, r26	; 0x09
    184e:	ba 87       	std	Y+10, r27	; 0x0a
      delay(1);
      steppingcounter -= 1000;
    }
  }
  if (style == MICROSTEP) {
    while ((ret != 0) && (ret != MICROSTEPS)) {
    1850:	00 23       	and	r16, r16
    1852:	09 f4       	brne	.+2      	; 0x1856 <_ZN10AF_Stepper4stepEjhh+0x17e>
    1854:	b3 cf       	rjmp	.-154    	; 0x17bc <_ZN10AF_Stepper4stepEjhh+0xe4>
    1856:	c8 cf       	rjmp	.-112    	; 0x17e8 <_ZN10AF_Stepper4stepEjhh+0x110>
void AF_Stepper::step(uint16_t steps, uint8_t dir,  uint8_t style) {
  uint32_t uspers = usperstep;
  uint8_t ret = 0;

  if (style == INTERLEAVE) {
    uspers /= 2;
    1858:	b6 94       	lsr	r11
    185a:	a7 94       	ror	r10
    185c:	97 94       	ror	r9
    185e:	87 94       	ror	r8
    1860:	5a cf       	rjmp	.-332    	; 0x1716 <_ZN10AF_Stepper4stepEjhh+0x3e>
  }
 else if (style == MICROSTEP) {
    uspers /= MICROSTEPS;
    1862:	54 e0       	ldi	r21, 0x04	; 4
    1864:	b6 94       	lsr	r11
    1866:	a7 94       	ror	r10
    1868:	97 94       	ror	r9
    186a:	87 94       	ror	r8
    186c:	5a 95       	dec	r21
    186e:	d1 f7       	brne	.-12     	; 0x1864 <_ZN10AF_Stepper4stepEjhh+0x18c>
    steps *= MICROSTEPS;
    1870:	02 95       	swap	r16
    1872:	12 95       	swap	r17
    1874:	10 7f       	andi	r17, 0xF0	; 240
    1876:	10 27       	eor	r17, r16
    1878:	00 7f       	andi	r16, 0xF0	; 240
    187a:	10 27       	eor	r17, r16
    187c:	4c cf       	rjmp	.-360    	; 0x1716 <_ZN10AF_Stepper4stepEjhh+0x3e>

0000187e <_ZN10AF_Stepper7releaseEv>:
  //usperstep = 60000000 / ((uint32_t)revsteps * (uint32_t)rpm);
  steppingcounter = 0;
}

void AF_Stepper::release(void) {
  if (steppernum == 1) {
    187e:	fc 01       	movw	r30, r24
    1880:	82 81       	ldd	r24, Z+2	; 0x02
    1882:	81 30       	cpi	r24, 0x01	; 1
    1884:	69 f0       	breq	.+26     	; 0x18a0 <_ZN10AF_Stepper7releaseEv+0x22>
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    MC.latch_tx();
  } else if (steppernum == 2) {
    1886:	82 30       	cpi	r24, 0x02	; 2
    1888:	09 f0       	breq	.+2      	; 0x188c <_ZN10AF_Stepper7releaseEv+0xe>
    188a:	08 95       	ret
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B) &
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    188c:	80 91 47 03 	lds	r24, 0x0347
    1890:	8e 71       	andi	r24, 0x1E	; 30
    1892:	80 93 47 03 	sts	0x0347, r24
    MC.latch_tx();
    1896:	86 e4       	ldi	r24, 0x46	; 70
    1898:	93 e0       	ldi	r25, 0x03	; 3
    189a:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN17AFMotorController8latch_txEv>
    189e:	08 95       	ret
}

void AF_Stepper::release(void) {
  if (steppernum == 1) {
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    18a0:	80 91 47 03 	lds	r24, 0x0347
    18a4:	81 7e       	andi	r24, 0xE1	; 225
    18a6:	80 93 47 03 	sts	0x0347, r24
    MC.latch_tx();
    18aa:	86 e4       	ldi	r24, 0x46	; 70
    18ac:	93 e0       	ldi	r25, 0x03	; 3
    18ae:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN17AFMotorController8latch_txEv>
    18b2:	08 95       	ret

000018b4 <_ZN10AF_DCMotor3runEh>:
  }
}

void AF_DCMotor::run(uint8_t cmd) {
  uint8_t a, b;
  switch (motornum) {
    18b4:	fc 01       	movw	r30, r24
    18b6:	80 81       	ld	r24, Z
    18b8:	82 30       	cpi	r24, 0x02	; 2
    18ba:	09 f4       	brne	.+2      	; 0x18be <_ZN10AF_DCMotor3runEh+0xa>
    18bc:	6a c0       	rjmp	.+212    	; 0x1992 <_ZN10AF_DCMotor3runEh+0xde>
    18be:	83 30       	cpi	r24, 0x03	; 3
    18c0:	30 f0       	brcs	.+12     	; 0x18ce <_ZN10AF_DCMotor3runEh+0x1a>
    18c2:	83 30       	cpi	r24, 0x03	; 3
    18c4:	09 f4       	brne	.+2      	; 0x18c8 <_ZN10AF_DCMotor3runEh+0x14>
    18c6:	62 c0       	rjmp	.+196    	; 0x198c <_ZN10AF_DCMotor3runEh+0xd8>
    18c8:	84 30       	cpi	r24, 0x04	; 4
    18ca:	39 f1       	breq	.+78     	; 0x191a <_ZN10AF_DCMotor3runEh+0x66>
    18cc:	08 95       	ret
    18ce:	81 30       	cpi	r24, 0x01	; 1
    18d0:	e9 f7       	brne	.-6      	; 0x18cc <_ZN10AF_DCMotor3runEh+0x18>
    18d2:	83 e0       	ldi	r24, 0x03	; 3
    18d4:	92 e0       	ldi	r25, 0x02	; 2
    a = MOTOR4_A; b = MOTOR4_B; break;
  default:
    return;
  }
  
  switch (cmd) {
    18d6:	62 30       	cpi	r22, 0x02	; 2
    18d8:	21 f1       	breq	.+72     	; 0x1922 <_ZN10AF_DCMotor3runEh+0x6e>
    18da:	64 30       	cpi	r22, 0x04	; 4
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <_ZN10AF_DCMotor3runEh+0x2c>
    18de:	3b c0       	rjmp	.+118    	; 0x1956 <_ZN10AF_DCMotor3runEh+0xa2>
    18e0:	61 30       	cpi	r22, 0x01	; 1
    18e2:	a1 f7       	brne	.-24     	; 0x18cc <_ZN10AF_DCMotor3runEh+0x18>
  case FORWARD:
    latch_state |= _BV(a);
    latch_state &= ~_BV(b); 
    18e4:	21 e0       	ldi	r18, 0x01	; 1
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	a9 01       	movw	r20, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <_ZN10AF_DCMotor3runEh+0x3c>
    18ec:	44 0f       	add	r20, r20
    18ee:	55 1f       	adc	r21, r21
    18f0:	8a 95       	dec	r24
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <_ZN10AF_DCMotor3runEh+0x38>
    18f4:	84 2f       	mov	r24, r20
    18f6:	80 95       	com	r24
    18f8:	a9 01       	movw	r20, r18
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <_ZN10AF_DCMotor3runEh+0x4c>
    18fc:	44 0f       	add	r20, r20
    18fe:	55 1f       	adc	r21, r21
    1900:	9a 95       	dec	r25
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <_ZN10AF_DCMotor3runEh+0x48>
    1904:	20 91 47 03 	lds	r18, 0x0347
    1908:	24 2b       	or	r18, r20
    190a:	82 23       	and	r24, r18
    190c:	80 93 47 03 	sts	0x0347, r24
    MC.latch_tx();
    1910:	86 e4       	ldi	r24, 0x46	; 70
    1912:	93 e0       	ldi	r25, 0x03	; 3
    1914:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN17AFMotorController8latch_txEv>
    break;
    1918:	08 95       	ret
  case 1:
    a = MOTOR1_A; b = MOTOR1_B; break;
  case 2:
    a = MOTOR2_A; b = MOTOR2_B; break;
  case 3:
    a = MOTOR3_A; b = MOTOR3_B; break;
    191a:	86 e0       	ldi	r24, 0x06	; 6
    191c:	90 e0       	ldi	r25, 0x00	; 0
    a = MOTOR4_A; b = MOTOR4_B; break;
  default:
    return;
  }
  
  switch (cmd) {
    191e:	62 30       	cpi	r22, 0x02	; 2
    1920:	e1 f6       	brne	.-72     	; 0x18da <_ZN10AF_DCMotor3runEh+0x26>
    latch_state &= ~_BV(b); 
    MC.latch_tx();
    break;
  case BACKWARD:
    latch_state &= ~_BV(a);
    latch_state |= _BV(b); 
    1922:	21 e0       	ldi	r18, 0x01	; 1
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	a9 01       	movw	r20, r18
    1928:	02 c0       	rjmp	.+4      	; 0x192e <_ZN10AF_DCMotor3runEh+0x7a>
    192a:	44 0f       	add	r20, r20
    192c:	55 1f       	adc	r21, r21
    192e:	9a 95       	dec	r25
    1930:	e2 f7       	brpl	.-8      	; 0x192a <_ZN10AF_DCMotor3runEh+0x76>
    1932:	94 2f       	mov	r25, r20
    1934:	90 95       	com	r25
    1936:	40 91 47 03 	lds	r20, 0x0347
    193a:	94 23       	and	r25, r20
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <_ZN10AF_DCMotor3runEh+0x8e>
    193e:	22 0f       	add	r18, r18
    1940:	33 1f       	adc	r19, r19
    1942:	8a 95       	dec	r24
    1944:	e2 f7       	brpl	.-8      	; 0x193e <_ZN10AF_DCMotor3runEh+0x8a>
    1946:	92 2b       	or	r25, r18
    1948:	90 93 47 03 	sts	0x0347, r25
    MC.latch_tx();
    194c:	86 e4       	ldi	r24, 0x46	; 70
    194e:	93 e0       	ldi	r25, 0x03	; 3
    1950:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN17AFMotorController8latch_txEv>
    break;
    1954:	08 95       	ret
  case RELEASE:
    latch_state &= ~_BV(a);
    latch_state &= ~_BV(b); 
    1956:	21 e0       	ldi	r18, 0x01	; 1
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	a9 01       	movw	r20, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <_ZN10AF_DCMotor3runEh+0xae>
    195e:	44 0f       	add	r20, r20
    1960:	55 1f       	adc	r21, r21
    1962:	9a 95       	dec	r25
    1964:	e2 f7       	brpl	.-8      	; 0x195e <_ZN10AF_DCMotor3runEh+0xaa>
    1966:	b9 01       	movw	r22, r18
    1968:	02 c0       	rjmp	.+4      	; 0x196e <_ZN10AF_DCMotor3runEh+0xba>
    196a:	66 0f       	add	r22, r22
    196c:	77 1f       	adc	r23, r23
    196e:	8a 95       	dec	r24
    1970:	e2 f7       	brpl	.-8      	; 0x196a <_ZN10AF_DCMotor3runEh+0xb6>
    1972:	cb 01       	movw	r24, r22
    1974:	84 2b       	or	r24, r20
    1976:	80 95       	com	r24
    1978:	20 91 47 03 	lds	r18, 0x0347
    197c:	28 23       	and	r18, r24
    197e:	20 93 47 03 	sts	0x0347, r18
    MC.latch_tx();
    1982:	86 e4       	ldi	r24, 0x46	; 70
    1984:	93 e0       	ldi	r25, 0x03	; 3
    1986:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN17AFMotorController8latch_txEv>
    198a:	08 95       	ret
  }
}

void AF_DCMotor::run(uint8_t cmd) {
  uint8_t a, b;
  switch (motornum) {
    198c:	87 e0       	ldi	r24, 0x07	; 7
    198e:	95 e0       	ldi	r25, 0x05	; 5
  case 1:
    a = MOTOR1_A; b = MOTOR1_B; break;
  case 2:
    a = MOTOR2_A; b = MOTOR2_B; break;
  case 3:
    a = MOTOR3_A; b = MOTOR3_B; break;
    1990:	a2 cf       	rjmp	.-188    	; 0x18d6 <_ZN10AF_DCMotor3runEh+0x22>
  }
}

void AF_DCMotor::run(uint8_t cmd) {
  uint8_t a, b;
  switch (motornum) {
    1992:	84 e0       	ldi	r24, 0x04	; 4
    1994:	91 e0       	ldi	r25, 0x01	; 1
    1996:	9f cf       	rjmp	.-194    	; 0x18d6 <_ZN10AF_DCMotor3runEh+0x22>

00001998 <_ZN17AFMotorController6enableEv>:
#endif

AFMotorController::AFMotorController(void) {
}

void AFMotorController::enable(void) {
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
    199c:	ec 01       	movw	r28, r24
  LATCH_DDR |= _BV(LATCH);
  ENABLE_DDR |= _BV(ENABLE);
  CLK_DDR |= _BV(CLK);
  SER_DDR |= _BV(SER);
  */
  pinMode(MOTORLATCH, OUTPUT);
    199e:	8c e0       	ldi	r24, 0x0C	; 12
    19a0:	61 e0       	ldi	r22, 0x01	; 1
    19a2:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
  pinMode(MOTORENABLE, OUTPUT);
    19a6:	87 e0       	ldi	r24, 0x07	; 7
    19a8:	61 e0       	ldi	r22, 0x01	; 1
    19aa:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
  pinMode(MOTORDATA, OUTPUT);
    19ae:	88 e0       	ldi	r24, 0x08	; 8
    19b0:	61 e0       	ldi	r22, 0x01	; 1
    19b2:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
  pinMode(MOTORCLK, OUTPUT);
    19b6:	84 e0       	ldi	r24, 0x04	; 4
    19b8:	61 e0       	ldi	r22, 0x01	; 1
    19ba:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>

  latch_state = 0;
    19be:	10 92 47 03 	sts	0x0347, r1

  latch_tx();  // "reset"
    19c2:	ce 01       	movw	r24, r28
    19c4:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN17AFMotorController8latch_txEv>

  //ENABLE_PORT &= ~_BV(ENABLE); // enable the chip outputs!
  digitalWrite(MOTORENABLE, LOW);
    19c8:	87 e0       	ldi	r24, 0x07	; 7
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
}
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	08 95       	ret

000019d6 <_ZN10AF_StepperC1Ejh>:

/******************************************
               STEPPERS
******************************************/

AF_Stepper::AF_Stepper(uint16_t steps, uint8_t num) {
    19d6:	ef 92       	push	r14
    19d8:	ff 92       	push	r15
    19da:	1f 93       	push	r17
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	ec 01       	movw	r28, r24
    19e2:	7b 01       	movw	r14, r22
    19e4:	14 2f       	mov	r17, r20
  MC.enable();
    19e6:	86 e4       	ldi	r24, 0x46	; 70
    19e8:	93 e0       	ldi	r25, 0x03	; 3
    19ea:	0e 94 cc 0c 	call	0x1998	; 0x1998 <_ZN17AFMotorController6enableEv>

  revsteps = steps;
    19ee:	f9 82       	std	Y+1, r15	; 0x01
    19f0:	e8 82       	st	Y, r14
  steppernum = num;
    19f2:	1a 83       	std	Y+2, r17	; 0x02
  currentstep = 0;
    19f4:	1b 86       	std	Y+11, r1	; 0x0b

  if (steppernum == 1) {
    19f6:	11 30       	cpi	r17, 0x01	; 1
    19f8:	d1 f1       	breq	.+116    	; 0x1a6e <_ZN10AF_StepperC1Ejh+0x98>
    initPWM1(MOTOR12_64KHZ);
    initPWM2(MOTOR12_64KHZ);
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    19fa:	12 30       	cpi	r17, 0x02	; 2
    19fc:	31 f0       	breq	.+12     	; 0x1a0a <_ZN10AF_StepperC1Ejh+0x34>
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	1f 91       	pop	r17
    1a04:	ff 90       	pop	r15
    1a06:	ef 90       	pop	r14
    1a08:	08 95       	ret
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B) &
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    1a0a:	80 91 47 03 	lds	r24, 0x0347
    1a0e:	8e 71       	andi	r24, 0x1E	; 30
    1a10:	80 93 47 03 	sts	0x0347, r24
    MC.latch_tx();
    1a14:	86 e4       	ldi	r24, 0x46	; 70
    1a16:	93 e0       	ldi	r25, 0x03	; 3
    1a18:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN17AFMotorController8latch_txEv>

    // enable both H bridges
    pinMode(5, OUTPUT);
    1a1c:	85 e0       	ldi	r24, 0x05	; 5
    1a1e:	61 e0       	ldi	r22, 0x01	; 1
    1a20:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    pinMode(6, OUTPUT);
    1a24:	86 e0       	ldi	r24, 0x06	; 6
    1a26:	61 e0       	ldi	r22, 0x01	; 1
    1a28:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    digitalWrite(5, HIGH);
    1a2c:	85 e0       	ldi	r24, 0x05	; 5
    1a2e:	61 e0       	ldi	r22, 0x01	; 1
    1a30:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
    digitalWrite(6, HIGH);
    1a34:	86 e0       	ldi	r24, 0x06	; 6
    1a36:	61 e0       	ldi	r22, 0x01	; 1
    1a38:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    1a3c:	84 b5       	in	r24, 0x24	; 36
    1a3e:	83 68       	ori	r24, 0x83	; 131
    1a40:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    1a42:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    1a44:	86 e0       	ldi	r24, 0x06	; 6
    1a46:	61 e0       	ldi	r22, 0x01	; 1
    1a48:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    1a4c:	84 b5       	in	r24, 0x24	; 36
    1a4e:	83 62       	ori	r24, 0x23	; 35
    1a50:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    1a52:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    1a54:	85 e0       	ldi	r24, 0x05	; 5
    1a56:	61 e0       	ldi	r22, 0x01	; 1
    1a58:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    1a5c:	8f ef       	ldi	r24, 0xFF	; 255
    1a5e:	87 bd       	out	0x27, r24	; 39
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    1a60:	88 bd       	out	0x28, r24	; 40
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	1f 91       	pop	r17
    1a68:	ff 90       	pop	r15
    1a6a:	ef 90       	pop	r14
    1a6c:	08 95       	ret
  steppernum = num;
  currentstep = 0;

  if (steppernum == 1) {
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    1a6e:	80 91 47 03 	lds	r24, 0x0347
    1a72:	81 7e       	andi	r24, 0xE1	; 225
    1a74:	80 93 47 03 	sts	0x0347, r24
    MC.latch_tx();
    1a78:	86 e4       	ldi	r24, 0x46	; 70
    1a7a:	93 e0       	ldi	r25, 0x03	; 3
    1a7c:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN17AFMotorController8latch_txEv>
    
    // enable both H bridges
    pinMode(11, OUTPUT);
    1a80:	8b e0       	ldi	r24, 0x0B	; 11
    1a82:	61 e0       	ldi	r22, 0x01	; 1
    1a84:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    pinMode(3, OUTPUT);
    1a88:	83 e0       	ldi	r24, 0x03	; 3
    1a8a:	61 e0       	ldi	r22, 0x01	; 1
    1a8c:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    digitalWrite(11, HIGH);
    1a90:	8b e0       	ldi	r24, 0x0B	; 11
    1a92:	61 e0       	ldi	r22, 0x01	; 1
    1a94:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
    digitalWrite(3, HIGH);
    1a98:	83 e0       	ldi	r24, 0x03	; 3
    1a9a:	61 e0       	ldi	r22, 0x01	; 1
    1a9c:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    1aa0:	80 91 b0 00 	lds	r24, 0x00B0
    1aa4:	83 68       	ori	r24, 0x83	; 131
    1aa6:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1aaa:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    1aae:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    1ab2:	8b e0       	ldi	r24, 0x0B	; 11
    1ab4:	61 e0       	ldi	r22, 0x01	; 1
    1ab6:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    1aba:	80 91 b0 00 	lds	r24, 0x00B0
    1abe:	83 62       	ori	r24, 0x23	; 35
    1ac0:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1ac4:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    1ac8:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    1acc:	83 e0       	ldi	r24, 0x03	; 3
    1ace:	61 e0       	ldi	r22, 0x01	; 1
    1ad0:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    1ad4:	8f ef       	ldi	r24, 0xFF	; 255
    1ad6:	80 93 b3 00 	sts	0x00B3, r24
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    1ada:	80 93 b4 00 	sts	0x00B4, r24
    1ade:	8f cf       	rjmp	.-226    	; 0x19fe <_ZN10AF_StepperC1Ejh+0x28>

00001ae0 <_ZN10AF_DCMotorC2Ehh>:
#else
   #error "This chip is not supported!"
#endif
}

AF_DCMotor::AF_DCMotor(uint8_t num, uint8_t freq) {
    1ae0:	1f 93       	push	r17
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	0f 92       	push	r0
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	fc 01       	movw	r30, r24
    1aee:	14 2f       	mov	r17, r20
  motornum = num;
    1af0:	60 83       	st	Z, r22
  pwmfreq = freq;
    1af2:	41 83       	std	Z+1, r20	; 0x01

  MC.enable();
    1af4:	86 e4       	ldi	r24, 0x46	; 70
    1af6:	93 e0       	ldi	r25, 0x03	; 3
    1af8:	69 83       	std	Y+1, r22	; 0x01
    1afa:	0e 94 cc 0c 	call	0x1998	; 0x1998 <_ZN17AFMotorController6enableEv>

  switch (num) {
    1afe:	69 81       	ldd	r22, Y+1	; 0x01
    1b00:	62 30       	cpi	r22, 0x02	; 2
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <_ZN10AF_DCMotorC2Ehh+0x26>
    1b04:	50 c0       	rjmp	.+160    	; 0x1ba6 <_ZN10AF_DCMotorC2Ehh+0xc6>
    1b06:	63 30       	cpi	r22, 0x03	; 3
    1b08:	f0 f4       	brcc	.+60     	; 0x1b46 <_ZN10AF_DCMotorC2Ehh+0x66>
    1b0a:	61 30       	cpi	r22, 0x01	; 1
    1b0c:	b9 f4       	brne	.+46     	; 0x1b3c <_ZN10AF_DCMotorC2Ehh+0x5c>
  case 1:
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    1b0e:	80 91 47 03 	lds	r24, 0x0347
    1b12:	83 7f       	andi	r24, 0xF3	; 243
    1b14:	80 93 47 03 	sts	0x0347, r24
    MC.latch_tx();
    1b18:	86 e4       	ldi	r24, 0x46	; 70
    1b1a:	93 e0       	ldi	r25, 0x03	; 3
    1b1c:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    1b20:	80 91 b0 00 	lds	r24, 0x00B0
    1b24:	83 68       	ori	r24, 0x83	; 131
    1b26:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1b2a:	17 70       	andi	r17, 0x07	; 7
    1b2c:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    1b30:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    1b34:	8b e0       	ldi	r24, 0x0B	; 11
    1b36:	61 e0       	ldi	r22, 0x01	; 1
    1b38:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1b3c:	0f 90       	pop	r0
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	1f 91       	pop	r17
    1b44:	08 95       	ret
  motornum = num;
  pwmfreq = freq;

  MC.enable();

  switch (num) {
    1b46:	63 30       	cpi	r22, 0x03	; 3
    1b48:	c1 f0       	breq	.+48     	; 0x1b7a <_ZN10AF_DCMotorC2Ehh+0x9a>
    1b4a:	64 30       	cpi	r22, 0x04	; 4
    1b4c:	b9 f7       	brne	.-18     	; 0x1b3c <_ZN10AF_DCMotorC2Ehh+0x5c>
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM3(freq);
    break;
  case 4:
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    1b4e:	80 91 47 03 	lds	r24, 0x0347
    1b52:	8e 7b       	andi	r24, 0xBE	; 190
    1b54:	80 93 47 03 	sts	0x0347, r24
    MC.latch_tx();
    1b58:	86 e4       	ldi	r24, 0x46	; 70
    1b5a:	93 e0       	ldi	r25, 0x03	; 3
    1b5c:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    1b60:	84 b5       	in	r24, 0x24	; 36
    1b62:	83 62       	ori	r24, 0x23	; 35
    1b64:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    1b66:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    1b68:	85 e0       	ldi	r24, 0x05	; 5
    1b6a:	61 e0       	ldi	r22, 0x01	; 1
    1b6c:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1b70:	0f 90       	pop	r0
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	1f 91       	pop	r17
    1b78:	08 95       	ret
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM2(freq);
    break;
  case 3:
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    1b7a:	80 91 47 03 	lds	r24, 0x0347
    1b7e:	8f 75       	andi	r24, 0x5F	; 95
    1b80:	80 93 47 03 	sts	0x0347, r24
    MC.latch_tx();
    1b84:	86 e4       	ldi	r24, 0x46	; 70
    1b86:	93 e0       	ldi	r25, 0x03	; 3
    1b88:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    1b8c:	84 b5       	in	r24, 0x24	; 36
    1b8e:	83 68       	ori	r24, 0x83	; 131
    1b90:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    1b92:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    1b94:	86 e0       	ldi	r24, 0x06	; 6
    1b96:	61 e0       	ldi	r22, 0x01	; 1
    1b98:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1b9c:	0f 90       	pop	r0
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	1f 91       	pop	r17
    1ba4:	08 95       	ret
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM1(freq);
    break;
  case 2:
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    1ba6:	80 91 47 03 	lds	r24, 0x0347
    1baa:	8d 7e       	andi	r24, 0xED	; 237
    1bac:	80 93 47 03 	sts	0x0347, r24
    MC.latch_tx();
    1bb0:	86 e4       	ldi	r24, 0x46	; 70
    1bb2:	93 e0       	ldi	r25, 0x03	; 3
    1bb4:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    1bb8:	80 91 b0 00 	lds	r24, 0x00B0
    1bbc:	83 62       	ori	r24, 0x23	; 35
    1bbe:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1bc2:	17 70       	andi	r17, 0x07	; 7
    1bc4:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    1bc8:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    1bcc:	83 e0       	ldi	r24, 0x03	; 3
    1bce:	61 e0       	ldi	r22, 0x01	; 1
    1bd0:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1bd4:	0f 90       	pop	r0
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	1f 91       	pop	r17
    1bdc:	08 95       	ret

00001bde <_ZN10AF_DCMotorC1Ehh>:
#else
   #error "This chip is not supported!"
#endif
}

AF_DCMotor::AF_DCMotor(uint8_t num, uint8_t freq) {
    1bde:	1f 93       	push	r17
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	0f 92       	push	r0
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	fc 01       	movw	r30, r24
    1bec:	14 2f       	mov	r17, r20
  motornum = num;
    1bee:	60 83       	st	Z, r22
  pwmfreq = freq;
    1bf0:	41 83       	std	Z+1, r20	; 0x01

  MC.enable();
    1bf2:	86 e4       	ldi	r24, 0x46	; 70
    1bf4:	93 e0       	ldi	r25, 0x03	; 3
    1bf6:	69 83       	std	Y+1, r22	; 0x01
    1bf8:	0e 94 cc 0c 	call	0x1998	; 0x1998 <_ZN17AFMotorController6enableEv>

  switch (num) {
    1bfc:	69 81       	ldd	r22, Y+1	; 0x01
    1bfe:	62 30       	cpi	r22, 0x02	; 2
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <_ZN10AF_DCMotorC1Ehh+0x26>
    1c02:	50 c0       	rjmp	.+160    	; 0x1ca4 <_ZN10AF_DCMotorC1Ehh+0xc6>
    1c04:	63 30       	cpi	r22, 0x03	; 3
    1c06:	f0 f4       	brcc	.+60     	; 0x1c44 <_ZN10AF_DCMotorC1Ehh+0x66>
    1c08:	61 30       	cpi	r22, 0x01	; 1
    1c0a:	b9 f4       	brne	.+46     	; 0x1c3a <_ZN10AF_DCMotorC1Ehh+0x5c>
  case 1:
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    1c0c:	80 91 47 03 	lds	r24, 0x0347
    1c10:	83 7f       	andi	r24, 0xF3	; 243
    1c12:	80 93 47 03 	sts	0x0347, r24
    MC.latch_tx();
    1c16:	86 e4       	ldi	r24, 0x46	; 70
    1c18:	93 e0       	ldi	r25, 0x03	; 3
    1c1a:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    1c1e:	80 91 b0 00 	lds	r24, 0x00B0
    1c22:	83 68       	ori	r24, 0x83	; 131
    1c24:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1c28:	17 70       	andi	r17, 0x07	; 7
    1c2a:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    1c2e:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    1c32:	8b e0       	ldi	r24, 0x0B	; 11
    1c34:	61 e0       	ldi	r22, 0x01	; 1
    1c36:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1c3a:	0f 90       	pop	r0
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	1f 91       	pop	r17
    1c42:	08 95       	ret
  motornum = num;
  pwmfreq = freq;

  MC.enable();

  switch (num) {
    1c44:	63 30       	cpi	r22, 0x03	; 3
    1c46:	c1 f0       	breq	.+48     	; 0x1c78 <_ZN10AF_DCMotorC1Ehh+0x9a>
    1c48:	64 30       	cpi	r22, 0x04	; 4
    1c4a:	b9 f7       	brne	.-18     	; 0x1c3a <_ZN10AF_DCMotorC1Ehh+0x5c>
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM3(freq);
    break;
  case 4:
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    1c4c:	80 91 47 03 	lds	r24, 0x0347
    1c50:	8e 7b       	andi	r24, 0xBE	; 190
    1c52:	80 93 47 03 	sts	0x0347, r24
    MC.latch_tx();
    1c56:	86 e4       	ldi	r24, 0x46	; 70
    1c58:	93 e0       	ldi	r25, 0x03	; 3
    1c5a:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    1c5e:	84 b5       	in	r24, 0x24	; 36
    1c60:	83 62       	ori	r24, 0x23	; 35
    1c62:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    1c64:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    1c66:	85 e0       	ldi	r24, 0x05	; 5
    1c68:	61 e0       	ldi	r22, 0x01	; 1
    1c6a:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1c6e:	0f 90       	pop	r0
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	1f 91       	pop	r17
    1c76:	08 95       	ret
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM2(freq);
    break;
  case 3:
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    1c78:	80 91 47 03 	lds	r24, 0x0347
    1c7c:	8f 75       	andi	r24, 0x5F	; 95
    1c7e:	80 93 47 03 	sts	0x0347, r24
    MC.latch_tx();
    1c82:	86 e4       	ldi	r24, 0x46	; 70
    1c84:	93 e0       	ldi	r25, 0x03	; 3
    1c86:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    1c8a:	84 b5       	in	r24, 0x24	; 36
    1c8c:	83 68       	ori	r24, 0x83	; 131
    1c8e:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    1c90:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    1c92:	86 e0       	ldi	r24, 0x06	; 6
    1c94:	61 e0       	ldi	r22, 0x01	; 1
    1c96:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1c9a:	0f 90       	pop	r0
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	1f 91       	pop	r17
    1ca2:	08 95       	ret
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM1(freq);
    break;
  case 2:
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    1ca4:	80 91 47 03 	lds	r24, 0x0347
    1ca8:	8d 7e       	andi	r24, 0xED	; 237
    1caa:	80 93 47 03 	sts	0x0347, r24
    MC.latch_tx();
    1cae:	86 e4       	ldi	r24, 0x46	; 70
    1cb0:	93 e0       	ldi	r25, 0x03	; 3
    1cb2:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    1cb6:	80 91 b0 00 	lds	r24, 0x00B0
    1cba:	83 62       	ori	r24, 0x23	; 35
    1cbc:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1cc0:	17 70       	andi	r17, 0x07	; 7
    1cc2:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    1cc6:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    1cca:	83 e0       	ldi	r24, 0x03	; 3
    1ccc:	61 e0       	ldi	r22, 0x01	; 1
    1cce:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1cd2:	0f 90       	pop	r0
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	1f 91       	pop	r17
    1cda:	08 95       	ret

00001cdc <_ZN10AF_StepperC2Ejh>:

/******************************************
               STEPPERS
******************************************/

AF_Stepper::AF_Stepper(uint16_t steps, uint8_t num) {
    1cdc:	ef 92       	push	r14
    1cde:	ff 92       	push	r15
    1ce0:	1f 93       	push	r17
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	ec 01       	movw	r28, r24
    1ce8:	7b 01       	movw	r14, r22
    1cea:	14 2f       	mov	r17, r20
  MC.enable();
    1cec:	86 e4       	ldi	r24, 0x46	; 70
    1cee:	93 e0       	ldi	r25, 0x03	; 3
    1cf0:	0e 94 cc 0c 	call	0x1998	; 0x1998 <_ZN17AFMotorController6enableEv>

  revsteps = steps;
    1cf4:	f9 82       	std	Y+1, r15	; 0x01
    1cf6:	e8 82       	st	Y, r14
  steppernum = num;
    1cf8:	1a 83       	std	Y+2, r17	; 0x02
  currentstep = 0;
    1cfa:	1b 86       	std	Y+11, r1	; 0x0b

  if (steppernum == 1) {
    1cfc:	11 30       	cpi	r17, 0x01	; 1
    1cfe:	d1 f1       	breq	.+116    	; 0x1d74 <_ZN10AF_StepperC2Ejh+0x98>
    initPWM1(MOTOR12_64KHZ);
    initPWM2(MOTOR12_64KHZ);
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    1d00:	12 30       	cpi	r17, 0x02	; 2
    1d02:	31 f0       	breq	.+12     	; 0x1d10 <_ZN10AF_StepperC2Ejh+0x34>
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    1d04:	df 91       	pop	r29
    1d06:	cf 91       	pop	r28
    1d08:	1f 91       	pop	r17
    1d0a:	ff 90       	pop	r15
    1d0c:	ef 90       	pop	r14
    1d0e:	08 95       	ret
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B) &
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    1d10:	80 91 47 03 	lds	r24, 0x0347
    1d14:	8e 71       	andi	r24, 0x1E	; 30
    1d16:	80 93 47 03 	sts	0x0347, r24
    MC.latch_tx();
    1d1a:	86 e4       	ldi	r24, 0x46	; 70
    1d1c:	93 e0       	ldi	r25, 0x03	; 3
    1d1e:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN17AFMotorController8latch_txEv>

    // enable both H bridges
    pinMode(5, OUTPUT);
    1d22:	85 e0       	ldi	r24, 0x05	; 5
    1d24:	61 e0       	ldi	r22, 0x01	; 1
    1d26:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    pinMode(6, OUTPUT);
    1d2a:	86 e0       	ldi	r24, 0x06	; 6
    1d2c:	61 e0       	ldi	r22, 0x01	; 1
    1d2e:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    digitalWrite(5, HIGH);
    1d32:	85 e0       	ldi	r24, 0x05	; 5
    1d34:	61 e0       	ldi	r22, 0x01	; 1
    1d36:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
    digitalWrite(6, HIGH);
    1d3a:	86 e0       	ldi	r24, 0x06	; 6
    1d3c:	61 e0       	ldi	r22, 0x01	; 1
    1d3e:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    1d42:	84 b5       	in	r24, 0x24	; 36
    1d44:	83 68       	ori	r24, 0x83	; 131
    1d46:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    1d48:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    1d4a:	86 e0       	ldi	r24, 0x06	; 6
    1d4c:	61 e0       	ldi	r22, 0x01	; 1
    1d4e:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    1d52:	84 b5       	in	r24, 0x24	; 36
    1d54:	83 62       	ori	r24, 0x23	; 35
    1d56:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    1d58:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    1d5a:	85 e0       	ldi	r24, 0x05	; 5
    1d5c:	61 e0       	ldi	r22, 0x01	; 1
    1d5e:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    1d62:	8f ef       	ldi	r24, 0xFF	; 255
    1d64:	87 bd       	out	0x27, r24	; 39
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    1d66:	88 bd       	out	0x28, r24	; 40
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	1f 91       	pop	r17
    1d6e:	ff 90       	pop	r15
    1d70:	ef 90       	pop	r14
    1d72:	08 95       	ret
  steppernum = num;
  currentstep = 0;

  if (steppernum == 1) {
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    1d74:	80 91 47 03 	lds	r24, 0x0347
    1d78:	81 7e       	andi	r24, 0xE1	; 225
    1d7a:	80 93 47 03 	sts	0x0347, r24
    MC.latch_tx();
    1d7e:	86 e4       	ldi	r24, 0x46	; 70
    1d80:	93 e0       	ldi	r25, 0x03	; 3
    1d82:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <_ZN17AFMotorController8latch_txEv>
    
    // enable both H bridges
    pinMode(11, OUTPUT);
    1d86:	8b e0       	ldi	r24, 0x0B	; 11
    1d88:	61 e0       	ldi	r22, 0x01	; 1
    1d8a:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    pinMode(3, OUTPUT);
    1d8e:	83 e0       	ldi	r24, 0x03	; 3
    1d90:	61 e0       	ldi	r22, 0x01	; 1
    1d92:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    digitalWrite(11, HIGH);
    1d96:	8b e0       	ldi	r24, 0x0B	; 11
    1d98:	61 e0       	ldi	r22, 0x01	; 1
    1d9a:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
    digitalWrite(3, HIGH);
    1d9e:	83 e0       	ldi	r24, 0x03	; 3
    1da0:	61 e0       	ldi	r22, 0x01	; 1
    1da2:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    1da6:	80 91 b0 00 	lds	r24, 0x00B0
    1daa:	83 68       	ori	r24, 0x83	; 131
    1dac:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1db0:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    1db4:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    1db8:	8b e0       	ldi	r24, 0x0B	; 11
    1dba:	61 e0       	ldi	r22, 0x01	; 1
    1dbc:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    1dc0:	80 91 b0 00 	lds	r24, 0x00B0
    1dc4:	83 62       	ori	r24, 0x23	; 35
    1dc6:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1dca:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    1dce:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    1dd2:	83 e0       	ldi	r24, 0x03	; 3
    1dd4:	61 e0       	ldi	r22, 0x01	; 1
    1dd6:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    1dda:	8f ef       	ldi	r24, 0xFF	; 255
    1ddc:	80 93 b3 00 	sts	0x00B3, r24
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    1de0:	80 93 b4 00 	sts	0x00B4, r24
    1de4:	8f cf       	rjmp	.-226    	; 0x1d04 <_ZN10AF_StepperC2Ejh+0x28>

00001de6 <__vector_18>:
  }
}

#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
  {
    1de6:	1f 92       	push	r1
    1de8:	0f 92       	push	r0
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	0f 92       	push	r0
    1dee:	11 24       	eor	r1, r1
    1df0:	2f 93       	push	r18
    1df2:	3f 93       	push	r19
    1df4:	4f 93       	push	r20
    1df6:	5f 93       	push	r21
    1df8:	6f 93       	push	r22
    1dfa:	8f 93       	push	r24
    1dfc:	9f 93       	push	r25
    1dfe:	ef 93       	push	r30
    1e00:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    1e02:	60 91 c6 00 	lds	r22, 0x00C6
  ring_buffer rx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *rx_buffer)
{
  int i = (unsigned int)(rx_buffer->head + 1) % RX_BUFFER_SIZE;
    1e06:	20 91 c8 03 	lds	r18, 0x03C8
    1e0a:	30 91 c9 03 	lds	r19, 0x03C9
    1e0e:	c9 01       	movw	r24, r18
    1e10:	01 96       	adiw	r24, 0x01	; 1
    1e12:	8f 77       	andi	r24, 0x7F	; 127
    1e14:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != rx_buffer->tail) {
    1e16:	40 91 ca 03 	lds	r20, 0x03CA
    1e1a:	50 91 cb 03 	lds	r21, 0x03CB
    1e1e:	84 17       	cp	r24, r20
    1e20:	95 07       	cpc	r25, r21
    1e22:	41 f0       	breq	.+16     	; 0x1e34 <__vector_18+0x4e>
    rx_buffer->buffer[rx_buffer->head] = c;
    1e24:	28 5b       	subi	r18, 0xB8	; 184
    1e26:	3c 4f       	sbci	r19, 0xFC	; 252
    1e28:	f9 01       	movw	r30, r18
    1e2a:	60 83       	st	Z, r22
    rx_buffer->head = i;
    1e2c:	90 93 c9 03 	sts	0x03C9, r25
    1e30:	80 93 c8 03 	sts	0x03C8, r24
    unsigned char c  =  UDR;  //  atmega8535
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    1e34:	ff 91       	pop	r31
    1e36:	ef 91       	pop	r30
    1e38:	9f 91       	pop	r25
    1e3a:	8f 91       	pop	r24
    1e3c:	6f 91       	pop	r22
    1e3e:	5f 91       	pop	r21
    1e40:	4f 91       	pop	r20
    1e42:	3f 91       	pop	r19
    1e44:	2f 91       	pop	r18
    1e46:	0f 90       	pop	r0
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	0f 90       	pop	r0
    1e4c:	1f 90       	pop	r1
    1e4e:	18 95       	reti

00001e50 <_ZN14HardwareSerialC2EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:



// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
    1e50:	8f 92       	push	r8
    1e52:	af 92       	push	r10
    1e54:	cf 92       	push	r12
    1e56:	df 92       	push	r13
    1e58:	ef 92       	push	r14
    1e5a:	ff 92       	push	r15
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	fc 01       	movw	r30, r24
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    1e6a:	8e ec       	ldi	r24, 0xCE	; 206
    1e6c:	91 e0       	ldi	r25, 0x01	; 1
    1e6e:	91 83       	std	Z+1, r25	; 0x01
    1e70:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    1e72:	73 83       	std	Z+3, r23	; 0x03
    1e74:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
    1e76:	55 83       	std	Z+5, r21	; 0x05
    1e78:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
    1e7a:	37 83       	std	Z+7, r19	; 0x07
    1e7c:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
    1e7e:	11 87       	std	Z+9, r17	; 0x09
    1e80:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
    1e82:	f3 86       	std	Z+11, r15	; 0x0b
    1e84:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
    1e86:	d5 86       	std	Z+13, r13	; 0x0d
    1e88:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
    1e8a:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
    1e8c:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
    1e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e90:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
    1e92:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e94:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
    1e96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e98:	82 8b       	std	Z+18, r24	; 0x12
}
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	1f 91       	pop	r17
    1ea0:	0f 91       	pop	r16
    1ea2:	ff 90       	pop	r15
    1ea4:	ef 90       	pop	r14
    1ea6:	df 90       	pop	r13
    1ea8:	cf 90       	pop	r12
    1eaa:	af 90       	pop	r10
    1eac:	8f 90       	pop	r8
    1eae:	08 95       	ret

00001eb0 <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:



// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
    1eb0:	8f 92       	push	r8
    1eb2:	af 92       	push	r10
    1eb4:	cf 92       	push	r12
    1eb6:	df 92       	push	r13
    1eb8:	ef 92       	push	r14
    1eba:	ff 92       	push	r15
    1ebc:	0f 93       	push	r16
    1ebe:	1f 93       	push	r17
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	fc 01       	movw	r30, r24
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    1eca:	8e ec       	ldi	r24, 0xCE	; 206
    1ecc:	91 e0       	ldi	r25, 0x01	; 1
    1ece:	91 83       	std	Z+1, r25	; 0x01
    1ed0:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    1ed2:	73 83       	std	Z+3, r23	; 0x03
    1ed4:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
    1ed6:	55 83       	std	Z+5, r21	; 0x05
    1ed8:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
    1eda:	37 83       	std	Z+7, r19	; 0x07
    1edc:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
    1ede:	11 87       	std	Z+9, r17	; 0x09
    1ee0:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
    1ee2:	f3 86       	std	Z+11, r15	; 0x0b
    1ee4:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
    1ee6:	d5 86       	std	Z+13, r13	; 0x0d
    1ee8:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
    1eea:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
    1eec:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
    1eee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef0:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
    1ef2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ef4:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
    1ef6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef8:	82 8b       	std	Z+18, r24	; 0x12
}
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	1f 91       	pop	r17
    1f00:	0f 91       	pop	r16
    1f02:	ff 90       	pop	r15
    1f04:	ef 90       	pop	r14
    1f06:	df 90       	pop	r13
    1f08:	cf 90       	pop	r12
    1f0a:	af 90       	pop	r10
    1f0c:	8f 90       	pop	r8
    1f0e:	08 95       	ret

00001f10 <_ZN14HardwareSerial5beginEl>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(long baud)
{
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	ec 01       	movw	r28, r24
    1f16:	9a 01       	movw	r18, r20
    1f18:	ab 01       	movw	r20, r22

#if F_CPU == 16000000UL
  // hardcoded exception for compatibility with the bootloader shipped
  // with the Duemilanove and previous boards and the firmware on the 8U2
  // on the Uno and Mega 2560.
  if (baud == 57600) {
    1f1a:	20 30       	cpi	r18, 0x00	; 0
    1f1c:	81 ee       	ldi	r24, 0xE1	; 225
    1f1e:	38 07       	cpc	r19, r24
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	48 07       	cpc	r20, r24
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	58 07       	cpc	r21, r24
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <_ZN14HardwareSerial5beginEl+0x1c>
    1f2a:	48 c0       	rjmp	.+144    	; 0x1fbc <_ZN14HardwareSerial5beginEl+0xac>
    use_u2x = false;
  }
#endif
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    1f2c:	e8 85       	ldd	r30, Y+8	; 0x08
    1f2e:	f9 85       	ldd	r31, Y+9	; 0x09
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	0a 88       	ldd	r0, Y+18	; 0x12
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <_ZN14HardwareSerial5beginEl+0x2c>
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	0a 94       	dec	r0
    1f3e:	e2 f7       	brpl	.-8      	; 0x1f38 <_ZN14HardwareSerial5beginEl+0x28>
    1f40:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	79 e0       	ldi	r23, 0x09	; 9
    1f46:	8d e3       	ldi	r24, 0x3D	; 61
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	0e 94 61 29 	call	0x52c2	; 0x52c2 <__udivmodsi4>
    1f4e:	21 50       	subi	r18, 0x01	; 1
    1f50:	30 40       	sbci	r19, 0x00	; 0
    1f52:	40 40       	sbci	r20, 0x00	; 0
    1f54:	50 40       	sbci	r21, 0x00	; 0
    1f56:	56 95       	lsr	r21
    1f58:	47 95       	ror	r20
    1f5a:	37 95       	ror	r19
    1f5c:	27 95       	ror	r18
    1f5e:	83 2f       	mov	r24, r19
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1f60:	ec 81       	ldd	r30, Y+4	; 0x04
    1f62:	fd 81       	ldd	r31, Y+5	; 0x05
    1f64:	80 83       	st	Z, r24
  *_ubrrl = baud_setting;
    1f66:	ee 81       	ldd	r30, Y+6	; 0x06
    1f68:	ff 81       	ldd	r31, Y+7	; 0x07
    1f6a:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    1f6c:	ea 85       	ldd	r30, Y+10	; 0x0a
    1f6e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1f70:	80 81       	ld	r24, Z
    1f72:	21 e0       	ldi	r18, 0x01	; 1
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	a9 01       	movw	r20, r18
    1f78:	0e 84       	ldd	r0, Y+14	; 0x0e
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <_ZN14HardwareSerial5beginEl+0x70>
    1f7c:	44 0f       	add	r20, r20
    1f7e:	55 1f       	adc	r21, r21
    1f80:	0a 94       	dec	r0
    1f82:	e2 f7       	brpl	.-8      	; 0x1f7c <_ZN14HardwareSerial5beginEl+0x6c>
    1f84:	84 2b       	or	r24, r20
    1f86:	80 83       	st	Z, r24
  sbi(*_ucsrb, _txen);
    1f88:	ea 85       	ldd	r30, Y+10	; 0x0a
    1f8a:	fb 85       	ldd	r31, Y+11	; 0x0b
    1f8c:	80 81       	ld	r24, Z
    1f8e:	a9 01       	movw	r20, r18
    1f90:	0f 84       	ldd	r0, Y+15	; 0x0f
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <_ZN14HardwareSerial5beginEl+0x88>
    1f94:	44 0f       	add	r20, r20
    1f96:	55 1f       	adc	r21, r21
    1f98:	0a 94       	dec	r0
    1f9a:	e2 f7       	brpl	.-8      	; 0x1f94 <_ZN14HardwareSerial5beginEl+0x84>
    1f9c:	84 2b       	or	r24, r20
    1f9e:	80 83       	st	Z, r24
  sbi(*_ucsrb, _rxcie);
    1fa0:	ea 85       	ldd	r30, Y+10	; 0x0a
    1fa2:	fb 85       	ldd	r31, Y+11	; 0x0b
    1fa4:	80 81       	ld	r24, Z
    1fa6:	08 88       	ldd	r0, Y+16	; 0x10
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <_ZN14HardwareSerial5beginEl+0x9e>
    1faa:	22 0f       	add	r18, r18
    1fac:	33 1f       	adc	r19, r19
    1fae:	0a 94       	dec	r0
    1fb0:	e2 f7       	brpl	.-8      	; 0x1faa <_ZN14HardwareSerial5beginEl+0x9a>
    1fb2:	82 2b       	or	r24, r18
    1fb4:	80 83       	st	Z, r24
}
    1fb6:	df 91       	pop	r29
    1fb8:	cf 91       	pop	r28
    1fba:	08 95       	ret
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    1fbc:	e8 85       	ldd	r30, Y+8	; 0x08
    1fbe:	f9 85       	ldd	r31, Y+9	; 0x09
    1fc0:	10 82       	st	Z, r1
    1fc2:	20 e1       	ldi	r18, 0x10	; 16
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	cc cf       	rjmp	.-104    	; 0x1f60 <_ZN14HardwareSerial5beginEl+0x50>

00001fc8 <_ZN14HardwareSerial3endEv>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
}

void HardwareSerial::end()
{
    1fc8:	fc 01       	movw	r30, r24
  cbi(*_ucsrb, _rxen);
    1fca:	a2 85       	ldd	r26, Z+10	; 0x0a
    1fcc:	b3 85       	ldd	r27, Z+11	; 0x0b
    1fce:	3c 91       	ld	r19, X
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	ac 01       	movw	r20, r24
    1fd6:	06 84       	ldd	r0, Z+14	; 0x0e
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <_ZN14HardwareSerial3endEv+0x16>
    1fda:	44 0f       	add	r20, r20
    1fdc:	55 1f       	adc	r21, r21
    1fde:	0a 94       	dec	r0
    1fe0:	e2 f7       	brpl	.-8      	; 0x1fda <_ZN14HardwareSerial3endEv+0x12>
    1fe2:	24 2f       	mov	r18, r20
    1fe4:	20 95       	com	r18
    1fe6:	23 23       	and	r18, r19
    1fe8:	2c 93       	st	X, r18
  cbi(*_ucsrb, _txen);
    1fea:	a2 85       	ldd	r26, Z+10	; 0x0a
    1fec:	b3 85       	ldd	r27, Z+11	; 0x0b
    1fee:	3c 91       	ld	r19, X
    1ff0:	ac 01       	movw	r20, r24
    1ff2:	07 84       	ldd	r0, Z+15	; 0x0f
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <_ZN14HardwareSerial3endEv+0x32>
    1ff6:	44 0f       	add	r20, r20
    1ff8:	55 1f       	adc	r21, r21
    1ffa:	0a 94       	dec	r0
    1ffc:	e2 f7       	brpl	.-8      	; 0x1ff6 <_ZN14HardwareSerial3endEv+0x2e>
    1ffe:	24 2f       	mov	r18, r20
    2000:	20 95       	com	r18
    2002:	23 23       	and	r18, r19
    2004:	2c 93       	st	X, r18
  cbi(*_ucsrb, _rxcie);  
    2006:	a2 85       	ldd	r26, Z+10	; 0x0a
    2008:	b3 85       	ldd	r27, Z+11	; 0x0b
    200a:	2c 91       	ld	r18, X
    200c:	00 88       	ldd	r0, Z+16	; 0x10
    200e:	02 c0       	rjmp	.+4      	; 0x2014 <_ZN14HardwareSerial3endEv+0x4c>
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	0a 94       	dec	r0
    2016:	e2 f7       	brpl	.-8      	; 0x2010 <_ZN14HardwareSerial3endEv+0x48>
    2018:	80 95       	com	r24
    201a:	82 23       	and	r24, r18
    201c:	8c 93       	st	X, r24
}
    201e:	08 95       	ret

00002020 <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
    2020:	fc 01       	movw	r30, r24
    2022:	82 81       	ldd	r24, Z+2	; 0x02
    2024:	93 81       	ldd	r25, Z+3	; 0x03
    2026:	fc 01       	movw	r30, r24
    2028:	e0 58       	subi	r30, 0x80	; 128
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	20 81       	ld	r18, Z
    202e:	31 81       	ldd	r19, Z+1	; 0x01
    2030:	8e 57       	subi	r24, 0x7E	; 126
    2032:	9f 4f       	sbci	r25, 0xFF	; 255
    2034:	fc 01       	movw	r30, r24
    2036:	80 81       	ld	r24, Z
    2038:	91 81       	ldd	r25, Z+1	; 0x01
    203a:	28 1b       	sub	r18, r24
    203c:	39 0b       	sbc	r19, r25
    203e:	2f 77       	andi	r18, 0x7F	; 127
    2040:	30 70       	andi	r19, 0x00	; 0
}
    2042:	c9 01       	movw	r24, r18
    2044:	08 95       	ret

00002046 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    2046:	fc 01       	movw	r30, r24
    2048:	82 81       	ldd	r24, Z+2	; 0x02
    204a:	93 81       	ldd	r25, Z+3	; 0x03
    204c:	fc 01       	movw	r30, r24
    204e:	ee 57       	subi	r30, 0x7E	; 126
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	20 81       	ld	r18, Z
    2054:	31 81       	ldd	r19, Z+1	; 0x01
    2056:	fc 01       	movw	r30, r24
    2058:	e0 58       	subi	r30, 0x80	; 128
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	40 81       	ld	r20, Z
    205e:	51 81       	ldd	r21, Z+1	; 0x01
    2060:	42 17       	cp	r20, r18
    2062:	53 07       	cpc	r21, r19
    2064:	39 f0       	breq	.+14     	; 0x2074 <_ZN14HardwareSerial4peekEv+0x2e>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    2066:	82 0f       	add	r24, r18
    2068:	93 1f       	adc	r25, r19
    206a:	fc 01       	movw	r30, r24
    206c:	20 81       	ld	r18, Z
    206e:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    2070:	c9 01       	movw	r24, r18
    2072:	08 95       	ret
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    2074:	2f ef       	ldi	r18, 0xFF	; 255
    2076:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    2078:	c9 01       	movw	r24, r18
    207a:	08 95       	ret

0000207c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    207c:	dc 01       	movw	r26, r24
    207e:	12 96       	adiw	r26, 0x02	; 2
    2080:	8d 91       	ld	r24, X+
    2082:	9c 91       	ld	r25, X
    2084:	13 97       	sbiw	r26, 0x03	; 3
    2086:	fc 01       	movw	r30, r24
    2088:	ee 57       	subi	r30, 0x7E	; 126
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	40 81       	ld	r20, Z
    208e:	51 81       	ldd	r21, Z+1	; 0x01
    2090:	dc 01       	movw	r26, r24
    2092:	a0 58       	subi	r26, 0x80	; 128
    2094:	bf 4f       	sbci	r27, 0xFF	; 255
    2096:	2d 91       	ld	r18, X+
    2098:	3c 91       	ld	r19, X
    209a:	11 97       	sbiw	r26, 0x01	; 1
    209c:	24 17       	cp	r18, r20
    209e:	35 07       	cpc	r19, r21
    20a0:	69 f0       	breq	.+26     	; 0x20bc <_ZN14HardwareSerial4readEv+0x40>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    20a2:	84 0f       	add	r24, r20
    20a4:	95 1f       	adc	r25, r21
    20a6:	dc 01       	movw	r26, r24
    20a8:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
    20aa:	4f 5f       	subi	r20, 0xFF	; 255
    20ac:	5f 4f       	sbci	r21, 0xFF	; 255
    20ae:	4f 77       	andi	r20, 0x7F	; 127
    20b0:	50 70       	andi	r21, 0x00	; 0
    20b2:	51 83       	std	Z+1, r21	; 0x01
    20b4:	40 83       	st	Z, r20
    return c;
    20b6:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    20b8:	c9 01       	movw	r24, r18
    20ba:	08 95       	ret
}

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    20bc:	2f ef       	ldi	r18, 0xFF	; 255
    20be:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
    return c;
  }
}
    20c0:	c9 01       	movw	r24, r18
    20c2:	08 95       	ret

000020c4 <_ZN14HardwareSerial5flushEv>:
  // don't reverse this or there may be problems if the RX interrupt
  // occurs after reading the value of rx_buffer_head but before writing
  // the value to rx_buffer_tail; the previous value of rx_buffer_head
  // may be written to rx_buffer_tail, making it appear as if the buffer
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
    20c4:	dc 01       	movw	r26, r24
    20c6:	12 96       	adiw	r26, 0x02	; 2
    20c8:	8d 91       	ld	r24, X+
    20ca:	9c 91       	ld	r25, X
    20cc:	13 97       	sbiw	r26, 0x03	; 3
    20ce:	fc 01       	movw	r30, r24
    20d0:	e0 58       	subi	r30, 0x80	; 128
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	8e 57       	subi	r24, 0x7E	; 126
    20d6:	9f 4f       	sbci	r25, 0xFF	; 255
    20d8:	dc 01       	movw	r26, r24
    20da:	8d 91       	ld	r24, X+
    20dc:	9c 91       	ld	r25, X
    20de:	11 97       	sbiw	r26, 0x01	; 1
    20e0:	91 83       	std	Z+1, r25	; 0x01
    20e2:	80 83       	st	Z, r24
}
    20e4:	08 95       	ret

000020e6 <_ZN14HardwareSerial5writeEh>:

void HardwareSerial::write(uint8_t c)
{
    20e6:	fc 01       	movw	r30, r24
    20e8:	a0 85       	ldd	r26, Z+8	; 0x08
    20ea:	b1 85       	ldd	r27, Z+9	; 0x09
    20ec:	21 89       	ldd	r18, Z+17	; 0x11
  while (!((*_ucsra) & (1 << _udre)))
    20ee:	8c 91       	ld	r24, X
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	02 2e       	mov	r0, r18
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <_ZN14HardwareSerial5writeEh+0x14>
    20f6:	95 95       	asr	r25
    20f8:	87 95       	ror	r24
    20fa:	0a 94       	dec	r0
    20fc:	e2 f7       	brpl	.-8      	; 0x20f6 <_ZN14HardwareSerial5writeEh+0x10>
    20fe:	80 ff       	sbrs	r24, 0
    2100:	f6 cf       	rjmp	.-20     	; 0x20ee <_ZN14HardwareSerial5writeEh+0x8>
    ;

  *_udr = c;
    2102:	04 84       	ldd	r0, Z+12	; 0x0c
    2104:	f5 85       	ldd	r31, Z+13	; 0x0d
    2106:	e0 2d       	mov	r30, r0
    2108:	60 83       	st	Z, r22
}
    210a:	08 95       	ret

0000210c <_GLOBAL__I_rx_buffer>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    210c:	8e ec       	ldi	r24, 0xCE	; 206
    210e:	91 e0       	ldi	r25, 0x01	; 1
    2110:	90 93 cd 03 	sts	0x03CD, r25
    2114:	80 93 cc 03 	sts	0x03CC, r24
{
  _rx_buffer = rx_buffer;
    2118:	88 e4       	ldi	r24, 0x48	; 72
    211a:	93 e0       	ldi	r25, 0x03	; 3
    211c:	90 93 cf 03 	sts	0x03CF, r25
    2120:	80 93 ce 03 	sts	0x03CE, r24
  _ubrrh = ubrrh;
    2124:	85 ec       	ldi	r24, 0xC5	; 197
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	90 93 d1 03 	sts	0x03D1, r25
    212c:	80 93 d0 03 	sts	0x03D0, r24
  _ubrrl = ubrrl;
    2130:	84 ec       	ldi	r24, 0xC4	; 196
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	90 93 d3 03 	sts	0x03D3, r25
    2138:	80 93 d2 03 	sts	0x03D2, r24
  _ucsra = ucsra;
    213c:	80 ec       	ldi	r24, 0xC0	; 192
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	90 93 d5 03 	sts	0x03D5, r25
    2144:	80 93 d4 03 	sts	0x03D4, r24
  _ucsrb = ucsrb;
    2148:	81 ec       	ldi	r24, 0xC1	; 193
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	90 93 d7 03 	sts	0x03D7, r25
    2150:	80 93 d6 03 	sts	0x03D6, r24
  _udr = udr;
    2154:	86 ec       	ldi	r24, 0xC6	; 198
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	90 93 d9 03 	sts	0x03D9, r25
    215c:	80 93 d8 03 	sts	0x03D8, r24
  _rxen = rxen;
    2160:	84 e0       	ldi	r24, 0x04	; 4
    2162:	80 93 da 03 	sts	0x03DA, r24
  _txen = txen;
    2166:	83 e0       	ldi	r24, 0x03	; 3
    2168:	80 93 db 03 	sts	0x03DB, r24
  _rxcie = rxcie;
    216c:	87 e0       	ldi	r24, 0x07	; 7
    216e:	80 93 dc 03 	sts	0x03DC, r24
  _udre = udre;
    2172:	85 e0       	ldi	r24, 0x05	; 5
    2174:	80 93 dd 03 	sts	0x03DD, r24
  _u2x = u2x;
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	80 93 de 03 	sts	0x03DE, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
    217e:	08 95       	ret

00002180 <_ZN5Print5writeEPKc>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
    2180:	0f 93       	push	r16
    2182:	1f 93       	push	r17
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
    2188:	ec 01       	movw	r28, r24
    218a:	8b 01       	movw	r16, r22
  while (*str)
    218c:	fb 01       	movw	r30, r22
    218e:	60 81       	ld	r22, Z
    2190:	66 23       	and	r22, r22
    2192:	69 f0       	breq	.+26     	; 0x21ae <_ZN5Print5writeEPKc+0x2e>
    write(*str++);
    2194:	0f 5f       	subi	r16, 0xFF	; 255
    2196:	1f 4f       	sbci	r17, 0xFF	; 255
    2198:	e8 81       	ld	r30, Y
    219a:	f9 81       	ldd	r31, Y+1	; 0x01
    219c:	01 90       	ld	r0, Z+
    219e:	f0 81       	ld	r31, Z
    21a0:	e0 2d       	mov	r30, r0
    21a2:	ce 01       	movw	r24, r28
    21a4:	09 95       	icall
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
  while (*str)
    21a6:	f8 01       	movw	r30, r16
    21a8:	60 81       	ld	r22, Z
    21aa:	66 23       	and	r22, r22
    21ac:	99 f7       	brne	.-26     	; 0x2194 <_ZN5Print5writeEPKc+0x14>
    write(*str++);
}
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	1f 91       	pop	r17
    21b4:	0f 91       	pop	r16
    21b6:	08 95       	ret

000021b8 <_ZN5Print5writeEPKhj>:

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
    21b8:	ef 92       	push	r14
    21ba:	ff 92       	push	r15
    21bc:	0f 93       	push	r16
    21be:	1f 93       	push	r17
    21c0:	cf 93       	push	r28
    21c2:	df 93       	push	r29
    21c4:	ec 01       	movw	r28, r24
    21c6:	8b 01       	movw	r16, r22
    21c8:	7a 01       	movw	r14, r20
  while (size--)
    21ca:	41 15       	cp	r20, r1
    21cc:	51 05       	cpc	r21, r1
    21ce:	81 f0       	breq	.+32     	; 0x21f0 <_ZN5Print5writeEPKhj+0x38>
    write(*buffer++);
    21d0:	f8 01       	movw	r30, r16
    21d2:	61 91       	ld	r22, Z+
    21d4:	8f 01       	movw	r16, r30
    21d6:	e8 81       	ld	r30, Y
    21d8:	f9 81       	ldd	r31, Y+1	; 0x01
    21da:	01 90       	ld	r0, Z+
    21dc:	f0 81       	ld	r31, Z
    21de:	e0 2d       	mov	r30, r0
    21e0:	ce 01       	movw	r24, r28
    21e2:	09 95       	icall
    21e4:	08 94       	sec
    21e6:	e1 08       	sbc	r14, r1
    21e8:	f1 08       	sbc	r15, r1
}

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
  while (size--)
    21ea:	e1 14       	cp	r14, r1
    21ec:	f1 04       	cpc	r15, r1
    21ee:	81 f7       	brne	.-32     	; 0x21d0 <_ZN5Print5writeEPKhj+0x18>
    write(*buffer++);
}
    21f0:	df 91       	pop	r29
    21f2:	cf 91       	pop	r28
    21f4:	1f 91       	pop	r17
    21f6:	0f 91       	pop	r16
    21f8:	ff 90       	pop	r15
    21fa:	ef 90       	pop	r14
    21fc:	08 95       	ret

000021fe <_ZN5Print5printEPKc>:
  }
}

void Print::print(const char str[])
{
  write(str);
    21fe:	dc 01       	movw	r26, r24
    2200:	ed 91       	ld	r30, X+
    2202:	fc 91       	ld	r31, X
    2204:	02 80       	ldd	r0, Z+2	; 0x02
    2206:	f3 81       	ldd	r31, Z+3	; 0x03
    2208:	e0 2d       	mov	r30, r0
    220a:	09 95       	icall
}
    220c:	08 95       	ret

0000220e <_ZN5Print5printERK6String>:
  while (size--)
    write(*buffer++);
}

void Print::print(const String &s)
{
    220e:	cf 92       	push	r12
    2210:	df 92       	push	r13
    2212:	ef 92       	push	r14
    2214:	ff 92       	push	r15
    2216:	0f 93       	push	r16
    2218:	1f 93       	push	r17
    221a:	cf 93       	push	r28
    221c:	df 93       	push	r29
    221e:	7c 01       	movw	r14, r24
    2220:	8b 01       	movw	r16, r22
  for (int i = 0; i < s.length(); i++) {
    2222:	db 01       	movw	r26, r22
    2224:	14 96       	adiw	r26, 0x04	; 4
    2226:	8d 91       	ld	r24, X+
    2228:	9c 91       	ld	r25, X
    222a:	15 97       	sbiw	r26, 0x05	; 5
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	c1 f0       	breq	.+48     	; 0x2260 <_ZN5Print5printERK6String+0x52>
    2230:	60 e0       	ldi	r22, 0x00	; 0
    2232:	70 e0       	ldi	r23, 0x00	; 0
    2234:	c0 e0       	ldi	r28, 0x00	; 0
    2236:	d0 e0       	ldi	r29, 0x00	; 0
    write(s[i]);
    2238:	d7 01       	movw	r26, r14
    223a:	ed 91       	ld	r30, X+
    223c:	fc 91       	ld	r31, X
    223e:	c0 80       	ld	r12, Z
    2240:	d1 80       	ldd	r13, Z+1	; 0x01
    2242:	c8 01       	movw	r24, r16
    2244:	0e 94 34 17 	call	0x2e68	; 0x2e68 <_ZNK6StringixEj>
    2248:	68 2f       	mov	r22, r24
    224a:	c7 01       	movw	r24, r14
    224c:	f6 01       	movw	r30, r12
    224e:	09 95       	icall
    write(*buffer++);
}

void Print::print(const String &s)
{
  for (int i = 0; i < s.length(); i++) {
    2250:	21 96       	adiw	r28, 0x01	; 1
    2252:	be 01       	movw	r22, r28
    2254:	f8 01       	movw	r30, r16
    2256:	84 81       	ldd	r24, Z+4	; 0x04
    2258:	95 81       	ldd	r25, Z+5	; 0x05
    225a:	c8 17       	cp	r28, r24
    225c:	d9 07       	cpc	r29, r25
    225e:	60 f3       	brcs	.-40     	; 0x2238 <_ZN5Print5printERK6String+0x2a>
    write(s[i]);
  }
}
    2260:	df 91       	pop	r29
    2262:	cf 91       	pop	r28
    2264:	1f 91       	pop	r17
    2266:	0f 91       	pop	r16
    2268:	ff 90       	pop	r15
    226a:	ef 90       	pop	r14
    226c:	df 90       	pop	r13
    226e:	cf 90       	pop	r12
    2270:	08 95       	ret

00002272 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

void Print::printNumber(unsigned long n, uint8_t base)
{
    2272:	2f 92       	push	r2
    2274:	3f 92       	push	r3
    2276:	4f 92       	push	r4
    2278:	5f 92       	push	r5
    227a:	6f 92       	push	r6
    227c:	7f 92       	push	r7
    227e:	8f 92       	push	r8
    2280:	9f 92       	push	r9
    2282:	af 92       	push	r10
    2284:	bf 92       	push	r11
    2286:	cf 92       	push	r12
    2288:	df 92       	push	r13
    228a:	ef 92       	push	r14
    228c:	ff 92       	push	r15
    228e:	0f 93       	push	r16
    2290:	1f 93       	push	r17
    2292:	df 93       	push	r29
    2294:	cf 93       	push	r28
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	a2 97       	sbiw	r28, 0x22	; 34
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	f8 94       	cli
    22a0:	de bf       	out	0x3e, r29	; 62
    22a2:	0f be       	out	0x3f, r0	; 63
    22a4:	cd bf       	out	0x3d, r28	; 61
    22a6:	9a a3       	std	Y+34, r25	; 0x22
    22a8:	89 a3       	std	Y+33, r24	; 0x21
    22aa:	7a 01       	movw	r14, r20
    22ac:	8b 01       	movw	r16, r22
  unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
  unsigned long i = 0;

  if (n == 0) {
    22ae:	41 15       	cp	r20, r1
    22b0:	51 05       	cpc	r21, r1
    22b2:	61 05       	cpc	r22, r1
    22b4:	71 05       	cpc	r23, r1
    22b6:	09 f4       	brne	.+2      	; 0x22ba <_ZN5Print11printNumberEmh+0x48>
    22b8:	55 c0       	rjmp	.+170    	; 0x2364 <_ZN5Print11printNumberEmh+0xf2>
    print('0');
    return;
    22ba:	62 2e       	mov	r6, r18
    22bc:	77 24       	eor	r7, r7
    22be:	88 24       	eor	r8, r8
    22c0:	99 24       	eor	r9, r9
    22c2:	aa 24       	eor	r10, r10
    22c4:	bb 24       	eor	r11, r11
    22c6:	65 01       	movw	r12, r10
    22c8:	1e 01       	movw	r2, r28
    22ca:	08 94       	sec
    22cc:	21 1c       	adc	r2, r1
    22ce:	31 1c       	adc	r3, r1
  } 

  while (n > 0) {
    buf[i++] = n % base;
    22d0:	21 01       	movw	r4, r2
    22d2:	4a 0c       	add	r4, r10
    22d4:	5b 1c       	adc	r5, r11
    22d6:	c8 01       	movw	r24, r16
    22d8:	b7 01       	movw	r22, r14
    22da:	a4 01       	movw	r20, r8
    22dc:	93 01       	movw	r18, r6
    22de:	0e 94 61 29 	call	0x52c2	; 0x52c2 <__udivmodsi4>
    22e2:	f2 01       	movw	r30, r4
    22e4:	60 83       	st	Z, r22
    22e6:	08 94       	sec
    22e8:	a1 1c       	adc	r10, r1
    22ea:	b1 1c       	adc	r11, r1
    22ec:	c1 1c       	adc	r12, r1
    22ee:	d1 1c       	adc	r13, r1
    n /= base;
    22f0:	c8 01       	movw	r24, r16
    22f2:	b7 01       	movw	r22, r14
    22f4:	a4 01       	movw	r20, r8
    22f6:	93 01       	movw	r18, r6
    22f8:	0e 94 61 29 	call	0x52c2	; 0x52c2 <__udivmodsi4>
    22fc:	e2 2e       	mov	r14, r18
    22fe:	f3 2e       	mov	r15, r19
    2300:	04 2f       	mov	r16, r20
    2302:	15 2f       	mov	r17, r21
  if (n == 0) {
    print('0');
    return;
  } 

  while (n > 0) {
    2304:	e1 14       	cp	r14, r1
    2306:	f1 04       	cpc	r15, r1
    2308:	01 05       	cpc	r16, r1
    230a:	11 05       	cpc	r17, r1
    230c:	09 f7       	brne	.-62     	; 0x22d0 <_ZN5Print11printNumberEmh+0x5e>
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
    230e:	a1 14       	cp	r10, r1
    2310:	b1 04       	cpc	r11, r1
    2312:	c1 04       	cpc	r12, r1
    2314:	d1 04       	cpc	r13, r1
    2316:	71 f1       	breq	.+92     	; 0x2374 <_ZN5Print11printNumberEmh+0x102>
    2318:	08 94       	sec
    231a:	a1 08       	sbc	r10, r1
    231c:	b1 08       	sbc	r11, r1
    231e:	c1 08       	sbc	r12, r1
    2320:	d1 08       	sbc	r13, r1
    2322:	18 c0       	rjmp	.+48     	; 0x2354 <_ZN5Print11printNumberEmh+0xe2>
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
    2324:	40 5d       	subi	r20, 0xD0	; 208
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    2326:	50 e0       	ldi	r21, 0x00	; 0
    2328:	60 e0       	ldi	r22, 0x00	; 0
    232a:	70 e0       	ldi	r23, 0x00	; 0
    232c:	89 a1       	ldd	r24, Y+33	; 0x21
    232e:	9a a1       	ldd	r25, Y+34	; 0x22
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_ZN5Print5printEli>
    2338:	08 94       	sec
    233a:	a1 08       	sbc	r10, r1
    233c:	b1 08       	sbc	r11, r1
    233e:	c1 08       	sbc	r12, r1
    2340:	d1 08       	sbc	r13, r1
  while (n > 0) {
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
    2342:	ff ef       	ldi	r31, 0xFF	; 255
    2344:	af 16       	cp	r10, r31
    2346:	ff ef       	ldi	r31, 0xFF	; 255
    2348:	bf 06       	cpc	r11, r31
    234a:	ff ef       	ldi	r31, 0xFF	; 255
    234c:	cf 06       	cpc	r12, r31
    234e:	ff ef       	ldi	r31, 0xFF	; 255
    2350:	df 06       	cpc	r13, r31
    2352:	81 f0       	breq	.+32     	; 0x2374 <_ZN5Print11printNumberEmh+0x102>
    print((char) (buf[i - 1] < 10 ?
    2354:	f1 01       	movw	r30, r2
    2356:	ea 0d       	add	r30, r10
    2358:	fb 1d       	adc	r31, r11
    235a:	40 81       	ld	r20, Z
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
    235c:	4a 30       	cpi	r20, 0x0A	; 10
    235e:	10 f3       	brcs	.-60     	; 0x2324 <_ZN5Print11printNumberEmh+0xb2>
    2360:	49 5c       	subi	r20, 0xC9	; 201
    2362:	e1 cf       	rjmp	.-62     	; 0x2326 <_ZN5Print11printNumberEmh+0xb4>
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    2364:	40 e3       	ldi	r20, 0x30	; 48
    2366:	50 e0       	ldi	r21, 0x00	; 0
    2368:	60 e0       	ldi	r22, 0x00	; 0
    236a:	70 e0       	ldi	r23, 0x00	; 0
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_ZN5Print5printEli>

  for (; i > 0; i--)
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}
    2374:	a2 96       	adiw	r28, 0x22	; 34
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	1f 91       	pop	r17
    2386:	0f 91       	pop	r16
    2388:	ff 90       	pop	r15
    238a:	ef 90       	pop	r14
    238c:	df 90       	pop	r13
    238e:	cf 90       	pop	r12
    2390:	bf 90       	pop	r11
    2392:	af 90       	pop	r10
    2394:	9f 90       	pop	r9
    2396:	8f 90       	pop	r8
    2398:	7f 90       	pop	r7
    239a:	6f 90       	pop	r6
    239c:	5f 90       	pop	r5
    239e:	4f 90       	pop	r4
    23a0:	3f 90       	pop	r3
    23a2:	2f 90       	pop	r2
    23a4:	08 95       	ret

000023a6 <_ZN5Print5printEmi>:
  }
}

void Print::print(unsigned long n, int base)
{
  if (base == 0) write(n);
    23a6:	21 15       	cp	r18, r1
    23a8:	31 05       	cpc	r19, r1
    23aa:	19 f0       	breq	.+6      	; 0x23b2 <_ZN5Print5printEmi+0xc>
  else printNumber(n, base);
    23ac:	0e 94 39 11 	call	0x2272	; 0x2272 <_ZN5Print11printNumberEmh>
    23b0:	08 95       	ret
  }
}

void Print::print(unsigned long n, int base)
{
  if (base == 0) write(n);
    23b2:	dc 01       	movw	r26, r24
    23b4:	ed 91       	ld	r30, X+
    23b6:	fc 91       	ld	r31, X
    23b8:	01 90       	ld	r0, Z+
    23ba:	f0 81       	ld	r31, Z
    23bc:	e0 2d       	mov	r30, r0
    23be:	64 2f       	mov	r22, r20
    23c0:	09 95       	icall
    23c2:	08 95       	ret

000023c4 <_ZN5Print5printEji>:
{
  print((long) n, base);
}

void Print::print(unsigned int n, int base)
{
    23c4:	9a 01       	movw	r18, r20
  print((unsigned long) n, base);
    23c6:	ab 01       	movw	r20, r22
    23c8:	60 e0       	ldi	r22, 0x00	; 0
    23ca:	70 e0       	ldi	r23, 0x00	; 0
    23cc:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <_ZN5Print5printEmi>
}
    23d0:	08 95       	ret

000023d2 <_ZN5Print5printEhi>:
{
  print((long) c, base);
}

void Print::print(unsigned char b, int base)
{
    23d2:	9a 01       	movw	r18, r20
  print((unsigned long) b, base);
    23d4:	46 2f       	mov	r20, r22
    23d6:	50 e0       	ldi	r21, 0x00	; 0
    23d8:	60 e0       	ldi	r22, 0x00	; 0
    23da:	70 e0       	ldi	r23, 0x00	; 0
    23dc:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <_ZN5Print5printEmi>
}
    23e0:	08 95       	ret

000023e2 <_ZN5Print5printEli>:
{
  print((unsigned long) n, base);
}

void Print::print(long n, int base)
{
    23e2:	ef 92       	push	r14
    23e4:	ff 92       	push	r15
    23e6:	0f 93       	push	r16
    23e8:	1f 93       	push	r17
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
    23ee:	ec 01       	movw	r28, r24
    23f0:	7a 01       	movw	r14, r20
    23f2:	8b 01       	movw	r16, r22
  if (base == 0) {
    23f4:	21 15       	cp	r18, r1
    23f6:	31 05       	cpc	r19, r1
    23f8:	d9 f0       	breq	.+54     	; 0x2430 <_ZN5Print5printEli+0x4e>
    write(n);
  } else if (base == 10) {
    23fa:	2a 30       	cpi	r18, 0x0A	; 10
    23fc:	31 05       	cpc	r19, r1
    23fe:	49 f0       	breq	.+18     	; 0x2412 <_ZN5Print5printEli+0x30>
      print('-');
      n = -n;
    }
    printNumber(n, 10);
  } else {
    printNumber(n, base);
    2400:	0e 94 39 11 	call	0x2272	; 0x2272 <_ZN5Print11printNumberEmh>
  }
}
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
    2408:	1f 91       	pop	r17
    240a:	0f 91       	pop	r16
    240c:	ff 90       	pop	r15
    240e:	ef 90       	pop	r14
    2410:	08 95       	ret
void Print::print(long n, int base)
{
  if (base == 0) {
    write(n);
  } else if (base == 10) {
    if (n < 0) {
    2412:	77 fd       	sbrc	r23, 7
    2414:	1b c0       	rjmp	.+54     	; 0x244c <_ZN5Print5printEli+0x6a>
      print('-');
      n = -n;
    }
    printNumber(n, 10);
    2416:	ce 01       	movw	r24, r28
    2418:	b8 01       	movw	r22, r16
    241a:	a7 01       	movw	r20, r14
    241c:	2a e0       	ldi	r18, 0x0A	; 10
    241e:	0e 94 39 11 	call	0x2272	; 0x2272 <_ZN5Print11printNumberEmh>
  } else {
    printNumber(n, base);
  }
}
    2422:	df 91       	pop	r29
    2424:	cf 91       	pop	r28
    2426:	1f 91       	pop	r17
    2428:	0f 91       	pop	r16
    242a:	ff 90       	pop	r15
    242c:	ef 90       	pop	r14
    242e:	08 95       	ret
}

void Print::print(long n, int base)
{
  if (base == 0) {
    write(n);
    2430:	e8 81       	ld	r30, Y
    2432:	f9 81       	ldd	r31, Y+1	; 0x01
    2434:	01 90       	ld	r0, Z+
    2436:	f0 81       	ld	r31, Z
    2438:	e0 2d       	mov	r30, r0
    243a:	64 2f       	mov	r22, r20
    243c:	09 95       	icall
    }
    printNumber(n, 10);
  } else {
    printNumber(n, base);
  }
}
    243e:	df 91       	pop	r29
    2440:	cf 91       	pop	r28
    2442:	1f 91       	pop	r17
    2444:	0f 91       	pop	r16
    2446:	ff 90       	pop	r15
    2448:	ef 90       	pop	r14
    244a:	08 95       	ret
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    244c:	4d e2       	ldi	r20, 0x2D	; 45
    244e:	50 e0       	ldi	r21, 0x00	; 0
    2450:	60 e0       	ldi	r22, 0x00	; 0
    2452:	70 e0       	ldi	r23, 0x00	; 0
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_ZN5Print5printEli>
  if (base == 0) {
    write(n);
  } else if (base == 10) {
    if (n < 0) {
      print('-');
      n = -n;
    245c:	10 95       	com	r17
    245e:	00 95       	com	r16
    2460:	f0 94       	com	r15
    2462:	e0 94       	com	r14
    2464:	e1 1c       	adc	r14, r1
    2466:	f1 1c       	adc	r15, r1
    2468:	01 1d       	adc	r16, r1
    246a:	11 1d       	adc	r17, r1
    246c:	d4 cf       	rjmp	.-88     	; 0x2416 <_ZN5Print5printEli+0x34>

0000246e <_ZN5Print5printEii>:
{
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
{
    246e:	ef 92       	push	r14
    2470:	ff 92       	push	r15
    2472:	0f 93       	push	r16
    2474:	1f 93       	push	r17
    2476:	9a 01       	movw	r18, r20
  print((long) n, base);
    2478:	7b 01       	movw	r14, r22
    247a:	00 27       	eor	r16, r16
    247c:	f7 fc       	sbrc	r15, 7
    247e:	00 95       	com	r16
    2480:	10 2f       	mov	r17, r16
    2482:	b8 01       	movw	r22, r16
    2484:	a7 01       	movw	r20, r14
    2486:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_ZN5Print5printEli>
}
    248a:	1f 91       	pop	r17
    248c:	0f 91       	pop	r16
    248e:	ff 90       	pop	r15
    2490:	ef 90       	pop	r14
    2492:	08 95       	ret

00002494 <_ZN5Print5printEci>:
{
  write(str);
}

void Print::print(char c, int base)
{
    2494:	9a 01       	movw	r18, r20
  print((long) c, base);
    2496:	46 2f       	mov	r20, r22
    2498:	50 e0       	ldi	r21, 0x00	; 0
    249a:	60 e0       	ldi	r22, 0x00	; 0
    249c:	70 e0       	ldi	r23, 0x00	; 0
    249e:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_ZN5Print5printEli>
}
    24a2:	08 95       	ret

000024a4 <_ZN5Print7printlnEv>:
{
  printFloat(n, digits);
}

void Print::println(void)
{
    24a4:	cf 93       	push	r28
    24a6:	df 93       	push	r29
    24a8:	ec 01       	movw	r28, r24
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    24aa:	4d e0       	ldi	r20, 0x0D	; 13
    24ac:	50 e0       	ldi	r21, 0x00	; 0
    24ae:	60 e0       	ldi	r22, 0x00	; 0
    24b0:	70 e0       	ldi	r23, 0x00	; 0
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_ZN5Print5printEli>
    24ba:	ce 01       	movw	r24, r28
    24bc:	4a e0       	ldi	r20, 0x0A	; 10
    24be:	50 e0       	ldi	r21, 0x00	; 0
    24c0:	60 e0       	ldi	r22, 0x00	; 0
    24c2:	70 e0       	ldi	r23, 0x00	; 0
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_ZN5Print5printEli>

void Print::println(void)
{
  print('\r');
  print('\n');  
}
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	08 95       	ret

000024d2 <_ZN5Print7printlnEmi>:
  print(n, base);
  println();
}

void Print::println(unsigned long n, int base)
{
    24d2:	cf 93       	push	r28
    24d4:	df 93       	push	r29
    24d6:	ec 01       	movw	r28, r24
  print(n, base);
    24d8:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <_ZN5Print5printEmi>
  println();
    24dc:	ce 01       	movw	r24, r28
    24de:	0e 94 52 12 	call	0x24a4	; 0x24a4 <_ZN5Print7printlnEv>
}
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	08 95       	ret

000024e8 <_ZN5Print7printlnEji>:
  print(n, base);
  println();
}

void Print::println(unsigned int n, int base)
{
    24e8:	cf 93       	push	r28
    24ea:	df 93       	push	r29
    24ec:	ec 01       	movw	r28, r24
    24ee:	9a 01       	movw	r18, r20
  print((long) n, base);
}

void Print::print(unsigned int n, int base)
{
  print((unsigned long) n, base);
    24f0:	ab 01       	movw	r20, r22
    24f2:	60 e0       	ldi	r22, 0x00	; 0
    24f4:	70 e0       	ldi	r23, 0x00	; 0
    24f6:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <_ZN5Print5printEmi>
}

void Print::println(unsigned int n, int base)
{
  print(n, base);
  println();
    24fa:	ce 01       	movw	r24, r28
    24fc:	0e 94 52 12 	call	0x24a4	; 0x24a4 <_ZN5Print7printlnEv>
}
    2500:	df 91       	pop	r29
    2502:	cf 91       	pop	r28
    2504:	08 95       	ret

00002506 <_ZN5Print7printlnEhi>:
  print(c, base);
  println();
}

void Print::println(unsigned char b, int base)
{
    2506:	cf 93       	push	r28
    2508:	df 93       	push	r29
    250a:	ec 01       	movw	r28, r24
    250c:	9a 01       	movw	r18, r20
  print((long) c, base);
}

void Print::print(unsigned char b, int base)
{
  print((unsigned long) b, base);
    250e:	46 2f       	mov	r20, r22
    2510:	50 e0       	ldi	r21, 0x00	; 0
    2512:	60 e0       	ldi	r22, 0x00	; 0
    2514:	70 e0       	ldi	r23, 0x00	; 0
    2516:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <_ZN5Print5printEmi>
}

void Print::println(unsigned char b, int base)
{
  print(b, base);
  println();
    251a:	ce 01       	movw	r24, r28
    251c:	0e 94 52 12 	call	0x24a4	; 0x24a4 <_ZN5Print7printlnEv>
}
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	08 95       	ret

00002526 <_ZN5Print7printlnEPKc>:
  print(s);
  println();
}

void Print::println(const char c[])
{
    2526:	cf 93       	push	r28
    2528:	df 93       	push	r29
    252a:	ec 01       	movw	r28, r24
  print(c);
    252c:	0e 94 ff 10 	call	0x21fe	; 0x21fe <_ZN5Print5printEPKc>
  println();
    2530:	ce 01       	movw	r24, r28
    2532:	0e 94 52 12 	call	0x24a4	; 0x24a4 <_ZN5Print7printlnEv>
}
    2536:	df 91       	pop	r29
    2538:	cf 91       	pop	r28
    253a:	08 95       	ret

0000253c <_ZN5Print7printlnERK6String>:
  print('\r');
  print('\n');  
}

void Print::println(const String &s)
{
    253c:	cf 93       	push	r28
    253e:	df 93       	push	r29
    2540:	ec 01       	movw	r28, r24
  print(s);
    2542:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN5Print5printERK6String>
  println();
    2546:	ce 01       	movw	r24, r28
    2548:	0e 94 52 12 	call	0x24a4	; 0x24a4 <_ZN5Print7printlnEv>
}
    254c:	df 91       	pop	r29
    254e:	cf 91       	pop	r28
    2550:	08 95       	ret

00002552 <_ZN5Print7printlnEli>:
  print(n, base);
  println();
}

void Print::println(long n, int base)
{
    2552:	cf 93       	push	r28
    2554:	df 93       	push	r29
    2556:	ec 01       	movw	r28, r24
  print(n, base);
    2558:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_ZN5Print5printEli>
  println();
    255c:	ce 01       	movw	r24, r28
    255e:	0e 94 52 12 	call	0x24a4	; 0x24a4 <_ZN5Print7printlnEv>
}
    2562:	df 91       	pop	r29
    2564:	cf 91       	pop	r28
    2566:	08 95       	ret

00002568 <_ZN5Print7printlnEii>:
  print(b, base);
  println();
}

void Print::println(int n, int base)
{
    2568:	cf 93       	push	r28
    256a:	df 93       	push	r29
    256c:	ec 01       	movw	r28, r24
    256e:	cb 01       	movw	r24, r22
    2570:	9a 01       	movw	r18, r20
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
{
  print((long) n, base);
    2572:	ac 01       	movw	r20, r24
    2574:	66 27       	eor	r22, r22
    2576:	57 fd       	sbrc	r21, 7
    2578:	60 95       	com	r22
    257a:	76 2f       	mov	r23, r22
    257c:	ce 01       	movw	r24, r28
    257e:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_ZN5Print5printEli>
}

void Print::println(int n, int base)
{
  print(n, base);
  println();
    2582:	ce 01       	movw	r24, r28
    2584:	0e 94 52 12 	call	0x24a4	; 0x24a4 <_ZN5Print7printlnEv>
}
    2588:	df 91       	pop	r29
    258a:	cf 91       	pop	r28
    258c:	08 95       	ret

0000258e <_ZN5Print7printlnEci>:
  print(c);
  println();
}

void Print::println(char c, int base)
{
    258e:	cf 93       	push	r28
    2590:	df 93       	push	r29
    2592:	ec 01       	movw	r28, r24
    2594:	9a 01       	movw	r18, r20
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    2596:	46 2f       	mov	r20, r22
    2598:	50 e0       	ldi	r21, 0x00	; 0
    259a:	60 e0       	ldi	r22, 0x00	; 0
    259c:	70 e0       	ldi	r23, 0x00	; 0
    259e:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_ZN5Print5printEli>
}

void Print::println(char c, int base)
{
  print(c, base);
  println();
    25a2:	ce 01       	movw	r24, r28
    25a4:	0e 94 52 12 	call	0x24a4	; 0x24a4 <_ZN5Print7printlnEv>
}
    25a8:	df 91       	pop	r29
    25aa:	cf 91       	pop	r28
    25ac:	08 95       	ret

000025ae <_ZN5Print10printFloatEdh>:
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}

void Print::printFloat(double number, uint8_t digits) 
{ 
    25ae:	9f 92       	push	r9
    25b0:	af 92       	push	r10
    25b2:	bf 92       	push	r11
    25b4:	cf 92       	push	r12
    25b6:	df 92       	push	r13
    25b8:	ef 92       	push	r14
    25ba:	ff 92       	push	r15
    25bc:	0f 93       	push	r16
    25be:	1f 93       	push	r17
    25c0:	cf 93       	push	r28
    25c2:	df 93       	push	r29
    25c4:	ec 01       	movw	r28, r24
    25c6:	6a 01       	movw	r12, r20
    25c8:	7b 01       	movw	r14, r22
    25ca:	12 2f       	mov	r17, r18
  // Handle negative numbers
  if (number < 0.0)
    25cc:	cb 01       	movw	r24, r22
    25ce:	ba 01       	movw	r22, r20
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	a9 01       	movw	r20, r18
    25d6:	0e 94 ed 25 	call	0x4bda	; 0x4bda <__ltsf2>
    25da:	88 23       	and	r24, r24
    25dc:	0c f4       	brge	.+2      	; 0x25e0 <_ZN5Print10printFloatEdh+0x32>
    25de:	83 c0       	rjmp	.+262    	; 0x26e6 <_ZN5Print10printFloatEdh+0x138>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    25e0:	11 23       	and	r17, r17
    25e2:	09 f4       	brne	.+2      	; 0x25e6 <_ZN5Print10printFloatEdh+0x38>
    25e4:	8e c0       	rjmp	.+284    	; 0x2702 <_ZN5Print10printFloatEdh+0x154>
    25e6:	00 e0       	ldi	r16, 0x00	; 0
    25e8:	50 e0       	ldi	r21, 0x00	; 0
    25ea:	40 e0       	ldi	r20, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	2f e3       	ldi	r18, 0x3F	; 63
    rounding /= 10.0;
    25f0:	da 01       	movw	r26, r20
    25f2:	f9 01       	movw	r30, r18
    25f4:	6b 2f       	mov	r22, r27
    25f6:	74 2f       	mov	r23, r20
    25f8:	8f 2f       	mov	r24, r31
    25fa:	92 2f       	mov	r25, r18
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e2       	ldi	r20, 0x20	; 32
    2602:	51 e4       	ldi	r21, 0x41	; 65
    2604:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <__divsf3>
    2608:	56 2f       	mov	r21, r22
    260a:	47 2f       	mov	r20, r23
    260c:	38 2f       	mov	r19, r24
    260e:	29 2f       	mov	r18, r25
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2610:	0f 5f       	subi	r16, 0xFF	; 255
    2612:	01 17       	cp	r16, r17
    2614:	68 f3       	brcs	.-38     	; 0x25f0 <_ZN5Print10printFloatEdh+0x42>
    rounding /= 10.0;
  
  number += rounding;
    2616:	c7 01       	movw	r24, r14
    2618:	b6 01       	movw	r22, r12
    261a:	da 01       	movw	r26, r20
    261c:	f9 01       	movw	r30, r18
    261e:	2b 2f       	mov	r18, r27
    2620:	3a 2f       	mov	r19, r26
    2622:	4f 2f       	mov	r20, r31
    2624:	5e 2f       	mov	r21, r30
    2626:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <__addsf3>
    262a:	5b 01       	movw	r10, r22
    262c:	c8 2e       	mov	r12, r24
    262e:	09 2f       	mov	r16, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2630:	7b 2d       	mov	r23, r11
    2632:	0e 94 3d 22 	call	0x447a	; 0x447a <__fixunssfsi>
    2636:	96 2e       	mov	r9, r22
    2638:	f7 2e       	mov	r15, r23
    263a:	e8 2e       	mov	r14, r24
    263c:	d9 2e       	mov	r13, r25
  double remainder = number - (double)int_part;
    263e:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <__floatunsisf>
    2642:	9b 01       	movw	r18, r22
    2644:	ac 01       	movw	r20, r24
    2646:	6a 2d       	mov	r22, r10
    2648:	7b 2d       	mov	r23, r11
    264a:	8c 2d       	mov	r24, r12
    264c:	90 2f       	mov	r25, r16
    264e:	0e 94 b9 23 	call	0x4772	; 0x4772 <__subsf3>
    2652:	5b 01       	movw	r10, r22
    2654:	c8 2e       	mov	r12, r24
    2656:	09 2f       	mov	r16, r25
  print(int_part);
    2658:	ce 01       	movw	r24, r28
    265a:	49 2d       	mov	r20, r9
    265c:	5f 2d       	mov	r21, r15
    265e:	6e 2d       	mov	r22, r14
    2660:	7d 2d       	mov	r23, r13
    2662:	2a e0       	ldi	r18, 0x0A	; 10
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <_ZN5Print5printEmi>

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    print("."); 
    266a:	ce 01       	movw	r24, r28
    266c:	6e ee       	ldi	r22, 0xEE	; 238
    266e:	71 e0       	ldi	r23, 0x01	; 1
    2670:	0e 94 ff 10 	call	0x21fe	; 0x21fe <_ZN5Print5printEPKc>

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    2674:	6a 2d       	mov	r22, r10
    2676:	7b 2d       	mov	r23, r11
    2678:	8c 2d       	mov	r24, r12
    267a:	90 2f       	mov	r25, r16
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e2       	ldi	r20, 0x20	; 32
    2682:	51 e4       	ldi	r21, 0x41	; 65
    2684:	0e 94 17 24 	call	0x482e	; 0x482e <__mulsf3>
    2688:	06 2f       	mov	r16, r22
    268a:	b7 2e       	mov	r11, r23
    268c:	a8 2e       	mov	r10, r24
    268e:	99 2e       	mov	r9, r25
    int toPrint = int(remainder);
    2690:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__fixsfsi>
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
{
  print((long) n, base);
    2694:	6b 01       	movw	r12, r22
    2696:	ee 24       	eor	r14, r14
    2698:	d7 fc       	sbrc	r13, 7
    269a:	e0 94       	com	r14
    269c:	fe 2c       	mov	r15, r14
    269e:	ce 01       	movw	r24, r28
    26a0:	b7 01       	movw	r22, r14
    26a2:	a6 01       	movw	r20, r12
    26a4:	2a e0       	ldi	r18, 0x0A	; 10
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_ZN5Print5printEli>
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
    26ac:	c7 01       	movw	r24, r14
    26ae:	b6 01       	movw	r22, r12
    26b0:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <__floatsisf>
    26b4:	9b 01       	movw	r18, r22
    26b6:	ac 01       	movw	r20, r24
    26b8:	60 2f       	mov	r22, r16
    26ba:	7b 2d       	mov	r23, r11
    26bc:	8a 2d       	mov	r24, r10
    26be:	99 2d       	mov	r25, r9
    26c0:	0e 94 b9 23 	call	0x4772	; 0x4772 <__subsf3>
    26c4:	5b 01       	movw	r10, r22
    26c6:	c8 2e       	mov	r12, r24
    26c8:	09 2f       	mov	r16, r25
    26ca:	11 50       	subi	r17, 0x01	; 1
  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    print("."); 

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    26cc:	99 f6       	brne	.-90     	; 0x2674 <_ZN5Print10printFloatEdh+0xc6>
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
  } 
}
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	1f 91       	pop	r17
    26d4:	0f 91       	pop	r16
    26d6:	ff 90       	pop	r15
    26d8:	ef 90       	pop	r14
    26da:	df 90       	pop	r13
    26dc:	cf 90       	pop	r12
    26de:	bf 90       	pop	r11
    26e0:	af 90       	pop	r10
    26e2:	9f 90       	pop	r9
    26e4:	08 95       	ret
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    26e6:	ce 01       	movw	r24, r28
    26e8:	4d e2       	ldi	r20, 0x2D	; 45
    26ea:	50 e0       	ldi	r21, 0x00	; 0
    26ec:	60 e0       	ldi	r22, 0x00	; 0
    26ee:	70 e0       	ldi	r23, 0x00	; 0
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_ZN5Print5printEli>
{ 
  // Handle negative numbers
  if (number < 0.0)
  {
     print('-');
     number = -number;
    26f8:	f7 fa       	bst	r15, 7
    26fa:	f0 94       	com	r15
    26fc:	f7 f8       	bld	r15, 7
    26fe:	f0 94       	com	r15
    2700:	6f cf       	rjmp	.-290    	; 0x25e0 <_ZN5Print10printFloatEdh+0x32>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  print(int_part);
    2702:	c7 01       	movw	r24, r14
    2704:	b6 01       	movw	r22, r12
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	40 e0       	ldi	r20, 0x00	; 0
    270c:	5f e3       	ldi	r21, 0x3F	; 63
    270e:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <__addsf3>
    2712:	0e 94 3d 22 	call	0x447a	; 0x447a <__fixunssfsi>
    2716:	ab 01       	movw	r20, r22
    2718:	bc 01       	movw	r22, r24
    271a:	ce 01       	movw	r24, r28
    271c:	2a e0       	ldi	r18, 0x0A	; 10
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <_ZN5Print5printEmi>
    2724:	d4 cf       	rjmp	.-88     	; 0x26ce <_ZN5Print10printFloatEdh+0x120>

00002726 <_ZN5Print5printEdi>:
  else printNumber(n, base);
}

void Print::print(double n, int digits)
{
  printFloat(n, digits);
    2726:	0e 94 d7 12 	call	0x25ae	; 0x25ae <_ZN5Print10printFloatEdh>
}
    272a:	08 95       	ret

0000272c <_ZN5Print7printlnEdi>:
  print(n, base);
  println();
}

void Print::println(double n, int digits)
{
    272c:	cf 93       	push	r28
    272e:	df 93       	push	r29
    2730:	ec 01       	movw	r28, r24
  else printNumber(n, base);
}

void Print::print(double n, int digits)
{
  printFloat(n, digits);
    2732:	0e 94 d7 12 	call	0x25ae	; 0x25ae <_ZN5Print10printFloatEdh>
}

void Print::println(double n, int digits)
{
  print(n, digits);
  println();
    2736:	ce 01       	movw	r24, r28
    2738:	0e 94 52 12 	call	0x24a4	; 0x24a4 <_ZN5Print7printlnEv>
}
    273c:	df 91       	pop	r29
    273e:	cf 91       	pop	r28
    2740:	08 95       	ret

00002742 <_ZN7TwoWireC2Ev>:

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
{
}
    2742:	08 95       	ret

00002744 <_ZN7TwoWireC1Ev>:
    2744:	08 95       	ret

00002746 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	80 93 24 04 	sts	0x0424, r24
  // set address of targeted slave
  txAddress = address;
    274c:	60 93 01 04 	sts	0x0401, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2750:	10 92 22 04 	sts	0x0422, r1
  txBufferLength = 0;
    2754:	10 92 23 04 	sts	0x0423, r1
}
    2758:	08 95       	ret

0000275a <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	80 93 24 04 	sts	0x0424, r24
  // set address of targeted slave
  txAddress = address;
    2760:	60 93 01 04 	sts	0x0401, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2764:	10 92 22 04 	sts	0x0422, r1
  txBufferLength = 0;
    2768:	10 92 23 04 	sts	0x0423, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    276c:	08 95       	ret

0000276e <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
uint8_t TwoWire::available(void)
{
    276e:	80 91 00 04 	lds	r24, 0x0400
    2772:	90 91 ff 03 	lds	r25, 0x03FF
  return rxBufferLength - rxBufferIndex;
}
    2776:	89 1b       	sub	r24, r25
    2778:	08 95       	ret

0000277a <_ZN7TwoWire7receiveEv>:
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    277a:	90 91 ff 03 	lds	r25, 0x03FF
    277e:	80 91 00 04 	lds	r24, 0x0400
    2782:	98 17       	cp	r25, r24
    2784:	48 f4       	brcc	.+18     	; 0x2798 <_ZN7TwoWire7receiveEv+0x1e>
    value = rxBuffer[rxBufferIndex];
    2786:	e9 2f       	mov	r30, r25
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	e1 52       	subi	r30, 0x21	; 33
    278c:	fc 4f       	sbci	r31, 0xFC	; 252
    278e:	80 81       	ld	r24, Z
    ++rxBufferIndex;
    2790:	9f 5f       	subi	r25, 0xFF	; 255
    2792:	90 93 ff 03 	sts	0x03FF, r25
  }

  return value;
}
    2796:	08 95       	ret
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	08 95       	ret

0000279c <_ZN7TwoWire16onReceiveServiceEPhi>:
  return value;
}

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
    279c:	cf 93       	push	r28
    279e:	df 93       	push	r29
    27a0:	9c 01       	movw	r18, r24
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    27a2:	e0 91 27 04 	lds	r30, 0x0427
    27a6:	f0 91 28 04 	lds	r31, 0x0428
    27aa:	30 97       	sbiw	r30, 0x00	; 0
    27ac:	11 f1       	breq	.+68     	; 0x27f2 <_ZN7TwoWire16onReceiveServiceEPhi+0x56>
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    27ae:	90 91 ff 03 	lds	r25, 0x03FF
    27b2:	80 91 00 04 	lds	r24, 0x0400
    27b6:	98 17       	cp	r25, r24
    27b8:	e0 f0       	brcs	.+56     	; 0x27f2 <_ZN7TwoWire16onReceiveServiceEPhi+0x56>
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    27ba:	16 16       	cp	r1, r22
    27bc:	17 06       	cpc	r1, r23
    27be:	9c f4       	brge	.+38     	; 0x27e6 <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
    27c0:	a0 e0       	ldi	r26, 0x00	; 0
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	40 e0       	ldi	r20, 0x00	; 0
    27c8:	50 e0       	ldi	r21, 0x00	; 0
    rxBuffer[i] = inBytes[i];    
    27ca:	a1 52       	subi	r26, 0x21	; 33
    27cc:	bc 4f       	sbci	r27, 0xFC	; 252
    27ce:	42 0f       	add	r20, r18
    27d0:	53 1f       	adc	r21, r19
    27d2:	ea 01       	movw	r28, r20
    27d4:	48 81       	ld	r20, Y
    27d6:	4c 93       	st	X, r20
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    27d8:	9f 5f       	subi	r25, 0xFF	; 255
    27da:	49 2f       	mov	r20, r25
    27dc:	50 e0       	ldi	r21, 0x00	; 0
    27de:	da 01       	movw	r26, r20
    27e0:	46 17       	cp	r20, r22
    27e2:	57 07       	cpc	r21, r23
    27e4:	94 f3       	brlt	.-28     	; 0x27ca <_ZN7TwoWire16onReceiveServiceEPhi+0x2e>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
    27e6:	10 92 ff 03 	sts	0x03FF, r1
  rxBufferLength = numBytes;
    27ea:	60 93 00 04 	sts	0x0400, r22
  // alert user program
  user_onReceive(numBytes);
    27ee:	cb 01       	movw	r24, r22
    27f0:	09 95       	icall
}
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	08 95       	ret

000027f8 <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    27f8:	e0 91 25 04 	lds	r30, 0x0425
    27fc:	f0 91 26 04 	lds	r31, 0x0426
    2800:	30 97       	sbiw	r30, 0x00	; 0
    2802:	29 f0       	breq	.+10     	; 0x280e <_ZN7TwoWire16onRequestServiceEv+0x16>
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
    2804:	10 92 22 04 	sts	0x0422, r1
  txBufferLength = 0;
    2808:	10 92 23 04 	sts	0x0423, r1
  // alert user program
  user_onRequest();
    280c:	09 95       	icall
    280e:	08 95       	ret

00002810 <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  user_onReceive = function;
    2810:	70 93 28 04 	sts	0x0428, r23
    2814:	60 93 27 04 	sts	0x0427, r22
}
    2818:	08 95       	ret

0000281a <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    281a:	70 93 26 04 	sts	0x0426, r23
    281e:	60 93 25 04 	sts	0x0425, r22
}
    2822:	08 95       	ret

00002824 <_ZN7TwoWire4sendEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(uint8_t data)
{
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	0f 92       	push	r0
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    2830:	80 91 24 04 	lds	r24, 0x0424
    2834:	88 23       	and	r24, r24
    2836:	c1 f0       	breq	.+48     	; 0x2868 <_ZN7TwoWire4sendEh+0x44>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    2838:	80 91 23 04 	lds	r24, 0x0423
    283c:	80 32       	cpi	r24, 0x20	; 32
    283e:	20 f0       	brcs	.+8      	; 0x2848 <_ZN7TwoWire4sendEh+0x24>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
}
    2840:	0f 90       	pop	r0
    2842:	cf 91       	pop	r28
    2844:	df 91       	pop	r29
    2846:	08 95       	ret
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
      return;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    2848:	80 91 22 04 	lds	r24, 0x0422
    284c:	e8 2f       	mov	r30, r24
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	ee 5f       	subi	r30, 0xFE	; 254
    2852:	fb 4f       	sbci	r31, 0xFB	; 251
    2854:	60 83       	st	Z, r22
    ++txBufferIndex;
    2856:	8f 5f       	subi	r24, 0xFF	; 255
    2858:	80 93 22 04 	sts	0x0422, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    285c:	80 93 23 04 	sts	0x0423, r24
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
}
    2860:	0f 90       	pop	r0
    2862:	cf 91       	pop	r28
    2864:	df 91       	pop	r29
    2866:	08 95       	ret
    // update amount in buffer   
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    2868:	ce 01       	movw	r24, r28
    286a:	01 96       	adiw	r24, 0x01	; 1
    286c:	61 e0       	ldi	r22, 0x01	; 1
    286e:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <twi_transmit>
  }
}
    2872:	0f 90       	pop	r0
    2874:	cf 91       	pop	r28
    2876:	df 91       	pop	r29
    2878:	08 95       	ret

0000287a <_ZN7TwoWire4sendEi>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(int data)
{
  send((uint8_t)data);
    287a:	0e 94 12 14 	call	0x2824	; 0x2824 <_ZN7TwoWire4sendEh>
}
    287e:	08 95       	ret

00002880 <_ZN7TwoWire4sendEPhh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(uint8_t* data, uint8_t quantity)
{
    2880:	ef 92       	push	r14
    2882:	ff 92       	push	r15
    2884:	0f 93       	push	r16
    2886:	1f 93       	push	r17
    2888:	cf 93       	push	r28
    288a:	df 93       	push	r29
    288c:	ec 01       	movw	r28, r24
    288e:	16 2f       	mov	r17, r22
    2890:	04 2f       	mov	r16, r20
  if(transmitting){
    2892:	80 91 24 04 	lds	r24, 0x0424
    2896:	88 23       	and	r24, r24
    2898:	a9 f0       	breq	.+42     	; 0x28c4 <_ZN7TwoWire4sendEPhh+0x44>
  // in master transmitter mode
    for(uint8_t i = 0; i < quantity; ++i){
    289a:	44 23       	and	r20, r20
    289c:	61 f0       	breq	.+24     	; 0x28b6 <_ZN7TwoWire4sendEPhh+0x36>
    289e:	e6 2e       	mov	r14, r22
    28a0:	f7 2e       	mov	r15, r23
      send(data[i]);
    28a2:	ce 01       	movw	r24, r28
    28a4:	f7 01       	movw	r30, r14
    28a6:	61 91       	ld	r22, Z+
    28a8:	7f 01       	movw	r14, r30
    28aa:	0e 94 12 14 	call	0x2824	; 0x2824 <_ZN7TwoWire4sendEh>
// or after beginTransmission(address)
void TwoWire::send(uint8_t* data, uint8_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(uint8_t i = 0; i < quantity; ++i){
    28ae:	8e 2d       	mov	r24, r14
    28b0:	81 1b       	sub	r24, r17
    28b2:	80 17       	cp	r24, r16
    28b4:	b0 f3       	brcs	.-20     	; 0x28a2 <_ZN7TwoWire4sendEPhh+0x22>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
  }
}
    28b6:	df 91       	pop	r29
    28b8:	cf 91       	pop	r28
    28ba:	1f 91       	pop	r17
    28bc:	0f 91       	pop	r16
    28be:	ff 90       	pop	r15
    28c0:	ef 90       	pop	r14
    28c2:	08 95       	ret
      send(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    28c4:	86 2f       	mov	r24, r22
    28c6:	97 2f       	mov	r25, r23
    28c8:	64 2f       	mov	r22, r20
    28ca:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <twi_transmit>
  }
}
    28ce:	df 91       	pop	r29
    28d0:	cf 91       	pop	r28
    28d2:	1f 91       	pop	r17
    28d4:	0f 91       	pop	r16
    28d6:	ff 90       	pop	r15
    28d8:	ef 90       	pop	r14
    28da:	08 95       	ret

000028dc <_ZN7TwoWire4sendEPc>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(char* data)
{
  send((uint8_t*)data, strlen(data));
    28dc:	db 01       	movw	r26, r22
    28de:	0d 90       	ld	r0, X+
    28e0:	00 20       	and	r0, r0
    28e2:	e9 f7       	brne	.-6      	; 0x28de <_ZN7TwoWire4sendEPc+0x2>
    28e4:	ad 01       	movw	r20, r26
    28e6:	41 50       	subi	r20, 0x01	; 1
    28e8:	50 40       	sbci	r21, 0x00	; 0
    28ea:	46 1b       	sub	r20, r22
    28ec:	57 0b       	sbc	r21, r23
    28ee:	0e 94 40 14 	call	0x2880	; 0x2880 <_ZN7TwoWire4sendEPhh>
}
    28f2:	08 95       	ret

000028f4 <_ZN7TwoWire15endTransmissionEv>:
}

uint8_t TwoWire::endTransmission(void)
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1);
    28f4:	80 91 01 04 	lds	r24, 0x0401
    28f8:	62 e0       	ldi	r22, 0x02	; 2
    28fa:	74 e0       	ldi	r23, 0x04	; 4
    28fc:	40 91 23 04 	lds	r20, 0x0423
    2900:	21 e0       	ldi	r18, 0x01	; 1
    2902:	0e 94 82 20 	call	0x4104	; 0x4104 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2906:	10 92 22 04 	sts	0x0422, r1
  txBufferLength = 0;
    290a:	10 92 23 04 	sts	0x0423, r1
  // indicate that we are done transmitting
  transmitting = 0;
    290e:	10 92 24 04 	sts	0x0424, r1
  return ret;
}
    2912:	08 95       	ret

00002914 <_ZN7TwoWire11requestFromEhh>:
{
  begin((uint8_t)address);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
    2914:	86 2f       	mov	r24, r22
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity);
    2916:	41 32       	cpi	r20, 0x21	; 33
    2918:	08 f0       	brcs	.+2      	; 0x291c <_ZN7TwoWire11requestFromEhh+0x8>
    291a:	40 e2       	ldi	r20, 0x20	; 32
    291c:	6f ed       	ldi	r22, 0xDF	; 223
    291e:	73 e0       	ldi	r23, 0x03	; 3
    2920:	0e 94 49 20 	call	0x4092	; 0x4092 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    2924:	10 92 ff 03 	sts	0x03FF, r1
  rxBufferLength = read;
    2928:	80 93 00 04 	sts	0x0400, r24

  return read;
}
    292c:	08 95       	ret

0000292e <_ZN7TwoWire11requestFromEii>:

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity);
    292e:	0e 94 8a 14 	call	0x2914	; 0x2914 <_ZN7TwoWire11requestFromEhh>
}
    2932:	08 95       	ret

00002934 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    2934:	10 92 ff 03 	sts	0x03FF, r1
  rxBufferLength = 0;
    2938:	10 92 00 04 	sts	0x0400, r1

  txBufferIndex = 0;
    293c:	10 92 22 04 	sts	0x0422, r1
  txBufferLength = 0;
    2940:	10 92 23 04 	sts	0x0423, r1

  twi_init();
    2944:	0e 94 32 20 	call	0x4064	; 0x4064 <twi_init>
}
    2948:	08 95       	ret

0000294a <_ZN7TwoWire5beginEh>:

void TwoWire::begin(uint8_t address)
{
    294a:	cf 93       	push	r28
    294c:	df 93       	push	r29
    294e:	ec 01       	movw	r28, r24
    2950:	86 2f       	mov	r24, r22
  twi_setAddress(address);
    2952:	0e 94 45 20 	call	0x408a	; 0x408a <twi_setAddress>
  twi_attachSlaveTxEvent(onRequestService);
    2956:	8c ef       	ldi	r24, 0xFC	; 252
    2958:	93 e1       	ldi	r25, 0x13	; 19
    295a:	0e 94 f5 20 	call	0x41ea	; 0x41ea <twi_attachSlaveTxEvent>
  twi_attachSlaveRxEvent(onReceiveService);
    295e:	8e ec       	ldi	r24, 0xCE	; 206
    2960:	93 e1       	ldi	r25, 0x13	; 19
    2962:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <twi_attachSlaveRxEvent>
  begin();
    2966:	ce 01       	movw	r24, r28
    2968:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN7TwoWire5beginEv>
}
    296c:	df 91       	pop	r29
    296e:	cf 91       	pop	r28
    2970:	08 95       	ret

00002972 <_ZN7TwoWire5beginEi>:

void TwoWire::begin(int address)
{
  begin((uint8_t)address);
    2972:	0e 94 a5 14 	call	0x294a	; 0x294a <_ZN7TwoWire5beginEh>
}
    2976:	08 95       	ret

00002978 <__vector_16>:
volatile unsigned long timer0_overflow_count = 0;
volatile unsigned long timer0_millis = 0;
static unsigned char timer0_fract = 0;

SIGNAL(TIMER0_OVF_vect)
{
    2978:	1f 92       	push	r1
    297a:	0f 92       	push	r0
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	0f 92       	push	r0
    2980:	11 24       	eor	r1, r1
    2982:	2f 93       	push	r18
    2984:	3f 93       	push	r19
    2986:	8f 93       	push	r24
    2988:	9f 93       	push	r25
    298a:	af 93       	push	r26
    298c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    298e:	80 91 2d 04 	lds	r24, 0x042D
    2992:	90 91 2e 04 	lds	r25, 0x042E
    2996:	a0 91 2f 04 	lds	r26, 0x042F
    299a:	b0 91 30 04 	lds	r27, 0x0430
	unsigned char f = timer0_fract;
    299e:	30 91 31 04 	lds	r19, 0x0431

	m += MILLIS_INC;
    29a2:	01 96       	adiw	r24, 0x01	; 1
    29a4:	a1 1d       	adc	r26, r1
    29a6:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    29a8:	23 2f       	mov	r18, r19
    29aa:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    29ac:	2d 37       	cpi	r18, 0x7D	; 125
    29ae:	20 f0       	brcs	.+8      	; 0x29b8 <__vector_16+0x40>
		f -= FRACT_MAX;
    29b0:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    29b2:	01 96       	adiw	r24, 0x01	; 1
    29b4:	a1 1d       	adc	r26, r1
    29b6:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    29b8:	20 93 31 04 	sts	0x0431, r18
	timer0_millis = m;
    29bc:	80 93 2d 04 	sts	0x042D, r24
    29c0:	90 93 2e 04 	sts	0x042E, r25
    29c4:	a0 93 2f 04 	sts	0x042F, r26
    29c8:	b0 93 30 04 	sts	0x0430, r27
	timer0_overflow_count++;
    29cc:	80 91 29 04 	lds	r24, 0x0429
    29d0:	90 91 2a 04 	lds	r25, 0x042A
    29d4:	a0 91 2b 04 	lds	r26, 0x042B
    29d8:	b0 91 2c 04 	lds	r27, 0x042C
    29dc:	01 96       	adiw	r24, 0x01	; 1
    29de:	a1 1d       	adc	r26, r1
    29e0:	b1 1d       	adc	r27, r1
    29e2:	80 93 29 04 	sts	0x0429, r24
    29e6:	90 93 2a 04 	sts	0x042A, r25
    29ea:	a0 93 2b 04 	sts	0x042B, r26
    29ee:	b0 93 2c 04 	sts	0x042C, r27
}
    29f2:	bf 91       	pop	r27
    29f4:	af 91       	pop	r26
    29f6:	9f 91       	pop	r25
    29f8:	8f 91       	pop	r24
    29fa:	3f 91       	pop	r19
    29fc:	2f 91       	pop	r18
    29fe:	0f 90       	pop	r0
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	0f 90       	pop	r0
    2a04:	1f 90       	pop	r1
    2a06:	18 95       	reti

00002a08 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2a08:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2a0a:	f8 94       	cli
	m = timer0_millis;
    2a0c:	20 91 2d 04 	lds	r18, 0x042D
    2a10:	30 91 2e 04 	lds	r19, 0x042E
    2a14:	40 91 2f 04 	lds	r20, 0x042F
    2a18:	50 91 30 04 	lds	r21, 0x0430
	SREG = oldSREG;
    2a1c:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    2a1e:	b9 01       	movw	r22, r18
    2a20:	ca 01       	movw	r24, r20
    2a22:	08 95       	ret

00002a24 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2a24:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    2a26:	f8 94       	cli
	m = timer0_overflow_count;
    2a28:	20 91 29 04 	lds	r18, 0x0429
    2a2c:	30 91 2a 04 	lds	r19, 0x042A
    2a30:	40 91 2b 04 	lds	r20, 0x042B
    2a34:	50 91 2c 04 	lds	r21, 0x042C
#if defined(TCNT0)
	t = TCNT0;
    2a38:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2a3a:	a8 9b       	sbis	0x15, 0	; 21
    2a3c:	06 c0       	rjmp	.+12     	; 0x2a4a <micros+0x26>
    2a3e:	8f 3f       	cpi	r24, 0xFF	; 255
    2a40:	21 f0       	breq	.+8      	; 0x2a4a <micros+0x26>
		m++;
    2a42:	2f 5f       	subi	r18, 0xFF	; 255
    2a44:	3f 4f       	sbci	r19, 0xFF	; 255
    2a46:	4f 4f       	sbci	r20, 0xFF	; 255
    2a48:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2a4a:	9f bf       	out	0x3f, r25	; 63
    2a4c:	54 2f       	mov	r21, r20
    2a4e:	43 2f       	mov	r20, r19
    2a50:	32 2f       	mov	r19, r18
    2a52:	22 27       	eor	r18, r18
    2a54:	28 0f       	add	r18, r24
    2a56:	31 1d       	adc	r19, r1
    2a58:	41 1d       	adc	r20, r1
    2a5a:	51 1d       	adc	r21, r1
    2a5c:	22 0f       	add	r18, r18
    2a5e:	33 1f       	adc	r19, r19
    2a60:	44 1f       	adc	r20, r20
    2a62:	55 1f       	adc	r21, r21
    2a64:	22 0f       	add	r18, r18
    2a66:	33 1f       	adc	r19, r19
    2a68:	44 1f       	adc	r20, r20
    2a6a:	55 1f       	adc	r21, r21
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
    2a6c:	b9 01       	movw	r22, r18
    2a6e:	ca 01       	movw	r24, r20
    2a70:	08 95       	ret

00002a72 <delay>:

void delay(unsigned long ms)
{
    2a72:	ef 92       	push	r14
    2a74:	ff 92       	push	r15
    2a76:	0f 93       	push	r16
    2a78:	1f 93       	push	r17
    2a7a:	cf 93       	push	r28
    2a7c:	df 93       	push	r29
    2a7e:	7b 01       	movw	r14, r22
    2a80:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
    2a82:	0e 94 12 15 	call	0x2a24	; 0x2a24 <micros>
    2a86:	eb 01       	movw	r28, r22

	while (ms > 0) {
    2a88:	e1 14       	cp	r14, r1
    2a8a:	f1 04       	cpc	r15, r1
    2a8c:	01 05       	cpc	r16, r1
    2a8e:	11 05       	cpc	r17, r1
    2a90:	a1 f0       	breq	.+40     	; 0x2aba <delay+0x48>
		if (((uint16_t)micros() - start) >= 1000) {
    2a92:	0e 94 12 15 	call	0x2a24	; 0x2a24 <micros>
    2a96:	6c 1b       	sub	r22, r28
    2a98:	7d 0b       	sbc	r23, r29
    2a9a:	83 e0       	ldi	r24, 0x03	; 3
    2a9c:	68 3e       	cpi	r22, 0xE8	; 232
    2a9e:	78 07       	cpc	r23, r24
    2aa0:	c0 f3       	brcs	.-16     	; 0x2a92 <delay+0x20>
			ms--;
    2aa2:	08 94       	sec
    2aa4:	e1 08       	sbc	r14, r1
    2aa6:	f1 08       	sbc	r15, r1
    2aa8:	01 09       	sbc	r16, r1
    2aaa:	11 09       	sbc	r17, r1
			start += 1000;
    2aac:	c8 51       	subi	r28, 0x18	; 24
    2aae:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    2ab0:	e1 14       	cp	r14, r1
    2ab2:	f1 04       	cpc	r15, r1
    2ab4:	01 05       	cpc	r16, r1
    2ab6:	11 05       	cpc	r17, r1
    2ab8:	61 f7       	brne	.-40     	; 0x2a92 <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2aba:	df 91       	pop	r29
    2abc:	cf 91       	pop	r28
    2abe:	1f 91       	pop	r17
    2ac0:	0f 91       	pop	r16
    2ac2:	ff 90       	pop	r15
    2ac4:	ef 90       	pop	r14
    2ac6:	08 95       	ret

00002ac8 <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    2ac8:	01 97       	sbiw	r24, 0x01	; 1
    2aca:	39 f0       	breq	.+14     	; 0x2ada <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    2acc:	88 0f       	add	r24, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	88 0f       	add	r24, r24
    2ad2:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    2ad4:	02 97       	sbiw	r24, 0x02	; 2

	// busy wait
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	f1 f7       	brne	.-4      	; 0x2ad6 <delayMicroseconds+0xe>
    2ada:	08 95       	ret

00002adc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2adc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2ade:	84 b5       	in	r24, 0x24	; 36
    2ae0:	82 60       	ori	r24, 0x02	; 2
    2ae2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2ae4:	84 b5       	in	r24, 0x24	; 36
    2ae6:	81 60       	ori	r24, 0x01	; 1
    2ae8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2aea:	85 b5       	in	r24, 0x25	; 37
    2aec:	82 60       	ori	r24, 0x02	; 2
    2aee:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2af0:	85 b5       	in	r24, 0x25	; 37
    2af2:	81 60       	ori	r24, 0x01	; 1
    2af4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2af6:	ee e6       	ldi	r30, 0x6E	; 110
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	80 81       	ld	r24, Z
    2afc:	81 60       	ori	r24, 0x01	; 1
    2afe:	80 83       	st	Z, r24
	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

	TCCR1B = 0;
    2b00:	e1 e8       	ldi	r30, 0x81	; 129
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	sbi(TCCR1B, CS11);
    2b06:	80 81       	ld	r24, Z
    2b08:	82 60       	ori	r24, 0x02	; 2
    2b0a:	80 83       	st	Z, r24
	sbi(TCCR1B, CS10);
    2b0c:	80 81       	ld	r24, Z
    2b0e:	81 60       	ori	r24, 0x01	; 1
    2b10:	80 83       	st	Z, r24
	sbi(TCCR1, CS11);
	sbi(TCCR1, CS10);
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2b12:	e0 e8       	ldi	r30, 0x80	; 128
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	81 60       	ori	r24, 0x01	; 1
    2b1a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2b1c:	e1 eb       	ldi	r30, 0xB1	; 177
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	84 60       	ori	r24, 0x04	; 4
    2b24:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2b26:	e0 eb       	ldi	r30, 0xB0	; 176
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	81 60       	ori	r24, 0x01	; 1
    2b2e:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    2b30:	ea e7       	ldi	r30, 0x7A	; 122
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	80 81       	ld	r24, Z
    2b36:	84 60       	ori	r24, 0x04	; 4
    2b38:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2b3a:	80 81       	ld	r24, Z
    2b3c:	82 60       	ori	r24, 0x02	; 2
    2b3e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    2b40:	80 81       	ld	r24, Z
    2b42:	81 60       	ori	r24, 0x01	; 1
    2b44:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2b46:	80 81       	ld	r24, Z
    2b48:	80 68       	ori	r24, 0x80	; 128
    2b4a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2b4c:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    2b50:	08 95       	ret

00002b52 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    2b52:	80 93 fa 01 	sts	0x01FA, r24
}
    2b56:	08 95       	ret

00002b58 <analogRead>:
	uint8_t low, high;

#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    2b58:	8e 30       	cpi	r24, 0x0E	; 14
    2b5a:	08 f0       	brcs	.+2      	; 0x2b5e <analogRead+0x6>
    2b5c:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2b5e:	87 70       	andi	r24, 0x07	; 7
    2b60:	90 91 fa 01 	lds	r25, 0x01FA
    2b64:	92 95       	swap	r25
    2b66:	99 0f       	add	r25, r25
    2b68:	99 0f       	add	r25, r25
    2b6a:	90 7c       	andi	r25, 0xC0	; 192
    2b6c:	98 2b       	or	r25, r24
    2b6e:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2b72:	80 91 7a 00 	lds	r24, 0x007A
    2b76:	80 64       	ori	r24, 0x40	; 64
    2b78:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2b7c:	80 91 7a 00 	lds	r24, 0x007A
    2b80:	86 fd       	sbrc	r24, 6
    2b82:	fc cf       	rjmp	.-8      	; 0x2b7c <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2b84:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    2b88:	30 91 79 00 	lds	r19, 0x0079
    2b8c:	93 2f       	mov	r25, r19
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	28 2b       	or	r18, r24
    2b94:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    2b96:	c9 01       	movw	r24, r18
    2b98:	08 95       	ret

00002b9a <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    2b9a:	1f 93       	push	r17
    2b9c:	cf 93       	push	r28
    2b9e:	df 93       	push	r29
    2ba0:	18 2f       	mov	r17, r24
    2ba2:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    2ba4:	61 e0       	ldi	r22, 0x01	; 1
    2ba6:	0e 94 42 16 	call	0x2c84	; 0x2c84 <pinMode>
	if (val == 0)
    2baa:	20 97       	sbiw	r28, 0x00	; 0
    2bac:	59 f1       	breq	.+86     	; 0x2c04 <analogWrite+0x6a>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
    2bae:	cf 3f       	cpi	r28, 0xFF	; 255
    2bb0:	d1 05       	cpc	r29, r1
    2bb2:	a1 f0       	breq	.+40     	; 0x2bdc <analogWrite+0x42>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2bb4:	e1 2f       	mov	r30, r17
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	eb 54       	subi	r30, 0x4B	; 75
    2bba:	f9 4f       	sbci	r31, 0xF9	; 249
    2bbc:	84 91       	lpm	r24, Z+
    2bbe:	83 30       	cpi	r24, 0x03	; 3
    2bc0:	e1 f1       	breq	.+120    	; 0x2c3a <analogWrite+0xa0>
    2bc2:	84 30       	cpi	r24, 0x04	; 4
    2bc4:	98 f0       	brcs	.+38     	; 0x2bec <analogWrite+0x52>
    2bc6:	86 30       	cpi	r24, 0x06	; 6
    2bc8:	69 f1       	breq	.+90     	; 0x2c24 <analogWrite+0x8a>
    2bca:	87 30       	cpi	r24, 0x07	; 7
    2bcc:	09 f4       	brne	.+2      	; 0x2bd0 <analogWrite+0x36>
    2bce:	4f c0       	rjmp	.+158    	; 0x2c6e <analogWrite+0xd4>
    2bd0:	84 30       	cpi	r24, 0x04	; 4
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <analogWrite+0x3c>
    2bd4:	3f c0       	rjmp	.+126    	; 0x2c54 <analogWrite+0xba>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    2bd6:	c0 38       	cpi	r28, 0x80	; 128
    2bd8:	d1 05       	cpc	r29, r1
    2bda:	a4 f0       	brlt	.+40     	; 0x2c04 <analogWrite+0x6a>
					digitalWrite(pin, LOW);
				} else {
					digitalWrite(pin, HIGH);
    2bdc:	81 2f       	mov	r24, r17
    2bde:	61 e0       	ldi	r22, 0x01	; 1
    2be0:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
				}
		}
	}
}
    2be4:	df 91       	pop	r29
    2be6:	cf 91       	pop	r28
    2be8:	1f 91       	pop	r17
    2bea:	08 95       	ret
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2bec:	81 30       	cpi	r24, 0x01	; 1
    2bee:	91 f0       	breq	.+36     	; 0x2c14 <analogWrite+0x7a>
    2bf0:	82 30       	cpi	r24, 0x02	; 2
    2bf2:	89 f7       	brne	.-30     	; 0x2bd6 <analogWrite+0x3c>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    2bf4:	84 b5       	in	r24, 0x24	; 36
    2bf6:	80 62       	ori	r24, 0x20	; 32
    2bf8:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    2bfa:	c8 bd       	out	0x28, r28	; 40
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2bfc:	df 91       	pop	r29
    2bfe:	cf 91       	pop	r28
    2c00:	1f 91       	pop	r17
    2c02:	08 95       	ret
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
					digitalWrite(pin, LOW);
    2c04:	81 2f       	mov	r24, r17
    2c06:	60 e0       	ldi	r22, 0x00	; 0
    2c08:	0e 94 94 16 	call	0x2d28	; 0x2d28 <digitalWrite>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2c0c:	df 91       	pop	r29
    2c0e:	cf 91       	pop	r28
    2c10:	1f 91       	pop	r17
    2c12:	08 95       	ret
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    2c14:	84 b5       	in	r24, 0x24	; 36
    2c16:	80 68       	ori	r24, 0x80	; 128
    2c18:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    2c1a:	c7 bd       	out	0x27, r28	; 39
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2c1c:	df 91       	pop	r29
    2c1e:	cf 91       	pop	r28
    2c20:	1f 91       	pop	r17
    2c22:	08 95       	ret
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    2c24:	80 91 b0 00 	lds	r24, 0x00B0
    2c28:	80 68       	ori	r24, 0x80	; 128
    2c2a:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    2c2e:	c0 93 b3 00 	sts	0x00B3, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2c32:	df 91       	pop	r29
    2c34:	cf 91       	pop	r28
    2c36:	1f 91       	pop	r17
    2c38:	08 95       	ret
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    2c3a:	80 91 80 00 	lds	r24, 0x0080
    2c3e:	80 68       	ori	r24, 0x80	; 128
    2c40:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    2c44:	d0 93 89 00 	sts	0x0089, r29
    2c48:	c0 93 88 00 	sts	0x0088, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2c4c:	df 91       	pop	r29
    2c4e:	cf 91       	pop	r28
    2c50:	1f 91       	pop	r17
    2c52:	08 95       	ret
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    2c54:	80 91 80 00 	lds	r24, 0x0080
    2c58:	80 62       	ori	r24, 0x20	; 32
    2c5a:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    2c5e:	d0 93 8b 00 	sts	0x008B, r29
    2c62:	c0 93 8a 00 	sts	0x008A, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2c66:	df 91       	pop	r29
    2c68:	cf 91       	pop	r28
    2c6a:	1f 91       	pop	r17
    2c6c:	08 95       	ret
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    2c6e:	80 91 b0 00 	lds	r24, 0x00B0
    2c72:	80 62       	ori	r24, 0x20	; 32
    2c74:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    2c78:	c0 93 b4 00 	sts	0x00B4, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2c7c:	df 91       	pop	r29
    2c7e:	cf 91       	pop	r28
    2c80:	1f 91       	pop	r17
    2c82:	08 95       	ret

00002c84 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	fc 01       	movw	r30, r24
    2c88:	ef 55       	subi	r30, 0x5F	; 95
    2c8a:	f9 4f       	sbci	r31, 0xF9	; 249
    2c8c:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    2c8e:	fc 01       	movw	r30, r24
    2c90:	e3 57       	subi	r30, 0x73	; 115
    2c92:	f9 4f       	sbci	r31, 0xF9	; 249
    2c94:	e4 91       	lpm	r30, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    2c96:	ee 23       	and	r30, r30
    2c98:	79 f0       	breq	.+30     	; 0x2cb8 <pinMode+0x34>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	ee 0f       	add	r30, r30
    2c9e:	ff 1f       	adc	r31, r31
    2ca0:	e1 59       	subi	r30, 0x91	; 145
    2ca2:	f9 4f       	sbci	r31, 0xF9	; 249
    2ca4:	a5 91       	lpm	r26, Z+
    2ca6:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
    2ca8:	66 23       	and	r22, r22
    2caa:	39 f0       	breq	.+14     	; 0x2cba <pinMode+0x36>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    2cac:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2cae:	f8 94       	cli
		*reg |= bit;
    2cb0:	8c 91       	ld	r24, X
    2cb2:	82 2b       	or	r24, r18
    2cb4:	8c 93       	st	X, r24
		SREG = oldSREG;
    2cb6:	9f bf       	out	0x3f, r25	; 63
    2cb8:	08 95       	ret

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
    2cba:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2cbc:	f8 94       	cli
		*reg &= ~bit;
    2cbe:	8c 91       	ld	r24, X
    2cc0:	20 95       	com	r18
    2cc2:	82 23       	and	r24, r18
    2cc4:	8c 93       	st	X, r24
		SREG = oldSREG;
    2cc6:	9f bf       	out	0x3f, r25	; 63
    2cc8:	08 95       	ret

00002cca <_ZL10turnOffPWMh>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2cca:	83 30       	cpi	r24, 0x03	; 3
    2ccc:	39 f1       	breq	.+78     	; 0x2d1c <_ZL10turnOffPWMh+0x52>
    2cce:	84 30       	cpi	r24, 0x04	; 4
    2cd0:	60 f0       	brcs	.+24     	; 0x2cea <_ZL10turnOffPWMh+0x20>
    2cd2:	86 30       	cpi	r24, 0x06	; 6
    2cd4:	c9 f0       	breq	.+50     	; 0x2d08 <_ZL10turnOffPWMh+0x3e>
    2cd6:	87 30       	cpi	r24, 0x07	; 7
    2cd8:	69 f0       	breq	.+26     	; 0x2cf4 <_ZL10turnOffPWMh+0x2a>
    2cda:	84 30       	cpi	r24, 0x04	; 4
    2cdc:	51 f4       	brne	.+20     	; 0x2cf2 <_ZL10turnOffPWMh+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2cde:	80 91 80 00 	lds	r24, 0x0080
    2ce2:	8f 7d       	andi	r24, 0xDF	; 223
    2ce4:	80 93 80 00 	sts	0x0080, r24
    2ce8:	08 95       	ret
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2cea:	81 30       	cpi	r24, 0x01	; 1
    2cec:	99 f0       	breq	.+38     	; 0x2d14 <_ZL10turnOffPWMh+0x4a>
    2cee:	82 30       	cpi	r24, 0x02	; 2
    2cf0:	39 f0       	breq	.+14     	; 0x2d00 <_ZL10turnOffPWMh+0x36>
    2cf2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2cf4:	80 91 b0 00 	lds	r24, 0x00B0
    2cf8:	8f 7d       	andi	r24, 0xDF	; 223
    2cfa:	80 93 b0 00 	sts	0x00B0, r24
    2cfe:	08 95       	ret
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2d00:	84 b5       	in	r24, 0x24	; 36
    2d02:	8f 7d       	andi	r24, 0xDF	; 223
    2d04:	84 bd       	out	0x24, r24	; 36
    2d06:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2d08:	80 91 b0 00 	lds	r24, 0x00B0
    2d0c:	8f 77       	andi	r24, 0x7F	; 127
    2d0e:	80 93 b0 00 	sts	0x00B0, r24
    2d12:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2d14:	84 b5       	in	r24, 0x24	; 36
    2d16:	8f 77       	andi	r24, 0x7F	; 127
    2d18:	84 bd       	out	0x24, r24	; 36
    2d1a:	08 95       	ret
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2d1c:	80 91 80 00 	lds	r24, 0x0080
    2d20:	8f 77       	andi	r24, 0x7F	; 127
    2d22:	80 93 80 00 	sts	0x0080, r24
    2d26:	08 95       	ret

00002d28 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2d28:	0f 93       	push	r16
    2d2a:	1f 93       	push	r17
    2d2c:	df 93       	push	r29
    2d2e:	cf 93       	push	r28
    2d30:	0f 92       	push	r0
    2d32:	cd b7       	in	r28, 0x3d	; 61
    2d34:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    2d36:	28 2f       	mov	r18, r24
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	f9 01       	movw	r30, r18
    2d3c:	eb 54       	subi	r30, 0x4B	; 75
    2d3e:	f9 4f       	sbci	r31, 0xF9	; 249
    2d40:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2d42:	f9 01       	movw	r30, r18
    2d44:	ef 55       	subi	r30, 0x5F	; 95
    2d46:	f9 4f       	sbci	r31, 0xF9	; 249
    2d48:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
    2d4a:	23 57       	subi	r18, 0x73	; 115
    2d4c:	39 4f       	sbci	r19, 0xF9	; 249
    2d4e:	f9 01       	movw	r30, r18
    2d50:	14 91       	lpm	r17, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2d52:	11 23       	and	r17, r17
    2d54:	91 f0       	breq	.+36     	; 0x2d7a <digitalWrite+0x52>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2d56:	88 23       	and	r24, r24
    2d58:	19 f5       	brne	.+70     	; 0x2da0 <digitalWrite+0x78>

	out = portOutputRegister(port);
    2d5a:	e1 2f       	mov	r30, r17
    2d5c:	f0 e0       	ldi	r31, 0x00	; 0
    2d5e:	ee 0f       	add	r30, r30
    2d60:	ff 1f       	adc	r31, r31
    2d62:	e7 58       	subi	r30, 0x87	; 135
    2d64:	f9 4f       	sbci	r31, 0xF9	; 249
    2d66:	a5 91       	lpm	r26, Z+
    2d68:	b4 91       	lpm	r27, Z+

	if (val == LOW) {
    2d6a:	66 23       	and	r22, r22
    2d6c:	61 f0       	breq	.+24     	; 0x2d86 <digitalWrite+0x5e>
		uint8_t oldSREG = SREG;
                cli();
		*out &= ~bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    2d6e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2d70:	f8 94       	cli
		*out |= bit;
    2d72:	8c 91       	ld	r24, X
    2d74:	80 2b       	or	r24, r16
    2d76:	8c 93       	st	X, r24
		SREG = oldSREG;
    2d78:	9f bf       	out	0x3f, r25	; 63
	}
}
    2d7a:	0f 90       	pop	r0
    2d7c:	cf 91       	pop	r28
    2d7e:	df 91       	pop	r29
    2d80:	1f 91       	pop	r17
    2d82:	0f 91       	pop	r16
    2d84:	08 95       	ret
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);

	if (val == LOW) {
		uint8_t oldSREG = SREG;
    2d86:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2d88:	f8 94       	cli
		*out &= ~bit;
    2d8a:	8c 91       	ld	r24, X
    2d8c:	00 95       	com	r16
    2d8e:	80 23       	and	r24, r16
    2d90:	8c 93       	st	X, r24
		SREG = oldSREG;
    2d92:	9f bf       	out	0x3f, r25	; 63
		uint8_t oldSREG = SREG;
                cli();
		*out |= bit;
		SREG = oldSREG;
	}
}
    2d94:	0f 90       	pop	r0
    2d96:	cf 91       	pop	r28
    2d98:	df 91       	pop	r29
    2d9a:	1f 91       	pop	r17
    2d9c:	0f 91       	pop	r16
    2d9e:	08 95       	ret

	if (port == NOT_A_PIN) return;

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2da0:	69 83       	std	Y+1, r22	; 0x01
    2da2:	0e 94 65 16 	call	0x2cca	; 0x2cca <_ZL10turnOffPWMh>
    2da6:	69 81       	ldd	r22, Y+1	; 0x01
    2da8:	d8 cf       	rjmp	.-80     	; 0x2d5a <digitalWrite+0x32>

00002daa <digitalRead>:
		SREG = oldSREG;
	}
}

int digitalRead(uint8_t pin)
{
    2daa:	0f 93       	push	r16
    2dac:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
    2dae:	28 2f       	mov	r18, r24
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	f9 01       	movw	r30, r18
    2db4:	eb 54       	subi	r30, 0x4B	; 75
    2db6:	f9 4f       	sbci	r31, 0xF9	; 249
    2db8:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2dba:	f9 01       	movw	r30, r18
    2dbc:	ef 55       	subi	r30, 0x5F	; 95
    2dbe:	f9 4f       	sbci	r31, 0xF9	; 249
    2dc0:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
    2dc2:	23 57       	subi	r18, 0x73	; 115
    2dc4:	39 4f       	sbci	r19, 0xF9	; 249
    2dc6:	f9 01       	movw	r30, r18
    2dc8:	14 91       	lpm	r17, Z+

	if (port == NOT_A_PIN) return LOW;
    2dca:	11 23       	and	r17, r17
    2dcc:	c9 f0       	breq	.+50     	; 0x2e00 <digitalRead+0x56>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2dce:	88 23       	and	r24, r24
    2dd0:	e9 f4       	brne	.+58     	; 0x2e0c <digitalRead+0x62>

	if (*portInputRegister(port) & bit) return HIGH;
    2dd2:	e1 2f       	mov	r30, r17
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	ee 0f       	add	r30, r30
    2dd8:	ff 1f       	adc	r31, r31
    2dda:	ed 57       	subi	r30, 0x7D	; 125
    2ddc:	f9 4f       	sbci	r31, 0xF9	; 249
    2dde:	a5 91       	lpm	r26, Z+
    2de0:	b4 91       	lpm	r27, Z+
    2de2:	8c 91       	ld	r24, X
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	80 23       	and	r24, r16
    2dea:	21 f4       	brne	.+8      	; 0x2df4 <digitalRead+0x4a>
	return LOW;
}
    2dec:	c9 01       	movw	r24, r18
    2dee:	1f 91       	pop	r17
    2df0:	0f 91       	pop	r16
    2df2:	08 95       	ret

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    2df4:	21 e0       	ldi	r18, 0x01	; 1
    2df6:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    2df8:	c9 01       	movw	r24, r18
    2dfa:	1f 91       	pop	r17
    2dfc:	0f 91       	pop	r16
    2dfe:	08 95       	ret
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2e04:	c9 01       	movw	r24, r18
    2e06:	1f 91       	pop	r17
    2e08:	0f 91       	pop	r16
    2e0a:	08 95       	ret

	if (port == NOT_A_PIN) return LOW;

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2e0c:	0e 94 65 16 	call	0x2cca	; 0x2cca <_ZL10turnOffPWMh>
    2e10:	e0 cf       	rjmp	.-64     	; 0x2dd2 <digitalRead+0x28>

00002e12 <_ZNK6String6charAtEj>:
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

char String::charAt( unsigned int loc ) const
{
    2e12:	dc 01       	movw	r26, r24
    2e14:	ed 91       	ld	r30, X+
    2e16:	fc 91       	ld	r31, X
    2e18:	11 97       	sbiw	r26, 0x01	; 1
    2e1a:	e6 0f       	add	r30, r22
    2e1c:	f7 1f       	adc	r31, r23
  return operator[]( loc );
}
    2e1e:	80 81       	ld	r24, Z
    2e20:	08 95       	ret

00002e22 <_ZN6String9setCharAtEjc>:

void String::setCharAt( unsigned int loc, const char aChar ) 
{
    2e22:	fc 01       	movw	r30, r24
  if(_buffer == NULL) return;
    2e24:	80 81       	ld	r24, Z
    2e26:	91 81       	ldd	r25, Z+1	; 0x01
    2e28:	00 97       	sbiw	r24, 0x00	; 0
    2e2a:	49 f0       	breq	.+18     	; 0x2e3e <_ZN6String9setCharAtEjc+0x1c>
  if(_length > loc) {
    2e2c:	24 81       	ldd	r18, Z+4	; 0x04
    2e2e:	35 81       	ldd	r19, Z+5	; 0x05
    2e30:	62 17       	cp	r22, r18
    2e32:	73 07       	cpc	r23, r19
    2e34:	20 f4       	brcc	.+8      	; 0x2e3e <_ZN6String9setCharAtEjc+0x1c>
    _buffer[loc] = aChar;
    2e36:	68 0f       	add	r22, r24
    2e38:	79 1f       	adc	r23, r25
    2e3a:	fb 01       	movw	r30, r22
    2e3c:	40 83       	st	Z, r20
    2e3e:	08 95       	ret

00002e40 <_ZN6StringixEj>:
{
  return strcmp( _buffer, rhs._buffer ) >= 0;
}

char & String::operator[]( unsigned int index )
{
    2e40:	fc 01       	movw	r30, r24
  static char dummy_writable_char;
  if (index >= _length || !_buffer) {
    2e42:	84 81       	ldd	r24, Z+4	; 0x04
    2e44:	95 81       	ldd	r25, Z+5	; 0x05
    2e46:	68 17       	cp	r22, r24
    2e48:	79 07       	cpc	r23, r25
    2e4a:	40 f4       	brcc	.+16     	; 0x2e5c <_ZN6StringixEj+0x1c>
    2e4c:	80 81       	ld	r24, Z
    2e4e:	91 81       	ldd	r25, Z+1	; 0x01
    2e50:	00 97       	sbiw	r24, 0x00	; 0
    2e52:	21 f0       	breq	.+8      	; 0x2e5c <_ZN6StringixEj+0x1c>
    dummy_writable_char = 0;
    return dummy_writable_char;
  }
  return _buffer[ index ];
    2e54:	68 0f       	add	r22, r24
    2e56:	79 1f       	adc	r23, r25
}
    2e58:	cb 01       	movw	r24, r22
    2e5a:	08 95       	ret

char & String::operator[]( unsigned int index )
{
  static char dummy_writable_char;
  if (index >= _length || !_buffer) {
    dummy_writable_char = 0;
    2e5c:	10 92 32 04 	sts	0x0432, r1
    2e60:	62 e3       	ldi	r22, 0x32	; 50
    2e62:	74 e0       	ldi	r23, 0x04	; 4
    return dummy_writable_char;
  }
  return _buffer[ index ];
}
    2e64:	cb 01       	movw	r24, r22
    2e66:	08 95       	ret

00002e68 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
    2e68:	dc 01       	movw	r26, r24
    2e6a:	ed 91       	ld	r30, X+
    2e6c:	fc 91       	ld	r31, X
    2e6e:	11 97       	sbiw	r26, 0x01	; 1
    2e70:	e6 0f       	add	r30, r22
    2e72:	f7 1f       	adc	r31, r23
  // need to check for valid index, to do later
  return _buffer[ index ];
}
    2e74:	80 81       	ld	r24, Z
    2e76:	08 95       	ret

00002e78 <_ZN6String5toIntEv>:
  buf[len] = 0;
}


long String::toInt() {
  return atol(_buffer);
    2e78:	fc 01       	movw	r30, r24
    2e7a:	80 81       	ld	r24, Z
    2e7c:	91 81       	ldd	r25, Z+1	; 0x01
    2e7e:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <atol>
}
    2e82:	08 95       	ret

00002e84 <_ZN6String11toCharArrayEPcj>:
  strncpy((char *)buf, _buffer, len);
  buf[len] = 0;
}

void String::toCharArray(char *buf, unsigned int bufsize)
{
    2e84:	0f 93       	push	r16
    2e86:	1f 93       	push	r17
    2e88:	cf 93       	push	r28
    2e8a:	df 93       	push	r29
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	eb 01       	movw	r28, r22
  if (!bufsize || !buf) return;
    2e90:	41 15       	cp	r20, r1
    2e92:	51 05       	cpc	r21, r1
    2e94:	a1 f0       	breq	.+40     	; 0x2ebe <_ZN6String11toCharArrayEPcj+0x3a>
    2e96:	61 15       	cp	r22, r1
    2e98:	71 05       	cpc	r23, r1
    2e9a:	89 f0       	breq	.+34     	; 0x2ebe <_ZN6String11toCharArrayEPcj+0x3a>
  unsigned int len = bufsize - 1;
    2e9c:	84 81       	ldd	r24, Z+4	; 0x04
    2e9e:	95 81       	ldd	r25, Z+5	; 0x05
    2ea0:	8a 01       	movw	r16, r20
    2ea2:	01 50       	subi	r16, 0x01	; 1
    2ea4:	10 40       	sbci	r17, 0x00	; 0
    2ea6:	80 17       	cp	r24, r16
    2ea8:	91 07       	cpc	r25, r17
    2eaa:	70 f0       	brcs	.+28     	; 0x2ec8 <_ZN6String11toCharArrayEPcj+0x44>
  if (len > _length) len = _length;
  strncpy(buf, _buffer, len);
    2eac:	60 81       	ld	r22, Z
    2eae:	71 81       	ldd	r23, Z+1	; 0x01
    2eb0:	ce 01       	movw	r24, r28
    2eb2:	a8 01       	movw	r20, r16
    2eb4:	0e 94 76 2e 	call	0x5cec	; 0x5cec <strncpy>
  buf[len] = 0;
    2eb8:	c0 0f       	add	r28, r16
    2eba:	d1 1f       	adc	r29, r17
    2ebc:	18 82       	st	Y, r1
}
    2ebe:	df 91       	pop	r29
    2ec0:	cf 91       	pop	r28
    2ec2:	1f 91       	pop	r17
    2ec4:	0f 91       	pop	r16
    2ec6:	08 95       	ret
}

void String::toCharArray(char *buf, unsigned int bufsize)
{
  if (!bufsize || !buf) return;
  unsigned int len = bufsize - 1;
    2ec8:	8c 01       	movw	r16, r24
    2eca:	f0 cf       	rjmp	.-32     	; 0x2eac <_ZN6String11toCharArrayEPcj+0x28>

00002ecc <_ZN6String8getBytesEPhj>:

  return temp.substring( i, j + 1);
}

void String::getBytes(unsigned char *buf, unsigned int bufsize)
{
    2ecc:	0f 93       	push	r16
    2ece:	1f 93       	push	r17
    2ed0:	cf 93       	push	r28
    2ed2:	df 93       	push	r29
    2ed4:	fc 01       	movw	r30, r24
    2ed6:	eb 01       	movw	r28, r22
  if (!bufsize || !buf) return;
    2ed8:	41 15       	cp	r20, r1
    2eda:	51 05       	cpc	r21, r1
    2edc:	a1 f0       	breq	.+40     	; 0x2f06 <_ZN6String8getBytesEPhj+0x3a>
    2ede:	61 15       	cp	r22, r1
    2ee0:	71 05       	cpc	r23, r1
    2ee2:	89 f0       	breq	.+34     	; 0x2f06 <_ZN6String8getBytesEPhj+0x3a>
  unsigned int len = bufsize - 1;
    2ee4:	84 81       	ldd	r24, Z+4	; 0x04
    2ee6:	95 81       	ldd	r25, Z+5	; 0x05
    2ee8:	8a 01       	movw	r16, r20
    2eea:	01 50       	subi	r16, 0x01	; 1
    2eec:	10 40       	sbci	r17, 0x00	; 0
    2eee:	80 17       	cp	r24, r16
    2ef0:	91 07       	cpc	r25, r17
    2ef2:	70 f0       	brcs	.+28     	; 0x2f10 <_ZN6String8getBytesEPhj+0x44>
  if (len > _length) len = _length;
  strncpy((char *)buf, _buffer, len);
    2ef4:	60 81       	ld	r22, Z
    2ef6:	71 81       	ldd	r23, Z+1	; 0x01
    2ef8:	ce 01       	movw	r24, r28
    2efa:	a8 01       	movw	r20, r16
    2efc:	0e 94 76 2e 	call	0x5cec	; 0x5cec <strncpy>
  buf[len] = 0;
    2f00:	c0 0f       	add	r28, r16
    2f02:	d1 1f       	adc	r29, r17
    2f04:	18 82       	st	Y, r1
}
    2f06:	df 91       	pop	r29
    2f08:	cf 91       	pop	r28
    2f0a:	1f 91       	pop	r17
    2f0c:	0f 91       	pop	r16
    2f0e:	08 95       	ret
}

void String::getBytes(unsigned char *buf, unsigned int bufsize)
{
  if (!bufsize || !buf) return;
  unsigned int len = bufsize - 1;
    2f10:	8c 01       	movw	r16, r24
    2f12:	f0 cf       	rjmp	.-32     	; 0x2ef4 <_ZN6String8getBytesEPhj+0x28>

00002f14 <_ZNK6String10startsWithERKS_j>:

  return startsWith( s2, 0 );
}

boolean String::startsWith( const String &s2, unsigned int offset ) const
{
    2f14:	fc 01       	movw	r30, r24
    2f16:	db 01       	movw	r26, r22
    2f18:	ca 01       	movw	r24, r20
  if ( offset > _length - s2._length )
    2f1a:	14 96       	adiw	r26, 0x04	; 4
    2f1c:	4d 91       	ld	r20, X+
    2f1e:	5c 91       	ld	r21, X
    2f20:	15 97       	sbiw	r26, 0x05	; 5
    2f22:	24 81       	ldd	r18, Z+4	; 0x04
    2f24:	35 81       	ldd	r19, Z+5	; 0x05
    2f26:	24 1b       	sub	r18, r20
    2f28:	35 0b       	sbc	r19, r21
    2f2a:	28 17       	cp	r18, r24
    2f2c:	39 07       	cpc	r19, r25
    2f2e:	80 f0       	brcs	.+32     	; 0x2f50 <_ZNK6String10startsWithERKS_j+0x3c>
    return 0;

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
    2f30:	20 81       	ld	r18, Z
    2f32:	31 81       	ldd	r19, Z+1	; 0x01
    2f34:	6d 91       	ld	r22, X+
    2f36:	7c 91       	ld	r23, X
    2f38:	82 0f       	add	r24, r18
    2f3a:	93 1f       	adc	r25, r19
    2f3c:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <strncmp>
    2f40:	9c 01       	movw	r18, r24
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	21 15       	cp	r18, r1
    2f46:	31 05       	cpc	r19, r1
    2f48:	09 f0       	breq	.+2      	; 0x2f4c <_ZNK6String10startsWithERKS_j+0x38>
}
    2f4a:	08 95       	ret
boolean String::startsWith( const String &s2, unsigned int offset ) const
{
  if ( offset > _length - s2._length )
    return 0;

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
}
    2f4e:	08 95       	ret
  return startsWith( s2, 0 );
}

boolean String::startsWith( const String &s2, unsigned int offset ) const
{
  if ( offset > _length - s2._length )
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	08 95       	ret

00002f54 <_ZNK6String10startsWithERKS_>:
  return -1;
}

boolean String::startsWith( const String &s2 ) const
{
  if ( _length < s2._length )
    2f54:	fc 01       	movw	r30, r24
    2f56:	44 81       	ldd	r20, Z+4	; 0x04
    2f58:	55 81       	ldd	r21, Z+5	; 0x05
    2f5a:	fb 01       	movw	r30, r22
    2f5c:	24 81       	ldd	r18, Z+4	; 0x04
    2f5e:	35 81       	ldd	r19, Z+5	; 0x05
    2f60:	42 17       	cp	r20, r18
    2f62:	53 07       	cpc	r21, r19
    2f64:	10 f4       	brcc	.+4      	; 0x2f6a <_ZNK6String10startsWithERKS_+0x16>
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	08 95       	ret
    return 0;

  return startsWith( s2, 0 );
    2f6a:	40 e0       	ldi	r20, 0x00	; 0
    2f6c:	50 e0       	ldi	r21, 0x00	; 0
    2f6e:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <_ZNK6String10startsWithERKS_j>
}
    2f72:	08 95       	ret

00002f74 <_ZNK6String11lastIndexOfEcj>:
{
  return lastIndexOf( theChar, _length - 1 );
}

int String::lastIndexOf( char ch, unsigned int fromIndex ) const
{
    2f74:	df 92       	push	r13
    2f76:	ef 92       	push	r14
    2f78:	ff 92       	push	r15
    2f7a:	0f 93       	push	r16
    2f7c:	1f 93       	push	r17
    2f7e:	cf 93       	push	r28
    2f80:	df 93       	push	r29
    2f82:	ec 01       	movw	r28, r24
  if ( fromIndex >= _length )
    2f84:	8c 81       	ldd	r24, Y+4	; 0x04
    2f86:	9d 81       	ldd	r25, Y+5	; 0x05
    2f88:	48 17       	cp	r20, r24
    2f8a:	59 07       	cpc	r21, r25
    2f8c:	58 f0       	brcs	.+22     	; 0x2fa4 <_ZNK6String11lastIndexOfEcj+0x30>
  char tempchar = _buffer[fromIndex + 1];
  _buffer[fromIndex + 1] = '\0';
  char* temp = strrchr( _buffer, ch );
  _buffer[fromIndex + 1] = tempchar;

  if ( temp == NULL )
    2f8e:	2f ef       	ldi	r18, 0xFF	; 255
    2f90:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;

  return temp - _buffer;
}
    2f92:	c9 01       	movw	r24, r18
    2f94:	df 91       	pop	r29
    2f96:	cf 91       	pop	r28
    2f98:	1f 91       	pop	r17
    2f9a:	0f 91       	pop	r16
    2f9c:	ff 90       	pop	r15
    2f9e:	ef 90       	pop	r14
    2fa0:	df 90       	pop	r13
    2fa2:	08 95       	ret
int String::lastIndexOf( char ch, unsigned int fromIndex ) const
{
  if ( fromIndex >= _length )
    return -1;

  char tempchar = _buffer[fromIndex + 1];
    2fa4:	8a 01       	movw	r16, r20
    2fa6:	0f 5f       	subi	r16, 0xFF	; 255
    2fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    2faa:	e8 81       	ld	r30, Y
    2fac:	f9 81       	ldd	r31, Y+1	; 0x01
    2fae:	e0 0f       	add	r30, r16
    2fb0:	f1 1f       	adc	r31, r17
    2fb2:	d0 80       	ld	r13, Z
  _buffer[fromIndex + 1] = '\0';
    2fb4:	10 82       	st	Z, r1
  char* temp = strrchr( _buffer, ch );
    2fb6:	e8 80       	ld	r14, Y
    2fb8:	f9 80       	ldd	r15, Y+1	; 0x01
    2fba:	c7 01       	movw	r24, r14
    2fbc:	70 e0       	ldi	r23, 0x00	; 0
    2fbe:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <strrchr>
    2fc2:	9c 01       	movw	r18, r24
  _buffer[fromIndex + 1] = tempchar;
    2fc4:	0e 0d       	add	r16, r14
    2fc6:	1f 1d       	adc	r17, r15
    2fc8:	f8 01       	movw	r30, r16
    2fca:	d0 82       	st	Z, r13

  if ( temp == NULL )
    2fcc:	00 97       	sbiw	r24, 0x00	; 0
    2fce:	f9 f2       	breq	.-66     	; 0x2f8e <_ZNK6String11lastIndexOfEcj+0x1a>
    return -1;

  return temp - _buffer;
    2fd0:	88 81       	ld	r24, Y
    2fd2:	99 81       	ldd	r25, Y+1	; 0x01
    2fd4:	28 1b       	sub	r18, r24
    2fd6:	39 0b       	sbc	r19, r25
    2fd8:	dc cf       	rjmp	.-72     	; 0x2f92 <_ZNK6String11lastIndexOfEcj+0x1e>

00002fda <_ZNK6String11lastIndexOfEc>:
  return theFind - _buffer; // pointer subtraction
}

int String::lastIndexOf( char theChar ) const
{
  return lastIndexOf( theChar, _length - 1 );
    2fda:	fc 01       	movw	r30, r24
    2fdc:	44 81       	ldd	r20, Z+4	; 0x04
    2fde:	55 81       	ldd	r21, Z+5	; 0x05
    2fe0:	41 50       	subi	r20, 0x01	; 1
    2fe2:	50 40       	sbci	r21, 0x00	; 0
    2fe4:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <_ZNK6String11lastIndexOfEcj>
}
    2fe8:	08 95       	ret

00002fea <_ZNK6String7indexOfERKS_j>:
{
  return indexOf( s2, 0 );
}

int String::indexOf( const String &s2, unsigned int fromIndex ) const
{
    2fea:	cf 93       	push	r28
    2fec:	df 93       	push	r29
    2fee:	fc 01       	movw	r30, r24
  if ( fromIndex >= _length )
    2ff0:	84 81       	ldd	r24, Z+4	; 0x04
    2ff2:	95 81       	ldd	r25, Z+5	; 0x05
    2ff4:	48 17       	cp	r20, r24
    2ff6:	59 07       	cpc	r21, r25
    2ff8:	30 f0       	brcs	.+12     	; 0x3006 <_ZNK6String7indexOfERKS_j+0x1c>
    return -1;

  const char *theFind = strstr( &_buffer[ fromIndex ], s2._buffer );

  if ( theFind == NULL )
    2ffa:	2f ef       	ldi	r18, 0xFF	; 255
    2ffc:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;

  return theFind - _buffer; // pointer subtraction
}
    2ffe:	c9 01       	movw	r24, r18
    3000:	df 91       	pop	r29
    3002:	cf 91       	pop	r28
    3004:	08 95       	ret
int String::indexOf( const String &s2, unsigned int fromIndex ) const
{
  if ( fromIndex >= _length )
    return -1;

  const char *theFind = strstr( &_buffer[ fromIndex ], s2._buffer );
    3006:	c0 81       	ld	r28, Z
    3008:	d1 81       	ldd	r29, Z+1	; 0x01
    300a:	fb 01       	movw	r30, r22
    300c:	60 81       	ld	r22, Z
    300e:	71 81       	ldd	r23, Z+1	; 0x01
    3010:	ce 01       	movw	r24, r28
    3012:	84 0f       	add	r24, r20
    3014:	95 1f       	adc	r25, r21
    3016:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <strstr>
    301a:	9c 01       	movw	r18, r24

  if ( theFind == NULL )
    301c:	00 97       	sbiw	r24, 0x00	; 0
    301e:	69 f3       	breq	.-38     	; 0x2ffa <_ZNK6String7indexOfERKS_j+0x10>
    return -1;

  return theFind - _buffer; // pointer subtraction
    3020:	2c 1b       	sub	r18, r28
    3022:	3d 0b       	sbc	r19, r29
    3024:	ec cf       	rjmp	.-40     	; 0x2ffe <_ZNK6String7indexOfERKS_j+0x14>

00003026 <_ZNK6String7indexOfERKS_>:
  return temp - _buffer;
}

int String::indexOf( const String &s2 ) const
{
  return indexOf( s2, 0 );
    3026:	40 e0       	ldi	r20, 0x00	; 0
    3028:	50 e0       	ldi	r21, 0x00	; 0
    302a:	0e 94 f5 17 	call	0x2fea	; 0x2fea <_ZNK6String7indexOfERKS_j>
}
    302e:	08 95       	ret

00003030 <_ZNK6String7indexOfEcj>:
{
  return indexOf( temp, 0 );
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    3030:	cf 93       	push	r28
    3032:	df 93       	push	r29
    3034:	fc 01       	movw	r30, r24
  if ( fromIndex >= _length )
    3036:	84 81       	ldd	r24, Z+4	; 0x04
    3038:	95 81       	ldd	r25, Z+5	; 0x05
    303a:	48 17       	cp	r20, r24
    303c:	59 07       	cpc	r21, r25
    303e:	30 f0       	brcs	.+12     	; 0x304c <_ZNK6String7indexOfEcj+0x1c>
    return -1;

  const char* temp = strchr( &_buffer[fromIndex], ch );
  if ( temp == NULL )
    3040:	2f ef       	ldi	r18, 0xFF	; 255
    3042:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;

  return temp - _buffer;
}
    3044:	c9 01       	movw	r24, r18
    3046:	df 91       	pop	r29
    3048:	cf 91       	pop	r28
    304a:	08 95       	ret
int String::indexOf( char ch, unsigned int fromIndex ) const
{
  if ( fromIndex >= _length )
    return -1;

  const char* temp = strchr( &_buffer[fromIndex], ch );
    304c:	c0 81       	ld	r28, Z
    304e:	d1 81       	ldd	r29, Z+1	; 0x01
    3050:	ce 01       	movw	r24, r28
    3052:	84 0f       	add	r24, r20
    3054:	95 1f       	adc	r25, r21
    3056:	70 e0       	ldi	r23, 0x00	; 0
    3058:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <strchr>
    305c:	9c 01       	movw	r18, r24
  if ( temp == NULL )
    305e:	00 97       	sbiw	r24, 0x00	; 0
    3060:	79 f3       	breq	.-34     	; 0x3040 <_ZNK6String7indexOfEcj+0x10>
    return -1;

  return temp - _buffer;
    3062:	2c 1b       	sub	r18, r28
    3064:	3d 0b       	sbc	r19, r29
    3066:	ee cf       	rjmp	.-36     	; 0x3044 <_ZNK6String7indexOfEcj+0x14>

00003068 <_ZNK6String7indexOfEc>:
  return newString;
}

int String::indexOf( char temp ) const
{
  return indexOf( temp, 0 );
    3068:	40 e0       	ldi	r20, 0x00	; 0
    306a:	50 e0       	ldi	r21, 0x00	; 0
    306c:	0e 94 18 18 	call	0x3030	; 0x3030 <_ZNK6String7indexOfEcj>
}
    3070:	08 95       	ret

00003072 <_ZNK6String6equalsERKS_>:

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
}

boolean String::equals( const String &s2 ) const
{
    3072:	fc 01       	movw	r30, r24
    3074:	db 01       	movw	r26, r22
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
    3076:	24 81       	ldd	r18, Z+4	; 0x04
    3078:	35 81       	ldd	r19, Z+5	; 0x05
    307a:	14 96       	adiw	r26, 0x04	; 4
    307c:	8d 91       	ld	r24, X+
    307e:	9c 91       	ld	r25, X
    3080:	15 97       	sbiw	r26, 0x05	; 5
    3082:	28 17       	cp	r18, r24
    3084:	39 07       	cpc	r19, r25
    3086:	11 f0       	breq	.+4      	; 0x308c <_ZNK6String6equalsERKS_+0x1a>
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	08 95       	ret
    308c:	6d 91       	ld	r22, X+
    308e:	7c 91       	ld	r23, X
    3090:	80 81       	ld	r24, Z
    3092:	91 81       	ldd	r25, Z+1	; 0x01
    3094:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <strcmp>
    3098:	9c 01       	movw	r18, r24
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	21 15       	cp	r18, r1
    309e:	31 05       	cpc	r19, r1
    30a0:	09 f0       	breq	.+2      	; 0x30a4 <_ZNK6String6equalsERKS_+0x32>
}
    30a2:	08 95       	ret
  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
}

boolean String::equals( const String &s2 ) const
{
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
    30a4:	81 e0       	ldi	r24, 0x01	; 1
}
    30a6:	08 95       	ret

000030a8 <_ZNK6String8endsWithERKS_>:
  // need to check for valid index, to do later
  return _buffer[ index ];
}

boolean String::endsWith( const String &s2 ) const
{
    30a8:	fc 01       	movw	r30, r24
    30aa:	db 01       	movw	r26, r22
  if ( _length < s2._length )
    30ac:	84 81       	ldd	r24, Z+4	; 0x04
    30ae:	95 81       	ldd	r25, Z+5	; 0x05
    30b0:	14 96       	adiw	r26, 0x04	; 4
    30b2:	2d 91       	ld	r18, X+
    30b4:	3c 91       	ld	r19, X
    30b6:	15 97       	sbiw	r26, 0x05	; 5
    30b8:	82 17       	cp	r24, r18
    30ba:	93 07       	cpc	r25, r19
    30bc:	90 f0       	brcs	.+36     	; 0x30e2 <_ZNK6String8endsWithERKS_+0x3a>
    return 0;

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
    30be:	82 1b       	sub	r24, r18
    30c0:	93 0b       	sbc	r25, r19
    30c2:	20 81       	ld	r18, Z
    30c4:	31 81       	ldd	r19, Z+1	; 0x01
    30c6:	6d 91       	ld	r22, X+
    30c8:	7c 91       	ld	r23, X
    30ca:	82 0f       	add	r24, r18
    30cc:	93 1f       	adc	r25, r19
    30ce:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <strcmp>
    30d2:	9c 01       	movw	r18, r24
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	21 15       	cp	r18, r1
    30d8:	31 05       	cpc	r19, r1
    30da:	09 f0       	breq	.+2      	; 0x30de <_ZNK6String8endsWithERKS_+0x36>
}
    30dc:	08 95       	ret
boolean String::endsWith( const String &s2 ) const
{
  if ( _length < s2._length )
    return 0;

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
    30de:	81 e0       	ldi	r24, 0x01	; 1
}
    30e0:	08 95       	ret
  return _buffer[ index ];
}

boolean String::endsWith( const String &s2 ) const
{
  if ( _length < s2._length )
    30e2:	80 e0       	ldi	r24, 0x00	; 0
    30e4:	08 95       	ret

000030e6 <_ZNK6StringgeERKS_>:
  return strcmp( _buffer, rhs._buffer ) <= 0;
}

int String::operator>=( const String & rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) >= 0;
    30e6:	fb 01       	movw	r30, r22
    30e8:	60 81       	ld	r22, Z
    30ea:	71 81       	ldd	r23, Z+1	; 0x01
    30ec:	fc 01       	movw	r30, r24
    30ee:	80 81       	ld	r24, Z
    30f0:	91 81       	ldd	r25, Z+1	; 0x01
    30f2:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <strcmp>
    30f6:	29 2f       	mov	r18, r25
    30f8:	33 27       	eor	r19, r19
    30fa:	27 fd       	sbrc	r18, 7
    30fc:	30 95       	com	r19
    30fe:	20 95       	com	r18
    3100:	30 95       	com	r19
    3102:	22 27       	eor	r18, r18
    3104:	33 0f       	add	r19, r19
    3106:	22 1f       	adc	r18, r18
    3108:	33 27       	eor	r19, r19
}
    310a:	c9 01       	movw	r24, r18
    310c:	08 95       	ret

0000310e <_ZNK6StringleERKS_>:
  return strcmp( _buffer, rhs._buffer ) > 0;
}

int String::operator<=( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) <= 0;
    310e:	fb 01       	movw	r30, r22
    3110:	60 81       	ld	r22, Z
    3112:	71 81       	ldd	r23, Z+1	; 0x01
    3114:	fc 01       	movw	r30, r24
    3116:	80 81       	ld	r24, Z
    3118:	91 81       	ldd	r25, Z+1	; 0x01
    311a:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <strcmp>
    311e:	40 e0       	ldi	r20, 0x00	; 0
    3120:	50 e0       	ldi	r21, 0x00	; 0
    3122:	18 16       	cp	r1, r24
    3124:	19 06       	cpc	r1, r25
    3126:	14 f4       	brge	.+4      	; 0x312c <_ZNK6StringleERKS_+0x1e>
}
    3128:	ca 01       	movw	r24, r20
    312a:	08 95       	ret
  return strcmp( _buffer, rhs._buffer ) > 0;
}

int String::operator<=( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) <= 0;
    312c:	41 e0       	ldi	r20, 0x01	; 1
    312e:	50 e0       	ldi	r21, 0x00	; 0
}
    3130:	ca 01       	movw	r24, r20
    3132:	08 95       	ret

00003134 <_ZNK6StringgtERKS_>:
  return strcmp( _buffer, rhs._buffer ) < 0;
}

int String::operator>( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) > 0;
    3134:	fb 01       	movw	r30, r22
    3136:	60 81       	ld	r22, Z
    3138:	71 81       	ldd	r23, Z+1	; 0x01
    313a:	fc 01       	movw	r30, r24
    313c:	80 81       	ld	r24, Z
    313e:	91 81       	ldd	r25, Z+1	; 0x01
    3140:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <strcmp>
    3144:	40 e0       	ldi	r20, 0x00	; 0
    3146:	50 e0       	ldi	r21, 0x00	; 0
    3148:	18 16       	cp	r1, r24
    314a:	19 06       	cpc	r1, r25
    314c:	14 f4       	brge	.+4      	; 0x3152 <_ZNK6StringgtERKS_+0x1e>
    314e:	41 e0       	ldi	r20, 0x01	; 1
    3150:	50 e0       	ldi	r21, 0x00	; 0
}
    3152:	ca 01       	movw	r24, r20
    3154:	08 95       	ret

00003156 <_ZNK6StringltERKS_>:
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
}

int String::operator<( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) < 0;
    3156:	fb 01       	movw	r30, r22
    3158:	60 81       	ld	r22, Z
    315a:	71 81       	ldd	r23, Z+1	; 0x01
    315c:	fc 01       	movw	r30, r24
    315e:	80 81       	ld	r24, Z
    3160:	91 81       	ldd	r25, Z+1	; 0x01
    3162:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <strcmp>
    3166:	29 2f       	mov	r18, r25
    3168:	33 27       	eor	r19, r19
    316a:	27 fd       	sbrc	r18, 7
    316c:	30 95       	com	r19
    316e:	22 27       	eor	r18, r18
    3170:	33 0f       	add	r19, r19
    3172:	22 1f       	adc	r18, r18
    3174:	33 27       	eor	r19, r19
}
    3176:	c9 01       	movw	r24, r18
    3178:	08 95       	ret

0000317a <_ZNK6StringneERKS_>:
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
}

int String::operator!=( const String &rhs ) const
{
    317a:	fc 01       	movw	r30, r24
    317c:	db 01       	movw	r26, r22
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
    317e:	24 81       	ldd	r18, Z+4	; 0x04
    3180:	35 81       	ldd	r19, Z+5	; 0x05
    3182:	14 96       	adiw	r26, 0x04	; 4
    3184:	8d 91       	ld	r24, X+
    3186:	9c 91       	ld	r25, X
    3188:	15 97       	sbiw	r26, 0x05	; 5
    318a:	28 17       	cp	r18, r24
    318c:	39 07       	cpc	r19, r25
    318e:	21 f0       	breq	.+8      	; 0x3198 <_ZNK6StringneERKS_+0x1e>
    3190:	21 e0       	ldi	r18, 0x01	; 1
    3192:	30 e0       	ldi	r19, 0x00	; 0
}
    3194:	c9 01       	movw	r24, r18
    3196:	08 95       	ret
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
}

int String::operator!=( const String &rhs ) const
{
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
    3198:	6d 91       	ld	r22, X+
    319a:	7c 91       	ld	r23, X
    319c:	80 81       	ld	r24, Z
    319e:	91 81       	ldd	r25, Z+1	; 0x01
    31a0:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <strcmp>
    31a4:	9c 01       	movw	r18, r24
    31a6:	21 15       	cp	r18, r1
    31a8:	31 05       	cpc	r19, r1
    31aa:	91 f7       	brne	.-28     	; 0x3190 <_ZNK6StringneERKS_+0x16>
}
    31ac:	c9 01       	movw	r24, r18
    31ae:	08 95       	ret

000031b0 <_ZNK6StringeqERKS_>:
  return *this;
}


int String::operator==( const String &rhs ) const
{
    31b0:	fc 01       	movw	r30, r24
    31b2:	db 01       	movw	r26, r22
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
    31b4:	24 81       	ldd	r18, Z+4	; 0x04
    31b6:	35 81       	ldd	r19, Z+5	; 0x05
    31b8:	14 96       	adiw	r26, 0x04	; 4
    31ba:	8d 91       	ld	r24, X+
    31bc:	9c 91       	ld	r25, X
    31be:	15 97       	sbiw	r26, 0x05	; 5
    31c0:	28 17       	cp	r18, r24
    31c2:	39 07       	cpc	r19, r25
    31c4:	21 f0       	breq	.+8      	; 0x31ce <_ZNK6StringeqERKS_+0x1e>
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	30 e0       	ldi	r19, 0x00	; 0
}
    31ca:	c9 01       	movw	r24, r18
    31cc:	08 95       	ret
}


int String::operator==( const String &rhs ) const
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
    31ce:	6d 91       	ld	r22, X+
    31d0:	7c 91       	ld	r23, X
    31d2:	80 81       	ld	r24, Z
    31d4:	91 81       	ldd	r25, Z+1	; 0x01
    31d6:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <strcmp>
    31da:	9c 01       	movw	r18, r24
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	21 15       	cp	r18, r1
    31e2:	31 05       	cpc	r19, r1
    31e4:	19 f0       	breq	.+6      	; 0x31ec <_ZNK6StringeqERKS_+0x3c>
    31e6:	9c 01       	movw	r18, r24
}
    31e8:	c9 01       	movw	r24, r18
    31ea:	08 95       	ret
}


int String::operator==( const String &rhs ) const
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	9c 01       	movw	r18, r24
    31f2:	fa cf       	rjmp	.-12     	; 0x31e8 <_ZNK6StringeqERKS_+0x38>

000031f4 <_ZNK6String9compareToERKS_>:
  }
}

int String::compareTo( const String &s2 ) const
{
  return strcmp( _buffer, s2._buffer );
    31f4:	fb 01       	movw	r30, r22
    31f6:	60 81       	ld	r22, Z
    31f8:	71 81       	ldd	r23, Z+1	; 0x01
    31fa:	fc 01       	movw	r30, r24
    31fc:	80 81       	ld	r24, Z
    31fe:	91 81       	ldd	r25, Z+1	; 0x01
    3200:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <strcmp>
}
    3204:	08 95       	ret

00003206 <_ZN6StringpLERKS_>:
//  _buffer[ _length ] = '\0';
//  return *this;
//}

const String & String::operator+=( const String &other )
{
    3206:	ef 92       	push	r14
    3208:	ff 92       	push	r15
    320a:	0f 93       	push	r16
    320c:	1f 93       	push	r17
    320e:	cf 93       	push	r28
    3210:	df 93       	push	r29
    3212:	ec 01       	movw	r28, r24
    3214:	8b 01       	movw	r16, r22
  _length += other._length;
    3216:	fb 01       	movw	r30, r22
    3218:	64 81       	ldd	r22, Z+4	; 0x04
    321a:	75 81       	ldd	r23, Z+5	; 0x05
    321c:	8c 81       	ldd	r24, Y+4	; 0x04
    321e:	9d 81       	ldd	r25, Y+5	; 0x05
    3220:	68 0f       	add	r22, r24
    3222:	79 1f       	adc	r23, r25
    3224:	7d 83       	std	Y+5, r23	; 0x05
    3226:	6c 83       	std	Y+4, r22	; 0x04
  if ( _length > _capacity )
    3228:	8a 81       	ldd	r24, Y+2	; 0x02
    322a:	9b 81       	ldd	r25, Y+3	; 0x03
    322c:	86 17       	cp	r24, r22
    322e:	97 07       	cpc	r25, r23
    3230:	78 f4       	brcc	.+30     	; 0x3250 <_ZN6StringpLERKS_+0x4a>
  {
    char *temp = (char *)realloc(_buffer, _length + 1);
    3232:	6f 5f       	subi	r22, 0xFF	; 255
    3234:	7f 4f       	sbci	r23, 0xFF	; 255
    3236:	88 81       	ld	r24, Y
    3238:	99 81       	ldd	r25, Y+1	; 0x01
    323a:	0e 94 22 2d 	call	0x5a44	; 0x5a44 <realloc>
    if ( temp != NULL ) {
    323e:	00 97       	sbiw	r24, 0x00	; 0
    3240:	b1 f0       	breq	.+44     	; 0x326e <_ZN6StringpLERKS_+0x68>
      _buffer = temp;
    3242:	99 83       	std	Y+1, r25	; 0x01
    3244:	88 83       	st	Y, r24
      _capacity = _length;
    3246:	2c 81       	ldd	r18, Y+4	; 0x04
    3248:	3d 81       	ldd	r19, Y+5	; 0x05
    324a:	3b 83       	std	Y+3, r19	; 0x03
    324c:	2a 83       	std	Y+2, r18	; 0x02
    324e:	02 c0       	rjmp	.+4      	; 0x3254 <_ZN6StringpLERKS_+0x4e>
    } else {
      _length -= other._length;
      return *this;
    3250:	88 81       	ld	r24, Y
    3252:	99 81       	ldd	r25, Y+1	; 0x01
    }
  }
  strcat( _buffer, other._buffer );
    3254:	f8 01       	movw	r30, r16
    3256:	60 81       	ld	r22, Z
    3258:	71 81       	ldd	r23, Z+1	; 0x01
    325a:	0e 94 42 2e 	call	0x5c84	; 0x5c84 <strcat>
  return *this;
}
    325e:	ce 01       	movw	r24, r28
    3260:	df 91       	pop	r29
    3262:	cf 91       	pop	r28
    3264:	1f 91       	pop	r17
    3266:	0f 91       	pop	r16
    3268:	ff 90       	pop	r15
    326a:	ef 90       	pop	r14
    326c:	08 95       	ret
    char *temp = (char *)realloc(_buffer, _length + 1);
    if ( temp != NULL ) {
      _buffer = temp;
      _capacity = _length;
    } else {
      _length -= other._length;
    326e:	8c 81       	ldd	r24, Y+4	; 0x04
    3270:	9d 81       	ldd	r25, Y+5	; 0x05
    3272:	f8 01       	movw	r30, r16
    3274:	24 81       	ldd	r18, Z+4	; 0x04
    3276:	35 81       	ldd	r19, Z+5	; 0x05
    3278:	82 1b       	sub	r24, r18
    327a:	93 0b       	sbc	r25, r19
    327c:	9d 83       	std	Y+5, r25	; 0x05
    327e:	8c 83       	std	Y+4, r24	; 0x04
      return *this;
    3280:	ee cf       	rjmp	.-36     	; 0x325e <_ZN6StringpLERKS_+0x58>

00003282 <_ZN6String6concatERKS_>:
  return strcmp( _buffer, s2._buffer );
}

const String & String::concat( const String &s2 )
{
  return (*this) += s2;
    3282:	0e 94 03 19 	call	0x3206	; 0x3206 <_ZN6StringpLERKS_>
}
    3286:	08 95       	ret

00003288 <_ZN6StringaSERKS_>:

const String & String::operator=( const String &rhs )
{
    3288:	ef 92       	push	r14
    328a:	ff 92       	push	r15
    328c:	0f 93       	push	r16
    328e:	1f 93       	push	r17
    3290:	cf 93       	push	r28
    3292:	df 93       	push	r29
    3294:	ec 01       	movw	r28, r24
    3296:	8b 01       	movw	r16, r22
  if ( this == &rhs )
    3298:	86 17       	cp	r24, r22
    329a:	97 07       	cpc	r25, r23
    329c:	99 f0       	breq	.+38     	; 0x32c4 <_ZN6StringaSERKS_+0x3c>
    return *this;

  if ( rhs._length > _length )
    329e:	fb 01       	movw	r30, r22
    32a0:	44 81       	ldd	r20, Z+4	; 0x04
    32a2:	55 81       	ldd	r21, Z+5	; 0x05
    32a4:	8c 81       	ldd	r24, Y+4	; 0x04
    32a6:	9d 81       	ldd	r25, Y+5	; 0x05
    32a8:	84 17       	cp	r24, r20
    32aa:	95 07       	cpc	r25, r21
    32ac:	98 f0       	brcs	.+38     	; 0x32d4 <_ZN6StringaSERKS_+0x4c>
  {
    free(_buffer);
    getBuffer( rhs._length );
  }
  
  if ( _buffer != NULL ) {
    32ae:	88 81       	ld	r24, Y
    32b0:	99 81       	ldd	r25, Y+1	; 0x01
    32b2:	00 97       	sbiw	r24, 0x00	; 0
    32b4:	39 f0       	breq	.+14     	; 0x32c4 <_ZN6StringaSERKS_+0x3c>
    _length = rhs._length;
    32b6:	5d 83       	std	Y+5, r21	; 0x05
    32b8:	4c 83       	std	Y+4, r20	; 0x04
    strcpy( _buffer, rhs._buffer );
    32ba:	f8 01       	movw	r30, r16
    32bc:	60 81       	ld	r22, Z
    32be:	71 81       	ldd	r23, Z+1	; 0x01
    32c0:	0e 94 61 2e 	call	0x5cc2	; 0x5cc2 <strcpy>
  }
  return *this;
}
    32c4:	ce 01       	movw	r24, r28
    32c6:	df 91       	pop	r29
    32c8:	cf 91       	pop	r28
    32ca:	1f 91       	pop	r17
    32cc:	0f 91       	pop	r16
    32ce:	ff 90       	pop	r15
    32d0:	ef 90       	pop	r14
    32d2:	08 95       	ret
  if ( this == &rhs )
    return *this;

  if ( rhs._length > _length )
  {
    free(_buffer);
    32d4:	88 81       	ld	r24, Y
    32d6:	99 81       	ldd	r25, Y+1	; 0x01
    32d8:	0e 94 8b 2c 	call	0x5916	; 0x5916 <free>
    getBuffer( rhs._length );
    32dc:	f8 01       	movw	r30, r16
    32de:	84 81       	ldd	r24, Z+4	; 0x04
    32e0:	95 81       	ldd	r25, Z+5	; 0x05
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    32e2:	9b 83       	std	Y+3, r25	; 0x03
    32e4:	8a 83       	std	Y+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    32e6:	01 96       	adiw	r24, 0x01	; 1
    32e8:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <malloc>
    32ec:	99 83       	std	Y+1, r25	; 0x01
    32ee:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    32f0:	00 97       	sbiw	r24, 0x00	; 0
    32f2:	21 f0       	breq	.+8      	; 0x32fc <_ZN6StringaSERKS_+0x74>
    32f4:	f8 01       	movw	r30, r16
    32f6:	44 81       	ldd	r20, Z+4	; 0x04
    32f8:	55 81       	ldd	r21, Z+5	; 0x05
    32fa:	dd cf       	rjmp	.-70     	; 0x32b6 <_ZN6StringaSERKS_+0x2e>
    32fc:	1b 82       	std	Y+3, r1	; 0x03
    32fe:	1a 82       	std	Y+2, r1	; 0x02
    3300:	1d 82       	std	Y+5, r1	; 0x05
    3302:	1c 82       	std	Y+4, r1	; 0x04
    3304:	df cf       	rjmp	.-66     	; 0x32c4 <_ZN6StringaSERKS_+0x3c>

00003306 <_ZN6StringC1Eh>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const unsigned char value )
    3306:	0f 93       	push	r16
    3308:	1f 93       	push	r17
    330a:	df 93       	push	r29
    330c:	cf 93       	push	r28
    330e:	0f 92       	push	r0
    3310:	cd b7       	in	r28, 0x3d	; 61
    3312:	de b7       	in	r29, 0x3e	; 62
    3314:	8c 01       	movw	r16, r24
{
  _length = 1;
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	d8 01       	movw	r26, r16
    331c:	15 96       	adiw	r26, 0x05	; 5
    331e:	9c 93       	st	X, r25
    3320:	8e 93       	st	-X, r24
    3322:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3324:	13 96       	adiw	r26, 0x03	; 3
    3326:	9c 93       	st	X, r25
    3328:	8e 93       	st	-X, r24
    332a:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    332c:	82 e0       	ldi	r24, 0x02	; 2
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	69 83       	std	Y+1, r22	; 0x01
    3332:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <malloc>
    3336:	fc 01       	movw	r30, r24
    3338:	d8 01       	movw	r26, r16
    333a:	11 96       	adiw	r26, 0x01	; 1
    333c:	9c 93       	st	X, r25
    333e:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3340:	69 81       	ldd	r22, Y+1	; 0x01
    3342:	00 97       	sbiw	r24, 0x00	; 0
    3344:	61 f0       	breq	.+24     	; 0x335e <_ZN6StringC1Eh+0x58>
  getBuffer(1);
  if ( _buffer != NULL) {
    _buffer[0] = value;
    3346:	60 83       	st	Z, r22
    _buffer[1] = 0;
    3348:	d8 01       	movw	r26, r16
    334a:	ed 91       	ld	r30, X+
    334c:	fc 91       	ld	r31, X
    334e:	11 97       	sbiw	r26, 0x01	; 1
    3350:	11 82       	std	Z+1, r1	; 0x01
  }
}
    3352:	0f 90       	pop	r0
    3354:	cf 91       	pop	r28
    3356:	df 91       	pop	r29
    3358:	1f 91       	pop	r17
    335a:	0f 91       	pop	r16
    335c:	08 95       	ret
    335e:	13 96       	adiw	r26, 0x03	; 3
    3360:	1c 92       	st	X, r1
    3362:	1e 92       	st	-X, r1
    3364:	12 97       	sbiw	r26, 0x02	; 2
    3366:	15 96       	adiw	r26, 0x05	; 5
    3368:	1c 92       	st	X, r1
    336a:	1e 92       	st	-X, r1
    336c:	14 97       	sbiw	r26, 0x04	; 4
    336e:	0f 90       	pop	r0
    3370:	cf 91       	pop	r28
    3372:	df 91       	pop	r29
    3374:	1f 91       	pop	r17
    3376:	0f 91       	pop	r16
    3378:	08 95       	ret

0000337a <_ZN6StringC2Eh>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const unsigned char value )
    337a:	0f 93       	push	r16
    337c:	1f 93       	push	r17
    337e:	df 93       	push	r29
    3380:	cf 93       	push	r28
    3382:	0f 92       	push	r0
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
    3388:	8c 01       	movw	r16, r24
{
  _length = 1;
    338a:	81 e0       	ldi	r24, 0x01	; 1
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	d8 01       	movw	r26, r16
    3390:	15 96       	adiw	r26, 0x05	; 5
    3392:	9c 93       	st	X, r25
    3394:	8e 93       	st	-X, r24
    3396:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3398:	13 96       	adiw	r26, 0x03	; 3
    339a:	9c 93       	st	X, r25
    339c:	8e 93       	st	-X, r24
    339e:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    33a0:	82 e0       	ldi	r24, 0x02	; 2
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	69 83       	std	Y+1, r22	; 0x01
    33a6:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <malloc>
    33aa:	fc 01       	movw	r30, r24
    33ac:	d8 01       	movw	r26, r16
    33ae:	11 96       	adiw	r26, 0x01	; 1
    33b0:	9c 93       	st	X, r25
    33b2:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    33b4:	69 81       	ldd	r22, Y+1	; 0x01
    33b6:	00 97       	sbiw	r24, 0x00	; 0
    33b8:	61 f0       	breq	.+24     	; 0x33d2 <_ZN6StringC2Eh+0x58>
  getBuffer(1);
  if ( _buffer != NULL) {
    _buffer[0] = value;
    33ba:	60 83       	st	Z, r22
    _buffer[1] = 0;
    33bc:	d8 01       	movw	r26, r16
    33be:	ed 91       	ld	r30, X+
    33c0:	fc 91       	ld	r31, X
    33c2:	11 97       	sbiw	r26, 0x01	; 1
    33c4:	11 82       	std	Z+1, r1	; 0x01
  }
}
    33c6:	0f 90       	pop	r0
    33c8:	cf 91       	pop	r28
    33ca:	df 91       	pop	r29
    33cc:	1f 91       	pop	r17
    33ce:	0f 91       	pop	r16
    33d0:	08 95       	ret
    33d2:	13 96       	adiw	r26, 0x03	; 3
    33d4:	1c 92       	st	X, r1
    33d6:	1e 92       	st	-X, r1
    33d8:	12 97       	sbiw	r26, 0x02	; 2
    33da:	15 96       	adiw	r26, 0x05	; 5
    33dc:	1c 92       	st	X, r1
    33de:	1e 92       	st	-X, r1
    33e0:	14 97       	sbiw	r26, 0x04	; 4
    33e2:	0f 90       	pop	r0
    33e4:	cf 91       	pop	r28
    33e6:	df 91       	pop	r29
    33e8:	1f 91       	pop	r17
    33ea:	0f 91       	pop	r16
    33ec:	08 95       	ret

000033ee <_ZN6StringC1Ec>:
  getBuffer( _length = value._length );
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
}

String::String( const char value )
    33ee:	0f 93       	push	r16
    33f0:	1f 93       	push	r17
    33f2:	df 93       	push	r29
    33f4:	cf 93       	push	r28
    33f6:	0f 92       	push	r0
    33f8:	cd b7       	in	r28, 0x3d	; 61
    33fa:	de b7       	in	r29, 0x3e	; 62
    33fc:	8c 01       	movw	r16, r24
{
  _length = 1;
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	d8 01       	movw	r26, r16
    3404:	15 96       	adiw	r26, 0x05	; 5
    3406:	9c 93       	st	X, r25
    3408:	8e 93       	st	-X, r24
    340a:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    340c:	13 96       	adiw	r26, 0x03	; 3
    340e:	9c 93       	st	X, r25
    3410:	8e 93       	st	-X, r24
    3412:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    3414:	82 e0       	ldi	r24, 0x02	; 2
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	69 83       	std	Y+1, r22	; 0x01
    341a:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <malloc>
    341e:	fc 01       	movw	r30, r24
    3420:	d8 01       	movw	r26, r16
    3422:	11 96       	adiw	r26, 0x01	; 1
    3424:	9c 93       	st	X, r25
    3426:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3428:	69 81       	ldd	r22, Y+1	; 0x01
    342a:	00 97       	sbiw	r24, 0x00	; 0
    342c:	61 f0       	breq	.+24     	; 0x3446 <_ZN6StringC1Ec+0x58>
  getBuffer(1);
  if ( _buffer != NULL ) {
    _buffer[0] = value;
    342e:	60 83       	st	Z, r22
    _buffer[1] = 0;
    3430:	d8 01       	movw	r26, r16
    3432:	ed 91       	ld	r30, X+
    3434:	fc 91       	ld	r31, X
    3436:	11 97       	sbiw	r26, 0x01	; 1
    3438:	11 82       	std	Z+1, r1	; 0x01
  }
}
    343a:	0f 90       	pop	r0
    343c:	cf 91       	pop	r28
    343e:	df 91       	pop	r29
    3440:	1f 91       	pop	r17
    3442:	0f 91       	pop	r16
    3444:	08 95       	ret
    3446:	13 96       	adiw	r26, 0x03	; 3
    3448:	1c 92       	st	X, r1
    344a:	1e 92       	st	-X, r1
    344c:	12 97       	sbiw	r26, 0x02	; 2
    344e:	15 96       	adiw	r26, 0x05	; 5
    3450:	1c 92       	st	X, r1
    3452:	1e 92       	st	-X, r1
    3454:	14 97       	sbiw	r26, 0x04	; 4
    3456:	0f 90       	pop	r0
    3458:	cf 91       	pop	r28
    345a:	df 91       	pop	r29
    345c:	1f 91       	pop	r17
    345e:	0f 91       	pop	r16
    3460:	08 95       	ret

00003462 <_ZN6StringC2Ec>:
  getBuffer( _length = value._length );
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
}

String::String( const char value )
    3462:	0f 93       	push	r16
    3464:	1f 93       	push	r17
    3466:	df 93       	push	r29
    3468:	cf 93       	push	r28
    346a:	0f 92       	push	r0
    346c:	cd b7       	in	r28, 0x3d	; 61
    346e:	de b7       	in	r29, 0x3e	; 62
    3470:	8c 01       	movw	r16, r24
{
  _length = 1;
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	d8 01       	movw	r26, r16
    3478:	15 96       	adiw	r26, 0x05	; 5
    347a:	9c 93       	st	X, r25
    347c:	8e 93       	st	-X, r24
    347e:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3480:	13 96       	adiw	r26, 0x03	; 3
    3482:	9c 93       	st	X, r25
    3484:	8e 93       	st	-X, r24
    3486:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    3488:	82 e0       	ldi	r24, 0x02	; 2
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	69 83       	std	Y+1, r22	; 0x01
    348e:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <malloc>
    3492:	fc 01       	movw	r30, r24
    3494:	d8 01       	movw	r26, r16
    3496:	11 96       	adiw	r26, 0x01	; 1
    3498:	9c 93       	st	X, r25
    349a:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    349c:	69 81       	ldd	r22, Y+1	; 0x01
    349e:	00 97       	sbiw	r24, 0x00	; 0
    34a0:	61 f0       	breq	.+24     	; 0x34ba <_ZN6StringC2Ec+0x58>
  getBuffer(1);
  if ( _buffer != NULL ) {
    _buffer[0] = value;
    34a2:	60 83       	st	Z, r22
    _buffer[1] = 0;
    34a4:	d8 01       	movw	r26, r16
    34a6:	ed 91       	ld	r30, X+
    34a8:	fc 91       	ld	r31, X
    34aa:	11 97       	sbiw	r26, 0x01	; 1
    34ac:	11 82       	std	Z+1, r1	; 0x01
  }
}
    34ae:	0f 90       	pop	r0
    34b0:	cf 91       	pop	r28
    34b2:	df 91       	pop	r29
    34b4:	1f 91       	pop	r17
    34b6:	0f 91       	pop	r16
    34b8:	08 95       	ret
    34ba:	13 96       	adiw	r26, 0x03	; 3
    34bc:	1c 92       	st	X, r1
    34be:	1e 92       	st	-X, r1
    34c0:	12 97       	sbiw	r26, 0x02	; 2
    34c2:	15 96       	adiw	r26, 0x05	; 5
    34c4:	1c 92       	st	X, r1
    34c6:	1e 92       	st	-X, r1
    34c8:	14 97       	sbiw	r26, 0x04	; 4
    34ca:	0f 90       	pop	r0
    34cc:	cf 91       	pop	r28
    34ce:	df 91       	pop	r29
    34d0:	1f 91       	pop	r17
    34d2:	0f 91       	pop	r16
    34d4:	08 95       	ret

000034d6 <_ZN6StringC1ERKS_>:
  getBuffer( _length = strlen( value ) );
  if ( _buffer != NULL )
    strcpy( _buffer, value );
}

String::String( const String &value )
    34d6:	0f 93       	push	r16
    34d8:	1f 93       	push	r17
    34da:	cf 93       	push	r28
    34dc:	df 93       	push	r29
    34de:	ec 01       	movw	r28, r24
    34e0:	8b 01       	movw	r16, r22
{
  getBuffer( _length = value._length );
    34e2:	fb 01       	movw	r30, r22
    34e4:	84 81       	ldd	r24, Z+4	; 0x04
    34e6:	95 81       	ldd	r25, Z+5	; 0x05
    34e8:	9d 83       	std	Y+5, r25	; 0x05
    34ea:	8c 83       	std	Y+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    34ec:	9b 83       	std	Y+3, r25	; 0x03
    34ee:	8a 83       	std	Y+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    34f0:	01 96       	adiw	r24, 0x01	; 1
    34f2:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <malloc>
    34f6:	99 83       	std	Y+1, r25	; 0x01
    34f8:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    34fa:	00 97       	sbiw	r24, 0x00	; 0
    34fc:	51 f0       	breq	.+20     	; 0x3512 <_ZN6StringC1ERKS_+0x3c>
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
    34fe:	f8 01       	movw	r30, r16
    3500:	60 81       	ld	r22, Z
    3502:	71 81       	ldd	r23, Z+1	; 0x01
    3504:	0e 94 61 2e 	call	0x5cc2	; 0x5cc2 <strcpy>
}
    3508:	df 91       	pop	r29
    350a:	cf 91       	pop	r28
    350c:	1f 91       	pop	r17
    350e:	0f 91       	pop	r16
    3510:	08 95       	ret
    3512:	1b 82       	std	Y+3, r1	; 0x03
    3514:	1a 82       	std	Y+2, r1	; 0x02
    3516:	1d 82       	std	Y+5, r1	; 0x05
    3518:	1c 82       	std	Y+4, r1	; 0x04
    351a:	df 91       	pop	r29
    351c:	cf 91       	pop	r28
    351e:	1f 91       	pop	r17
    3520:	0f 91       	pop	r16
    3522:	08 95       	ret

00003524 <_ZN6StringC2ERKS_>:
  getBuffer( _length = strlen( value ) );
  if ( _buffer != NULL )
    strcpy( _buffer, value );
}

String::String( const String &value )
    3524:	0f 93       	push	r16
    3526:	1f 93       	push	r17
    3528:	cf 93       	push	r28
    352a:	df 93       	push	r29
    352c:	ec 01       	movw	r28, r24
    352e:	8b 01       	movw	r16, r22
{
  getBuffer( _length = value._length );
    3530:	fb 01       	movw	r30, r22
    3532:	84 81       	ldd	r24, Z+4	; 0x04
    3534:	95 81       	ldd	r25, Z+5	; 0x05
    3536:	9d 83       	std	Y+5, r25	; 0x05
    3538:	8c 83       	std	Y+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    353a:	9b 83       	std	Y+3, r25	; 0x03
    353c:	8a 83       	std	Y+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    353e:	01 96       	adiw	r24, 0x01	; 1
    3540:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <malloc>
    3544:	99 83       	std	Y+1, r25	; 0x01
    3546:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3548:	00 97       	sbiw	r24, 0x00	; 0
    354a:	51 f0       	breq	.+20     	; 0x3560 <_ZN6StringC2ERKS_+0x3c>
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
    354c:	f8 01       	movw	r30, r16
    354e:	60 81       	ld	r22, Z
    3550:	71 81       	ldd	r23, Z+1	; 0x01
    3552:	0e 94 61 2e 	call	0x5cc2	; 0x5cc2 <strcpy>
}
    3556:	df 91       	pop	r29
    3558:	cf 91       	pop	r28
    355a:	1f 91       	pop	r17
    355c:	0f 91       	pop	r16
    355e:	08 95       	ret
    3560:	1b 82       	std	Y+3, r1	; 0x03
    3562:	1a 82       	std	Y+2, r1	; 0x02
    3564:	1d 82       	std	Y+5, r1	; 0x05
    3566:	1c 82       	std	Y+4, r1	; 0x04
    3568:	df 91       	pop	r29
    356a:	cf 91       	pop	r28
    356c:	1f 91       	pop	r17
    356e:	0f 91       	pop	r16
    3570:	08 95       	ret

00003572 <_ZN6StringC1Emi>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned long value, const int base )
    3572:	ef 92       	push	r14
    3574:	ff 92       	push	r15
    3576:	0f 93       	push	r16
    3578:	1f 93       	push	r17
    357a:	df 93       	push	r29
    357c:	cf 93       	push	r28
    357e:	cd b7       	in	r28, 0x3d	; 61
    3580:	de b7       	in	r29, 0x3e	; 62
    3582:	a1 97       	sbiw	r28, 0x21	; 33
    3584:	0f b6       	in	r0, 0x3f	; 63
    3586:	f8 94       	cli
    3588:	de bf       	out	0x3e, r29	; 62
    358a:	0f be       	out	0x3f, r0	; 63
    358c:	cd bf       	out	0x3d, r28	; 61
    358e:	7c 01       	movw	r14, r24
    3590:	cb 01       	movw	r24, r22
    3592:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ultoa(value, buf, 10);
    3594:	8e 01       	movw	r16, r28
    3596:	0f 5f       	subi	r16, 0xFF	; 255
    3598:	1f 4f       	sbci	r17, 0xFF	; 255
    359a:	a8 01       	movw	r20, r16
    359c:	2a e0       	ldi	r18, 0x0A	; 10
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <ultoa>
  getBuffer( _length = strlen(buf) );
    35a4:	f8 01       	movw	r30, r16
    35a6:	01 90       	ld	r0, Z+
    35a8:	00 20       	and	r0, r0
    35aa:	e9 f7       	brne	.-6      	; 0x35a6 <_ZN6StringC1Emi+0x34>
    35ac:	cf 01       	movw	r24, r30
    35ae:	01 97       	sbiw	r24, 0x01	; 1
    35b0:	80 1b       	sub	r24, r16
    35b2:	91 0b       	sbc	r25, r17
    35b4:	f7 01       	movw	r30, r14
    35b6:	95 83       	std	Z+5, r25	; 0x05
    35b8:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    35ba:	93 83       	std	Z+3, r25	; 0x03
    35bc:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    35be:	01 96       	adiw	r24, 0x01	; 1
    35c0:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <malloc>
    35c4:	f7 01       	movw	r30, r14
    35c6:	91 83       	std	Z+1, r25	; 0x01
    35c8:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    35ca:	00 97       	sbiw	r24, 0x00	; 0
    35cc:	81 f0       	breq	.+32     	; 0x35ee <_ZN6StringC1Emi+0x7c>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    35ce:	b8 01       	movw	r22, r16
    35d0:	0e 94 61 2e 	call	0x5cc2	; 0x5cc2 <strcpy>
}
    35d4:	a1 96       	adiw	r28, 0x21	; 33
    35d6:	0f b6       	in	r0, 0x3f	; 63
    35d8:	f8 94       	cli
    35da:	de bf       	out	0x3e, r29	; 62
    35dc:	0f be       	out	0x3f, r0	; 63
    35de:	cd bf       	out	0x3d, r28	; 61
    35e0:	cf 91       	pop	r28
    35e2:	df 91       	pop	r29
    35e4:	1f 91       	pop	r17
    35e6:	0f 91       	pop	r16
    35e8:	ff 90       	pop	r15
    35ea:	ef 90       	pop	r14
    35ec:	08 95       	ret
    35ee:	13 82       	std	Z+3, r1	; 0x03
    35f0:	12 82       	std	Z+2, r1	; 0x02
    35f2:	15 82       	std	Z+5, r1	; 0x05
    35f4:	14 82       	std	Z+4, r1	; 0x04
    35f6:	ee cf       	rjmp	.-36     	; 0x35d4 <_ZN6StringC1Emi+0x62>

000035f8 <_ZN6StringC2Emi>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned long value, const int base )
    35f8:	ef 92       	push	r14
    35fa:	ff 92       	push	r15
    35fc:	0f 93       	push	r16
    35fe:	1f 93       	push	r17
    3600:	df 93       	push	r29
    3602:	cf 93       	push	r28
    3604:	cd b7       	in	r28, 0x3d	; 61
    3606:	de b7       	in	r29, 0x3e	; 62
    3608:	a1 97       	sbiw	r28, 0x21	; 33
    360a:	0f b6       	in	r0, 0x3f	; 63
    360c:	f8 94       	cli
    360e:	de bf       	out	0x3e, r29	; 62
    3610:	0f be       	out	0x3f, r0	; 63
    3612:	cd bf       	out	0x3d, r28	; 61
    3614:	7c 01       	movw	r14, r24
    3616:	cb 01       	movw	r24, r22
    3618:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ultoa(value, buf, 10);
    361a:	8e 01       	movw	r16, r28
    361c:	0f 5f       	subi	r16, 0xFF	; 255
    361e:	1f 4f       	sbci	r17, 0xFF	; 255
    3620:	a8 01       	movw	r20, r16
    3622:	2a e0       	ldi	r18, 0x0A	; 10
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <ultoa>
  getBuffer( _length = strlen(buf) );
    362a:	f8 01       	movw	r30, r16
    362c:	01 90       	ld	r0, Z+
    362e:	00 20       	and	r0, r0
    3630:	e9 f7       	brne	.-6      	; 0x362c <_ZN6StringC2Emi+0x34>
    3632:	cf 01       	movw	r24, r30
    3634:	01 97       	sbiw	r24, 0x01	; 1
    3636:	80 1b       	sub	r24, r16
    3638:	91 0b       	sbc	r25, r17
    363a:	f7 01       	movw	r30, r14
    363c:	95 83       	std	Z+5, r25	; 0x05
    363e:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3640:	93 83       	std	Z+3, r25	; 0x03
    3642:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3644:	01 96       	adiw	r24, 0x01	; 1
    3646:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <malloc>
    364a:	f7 01       	movw	r30, r14
    364c:	91 83       	std	Z+1, r25	; 0x01
    364e:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3650:	00 97       	sbiw	r24, 0x00	; 0
    3652:	81 f0       	breq	.+32     	; 0x3674 <_ZN6StringC2Emi+0x7c>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    3654:	b8 01       	movw	r22, r16
    3656:	0e 94 61 2e 	call	0x5cc2	; 0x5cc2 <strcpy>
}
    365a:	a1 96       	adiw	r28, 0x21	; 33
    365c:	0f b6       	in	r0, 0x3f	; 63
    365e:	f8 94       	cli
    3660:	de bf       	out	0x3e, r29	; 62
    3662:	0f be       	out	0x3f, r0	; 63
    3664:	cd bf       	out	0x3d, r28	; 61
    3666:	cf 91       	pop	r28
    3668:	df 91       	pop	r29
    366a:	1f 91       	pop	r17
    366c:	0f 91       	pop	r16
    366e:	ff 90       	pop	r15
    3670:	ef 90       	pop	r14
    3672:	08 95       	ret
    3674:	13 82       	std	Z+3, r1	; 0x03
    3676:	12 82       	std	Z+2, r1	; 0x02
    3678:	15 82       	std	Z+5, r1	; 0x05
    367a:	14 82       	std	Z+4, r1	; 0x04
    367c:	ee cf       	rjmp	.-36     	; 0x365a <_ZN6StringC2Emi+0x62>

0000367e <_ZN6StringC1Eji>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned int value, const int base )
    367e:	ef 92       	push	r14
    3680:	ff 92       	push	r15
    3682:	0f 93       	push	r16
    3684:	1f 93       	push	r17
    3686:	df 93       	push	r29
    3688:	cf 93       	push	r28
    368a:	cd b7       	in	r28, 0x3d	; 61
    368c:	de b7       	in	r29, 0x3e	; 62
    368e:	a1 97       	sbiw	r28, 0x21	; 33
    3690:	0f b6       	in	r0, 0x3f	; 63
    3692:	f8 94       	cli
    3694:	de bf       	out	0x3e, r29	; 62
    3696:	0f be       	out	0x3f, r0	; 63
    3698:	cd bf       	out	0x3d, r28	; 61
    369a:	7c 01       	movw	r14, r24
    369c:	9a 01       	movw	r18, r20
{
  char buf[33];   
  ultoa((unsigned long)value, buf, base);
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	8e 01       	movw	r16, r28
    36a4:	0f 5f       	subi	r16, 0xFF	; 255
    36a6:	1f 4f       	sbci	r17, 0xFF	; 255
    36a8:	a8 01       	movw	r20, r16
    36aa:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <ultoa>
  getBuffer( _length = strlen(buf) );
    36ae:	f8 01       	movw	r30, r16
    36b0:	01 90       	ld	r0, Z+
    36b2:	00 20       	and	r0, r0
    36b4:	e9 f7       	brne	.-6      	; 0x36b0 <_ZN6StringC1Eji+0x32>
    36b6:	cf 01       	movw	r24, r30
    36b8:	01 97       	sbiw	r24, 0x01	; 1
    36ba:	80 1b       	sub	r24, r16
    36bc:	91 0b       	sbc	r25, r17
    36be:	f7 01       	movw	r30, r14
    36c0:	95 83       	std	Z+5, r25	; 0x05
    36c2:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    36c4:	93 83       	std	Z+3, r25	; 0x03
    36c6:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    36c8:	01 96       	adiw	r24, 0x01	; 1
    36ca:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <malloc>
    36ce:	f7 01       	movw	r30, r14
    36d0:	91 83       	std	Z+1, r25	; 0x01
    36d2:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    36d4:	00 97       	sbiw	r24, 0x00	; 0
    36d6:	81 f0       	breq	.+32     	; 0x36f8 <_ZN6StringC1Eji+0x7a>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    36d8:	b8 01       	movw	r22, r16
    36da:	0e 94 61 2e 	call	0x5cc2	; 0x5cc2 <strcpy>
}
    36de:	a1 96       	adiw	r28, 0x21	; 33
    36e0:	0f b6       	in	r0, 0x3f	; 63
    36e2:	f8 94       	cli
    36e4:	de bf       	out	0x3e, r29	; 62
    36e6:	0f be       	out	0x3f, r0	; 63
    36e8:	cd bf       	out	0x3d, r28	; 61
    36ea:	cf 91       	pop	r28
    36ec:	df 91       	pop	r29
    36ee:	1f 91       	pop	r17
    36f0:	0f 91       	pop	r16
    36f2:	ff 90       	pop	r15
    36f4:	ef 90       	pop	r14
    36f6:	08 95       	ret
    36f8:	13 82       	std	Z+3, r1	; 0x03
    36fa:	12 82       	std	Z+2, r1	; 0x02
    36fc:	15 82       	std	Z+5, r1	; 0x05
    36fe:	14 82       	std	Z+4, r1	; 0x04
    3700:	ee cf       	rjmp	.-36     	; 0x36de <_ZN6StringC1Eji+0x60>

00003702 <_ZN6StringC2Eji>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned int value, const int base )
    3702:	ef 92       	push	r14
    3704:	ff 92       	push	r15
    3706:	0f 93       	push	r16
    3708:	1f 93       	push	r17
    370a:	df 93       	push	r29
    370c:	cf 93       	push	r28
    370e:	cd b7       	in	r28, 0x3d	; 61
    3710:	de b7       	in	r29, 0x3e	; 62
    3712:	a1 97       	sbiw	r28, 0x21	; 33
    3714:	0f b6       	in	r0, 0x3f	; 63
    3716:	f8 94       	cli
    3718:	de bf       	out	0x3e, r29	; 62
    371a:	0f be       	out	0x3f, r0	; 63
    371c:	cd bf       	out	0x3d, r28	; 61
    371e:	7c 01       	movw	r14, r24
    3720:	9a 01       	movw	r18, r20
{
  char buf[33];   
  ultoa((unsigned long)value, buf, base);
    3722:	80 e0       	ldi	r24, 0x00	; 0
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	8e 01       	movw	r16, r28
    3728:	0f 5f       	subi	r16, 0xFF	; 255
    372a:	1f 4f       	sbci	r17, 0xFF	; 255
    372c:	a8 01       	movw	r20, r16
    372e:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <ultoa>
  getBuffer( _length = strlen(buf) );
    3732:	f8 01       	movw	r30, r16
    3734:	01 90       	ld	r0, Z+
    3736:	00 20       	and	r0, r0
    3738:	e9 f7       	brne	.-6      	; 0x3734 <_ZN6StringC2Eji+0x32>
    373a:	cf 01       	movw	r24, r30
    373c:	01 97       	sbiw	r24, 0x01	; 1
    373e:	80 1b       	sub	r24, r16
    3740:	91 0b       	sbc	r25, r17
    3742:	f7 01       	movw	r30, r14
    3744:	95 83       	std	Z+5, r25	; 0x05
    3746:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3748:	93 83       	std	Z+3, r25	; 0x03
    374a:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    374c:	01 96       	adiw	r24, 0x01	; 1
    374e:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <malloc>
    3752:	f7 01       	movw	r30, r14
    3754:	91 83       	std	Z+1, r25	; 0x01
    3756:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3758:	00 97       	sbiw	r24, 0x00	; 0
    375a:	81 f0       	breq	.+32     	; 0x377c <_ZN6StringC2Eji+0x7a>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    375c:	b8 01       	movw	r22, r16
    375e:	0e 94 61 2e 	call	0x5cc2	; 0x5cc2 <strcpy>
}
    3762:	a1 96       	adiw	r28, 0x21	; 33
    3764:	0f b6       	in	r0, 0x3f	; 63
    3766:	f8 94       	cli
    3768:	de bf       	out	0x3e, r29	; 62
    376a:	0f be       	out	0x3f, r0	; 63
    376c:	cd bf       	out	0x3d, r28	; 61
    376e:	cf 91       	pop	r28
    3770:	df 91       	pop	r29
    3772:	1f 91       	pop	r17
    3774:	0f 91       	pop	r16
    3776:	ff 90       	pop	r15
    3778:	ef 90       	pop	r14
    377a:	08 95       	ret
    377c:	13 82       	std	Z+3, r1	; 0x03
    377e:	12 82       	std	Z+2, r1	; 0x02
    3780:	15 82       	std	Z+5, r1	; 0x05
    3782:	14 82       	std	Z+4, r1	; 0x04
    3784:	ee cf       	rjmp	.-36     	; 0x3762 <_ZN6StringC2Eji+0x60>

00003786 <_ZN6StringC1EPKc>:
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    3786:	0f 93       	push	r16
    3788:	1f 93       	push	r17
    378a:	cf 93       	push	r28
    378c:	df 93       	push	r29
    378e:	ec 01       	movw	r28, r24
    3790:	8b 01       	movw	r16, r22
{
  if ( value == NULL )
    3792:	61 15       	cp	r22, r1
    3794:	71 05       	cpc	r23, r1
    3796:	21 f1       	breq	.+72     	; 0x37e0 <_ZN6StringC1EPKc+0x5a>
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    3798:	fb 01       	movw	r30, r22
    379a:	01 90       	ld	r0, Z+
    379c:	00 20       	and	r0, r0
    379e:	e9 f7       	brne	.-6      	; 0x379a <_ZN6StringC1EPKc+0x14>
    37a0:	31 97       	sbiw	r30, 0x01	; 1
    37a2:	e6 1b       	sub	r30, r22
    37a4:	f7 0b       	sbc	r31, r23
    37a6:	cf 01       	movw	r24, r30
    37a8:	01 96       	adiw	r24, 0x01	; 1
{
  if ( value == NULL )
    value = "";
  getBuffer( _length = strlen( value ) );
    37aa:	fd 83       	std	Y+5, r31	; 0x05
    37ac:	ec 83       	std	Y+4, r30	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    37ae:	fb 83       	std	Y+3, r31	; 0x03
    37b0:	ea 83       	std	Y+2, r30	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    37b2:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <malloc>
    37b6:	99 83       	std	Y+1, r25	; 0x01
    37b8:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    37ba:	00 97       	sbiw	r24, 0x00	; 0
    37bc:	41 f0       	breq	.+16     	; 0x37ce <_ZN6StringC1EPKc+0x48>
  if ( _buffer != NULL )
    strcpy( _buffer, value );
    37be:	b8 01       	movw	r22, r16
    37c0:	0e 94 61 2e 	call	0x5cc2	; 0x5cc2 <strcpy>
}
    37c4:	df 91       	pop	r29
    37c6:	cf 91       	pop	r28
    37c8:	1f 91       	pop	r17
    37ca:	0f 91       	pop	r16
    37cc:	08 95       	ret
    37ce:	1b 82       	std	Y+3, r1	; 0x03
    37d0:	1a 82       	std	Y+2, r1	; 0x02
    37d2:	1d 82       	std	Y+5, r1	; 0x05
    37d4:	1c 82       	std	Y+4, r1	; 0x04
    37d6:	df 91       	pop	r29
    37d8:	cf 91       	pop	r28
    37da:	1f 91       	pop	r17
    37dc:	0f 91       	pop	r16
    37de:	08 95       	ret
#include "WString.h"


String::String( const char *value )
{
  if ( value == NULL )
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	e0 e0       	ldi	r30, 0x00	; 0
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	0b ef       	ldi	r16, 0xFB	; 251
    37ea:	11 e0       	ldi	r17, 0x01	; 1
    37ec:	de cf       	rjmp	.-68     	; 0x37aa <_ZN6StringC1EPKc+0x24>

000037ee <_ZNK6String11toUpperCaseEv>:
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
  return temp;
}

String String::toUpperCase() const
{
    37ee:	af 92       	push	r10
    37f0:	bf 92       	push	r11
    37f2:	cf 92       	push	r12
    37f4:	df 92       	push	r13
    37f6:	ef 92       	push	r14
    37f8:	ff 92       	push	r15
    37fa:	0f 93       	push	r16
    37fc:	1f 93       	push	r17
    37fe:	cf 93       	push	r28
    3800:	df 93       	push	r29
    3802:	7c 01       	movw	r14, r24
    3804:	8b 01       	movw	r16, r22
  String temp = _buffer;
    3806:	c8 2e       	mov	r12, r24
    3808:	e6 01       	movw	r28, r12
    380a:	6e 01       	movw	r12, r28
    380c:	df 2c       	mov	r13, r15
    380e:	e6 01       	movw	r28, r12
    3810:	fb 01       	movw	r30, r22
    3812:	60 81       	ld	r22, Z
    3814:	71 81       	ldd	r23, Z+1	; 0x01
    3816:	c6 01       	movw	r24, r12
    3818:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_ZN6StringC1EPKc>

  for ( unsigned int i = 0; i < _length; i++ )
    381c:	f8 01       	movw	r30, r16
    381e:	84 81       	ldd	r24, Z+4	; 0x04
    3820:	95 81       	ldd	r25, Z+5	; 0x05
    3822:	00 97       	sbiw	r24, 0x00	; 0
    3824:	b1 f0       	breq	.+44     	; 0x3852 <_ZNK6String11toUpperCaseEv+0x64>
    3826:	aa 24       	eor	r10, r10
    3828:	bb 24       	eor	r11, r11
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
    382a:	c8 80       	ld	r12, Y
    382c:	d9 80       	ldd	r13, Y+1	; 0x01
    382e:	ca 0c       	add	r12, r10
    3830:	db 1c       	adc	r13, r11
    3832:	f6 01       	movw	r30, r12
    3834:	80 81       	ld	r24, Z
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <toupper>
    383c:	f6 01       	movw	r30, r12
    383e:	80 83       	st	Z, r24

String String::toUpperCase() const
{
  String temp = _buffer;

  for ( unsigned int i = 0; i < _length; i++ )
    3840:	08 94       	sec
    3842:	a1 1c       	adc	r10, r1
    3844:	b1 1c       	adc	r11, r1
    3846:	f8 01       	movw	r30, r16
    3848:	84 81       	ldd	r24, Z+4	; 0x04
    384a:	95 81       	ldd	r25, Z+5	; 0x05
    384c:	a8 16       	cp	r10, r24
    384e:	b9 06       	cpc	r11, r25
    3850:	60 f3       	brcs	.-40     	; 0x382a <_ZNK6String11toUpperCaseEv+0x3c>
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
  return temp;
}
    3852:	c7 01       	movw	r24, r14
    3854:	df 91       	pop	r29
    3856:	cf 91       	pop	r28
    3858:	1f 91       	pop	r17
    385a:	0f 91       	pop	r16
    385c:	ff 90       	pop	r15
    385e:	ef 90       	pop	r14
    3860:	df 90       	pop	r13
    3862:	cf 90       	pop	r12
    3864:	bf 90       	pop	r11
    3866:	af 90       	pop	r10
    3868:	08 95       	ret

0000386a <_ZNK6String11toLowerCaseEv>:
  _buffer[ right ] = temp;  //restore character
  return outPut;
}

String String::toLowerCase() const
{
    386a:	af 92       	push	r10
    386c:	bf 92       	push	r11
    386e:	cf 92       	push	r12
    3870:	df 92       	push	r13
    3872:	ef 92       	push	r14
    3874:	ff 92       	push	r15
    3876:	0f 93       	push	r16
    3878:	1f 93       	push	r17
    387a:	cf 93       	push	r28
    387c:	df 93       	push	r29
    387e:	7c 01       	movw	r14, r24
    3880:	8b 01       	movw	r16, r22
  String temp = _buffer;
    3882:	c8 2e       	mov	r12, r24
    3884:	e6 01       	movw	r28, r12
    3886:	6e 01       	movw	r12, r28
    3888:	df 2c       	mov	r13, r15
    388a:	e6 01       	movw	r28, r12
    388c:	fb 01       	movw	r30, r22
    388e:	60 81       	ld	r22, Z
    3890:	71 81       	ldd	r23, Z+1	; 0x01
    3892:	c6 01       	movw	r24, r12
    3894:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_ZN6StringC1EPKc>

  for ( unsigned int i = 0; i < _length; i++ )
    3898:	f8 01       	movw	r30, r16
    389a:	84 81       	ldd	r24, Z+4	; 0x04
    389c:	95 81       	ldd	r25, Z+5	; 0x05
    389e:	00 97       	sbiw	r24, 0x00	; 0
    38a0:	b1 f0       	breq	.+44     	; 0x38ce <_ZNK6String11toLowerCaseEv+0x64>
    38a2:	aa 24       	eor	r10, r10
    38a4:	bb 24       	eor	r11, r11
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
    38a6:	c8 80       	ld	r12, Y
    38a8:	d9 80       	ldd	r13, Y+1	; 0x01
    38aa:	ca 0c       	add	r12, r10
    38ac:	db 1c       	adc	r13, r11
    38ae:	f6 01       	movw	r30, r12
    38b0:	80 81       	ld	r24, Z
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <tolower>
    38b8:	f6 01       	movw	r30, r12
    38ba:	80 83       	st	Z, r24

String String::toLowerCase() const
{
  String temp = _buffer;

  for ( unsigned int i = 0; i < _length; i++ )
    38bc:	08 94       	sec
    38be:	a1 1c       	adc	r10, r1
    38c0:	b1 1c       	adc	r11, r1
    38c2:	f8 01       	movw	r30, r16
    38c4:	84 81       	ldd	r24, Z+4	; 0x04
    38c6:	95 81       	ldd	r25, Z+5	; 0x05
    38c8:	a8 16       	cp	r10, r24
    38ca:	b9 06       	cpc	r11, r25
    38cc:	60 f3       	brcs	.-40     	; 0x38a6 <_ZNK6String11toLowerCaseEv+0x3c>
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
  return temp;
}
    38ce:	c7 01       	movw	r24, r14
    38d0:	df 91       	pop	r29
    38d2:	cf 91       	pop	r28
    38d4:	1f 91       	pop	r17
    38d6:	0f 91       	pop	r16
    38d8:	ff 90       	pop	r15
    38da:	ef 90       	pop	r14
    38dc:	df 90       	pop	r13
    38de:	cf 90       	pop	r12
    38e0:	bf 90       	pop	r11
    38e2:	af 90       	pop	r10
    38e4:	08 95       	ret

000038e6 <_ZNK6String16equalsIgnoreCaseERKS_>:
{
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
}

boolean String::equalsIgnoreCase( const String &s2 ) const
{
    38e6:	ef 92       	push	r14
    38e8:	ff 92       	push	r15
    38ea:	0f 93       	push	r16
    38ec:	1f 93       	push	r17
    38ee:	df 93       	push	r29
    38f0:	cf 93       	push	r28
    38f2:	cd b7       	in	r28, 0x3d	; 61
    38f4:	de b7       	in	r29, 0x3e	; 62
    38f6:	2d 97       	sbiw	r28, 0x0d	; 13
    38f8:	0f b6       	in	r0, 0x3f	; 63
    38fa:	f8 94       	cli
    38fc:	de bf       	out	0x3e, r29	; 62
    38fe:	0f be       	out	0x3f, r0	; 63
    3900:	cd bf       	out	0x3d, r28	; 61
    3902:	fc 01       	movw	r30, r24
    3904:	8b 01       	movw	r16, r22
  if ( this == &s2 )
    3906:	86 17       	cp	r24, r22
    3908:	97 07       	cpc	r25, r23
    390a:	e9 f1       	breq	.+122    	; 0x3986 <_ZNK6String16equalsIgnoreCaseERKS_+0xa0>
    return true; //1;
  else if ( _length != s2._length )
    390c:	24 81       	ldd	r18, Z+4	; 0x04
    390e:	35 81       	ldd	r19, Z+5	; 0x05
    3910:	db 01       	movw	r26, r22
    3912:	14 96       	adiw	r26, 0x04	; 4
    3914:	8d 91       	ld	r24, X+
    3916:	9c 91       	ld	r25, X
    3918:	15 97       	sbiw	r26, 0x05	; 5
    391a:	28 17       	cp	r18, r24
    391c:	39 07       	cpc	r19, r25
    391e:	79 f0       	breq	.+30     	; 0x393e <_ZNK6String16equalsIgnoreCaseERKS_+0x58>
    3920:	20 e0       	ldi	r18, 0x00	; 0
    return false; //0;

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}
    3922:	82 2f       	mov	r24, r18
    3924:	2d 96       	adiw	r28, 0x0d	; 13
    3926:	0f b6       	in	r0, 0x3f	; 63
    3928:	f8 94       	cli
    392a:	de bf       	out	0x3e, r29	; 62
    392c:	0f be       	out	0x3f, r0	; 63
    392e:	cd bf       	out	0x3d, r28	; 61
    3930:	cf 91       	pop	r28
    3932:	df 91       	pop	r29
    3934:	1f 91       	pop	r17
    3936:	0f 91       	pop	r16
    3938:	ff 90       	pop	r15
    393a:	ef 90       	pop	r14
    393c:	08 95       	ret
  if ( this == &s2 )
    return true; //1;
  else if ( _length != s2._length )
    return false; //0;

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
    393e:	ce 01       	movw	r24, r28
    3940:	01 96       	adiw	r24, 0x01	; 1
    3942:	bf 01       	movw	r22, r30
    3944:	0e 94 35 1c 	call	0x386a	; 0x386a <_ZNK6String11toLowerCaseEv>
    3948:	e9 80       	ldd	r14, Y+1	; 0x01
    394a:	fa 80       	ldd	r15, Y+2	; 0x02
    394c:	ce 01       	movw	r24, r28
    394e:	07 96       	adiw	r24, 0x07	; 7
    3950:	b8 01       	movw	r22, r16
    3952:	0e 94 35 1c 	call	0x386a	; 0x386a <_ZNK6String11toLowerCaseEv>
    3956:	0f 81       	ldd	r16, Y+7	; 0x07
    3958:	18 85       	ldd	r17, Y+8	; 0x08
    395a:	c7 01       	movw	r24, r14
    395c:	b8 01       	movw	r22, r16
    395e:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <strcmp>
    3962:	20 e0       	ldi	r18, 0x00	; 0
    3964:	00 97       	sbiw	r24, 0x00	; 0
    3966:	09 f4       	brne	.+2      	; 0x396a <_ZNK6String16equalsIgnoreCaseERKS_+0x84>
    3968:	21 e0       	ldi	r18, 0x01	; 1
    String( const unsigned char );
    String( const int, const int base=10);
    String( const unsigned int, const int base=10 );
    String( const long, const int base=10 );
    String( const unsigned long, const int base=10 );
    ~String() { free(_buffer); _length = _capacity = 0;}     //added _length = _capacity = 0;
    396a:	c8 01       	movw	r24, r16
    396c:	2d 87       	std	Y+13, r18	; 0x0d
    396e:	0e 94 8b 2c 	call	0x5916	; 0x5916 <free>
    3972:	1a 86       	std	Y+10, r1	; 0x0a
    3974:	19 86       	std	Y+9, r1	; 0x09
    3976:	1c 86       	std	Y+12, r1	; 0x0c
    3978:	1b 86       	std	Y+11, r1	; 0x0b
    397a:	89 81       	ldd	r24, Y+1	; 0x01
    397c:	9a 81       	ldd	r25, Y+2	; 0x02
    397e:	0e 94 8b 2c 	call	0x5916	; 0x5916 <free>
    3982:	2d 85       	ldd	r18, Y+13	; 0x0d
    3984:	ce cf       	rjmp	.-100    	; 0x3922 <_ZNK6String16equalsIgnoreCaseERKS_+0x3c>
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
}

boolean String::equalsIgnoreCase( const String &s2 ) const
{
  if ( this == &s2 )
    3986:	21 e0       	ldi	r18, 0x01	; 1
    3988:	cc cf       	rjmp	.-104    	; 0x3922 <_ZNK6String16equalsIgnoreCaseERKS_+0x3c>

0000398a <_ZNK6String9substringEjj>:
{
  return substring( left, _length );
}

String String::substring( unsigned int left, unsigned int right ) const
{
    398a:	df 92       	push	r13
    398c:	ef 92       	push	r14
    398e:	ff 92       	push	r15
    3990:	0f 93       	push	r16
    3992:	1f 93       	push	r17
    3994:	cf 93       	push	r28
    3996:	df 93       	push	r29
    3998:	8c 01       	movw	r16, r24
    399a:	eb 01       	movw	r28, r22
    399c:	79 01       	movw	r14, r18
  if ( left > right )
    399e:	24 17       	cp	r18, r20
    39a0:	35 07       	cpc	r19, r21
    39a2:	30 f4       	brcc	.+12     	; 0x39b0 <_ZNK6String9substringEjj+0x26>
    39a4:	34 2f       	mov	r19, r20
    39a6:	25 2f       	mov	r18, r21
    39a8:	a7 01       	movw	r20, r14
    39aa:	c9 01       	movw	r24, r18
    39ac:	e9 2e       	mov	r14, r25
    39ae:	f8 2e       	mov	r15, r24
    39b0:	8c 81       	ldd	r24, Y+4	; 0x04
    39b2:	9d 81       	ldd	r25, Y+5	; 0x05
    39b4:	8e 15       	cp	r24, r14
    39b6:	9f 05       	cpc	r25, r15
    39b8:	08 f4       	brcc	.+2      	; 0x39bc <_ZNK6String9substringEjj+0x32>
    39ba:	7c 01       	movw	r14, r24
  if ( right > _length )
  {
    right = _length;
  } 

  char temp = _buffer[ right ];  // save the replaced character
    39bc:	e8 81       	ld	r30, Y
    39be:	f9 81       	ldd	r31, Y+1	; 0x01
    39c0:	ee 0d       	add	r30, r14
    39c2:	ff 1d       	adc	r31, r15
    39c4:	d0 80       	ld	r13, Z
  _buffer[ right ] = '\0';	
    39c6:	10 82       	st	Z, r1
  String outPut = ( _buffer + left );  // pointer arithmetic
    39c8:	68 81       	ld	r22, Y
    39ca:	79 81       	ldd	r23, Y+1	; 0x01
    39cc:	64 0f       	add	r22, r20
    39ce:	75 1f       	adc	r23, r21
    39d0:	c8 01       	movw	r24, r16
    39d2:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_ZN6StringC1EPKc>
  _buffer[ right ] = temp;  //restore character
    39d6:	e8 81       	ld	r30, Y
    39d8:	f9 81       	ldd	r31, Y+1	; 0x01
    39da:	ee 0d       	add	r30, r14
    39dc:	ff 1d       	adc	r31, r15
    39de:	d0 82       	st	Z, r13
  return outPut;
}
    39e0:	c8 01       	movw	r24, r16
    39e2:	df 91       	pop	r29
    39e4:	cf 91       	pop	r28
    39e6:	1f 91       	pop	r17
    39e8:	0f 91       	pop	r16
    39ea:	ff 90       	pop	r15
    39ec:	ef 90       	pop	r14
    39ee:	df 90       	pop	r13
    39f0:	08 95       	ret

000039f2 <_ZNK6String9substringEj>:

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
}

String String::substring( unsigned int left ) const
{
    39f2:	cf 93       	push	r28
    39f4:	df 93       	push	r29
    39f6:	ec 01       	movw	r28, r24
  return substring( left, _length );
    39f8:	fb 01       	movw	r30, r22
    39fa:	24 81       	ldd	r18, Z+4	; 0x04
    39fc:	35 81       	ldd	r19, Z+5	; 0x05
    39fe:	0e 94 c5 1c 	call	0x398a	; 0x398a <_ZNK6String9substringEjj>
}
    3a02:	ce 01       	movw	r24, r28
    3a04:	df 91       	pop	r29
    3a06:	cf 91       	pop	r28
    3a08:	08 95       	ret

00003a0a <_ZNK6String11lastIndexOfERKS_j>:
{
  return lastIndexOf( s2, _length - s2._length );
}

int String::lastIndexOf( const String &s2, unsigned int fromIndex ) const
{
    3a0a:	8f 92       	push	r8
    3a0c:	9f 92       	push	r9
    3a0e:	af 92       	push	r10
    3a10:	bf 92       	push	r11
    3a12:	cf 92       	push	r12
    3a14:	df 92       	push	r13
    3a16:	ef 92       	push	r14
    3a18:	ff 92       	push	r15
    3a1a:	0f 93       	push	r16
    3a1c:	1f 93       	push	r17
    3a1e:	df 93       	push	r29
    3a20:	cf 93       	push	r28
    3a22:	00 d0       	rcall	.+0      	; 0x3a24 <_ZNK6String11lastIndexOfERKS_j+0x1a>
    3a24:	00 d0       	rcall	.+0      	; 0x3a26 <_ZNK6String11lastIndexOfERKS_j+0x1c>
    3a26:	00 d0       	rcall	.+0      	; 0x3a28 <_ZNK6String11lastIndexOfERKS_j+0x1e>
    3a28:	cd b7       	in	r28, 0x3d	; 61
    3a2a:	de b7       	in	r29, 0x3e	; 62
    3a2c:	6c 01       	movw	r12, r24
    3a2e:	7b 01       	movw	r14, r22
  // check for empty strings
  if ( s2._length == 0 || s2._length - 1 > fromIndex || fromIndex >= _length )
    3a30:	db 01       	movw	r26, r22
    3a32:	14 96       	adiw	r26, 0x04	; 4
    3a34:	8d 91       	ld	r24, X+
    3a36:	9c 91       	ld	r25, X
    3a38:	15 97       	sbiw	r26, 0x05	; 5
    3a3a:	00 97       	sbiw	r24, 0x00	; 0
    3a3c:	b1 f4       	brne	.+44     	; 0x3a6a <_ZNK6String11lastIndexOfERKS_j+0x60>
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    3a3e:	0f ef       	ldi	r16, 0xFF	; 255
    3a40:	1f ef       	ldi	r17, 0xFF	; 255
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    return i;
  }
  return -1;
}
    3a42:	c8 01       	movw	r24, r16
    3a44:	26 96       	adiw	r28, 0x06	; 6
    3a46:	0f b6       	in	r0, 0x3f	; 63
    3a48:	f8 94       	cli
    3a4a:	de bf       	out	0x3e, r29	; 62
    3a4c:	0f be       	out	0x3f, r0	; 63
    3a4e:	cd bf       	out	0x3d, r28	; 61
    3a50:	cf 91       	pop	r28
    3a52:	df 91       	pop	r29
    3a54:	1f 91       	pop	r17
    3a56:	0f 91       	pop	r16
    3a58:	ff 90       	pop	r15
    3a5a:	ef 90       	pop	r14
    3a5c:	df 90       	pop	r13
    3a5e:	cf 90       	pop	r12
    3a60:	bf 90       	pop	r11
    3a62:	af 90       	pop	r10
    3a64:	9f 90       	pop	r9
    3a66:	8f 90       	pop	r8
    3a68:	08 95       	ret
}

int String::lastIndexOf( const String &s2, unsigned int fromIndex ) const
{
  // check for empty strings
  if ( s2._length == 0 || s2._length - 1 > fromIndex || fromIndex >= _length )
    3a6a:	01 97       	sbiw	r24, 0x01	; 1
    3a6c:	48 17       	cp	r20, r24
    3a6e:	59 07       	cpc	r21, r25
    3a70:	30 f3       	brcs	.-52     	; 0x3a3e <_ZNK6String11lastIndexOfERKS_j+0x34>
    3a72:	f6 01       	movw	r30, r12
    3a74:	84 81       	ldd	r24, Z+4	; 0x04
    3a76:	95 81       	ldd	r25, Z+5	; 0x05
    3a78:	48 17       	cp	r20, r24
    3a7a:	59 07       	cpc	r21, r25
    3a7c:	00 f7       	brcc	.-64     	; 0x3a3e <_ZNK6String11lastIndexOfERKS_j+0x34>
}

char String::operator[]( unsigned int index ) const
{
  // need to check for valid index, to do later
  return _buffer[ index ];
    3a7e:	ed 91       	ld	r30, X+
    3a80:	fc 91       	ld	r31, X
    3a82:	11 97       	sbiw	r26, 0x01	; 1
    3a84:	90 80       	ld	r9, Z
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    3a86:	8a 01       	movw	r16, r20
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    3a88:	5e 01       	movw	r10, r28
    3a8a:	08 94       	sec
    3a8c:	a1 1c       	adc	r10, r1
    3a8e:	b1 1c       	adc	r11, r1
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    3a90:	02 c0       	rjmp	.+4      	; 0x3a96 <_ZNK6String11lastIndexOfERKS_j+0x8c>
    3a92:	01 50       	subi	r16, 0x01	; 1
    3a94:	10 40       	sbci	r17, 0x00	; 0
    3a96:	17 fd       	sbrc	r17, 7
    3a98:	d2 cf       	rjmp	.-92     	; 0x3a3e <_ZNK6String11lastIndexOfERKS_j+0x34>
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    3a9a:	d6 01       	movw	r26, r12
    3a9c:	ed 91       	ld	r30, X+
    3a9e:	fc 91       	ld	r31, X
    3aa0:	11 97       	sbiw	r26, 0x01	; 1
    3aa2:	e0 0f       	add	r30, r16
    3aa4:	f1 1f       	adc	r31, r17
    3aa6:	80 81       	ld	r24, Z
    3aa8:	89 15       	cp	r24, r9
    3aaa:	99 f7       	brne	.-26     	; 0x3a92 <_ZNK6String11lastIndexOfERKS_j+0x88>
    3aac:	f7 01       	movw	r30, r14
    3aae:	24 81       	ldd	r18, Z+4	; 0x04
    3ab0:	35 81       	ldd	r19, Z+5	; 0x05
    3ab2:	20 0f       	add	r18, r16
    3ab4:	31 1f       	adc	r19, r17
    3ab6:	c5 01       	movw	r24, r10
    3ab8:	b6 01       	movw	r22, r12
    3aba:	a8 01       	movw	r20, r16
    3abc:	0e 94 c5 1c 	call	0x398a	; 0x398a <_ZNK6String9substringEjj>
    3ac0:	c5 01       	movw	r24, r10
    3ac2:	b7 01       	movw	r22, r14
    3ac4:	0e 94 39 18 	call	0x3072	; 0x3072 <_ZNK6String6equalsERKS_>
    3ac8:	88 2e       	mov	r8, r24
    3aca:	89 81       	ldd	r24, Y+1	; 0x01
    3acc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ace:	0e 94 8b 2c 	call	0x5916	; 0x5916 <free>
    3ad2:	88 20       	and	r8, r8
    3ad4:	09 f0       	breq	.+2      	; 0x3ad8 <_ZNK6String11lastIndexOfERKS_j+0xce>
    3ad6:	b5 cf       	rjmp	.-150    	; 0x3a42 <_ZNK6String11lastIndexOfERKS_j+0x38>
    3ad8:	1c 82       	std	Y+4, r1	; 0x04
    3ada:	1b 82       	std	Y+3, r1	; 0x03
    3adc:	1e 82       	std	Y+6, r1	; 0x06
    3ade:	1d 82       	std	Y+5, r1	; 0x05
    3ae0:	d8 cf       	rjmp	.-80     	; 0x3a92 <_ZNK6String11lastIndexOfERKS_j+0x88>

00003ae2 <_ZNK6String11lastIndexOfERKS_>:
  return temp - _buffer;
}

int String::lastIndexOf( const String &s2 ) const
{
  return lastIndexOf( s2, _length - s2._length );
    3ae2:	fc 01       	movw	r30, r24
    3ae4:	44 81       	ldd	r20, Z+4	; 0x04
    3ae6:	55 81       	ldd	r21, Z+5	; 0x05
    3ae8:	fb 01       	movw	r30, r22
    3aea:	24 81       	ldd	r18, Z+4	; 0x04
    3aec:	35 81       	ldd	r19, Z+5	; 0x05
    3aee:	42 1b       	sub	r20, r18
    3af0:	53 0b       	sbc	r21, r19
    3af2:	0e 94 05 1d 	call	0x3a0a	; 0x3a0a <_ZNK6String11lastIndexOfERKS_j>
}
    3af6:	08 95       	ret

00003af8 <_ZNK6String4trimEv>:
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
  return temp;
}

String String::trim() const
{
    3af8:	6f 92       	push	r6
    3afa:	7f 92       	push	r7
    3afc:	8f 92       	push	r8
    3afe:	9f 92       	push	r9
    3b00:	af 92       	push	r10
    3b02:	bf 92       	push	r11
    3b04:	cf 92       	push	r12
    3b06:	df 92       	push	r13
    3b08:	ef 92       	push	r14
    3b0a:	ff 92       	push	r15
    3b0c:	0f 93       	push	r16
    3b0e:	1f 93       	push	r17
    3b10:	df 93       	push	r29
    3b12:	cf 93       	push	r28
    3b14:	00 d0       	rcall	.+0      	; 0x3b16 <_ZNK6String4trimEv+0x1e>
    3b16:	00 d0       	rcall	.+0      	; 0x3b18 <_ZNK6String4trimEv+0x20>
    3b18:	00 d0       	rcall	.+0      	; 0x3b1a <_ZNK6String4trimEv+0x22>
    3b1a:	cd b7       	in	r28, 0x3d	; 61
    3b1c:	de b7       	in	r29, 0x3e	; 62
    3b1e:	8c 01       	movw	r16, r24
    3b20:	6b 01       	movw	r12, r22
  if ( _buffer == NULL ) return *this;
    3b22:	fb 01       	movw	r30, r22
    3b24:	60 81       	ld	r22, Z
    3b26:	71 81       	ldd	r23, Z+1	; 0x01
    3b28:	61 15       	cp	r22, r1
    3b2a:	71 05       	cpc	r23, r1
    3b2c:	09 f4       	brne	.+2      	; 0x3b30 <_ZNK6String4trimEv+0x38>
    3b2e:	63 c0       	rjmp	.+198    	; 0x3bf6 <_ZNK6String4trimEv+0xfe>
  String temp = _buffer;
    3b30:	5e 01       	movw	r10, r28
    3b32:	08 94       	sec
    3b34:	a1 1c       	adc	r10, r1
    3b36:	b1 1c       	adc	r11, r1
    3b38:	c5 01       	movw	r24, r10
    3b3a:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_ZN6StringC1EPKc>
  unsigned int i,j;

  for ( i = 0; i < _length; i++ )
    3b3e:	f6 01       	movw	r30, r12
    3b40:	84 80       	ldd	r8, Z+4	; 0x04
    3b42:	95 80       	ldd	r9, Z+5	; 0x05
    3b44:	81 14       	cp	r8, r1
    3b46:	91 04       	cpc	r9, r1
    3b48:	09 f4       	brne	.+2      	; 0x3b4c <_ZNK6String4trimEv+0x54>
    3b4a:	59 c0       	rjmp	.+178    	; 0x3bfe <_ZNK6String4trimEv+0x106>
    3b4c:	f6 01       	movw	r30, r12
    3b4e:	60 80       	ld	r6, Z
    3b50:	71 80       	ldd	r7, Z+1	; 0x01
    3b52:	ee 24       	eor	r14, r14
    3b54:	ff 24       	eor	r15, r15
    3b56:	06 c0       	rjmp	.+12     	; 0x3b64 <_ZNK6String4trimEv+0x6c>
    3b58:	08 94       	sec
    3b5a:	e1 1c       	adc	r14, r1
    3b5c:	f1 1c       	adc	r15, r1
    3b5e:	e8 14       	cp	r14, r8
    3b60:	f9 04       	cpc	r15, r9
    3b62:	48 f4       	brcc	.+18     	; 0x3b76 <_ZNK6String4trimEv+0x7e>
  {
    if ( !isspace(_buffer[i]) )
    3b64:	f3 01       	movw	r30, r6
    3b66:	ee 0d       	add	r30, r14
    3b68:	ff 1d       	adc	r31, r15
    3b6a:	80 81       	ld	r24, Z
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <isspace>
    3b72:	00 97       	sbiw	r24, 0x00	; 0
    3b74:	89 f7       	brne	.-30     	; 0x3b58 <_ZNK6String4trimEv+0x60>
      break;
  }

  for ( j = temp._length - 1; j > i; j-- )
    3b76:	8d 80       	ldd	r8, Y+5	; 0x05
    3b78:	9e 80       	ldd	r9, Y+6	; 0x06
    3b7a:	08 94       	sec
    3b7c:	81 08       	sbc	r8, r1
    3b7e:	91 08       	sbc	r9, r1
    3b80:	e8 14       	cp	r14, r8
    3b82:	f9 04       	cpc	r15, r9
    3b84:	b0 f4       	brcc	.+44     	; 0x3bb2 <_ZNK6String4trimEv+0xba>
    3b86:	f6 01       	movw	r30, r12
    3b88:	c0 80       	ld	r12, Z
    3b8a:	d1 80       	ldd	r13, Z+1	; 0x01
    3b8c:	c8 0c       	add	r12, r8
    3b8e:	d9 1c       	adc	r13, r9
    3b90:	09 c0       	rjmp	.+18     	; 0x3ba4 <_ZNK6String4trimEv+0xac>
    3b92:	08 94       	sec
    3b94:	81 08       	sbc	r8, r1
    3b96:	91 08       	sbc	r9, r1
    3b98:	08 94       	sec
    3b9a:	c1 08       	sbc	r12, r1
    3b9c:	d1 08       	sbc	r13, r1
    3b9e:	e8 14       	cp	r14, r8
    3ba0:	f9 04       	cpc	r15, r9
    3ba2:	38 f4       	brcc	.+14     	; 0x3bb2 <_ZNK6String4trimEv+0xba>
  {
    if ( !isspace(_buffer[j]) )
    3ba4:	f6 01       	movw	r30, r12
    3ba6:	80 81       	ld	r24, Z
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <isspace>
    3bae:	00 97       	sbiw	r24, 0x00	; 0
    3bb0:	81 f7       	brne	.-32     	; 0x3b92 <_ZNK6String4trimEv+0x9a>
      break;
  }

  return temp.substring( i, j + 1);
    3bb2:	94 01       	movw	r18, r8
    3bb4:	2f 5f       	subi	r18, 0xFF	; 255
    3bb6:	3f 4f       	sbci	r19, 0xFF	; 255
    3bb8:	c8 01       	movw	r24, r16
    3bba:	b5 01       	movw	r22, r10
    3bbc:	a7 01       	movw	r20, r14
    3bbe:	0e 94 c5 1c 	call	0x398a	; 0x398a <_ZNK6String9substringEjj>
    3bc2:	89 81       	ldd	r24, Y+1	; 0x01
    3bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc6:	0e 94 8b 2c 	call	0x5916	; 0x5916 <free>
}
    3bca:	c8 01       	movw	r24, r16
    3bcc:	26 96       	adiw	r28, 0x06	; 6
    3bce:	0f b6       	in	r0, 0x3f	; 63
    3bd0:	f8 94       	cli
    3bd2:	de bf       	out	0x3e, r29	; 62
    3bd4:	0f be       	out	0x3f, r0	; 63
    3bd6:	cd bf       	out	0x3d, r28	; 61
    3bd8:	cf 91       	pop	r28
    3bda:	df 91       	pop	r29
    3bdc:	1f 91       	pop	r17
    3bde:	0f 91       	pop	r16
    3be0:	ff 90       	pop	r15
    3be2:	ef 90       	pop	r14
    3be4:	df 90       	pop	r13
    3be6:	cf 90       	pop	r12
    3be8:	bf 90       	pop	r11
    3bea:	af 90       	pop	r10
    3bec:	9f 90       	pop	r9
    3bee:	8f 90       	pop	r8
    3bf0:	7f 90       	pop	r7
    3bf2:	6f 90       	pop	r6
    3bf4:	08 95       	ret
  return temp;
}

String String::trim() const
{
  if ( _buffer == NULL ) return *this;
    3bf6:	b6 01       	movw	r22, r12
    3bf8:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <_ZN6StringC1ERKS_>
    3bfc:	e6 cf       	rjmp	.-52     	; 0x3bca <_ZNK6String4trimEv+0xd2>
  String temp = _buffer;
  unsigned int i,j;

  for ( i = 0; i < _length; i++ )
    3bfe:	ee 24       	eor	r14, r14
    3c00:	ff 24       	eor	r15, r15
    3c02:	b9 cf       	rjmp	.-142    	; 0x3b76 <_ZNK6String4trimEv+0x7e>

00003c04 <_ZN6String7replaceERKS_S1_>:

  return theReturn;
}

String String::replace( const String& match, const String& replace )
{
    3c04:	2f 92       	push	r2
    3c06:	3f 92       	push	r3
    3c08:	4f 92       	push	r4
    3c0a:	5f 92       	push	r5
    3c0c:	6f 92       	push	r6
    3c0e:	7f 92       	push	r7
    3c10:	8f 92       	push	r8
    3c12:	9f 92       	push	r9
    3c14:	af 92       	push	r10
    3c16:	bf 92       	push	r11
    3c18:	cf 92       	push	r12
    3c1a:	df 92       	push	r13
    3c1c:	ef 92       	push	r14
    3c1e:	ff 92       	push	r15
    3c20:	0f 93       	push	r16
    3c22:	1f 93       	push	r17
    3c24:	df 93       	push	r29
    3c26:	cf 93       	push	r28
    3c28:	cd b7       	in	r28, 0x3d	; 61
    3c2a:	de b7       	in	r29, 0x3e	; 62
    3c2c:	68 97       	sbiw	r28, 0x18	; 24
    3c2e:	0f b6       	in	r0, 0x3f	; 63
    3c30:	f8 94       	cli
    3c32:	de bf       	out	0x3e, r29	; 62
    3c34:	0f be       	out	0x3f, r0	; 63
    3c36:	cd bf       	out	0x3d, r28	; 61
    3c38:	1c 01       	movw	r2, r24
    3c3a:	fb 01       	movw	r30, r22
    3c3c:	5a 01       	movw	r10, r20
    3c3e:	29 01       	movw	r4, r18
  if ( _buffer == NULL ) return *this;
    3c40:	60 81       	ld	r22, Z
    3c42:	71 81       	ldd	r23, Z+1	; 0x01
    3c44:	61 15       	cp	r22, r1
    3c46:	71 05       	cpc	r23, r1
    3c48:	09 f4       	brne	.+2      	; 0x3c4c <_ZN6String7replaceERKS_S1_+0x48>
    3c4a:	7e c0       	rjmp	.+252    	; 0x3d48 <_ZN6String7replaceERKS_S1_+0x144>
  String temp = _buffer, newString;
    3c4c:	8e 01       	movw	r16, r28
    3c4e:	0f 5f       	subi	r16, 0xFF	; 255
    3c50:	1f 4f       	sbci	r17, 0xFF	; 255
    3c52:	c8 01       	movw	r24, r16
    3c54:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_ZN6StringC1EPKc>
    3c58:	47 e0       	ldi	r20, 0x07	; 7
    3c5a:	c4 2e       	mov	r12, r20
    3c5c:	d1 2c       	mov	r13, r1
    3c5e:	cc 0e       	add	r12, r28
    3c60:	dd 1e       	adc	r13, r29
    3c62:	c6 01       	movw	r24, r12
    3c64:	6b ef       	ldi	r22, 0xFB	; 251
    3c66:	71 e0       	ldi	r23, 0x01	; 1
    3c68:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_ZN6StringC1EPKc>

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
  {
    newString += temp.substring( 0, loc );
    3c6c:	3d e0       	ldi	r19, 0x0D	; 13
    3c6e:	83 2e       	mov	r8, r19
    3c70:	91 2c       	mov	r9, r1
    3c72:	8c 0e       	add	r8, r28
    3c74:	9d 1e       	adc	r9, r29
    newString += replace;
    temp = temp.substring( loc + match._length );
    3c76:	23 e1       	ldi	r18, 0x13	; 19
    3c78:	62 2e       	mov	r6, r18
    3c7a:	71 2c       	mov	r7, r1
    3c7c:	6c 0e       	add	r6, r28
    3c7e:	7d 1e       	adc	r7, r29
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer, newString;

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
    3c80:	2c c0       	rjmp	.+88     	; 0x3cda <_ZN6String7replaceERKS_S1_+0xd6>
  {
    newString += temp.substring( 0, loc );
    3c82:	c4 01       	movw	r24, r8
    3c84:	b8 01       	movw	r22, r16
    3c86:	40 e0       	ldi	r20, 0x00	; 0
    3c88:	50 e0       	ldi	r21, 0x00	; 0
    3c8a:	97 01       	movw	r18, r14
    3c8c:	0e 94 c5 1c 	call	0x398a	; 0x398a <_ZNK6String9substringEjj>
    3c90:	c6 01       	movw	r24, r12
    3c92:	b4 01       	movw	r22, r8
    3c94:	0e 94 03 19 	call	0x3206	; 0x3206 <_ZN6StringpLERKS_>
    3c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c9c:	0e 94 8b 2c 	call	0x5916	; 0x5916 <free>
    3ca0:	18 8a       	std	Y+16, r1	; 0x10
    3ca2:	1f 86       	std	Y+15, r1	; 0x0f
    3ca4:	1a 8a       	std	Y+18, r1	; 0x12
    3ca6:	19 8a       	std	Y+17, r1	; 0x11
    newString += replace;
    3ca8:	c6 01       	movw	r24, r12
    3caa:	b2 01       	movw	r22, r4
    3cac:	0e 94 03 19 	call	0x3206	; 0x3206 <_ZN6StringpLERKS_>
    temp = temp.substring( loc + match._length );
    3cb0:	f5 01       	movw	r30, r10
    3cb2:	44 81       	ldd	r20, Z+4	; 0x04
    3cb4:	55 81       	ldd	r21, Z+5	; 0x05
    3cb6:	4e 0d       	add	r20, r14
    3cb8:	5f 1d       	adc	r21, r15
    3cba:	c3 01       	movw	r24, r6
    3cbc:	b8 01       	movw	r22, r16
    3cbe:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <_ZNK6String9substringEj>
    3cc2:	c8 01       	movw	r24, r16
    3cc4:	b3 01       	movw	r22, r6
    3cc6:	0e 94 44 19 	call	0x3288	; 0x3288 <_ZN6StringaSERKS_>
    3cca:	8b 89       	ldd	r24, Y+19	; 0x13
    3ccc:	9c 89       	ldd	r25, Y+20	; 0x14
    3cce:	0e 94 8b 2c 	call	0x5916	; 0x5916 <free>
    3cd2:	1e 8a       	std	Y+22, r1	; 0x16
    3cd4:	1d 8a       	std	Y+21, r1	; 0x15
    3cd6:	18 8e       	std	Y+24, r1	; 0x18
    3cd8:	1f 8a       	std	Y+23, r1	; 0x17
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer, newString;

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
    3cda:	c8 01       	movw	r24, r16
    3cdc:	b5 01       	movw	r22, r10
    3cde:	0e 94 13 18 	call	0x3026	; 0x3026 <_ZNK6String7indexOfERKS_>
    3ce2:	7c 01       	movw	r14, r24
    3ce4:	ff ef       	ldi	r31, 0xFF	; 255
    3ce6:	8f 3f       	cpi	r24, 0xFF	; 255
    3ce8:	9f 07       	cpc	r25, r31
    3cea:	59 f6       	brne	.-106    	; 0x3c82 <_ZN6String7replaceERKS_S1_+0x7e>
  {
    newString += temp.substring( 0, loc );
    newString += replace;
    temp = temp.substring( loc + match._length );
  }
  newString += temp;  
    3cec:	c6 01       	movw	r24, r12
    3cee:	b8 01       	movw	r22, r16
    3cf0:	0e 94 03 19 	call	0x3206	; 0x3206 <_ZN6StringpLERKS_>
  return newString;
    3cf4:	c1 01       	movw	r24, r2
    3cf6:	b6 01       	movw	r22, r12
    3cf8:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <_ZN6StringC1ERKS_>
    3cfc:	8f 81       	ldd	r24, Y+7	; 0x07
    3cfe:	98 85       	ldd	r25, Y+8	; 0x08
    3d00:	0e 94 8b 2c 	call	0x5916	; 0x5916 <free>
    3d04:	1a 86       	std	Y+10, r1	; 0x0a
    3d06:	19 86       	std	Y+9, r1	; 0x09
    3d08:	1c 86       	std	Y+12, r1	; 0x0c
    3d0a:	1b 86       	std	Y+11, r1	; 0x0b
    3d0c:	89 81       	ldd	r24, Y+1	; 0x01
    3d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d10:	0e 94 8b 2c 	call	0x5916	; 0x5916 <free>
}
    3d14:	c1 01       	movw	r24, r2
    3d16:	68 96       	adiw	r28, 0x18	; 24
    3d18:	0f b6       	in	r0, 0x3f	; 63
    3d1a:	f8 94       	cli
    3d1c:	de bf       	out	0x3e, r29	; 62
    3d1e:	0f be       	out	0x3f, r0	; 63
    3d20:	cd bf       	out	0x3d, r28	; 61
    3d22:	cf 91       	pop	r28
    3d24:	df 91       	pop	r29
    3d26:	1f 91       	pop	r17
    3d28:	0f 91       	pop	r16
    3d2a:	ff 90       	pop	r15
    3d2c:	ef 90       	pop	r14
    3d2e:	df 90       	pop	r13
    3d30:	cf 90       	pop	r12
    3d32:	bf 90       	pop	r11
    3d34:	af 90       	pop	r10
    3d36:	9f 90       	pop	r9
    3d38:	8f 90       	pop	r8
    3d3a:	7f 90       	pop	r7
    3d3c:	6f 90       	pop	r6
    3d3e:	5f 90       	pop	r5
    3d40:	4f 90       	pop	r4
    3d42:	3f 90       	pop	r3
    3d44:	2f 90       	pop	r2
    3d46:	08 95       	ret
  return theReturn;
}

String String::replace( const String& match, const String& replace )
{
  if ( _buffer == NULL ) return *this;
    3d48:	bf 01       	movw	r22, r30
    3d4a:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <_ZN6StringC1ERKS_>
    3d4e:	e2 cf       	rjmp	.-60     	; 0x3d14 <_ZN6String7replaceERKS_S1_+0x110>

00003d50 <_ZN6String7replaceEcc>:

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}

String String::replace( char findChar, char replaceChar )
{
    3d50:	cf 92       	push	r12
    3d52:	df 92       	push	r13
    3d54:	ef 92       	push	r14
    3d56:	ff 92       	push	r15
    3d58:	0f 93       	push	r16
    3d5a:	1f 93       	push	r17
    3d5c:	df 93       	push	r29
    3d5e:	cf 93       	push	r28
    3d60:	00 d0       	rcall	.+0      	; 0x3d62 <_ZN6String7replaceEcc+0x12>
    3d62:	00 d0       	rcall	.+0      	; 0x3d64 <_ZN6String7replaceEcc+0x14>
    3d64:	00 d0       	rcall	.+0      	; 0x3d66 <_ZN6String7replaceEcc+0x16>
    3d66:	cd b7       	in	r28, 0x3d	; 61
    3d68:	de b7       	in	r29, 0x3e	; 62
    3d6a:	8c 01       	movw	r16, r24
    3d6c:	fb 01       	movw	r30, r22
    3d6e:	f4 2e       	mov	r15, r20
    3d70:	e2 2e       	mov	r14, r18
  if ( _buffer == NULL ) return *this;
    3d72:	60 81       	ld	r22, Z
    3d74:	71 81       	ldd	r23, Z+1	; 0x01
    3d76:	61 15       	cp	r22, r1
    3d78:	71 05       	cpc	r23, r1
    3d7a:	51 f1       	breq	.+84     	; 0x3dd0 <_ZN6String7replaceEcc+0x80>
  String theReturn = _buffer;
    3d7c:	6e 01       	movw	r12, r28
    3d7e:	08 94       	sec
    3d80:	c1 1c       	adc	r12, r1
    3d82:	d1 1c       	adc	r13, r1
    3d84:	c6 01       	movw	r24, r12
    3d86:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_ZN6StringC1EPKc>
  char* temp = theReturn._buffer;
    3d8a:	89 81       	ldd	r24, Y+1	; 0x01
    3d8c:	9a 81       	ldd	r25, Y+2	; 0x02
  while( (temp = strchr( temp, findChar )) != 0 )
    3d8e:	01 c0       	rjmp	.+2      	; 0x3d92 <_ZN6String7replaceEcc+0x42>
    *temp = replaceChar;
    3d90:	e0 82       	st	Z, r14
String String::replace( char findChar, char replaceChar )
{
  if ( _buffer == NULL ) return *this;
  String theReturn = _buffer;
  char* temp = theReturn._buffer;
  while( (temp = strchr( temp, findChar )) != 0 )
    3d92:	6f 2d       	mov	r22, r15
    3d94:	70 e0       	ldi	r23, 0x00	; 0
    3d96:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <strchr>
    3d9a:	fc 01       	movw	r30, r24
    3d9c:	00 97       	sbiw	r24, 0x00	; 0
    3d9e:	c1 f7       	brne	.-16     	; 0x3d90 <_ZN6String7replaceEcc+0x40>
    *temp = replaceChar;

  return theReturn;
    3da0:	c8 01       	movw	r24, r16
    3da2:	b6 01       	movw	r22, r12
    3da4:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <_ZN6StringC1ERKS_>
    3da8:	89 81       	ldd	r24, Y+1	; 0x01
    3daa:	9a 81       	ldd	r25, Y+2	; 0x02
    3dac:	0e 94 8b 2c 	call	0x5916	; 0x5916 <free>
}
    3db0:	c8 01       	movw	r24, r16
    3db2:	26 96       	adiw	r28, 0x06	; 6
    3db4:	0f b6       	in	r0, 0x3f	; 63
    3db6:	f8 94       	cli
    3db8:	de bf       	out	0x3e, r29	; 62
    3dba:	0f be       	out	0x3f, r0	; 63
    3dbc:	cd bf       	out	0x3d, r28	; 61
    3dbe:	cf 91       	pop	r28
    3dc0:	df 91       	pop	r29
    3dc2:	1f 91       	pop	r17
    3dc4:	0f 91       	pop	r16
    3dc6:	ff 90       	pop	r15
    3dc8:	ef 90       	pop	r14
    3dca:	df 90       	pop	r13
    3dcc:	cf 90       	pop	r12
    3dce:	08 95       	ret
  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}

String String::replace( char findChar, char replaceChar )
{
  if ( _buffer == NULL ) return *this;
    3dd0:	bf 01       	movw	r22, r30
    3dd2:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <_ZN6StringC1ERKS_>
    3dd6:	ec cf       	rjmp	.-40     	; 0x3db0 <_ZN6String7replaceEcc+0x60>

00003dd8 <_ZN6StringC2EPKc>:
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    3dd8:	0f 93       	push	r16
    3dda:	1f 93       	push	r17
    3ddc:	cf 93       	push	r28
    3dde:	df 93       	push	r29
    3de0:	ec 01       	movw	r28, r24
    3de2:	8b 01       	movw	r16, r22
{
  if ( value == NULL )
    3de4:	61 15       	cp	r22, r1
    3de6:	71 05       	cpc	r23, r1
    3de8:	21 f1       	breq	.+72     	; 0x3e32 <_ZN6StringC2EPKc+0x5a>
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    3dea:	fb 01       	movw	r30, r22
    3dec:	01 90       	ld	r0, Z+
    3dee:	00 20       	and	r0, r0
    3df0:	e9 f7       	brne	.-6      	; 0x3dec <_ZN6StringC2EPKc+0x14>
    3df2:	31 97       	sbiw	r30, 0x01	; 1
    3df4:	e6 1b       	sub	r30, r22
    3df6:	f7 0b       	sbc	r31, r23
    3df8:	cf 01       	movw	r24, r30
    3dfa:	01 96       	adiw	r24, 0x01	; 1
{
  if ( value == NULL )
    value = "";
  getBuffer( _length = strlen( value ) );
    3dfc:	fd 83       	std	Y+5, r31	; 0x05
    3dfe:	ec 83       	std	Y+4, r30	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3e00:	fb 83       	std	Y+3, r31	; 0x03
    3e02:	ea 83       	std	Y+2, r30	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3e04:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <malloc>
    3e08:	99 83       	std	Y+1, r25	; 0x01
    3e0a:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3e0c:	00 97       	sbiw	r24, 0x00	; 0
    3e0e:	41 f0       	breq	.+16     	; 0x3e20 <_ZN6StringC2EPKc+0x48>
  if ( _buffer != NULL )
    strcpy( _buffer, value );
    3e10:	b8 01       	movw	r22, r16
    3e12:	0e 94 61 2e 	call	0x5cc2	; 0x5cc2 <strcpy>
}
    3e16:	df 91       	pop	r29
    3e18:	cf 91       	pop	r28
    3e1a:	1f 91       	pop	r17
    3e1c:	0f 91       	pop	r16
    3e1e:	08 95       	ret
    3e20:	1b 82       	std	Y+3, r1	; 0x03
    3e22:	1a 82       	std	Y+2, r1	; 0x02
    3e24:	1d 82       	std	Y+5, r1	; 0x05
    3e26:	1c 82       	std	Y+4, r1	; 0x04
    3e28:	df 91       	pop	r29
    3e2a:	cf 91       	pop	r28
    3e2c:	1f 91       	pop	r17
    3e2e:	0f 91       	pop	r16
    3e30:	08 95       	ret
#include "WString.h"


String::String( const char *value )
{
  if ( value == NULL )
    3e32:	81 e0       	ldi	r24, 0x01	; 1
    3e34:	90 e0       	ldi	r25, 0x00	; 0
    3e36:	e0 e0       	ldi	r30, 0x00	; 0
    3e38:	f0 e0       	ldi	r31, 0x00	; 0
    3e3a:	0b ef       	ldi	r16, 0xFB	; 251
    3e3c:	11 e0       	ldi	r17, 0x01	; 1
    3e3e:	de cf       	rjmp	.-68     	; 0x3dfc <_ZN6StringC2EPKc+0x24>

00003e40 <_ZN6StringC1Eli>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const long value, const int base )
    3e40:	ef 92       	push	r14
    3e42:	ff 92       	push	r15
    3e44:	0f 93       	push	r16
    3e46:	1f 93       	push	r17
    3e48:	df 93       	push	r29
    3e4a:	cf 93       	push	r28
    3e4c:	cd b7       	in	r28, 0x3d	; 61
    3e4e:	de b7       	in	r29, 0x3e	; 62
    3e50:	a1 97       	sbiw	r28, 0x21	; 33
    3e52:	0f b6       	in	r0, 0x3f	; 63
    3e54:	f8 94       	cli
    3e56:	de bf       	out	0x3e, r29	; 62
    3e58:	0f be       	out	0x3f, r0	; 63
    3e5a:	cd bf       	out	0x3d, r28	; 61
    3e5c:	7c 01       	movw	r14, r24
    3e5e:	cb 01       	movw	r24, r22
    3e60:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ltoa(value, buf, base);
    3e62:	8e 01       	movw	r16, r28
    3e64:	0f 5f       	subi	r16, 0xFF	; 255
    3e66:	1f 4f       	sbci	r17, 0xFF	; 255
    3e68:	a8 01       	movw	r20, r16
    3e6a:	0e 94 cb 2e 	call	0x5d96	; 0x5d96 <ltoa>
  getBuffer( _length = strlen(buf) );
    3e6e:	f8 01       	movw	r30, r16
    3e70:	01 90       	ld	r0, Z+
    3e72:	00 20       	and	r0, r0
    3e74:	e9 f7       	brne	.-6      	; 0x3e70 <_ZN6StringC1Eli+0x30>
    3e76:	cf 01       	movw	r24, r30
    3e78:	01 97       	sbiw	r24, 0x01	; 1
    3e7a:	80 1b       	sub	r24, r16
    3e7c:	91 0b       	sbc	r25, r17
    3e7e:	f7 01       	movw	r30, r14
    3e80:	95 83       	std	Z+5, r25	; 0x05
    3e82:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3e84:	93 83       	std	Z+3, r25	; 0x03
    3e86:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3e88:	01 96       	adiw	r24, 0x01	; 1
    3e8a:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <malloc>
    3e8e:	f7 01       	movw	r30, r14
    3e90:	91 83       	std	Z+1, r25	; 0x01
    3e92:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3e94:	00 97       	sbiw	r24, 0x00	; 0
    3e96:	81 f0       	breq	.+32     	; 0x3eb8 <_ZN6StringC1Eli+0x78>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    3e98:	b8 01       	movw	r22, r16
    3e9a:	0e 94 61 2e 	call	0x5cc2	; 0x5cc2 <strcpy>
}
    3e9e:	a1 96       	adiw	r28, 0x21	; 33
    3ea0:	0f b6       	in	r0, 0x3f	; 63
    3ea2:	f8 94       	cli
    3ea4:	de bf       	out	0x3e, r29	; 62
    3ea6:	0f be       	out	0x3f, r0	; 63
    3ea8:	cd bf       	out	0x3d, r28	; 61
    3eaa:	cf 91       	pop	r28
    3eac:	df 91       	pop	r29
    3eae:	1f 91       	pop	r17
    3eb0:	0f 91       	pop	r16
    3eb2:	ff 90       	pop	r15
    3eb4:	ef 90       	pop	r14
    3eb6:	08 95       	ret
    3eb8:	13 82       	std	Z+3, r1	; 0x03
    3eba:	12 82       	std	Z+2, r1	; 0x02
    3ebc:	15 82       	std	Z+5, r1	; 0x05
    3ebe:	14 82       	std	Z+4, r1	; 0x04
    3ec0:	ee cf       	rjmp	.-36     	; 0x3e9e <_ZN6StringC1Eli+0x5e>

00003ec2 <_ZN6StringC2Eli>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const long value, const int base )
    3ec2:	ef 92       	push	r14
    3ec4:	ff 92       	push	r15
    3ec6:	0f 93       	push	r16
    3ec8:	1f 93       	push	r17
    3eca:	df 93       	push	r29
    3ecc:	cf 93       	push	r28
    3ece:	cd b7       	in	r28, 0x3d	; 61
    3ed0:	de b7       	in	r29, 0x3e	; 62
    3ed2:	a1 97       	sbiw	r28, 0x21	; 33
    3ed4:	0f b6       	in	r0, 0x3f	; 63
    3ed6:	f8 94       	cli
    3ed8:	de bf       	out	0x3e, r29	; 62
    3eda:	0f be       	out	0x3f, r0	; 63
    3edc:	cd bf       	out	0x3d, r28	; 61
    3ede:	7c 01       	movw	r14, r24
    3ee0:	cb 01       	movw	r24, r22
    3ee2:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ltoa(value, buf, base);
    3ee4:	8e 01       	movw	r16, r28
    3ee6:	0f 5f       	subi	r16, 0xFF	; 255
    3ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    3eea:	a8 01       	movw	r20, r16
    3eec:	0e 94 cb 2e 	call	0x5d96	; 0x5d96 <ltoa>
  getBuffer( _length = strlen(buf) );
    3ef0:	f8 01       	movw	r30, r16
    3ef2:	01 90       	ld	r0, Z+
    3ef4:	00 20       	and	r0, r0
    3ef6:	e9 f7       	brne	.-6      	; 0x3ef2 <_ZN6StringC2Eli+0x30>
    3ef8:	cf 01       	movw	r24, r30
    3efa:	01 97       	sbiw	r24, 0x01	; 1
    3efc:	80 1b       	sub	r24, r16
    3efe:	91 0b       	sbc	r25, r17
    3f00:	f7 01       	movw	r30, r14
    3f02:	95 83       	std	Z+5, r25	; 0x05
    3f04:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3f06:	93 83       	std	Z+3, r25	; 0x03
    3f08:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3f0a:	01 96       	adiw	r24, 0x01	; 1
    3f0c:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <malloc>
    3f10:	f7 01       	movw	r30, r14
    3f12:	91 83       	std	Z+1, r25	; 0x01
    3f14:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3f16:	00 97       	sbiw	r24, 0x00	; 0
    3f18:	81 f0       	breq	.+32     	; 0x3f3a <_ZN6StringC2Eli+0x78>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    3f1a:	b8 01       	movw	r22, r16
    3f1c:	0e 94 61 2e 	call	0x5cc2	; 0x5cc2 <strcpy>
}
    3f20:	a1 96       	adiw	r28, 0x21	; 33
    3f22:	0f b6       	in	r0, 0x3f	; 63
    3f24:	f8 94       	cli
    3f26:	de bf       	out	0x3e, r29	; 62
    3f28:	0f be       	out	0x3f, r0	; 63
    3f2a:	cd bf       	out	0x3d, r28	; 61
    3f2c:	cf 91       	pop	r28
    3f2e:	df 91       	pop	r29
    3f30:	1f 91       	pop	r17
    3f32:	0f 91       	pop	r16
    3f34:	ff 90       	pop	r15
    3f36:	ef 90       	pop	r14
    3f38:	08 95       	ret
    3f3a:	13 82       	std	Z+3, r1	; 0x03
    3f3c:	12 82       	std	Z+2, r1	; 0x02
    3f3e:	15 82       	std	Z+5, r1	; 0x05
    3f40:	14 82       	std	Z+4, r1	; 0x04
    3f42:	ee cf       	rjmp	.-36     	; 0x3f20 <_ZN6StringC2Eli+0x5e>

00003f44 <_ZN6StringC1Eii>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const int value, const int base )
    3f44:	ef 92       	push	r14
    3f46:	ff 92       	push	r15
    3f48:	0f 93       	push	r16
    3f4a:	1f 93       	push	r17
    3f4c:	df 93       	push	r29
    3f4e:	cf 93       	push	r28
    3f50:	cd b7       	in	r28, 0x3d	; 61
    3f52:	de b7       	in	r29, 0x3e	; 62
    3f54:	a1 97       	sbiw	r28, 0x21	; 33
    3f56:	0f b6       	in	r0, 0x3f	; 63
    3f58:	f8 94       	cli
    3f5a:	de bf       	out	0x3e, r29	; 62
    3f5c:	0f be       	out	0x3f, r0	; 63
    3f5e:	cd bf       	out	0x3d, r28	; 61
    3f60:	7c 01       	movw	r14, r24
    3f62:	cb 01       	movw	r24, r22
{
  char buf[33];   
  itoa((signed long)value, buf, base);
    3f64:	8e 01       	movw	r16, r28
    3f66:	0f 5f       	subi	r16, 0xFF	; 255
    3f68:	1f 4f       	sbci	r17, 0xFF	; 255
    3f6a:	b8 01       	movw	r22, r16
    3f6c:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <itoa>
  getBuffer( _length = strlen(buf) );
    3f70:	f8 01       	movw	r30, r16
    3f72:	01 90       	ld	r0, Z+
    3f74:	00 20       	and	r0, r0
    3f76:	e9 f7       	brne	.-6      	; 0x3f72 <_ZN6StringC1Eii+0x2e>
    3f78:	cf 01       	movw	r24, r30
    3f7a:	01 97       	sbiw	r24, 0x01	; 1
    3f7c:	80 1b       	sub	r24, r16
    3f7e:	91 0b       	sbc	r25, r17
    3f80:	f7 01       	movw	r30, r14
    3f82:	95 83       	std	Z+5, r25	; 0x05
    3f84:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3f86:	93 83       	std	Z+3, r25	; 0x03
    3f88:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3f8a:	01 96       	adiw	r24, 0x01	; 1
    3f8c:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <malloc>
    3f90:	f7 01       	movw	r30, r14
    3f92:	91 83       	std	Z+1, r25	; 0x01
    3f94:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3f96:	00 97       	sbiw	r24, 0x00	; 0
    3f98:	81 f0       	breq	.+32     	; 0x3fba <_ZN6StringC1Eii+0x76>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    3f9a:	b8 01       	movw	r22, r16
    3f9c:	0e 94 61 2e 	call	0x5cc2	; 0x5cc2 <strcpy>
}
    3fa0:	a1 96       	adiw	r28, 0x21	; 33
    3fa2:	0f b6       	in	r0, 0x3f	; 63
    3fa4:	f8 94       	cli
    3fa6:	de bf       	out	0x3e, r29	; 62
    3fa8:	0f be       	out	0x3f, r0	; 63
    3faa:	cd bf       	out	0x3d, r28	; 61
    3fac:	cf 91       	pop	r28
    3fae:	df 91       	pop	r29
    3fb0:	1f 91       	pop	r17
    3fb2:	0f 91       	pop	r16
    3fb4:	ff 90       	pop	r15
    3fb6:	ef 90       	pop	r14
    3fb8:	08 95       	ret
    3fba:	13 82       	std	Z+3, r1	; 0x03
    3fbc:	12 82       	std	Z+2, r1	; 0x02
    3fbe:	15 82       	std	Z+5, r1	; 0x05
    3fc0:	14 82       	std	Z+4, r1	; 0x04
    3fc2:	ee cf       	rjmp	.-36     	; 0x3fa0 <_ZN6StringC1Eii+0x5c>

00003fc4 <_ZN6StringC2Eii>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const int value, const int base )
    3fc4:	ef 92       	push	r14
    3fc6:	ff 92       	push	r15
    3fc8:	0f 93       	push	r16
    3fca:	1f 93       	push	r17
    3fcc:	df 93       	push	r29
    3fce:	cf 93       	push	r28
    3fd0:	cd b7       	in	r28, 0x3d	; 61
    3fd2:	de b7       	in	r29, 0x3e	; 62
    3fd4:	a1 97       	sbiw	r28, 0x21	; 33
    3fd6:	0f b6       	in	r0, 0x3f	; 63
    3fd8:	f8 94       	cli
    3fda:	de bf       	out	0x3e, r29	; 62
    3fdc:	0f be       	out	0x3f, r0	; 63
    3fde:	cd bf       	out	0x3d, r28	; 61
    3fe0:	7c 01       	movw	r14, r24
    3fe2:	cb 01       	movw	r24, r22
{
  char buf[33];   
  itoa((signed long)value, buf, base);
    3fe4:	8e 01       	movw	r16, r28
    3fe6:	0f 5f       	subi	r16, 0xFF	; 255
    3fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    3fea:	b8 01       	movw	r22, r16
    3fec:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <itoa>
  getBuffer( _length = strlen(buf) );
    3ff0:	f8 01       	movw	r30, r16
    3ff2:	01 90       	ld	r0, Z+
    3ff4:	00 20       	and	r0, r0
    3ff6:	e9 f7       	brne	.-6      	; 0x3ff2 <_ZN6StringC2Eii+0x2e>
    3ff8:	cf 01       	movw	r24, r30
    3ffa:	01 97       	sbiw	r24, 0x01	; 1
    3ffc:	80 1b       	sub	r24, r16
    3ffe:	91 0b       	sbc	r25, r17
    4000:	f7 01       	movw	r30, r14
    4002:	95 83       	std	Z+5, r25	; 0x05
    4004:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    4006:	93 83       	std	Z+3, r25	; 0x03
    4008:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    400a:	01 96       	adiw	r24, 0x01	; 1
    400c:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <malloc>
    4010:	f7 01       	movw	r30, r14
    4012:	91 83       	std	Z+1, r25	; 0x01
    4014:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    4016:	00 97       	sbiw	r24, 0x00	; 0
    4018:	81 f0       	breq	.+32     	; 0x403a <_ZN6StringC2Eii+0x76>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    401a:	b8 01       	movw	r22, r16
    401c:	0e 94 61 2e 	call	0x5cc2	; 0x5cc2 <strcpy>
}
    4020:	a1 96       	adiw	r28, 0x21	; 33
    4022:	0f b6       	in	r0, 0x3f	; 63
    4024:	f8 94       	cli
    4026:	de bf       	out	0x3e, r29	; 62
    4028:	0f be       	out	0x3f, r0	; 63
    402a:	cd bf       	out	0x3d, r28	; 61
    402c:	cf 91       	pop	r28
    402e:	df 91       	pop	r29
    4030:	1f 91       	pop	r17
    4032:	0f 91       	pop	r16
    4034:	ff 90       	pop	r15
    4036:	ef 90       	pop	r14
    4038:	08 95       	ret
    403a:	13 82       	std	Z+3, r1	; 0x03
    403c:	12 82       	std	Z+2, r1	; 0x02
    403e:	15 82       	std	Z+5, r1	; 0x05
    4040:	14 82       	std	Z+4, r1	; 0x04
    4042:	ee cf       	rjmp	.-36     	; 0x4020 <_ZN6StringC2Eii+0x5c>

00004044 <__cxa_pure_virtual>:
#include "cplusplushelper.h"
#include <stdlib.h>

void __cxa_pure_virtual(void)
{

    4044:	08 95       	ret

00004046 <__cxa_guard_acquire>:
}

int __cxa_guard_acquire(__guard *g)
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	30 e0       	ldi	r19, 0x00	; 0
    404a:	fc 01       	movw	r30, r24
    404c:	80 81       	ld	r24, Z
    404e:	88 23       	and	r24, r24
    4050:	11 f4       	brne	.+4      	; 0x4056 <__cxa_guard_acquire+0x10>
    4052:	21 e0       	ldi	r18, 0x01	; 1
    4054:	30 e0       	ldi	r19, 0x00	; 0
{
	return !*(char *)(g);
    4056:	c9 01       	movw	r24, r18
    4058:	08 95       	ret

0000405a <__cxa_guard_release>:
}
 
void __cxa_guard_release (__guard *g)
{
    405a:	21 e0       	ldi	r18, 0x01	; 1
    405c:	fc 01       	movw	r30, r24
    405e:	20 83       	st	Z, r18
	*(char *)g = 1;
    4060:	08 95       	ret

00004062 <__cxa_guard_abort>:
}
 
void __cxa_guard_abort (__guard *)
{

    4062:	08 95       	ret

00004064 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    4064:	10 92 57 04 	sts	0x0457, r1

  #if defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega328P__)
    // activate internal pull-ups for twi
    // as per note from atmega8 manual pg167
    sbi(PORTC, 4);
    4068:	44 9a       	sbi	0x08, 4	; 8
    sbi(PORTC, 5);
    406a:	45 9a       	sbi	0x08, 5	; 8
    sbi(PORTD, 0);
    sbi(PORTD, 1);
  #endif

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    406c:	e9 eb       	ldi	r30, 0xB9	; 185
    406e:	f0 e0       	ldi	r31, 0x00	; 0
    4070:	80 81       	ld	r24, Z
    4072:	8e 7f       	andi	r24, 0xFE	; 254
    4074:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    4076:	80 81       	ld	r24, Z
    4078:	8d 7f       	andi	r24, 0xFD	; 253
    407a:	80 83       	st	Z, r24
  TWBR = ((CPU_FREQ / TWI_FREQ) - 16) / 2;
    407c:	88 e4       	ldi	r24, 0x48	; 72
    407e:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    4082:	85 e4       	ldi	r24, 0x45	; 69
    4084:	80 93 bc 00 	sts	0x00BC, r24
}
    4088:	08 95       	ret

0000408a <twi_setAddress>:
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
    408a:	88 0f       	add	r24, r24
    408c:	80 93 ba 00 	sts	0x00BA, r24
}
    4090:	08 95       	ret

00004092 <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4092:	41 32       	cpi	r20, 0x21	; 33
    4094:	a0 f5       	brcc	.+104    	; 0x40fe <twi_readFrom+0x6c>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    4096:	90 91 57 04 	lds	r25, 0x0457
    409a:	99 23       	and	r25, r25
    409c:	e1 f7       	brne	.-8      	; 0x4096 <twi_readFrom+0x4>
    continue;
  }
  twi_state = TWI_MRX;
    409e:	91 e0       	ldi	r25, 0x01	; 1
    40a0:	90 93 57 04 	sts	0x0457, r25
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    40a4:	9f ef       	ldi	r25, 0xFF	; 255
    40a6:	90 93 56 04 	sts	0x0456, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    40aa:	10 92 34 04 	sts	0x0434, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    40ae:	94 2f       	mov	r25, r20
    40b0:	91 50       	subi	r25, 0x01	; 1
    40b2:	90 93 35 04 	sts	0x0435, r25
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
  twi_slarw |= address << 1;
    40b6:	88 0f       	add	r24, r24
    40b8:	81 60       	ori	r24, 0x01	; 1
    40ba:	80 93 33 04 	sts	0x0433, r24

  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    40be:	85 ee       	ldi	r24, 0xE5	; 229
    40c0:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    40c4:	80 91 57 04 	lds	r24, 0x0457
    40c8:	81 30       	cpi	r24, 0x01	; 1
    40ca:	e1 f3       	breq	.-8      	; 0x40c4 <twi_readFrom+0x32>
    continue;
  }

  if (twi_masterBufferIndex < length)
    40cc:	80 91 34 04 	lds	r24, 0x0434
    40d0:	84 17       	cp	r24, r20
    40d2:	90 f0       	brcs	.+36     	; 0x40f8 <twi_readFrom+0x66>
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    40d4:	44 23       	and	r20, r20
    40d6:	71 f0       	breq	.+28     	; 0x40f4 <twi_readFrom+0x62>
    40d8:	20 e0       	ldi	r18, 0x00	; 0
    40da:	30 e0       	ldi	r19, 0x00	; 0
    data[i] = twi_masterBuffer[i];
    40dc:	fb 01       	movw	r30, r22
    40de:	e2 0f       	add	r30, r18
    40e0:	f3 1f       	adc	r31, r19
    40e2:	d9 01       	movw	r26, r18
    40e4:	aa 5c       	subi	r26, 0xCA	; 202
    40e6:	bb 4f       	sbci	r27, 0xFB	; 251
    40e8:	9c 91       	ld	r25, X
    40ea:	90 83       	st	Z, r25
    40ec:	2f 5f       	subi	r18, 0xFF	; 255
    40ee:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    40f0:	24 17       	cp	r18, r20
    40f2:	a0 f3       	brcs	.-24     	; 0x40dc <twi_readFrom+0x4a>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    40f4:	84 2f       	mov	r24, r20
    40f6:	08 95       	ret
  while(TWI_MRX == twi_state){
    continue;
  }

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;
    40f8:	40 91 34 04 	lds	r20, 0x0434
    40fc:	eb cf       	rjmp	.-42     	; 0x40d4 <twi_readFrom+0x42>
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    40fe:	40 e0       	ldi	r20, 0x00	; 0
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    4100:	84 2f       	mov	r24, r20
    4102:	08 95       	ret

00004104 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait)
{
    4104:	cf 93       	push	r28
    4106:	df 93       	push	r29
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4108:	41 32       	cpi	r20, 0x21	; 33
    410a:	08 f0       	brcs	.+2      	; 0x410e <twi_writeTo+0xa>
    410c:	43 c0       	rjmp	.+134    	; 0x4194 <twi_writeTo+0x90>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    410e:	90 91 57 04 	lds	r25, 0x0457
    4112:	99 23       	and	r25, r25
    4114:	e1 f7       	brne	.-8      	; 0x410e <twi_writeTo+0xa>
    continue;
  }
  twi_state = TWI_MTX;
    4116:	92 e0       	ldi	r25, 0x02	; 2
    4118:	90 93 57 04 	sts	0x0457, r25
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    411c:	9f ef       	ldi	r25, 0xFF	; 255
    411e:	90 93 56 04 	sts	0x0456, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    4122:	10 92 34 04 	sts	0x0434, r1
  twi_masterBufferLength = length;
    4126:	40 93 35 04 	sts	0x0435, r20
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    412a:	44 23       	and	r20, r20
    412c:	69 f0       	breq	.+26     	; 0x4148 <twi_writeTo+0x44>
    412e:	e0 e0       	ldi	r30, 0x00	; 0
    4130:	f0 e0       	ldi	r31, 0x00	; 0
    twi_masterBuffer[i] = data[i];
    4132:	df 01       	movw	r26, r30
    4134:	aa 5c       	subi	r26, 0xCA	; 202
    4136:	bb 4f       	sbci	r27, 0xFB	; 251
    4138:	eb 01       	movw	r28, r22
    413a:	ce 0f       	add	r28, r30
    413c:	df 1f       	adc	r29, r31
    413e:	98 81       	ld	r25, Y
    4140:	9c 93       	st	X, r25
    4142:	31 96       	adiw	r30, 0x01	; 1
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    4144:	e4 17       	cp	r30, r20
    4146:	a8 f3       	brcs	.-22     	; 0x4132 <twi_writeTo+0x2e>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
  twi_slarw |= address << 1;
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	88 0f       	add	r24, r24
    414c:	99 1f       	adc	r25, r25
    414e:	80 93 33 04 	sts	0x0433, r24
  
  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    4152:	85 ee       	ldi	r24, 0xE5	; 229
    4154:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    4158:	22 23       	and	r18, r18
    415a:	81 f4       	brne	.+32     	; 0x417c <twi_writeTo+0x78>
    continue;
  }
  
  if (twi_error == 0xFF)
    415c:	80 91 56 04 	lds	r24, 0x0456
    4160:	8f 3f       	cpi	r24, 0xFF	; 255
    4162:	a1 f0       	breq	.+40     	; 0x418c <twi_writeTo+0x88>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    4164:	80 91 56 04 	lds	r24, 0x0456
    4168:	80 32       	cpi	r24, 0x20	; 32
    416a:	c1 f0       	breq	.+48     	; 0x419c <twi_writeTo+0x98>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    416c:	80 91 56 04 	lds	r24, 0x0456
    4170:	80 33       	cpi	r24, 0x30	; 48
    4172:	b1 f0       	breq	.+44     	; 0x41a0 <twi_writeTo+0x9c>
    4174:	84 e0       	ldi	r24, 0x04	; 4
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    4176:	df 91       	pop	r29
    4178:	cf 91       	pop	r28
    417a:	08 95       	ret
  
  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    417c:	80 91 57 04 	lds	r24, 0x0457
    4180:	82 30       	cpi	r24, 0x02	; 2
    4182:	e1 f3       	breq	.-8      	; 0x417c <twi_writeTo+0x78>
    continue;
  }
  
  if (twi_error == 0xFF)
    4184:	80 91 56 04 	lds	r24, 0x0456
    4188:	8f 3f       	cpi	r24, 0xFF	; 255
    418a:	61 f7       	brne	.-40     	; 0x4164 <twi_writeTo+0x60>
    418c:	80 e0       	ldi	r24, 0x00	; 0
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    418e:	df 91       	pop	r29
    4190:	cf 91       	pop	r28
    4192:	08 95       	ret
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4194:	81 e0       	ldi	r24, 0x01	; 1
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    4196:	df 91       	pop	r29
    4198:	cf 91       	pop	r28
    419a:	08 95       	ret
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    419c:	82 e0       	ldi	r24, 0x02	; 2
    419e:	eb cf       	rjmp	.-42     	; 0x4176 <twi_writeTo+0x72>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    41a0:	83 e0       	ldi	r24, 0x03	; 3
    41a2:	e9 cf       	rjmp	.-46     	; 0x4176 <twi_writeTo+0x72>

000041a4 <twi_transmit>:
uint8_t twi_transmit(uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    41a4:	61 32       	cpi	r22, 0x21	; 33
    41a6:	d0 f4       	brcc	.+52     	; 0x41dc <twi_transmit+0x38>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    41a8:	20 91 57 04 	lds	r18, 0x0457
    41ac:	24 30       	cpi	r18, 0x04	; 4
    41ae:	11 f0       	breq	.+4      	; 0x41b4 <twi_transmit+0x10>
    41b0:	82 e0       	ldi	r24, 0x02	; 2
    41b2:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    41b4:	60 93 7c 04 	sts	0x047C, r22
  for(i = 0; i < length; ++i){
    41b8:	66 23       	and	r22, r22
    41ba:	71 f0       	breq	.+28     	; 0x41d8 <twi_transmit+0x34>
    41bc:	20 e0       	ldi	r18, 0x00	; 0
    41be:	30 e0       	ldi	r19, 0x00	; 0
    twi_txBuffer[i] = data[i];
    41c0:	f9 01       	movw	r30, r18
    41c2:	e1 58       	subi	r30, 0x81	; 129
    41c4:	fb 4f       	sbci	r31, 0xFB	; 251
    41c6:	dc 01       	movw	r26, r24
    41c8:	a2 0f       	add	r26, r18
    41ca:	b3 1f       	adc	r27, r19
    41cc:	4c 91       	ld	r20, X
    41ce:	40 83       	st	Z, r20
    41d0:	2f 5f       	subi	r18, 0xFF	; 255
    41d2:	3f 4f       	sbci	r19, 0xFF	; 255
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    41d4:	26 17       	cp	r18, r22
    41d6:	a0 f3       	brcs	.-24     	; 0x41c0 <twi_transmit+0x1c>
    41d8:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    41da:	08 95       	ret
uint8_t twi_transmit(uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    41dc:	81 e0       	ldi	r24, 0x01	; 1
    41de:	08 95       	ret

000041e0 <twi_attachSlaveRxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    41e0:	90 93 7a 04 	sts	0x047A, r25
    41e4:	80 93 79 04 	sts	0x0479, r24
}
    41e8:	08 95       	ret

000041ea <twi_attachSlaveTxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    41ea:	90 93 7e 04 	sts	0x047E, r25
    41ee:	80 93 7d 04 	sts	0x047D, r24
}
    41f2:	08 95       	ret

000041f4 <twi_reply>:
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    41f4:	88 23       	and	r24, r24
    41f6:	21 f4       	brne	.+8      	; 0x4200 <twi_reply+0xc>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    41f8:	85 e8       	ldi	r24, 0x85	; 133
    41fa:	80 93 bc 00 	sts	0x00BC, r24
    41fe:	08 95       	ret
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4200:	85 ec       	ldi	r24, 0xC5	; 197
    4202:	80 93 bc 00 	sts	0x00BC, r24
    4206:	08 95       	ret

00004208 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4208:	85 ed       	ldi	r24, 0xD5	; 213
    420a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    420e:	80 91 bc 00 	lds	r24, 0x00BC
    4212:	84 fd       	sbrc	r24, 4
    4214:	fc cf       	rjmp	.-8      	; 0x420e <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    4216:	10 92 57 04 	sts	0x0457, r1
}
    421a:	08 95       	ret

0000421c <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    421c:	85 ec       	ldi	r24, 0xC5	; 197
    421e:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    4222:	10 92 57 04 	sts	0x0457, r1
}
    4226:	08 95       	ret

00004228 <__vector_24>:

SIGNAL(TWI_vect)
{
    4228:	1f 92       	push	r1
    422a:	0f 92       	push	r0
    422c:	0f b6       	in	r0, 0x3f	; 63
    422e:	0f 92       	push	r0
    4230:	11 24       	eor	r1, r1
    4232:	2f 93       	push	r18
    4234:	3f 93       	push	r19
    4236:	4f 93       	push	r20
    4238:	5f 93       	push	r21
    423a:	6f 93       	push	r22
    423c:	7f 93       	push	r23
    423e:	8f 93       	push	r24
    4240:	9f 93       	push	r25
    4242:	af 93       	push	r26
    4244:	bf 93       	push	r27
    4246:	ef 93       	push	r30
    4248:	ff 93       	push	r31
  switch(TW_STATUS){
    424a:	80 91 b9 00 	lds	r24, 0x00B9
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	a0 e0       	ldi	r26, 0x00	; 0
    4252:	b0 e0       	ldi	r27, 0x00	; 0
    4254:	88 7f       	andi	r24, 0xF8	; 248
    4256:	90 70       	andi	r25, 0x00	; 0
    4258:	a0 70       	andi	r26, 0x00	; 0
    425a:	b0 70       	andi	r27, 0x00	; 0
    425c:	89 3c       	cpi	r24, 0xC9	; 201
    425e:	91 05       	cpc	r25, r1
    4260:	98 f5       	brcc	.+102    	; 0x42c8 <__vector_24+0xa0>
    4262:	8c 5c       	subi	r24, 0xCC	; 204
    4264:	9f 4f       	sbci	r25, 0xFF	; 255
    4266:	fc 01       	movw	r30, r24
    4268:	ee 0f       	add	r30, r30
    426a:	ff 1f       	adc	r31, r31
    426c:	05 90       	lpm	r0, Z+
    426e:	f4 91       	lpm	r31, Z+
    4270:	e0 2d       	mov	r30, r0
    4272:	09 94       	ijmp
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4274:	84 e0       	ldi	r24, 0x04	; 4
    4276:	80 93 57 04 	sts	0x0457, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    427a:	10 92 7b 04 	sts	0x047B, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    427e:	10 92 7c 04 	sts	0x047C, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4282:	e0 91 7d 04 	lds	r30, 0x047D
    4286:	f0 91 7e 04 	lds	r31, 0x047E
    428a:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    428c:	80 91 7c 04 	lds	r24, 0x047C
    4290:	88 23       	and	r24, r24
    4292:	29 f4       	brne	.+10     	; 0x429e <__vector_24+0x76>
        twi_txBufferLength = 1;
    4294:	81 e0       	ldi	r24, 0x01	; 1
    4296:	80 93 7c 04 	sts	0x047C, r24
        twi_txBuffer[0] = 0x00;
    429a:	10 92 7f 04 	sts	0x047F, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    429e:	80 91 7b 04 	lds	r24, 0x047B
    42a2:	e8 2f       	mov	r30, r24
    42a4:	f0 e0       	ldi	r31, 0x00	; 0
    42a6:	e1 58       	subi	r30, 0x81	; 129
    42a8:	fb 4f       	sbci	r31, 0xFB	; 251
    42aa:	90 81       	ld	r25, Z
    42ac:	90 93 bb 00 	sts	0x00BB, r25
    42b0:	8f 5f       	subi	r24, 0xFF	; 255
    42b2:	80 93 7b 04 	sts	0x047B, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    42b6:	90 91 7b 04 	lds	r25, 0x047B
    42ba:	80 91 7c 04 	lds	r24, 0x047C
    42be:	98 17       	cp	r25, r24
    42c0:	c8 f4       	brcc	.+50     	; 0x42f4 <__vector_24+0xcc>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    42c2:	85 ec       	ldi	r24, 0xC5	; 197
    42c4:	80 93 bc 00 	sts	0x00BC, r24
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    42c8:	ff 91       	pop	r31
    42ca:	ef 91       	pop	r30
    42cc:	bf 91       	pop	r27
    42ce:	af 91       	pop	r26
    42d0:	9f 91       	pop	r25
    42d2:	8f 91       	pop	r24
    42d4:	7f 91       	pop	r23
    42d6:	6f 91       	pop	r22
    42d8:	5f 91       	pop	r21
    42da:	4f 91       	pop	r20
    42dc:	3f 91       	pop	r19
    42de:	2f 91       	pop	r18
    42e0:	0f 90       	pop	r0
    42e2:	0f be       	out	0x3f, r0	; 63
    42e4:	0f 90       	pop	r0
    42e6:	1f 90       	pop	r1
    42e8:	18 95       	reti
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    42ea:	80 91 58 04 	lds	r24, 0x0458
    42ee:	80 32       	cpi	r24, 0x20	; 32
    42f0:	08 f4       	brcc	.+2      	; 0x42f4 <__vector_24+0xcc>
    42f2:	9c c0       	rjmp	.+312    	; 0x442c <__vector_24+0x204>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    42f4:	85 e8       	ldi	r24, 0x85	; 133
    42f6:	80 93 bc 00 	sts	0x00BC, r24
    42fa:	e6 cf       	rjmp	.-52     	; 0x42c8 <__vector_24+0xa0>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    42fc:	80 91 34 04 	lds	r24, 0x0434
    4300:	90 91 bb 00 	lds	r25, 0x00BB
    4304:	e8 2f       	mov	r30, r24
    4306:	f0 e0       	ldi	r31, 0x00	; 0
    4308:	ea 5c       	subi	r30, 0xCA	; 202
    430a:	fb 4f       	sbci	r31, 0xFB	; 251
    430c:	90 83       	st	Z, r25
    430e:	8f 5f       	subi	r24, 0xFF	; 255
    4310:	80 93 34 04 	sts	0x0434, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4314:	90 91 34 04 	lds	r25, 0x0434
    4318:	80 91 35 04 	lds	r24, 0x0435
    431c:	98 17       	cp	r25, r24
    431e:	50 f7       	brcc	.-44     	; 0x42f4 <__vector_24+0xcc>
    4320:	d0 cf       	rjmp	.-96     	; 0x42c2 <__vector_24+0x9a>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4322:	80 91 34 04 	lds	r24, 0x0434
    4326:	90 91 bb 00 	lds	r25, 0x00BB
    432a:	e8 2f       	mov	r30, r24
    432c:	f0 e0       	ldi	r31, 0x00	; 0
    432e:	ea 5c       	subi	r30, 0xCA	; 202
    4330:	fb 4f       	sbci	r31, 0xFB	; 251
    4332:	90 83       	st	Z, r25
    4334:	8f 5f       	subi	r24, 0xFF	; 255
    4336:	80 93 34 04 	sts	0x0434, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    433a:	85 ed       	ldi	r24, 0xD5	; 213
    433c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4340:	80 91 bc 00 	lds	r24, 0x00BC
    4344:	84 fd       	sbrc	r24, 4
    4346:	fc cf       	rjmp	.-8      	; 0x4340 <__vector_24+0x118>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    4348:	10 92 57 04 	sts	0x0457, r1
    434c:	bd cf       	rjmp	.-134    	; 0x42c8 <__vector_24+0xa0>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    434e:	85 ec       	ldi	r24, 0xC5	; 197
    4350:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    4354:	10 92 57 04 	sts	0x0457, r1
      break;
    4358:	b7 cf       	rjmp	.-146    	; 0x42c8 <__vector_24+0xa0>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    435a:	83 e0       	ldi	r24, 0x03	; 3
    435c:	80 93 57 04 	sts	0x0457, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4360:	10 92 58 04 	sts	0x0458, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4364:	85 ec       	ldi	r24, 0xC5	; 197
    4366:	80 93 bc 00 	sts	0x00BC, r24
    436a:	ae cf       	rjmp	.-164    	; 0x42c8 <__vector_24+0xa0>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    436c:	10 92 56 04 	sts	0x0456, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4370:	85 ed       	ldi	r24, 0xD5	; 213
    4372:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4376:	80 91 bc 00 	lds	r24, 0x00BC
    437a:	84 fd       	sbrc	r24, 4
    437c:	fc cf       	rjmp	.-8      	; 0x4376 <__vector_24+0x14e>
    437e:	e4 cf       	rjmp	.-56     	; 0x4348 <__vector_24+0x120>
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4380:	80 91 33 04 	lds	r24, 0x0433
    4384:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4388:	85 ec       	ldi	r24, 0xC5	; 197
    438a:	80 93 bc 00 	sts	0x00BC, r24
    438e:	9c cf       	rjmp	.-200    	; 0x42c8 <__vector_24+0xa0>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4390:	90 91 34 04 	lds	r25, 0x0434
    4394:	80 91 35 04 	lds	r24, 0x0435
    4398:	98 17       	cp	r25, r24
    439a:	08 f4       	brcc	.+2      	; 0x439e <__vector_24+0x176>
    439c:	5e c0       	rjmp	.+188    	; 0x445a <__vector_24+0x232>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    439e:	85 ed       	ldi	r24, 0xD5	; 213
    43a0:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    43a4:	80 91 bc 00 	lds	r24, 0x00BC
    43a8:	84 fd       	sbrc	r24, 4
    43aa:	fc cf       	rjmp	.-8      	; 0x43a4 <__vector_24+0x17c>
    43ac:	cd cf       	rjmp	.-102    	; 0x4348 <__vector_24+0x120>
      }else{
        twi_stop();
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    43ae:	80 e2       	ldi	r24, 0x20	; 32
    43b0:	80 93 56 04 	sts	0x0456, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    43b4:	85 ed       	ldi	r24, 0xD5	; 213
    43b6:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    43ba:	80 91 bc 00 	lds	r24, 0x00BC
    43be:	84 fd       	sbrc	r24, 4
    43c0:	fc cf       	rjmp	.-8      	; 0x43ba <__vector_24+0x192>
    43c2:	c2 cf       	rjmp	.-124    	; 0x4348 <__vector_24+0x120>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    43c4:	80 91 58 04 	lds	r24, 0x0458
    43c8:	80 32       	cpi	r24, 0x20	; 32
    43ca:	08 f4       	brcc	.+2      	; 0x43ce <__vector_24+0x1a6>
    43cc:	3f c0       	rjmp	.+126    	; 0x444c <__vector_24+0x224>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    43ce:	85 ed       	ldi	r24, 0xD5	; 213
    43d0:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    43d4:	80 91 bc 00 	lds	r24, 0x00BC
    43d8:	84 fd       	sbrc	r24, 4
    43da:	fc cf       	rjmp	.-8      	; 0x43d4 <__vector_24+0x1ac>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    43dc:	10 92 57 04 	sts	0x0457, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    43e0:	60 91 58 04 	lds	r22, 0x0458
    43e4:	e0 91 79 04 	lds	r30, 0x0479
    43e8:	f0 91 7a 04 	lds	r31, 0x047A
    43ec:	89 e5       	ldi	r24, 0x59	; 89
    43ee:	94 e0       	ldi	r25, 0x04	; 4
    43f0:	70 e0       	ldi	r23, 0x00	; 0
    43f2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    43f4:	10 92 58 04 	sts	0x0458, r1
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    43f8:	85 ec       	ldi	r24, 0xC5	; 197
    43fa:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    43fe:	10 92 57 04 	sts	0x0457, r1
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      break;
    4402:	62 cf       	rjmp	.-316    	; 0x42c8 <__vector_24+0xa0>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4404:	80 e3       	ldi	r24, 0x30	; 48
    4406:	80 93 56 04 	sts	0x0456, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    440a:	85 ed       	ldi	r24, 0xD5	; 213
    440c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4410:	80 91 bc 00 	lds	r24, 0x00BC
    4414:	84 fd       	sbrc	r24, 4
    4416:	fc cf       	rjmp	.-8      	; 0x4410 <__vector_24+0x1e8>
    4418:	97 cf       	rjmp	.-210    	; 0x4348 <__vector_24+0x120>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    441a:	88 e3       	ldi	r24, 0x38	; 56
    441c:	80 93 56 04 	sts	0x0456, r24
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    4420:	85 ec       	ldi	r24, 0xC5	; 197
    4422:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    4426:	10 92 57 04 	sts	0x0457, r1
    442a:	4e cf       	rjmp	.-356    	; 0x42c8 <__vector_24+0xa0>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    442c:	80 91 58 04 	lds	r24, 0x0458
    4430:	90 91 bb 00 	lds	r25, 0x00BB
    4434:	e8 2f       	mov	r30, r24
    4436:	f0 e0       	ldi	r31, 0x00	; 0
    4438:	e7 5a       	subi	r30, 0xA7	; 167
    443a:	fb 4f       	sbci	r31, 0xFB	; 251
    443c:	90 83       	st	Z, r25
    443e:	8f 5f       	subi	r24, 0xFF	; 255
    4440:	80 93 58 04 	sts	0x0458, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4444:	85 ec       	ldi	r24, 0xC5	; 197
    4446:	80 93 bc 00 	sts	0x00BC, r24
    444a:	3e cf       	rjmp	.-388    	; 0x42c8 <__vector_24+0xa0>
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    444c:	e0 91 58 04 	lds	r30, 0x0458
    4450:	f0 e0       	ldi	r31, 0x00	; 0
    4452:	e7 5a       	subi	r30, 0xA7	; 167
    4454:	fb 4f       	sbci	r31, 0xFB	; 251
    4456:	10 82       	st	Z, r1
    4458:	ba cf       	rjmp	.-140    	; 0x43ce <__vector_24+0x1a6>
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    445a:	80 91 34 04 	lds	r24, 0x0434
    445e:	e8 2f       	mov	r30, r24
    4460:	f0 e0       	ldi	r31, 0x00	; 0
    4462:	ea 5c       	subi	r30, 0xCA	; 202
    4464:	fb 4f       	sbci	r31, 0xFB	; 251
    4466:	90 81       	ld	r25, Z
    4468:	90 93 bb 00 	sts	0x00BB, r25
    446c:	8f 5f       	subi	r24, 0xFF	; 255
    446e:	80 93 34 04 	sts	0x0434, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4472:	85 ec       	ldi	r24, 0xC5	; 197
    4474:	80 93 bc 00 	sts	0x00BC, r24
    4478:	27 cf       	rjmp	.-434    	; 0x42c8 <__vector_24+0xa0>

0000447a <__fixunssfsi>:
    447a:	ef 92       	push	r14
    447c:	ff 92       	push	r15
    447e:	0f 93       	push	r16
    4480:	1f 93       	push	r17
    4482:	7b 01       	movw	r14, r22
    4484:	8c 01       	movw	r16, r24
    4486:	20 e0       	ldi	r18, 0x00	; 0
    4488:	30 e0       	ldi	r19, 0x00	; 0
    448a:	40 e0       	ldi	r20, 0x00	; 0
    448c:	5f e4       	ldi	r21, 0x4F	; 79
    448e:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <__gesf2>
    4492:	88 23       	and	r24, r24
    4494:	8c f0       	brlt	.+34     	; 0x44b8 <__fixunssfsi+0x3e>
    4496:	c8 01       	movw	r24, r16
    4498:	b7 01       	movw	r22, r14
    449a:	20 e0       	ldi	r18, 0x00	; 0
    449c:	30 e0       	ldi	r19, 0x00	; 0
    449e:	40 e0       	ldi	r20, 0x00	; 0
    44a0:	5f e4       	ldi	r21, 0x4F	; 79
    44a2:	0e 94 b9 23 	call	0x4772	; 0x4772 <__subsf3>
    44a6:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__fixsfsi>
    44aa:	9b 01       	movw	r18, r22
    44ac:	ac 01       	movw	r20, r24
    44ae:	20 50       	subi	r18, 0x00	; 0
    44b0:	30 40       	sbci	r19, 0x00	; 0
    44b2:	40 40       	sbci	r20, 0x00	; 0
    44b4:	50 48       	sbci	r21, 0x80	; 128
    44b6:	06 c0       	rjmp	.+12     	; 0x44c4 <__fixunssfsi+0x4a>
    44b8:	c8 01       	movw	r24, r16
    44ba:	b7 01       	movw	r22, r14
    44bc:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__fixsfsi>
    44c0:	9b 01       	movw	r18, r22
    44c2:	ac 01       	movw	r20, r24
    44c4:	b9 01       	movw	r22, r18
    44c6:	ca 01       	movw	r24, r20
    44c8:	1f 91       	pop	r17
    44ca:	0f 91       	pop	r16
    44cc:	ff 90       	pop	r15
    44ce:	ef 90       	pop	r14
    44d0:	08 95       	ret

000044d2 <_fpadd_parts>:
    44d2:	a0 e0       	ldi	r26, 0x00	; 0
    44d4:	b0 e0       	ldi	r27, 0x00	; 0
    44d6:	ef e6       	ldi	r30, 0x6F	; 111
    44d8:	f2 e2       	ldi	r31, 0x22	; 34
    44da:	0c 94 85 29 	jmp	0x530a	; 0x530a <__prologue_saves__+0x4>
    44de:	fc 01       	movw	r30, r24
    44e0:	2b 01       	movw	r4, r22
    44e2:	ea 01       	movw	r28, r20
    44e4:	80 81       	ld	r24, Z
    44e6:	82 30       	cpi	r24, 0x02	; 2
    44e8:	08 f4       	brcc	.+2      	; 0x44ec <_fpadd_parts+0x1a>
    44ea:	3d c1       	rjmp	.+634    	; 0x4766 <_fpadd_parts+0x294>
    44ec:	db 01       	movw	r26, r22
    44ee:	9c 91       	ld	r25, X
    44f0:	92 30       	cpi	r25, 0x02	; 2
    44f2:	08 f4       	brcc	.+2      	; 0x44f6 <_fpadd_parts+0x24>
    44f4:	37 c1       	rjmp	.+622    	; 0x4764 <_fpadd_parts+0x292>
    44f6:	84 30       	cpi	r24, 0x04	; 4
    44f8:	69 f4       	brne	.+26     	; 0x4514 <_fpadd_parts+0x42>
    44fa:	94 30       	cpi	r25, 0x04	; 4
    44fc:	09 f0       	breq	.+2      	; 0x4500 <_fpadd_parts+0x2e>
    44fe:	33 c1       	rjmp	.+614    	; 0x4766 <_fpadd_parts+0x294>
    4500:	91 81       	ldd	r25, Z+1	; 0x01
    4502:	11 96       	adiw	r26, 0x01	; 1
    4504:	8c 91       	ld	r24, X
    4506:	11 97       	sbiw	r26, 0x01	; 1
    4508:	98 17       	cp	r25, r24
    450a:	09 f4       	brne	.+2      	; 0x450e <_fpadd_parts+0x3c>
    450c:	2c c1       	rjmp	.+600    	; 0x4766 <_fpadd_parts+0x294>
    450e:	ec ef       	ldi	r30, 0xFC	; 252
    4510:	f1 e0       	ldi	r31, 0x01	; 1
    4512:	29 c1       	rjmp	.+594    	; 0x4766 <_fpadd_parts+0x294>
    4514:	94 30       	cpi	r25, 0x04	; 4
    4516:	09 f4       	brne	.+2      	; 0x451a <_fpadd_parts+0x48>
    4518:	25 c1       	rjmp	.+586    	; 0x4764 <_fpadd_parts+0x292>
    451a:	92 30       	cpi	r25, 0x02	; 2
    451c:	a9 f4       	brne	.+42     	; 0x4548 <_fpadd_parts+0x76>
    451e:	82 30       	cpi	r24, 0x02	; 2
    4520:	09 f0       	breq	.+2      	; 0x4524 <_fpadd_parts+0x52>
    4522:	21 c1       	rjmp	.+578    	; 0x4766 <_fpadd_parts+0x294>
    4524:	9f 01       	movw	r18, r30
    4526:	88 e0       	ldi	r24, 0x08	; 8
    4528:	d9 01       	movw	r26, r18
    452a:	0d 90       	ld	r0, X+
    452c:	9d 01       	movw	r18, r26
    452e:	da 01       	movw	r26, r20
    4530:	0d 92       	st	X+, r0
    4532:	ad 01       	movw	r20, r26
    4534:	81 50       	subi	r24, 0x01	; 1
    4536:	c1 f7       	brne	.-16     	; 0x4528 <_fpadd_parts+0x56>
    4538:	d2 01       	movw	r26, r4
    453a:	11 96       	adiw	r26, 0x01	; 1
    453c:	8c 91       	ld	r24, X
    453e:	11 97       	sbiw	r26, 0x01	; 1
    4540:	91 81       	ldd	r25, Z+1	; 0x01
    4542:	89 23       	and	r24, r25
    4544:	89 83       	std	Y+1, r24	; 0x01
    4546:	0c c1       	rjmp	.+536    	; 0x4760 <_fpadd_parts+0x28e>
    4548:	82 30       	cpi	r24, 0x02	; 2
    454a:	09 f4       	brne	.+2      	; 0x454e <_fpadd_parts+0x7c>
    454c:	0b c1       	rjmp	.+534    	; 0x4764 <_fpadd_parts+0x292>
    454e:	82 81       	ldd	r24, Z+2	; 0x02
    4550:	93 81       	ldd	r25, Z+3	; 0x03
    4552:	db 01       	movw	r26, r22
    4554:	12 96       	adiw	r26, 0x02	; 2
    4556:	4d 91       	ld	r20, X+
    4558:	5c 91       	ld	r21, X
    455a:	13 97       	sbiw	r26, 0x03	; 3
    455c:	e4 80       	ldd	r14, Z+4	; 0x04
    455e:	f5 80       	ldd	r15, Z+5	; 0x05
    4560:	06 81       	ldd	r16, Z+6	; 0x06
    4562:	17 81       	ldd	r17, Z+7	; 0x07
    4564:	14 96       	adiw	r26, 0x04	; 4
    4566:	ad 90       	ld	r10, X+
    4568:	bd 90       	ld	r11, X+
    456a:	cd 90       	ld	r12, X+
    456c:	dc 90       	ld	r13, X
    456e:	17 97       	sbiw	r26, 0x07	; 7
    4570:	9c 01       	movw	r18, r24
    4572:	24 1b       	sub	r18, r20
    4574:	35 0b       	sbc	r19, r21
    4576:	b9 01       	movw	r22, r18
    4578:	37 ff       	sbrs	r19, 7
    457a:	04 c0       	rjmp	.+8      	; 0x4584 <_fpadd_parts+0xb2>
    457c:	66 27       	eor	r22, r22
    457e:	77 27       	eor	r23, r23
    4580:	62 1b       	sub	r22, r18
    4582:	73 0b       	sbc	r23, r19
    4584:	60 32       	cpi	r22, 0x20	; 32
    4586:	71 05       	cpc	r23, r1
    4588:	0c f0       	brlt	.+2      	; 0x458c <_fpadd_parts+0xba>
    458a:	62 c0       	rjmp	.+196    	; 0x4650 <_fpadd_parts+0x17e>
    458c:	12 16       	cp	r1, r18
    458e:	13 06       	cpc	r1, r19
    4590:	6c f5       	brge	.+90     	; 0x45ec <_fpadd_parts+0x11a>
    4592:	35 01       	movw	r6, r10
    4594:	46 01       	movw	r8, r12
    4596:	06 2e       	mov	r0, r22
    4598:	04 c0       	rjmp	.+8      	; 0x45a2 <_fpadd_parts+0xd0>
    459a:	96 94       	lsr	r9
    459c:	87 94       	ror	r8
    459e:	77 94       	ror	r7
    45a0:	67 94       	ror	r6
    45a2:	0a 94       	dec	r0
    45a4:	d2 f7       	brpl	.-12     	; 0x459a <_fpadd_parts+0xc8>
    45a6:	21 e0       	ldi	r18, 0x01	; 1
    45a8:	30 e0       	ldi	r19, 0x00	; 0
    45aa:	40 e0       	ldi	r20, 0x00	; 0
    45ac:	50 e0       	ldi	r21, 0x00	; 0
    45ae:	04 c0       	rjmp	.+8      	; 0x45b8 <_fpadd_parts+0xe6>
    45b0:	22 0f       	add	r18, r18
    45b2:	33 1f       	adc	r19, r19
    45b4:	44 1f       	adc	r20, r20
    45b6:	55 1f       	adc	r21, r21
    45b8:	6a 95       	dec	r22
    45ba:	d2 f7       	brpl	.-12     	; 0x45b0 <_fpadd_parts+0xde>
    45bc:	21 50       	subi	r18, 0x01	; 1
    45be:	30 40       	sbci	r19, 0x00	; 0
    45c0:	40 40       	sbci	r20, 0x00	; 0
    45c2:	50 40       	sbci	r21, 0x00	; 0
    45c4:	2a 21       	and	r18, r10
    45c6:	3b 21       	and	r19, r11
    45c8:	4c 21       	and	r20, r12
    45ca:	5d 21       	and	r21, r13
    45cc:	21 15       	cp	r18, r1
    45ce:	31 05       	cpc	r19, r1
    45d0:	41 05       	cpc	r20, r1
    45d2:	51 05       	cpc	r21, r1
    45d4:	21 f0       	breq	.+8      	; 0x45de <_fpadd_parts+0x10c>
    45d6:	21 e0       	ldi	r18, 0x01	; 1
    45d8:	30 e0       	ldi	r19, 0x00	; 0
    45da:	40 e0       	ldi	r20, 0x00	; 0
    45dc:	50 e0       	ldi	r21, 0x00	; 0
    45de:	59 01       	movw	r10, r18
    45e0:	6a 01       	movw	r12, r20
    45e2:	a6 28       	or	r10, r6
    45e4:	b7 28       	or	r11, r7
    45e6:	c8 28       	or	r12, r8
    45e8:	d9 28       	or	r13, r9
    45ea:	3d c0       	rjmp	.+122    	; 0x4666 <_fpadd_parts+0x194>
    45ec:	21 15       	cp	r18, r1
    45ee:	31 05       	cpc	r19, r1
    45f0:	d1 f1       	breq	.+116    	; 0x4666 <_fpadd_parts+0x194>
    45f2:	86 0f       	add	r24, r22
    45f4:	97 1f       	adc	r25, r23
    45f6:	37 01       	movw	r6, r14
    45f8:	48 01       	movw	r8, r16
    45fa:	06 2e       	mov	r0, r22
    45fc:	04 c0       	rjmp	.+8      	; 0x4606 <_fpadd_parts+0x134>
    45fe:	96 94       	lsr	r9
    4600:	87 94       	ror	r8
    4602:	77 94       	ror	r7
    4604:	67 94       	ror	r6
    4606:	0a 94       	dec	r0
    4608:	d2 f7       	brpl	.-12     	; 0x45fe <_fpadd_parts+0x12c>
    460a:	21 e0       	ldi	r18, 0x01	; 1
    460c:	30 e0       	ldi	r19, 0x00	; 0
    460e:	40 e0       	ldi	r20, 0x00	; 0
    4610:	50 e0       	ldi	r21, 0x00	; 0
    4612:	04 c0       	rjmp	.+8      	; 0x461c <_fpadd_parts+0x14a>
    4614:	22 0f       	add	r18, r18
    4616:	33 1f       	adc	r19, r19
    4618:	44 1f       	adc	r20, r20
    461a:	55 1f       	adc	r21, r21
    461c:	6a 95       	dec	r22
    461e:	d2 f7       	brpl	.-12     	; 0x4614 <_fpadd_parts+0x142>
    4620:	21 50       	subi	r18, 0x01	; 1
    4622:	30 40       	sbci	r19, 0x00	; 0
    4624:	40 40       	sbci	r20, 0x00	; 0
    4626:	50 40       	sbci	r21, 0x00	; 0
    4628:	2e 21       	and	r18, r14
    462a:	3f 21       	and	r19, r15
    462c:	40 23       	and	r20, r16
    462e:	51 23       	and	r21, r17
    4630:	21 15       	cp	r18, r1
    4632:	31 05       	cpc	r19, r1
    4634:	41 05       	cpc	r20, r1
    4636:	51 05       	cpc	r21, r1
    4638:	21 f0       	breq	.+8      	; 0x4642 <_fpadd_parts+0x170>
    463a:	21 e0       	ldi	r18, 0x01	; 1
    463c:	30 e0       	ldi	r19, 0x00	; 0
    463e:	40 e0       	ldi	r20, 0x00	; 0
    4640:	50 e0       	ldi	r21, 0x00	; 0
    4642:	79 01       	movw	r14, r18
    4644:	8a 01       	movw	r16, r20
    4646:	e6 28       	or	r14, r6
    4648:	f7 28       	or	r15, r7
    464a:	08 29       	or	r16, r8
    464c:	19 29       	or	r17, r9
    464e:	0b c0       	rjmp	.+22     	; 0x4666 <_fpadd_parts+0x194>
    4650:	48 17       	cp	r20, r24
    4652:	59 07       	cpc	r21, r25
    4654:	2c f0       	brlt	.+10     	; 0x4660 <_fpadd_parts+0x18e>
    4656:	ca 01       	movw	r24, r20
    4658:	ee 24       	eor	r14, r14
    465a:	ff 24       	eor	r15, r15
    465c:	87 01       	movw	r16, r14
    465e:	03 c0       	rjmp	.+6      	; 0x4666 <_fpadd_parts+0x194>
    4660:	aa 24       	eor	r10, r10
    4662:	bb 24       	eor	r11, r11
    4664:	65 01       	movw	r12, r10
    4666:	21 81       	ldd	r18, Z+1	; 0x01
    4668:	f2 01       	movw	r30, r4
    466a:	31 81       	ldd	r19, Z+1	; 0x01
    466c:	23 17       	cp	r18, r19
    466e:	09 f4       	brne	.+2      	; 0x4672 <_fpadd_parts+0x1a0>
    4670:	4a c0       	rjmp	.+148    	; 0x4706 <_fpadd_parts+0x234>
    4672:	22 23       	and	r18, r18
    4674:	49 f0       	breq	.+18     	; 0x4688 <_fpadd_parts+0x1b6>
    4676:	a6 01       	movw	r20, r12
    4678:	95 01       	movw	r18, r10
    467a:	2e 19       	sub	r18, r14
    467c:	3f 09       	sbc	r19, r15
    467e:	40 0b       	sbc	r20, r16
    4680:	51 0b       	sbc	r21, r17
    4682:	79 01       	movw	r14, r18
    4684:	8a 01       	movw	r16, r20
    4686:	04 c0       	rjmp	.+8      	; 0x4690 <_fpadd_parts+0x1be>
    4688:	ea 18       	sub	r14, r10
    468a:	fb 08       	sbc	r15, r11
    468c:	0c 09       	sbc	r16, r12
    468e:	1d 09       	sbc	r17, r13
    4690:	17 fd       	sbrc	r17, 7
    4692:	0c c0       	rjmp	.+24     	; 0x46ac <_fpadd_parts+0x1da>
    4694:	19 82       	std	Y+1, r1	; 0x01
    4696:	9b 83       	std	Y+3, r25	; 0x03
    4698:	8a 83       	std	Y+2, r24	; 0x02
    469a:	ec 82       	std	Y+4, r14	; 0x04
    469c:	fd 82       	std	Y+5, r15	; 0x05
    469e:	0e 83       	std	Y+6, r16	; 0x06
    46a0:	1f 83       	std	Y+7, r17	; 0x07
    46a2:	8c 81       	ldd	r24, Y+4	; 0x04
    46a4:	9d 81       	ldd	r25, Y+5	; 0x05
    46a6:	ae 81       	ldd	r26, Y+6	; 0x06
    46a8:	bf 81       	ldd	r27, Y+7	; 0x07
    46aa:	1a c0       	rjmp	.+52     	; 0x46e0 <_fpadd_parts+0x20e>
    46ac:	21 e0       	ldi	r18, 0x01	; 1
    46ae:	29 83       	std	Y+1, r18	; 0x01
    46b0:	9b 83       	std	Y+3, r25	; 0x03
    46b2:	8a 83       	std	Y+2, r24	; 0x02
    46b4:	88 27       	eor	r24, r24
    46b6:	99 27       	eor	r25, r25
    46b8:	dc 01       	movw	r26, r24
    46ba:	8e 19       	sub	r24, r14
    46bc:	9f 09       	sbc	r25, r15
    46be:	a0 0b       	sbc	r26, r16
    46c0:	b1 0b       	sbc	r27, r17
    46c2:	8c 83       	std	Y+4, r24	; 0x04
    46c4:	9d 83       	std	Y+5, r25	; 0x05
    46c6:	ae 83       	std	Y+6, r26	; 0x06
    46c8:	bf 83       	std	Y+7, r27	; 0x07
    46ca:	eb cf       	rjmp	.-42     	; 0x46a2 <_fpadd_parts+0x1d0>
    46cc:	88 0f       	add	r24, r24
    46ce:	99 1f       	adc	r25, r25
    46d0:	aa 1f       	adc	r26, r26
    46d2:	bb 1f       	adc	r27, r27
    46d4:	2a 81       	ldd	r18, Y+2	; 0x02
    46d6:	3b 81       	ldd	r19, Y+3	; 0x03
    46d8:	21 50       	subi	r18, 0x01	; 1
    46da:	30 40       	sbci	r19, 0x00	; 0
    46dc:	3b 83       	std	Y+3, r19	; 0x03
    46de:	2a 83       	std	Y+2, r18	; 0x02
    46e0:	9c 01       	movw	r18, r24
    46e2:	ad 01       	movw	r20, r26
    46e4:	21 50       	subi	r18, 0x01	; 1
    46e6:	30 40       	sbci	r19, 0x00	; 0
    46e8:	40 40       	sbci	r20, 0x00	; 0
    46ea:	50 40       	sbci	r21, 0x00	; 0
    46ec:	2f 3f       	cpi	r18, 0xFF	; 255
    46ee:	6f ef       	ldi	r22, 0xFF	; 255
    46f0:	36 07       	cpc	r19, r22
    46f2:	6f ef       	ldi	r22, 0xFF	; 255
    46f4:	46 07       	cpc	r20, r22
    46f6:	6f e3       	ldi	r22, 0x3F	; 63
    46f8:	56 07       	cpc	r21, r22
    46fa:	40 f3       	brcs	.-48     	; 0x46cc <_fpadd_parts+0x1fa>
    46fc:	8c 83       	std	Y+4, r24	; 0x04
    46fe:	9d 83       	std	Y+5, r25	; 0x05
    4700:	ae 83       	std	Y+6, r26	; 0x06
    4702:	bf 83       	std	Y+7, r27	; 0x07
    4704:	0b c0       	rjmp	.+22     	; 0x471c <_fpadd_parts+0x24a>
    4706:	29 83       	std	Y+1, r18	; 0x01
    4708:	9b 83       	std	Y+3, r25	; 0x03
    470a:	8a 83       	std	Y+2, r24	; 0x02
    470c:	ea 0c       	add	r14, r10
    470e:	fb 1c       	adc	r15, r11
    4710:	0c 1d       	adc	r16, r12
    4712:	1d 1d       	adc	r17, r13
    4714:	ec 82       	std	Y+4, r14	; 0x04
    4716:	fd 82       	std	Y+5, r15	; 0x05
    4718:	0e 83       	std	Y+6, r16	; 0x06
    471a:	1f 83       	std	Y+7, r17	; 0x07
    471c:	83 e0       	ldi	r24, 0x03	; 3
    471e:	88 83       	st	Y, r24
    4720:	2c 81       	ldd	r18, Y+4	; 0x04
    4722:	3d 81       	ldd	r19, Y+5	; 0x05
    4724:	4e 81       	ldd	r20, Y+6	; 0x06
    4726:	5f 81       	ldd	r21, Y+7	; 0x07
    4728:	57 ff       	sbrs	r21, 7
    472a:	1a c0       	rjmp	.+52     	; 0x4760 <_fpadd_parts+0x28e>
    472c:	c9 01       	movw	r24, r18
    472e:	aa 27       	eor	r26, r26
    4730:	97 fd       	sbrc	r25, 7
    4732:	a0 95       	com	r26
    4734:	ba 2f       	mov	r27, r26
    4736:	81 70       	andi	r24, 0x01	; 1
    4738:	90 70       	andi	r25, 0x00	; 0
    473a:	a0 70       	andi	r26, 0x00	; 0
    473c:	b0 70       	andi	r27, 0x00	; 0
    473e:	56 95       	lsr	r21
    4740:	47 95       	ror	r20
    4742:	37 95       	ror	r19
    4744:	27 95       	ror	r18
    4746:	82 2b       	or	r24, r18
    4748:	93 2b       	or	r25, r19
    474a:	a4 2b       	or	r26, r20
    474c:	b5 2b       	or	r27, r21
    474e:	8c 83       	std	Y+4, r24	; 0x04
    4750:	9d 83       	std	Y+5, r25	; 0x05
    4752:	ae 83       	std	Y+6, r26	; 0x06
    4754:	bf 83       	std	Y+7, r27	; 0x07
    4756:	8a 81       	ldd	r24, Y+2	; 0x02
    4758:	9b 81       	ldd	r25, Y+3	; 0x03
    475a:	01 96       	adiw	r24, 0x01	; 1
    475c:	9b 83       	std	Y+3, r25	; 0x03
    475e:	8a 83       	std	Y+2, r24	; 0x02
    4760:	fe 01       	movw	r30, r28
    4762:	01 c0       	rjmp	.+2      	; 0x4766 <_fpadd_parts+0x294>
    4764:	f2 01       	movw	r30, r4
    4766:	cf 01       	movw	r24, r30
    4768:	cd b7       	in	r28, 0x3d	; 61
    476a:	de b7       	in	r29, 0x3e	; 62
    476c:	e0 e1       	ldi	r30, 0x10	; 16
    476e:	0c 94 a1 29 	jmp	0x5342	; 0x5342 <__epilogue_restores__+0x4>

00004772 <__subsf3>:
    4772:	a0 e2       	ldi	r26, 0x20	; 32
    4774:	b0 e0       	ldi	r27, 0x00	; 0
    4776:	ef eb       	ldi	r30, 0xBF	; 191
    4778:	f3 e2       	ldi	r31, 0x23	; 35
    477a:	0c 94 8f 29 	jmp	0x531e	; 0x531e <__prologue_saves__+0x18>
    477e:	69 83       	std	Y+1, r22	; 0x01
    4780:	7a 83       	std	Y+2, r23	; 0x02
    4782:	8b 83       	std	Y+3, r24	; 0x03
    4784:	9c 83       	std	Y+4, r25	; 0x04
    4786:	2d 83       	std	Y+5, r18	; 0x05
    4788:	3e 83       	std	Y+6, r19	; 0x06
    478a:	4f 83       	std	Y+7, r20	; 0x07
    478c:	58 87       	std	Y+8, r21	; 0x08
    478e:	e9 e0       	ldi	r30, 0x09	; 9
    4790:	ee 2e       	mov	r14, r30
    4792:	f1 2c       	mov	r15, r1
    4794:	ec 0e       	add	r14, r28
    4796:	fd 1e       	adc	r15, r29
    4798:	ce 01       	movw	r24, r28
    479a:	01 96       	adiw	r24, 0x01	; 1
    479c:	b7 01       	movw	r22, r14
    479e:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <__unpack_f>
    47a2:	8e 01       	movw	r16, r28
    47a4:	0f 5e       	subi	r16, 0xEF	; 239
    47a6:	1f 4f       	sbci	r17, 0xFF	; 255
    47a8:	ce 01       	movw	r24, r28
    47aa:	05 96       	adiw	r24, 0x05	; 5
    47ac:	b8 01       	movw	r22, r16
    47ae:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <__unpack_f>
    47b2:	8a 89       	ldd	r24, Y+18	; 0x12
    47b4:	91 e0       	ldi	r25, 0x01	; 1
    47b6:	89 27       	eor	r24, r25
    47b8:	8a 8b       	std	Y+18, r24	; 0x12
    47ba:	c7 01       	movw	r24, r14
    47bc:	b8 01       	movw	r22, r16
    47be:	ae 01       	movw	r20, r28
    47c0:	47 5e       	subi	r20, 0xE7	; 231
    47c2:	5f 4f       	sbci	r21, 0xFF	; 255
    47c4:	0e 94 69 22 	call	0x44d2	; 0x44d2 <_fpadd_parts>
    47c8:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__pack_f>
    47cc:	a0 96       	adiw	r28, 0x20	; 32
    47ce:	e6 e0       	ldi	r30, 0x06	; 6
    47d0:	0c 94 ab 29 	jmp	0x5356	; 0x5356 <__epilogue_restores__+0x18>

000047d4 <__addsf3>:
    47d4:	a0 e2       	ldi	r26, 0x20	; 32
    47d6:	b0 e0       	ldi	r27, 0x00	; 0
    47d8:	e0 ef       	ldi	r30, 0xF0	; 240
    47da:	f3 e2       	ldi	r31, 0x23	; 35
    47dc:	0c 94 8f 29 	jmp	0x531e	; 0x531e <__prologue_saves__+0x18>
    47e0:	69 83       	std	Y+1, r22	; 0x01
    47e2:	7a 83       	std	Y+2, r23	; 0x02
    47e4:	8b 83       	std	Y+3, r24	; 0x03
    47e6:	9c 83       	std	Y+4, r25	; 0x04
    47e8:	2d 83       	std	Y+5, r18	; 0x05
    47ea:	3e 83       	std	Y+6, r19	; 0x06
    47ec:	4f 83       	std	Y+7, r20	; 0x07
    47ee:	58 87       	std	Y+8, r21	; 0x08
    47f0:	f9 e0       	ldi	r31, 0x09	; 9
    47f2:	ef 2e       	mov	r14, r31
    47f4:	f1 2c       	mov	r15, r1
    47f6:	ec 0e       	add	r14, r28
    47f8:	fd 1e       	adc	r15, r29
    47fa:	ce 01       	movw	r24, r28
    47fc:	01 96       	adiw	r24, 0x01	; 1
    47fe:	b7 01       	movw	r22, r14
    4800:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <__unpack_f>
    4804:	8e 01       	movw	r16, r28
    4806:	0f 5e       	subi	r16, 0xEF	; 239
    4808:	1f 4f       	sbci	r17, 0xFF	; 255
    480a:	ce 01       	movw	r24, r28
    480c:	05 96       	adiw	r24, 0x05	; 5
    480e:	b8 01       	movw	r22, r16
    4810:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <__unpack_f>
    4814:	c7 01       	movw	r24, r14
    4816:	b8 01       	movw	r22, r16
    4818:	ae 01       	movw	r20, r28
    481a:	47 5e       	subi	r20, 0xE7	; 231
    481c:	5f 4f       	sbci	r21, 0xFF	; 255
    481e:	0e 94 69 22 	call	0x44d2	; 0x44d2 <_fpadd_parts>
    4822:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__pack_f>
    4826:	a0 96       	adiw	r28, 0x20	; 32
    4828:	e6 e0       	ldi	r30, 0x06	; 6
    482a:	0c 94 ab 29 	jmp	0x5356	; 0x5356 <__epilogue_restores__+0x18>

0000482e <__mulsf3>:
    482e:	a0 e2       	ldi	r26, 0x20	; 32
    4830:	b0 e0       	ldi	r27, 0x00	; 0
    4832:	ed e1       	ldi	r30, 0x1D	; 29
    4834:	f4 e2       	ldi	r31, 0x24	; 36
    4836:	0c 94 83 29 	jmp	0x5306	; 0x5306 <__prologue_saves__>
    483a:	69 83       	std	Y+1, r22	; 0x01
    483c:	7a 83       	std	Y+2, r23	; 0x02
    483e:	8b 83       	std	Y+3, r24	; 0x03
    4840:	9c 83       	std	Y+4, r25	; 0x04
    4842:	2d 83       	std	Y+5, r18	; 0x05
    4844:	3e 83       	std	Y+6, r19	; 0x06
    4846:	4f 83       	std	Y+7, r20	; 0x07
    4848:	58 87       	std	Y+8, r21	; 0x08
    484a:	ce 01       	movw	r24, r28
    484c:	01 96       	adiw	r24, 0x01	; 1
    484e:	be 01       	movw	r22, r28
    4850:	67 5f       	subi	r22, 0xF7	; 247
    4852:	7f 4f       	sbci	r23, 0xFF	; 255
    4854:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <__unpack_f>
    4858:	ce 01       	movw	r24, r28
    485a:	05 96       	adiw	r24, 0x05	; 5
    485c:	be 01       	movw	r22, r28
    485e:	6f 5e       	subi	r22, 0xEF	; 239
    4860:	7f 4f       	sbci	r23, 0xFF	; 255
    4862:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <__unpack_f>
    4866:	99 85       	ldd	r25, Y+9	; 0x09
    4868:	92 30       	cpi	r25, 0x02	; 2
    486a:	88 f0       	brcs	.+34     	; 0x488e <__mulsf3+0x60>
    486c:	89 89       	ldd	r24, Y+17	; 0x11
    486e:	82 30       	cpi	r24, 0x02	; 2
    4870:	c8 f0       	brcs	.+50     	; 0x48a4 <__mulsf3+0x76>
    4872:	94 30       	cpi	r25, 0x04	; 4
    4874:	19 f4       	brne	.+6      	; 0x487c <__mulsf3+0x4e>
    4876:	82 30       	cpi	r24, 0x02	; 2
    4878:	51 f4       	brne	.+20     	; 0x488e <__mulsf3+0x60>
    487a:	04 c0       	rjmp	.+8      	; 0x4884 <__mulsf3+0x56>
    487c:	84 30       	cpi	r24, 0x04	; 4
    487e:	29 f4       	brne	.+10     	; 0x488a <__mulsf3+0x5c>
    4880:	92 30       	cpi	r25, 0x02	; 2
    4882:	81 f4       	brne	.+32     	; 0x48a4 <__mulsf3+0x76>
    4884:	8c ef       	ldi	r24, 0xFC	; 252
    4886:	91 e0       	ldi	r25, 0x01	; 1
    4888:	c4 c0       	rjmp	.+392    	; 0x4a12 <__mulsf3+0x1e4>
    488a:	92 30       	cpi	r25, 0x02	; 2
    488c:	49 f4       	brne	.+18     	; 0x48a0 <__mulsf3+0x72>
    488e:	80 e0       	ldi	r24, 0x00	; 0
    4890:	2a 85       	ldd	r18, Y+10	; 0x0a
    4892:	9a 89       	ldd	r25, Y+18	; 0x12
    4894:	29 13       	cpse	r18, r25
    4896:	81 e0       	ldi	r24, 0x01	; 1
    4898:	8a 87       	std	Y+10, r24	; 0x0a
    489a:	ce 01       	movw	r24, r28
    489c:	09 96       	adiw	r24, 0x09	; 9
    489e:	b9 c0       	rjmp	.+370    	; 0x4a12 <__mulsf3+0x1e4>
    48a0:	82 30       	cpi	r24, 0x02	; 2
    48a2:	49 f4       	brne	.+18     	; 0x48b6 <__mulsf3+0x88>
    48a4:	80 e0       	ldi	r24, 0x00	; 0
    48a6:	2a 85       	ldd	r18, Y+10	; 0x0a
    48a8:	9a 89       	ldd	r25, Y+18	; 0x12
    48aa:	29 13       	cpse	r18, r25
    48ac:	81 e0       	ldi	r24, 0x01	; 1
    48ae:	8a 8b       	std	Y+18, r24	; 0x12
    48b0:	ce 01       	movw	r24, r28
    48b2:	41 96       	adiw	r24, 0x11	; 17
    48b4:	ae c0       	rjmp	.+348    	; 0x4a12 <__mulsf3+0x1e4>
    48b6:	6d 84       	ldd	r6, Y+13	; 0x0d
    48b8:	7e 84       	ldd	r7, Y+14	; 0x0e
    48ba:	8f 84       	ldd	r8, Y+15	; 0x0f
    48bc:	98 88       	ldd	r9, Y+16	; 0x10
    48be:	ad 88       	ldd	r10, Y+21	; 0x15
    48c0:	be 88       	ldd	r11, Y+22	; 0x16
    48c2:	cf 88       	ldd	r12, Y+23	; 0x17
    48c4:	d8 8c       	ldd	r13, Y+24	; 0x18
    48c6:	60 e0       	ldi	r22, 0x00	; 0
    48c8:	70 e0       	ldi	r23, 0x00	; 0
    48ca:	80 e0       	ldi	r24, 0x00	; 0
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	dc 01       	movw	r26, r24
    48d0:	ee 24       	eor	r14, r14
    48d2:	ff 24       	eor	r15, r15
    48d4:	87 01       	movw	r16, r14
    48d6:	20 e0       	ldi	r18, 0x00	; 0
    48d8:	30 e0       	ldi	r19, 0x00	; 0
    48da:	a9 01       	movw	r20, r18
    48dc:	f3 01       	movw	r30, r6
    48de:	e1 70       	andi	r30, 0x01	; 1
    48e0:	f0 70       	andi	r31, 0x00	; 0
    48e2:	30 97       	sbiw	r30, 0x00	; 0
    48e4:	c9 f0       	breq	.+50     	; 0x4918 <__mulsf3+0xea>
    48e6:	2a 0d       	add	r18, r10
    48e8:	3b 1d       	adc	r19, r11
    48ea:	4c 1d       	adc	r20, r12
    48ec:	5d 1d       	adc	r21, r13
    48ee:	8e 0d       	add	r24, r14
    48f0:	9f 1d       	adc	r25, r15
    48f2:	a0 1f       	adc	r26, r16
    48f4:	b1 1f       	adc	r27, r17
    48f6:	22 24       	eor	r2, r2
    48f8:	33 24       	eor	r3, r3
    48fa:	21 01       	movw	r4, r2
    48fc:	2a 15       	cp	r18, r10
    48fe:	3b 05       	cpc	r19, r11
    4900:	4c 05       	cpc	r20, r12
    4902:	5d 05       	cpc	r21, r13
    4904:	28 f4       	brcc	.+10     	; 0x4910 <__mulsf3+0xe2>
    4906:	e1 e0       	ldi	r30, 0x01	; 1
    4908:	2e 2e       	mov	r2, r30
    490a:	31 2c       	mov	r3, r1
    490c:	41 2c       	mov	r4, r1
    490e:	51 2c       	mov	r5, r1
    4910:	82 0d       	add	r24, r2
    4912:	93 1d       	adc	r25, r3
    4914:	a4 1d       	adc	r26, r4
    4916:	b5 1d       	adc	r27, r5
    4918:	ee 0c       	add	r14, r14
    491a:	ff 1c       	adc	r15, r15
    491c:	00 1f       	adc	r16, r16
    491e:	11 1f       	adc	r17, r17
    4920:	d7 fe       	sbrs	r13, 7
    4922:	09 c0       	rjmp	.+18     	; 0x4936 <__mulsf3+0x108>
    4924:	e1 e0       	ldi	r30, 0x01	; 1
    4926:	2e 2e       	mov	r2, r30
    4928:	31 2c       	mov	r3, r1
    492a:	41 2c       	mov	r4, r1
    492c:	51 2c       	mov	r5, r1
    492e:	e2 28       	or	r14, r2
    4930:	f3 28       	or	r15, r3
    4932:	04 29       	or	r16, r4
    4934:	15 29       	or	r17, r5
    4936:	6f 5f       	subi	r22, 0xFF	; 255
    4938:	7f 4f       	sbci	r23, 0xFF	; 255
    493a:	60 32       	cpi	r22, 0x20	; 32
    493c:	71 05       	cpc	r23, r1
    493e:	49 f0       	breq	.+18     	; 0x4952 <__mulsf3+0x124>
    4940:	aa 0c       	add	r10, r10
    4942:	bb 1c       	adc	r11, r11
    4944:	cc 1c       	adc	r12, r12
    4946:	dd 1c       	adc	r13, r13
    4948:	96 94       	lsr	r9
    494a:	87 94       	ror	r8
    494c:	77 94       	ror	r7
    494e:	67 94       	ror	r6
    4950:	c5 cf       	rjmp	.-118    	; 0x48dc <__mulsf3+0xae>
    4952:	6b 89       	ldd	r22, Y+19	; 0x13
    4954:	7c 89       	ldd	r23, Y+20	; 0x14
    4956:	eb 85       	ldd	r30, Y+11	; 0x0b
    4958:	fc 85       	ldd	r31, Y+12	; 0x0c
    495a:	6e 0f       	add	r22, r30
    495c:	7f 1f       	adc	r23, r31
    495e:	6e 5f       	subi	r22, 0xFE	; 254
    4960:	7f 4f       	sbci	r23, 0xFF	; 255
    4962:	7c 8f       	std	Y+28, r23	; 0x1c
    4964:	6b 8f       	std	Y+27, r22	; 0x1b
    4966:	1a 8e       	std	Y+26, r1	; 0x1a
    4968:	7a 85       	ldd	r23, Y+10	; 0x0a
    496a:	6a 89       	ldd	r22, Y+18	; 0x12
    496c:	76 17       	cp	r23, r22
    496e:	11 f0       	breq	.+4      	; 0x4974 <__mulsf3+0x146>
    4970:	61 e0       	ldi	r22, 0x01	; 1
    4972:	6a 8f       	std	Y+26, r22	; 0x1a
    4974:	6b 8d       	ldd	r22, Y+27	; 0x1b
    4976:	7c 8d       	ldd	r23, Y+28	; 0x1c
    4978:	10 c0       	rjmp	.+32     	; 0x499a <__mulsf3+0x16c>
    497a:	fc 01       	movw	r30, r24
    497c:	e1 70       	andi	r30, 0x01	; 1
    497e:	f0 70       	andi	r31, 0x00	; 0
    4980:	30 97       	sbiw	r30, 0x00	; 0
    4982:	29 f0       	breq	.+10     	; 0x498e <__mulsf3+0x160>
    4984:	56 95       	lsr	r21
    4986:	47 95       	ror	r20
    4988:	37 95       	ror	r19
    498a:	27 95       	ror	r18
    498c:	50 68       	ori	r21, 0x80	; 128
    498e:	b6 95       	lsr	r27
    4990:	a7 95       	ror	r26
    4992:	97 95       	ror	r25
    4994:	87 95       	ror	r24
    4996:	6f 5f       	subi	r22, 0xFF	; 255
    4998:	7f 4f       	sbci	r23, 0xFF	; 255
    499a:	b7 fd       	sbrc	r27, 7
    499c:	ee cf       	rjmp	.-36     	; 0x497a <__mulsf3+0x14c>
    499e:	0c c0       	rjmp	.+24     	; 0x49b8 <__mulsf3+0x18a>
    49a0:	88 0f       	add	r24, r24
    49a2:	99 1f       	adc	r25, r25
    49a4:	aa 1f       	adc	r26, r26
    49a6:	bb 1f       	adc	r27, r27
    49a8:	57 fd       	sbrc	r21, 7
    49aa:	81 60       	ori	r24, 0x01	; 1
    49ac:	22 0f       	add	r18, r18
    49ae:	33 1f       	adc	r19, r19
    49b0:	44 1f       	adc	r20, r20
    49b2:	55 1f       	adc	r21, r21
    49b4:	61 50       	subi	r22, 0x01	; 1
    49b6:	70 40       	sbci	r23, 0x00	; 0
    49b8:	80 30       	cpi	r24, 0x00	; 0
    49ba:	e0 e0       	ldi	r30, 0x00	; 0
    49bc:	9e 07       	cpc	r25, r30
    49be:	e0 e0       	ldi	r30, 0x00	; 0
    49c0:	ae 07       	cpc	r26, r30
    49c2:	e0 e4       	ldi	r30, 0x40	; 64
    49c4:	be 07       	cpc	r27, r30
    49c6:	60 f3       	brcs	.-40     	; 0x49a0 <__mulsf3+0x172>
    49c8:	6b 8f       	std	Y+27, r22	; 0x1b
    49ca:	7c 8f       	std	Y+28, r23	; 0x1c
    49cc:	6f e7       	ldi	r22, 0x7F	; 127
    49ce:	e6 2e       	mov	r14, r22
    49d0:	f1 2c       	mov	r15, r1
    49d2:	01 2d       	mov	r16, r1
    49d4:	11 2d       	mov	r17, r1
    49d6:	e8 22       	and	r14, r24
    49d8:	f9 22       	and	r15, r25
    49da:	0a 23       	and	r16, r26
    49dc:	1b 23       	and	r17, r27
    49de:	60 e4       	ldi	r22, 0x40	; 64
    49e0:	e6 16       	cp	r14, r22
    49e2:	f1 04       	cpc	r15, r1
    49e4:	01 05       	cpc	r16, r1
    49e6:	11 05       	cpc	r17, r1
    49e8:	61 f4       	brne	.+24     	; 0x4a02 <__mulsf3+0x1d4>
    49ea:	87 fd       	sbrc	r24, 7
    49ec:	0a c0       	rjmp	.+20     	; 0x4a02 <__mulsf3+0x1d4>
    49ee:	21 15       	cp	r18, r1
    49f0:	31 05       	cpc	r19, r1
    49f2:	41 05       	cpc	r20, r1
    49f4:	51 05       	cpc	r21, r1
    49f6:	29 f0       	breq	.+10     	; 0x4a02 <__mulsf3+0x1d4>
    49f8:	80 5c       	subi	r24, 0xC0	; 192
    49fa:	9f 4f       	sbci	r25, 0xFF	; 255
    49fc:	af 4f       	sbci	r26, 0xFF	; 255
    49fe:	bf 4f       	sbci	r27, 0xFF	; 255
    4a00:	80 78       	andi	r24, 0x80	; 128
    4a02:	8d 8f       	std	Y+29, r24	; 0x1d
    4a04:	9e 8f       	std	Y+30, r25	; 0x1e
    4a06:	af 8f       	std	Y+31, r26	; 0x1f
    4a08:	b8 a3       	std	Y+32, r27	; 0x20
    4a0a:	83 e0       	ldi	r24, 0x03	; 3
    4a0c:	89 8f       	std	Y+25, r24	; 0x19
    4a0e:	ce 01       	movw	r24, r28
    4a10:	49 96       	adiw	r24, 0x19	; 25
    4a12:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__pack_f>
    4a16:	a0 96       	adiw	r28, 0x20	; 32
    4a18:	e2 e1       	ldi	r30, 0x12	; 18
    4a1a:	0c 94 9f 29 	jmp	0x533e	; 0x533e <__epilogue_restores__>

00004a1e <__divsf3>:
    4a1e:	a8 e1       	ldi	r26, 0x18	; 24
    4a20:	b0 e0       	ldi	r27, 0x00	; 0
    4a22:	e5 e1       	ldi	r30, 0x15	; 21
    4a24:	f5 e2       	ldi	r31, 0x25	; 37
    4a26:	0c 94 8b 29 	jmp	0x5316	; 0x5316 <__prologue_saves__+0x10>
    4a2a:	69 83       	std	Y+1, r22	; 0x01
    4a2c:	7a 83       	std	Y+2, r23	; 0x02
    4a2e:	8b 83       	std	Y+3, r24	; 0x03
    4a30:	9c 83       	std	Y+4, r25	; 0x04
    4a32:	2d 83       	std	Y+5, r18	; 0x05
    4a34:	3e 83       	std	Y+6, r19	; 0x06
    4a36:	4f 83       	std	Y+7, r20	; 0x07
    4a38:	58 87       	std	Y+8, r21	; 0x08
    4a3a:	8e 01       	movw	r16, r28
    4a3c:	07 5f       	subi	r16, 0xF7	; 247
    4a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    4a40:	ce 01       	movw	r24, r28
    4a42:	01 96       	adiw	r24, 0x01	; 1
    4a44:	b8 01       	movw	r22, r16
    4a46:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <__unpack_f>
    4a4a:	81 e1       	ldi	r24, 0x11	; 17
    4a4c:	e8 2e       	mov	r14, r24
    4a4e:	f1 2c       	mov	r15, r1
    4a50:	ec 0e       	add	r14, r28
    4a52:	fd 1e       	adc	r15, r29
    4a54:	ce 01       	movw	r24, r28
    4a56:	05 96       	adiw	r24, 0x05	; 5
    4a58:	b7 01       	movw	r22, r14
    4a5a:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <__unpack_f>
    4a5e:	99 85       	ldd	r25, Y+9	; 0x09
    4a60:	92 30       	cpi	r25, 0x02	; 2
    4a62:	08 f4       	brcc	.+2      	; 0x4a66 <__divsf3+0x48>
    4a64:	83 c0       	rjmp	.+262    	; 0x4b6c <__divsf3+0x14e>
    4a66:	89 89       	ldd	r24, Y+17	; 0x11
    4a68:	82 30       	cpi	r24, 0x02	; 2
    4a6a:	10 f4       	brcc	.+4      	; 0x4a70 <__divsf3+0x52>
    4a6c:	87 01       	movw	r16, r14
    4a6e:	7e c0       	rjmp	.+252    	; 0x4b6c <__divsf3+0x14e>
    4a70:	2a 85       	ldd	r18, Y+10	; 0x0a
    4a72:	3a 89       	ldd	r19, Y+18	; 0x12
    4a74:	23 27       	eor	r18, r19
    4a76:	2a 87       	std	Y+10, r18	; 0x0a
    4a78:	94 30       	cpi	r25, 0x04	; 4
    4a7a:	11 f0       	breq	.+4      	; 0x4a80 <__divsf3+0x62>
    4a7c:	92 30       	cpi	r25, 0x02	; 2
    4a7e:	31 f4       	brne	.+12     	; 0x4a8c <__divsf3+0x6e>
    4a80:	98 17       	cp	r25, r24
    4a82:	09 f0       	breq	.+2      	; 0x4a86 <__divsf3+0x68>
    4a84:	70 c0       	rjmp	.+224    	; 0x4b66 <__divsf3+0x148>
    4a86:	0c ef       	ldi	r16, 0xFC	; 252
    4a88:	11 e0       	ldi	r17, 0x01	; 1
    4a8a:	70 c0       	rjmp	.+224    	; 0x4b6c <__divsf3+0x14e>
    4a8c:	84 30       	cpi	r24, 0x04	; 4
    4a8e:	39 f4       	brne	.+14     	; 0x4a9e <__divsf3+0x80>
    4a90:	1d 86       	std	Y+13, r1	; 0x0d
    4a92:	1e 86       	std	Y+14, r1	; 0x0e
    4a94:	1f 86       	std	Y+15, r1	; 0x0f
    4a96:	18 8a       	std	Y+16, r1	; 0x10
    4a98:	1c 86       	std	Y+12, r1	; 0x0c
    4a9a:	1b 86       	std	Y+11, r1	; 0x0b
    4a9c:	67 c0       	rjmp	.+206    	; 0x4b6c <__divsf3+0x14e>
    4a9e:	82 30       	cpi	r24, 0x02	; 2
    4aa0:	19 f4       	brne	.+6      	; 0x4aa8 <__divsf3+0x8a>
    4aa2:	84 e0       	ldi	r24, 0x04	; 4
    4aa4:	89 87       	std	Y+9, r24	; 0x09
    4aa6:	62 c0       	rjmp	.+196    	; 0x4b6c <__divsf3+0x14e>
    4aa8:	8b 85       	ldd	r24, Y+11	; 0x0b
    4aaa:	9c 85       	ldd	r25, Y+12	; 0x0c
    4aac:	2b 89       	ldd	r18, Y+19	; 0x13
    4aae:	3c 89       	ldd	r19, Y+20	; 0x14
    4ab0:	82 1b       	sub	r24, r18
    4ab2:	93 0b       	sbc	r25, r19
    4ab4:	9c 87       	std	Y+12, r25	; 0x0c
    4ab6:	8b 87       	std	Y+11, r24	; 0x0b
    4ab8:	2d 85       	ldd	r18, Y+13	; 0x0d
    4aba:	3e 85       	ldd	r19, Y+14	; 0x0e
    4abc:	4f 85       	ldd	r20, Y+15	; 0x0f
    4abe:	58 89       	ldd	r21, Y+16	; 0x10
    4ac0:	ad 88       	ldd	r10, Y+21	; 0x15
    4ac2:	be 88       	ldd	r11, Y+22	; 0x16
    4ac4:	cf 88       	ldd	r12, Y+23	; 0x17
    4ac6:	d8 8c       	ldd	r13, Y+24	; 0x18
    4ac8:	2a 15       	cp	r18, r10
    4aca:	3b 05       	cpc	r19, r11
    4acc:	4c 05       	cpc	r20, r12
    4ace:	5d 05       	cpc	r21, r13
    4ad0:	38 f4       	brcc	.+14     	; 0x4ae0 <__divsf3+0xc2>
    4ad2:	22 0f       	add	r18, r18
    4ad4:	33 1f       	adc	r19, r19
    4ad6:	44 1f       	adc	r20, r20
    4ad8:	55 1f       	adc	r21, r21
    4ada:	01 97       	sbiw	r24, 0x01	; 1
    4adc:	9c 87       	std	Y+12, r25	; 0x0c
    4ade:	8b 87       	std	Y+11, r24	; 0x0b
    4ae0:	60 e0       	ldi	r22, 0x00	; 0
    4ae2:	70 e0       	ldi	r23, 0x00	; 0
    4ae4:	e1 2c       	mov	r14, r1
    4ae6:	f1 2c       	mov	r15, r1
    4ae8:	01 2d       	mov	r16, r1
    4aea:	a0 e4       	ldi	r26, 0x40	; 64
    4aec:	1a 2f       	mov	r17, r26
    4aee:	80 e0       	ldi	r24, 0x00	; 0
    4af0:	90 e0       	ldi	r25, 0x00	; 0
    4af2:	dc 01       	movw	r26, r24
    4af4:	2a 15       	cp	r18, r10
    4af6:	3b 05       	cpc	r19, r11
    4af8:	4c 05       	cpc	r20, r12
    4afa:	5d 05       	cpc	r21, r13
    4afc:	40 f0       	brcs	.+16     	; 0x4b0e <__divsf3+0xf0>
    4afe:	8e 29       	or	r24, r14
    4b00:	9f 29       	or	r25, r15
    4b02:	a0 2b       	or	r26, r16
    4b04:	b1 2b       	or	r27, r17
    4b06:	2a 19       	sub	r18, r10
    4b08:	3b 09       	sbc	r19, r11
    4b0a:	4c 09       	sbc	r20, r12
    4b0c:	5d 09       	sbc	r21, r13
    4b0e:	16 95       	lsr	r17
    4b10:	07 95       	ror	r16
    4b12:	f7 94       	ror	r15
    4b14:	e7 94       	ror	r14
    4b16:	22 0f       	add	r18, r18
    4b18:	33 1f       	adc	r19, r19
    4b1a:	44 1f       	adc	r20, r20
    4b1c:	55 1f       	adc	r21, r21
    4b1e:	6f 5f       	subi	r22, 0xFF	; 255
    4b20:	7f 4f       	sbci	r23, 0xFF	; 255
    4b22:	6f 31       	cpi	r22, 0x1F	; 31
    4b24:	71 05       	cpc	r23, r1
    4b26:	31 f7       	brne	.-52     	; 0x4af4 <__divsf3+0xd6>
    4b28:	6f e7       	ldi	r22, 0x7F	; 127
    4b2a:	e6 2e       	mov	r14, r22
    4b2c:	f1 2c       	mov	r15, r1
    4b2e:	01 2d       	mov	r16, r1
    4b30:	11 2d       	mov	r17, r1
    4b32:	e8 22       	and	r14, r24
    4b34:	f9 22       	and	r15, r25
    4b36:	0a 23       	and	r16, r26
    4b38:	1b 23       	and	r17, r27
    4b3a:	60 e4       	ldi	r22, 0x40	; 64
    4b3c:	e6 16       	cp	r14, r22
    4b3e:	f1 04       	cpc	r15, r1
    4b40:	01 05       	cpc	r16, r1
    4b42:	11 05       	cpc	r17, r1
    4b44:	61 f4       	brne	.+24     	; 0x4b5e <__divsf3+0x140>
    4b46:	87 fd       	sbrc	r24, 7
    4b48:	0a c0       	rjmp	.+20     	; 0x4b5e <__divsf3+0x140>
    4b4a:	21 15       	cp	r18, r1
    4b4c:	31 05       	cpc	r19, r1
    4b4e:	41 05       	cpc	r20, r1
    4b50:	51 05       	cpc	r21, r1
    4b52:	29 f0       	breq	.+10     	; 0x4b5e <__divsf3+0x140>
    4b54:	80 5c       	subi	r24, 0xC0	; 192
    4b56:	9f 4f       	sbci	r25, 0xFF	; 255
    4b58:	af 4f       	sbci	r26, 0xFF	; 255
    4b5a:	bf 4f       	sbci	r27, 0xFF	; 255
    4b5c:	80 78       	andi	r24, 0x80	; 128
    4b5e:	8d 87       	std	Y+13, r24	; 0x0d
    4b60:	9e 87       	std	Y+14, r25	; 0x0e
    4b62:	af 87       	std	Y+15, r26	; 0x0f
    4b64:	b8 8b       	std	Y+16, r27	; 0x10
    4b66:	8e 01       	movw	r16, r28
    4b68:	07 5f       	subi	r16, 0xF7	; 247
    4b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b6c:	c8 01       	movw	r24, r16
    4b6e:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__pack_f>
    4b72:	68 96       	adiw	r28, 0x18	; 24
    4b74:	ea e0       	ldi	r30, 0x0A	; 10
    4b76:	0c 94 a7 29 	jmp	0x534e	; 0x534e <__epilogue_restores__+0x10>

00004b7a <__gesf2>:
    4b7a:	a8 e1       	ldi	r26, 0x18	; 24
    4b7c:	b0 e0       	ldi	r27, 0x00	; 0
    4b7e:	e3 ec       	ldi	r30, 0xC3	; 195
    4b80:	f5 e2       	ldi	r31, 0x25	; 37
    4b82:	0c 94 8f 29 	jmp	0x531e	; 0x531e <__prologue_saves__+0x18>
    4b86:	69 83       	std	Y+1, r22	; 0x01
    4b88:	7a 83       	std	Y+2, r23	; 0x02
    4b8a:	8b 83       	std	Y+3, r24	; 0x03
    4b8c:	9c 83       	std	Y+4, r25	; 0x04
    4b8e:	2d 83       	std	Y+5, r18	; 0x05
    4b90:	3e 83       	std	Y+6, r19	; 0x06
    4b92:	4f 83       	std	Y+7, r20	; 0x07
    4b94:	58 87       	std	Y+8, r21	; 0x08
    4b96:	89 e0       	ldi	r24, 0x09	; 9
    4b98:	e8 2e       	mov	r14, r24
    4b9a:	f1 2c       	mov	r15, r1
    4b9c:	ec 0e       	add	r14, r28
    4b9e:	fd 1e       	adc	r15, r29
    4ba0:	ce 01       	movw	r24, r28
    4ba2:	01 96       	adiw	r24, 0x01	; 1
    4ba4:	b7 01       	movw	r22, r14
    4ba6:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <__unpack_f>
    4baa:	8e 01       	movw	r16, r28
    4bac:	0f 5e       	subi	r16, 0xEF	; 239
    4bae:	1f 4f       	sbci	r17, 0xFF	; 255
    4bb0:	ce 01       	movw	r24, r28
    4bb2:	05 96       	adiw	r24, 0x05	; 5
    4bb4:	b8 01       	movw	r22, r16
    4bb6:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <__unpack_f>
    4bba:	89 85       	ldd	r24, Y+9	; 0x09
    4bbc:	82 30       	cpi	r24, 0x02	; 2
    4bbe:	40 f0       	brcs	.+16     	; 0x4bd0 <__gesf2+0x56>
    4bc0:	89 89       	ldd	r24, Y+17	; 0x11
    4bc2:	82 30       	cpi	r24, 0x02	; 2
    4bc4:	28 f0       	brcs	.+10     	; 0x4bd0 <__gesf2+0x56>
    4bc6:	c7 01       	movw	r24, r14
    4bc8:	b8 01       	movw	r22, r16
    4bca:	0e 94 db 28 	call	0x51b6	; 0x51b6 <__fpcmp_parts_f>
    4bce:	01 c0       	rjmp	.+2      	; 0x4bd2 <__gesf2+0x58>
    4bd0:	8f ef       	ldi	r24, 0xFF	; 255
    4bd2:	68 96       	adiw	r28, 0x18	; 24
    4bd4:	e6 e0       	ldi	r30, 0x06	; 6
    4bd6:	0c 94 ab 29 	jmp	0x5356	; 0x5356 <__epilogue_restores__+0x18>

00004bda <__ltsf2>:
    4bda:	a8 e1       	ldi	r26, 0x18	; 24
    4bdc:	b0 e0       	ldi	r27, 0x00	; 0
    4bde:	e3 ef       	ldi	r30, 0xF3	; 243
    4be0:	f5 e2       	ldi	r31, 0x25	; 37
    4be2:	0c 94 8f 29 	jmp	0x531e	; 0x531e <__prologue_saves__+0x18>
    4be6:	69 83       	std	Y+1, r22	; 0x01
    4be8:	7a 83       	std	Y+2, r23	; 0x02
    4bea:	8b 83       	std	Y+3, r24	; 0x03
    4bec:	9c 83       	std	Y+4, r25	; 0x04
    4bee:	2d 83       	std	Y+5, r18	; 0x05
    4bf0:	3e 83       	std	Y+6, r19	; 0x06
    4bf2:	4f 83       	std	Y+7, r20	; 0x07
    4bf4:	58 87       	std	Y+8, r21	; 0x08
    4bf6:	89 e0       	ldi	r24, 0x09	; 9
    4bf8:	e8 2e       	mov	r14, r24
    4bfa:	f1 2c       	mov	r15, r1
    4bfc:	ec 0e       	add	r14, r28
    4bfe:	fd 1e       	adc	r15, r29
    4c00:	ce 01       	movw	r24, r28
    4c02:	01 96       	adiw	r24, 0x01	; 1
    4c04:	b7 01       	movw	r22, r14
    4c06:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <__unpack_f>
    4c0a:	8e 01       	movw	r16, r28
    4c0c:	0f 5e       	subi	r16, 0xEF	; 239
    4c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c10:	ce 01       	movw	r24, r28
    4c12:	05 96       	adiw	r24, 0x05	; 5
    4c14:	b8 01       	movw	r22, r16
    4c16:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <__unpack_f>
    4c1a:	89 85       	ldd	r24, Y+9	; 0x09
    4c1c:	82 30       	cpi	r24, 0x02	; 2
    4c1e:	40 f0       	brcs	.+16     	; 0x4c30 <__ltsf2+0x56>
    4c20:	89 89       	ldd	r24, Y+17	; 0x11
    4c22:	82 30       	cpi	r24, 0x02	; 2
    4c24:	28 f0       	brcs	.+10     	; 0x4c30 <__ltsf2+0x56>
    4c26:	c7 01       	movw	r24, r14
    4c28:	b8 01       	movw	r22, r16
    4c2a:	0e 94 db 28 	call	0x51b6	; 0x51b6 <__fpcmp_parts_f>
    4c2e:	01 c0       	rjmp	.+2      	; 0x4c32 <__ltsf2+0x58>
    4c30:	81 e0       	ldi	r24, 0x01	; 1
    4c32:	68 96       	adiw	r28, 0x18	; 24
    4c34:	e6 e0       	ldi	r30, 0x06	; 6
    4c36:	0c 94 ab 29 	jmp	0x5356	; 0x5356 <__epilogue_restores__+0x18>

00004c3a <__floatsisf>:
    4c3a:	a8 e0       	ldi	r26, 0x08	; 8
    4c3c:	b0 e0       	ldi	r27, 0x00	; 0
    4c3e:	e3 e2       	ldi	r30, 0x23	; 35
    4c40:	f6 e2       	ldi	r31, 0x26	; 38
    4c42:	0c 94 8d 29 	jmp	0x531a	; 0x531a <__prologue_saves__+0x14>
    4c46:	23 e0       	ldi	r18, 0x03	; 3
    4c48:	29 83       	std	Y+1, r18	; 0x01
    4c4a:	9b 01       	movw	r18, r22
    4c4c:	ac 01       	movw	r20, r24
    4c4e:	22 27       	eor	r18, r18
    4c50:	57 fd       	sbrc	r21, 7
    4c52:	23 95       	inc	r18
    4c54:	33 27       	eor	r19, r19
    4c56:	44 27       	eor	r20, r20
    4c58:	55 27       	eor	r21, r21
    4c5a:	2a 83       	std	Y+2, r18	; 0x02
    4c5c:	61 15       	cp	r22, r1
    4c5e:	71 05       	cpc	r23, r1
    4c60:	81 05       	cpc	r24, r1
    4c62:	91 05       	cpc	r25, r1
    4c64:	19 f4       	brne	.+6      	; 0x4c6c <__floatsisf+0x32>
    4c66:	82 e0       	ldi	r24, 0x02	; 2
    4c68:	89 83       	std	Y+1, r24	; 0x01
    4c6a:	3c c0       	rjmp	.+120    	; 0x4ce4 <__floatsisf+0xaa>
    4c6c:	22 23       	and	r18, r18
    4c6e:	a9 f0       	breq	.+42     	; 0x4c9a <__floatsisf+0x60>
    4c70:	60 30       	cpi	r22, 0x00	; 0
    4c72:	20 e0       	ldi	r18, 0x00	; 0
    4c74:	72 07       	cpc	r23, r18
    4c76:	20 e0       	ldi	r18, 0x00	; 0
    4c78:	82 07       	cpc	r24, r18
    4c7a:	20 e8       	ldi	r18, 0x80	; 128
    4c7c:	92 07       	cpc	r25, r18
    4c7e:	29 f4       	brne	.+10     	; 0x4c8a <__floatsisf+0x50>
    4c80:	60 e0       	ldi	r22, 0x00	; 0
    4c82:	70 e0       	ldi	r23, 0x00	; 0
    4c84:	80 e0       	ldi	r24, 0x00	; 0
    4c86:	9f ec       	ldi	r25, 0xCF	; 207
    4c88:	31 c0       	rjmp	.+98     	; 0x4cec <__floatsisf+0xb2>
    4c8a:	ee 24       	eor	r14, r14
    4c8c:	ff 24       	eor	r15, r15
    4c8e:	87 01       	movw	r16, r14
    4c90:	e6 1a       	sub	r14, r22
    4c92:	f7 0a       	sbc	r15, r23
    4c94:	08 0b       	sbc	r16, r24
    4c96:	19 0b       	sbc	r17, r25
    4c98:	02 c0       	rjmp	.+4      	; 0x4c9e <__floatsisf+0x64>
    4c9a:	7b 01       	movw	r14, r22
    4c9c:	8c 01       	movw	r16, r24
    4c9e:	8e e1       	ldi	r24, 0x1E	; 30
    4ca0:	c8 2e       	mov	r12, r24
    4ca2:	d1 2c       	mov	r13, r1
    4ca4:	dc 82       	std	Y+4, r13	; 0x04
    4ca6:	cb 82       	std	Y+3, r12	; 0x03
    4ca8:	ed 82       	std	Y+5, r14	; 0x05
    4caa:	fe 82       	std	Y+6, r15	; 0x06
    4cac:	0f 83       	std	Y+7, r16	; 0x07
    4cae:	18 87       	std	Y+8, r17	; 0x08
    4cb0:	c8 01       	movw	r24, r16
    4cb2:	b7 01       	movw	r22, r14
    4cb4:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <__clzsi2>
    4cb8:	9c 01       	movw	r18, r24
    4cba:	21 50       	subi	r18, 0x01	; 1
    4cbc:	30 40       	sbci	r19, 0x00	; 0
    4cbe:	12 16       	cp	r1, r18
    4cc0:	13 06       	cpc	r1, r19
    4cc2:	84 f4       	brge	.+32     	; 0x4ce4 <__floatsisf+0xaa>
    4cc4:	02 2e       	mov	r0, r18
    4cc6:	04 c0       	rjmp	.+8      	; 0x4cd0 <__floatsisf+0x96>
    4cc8:	ee 0c       	add	r14, r14
    4cca:	ff 1c       	adc	r15, r15
    4ccc:	00 1f       	adc	r16, r16
    4cce:	11 1f       	adc	r17, r17
    4cd0:	0a 94       	dec	r0
    4cd2:	d2 f7       	brpl	.-12     	; 0x4cc8 <__floatsisf+0x8e>
    4cd4:	ed 82       	std	Y+5, r14	; 0x05
    4cd6:	fe 82       	std	Y+6, r15	; 0x06
    4cd8:	0f 83       	std	Y+7, r16	; 0x07
    4cda:	18 87       	std	Y+8, r17	; 0x08
    4cdc:	c2 1a       	sub	r12, r18
    4cde:	d3 0a       	sbc	r13, r19
    4ce0:	dc 82       	std	Y+4, r13	; 0x04
    4ce2:	cb 82       	std	Y+3, r12	; 0x03
    4ce4:	ce 01       	movw	r24, r28
    4ce6:	01 96       	adiw	r24, 0x01	; 1
    4ce8:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__pack_f>
    4cec:	28 96       	adiw	r28, 0x08	; 8
    4cee:	e8 e0       	ldi	r30, 0x08	; 8
    4cf0:	0c 94 a9 29 	jmp	0x5352	; 0x5352 <__epilogue_restores__+0x14>

00004cf4 <__fixsfsi>:
    4cf4:	ac e0       	ldi	r26, 0x0C	; 12
    4cf6:	b0 e0       	ldi	r27, 0x00	; 0
    4cf8:	e0 e8       	ldi	r30, 0x80	; 128
    4cfa:	f6 e2       	ldi	r31, 0x26	; 38
    4cfc:	0c 94 93 29 	jmp	0x5326	; 0x5326 <__prologue_saves__+0x20>
    4d00:	69 83       	std	Y+1, r22	; 0x01
    4d02:	7a 83       	std	Y+2, r23	; 0x02
    4d04:	8b 83       	std	Y+3, r24	; 0x03
    4d06:	9c 83       	std	Y+4, r25	; 0x04
    4d08:	ce 01       	movw	r24, r28
    4d0a:	01 96       	adiw	r24, 0x01	; 1
    4d0c:	be 01       	movw	r22, r28
    4d0e:	6b 5f       	subi	r22, 0xFB	; 251
    4d10:	7f 4f       	sbci	r23, 0xFF	; 255
    4d12:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <__unpack_f>
    4d16:	8d 81       	ldd	r24, Y+5	; 0x05
    4d18:	82 30       	cpi	r24, 0x02	; 2
    4d1a:	61 f1       	breq	.+88     	; 0x4d74 <__fixsfsi+0x80>
    4d1c:	82 30       	cpi	r24, 0x02	; 2
    4d1e:	50 f1       	brcs	.+84     	; 0x4d74 <__fixsfsi+0x80>
    4d20:	84 30       	cpi	r24, 0x04	; 4
    4d22:	21 f4       	brne	.+8      	; 0x4d2c <__fixsfsi+0x38>
    4d24:	8e 81       	ldd	r24, Y+6	; 0x06
    4d26:	88 23       	and	r24, r24
    4d28:	49 f1       	breq	.+82     	; 0x4d7c <__fixsfsi+0x88>
    4d2a:	2d c0       	rjmp	.+90     	; 0x4d86 <__fixsfsi+0x92>
    4d2c:	2f 81       	ldd	r18, Y+7	; 0x07
    4d2e:	38 85       	ldd	r19, Y+8	; 0x08
    4d30:	37 fd       	sbrc	r19, 7
    4d32:	20 c0       	rjmp	.+64     	; 0x4d74 <__fixsfsi+0x80>
    4d34:	6e 81       	ldd	r22, Y+6	; 0x06
    4d36:	2f 31       	cpi	r18, 0x1F	; 31
    4d38:	31 05       	cpc	r19, r1
    4d3a:	1c f0       	brlt	.+6      	; 0x4d42 <__fixsfsi+0x4e>
    4d3c:	66 23       	and	r22, r22
    4d3e:	f1 f0       	breq	.+60     	; 0x4d7c <__fixsfsi+0x88>
    4d40:	22 c0       	rjmp	.+68     	; 0x4d86 <__fixsfsi+0x92>
    4d42:	8e e1       	ldi	r24, 0x1E	; 30
    4d44:	90 e0       	ldi	r25, 0x00	; 0
    4d46:	82 1b       	sub	r24, r18
    4d48:	93 0b       	sbc	r25, r19
    4d4a:	29 85       	ldd	r18, Y+9	; 0x09
    4d4c:	3a 85       	ldd	r19, Y+10	; 0x0a
    4d4e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4d50:	5c 85       	ldd	r21, Y+12	; 0x0c
    4d52:	04 c0       	rjmp	.+8      	; 0x4d5c <__fixsfsi+0x68>
    4d54:	56 95       	lsr	r21
    4d56:	47 95       	ror	r20
    4d58:	37 95       	ror	r19
    4d5a:	27 95       	ror	r18
    4d5c:	8a 95       	dec	r24
    4d5e:	d2 f7       	brpl	.-12     	; 0x4d54 <__fixsfsi+0x60>
    4d60:	66 23       	and	r22, r22
    4d62:	a9 f0       	breq	.+42     	; 0x4d8e <__fixsfsi+0x9a>
    4d64:	50 95       	com	r21
    4d66:	40 95       	com	r20
    4d68:	30 95       	com	r19
    4d6a:	21 95       	neg	r18
    4d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d6e:	4f 4f       	sbci	r20, 0xFF	; 255
    4d70:	5f 4f       	sbci	r21, 0xFF	; 255
    4d72:	0d c0       	rjmp	.+26     	; 0x4d8e <__fixsfsi+0x9a>
    4d74:	20 e0       	ldi	r18, 0x00	; 0
    4d76:	30 e0       	ldi	r19, 0x00	; 0
    4d78:	a9 01       	movw	r20, r18
    4d7a:	09 c0       	rjmp	.+18     	; 0x4d8e <__fixsfsi+0x9a>
    4d7c:	2f ef       	ldi	r18, 0xFF	; 255
    4d7e:	3f ef       	ldi	r19, 0xFF	; 255
    4d80:	4f ef       	ldi	r20, 0xFF	; 255
    4d82:	5f e7       	ldi	r21, 0x7F	; 127
    4d84:	04 c0       	rjmp	.+8      	; 0x4d8e <__fixsfsi+0x9a>
    4d86:	20 e0       	ldi	r18, 0x00	; 0
    4d88:	30 e0       	ldi	r19, 0x00	; 0
    4d8a:	40 e0       	ldi	r20, 0x00	; 0
    4d8c:	50 e8       	ldi	r21, 0x80	; 128
    4d8e:	b9 01       	movw	r22, r18
    4d90:	ca 01       	movw	r24, r20
    4d92:	2c 96       	adiw	r28, 0x0c	; 12
    4d94:	e2 e0       	ldi	r30, 0x02	; 2
    4d96:	0c 94 af 29 	jmp	0x535e	; 0x535e <__epilogue_restores__+0x20>

00004d9a <__floatunsisf>:
    4d9a:	a8 e0       	ldi	r26, 0x08	; 8
    4d9c:	b0 e0       	ldi	r27, 0x00	; 0
    4d9e:	e3 ed       	ldi	r30, 0xD3	; 211
    4da0:	f6 e2       	ldi	r31, 0x26	; 38
    4da2:	0c 94 8d 29 	jmp	0x531a	; 0x531a <__prologue_saves__+0x14>
    4da6:	7b 01       	movw	r14, r22
    4da8:	8c 01       	movw	r16, r24
    4daa:	1a 82       	std	Y+2, r1	; 0x02
    4dac:	61 15       	cp	r22, r1
    4dae:	71 05       	cpc	r23, r1
    4db0:	81 05       	cpc	r24, r1
    4db2:	91 05       	cpc	r25, r1
    4db4:	19 f4       	brne	.+6      	; 0x4dbc <__floatunsisf+0x22>
    4db6:	82 e0       	ldi	r24, 0x02	; 2
    4db8:	89 83       	std	Y+1, r24	; 0x01
    4dba:	5f c0       	rjmp	.+190    	; 0x4e7a <__floatunsisf+0xe0>
    4dbc:	83 e0       	ldi	r24, 0x03	; 3
    4dbe:	89 83       	std	Y+1, r24	; 0x01
    4dc0:	8e e1       	ldi	r24, 0x1E	; 30
    4dc2:	c8 2e       	mov	r12, r24
    4dc4:	d1 2c       	mov	r13, r1
    4dc6:	dc 82       	std	Y+4, r13	; 0x04
    4dc8:	cb 82       	std	Y+3, r12	; 0x03
    4dca:	ed 82       	std	Y+5, r14	; 0x05
    4dcc:	fe 82       	std	Y+6, r15	; 0x06
    4dce:	0f 83       	std	Y+7, r16	; 0x07
    4dd0:	18 87       	std	Y+8, r17	; 0x08
    4dd2:	c8 01       	movw	r24, r16
    4dd4:	b7 01       	movw	r22, r14
    4dd6:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <__clzsi2>
    4dda:	9c 01       	movw	r18, r24
    4ddc:	21 50       	subi	r18, 0x01	; 1
    4dde:	30 40       	sbci	r19, 0x00	; 0
    4de0:	37 ff       	sbrs	r19, 7
    4de2:	38 c0       	rjmp	.+112    	; 0x4e54 <__floatunsisf+0xba>
    4de4:	ee 27       	eor	r30, r30
    4de6:	ff 27       	eor	r31, r31
    4de8:	e2 1b       	sub	r30, r18
    4dea:	f3 0b       	sbc	r31, r19
    4dec:	40 e0       	ldi	r20, 0x00	; 0
    4dee:	50 e0       	ldi	r21, 0x00	; 0
    4df0:	ba 01       	movw	r22, r20
    4df2:	81 e0       	ldi	r24, 0x01	; 1
    4df4:	90 e0       	ldi	r25, 0x00	; 0
    4df6:	a0 e0       	ldi	r26, 0x00	; 0
    4df8:	b0 e0       	ldi	r27, 0x00	; 0
    4dfa:	0e 2e       	mov	r0, r30
    4dfc:	04 c0       	rjmp	.+8      	; 0x4e06 <__floatunsisf+0x6c>
    4dfe:	88 0f       	add	r24, r24
    4e00:	99 1f       	adc	r25, r25
    4e02:	aa 1f       	adc	r26, r26
    4e04:	bb 1f       	adc	r27, r27
    4e06:	0a 94       	dec	r0
    4e08:	d2 f7       	brpl	.-12     	; 0x4dfe <__floatunsisf+0x64>
    4e0a:	01 97       	sbiw	r24, 0x01	; 1
    4e0c:	a1 09       	sbc	r26, r1
    4e0e:	b1 09       	sbc	r27, r1
    4e10:	8e 21       	and	r24, r14
    4e12:	9f 21       	and	r25, r15
    4e14:	a0 23       	and	r26, r16
    4e16:	b1 23       	and	r27, r17
    4e18:	00 97       	sbiw	r24, 0x00	; 0
    4e1a:	a1 05       	cpc	r26, r1
    4e1c:	b1 05       	cpc	r27, r1
    4e1e:	21 f0       	breq	.+8      	; 0x4e28 <__floatunsisf+0x8e>
    4e20:	41 e0       	ldi	r20, 0x01	; 1
    4e22:	50 e0       	ldi	r21, 0x00	; 0
    4e24:	60 e0       	ldi	r22, 0x00	; 0
    4e26:	70 e0       	ldi	r23, 0x00	; 0
    4e28:	04 c0       	rjmp	.+8      	; 0x4e32 <__floatunsisf+0x98>
    4e2a:	16 95       	lsr	r17
    4e2c:	07 95       	ror	r16
    4e2e:	f7 94       	ror	r15
    4e30:	e7 94       	ror	r14
    4e32:	ea 95       	dec	r30
    4e34:	d2 f7       	brpl	.-12     	; 0x4e2a <__floatunsisf+0x90>
    4e36:	e4 2a       	or	r14, r20
    4e38:	f5 2a       	or	r15, r21
    4e3a:	06 2b       	or	r16, r22
    4e3c:	17 2b       	or	r17, r23
    4e3e:	ed 82       	std	Y+5, r14	; 0x05
    4e40:	fe 82       	std	Y+6, r15	; 0x06
    4e42:	0f 83       	std	Y+7, r16	; 0x07
    4e44:	18 87       	std	Y+8, r17	; 0x08
    4e46:	8e e1       	ldi	r24, 0x1E	; 30
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	82 1b       	sub	r24, r18
    4e4c:	93 0b       	sbc	r25, r19
    4e4e:	9c 83       	std	Y+4, r25	; 0x04
    4e50:	8b 83       	std	Y+3, r24	; 0x03
    4e52:	13 c0       	rjmp	.+38     	; 0x4e7a <__floatunsisf+0xe0>
    4e54:	21 15       	cp	r18, r1
    4e56:	31 05       	cpc	r19, r1
    4e58:	81 f0       	breq	.+32     	; 0x4e7a <__floatunsisf+0xe0>
    4e5a:	02 2e       	mov	r0, r18
    4e5c:	04 c0       	rjmp	.+8      	; 0x4e66 <__floatunsisf+0xcc>
    4e5e:	ee 0c       	add	r14, r14
    4e60:	ff 1c       	adc	r15, r15
    4e62:	00 1f       	adc	r16, r16
    4e64:	11 1f       	adc	r17, r17
    4e66:	0a 94       	dec	r0
    4e68:	d2 f7       	brpl	.-12     	; 0x4e5e <__floatunsisf+0xc4>
    4e6a:	ed 82       	std	Y+5, r14	; 0x05
    4e6c:	fe 82       	std	Y+6, r15	; 0x06
    4e6e:	0f 83       	std	Y+7, r16	; 0x07
    4e70:	18 87       	std	Y+8, r17	; 0x08
    4e72:	c2 1a       	sub	r12, r18
    4e74:	d3 0a       	sbc	r13, r19
    4e76:	dc 82       	std	Y+4, r13	; 0x04
    4e78:	cb 82       	std	Y+3, r12	; 0x03
    4e7a:	ce 01       	movw	r24, r28
    4e7c:	01 96       	adiw	r24, 0x01	; 1
    4e7e:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__pack_f>
    4e82:	28 96       	adiw	r28, 0x08	; 8
    4e84:	e8 e0       	ldi	r30, 0x08	; 8
    4e86:	0c 94 a9 29 	jmp	0x5352	; 0x5352 <__epilogue_restores__+0x14>

00004e8a <__clzsi2>:
    4e8a:	af 92       	push	r10
    4e8c:	bf 92       	push	r11
    4e8e:	cf 92       	push	r12
    4e90:	df 92       	push	r13
    4e92:	ef 92       	push	r14
    4e94:	ff 92       	push	r15
    4e96:	0f 93       	push	r16
    4e98:	1f 93       	push	r17
    4e9a:	7b 01       	movw	r14, r22
    4e9c:	8c 01       	movw	r16, r24
    4e9e:	80 e0       	ldi	r24, 0x00	; 0
    4ea0:	e8 16       	cp	r14, r24
    4ea2:	80 e0       	ldi	r24, 0x00	; 0
    4ea4:	f8 06       	cpc	r15, r24
    4ea6:	81 e0       	ldi	r24, 0x01	; 1
    4ea8:	08 07       	cpc	r16, r24
    4eaa:	80 e0       	ldi	r24, 0x00	; 0
    4eac:	18 07       	cpc	r17, r24
    4eae:	80 f4       	brcc	.+32     	; 0x4ed0 <__clzsi2+0x46>
    4eb0:	8f ef       	ldi	r24, 0xFF	; 255
    4eb2:	e8 16       	cp	r14, r24
    4eb4:	f1 04       	cpc	r15, r1
    4eb6:	01 05       	cpc	r16, r1
    4eb8:	11 05       	cpc	r17, r1
    4eba:	31 f0       	breq	.+12     	; 0x4ec8 <__clzsi2+0x3e>
    4ebc:	28 f0       	brcs	.+10     	; 0x4ec8 <__clzsi2+0x3e>
    4ebe:	88 e0       	ldi	r24, 0x08	; 8
    4ec0:	90 e0       	ldi	r25, 0x00	; 0
    4ec2:	a0 e0       	ldi	r26, 0x00	; 0
    4ec4:	b0 e0       	ldi	r27, 0x00	; 0
    4ec6:	16 c0       	rjmp	.+44     	; 0x4ef4 <__clzsi2+0x6a>
    4ec8:	80 e0       	ldi	r24, 0x00	; 0
    4eca:	90 e0       	ldi	r25, 0x00	; 0
    4ecc:	dc 01       	movw	r26, r24
    4ece:	12 c0       	rjmp	.+36     	; 0x4ef4 <__clzsi2+0x6a>
    4ed0:	80 e0       	ldi	r24, 0x00	; 0
    4ed2:	e8 16       	cp	r14, r24
    4ed4:	80 e0       	ldi	r24, 0x00	; 0
    4ed6:	f8 06       	cpc	r15, r24
    4ed8:	80 e0       	ldi	r24, 0x00	; 0
    4eda:	08 07       	cpc	r16, r24
    4edc:	81 e0       	ldi	r24, 0x01	; 1
    4ede:	18 07       	cpc	r17, r24
    4ee0:	28 f0       	brcs	.+10     	; 0x4eec <__clzsi2+0x62>
    4ee2:	88 e1       	ldi	r24, 0x18	; 24
    4ee4:	90 e0       	ldi	r25, 0x00	; 0
    4ee6:	a0 e0       	ldi	r26, 0x00	; 0
    4ee8:	b0 e0       	ldi	r27, 0x00	; 0
    4eea:	04 c0       	rjmp	.+8      	; 0x4ef4 <__clzsi2+0x6a>
    4eec:	80 e1       	ldi	r24, 0x10	; 16
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	a0 e0       	ldi	r26, 0x00	; 0
    4ef2:	b0 e0       	ldi	r27, 0x00	; 0
    4ef4:	20 e2       	ldi	r18, 0x20	; 32
    4ef6:	30 e0       	ldi	r19, 0x00	; 0
    4ef8:	40 e0       	ldi	r20, 0x00	; 0
    4efa:	50 e0       	ldi	r21, 0x00	; 0
    4efc:	28 1b       	sub	r18, r24
    4efe:	39 0b       	sbc	r19, r25
    4f00:	4a 0b       	sbc	r20, r26
    4f02:	5b 0b       	sbc	r21, r27
    4f04:	57 01       	movw	r10, r14
    4f06:	68 01       	movw	r12, r16
    4f08:	04 c0       	rjmp	.+8      	; 0x4f12 <__clzsi2+0x88>
    4f0a:	d6 94       	lsr	r13
    4f0c:	c7 94       	ror	r12
    4f0e:	b7 94       	ror	r11
    4f10:	a7 94       	ror	r10
    4f12:	8a 95       	dec	r24
    4f14:	d2 f7       	brpl	.-12     	; 0x4f0a <__clzsi2+0x80>
    4f16:	f5 01       	movw	r30, r10
    4f18:	ec 5f       	subi	r30, 0xFC	; 252
    4f1a:	fd 4f       	sbci	r31, 0xFD	; 253
    4f1c:	80 81       	ld	r24, Z
    4f1e:	28 1b       	sub	r18, r24
    4f20:	31 09       	sbc	r19, r1
    4f22:	41 09       	sbc	r20, r1
    4f24:	51 09       	sbc	r21, r1
    4f26:	c9 01       	movw	r24, r18
    4f28:	1f 91       	pop	r17
    4f2a:	0f 91       	pop	r16
    4f2c:	ff 90       	pop	r15
    4f2e:	ef 90       	pop	r14
    4f30:	df 90       	pop	r13
    4f32:	cf 90       	pop	r12
    4f34:	bf 90       	pop	r11
    4f36:	af 90       	pop	r10
    4f38:	08 95       	ret

00004f3a <__pack_f>:
    4f3a:	cf 92       	push	r12
    4f3c:	df 92       	push	r13
    4f3e:	ef 92       	push	r14
    4f40:	ff 92       	push	r15
    4f42:	0f 93       	push	r16
    4f44:	1f 93       	push	r17
    4f46:	fc 01       	movw	r30, r24
    4f48:	24 81       	ldd	r18, Z+4	; 0x04
    4f4a:	35 81       	ldd	r19, Z+5	; 0x05
    4f4c:	46 81       	ldd	r20, Z+6	; 0x06
    4f4e:	57 81       	ldd	r21, Z+7	; 0x07
    4f50:	01 81       	ldd	r16, Z+1	; 0x01
    4f52:	80 81       	ld	r24, Z
    4f54:	82 30       	cpi	r24, 0x02	; 2
    4f56:	20 f4       	brcc	.+8      	; 0x4f60 <__pack_f+0x26>
    4f58:	40 61       	ori	r20, 0x10	; 16
    4f5a:	8f ef       	ldi	r24, 0xFF	; 255
    4f5c:	90 e0       	ldi	r25, 0x00	; 0
    4f5e:	a2 c0       	rjmp	.+324    	; 0x50a4 <__pack_f+0x16a>
    4f60:	84 30       	cpi	r24, 0x04	; 4
    4f62:	09 f4       	brne	.+2      	; 0x4f66 <__pack_f+0x2c>
    4f64:	9a c0       	rjmp	.+308    	; 0x509a <__pack_f+0x160>
    4f66:	82 30       	cpi	r24, 0x02	; 2
    4f68:	19 f4       	brne	.+6      	; 0x4f70 <__pack_f+0x36>
    4f6a:	80 e0       	ldi	r24, 0x00	; 0
    4f6c:	90 e0       	ldi	r25, 0x00	; 0
    4f6e:	97 c0       	rjmp	.+302    	; 0x509e <__pack_f+0x164>
    4f70:	21 15       	cp	r18, r1
    4f72:	31 05       	cpc	r19, r1
    4f74:	41 05       	cpc	r20, r1
    4f76:	51 05       	cpc	r21, r1
    4f78:	19 f4       	brne	.+6      	; 0x4f80 <__pack_f+0x46>
    4f7a:	80 e0       	ldi	r24, 0x00	; 0
    4f7c:	90 e0       	ldi	r25, 0x00	; 0
    4f7e:	92 c0       	rjmp	.+292    	; 0x50a4 <__pack_f+0x16a>
    4f80:	82 81       	ldd	r24, Z+2	; 0x02
    4f82:	93 81       	ldd	r25, Z+3	; 0x03
    4f84:	6f ef       	ldi	r22, 0xFF	; 255
    4f86:	82 38       	cpi	r24, 0x82	; 130
    4f88:	96 07       	cpc	r25, r22
    4f8a:	0c f0       	brlt	.+2      	; 0x4f8e <__pack_f+0x54>
    4f8c:	58 c0       	rjmp	.+176    	; 0x503e <__pack_f+0x104>
    4f8e:	62 e8       	ldi	r22, 0x82	; 130
    4f90:	7f ef       	ldi	r23, 0xFF	; 255
    4f92:	68 1b       	sub	r22, r24
    4f94:	79 0b       	sbc	r23, r25
    4f96:	6a 31       	cpi	r22, 0x1A	; 26
    4f98:	71 05       	cpc	r23, r1
    4f9a:	24 f0       	brlt	.+8      	; 0x4fa4 <__pack_f+0x6a>
    4f9c:	20 e0       	ldi	r18, 0x00	; 0
    4f9e:	30 e0       	ldi	r19, 0x00	; 0
    4fa0:	a9 01       	movw	r20, r18
    4fa2:	2a c0       	rjmp	.+84     	; 0x4ff8 <__pack_f+0xbe>
    4fa4:	69 01       	movw	r12, r18
    4fa6:	7a 01       	movw	r14, r20
    4fa8:	06 2e       	mov	r0, r22
    4faa:	04 c0       	rjmp	.+8      	; 0x4fb4 <__pack_f+0x7a>
    4fac:	f6 94       	lsr	r15
    4fae:	e7 94       	ror	r14
    4fb0:	d7 94       	ror	r13
    4fb2:	c7 94       	ror	r12
    4fb4:	0a 94       	dec	r0
    4fb6:	d2 f7       	brpl	.-12     	; 0x4fac <__pack_f+0x72>
    4fb8:	81 e0       	ldi	r24, 0x01	; 1
    4fba:	90 e0       	ldi	r25, 0x00	; 0
    4fbc:	a0 e0       	ldi	r26, 0x00	; 0
    4fbe:	b0 e0       	ldi	r27, 0x00	; 0
    4fc0:	04 c0       	rjmp	.+8      	; 0x4fca <__pack_f+0x90>
    4fc2:	88 0f       	add	r24, r24
    4fc4:	99 1f       	adc	r25, r25
    4fc6:	aa 1f       	adc	r26, r26
    4fc8:	bb 1f       	adc	r27, r27
    4fca:	6a 95       	dec	r22
    4fcc:	d2 f7       	brpl	.-12     	; 0x4fc2 <__pack_f+0x88>
    4fce:	01 97       	sbiw	r24, 0x01	; 1
    4fd0:	a1 09       	sbc	r26, r1
    4fd2:	b1 09       	sbc	r27, r1
    4fd4:	82 23       	and	r24, r18
    4fd6:	93 23       	and	r25, r19
    4fd8:	a4 23       	and	r26, r20
    4fda:	b5 23       	and	r27, r21
    4fdc:	00 97       	sbiw	r24, 0x00	; 0
    4fde:	a1 05       	cpc	r26, r1
    4fe0:	b1 05       	cpc	r27, r1
    4fe2:	21 f0       	breq	.+8      	; 0x4fec <__pack_f+0xb2>
    4fe4:	81 e0       	ldi	r24, 0x01	; 1
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	a0 e0       	ldi	r26, 0x00	; 0
    4fea:	b0 e0       	ldi	r27, 0x00	; 0
    4fec:	9c 01       	movw	r18, r24
    4fee:	ad 01       	movw	r20, r26
    4ff0:	2c 29       	or	r18, r12
    4ff2:	3d 29       	or	r19, r13
    4ff4:	4e 29       	or	r20, r14
    4ff6:	5f 29       	or	r21, r15
    4ff8:	da 01       	movw	r26, r20
    4ffa:	c9 01       	movw	r24, r18
    4ffc:	8f 77       	andi	r24, 0x7F	; 127
    4ffe:	90 70       	andi	r25, 0x00	; 0
    5000:	a0 70       	andi	r26, 0x00	; 0
    5002:	b0 70       	andi	r27, 0x00	; 0
    5004:	80 34       	cpi	r24, 0x40	; 64
    5006:	91 05       	cpc	r25, r1
    5008:	a1 05       	cpc	r26, r1
    500a:	b1 05       	cpc	r27, r1
    500c:	39 f4       	brne	.+14     	; 0x501c <__pack_f+0xe2>
    500e:	27 ff       	sbrs	r18, 7
    5010:	09 c0       	rjmp	.+18     	; 0x5024 <__pack_f+0xea>
    5012:	20 5c       	subi	r18, 0xC0	; 192
    5014:	3f 4f       	sbci	r19, 0xFF	; 255
    5016:	4f 4f       	sbci	r20, 0xFF	; 255
    5018:	5f 4f       	sbci	r21, 0xFF	; 255
    501a:	04 c0       	rjmp	.+8      	; 0x5024 <__pack_f+0xea>
    501c:	21 5c       	subi	r18, 0xC1	; 193
    501e:	3f 4f       	sbci	r19, 0xFF	; 255
    5020:	4f 4f       	sbci	r20, 0xFF	; 255
    5022:	5f 4f       	sbci	r21, 0xFF	; 255
    5024:	80 e0       	ldi	r24, 0x00	; 0
    5026:	90 e0       	ldi	r25, 0x00	; 0
    5028:	20 30       	cpi	r18, 0x00	; 0
    502a:	60 e0       	ldi	r22, 0x00	; 0
    502c:	36 07       	cpc	r19, r22
    502e:	60 e0       	ldi	r22, 0x00	; 0
    5030:	46 07       	cpc	r20, r22
    5032:	60 e4       	ldi	r22, 0x40	; 64
    5034:	56 07       	cpc	r21, r22
    5036:	48 f1       	brcs	.+82     	; 0x508a <__pack_f+0x150>
    5038:	81 e0       	ldi	r24, 0x01	; 1
    503a:	90 e0       	ldi	r25, 0x00	; 0
    503c:	26 c0       	rjmp	.+76     	; 0x508a <__pack_f+0x150>
    503e:	80 38       	cpi	r24, 0x80	; 128
    5040:	91 05       	cpc	r25, r1
    5042:	5c f5       	brge	.+86     	; 0x509a <__pack_f+0x160>
    5044:	81 58       	subi	r24, 0x81	; 129
    5046:	9f 4f       	sbci	r25, 0xFF	; 255
    5048:	7f e7       	ldi	r23, 0x7F	; 127
    504a:	c7 2e       	mov	r12, r23
    504c:	d1 2c       	mov	r13, r1
    504e:	e1 2c       	mov	r14, r1
    5050:	f1 2c       	mov	r15, r1
    5052:	c2 22       	and	r12, r18
    5054:	d3 22       	and	r13, r19
    5056:	e4 22       	and	r14, r20
    5058:	f5 22       	and	r15, r21
    505a:	60 e4       	ldi	r22, 0x40	; 64
    505c:	c6 16       	cp	r12, r22
    505e:	d1 04       	cpc	r13, r1
    5060:	e1 04       	cpc	r14, r1
    5062:	f1 04       	cpc	r15, r1
    5064:	39 f4       	brne	.+14     	; 0x5074 <__pack_f+0x13a>
    5066:	27 ff       	sbrs	r18, 7
    5068:	09 c0       	rjmp	.+18     	; 0x507c <__pack_f+0x142>
    506a:	20 5c       	subi	r18, 0xC0	; 192
    506c:	3f 4f       	sbci	r19, 0xFF	; 255
    506e:	4f 4f       	sbci	r20, 0xFF	; 255
    5070:	5f 4f       	sbci	r21, 0xFF	; 255
    5072:	04 c0       	rjmp	.+8      	; 0x507c <__pack_f+0x142>
    5074:	21 5c       	subi	r18, 0xC1	; 193
    5076:	3f 4f       	sbci	r19, 0xFF	; 255
    5078:	4f 4f       	sbci	r20, 0xFF	; 255
    507a:	5f 4f       	sbci	r21, 0xFF	; 255
    507c:	57 ff       	sbrs	r21, 7
    507e:	05 c0       	rjmp	.+10     	; 0x508a <__pack_f+0x150>
    5080:	56 95       	lsr	r21
    5082:	47 95       	ror	r20
    5084:	37 95       	ror	r19
    5086:	27 95       	ror	r18
    5088:	01 96       	adiw	r24, 0x01	; 1
    508a:	97 e0       	ldi	r25, 0x07	; 7
    508c:	56 95       	lsr	r21
    508e:	47 95       	ror	r20
    5090:	37 95       	ror	r19
    5092:	27 95       	ror	r18
    5094:	9a 95       	dec	r25
    5096:	d1 f7       	brne	.-12     	; 0x508c <__pack_f+0x152>
    5098:	05 c0       	rjmp	.+10     	; 0x50a4 <__pack_f+0x16a>
    509a:	8f ef       	ldi	r24, 0xFF	; 255
    509c:	90 e0       	ldi	r25, 0x00	; 0
    509e:	20 e0       	ldi	r18, 0x00	; 0
    50a0:	30 e0       	ldi	r19, 0x00	; 0
    50a2:	a9 01       	movw	r20, r18
    50a4:	78 2f       	mov	r23, r24
    50a6:	77 95       	ror	r23
    50a8:	77 27       	eor	r23, r23
    50aa:	77 95       	ror	r23
    50ac:	14 2f       	mov	r17, r20
    50ae:	1f 77       	andi	r17, 0x7F	; 127
    50b0:	60 2f       	mov	r22, r16
    50b2:	67 95       	ror	r22
    50b4:	66 27       	eor	r22, r22
    50b6:	67 95       	ror	r22
    50b8:	86 95       	lsr	r24
    50ba:	f1 2f       	mov	r31, r17
    50bc:	f7 2b       	or	r31, r23
    50be:	e8 2f       	mov	r30, r24
    50c0:	e6 2b       	or	r30, r22
    50c2:	62 2f       	mov	r22, r18
    50c4:	73 2f       	mov	r23, r19
    50c6:	8f 2f       	mov	r24, r31
    50c8:	9e 2f       	mov	r25, r30
    50ca:	1f 91       	pop	r17
    50cc:	0f 91       	pop	r16
    50ce:	ff 90       	pop	r15
    50d0:	ef 90       	pop	r14
    50d2:	df 90       	pop	r13
    50d4:	cf 90       	pop	r12
    50d6:	08 95       	ret

000050d8 <__unpack_f>:
    50d8:	fc 01       	movw	r30, r24
    50da:	db 01       	movw	r26, r22
    50dc:	20 81       	ld	r18, Z
    50de:	31 81       	ldd	r19, Z+1	; 0x01
    50e0:	82 81       	ldd	r24, Z+2	; 0x02
    50e2:	48 2f       	mov	r20, r24
    50e4:	4f 77       	andi	r20, 0x7F	; 127
    50e6:	50 e0       	ldi	r21, 0x00	; 0
    50e8:	98 2f       	mov	r25, r24
    50ea:	99 1f       	adc	r25, r25
    50ec:	99 27       	eor	r25, r25
    50ee:	99 1f       	adc	r25, r25
    50f0:	63 81       	ldd	r22, Z+3	; 0x03
    50f2:	86 2f       	mov	r24, r22
    50f4:	88 0f       	add	r24, r24
    50f6:	89 2b       	or	r24, r25
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	66 1f       	adc	r22, r22
    50fc:	66 27       	eor	r22, r22
    50fe:	66 1f       	adc	r22, r22
    5100:	11 96       	adiw	r26, 0x01	; 1
    5102:	6c 93       	st	X, r22
    5104:	11 97       	sbiw	r26, 0x01	; 1
    5106:	00 97       	sbiw	r24, 0x00	; 0
    5108:	69 f5       	brne	.+90     	; 0x5164 <__unpack_f+0x8c>
    510a:	21 15       	cp	r18, r1
    510c:	31 05       	cpc	r19, r1
    510e:	41 05       	cpc	r20, r1
    5110:	51 05       	cpc	r21, r1
    5112:	11 f4       	brne	.+4      	; 0x5118 <__unpack_f+0x40>
    5114:	82 e0       	ldi	r24, 0x02	; 2
    5116:	2f c0       	rjmp	.+94     	; 0x5176 <__unpack_f+0x9e>
    5118:	82 e8       	ldi	r24, 0x82	; 130
    511a:	9f ef       	ldi	r25, 0xFF	; 255
    511c:	13 96       	adiw	r26, 0x03	; 3
    511e:	9c 93       	st	X, r25
    5120:	8e 93       	st	-X, r24
    5122:	12 97       	sbiw	r26, 0x02	; 2
    5124:	67 e0       	ldi	r22, 0x07	; 7
    5126:	22 0f       	add	r18, r18
    5128:	33 1f       	adc	r19, r19
    512a:	44 1f       	adc	r20, r20
    512c:	55 1f       	adc	r21, r21
    512e:	6a 95       	dec	r22
    5130:	d1 f7       	brne	.-12     	; 0x5126 <__unpack_f+0x4e>
    5132:	83 e0       	ldi	r24, 0x03	; 3
    5134:	8c 93       	st	X, r24
    5136:	0d c0       	rjmp	.+26     	; 0x5152 <__unpack_f+0x7a>
    5138:	22 0f       	add	r18, r18
    513a:	33 1f       	adc	r19, r19
    513c:	44 1f       	adc	r20, r20
    513e:	55 1f       	adc	r21, r21
    5140:	12 96       	adiw	r26, 0x02	; 2
    5142:	8d 91       	ld	r24, X+
    5144:	9c 91       	ld	r25, X
    5146:	13 97       	sbiw	r26, 0x03	; 3
    5148:	01 97       	sbiw	r24, 0x01	; 1
    514a:	13 96       	adiw	r26, 0x03	; 3
    514c:	9c 93       	st	X, r25
    514e:	8e 93       	st	-X, r24
    5150:	12 97       	sbiw	r26, 0x02	; 2
    5152:	20 30       	cpi	r18, 0x00	; 0
    5154:	80 e0       	ldi	r24, 0x00	; 0
    5156:	38 07       	cpc	r19, r24
    5158:	80 e0       	ldi	r24, 0x00	; 0
    515a:	48 07       	cpc	r20, r24
    515c:	80 e4       	ldi	r24, 0x40	; 64
    515e:	58 07       	cpc	r21, r24
    5160:	58 f3       	brcs	.-42     	; 0x5138 <__unpack_f+0x60>
    5162:	22 c0       	rjmp	.+68     	; 0x51a8 <__unpack_f+0xd0>
    5164:	8f 3f       	cpi	r24, 0xFF	; 255
    5166:	91 05       	cpc	r25, r1
    5168:	79 f4       	brne	.+30     	; 0x5188 <__unpack_f+0xb0>
    516a:	21 15       	cp	r18, r1
    516c:	31 05       	cpc	r19, r1
    516e:	41 05       	cpc	r20, r1
    5170:	51 05       	cpc	r21, r1
    5172:	19 f4       	brne	.+6      	; 0x517a <__unpack_f+0xa2>
    5174:	84 e0       	ldi	r24, 0x04	; 4
    5176:	8c 93       	st	X, r24
    5178:	08 95       	ret
    517a:	44 ff       	sbrs	r20, 4
    517c:	03 c0       	rjmp	.+6      	; 0x5184 <__unpack_f+0xac>
    517e:	81 e0       	ldi	r24, 0x01	; 1
    5180:	8c 93       	st	X, r24
    5182:	12 c0       	rjmp	.+36     	; 0x51a8 <__unpack_f+0xd0>
    5184:	1c 92       	st	X, r1
    5186:	10 c0       	rjmp	.+32     	; 0x51a8 <__unpack_f+0xd0>
    5188:	8f 57       	subi	r24, 0x7F	; 127
    518a:	90 40       	sbci	r25, 0x00	; 0
    518c:	13 96       	adiw	r26, 0x03	; 3
    518e:	9c 93       	st	X, r25
    5190:	8e 93       	st	-X, r24
    5192:	12 97       	sbiw	r26, 0x02	; 2
    5194:	83 e0       	ldi	r24, 0x03	; 3
    5196:	8c 93       	st	X, r24
    5198:	87 e0       	ldi	r24, 0x07	; 7
    519a:	22 0f       	add	r18, r18
    519c:	33 1f       	adc	r19, r19
    519e:	44 1f       	adc	r20, r20
    51a0:	55 1f       	adc	r21, r21
    51a2:	8a 95       	dec	r24
    51a4:	d1 f7       	brne	.-12     	; 0x519a <__unpack_f+0xc2>
    51a6:	50 64       	ori	r21, 0x40	; 64
    51a8:	14 96       	adiw	r26, 0x04	; 4
    51aa:	2d 93       	st	X+, r18
    51ac:	3d 93       	st	X+, r19
    51ae:	4d 93       	st	X+, r20
    51b0:	5c 93       	st	X, r21
    51b2:	17 97       	sbiw	r26, 0x07	; 7
    51b4:	08 95       	ret

000051b6 <__fpcmp_parts_f>:
    51b6:	ef 92       	push	r14
    51b8:	ff 92       	push	r15
    51ba:	0f 93       	push	r16
    51bc:	1f 93       	push	r17
    51be:	fc 01       	movw	r30, r24
    51c0:	db 01       	movw	r26, r22
    51c2:	80 81       	ld	r24, Z
    51c4:	82 30       	cpi	r24, 0x02	; 2
    51c6:	08 f4       	brcc	.+2      	; 0x51ca <__fpcmp_parts_f+0x14>
    51c8:	47 c0       	rjmp	.+142    	; 0x5258 <__fpcmp_parts_f+0xa2>
    51ca:	9c 91       	ld	r25, X
    51cc:	92 30       	cpi	r25, 0x02	; 2
    51ce:	08 f4       	brcc	.+2      	; 0x51d2 <__fpcmp_parts_f+0x1c>
    51d0:	43 c0       	rjmp	.+134    	; 0x5258 <__fpcmp_parts_f+0xa2>
    51d2:	84 30       	cpi	r24, 0x04	; 4
    51d4:	51 f4       	brne	.+20     	; 0x51ea <__fpcmp_parts_f+0x34>
    51d6:	81 81       	ldd	r24, Z+1	; 0x01
    51d8:	94 30       	cpi	r25, 0x04	; 4
    51da:	a1 f5       	brne	.+104    	; 0x5244 <__fpcmp_parts_f+0x8e>
    51dc:	11 96       	adiw	r26, 0x01	; 1
    51de:	2c 91       	ld	r18, X
    51e0:	11 97       	sbiw	r26, 0x01	; 1
    51e2:	30 e0       	ldi	r19, 0x00	; 0
    51e4:	28 1b       	sub	r18, r24
    51e6:	31 09       	sbc	r19, r1
    51e8:	3f c0       	rjmp	.+126    	; 0x5268 <__fpcmp_parts_f+0xb2>
    51ea:	94 30       	cpi	r25, 0x04	; 4
    51ec:	21 f0       	breq	.+8      	; 0x51f6 <__fpcmp_parts_f+0x40>
    51ee:	82 30       	cpi	r24, 0x02	; 2
    51f0:	31 f4       	brne	.+12     	; 0x51fe <__fpcmp_parts_f+0x48>
    51f2:	92 30       	cpi	r25, 0x02	; 2
    51f4:	b9 f1       	breq	.+110    	; 0x5264 <__fpcmp_parts_f+0xae>
    51f6:	11 96       	adiw	r26, 0x01	; 1
    51f8:	8c 91       	ld	r24, X
    51fa:	11 97       	sbiw	r26, 0x01	; 1
    51fc:	2b c0       	rjmp	.+86     	; 0x5254 <__fpcmp_parts_f+0x9e>
    51fe:	81 81       	ldd	r24, Z+1	; 0x01
    5200:	92 30       	cpi	r25, 0x02	; 2
    5202:	01 f1       	breq	.+64     	; 0x5244 <__fpcmp_parts_f+0x8e>
    5204:	11 96       	adiw	r26, 0x01	; 1
    5206:	9c 91       	ld	r25, X
    5208:	11 97       	sbiw	r26, 0x01	; 1
    520a:	89 17       	cp	r24, r25
    520c:	d9 f4       	brne	.+54     	; 0x5244 <__fpcmp_parts_f+0x8e>
    520e:	42 81       	ldd	r20, Z+2	; 0x02
    5210:	53 81       	ldd	r21, Z+3	; 0x03
    5212:	12 96       	adiw	r26, 0x02	; 2
    5214:	2d 91       	ld	r18, X+
    5216:	3c 91       	ld	r19, X
    5218:	13 97       	sbiw	r26, 0x03	; 3
    521a:	24 17       	cp	r18, r20
    521c:	35 07       	cpc	r19, r21
    521e:	94 f0       	brlt	.+36     	; 0x5244 <__fpcmp_parts_f+0x8e>
    5220:	42 17       	cp	r20, r18
    5222:	53 07       	cpc	r21, r19
    5224:	bc f0       	brlt	.+46     	; 0x5254 <__fpcmp_parts_f+0x9e>
    5226:	e4 80       	ldd	r14, Z+4	; 0x04
    5228:	f5 80       	ldd	r15, Z+5	; 0x05
    522a:	06 81       	ldd	r16, Z+6	; 0x06
    522c:	17 81       	ldd	r17, Z+7	; 0x07
    522e:	14 96       	adiw	r26, 0x04	; 4
    5230:	2d 91       	ld	r18, X+
    5232:	3d 91       	ld	r19, X+
    5234:	4d 91       	ld	r20, X+
    5236:	5c 91       	ld	r21, X
    5238:	17 97       	sbiw	r26, 0x07	; 7
    523a:	2e 15       	cp	r18, r14
    523c:	3f 05       	cpc	r19, r15
    523e:	40 07       	cpc	r20, r16
    5240:	51 07       	cpc	r21, r17
    5242:	18 f4       	brcc	.+6      	; 0x524a <__fpcmp_parts_f+0x94>
    5244:	88 23       	and	r24, r24
    5246:	41 f0       	breq	.+16     	; 0x5258 <__fpcmp_parts_f+0xa2>
    5248:	0a c0       	rjmp	.+20     	; 0x525e <__fpcmp_parts_f+0xa8>
    524a:	e2 16       	cp	r14, r18
    524c:	f3 06       	cpc	r15, r19
    524e:	04 07       	cpc	r16, r20
    5250:	15 07       	cpc	r17, r21
    5252:	40 f4       	brcc	.+16     	; 0x5264 <__fpcmp_parts_f+0xae>
    5254:	88 23       	and	r24, r24
    5256:	19 f0       	breq	.+6      	; 0x525e <__fpcmp_parts_f+0xa8>
    5258:	21 e0       	ldi	r18, 0x01	; 1
    525a:	30 e0       	ldi	r19, 0x00	; 0
    525c:	05 c0       	rjmp	.+10     	; 0x5268 <__fpcmp_parts_f+0xb2>
    525e:	2f ef       	ldi	r18, 0xFF	; 255
    5260:	3f ef       	ldi	r19, 0xFF	; 255
    5262:	02 c0       	rjmp	.+4      	; 0x5268 <__fpcmp_parts_f+0xb2>
    5264:	20 e0       	ldi	r18, 0x00	; 0
    5266:	30 e0       	ldi	r19, 0x00	; 0
    5268:	c9 01       	movw	r24, r18
    526a:	1f 91       	pop	r17
    526c:	0f 91       	pop	r16
    526e:	ff 90       	pop	r15
    5270:	ef 90       	pop	r14
    5272:	08 95       	ret

00005274 <__udivmodhi4>:
    5274:	aa 1b       	sub	r26, r26
    5276:	bb 1b       	sub	r27, r27
    5278:	51 e1       	ldi	r21, 0x11	; 17
    527a:	07 c0       	rjmp	.+14     	; 0x528a <__udivmodhi4_ep>

0000527c <__udivmodhi4_loop>:
    527c:	aa 1f       	adc	r26, r26
    527e:	bb 1f       	adc	r27, r27
    5280:	a6 17       	cp	r26, r22
    5282:	b7 07       	cpc	r27, r23
    5284:	10 f0       	brcs	.+4      	; 0x528a <__udivmodhi4_ep>
    5286:	a6 1b       	sub	r26, r22
    5288:	b7 0b       	sbc	r27, r23

0000528a <__udivmodhi4_ep>:
    528a:	88 1f       	adc	r24, r24
    528c:	99 1f       	adc	r25, r25
    528e:	5a 95       	dec	r21
    5290:	a9 f7       	brne	.-22     	; 0x527c <__udivmodhi4_loop>
    5292:	80 95       	com	r24
    5294:	90 95       	com	r25
    5296:	bc 01       	movw	r22, r24
    5298:	cd 01       	movw	r24, r26
    529a:	08 95       	ret

0000529c <__divmodhi4>:
    529c:	97 fb       	bst	r25, 7
    529e:	09 2e       	mov	r0, r25
    52a0:	07 26       	eor	r0, r23
    52a2:	0a d0       	rcall	.+20     	; 0x52b8 <__divmodhi4_neg1>
    52a4:	77 fd       	sbrc	r23, 7
    52a6:	04 d0       	rcall	.+8      	; 0x52b0 <__divmodhi4_neg2>
    52a8:	e5 df       	rcall	.-54     	; 0x5274 <__udivmodhi4>
    52aa:	06 d0       	rcall	.+12     	; 0x52b8 <__divmodhi4_neg1>
    52ac:	00 20       	and	r0, r0
    52ae:	1a f4       	brpl	.+6      	; 0x52b6 <__divmodhi4_exit>

000052b0 <__divmodhi4_neg2>:
    52b0:	70 95       	com	r23
    52b2:	61 95       	neg	r22
    52b4:	7f 4f       	sbci	r23, 0xFF	; 255

000052b6 <__divmodhi4_exit>:
    52b6:	08 95       	ret

000052b8 <__divmodhi4_neg1>:
    52b8:	f6 f7       	brtc	.-4      	; 0x52b6 <__divmodhi4_exit>
    52ba:	90 95       	com	r25
    52bc:	81 95       	neg	r24
    52be:	9f 4f       	sbci	r25, 0xFF	; 255
    52c0:	08 95       	ret

000052c2 <__udivmodsi4>:
    52c2:	a1 e2       	ldi	r26, 0x21	; 33
    52c4:	1a 2e       	mov	r1, r26
    52c6:	aa 1b       	sub	r26, r26
    52c8:	bb 1b       	sub	r27, r27
    52ca:	fd 01       	movw	r30, r26
    52cc:	0d c0       	rjmp	.+26     	; 0x52e8 <__udivmodsi4_ep>

000052ce <__udivmodsi4_loop>:
    52ce:	aa 1f       	adc	r26, r26
    52d0:	bb 1f       	adc	r27, r27
    52d2:	ee 1f       	adc	r30, r30
    52d4:	ff 1f       	adc	r31, r31
    52d6:	a2 17       	cp	r26, r18
    52d8:	b3 07       	cpc	r27, r19
    52da:	e4 07       	cpc	r30, r20
    52dc:	f5 07       	cpc	r31, r21
    52de:	20 f0       	brcs	.+8      	; 0x52e8 <__udivmodsi4_ep>
    52e0:	a2 1b       	sub	r26, r18
    52e2:	b3 0b       	sbc	r27, r19
    52e4:	e4 0b       	sbc	r30, r20
    52e6:	f5 0b       	sbc	r31, r21

000052e8 <__udivmodsi4_ep>:
    52e8:	66 1f       	adc	r22, r22
    52ea:	77 1f       	adc	r23, r23
    52ec:	88 1f       	adc	r24, r24
    52ee:	99 1f       	adc	r25, r25
    52f0:	1a 94       	dec	r1
    52f2:	69 f7       	brne	.-38     	; 0x52ce <__udivmodsi4_loop>
    52f4:	60 95       	com	r22
    52f6:	70 95       	com	r23
    52f8:	80 95       	com	r24
    52fa:	90 95       	com	r25
    52fc:	9b 01       	movw	r18, r22
    52fe:	ac 01       	movw	r20, r24
    5300:	bd 01       	movw	r22, r26
    5302:	cf 01       	movw	r24, r30
    5304:	08 95       	ret

00005306 <__prologue_saves__>:
    5306:	2f 92       	push	r2
    5308:	3f 92       	push	r3
    530a:	4f 92       	push	r4
    530c:	5f 92       	push	r5
    530e:	6f 92       	push	r6
    5310:	7f 92       	push	r7
    5312:	8f 92       	push	r8
    5314:	9f 92       	push	r9
    5316:	af 92       	push	r10
    5318:	bf 92       	push	r11
    531a:	cf 92       	push	r12
    531c:	df 92       	push	r13
    531e:	ef 92       	push	r14
    5320:	ff 92       	push	r15
    5322:	0f 93       	push	r16
    5324:	1f 93       	push	r17
    5326:	cf 93       	push	r28
    5328:	df 93       	push	r29
    532a:	cd b7       	in	r28, 0x3d	; 61
    532c:	de b7       	in	r29, 0x3e	; 62
    532e:	ca 1b       	sub	r28, r26
    5330:	db 0b       	sbc	r29, r27
    5332:	0f b6       	in	r0, 0x3f	; 63
    5334:	f8 94       	cli
    5336:	de bf       	out	0x3e, r29	; 62
    5338:	0f be       	out	0x3f, r0	; 63
    533a:	cd bf       	out	0x3d, r28	; 61
    533c:	09 94       	ijmp

0000533e <__epilogue_restores__>:
    533e:	2a 88       	ldd	r2, Y+18	; 0x12
    5340:	39 88       	ldd	r3, Y+17	; 0x11
    5342:	48 88       	ldd	r4, Y+16	; 0x10
    5344:	5f 84       	ldd	r5, Y+15	; 0x0f
    5346:	6e 84       	ldd	r6, Y+14	; 0x0e
    5348:	7d 84       	ldd	r7, Y+13	; 0x0d
    534a:	8c 84       	ldd	r8, Y+12	; 0x0c
    534c:	9b 84       	ldd	r9, Y+11	; 0x0b
    534e:	aa 84       	ldd	r10, Y+10	; 0x0a
    5350:	b9 84       	ldd	r11, Y+9	; 0x09
    5352:	c8 84       	ldd	r12, Y+8	; 0x08
    5354:	df 80       	ldd	r13, Y+7	; 0x07
    5356:	ee 80       	ldd	r14, Y+6	; 0x06
    5358:	fd 80       	ldd	r15, Y+5	; 0x05
    535a:	0c 81       	ldd	r16, Y+4	; 0x04
    535c:	1b 81       	ldd	r17, Y+3	; 0x03
    535e:	aa 81       	ldd	r26, Y+2	; 0x02
    5360:	b9 81       	ldd	r27, Y+1	; 0x01
    5362:	ce 0f       	add	r28, r30
    5364:	d1 1d       	adc	r29, r1
    5366:	0f b6       	in	r0, 0x3f	; 63
    5368:	f8 94       	cli
    536a:	de bf       	out	0x3e, r29	; 62
    536c:	0f be       	out	0x3f, r0	; 63
    536e:	cd bf       	out	0x3d, r28	; 61
    5370:	ed 01       	movw	r28, r26
    5372:	08 95       	ret

00005374 <__tablejump2__>:
    5374:	ee 0f       	add	r30, r30
    5376:	ff 1f       	adc	r31, r31

00005378 <__tablejump__>:
    5378:	05 90       	lpm	r0, Z+
    537a:	f4 91       	lpm	r31, Z+
    537c:	e0 2d       	mov	r30, r0
    537e:	09 94       	ijmp

00005380 <acos>:
    5380:	9f 93       	push	r25
    5382:	9f 77       	andi	r25, 0x7F	; 127
    5384:	6e d0       	rcall	.+220    	; 0x5462 <__fp_arccos>
    5386:	0f 90       	pop	r0
    5388:	00 20       	and	r0, r0
    538a:	3a f4       	brpl	.+14     	; 0x539a <acos+0x1a>
    538c:	90 58       	subi	r25, 0x80	; 128
    538e:	a2 ea       	ldi	r26, 0xA2	; 162
    5390:	2a ed       	ldi	r18, 0xDA	; 218
    5392:	3f e0       	ldi	r19, 0x0F	; 15
    5394:	49 e4       	ldi	r20, 0x49	; 73
    5396:	50 e4       	ldi	r21, 0x40	; 64
    5398:	0e d0       	rcall	.+28     	; 0x53b6 <__addsf3x>
    539a:	e2 c0       	rjmp	.+452    	; 0x5560 <__fp_round>
    539c:	ab d0       	rcall	.+342    	; 0x54f4 <__fp_pscA>
    539e:	30 f0       	brcs	.+12     	; 0x53ac <acos+0x2c>
    53a0:	b0 d0       	rcall	.+352    	; 0x5502 <__fp_pscB>
    53a2:	20 f0       	brcs	.+8      	; 0x53ac <acos+0x2c>
    53a4:	31 f4       	brne	.+12     	; 0x53b2 <acos+0x32>
    53a6:	9f 3f       	cpi	r25, 0xFF	; 255
    53a8:	11 f4       	brne	.+4      	; 0x53ae <acos+0x2e>
    53aa:	1e f4       	brtc	.+6      	; 0x53b2 <acos+0x32>
    53ac:	7b c0       	rjmp	.+246    	; 0x54a4 <__fp_nan>
    53ae:	0e f4       	brtc	.+2      	; 0x53b2 <acos+0x32>
    53b0:	e0 95       	com	r30
    53b2:	e7 fb       	bst	r30, 7
    53b4:	71 c0       	rjmp	.+226    	; 0x5498 <__fp_inf>

000053b6 <__addsf3x>:
    53b6:	e9 2f       	mov	r30, r25
    53b8:	f5 d0       	rcall	.+490    	; 0x55a4 <__fp_split3>
    53ba:	80 f3       	brcs	.-32     	; 0x539c <acos+0x1c>
    53bc:	ba 17       	cp	r27, r26
    53be:	62 07       	cpc	r22, r18
    53c0:	73 07       	cpc	r23, r19
    53c2:	84 07       	cpc	r24, r20
    53c4:	95 07       	cpc	r25, r21
    53c6:	18 f0       	brcs	.+6      	; 0x53ce <__addsf3x+0x18>
    53c8:	71 f4       	brne	.+28     	; 0x53e6 <__addsf3x+0x30>
    53ca:	9e f5       	brtc	.+102    	; 0x5432 <__addsf3x+0x7c>
    53cc:	0d c1       	rjmp	.+538    	; 0x55e8 <__fp_zero>
    53ce:	0e f4       	brtc	.+2      	; 0x53d2 <__addsf3x+0x1c>
    53d0:	e0 95       	com	r30
    53d2:	0b 2e       	mov	r0, r27
    53d4:	ba 2f       	mov	r27, r26
    53d6:	a0 2d       	mov	r26, r0
    53d8:	0b 01       	movw	r0, r22
    53da:	b9 01       	movw	r22, r18
    53dc:	90 01       	movw	r18, r0
    53de:	0c 01       	movw	r0, r24
    53e0:	ca 01       	movw	r24, r20
    53e2:	a0 01       	movw	r20, r0
    53e4:	11 24       	eor	r1, r1
    53e6:	ff 27       	eor	r31, r31
    53e8:	59 1b       	sub	r21, r25
    53ea:	99 f0       	breq	.+38     	; 0x5412 <__addsf3x+0x5c>
    53ec:	59 3f       	cpi	r21, 0xF9	; 249
    53ee:	50 f4       	brcc	.+20     	; 0x5404 <__addsf3x+0x4e>
    53f0:	50 3e       	cpi	r21, 0xE0	; 224
    53f2:	68 f1       	brcs	.+90     	; 0x544e <__addsf3x+0x98>
    53f4:	1a 16       	cp	r1, r26
    53f6:	f0 40       	sbci	r31, 0x00	; 0
    53f8:	a2 2f       	mov	r26, r18
    53fa:	23 2f       	mov	r18, r19
    53fc:	34 2f       	mov	r19, r20
    53fe:	44 27       	eor	r20, r20
    5400:	58 5f       	subi	r21, 0xF8	; 248
    5402:	f3 cf       	rjmp	.-26     	; 0x53ea <__addsf3x+0x34>
    5404:	46 95       	lsr	r20
    5406:	37 95       	ror	r19
    5408:	27 95       	ror	r18
    540a:	a7 95       	ror	r26
    540c:	f0 40       	sbci	r31, 0x00	; 0
    540e:	53 95       	inc	r21
    5410:	c9 f7       	brne	.-14     	; 0x5404 <__addsf3x+0x4e>
    5412:	7e f4       	brtc	.+30     	; 0x5432 <__addsf3x+0x7c>
    5414:	1f 16       	cp	r1, r31
    5416:	ba 0b       	sbc	r27, r26
    5418:	62 0b       	sbc	r22, r18
    541a:	73 0b       	sbc	r23, r19
    541c:	84 0b       	sbc	r24, r20
    541e:	ba f0       	brmi	.+46     	; 0x544e <__addsf3x+0x98>
    5420:	91 50       	subi	r25, 0x01	; 1
    5422:	a1 f0       	breq	.+40     	; 0x544c <__addsf3x+0x96>
    5424:	ff 0f       	add	r31, r31
    5426:	bb 1f       	adc	r27, r27
    5428:	66 1f       	adc	r22, r22
    542a:	77 1f       	adc	r23, r23
    542c:	88 1f       	adc	r24, r24
    542e:	c2 f7       	brpl	.-16     	; 0x5420 <__addsf3x+0x6a>
    5430:	0e c0       	rjmp	.+28     	; 0x544e <__addsf3x+0x98>
    5432:	ba 0f       	add	r27, r26
    5434:	62 1f       	adc	r22, r18
    5436:	73 1f       	adc	r23, r19
    5438:	84 1f       	adc	r24, r20
    543a:	48 f4       	brcc	.+18     	; 0x544e <__addsf3x+0x98>
    543c:	87 95       	ror	r24
    543e:	77 95       	ror	r23
    5440:	67 95       	ror	r22
    5442:	b7 95       	ror	r27
    5444:	f7 95       	ror	r31
    5446:	9e 3f       	cpi	r25, 0xFE	; 254
    5448:	08 f0       	brcs	.+2      	; 0x544c <__addsf3x+0x96>
    544a:	b3 cf       	rjmp	.-154    	; 0x53b2 <acos+0x32>
    544c:	93 95       	inc	r25
    544e:	88 0f       	add	r24, r24
    5450:	08 f0       	brcs	.+2      	; 0x5454 <__addsf3x+0x9e>
    5452:	99 27       	eor	r25, r25
    5454:	ee 0f       	add	r30, r30
    5456:	97 95       	ror	r25
    5458:	87 95       	ror	r24
    545a:	08 95       	ret

0000545c <cos>:
    545c:	5a d0       	rcall	.+180    	; 0x5512 <__fp_rempio2>
    545e:	e3 95       	inc	r30
    5460:	90 c0       	rjmp	.+288    	; 0x5582 <__fp_sinus>

00005462 <__fp_arccos>:
    5462:	df 93       	push	r29
    5464:	cf 93       	push	r28
    5466:	1f 93       	push	r17
    5468:	0f 93       	push	r16
    546a:	8b 01       	movw	r16, r22
    546c:	ec 01       	movw	r28, r24
    546e:	ea ef       	ldi	r30, 0xFA	; 250
    5470:	f1 e0       	ldi	r31, 0x01	; 1
    5472:	1b d0       	rcall	.+54     	; 0x54aa <__fp_powser>
    5474:	75 d0       	rcall	.+234    	; 0x5560 <__fp_round>
    5476:	98 01       	movw	r18, r16
    5478:	ae 01       	movw	r20, r28
    547a:	8b 01       	movw	r16, r22
    547c:	ec 01       	movw	r28, r24
    547e:	60 e0       	ldi	r22, 0x00	; 0
    5480:	70 e0       	ldi	r23, 0x00	; 0
    5482:	80 e8       	ldi	r24, 0x80	; 128
    5484:	9f e3       	ldi	r25, 0x3F	; 63
    5486:	75 d9       	rcall	.-3350   	; 0x4772 <__subsf3>
    5488:	1b d1       	rcall	.+566    	; 0x56c0 <sqrt>
    548a:	98 01       	movw	r18, r16
    548c:	ae 01       	movw	r20, r28
    548e:	0f 91       	pop	r16
    5490:	1f 91       	pop	r17
    5492:	cf 91       	pop	r28
    5494:	df 91       	pop	r29
    5496:	b9 c0       	rjmp	.+370    	; 0x560a <__mulsf3x>

00005498 <__fp_inf>:
    5498:	97 f9       	bld	r25, 7
    549a:	9f 67       	ori	r25, 0x7F	; 127
    549c:	80 e8       	ldi	r24, 0x80	; 128
    549e:	70 e0       	ldi	r23, 0x00	; 0
    54a0:	60 e0       	ldi	r22, 0x00	; 0
    54a2:	08 95       	ret

000054a4 <__fp_nan>:
    54a4:	9f ef       	ldi	r25, 0xFF	; 255
    54a6:	80 ec       	ldi	r24, 0xC0	; 192
    54a8:	08 95       	ret

000054aa <__fp_powser>:
    54aa:	df 93       	push	r29
    54ac:	cf 93       	push	r28
    54ae:	1f 93       	push	r17
    54b0:	0f 93       	push	r16
    54b2:	ff 92       	push	r15
    54b4:	ef 92       	push	r14
    54b6:	df 92       	push	r13
    54b8:	7b 01       	movw	r14, r22
    54ba:	8c 01       	movw	r16, r24
    54bc:	68 94       	set
    54be:	05 c0       	rjmp	.+10     	; 0x54ca <__fp_powser+0x20>
    54c0:	da 2e       	mov	r13, r26
    54c2:	ef 01       	movw	r28, r30
    54c4:	a2 d0       	rcall	.+324    	; 0x560a <__mulsf3x>
    54c6:	fe 01       	movw	r30, r28
    54c8:	e8 94       	clt
    54ca:	a5 91       	lpm	r26, Z+
    54cc:	25 91       	lpm	r18, Z+
    54ce:	35 91       	lpm	r19, Z+
    54d0:	45 91       	lpm	r20, Z+
    54d2:	55 91       	lpm	r21, Z+
    54d4:	ae f3       	brts	.-22     	; 0x54c0 <__fp_powser+0x16>
    54d6:	ef 01       	movw	r28, r30
    54d8:	6e df       	rcall	.-292    	; 0x53b6 <__addsf3x>
    54da:	fe 01       	movw	r30, r28
    54dc:	97 01       	movw	r18, r14
    54de:	a8 01       	movw	r20, r16
    54e0:	da 94       	dec	r13
    54e2:	79 f7       	brne	.-34     	; 0x54c2 <__fp_powser+0x18>
    54e4:	df 90       	pop	r13
    54e6:	ef 90       	pop	r14
    54e8:	ff 90       	pop	r15
    54ea:	0f 91       	pop	r16
    54ec:	1f 91       	pop	r17
    54ee:	cf 91       	pop	r28
    54f0:	df 91       	pop	r29
    54f2:	08 95       	ret

000054f4 <__fp_pscA>:
    54f4:	00 24       	eor	r0, r0
    54f6:	0a 94       	dec	r0
    54f8:	16 16       	cp	r1, r22
    54fa:	17 06       	cpc	r1, r23
    54fc:	18 06       	cpc	r1, r24
    54fe:	09 06       	cpc	r0, r25
    5500:	08 95       	ret

00005502 <__fp_pscB>:
    5502:	00 24       	eor	r0, r0
    5504:	0a 94       	dec	r0
    5506:	12 16       	cp	r1, r18
    5508:	13 06       	cpc	r1, r19
    550a:	14 06       	cpc	r1, r20
    550c:	05 06       	cpc	r0, r21
    550e:	08 95       	ret
    5510:	c9 cf       	rjmp	.-110    	; 0x54a4 <__fp_nan>

00005512 <__fp_rempio2>:
    5512:	50 d0       	rcall	.+160    	; 0x55b4 <__fp_splitA>
    5514:	e8 f3       	brcs	.-6      	; 0x5510 <__fp_pscB+0xe>
    5516:	e8 94       	clt
    5518:	e0 e0       	ldi	r30, 0x00	; 0
    551a:	bb 27       	eor	r27, r27
    551c:	9f 57       	subi	r25, 0x7F	; 127
    551e:	f0 f0       	brcs	.+60     	; 0x555c <__fp_rempio2+0x4a>
    5520:	2a ed       	ldi	r18, 0xDA	; 218
    5522:	3f e0       	ldi	r19, 0x0F	; 15
    5524:	49 ec       	ldi	r20, 0xC9	; 201
    5526:	06 c0       	rjmp	.+12     	; 0x5534 <__fp_rempio2+0x22>
    5528:	ee 0f       	add	r30, r30
    552a:	bb 0f       	add	r27, r27
    552c:	66 1f       	adc	r22, r22
    552e:	77 1f       	adc	r23, r23
    5530:	88 1f       	adc	r24, r24
    5532:	28 f0       	brcs	.+10     	; 0x553e <__fp_rempio2+0x2c>
    5534:	b2 3a       	cpi	r27, 0xA2	; 162
    5536:	62 07       	cpc	r22, r18
    5538:	73 07       	cpc	r23, r19
    553a:	84 07       	cpc	r24, r20
    553c:	28 f0       	brcs	.+10     	; 0x5548 <__fp_rempio2+0x36>
    553e:	b2 5a       	subi	r27, 0xA2	; 162
    5540:	62 0b       	sbc	r22, r18
    5542:	73 0b       	sbc	r23, r19
    5544:	84 0b       	sbc	r24, r20
    5546:	e3 95       	inc	r30
    5548:	9a 95       	dec	r25
    554a:	72 f7       	brpl	.-36     	; 0x5528 <__fp_rempio2+0x16>
    554c:	80 38       	cpi	r24, 0x80	; 128
    554e:	30 f4       	brcc	.+12     	; 0x555c <__fp_rempio2+0x4a>
    5550:	9a 95       	dec	r25
    5552:	bb 0f       	add	r27, r27
    5554:	66 1f       	adc	r22, r22
    5556:	77 1f       	adc	r23, r23
    5558:	88 1f       	adc	r24, r24
    555a:	d2 f7       	brpl	.-12     	; 0x5550 <__fp_rempio2+0x3e>
    555c:	90 48       	sbci	r25, 0x80	; 128
    555e:	f0 c0       	rjmp	.+480    	; 0x5740 <__fp_mpack_finite>

00005560 <__fp_round>:
    5560:	09 2e       	mov	r0, r25
    5562:	03 94       	inc	r0
    5564:	00 0c       	add	r0, r0
    5566:	11 f4       	brne	.+4      	; 0x556c <__fp_round+0xc>
    5568:	88 23       	and	r24, r24
    556a:	52 f0       	brmi	.+20     	; 0x5580 <__fp_round+0x20>
    556c:	bb 0f       	add	r27, r27
    556e:	40 f4       	brcc	.+16     	; 0x5580 <__fp_round+0x20>
    5570:	bf 2b       	or	r27, r31
    5572:	11 f4       	brne	.+4      	; 0x5578 <__fp_round+0x18>
    5574:	60 ff       	sbrs	r22, 0
    5576:	04 c0       	rjmp	.+8      	; 0x5580 <__fp_round+0x20>
    5578:	6f 5f       	subi	r22, 0xFF	; 255
    557a:	7f 4f       	sbci	r23, 0xFF	; 255
    557c:	8f 4f       	sbci	r24, 0xFF	; 255
    557e:	9f 4f       	sbci	r25, 0xFF	; 255
    5580:	08 95       	ret

00005582 <__fp_sinus>:
    5582:	ef 93       	push	r30
    5584:	e0 ff       	sbrs	r30, 0
    5586:	06 c0       	rjmp	.+12     	; 0x5594 <__fp_sinus+0x12>
    5588:	a2 ea       	ldi	r26, 0xA2	; 162
    558a:	2a ed       	ldi	r18, 0xDA	; 218
    558c:	3f e0       	ldi	r19, 0x0F	; 15
    558e:	49 ec       	ldi	r20, 0xC9	; 201
    5590:	5f eb       	ldi	r21, 0xBF	; 191
    5592:	11 df       	rcall	.-478    	; 0x53b6 <__addsf3x>
    5594:	e5 df       	rcall	.-54     	; 0x5560 <__fp_round>
    5596:	0f 90       	pop	r0
    5598:	03 94       	inc	r0
    559a:	01 fc       	sbrc	r0, 1
    559c:	90 58       	subi	r25, 0x80	; 128
    559e:	e2 e2       	ldi	r30, 0x22	; 34
    55a0:	f2 e0       	ldi	r31, 0x02	; 2
    55a2:	e1 c0       	rjmp	.+450    	; 0x5766 <__fp_powsodd>

000055a4 <__fp_split3>:
    55a4:	57 fd       	sbrc	r21, 7
    55a6:	90 58       	subi	r25, 0x80	; 128
    55a8:	44 0f       	add	r20, r20
    55aa:	55 1f       	adc	r21, r21
    55ac:	59 f0       	breq	.+22     	; 0x55c4 <__fp_splitA+0x10>
    55ae:	5f 3f       	cpi	r21, 0xFF	; 255
    55b0:	71 f0       	breq	.+28     	; 0x55ce <__fp_splitA+0x1a>
    55b2:	47 95       	ror	r20

000055b4 <__fp_splitA>:
    55b4:	88 0f       	add	r24, r24
    55b6:	97 fb       	bst	r25, 7
    55b8:	99 1f       	adc	r25, r25
    55ba:	61 f0       	breq	.+24     	; 0x55d4 <__fp_splitA+0x20>
    55bc:	9f 3f       	cpi	r25, 0xFF	; 255
    55be:	79 f0       	breq	.+30     	; 0x55de <__fp_splitA+0x2a>
    55c0:	87 95       	ror	r24
    55c2:	08 95       	ret
    55c4:	12 16       	cp	r1, r18
    55c6:	13 06       	cpc	r1, r19
    55c8:	14 06       	cpc	r1, r20
    55ca:	55 1f       	adc	r21, r21
    55cc:	f2 cf       	rjmp	.-28     	; 0x55b2 <__fp_split3+0xe>
    55ce:	46 95       	lsr	r20
    55d0:	f1 df       	rcall	.-30     	; 0x55b4 <__fp_splitA>
    55d2:	08 c0       	rjmp	.+16     	; 0x55e4 <__fp_splitA+0x30>
    55d4:	16 16       	cp	r1, r22
    55d6:	17 06       	cpc	r1, r23
    55d8:	18 06       	cpc	r1, r24
    55da:	99 1f       	adc	r25, r25
    55dc:	f1 cf       	rjmp	.-30     	; 0x55c0 <__fp_splitA+0xc>
    55de:	86 95       	lsr	r24
    55e0:	71 05       	cpc	r23, r1
    55e2:	61 05       	cpc	r22, r1
    55e4:	08 94       	sec
    55e6:	08 95       	ret

000055e8 <__fp_zero>:
    55e8:	e8 94       	clt

000055ea <__fp_szero>:
    55ea:	bb 27       	eor	r27, r27
    55ec:	66 27       	eor	r22, r22
    55ee:	77 27       	eor	r23, r23
    55f0:	cb 01       	movw	r24, r22
    55f2:	97 f9       	bld	r25, 7
    55f4:	08 95       	ret
    55f6:	7e df       	rcall	.-260    	; 0x54f4 <__fp_pscA>
    55f8:	28 f0       	brcs	.+10     	; 0x5604 <__fp_szero+0x1a>
    55fa:	83 df       	rcall	.-250    	; 0x5502 <__fp_pscB>
    55fc:	18 f0       	brcs	.+6      	; 0x5604 <__fp_szero+0x1a>
    55fe:	95 23       	and	r25, r21
    5600:	09 f0       	breq	.+2      	; 0x5604 <__fp_szero+0x1a>
    5602:	4a cf       	rjmp	.-364    	; 0x5498 <__fp_inf>
    5604:	4f cf       	rjmp	.-354    	; 0x54a4 <__fp_nan>
    5606:	11 24       	eor	r1, r1
    5608:	f0 cf       	rjmp	.-32     	; 0x55ea <__fp_szero>

0000560a <__mulsf3x>:
    560a:	cc df       	rcall	.-104    	; 0x55a4 <__fp_split3>
    560c:	a0 f3       	brcs	.-24     	; 0x55f6 <__fp_szero+0xc>

0000560e <__mulsf3_pse>:
    560e:	95 9f       	mul	r25, r21
    5610:	d1 f3       	breq	.-12     	; 0x5606 <__fp_szero+0x1c>
    5612:	95 0f       	add	r25, r21
    5614:	50 e0       	ldi	r21, 0x00	; 0
    5616:	55 1f       	adc	r21, r21
    5618:	62 9f       	mul	r22, r18
    561a:	f0 01       	movw	r30, r0
    561c:	72 9f       	mul	r23, r18
    561e:	bb 27       	eor	r27, r27
    5620:	f0 0d       	add	r31, r0
    5622:	b1 1d       	adc	r27, r1
    5624:	63 9f       	mul	r22, r19
    5626:	aa 27       	eor	r26, r26
    5628:	f0 0d       	add	r31, r0
    562a:	b1 1d       	adc	r27, r1
    562c:	aa 1f       	adc	r26, r26
    562e:	64 9f       	mul	r22, r20
    5630:	66 27       	eor	r22, r22
    5632:	b0 0d       	add	r27, r0
    5634:	a1 1d       	adc	r26, r1
    5636:	66 1f       	adc	r22, r22
    5638:	82 9f       	mul	r24, r18
    563a:	22 27       	eor	r18, r18
    563c:	b0 0d       	add	r27, r0
    563e:	a1 1d       	adc	r26, r1
    5640:	62 1f       	adc	r22, r18
    5642:	73 9f       	mul	r23, r19
    5644:	b0 0d       	add	r27, r0
    5646:	a1 1d       	adc	r26, r1
    5648:	62 1f       	adc	r22, r18
    564a:	83 9f       	mul	r24, r19
    564c:	a0 0d       	add	r26, r0
    564e:	61 1d       	adc	r22, r1
    5650:	22 1f       	adc	r18, r18
    5652:	74 9f       	mul	r23, r20
    5654:	33 27       	eor	r19, r19
    5656:	a0 0d       	add	r26, r0
    5658:	61 1d       	adc	r22, r1
    565a:	23 1f       	adc	r18, r19
    565c:	84 9f       	mul	r24, r20
    565e:	60 0d       	add	r22, r0
    5660:	21 1d       	adc	r18, r1
    5662:	82 2f       	mov	r24, r18
    5664:	76 2f       	mov	r23, r22
    5666:	6a 2f       	mov	r22, r26
    5668:	11 24       	eor	r1, r1
    566a:	9f 57       	subi	r25, 0x7F	; 127
    566c:	50 40       	sbci	r21, 0x00	; 0
    566e:	8a f0       	brmi	.+34     	; 0x5692 <__mulsf3_pse+0x84>
    5670:	e1 f0       	breq	.+56     	; 0x56aa <__mulsf3_pse+0x9c>
    5672:	88 23       	and	r24, r24
    5674:	4a f0       	brmi	.+18     	; 0x5688 <__mulsf3_pse+0x7a>
    5676:	ee 0f       	add	r30, r30
    5678:	ff 1f       	adc	r31, r31
    567a:	bb 1f       	adc	r27, r27
    567c:	66 1f       	adc	r22, r22
    567e:	77 1f       	adc	r23, r23
    5680:	88 1f       	adc	r24, r24
    5682:	91 50       	subi	r25, 0x01	; 1
    5684:	50 40       	sbci	r21, 0x00	; 0
    5686:	a9 f7       	brne	.-22     	; 0x5672 <__mulsf3_pse+0x64>
    5688:	9e 3f       	cpi	r25, 0xFE	; 254
    568a:	51 05       	cpc	r21, r1
    568c:	70 f0       	brcs	.+28     	; 0x56aa <__mulsf3_pse+0x9c>
    568e:	04 cf       	rjmp	.-504    	; 0x5498 <__fp_inf>
    5690:	ac cf       	rjmp	.-168    	; 0x55ea <__fp_szero>
    5692:	5f 3f       	cpi	r21, 0xFF	; 255
    5694:	ec f3       	brlt	.-6      	; 0x5690 <__mulsf3_pse+0x82>
    5696:	98 3e       	cpi	r25, 0xE8	; 232
    5698:	dc f3       	brlt	.-10     	; 0x5690 <__mulsf3_pse+0x82>
    569a:	86 95       	lsr	r24
    569c:	77 95       	ror	r23
    569e:	67 95       	ror	r22
    56a0:	b7 95       	ror	r27
    56a2:	f7 95       	ror	r31
    56a4:	e7 95       	ror	r30
    56a6:	9f 5f       	subi	r25, 0xFF	; 255
    56a8:	c1 f7       	brne	.-16     	; 0x569a <__mulsf3_pse+0x8c>
    56aa:	fe 2b       	or	r31, r30
    56ac:	88 0f       	add	r24, r24
    56ae:	91 1d       	adc	r25, r1
    56b0:	96 95       	lsr	r25
    56b2:	87 95       	ror	r24
    56b4:	97 f9       	bld	r25, 7
    56b6:	08 95       	ret
    56b8:	11 f4       	brne	.+4      	; 0x56be <__mulsf3_pse+0xb0>
    56ba:	0e f4       	brtc	.+2      	; 0x56be <__mulsf3_pse+0xb0>
    56bc:	f3 ce       	rjmp	.-538    	; 0x54a4 <__fp_nan>
    56be:	3e c0       	rjmp	.+124    	; 0x573c <__fp_mpack>

000056c0 <sqrt>:
    56c0:	79 df       	rcall	.-270    	; 0x55b4 <__fp_splitA>
    56c2:	d0 f3       	brcs	.-12     	; 0x56b8 <__mulsf3_pse+0xaa>
    56c4:	99 23       	and	r25, r25
    56c6:	d9 f3       	breq	.-10     	; 0x56be <__mulsf3_pse+0xb0>
    56c8:	ce f3       	brts	.-14     	; 0x56bc <__mulsf3_pse+0xae>
    56ca:	9f 57       	subi	r25, 0x7F	; 127
    56cc:	55 0b       	sbc	r21, r21
    56ce:	87 ff       	sbrs	r24, 7
    56d0:	43 d0       	rcall	.+134    	; 0x5758 <__fp_norm2>
    56d2:	00 24       	eor	r0, r0
    56d4:	a0 e6       	ldi	r26, 0x60	; 96
    56d6:	40 ea       	ldi	r20, 0xA0	; 160
    56d8:	90 01       	movw	r18, r0
    56da:	80 58       	subi	r24, 0x80	; 128
    56dc:	56 95       	lsr	r21
    56de:	97 95       	ror	r25
    56e0:	28 f4       	brcc	.+10     	; 0x56ec <sqrt+0x2c>
    56e2:	80 5c       	subi	r24, 0xC0	; 192
    56e4:	66 0f       	add	r22, r22
    56e6:	77 1f       	adc	r23, r23
    56e8:	88 1f       	adc	r24, r24
    56ea:	20 f0       	brcs	.+8      	; 0x56f4 <sqrt+0x34>
    56ec:	26 17       	cp	r18, r22
    56ee:	37 07       	cpc	r19, r23
    56f0:	48 07       	cpc	r20, r24
    56f2:	30 f4       	brcc	.+12     	; 0x5700 <sqrt+0x40>
    56f4:	62 1b       	sub	r22, r18
    56f6:	73 0b       	sbc	r23, r19
    56f8:	84 0b       	sbc	r24, r20
    56fa:	20 29       	or	r18, r0
    56fc:	31 29       	or	r19, r1
    56fe:	4a 2b       	or	r20, r26
    5700:	a6 95       	lsr	r26
    5702:	17 94       	ror	r1
    5704:	07 94       	ror	r0
    5706:	20 25       	eor	r18, r0
    5708:	31 25       	eor	r19, r1
    570a:	4a 27       	eor	r20, r26
    570c:	58 f7       	brcc	.-42     	; 0x56e4 <sqrt+0x24>
    570e:	66 0f       	add	r22, r22
    5710:	77 1f       	adc	r23, r23
    5712:	88 1f       	adc	r24, r24
    5714:	20 f0       	brcs	.+8      	; 0x571e <sqrt+0x5e>
    5716:	26 17       	cp	r18, r22
    5718:	37 07       	cpc	r19, r23
    571a:	48 07       	cpc	r20, r24
    571c:	30 f4       	brcc	.+12     	; 0x572a <sqrt+0x6a>
    571e:	62 0b       	sbc	r22, r18
    5720:	73 0b       	sbc	r23, r19
    5722:	84 0b       	sbc	r24, r20
    5724:	20 0d       	add	r18, r0
    5726:	31 1d       	adc	r19, r1
    5728:	41 1d       	adc	r20, r1
    572a:	a0 95       	com	r26
    572c:	81 f7       	brne	.-32     	; 0x570e <sqrt+0x4e>
    572e:	b9 01       	movw	r22, r18
    5730:	84 2f       	mov	r24, r20
    5732:	91 58       	subi	r25, 0x81	; 129
    5734:	88 0f       	add	r24, r24
    5736:	96 95       	lsr	r25
    5738:	87 95       	ror	r24
    573a:	08 95       	ret

0000573c <__fp_mpack>:
    573c:	9f 3f       	cpi	r25, 0xFF	; 255
    573e:	31 f0       	breq	.+12     	; 0x574c <__fp_mpack_finite+0xc>

00005740 <__fp_mpack_finite>:
    5740:	91 50       	subi	r25, 0x01	; 1
    5742:	20 f4       	brcc	.+8      	; 0x574c <__fp_mpack_finite+0xc>
    5744:	87 95       	ror	r24
    5746:	77 95       	ror	r23
    5748:	67 95       	ror	r22
    574a:	b7 95       	ror	r27
    574c:	88 0f       	add	r24, r24
    574e:	91 1d       	adc	r25, r1
    5750:	96 95       	lsr	r25
    5752:	87 95       	ror	r24
    5754:	97 f9       	bld	r25, 7
    5756:	08 95       	ret

00005758 <__fp_norm2>:
    5758:	91 50       	subi	r25, 0x01	; 1
    575a:	50 40       	sbci	r21, 0x00	; 0
    575c:	66 0f       	add	r22, r22
    575e:	77 1f       	adc	r23, r23
    5760:	88 1f       	adc	r24, r24
    5762:	d2 f7       	brpl	.-12     	; 0x5758 <__fp_norm2>
    5764:	08 95       	ret

00005766 <__fp_powsodd>:
    5766:	9f 93       	push	r25
    5768:	8f 93       	push	r24
    576a:	7f 93       	push	r23
    576c:	6f 93       	push	r22
    576e:	ff 93       	push	r31
    5770:	ef 93       	push	r30
    5772:	9b 01       	movw	r18, r22
    5774:	ac 01       	movw	r20, r24
    5776:	5b d8       	rcall	.-3914   	; 0x482e <__mulsf3>
    5778:	ef 91       	pop	r30
    577a:	ff 91       	pop	r31
    577c:	96 de       	rcall	.-724    	; 0x54aa <__fp_powser>
    577e:	2f 91       	pop	r18
    5780:	3f 91       	pop	r19
    5782:	4f 91       	pop	r20
    5784:	5f 91       	pop	r21
    5786:	53 c8       	rjmp	.-3930   	; 0x482e <__mulsf3>

00005788 <calloc>:
    5788:	ef 92       	push	r14
    578a:	ff 92       	push	r15
    578c:	0f 93       	push	r16
    578e:	1f 93       	push	r17
    5790:	cf 93       	push	r28
    5792:	df 93       	push	r29
    5794:	68 9f       	mul	r22, r24
    5796:	80 01       	movw	r16, r0
    5798:	69 9f       	mul	r22, r25
    579a:	10 0d       	add	r17, r0
    579c:	78 9f       	mul	r23, r24
    579e:	10 0d       	add	r17, r0
    57a0:	11 24       	eor	r1, r1
    57a2:	c8 01       	movw	r24, r16
    57a4:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <malloc>
    57a8:	e8 2e       	mov	r14, r24
    57aa:	e7 01       	movw	r28, r14
    57ac:	7e 01       	movw	r14, r28
    57ae:	f9 2e       	mov	r15, r25
    57b0:	e7 01       	movw	r28, r14
    57b2:	e1 14       	cp	r14, r1
    57b4:	f1 04       	cpc	r15, r1
    57b6:	31 f0       	breq	.+12     	; 0x57c4 <calloc+0x3c>
    57b8:	8e 2d       	mov	r24, r14
    57ba:	60 e0       	ldi	r22, 0x00	; 0
    57bc:	70 e0       	ldi	r23, 0x00	; 0
    57be:	a8 01       	movw	r20, r16
    57c0:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <memset>
    57c4:	7e 01       	movw	r14, r28
    57c6:	ce 01       	movw	r24, r28
    57c8:	cd b7       	in	r28, 0x3d	; 61
    57ca:	de b7       	in	r29, 0x3e	; 62
    57cc:	e6 e0       	ldi	r30, 0x06	; 6
    57ce:	0c 94 ab 29 	jmp	0x5356	; 0x5356 <__epilogue_restores__+0x18>

000057d2 <malloc>:
    57d2:	ef 92       	push	r14
    57d4:	ff 92       	push	r15
    57d6:	0f 93       	push	r16
    57d8:	1f 93       	push	r17
    57da:	cf 93       	push	r28
    57dc:	df 93       	push	r29
    57de:	82 30       	cpi	r24, 0x02	; 2
    57e0:	91 05       	cpc	r25, r1
    57e2:	10 f4       	brcc	.+4      	; 0x57e8 <malloc+0x16>
    57e4:	82 e0       	ldi	r24, 0x02	; 2
    57e6:	90 e0       	ldi	r25, 0x00	; 0
    57e8:	c0 91 a1 04 	lds	r28, 0x04A1
    57ec:	d0 91 a2 04 	lds	r29, 0x04A2
    57f0:	20 e0       	ldi	r18, 0x00	; 0
    57f2:	30 e0       	ldi	r19, 0x00	; 0
    57f4:	40 e0       	ldi	r20, 0x00	; 0
    57f6:	50 e0       	ldi	r21, 0x00	; 0
    57f8:	29 c0       	rjmp	.+82     	; 0x584c <malloc+0x7a>
    57fa:	68 81       	ld	r22, Y
    57fc:	79 81       	ldd	r23, Y+1	; 0x01
    57fe:	68 17       	cp	r22, r24
    5800:	79 07       	cpc	r23, r25
    5802:	d8 f0       	brcs	.+54     	; 0x583a <malloc+0x68>
    5804:	68 17       	cp	r22, r24
    5806:	79 07       	cpc	r23, r25
    5808:	79 f4       	brne	.+30     	; 0x5828 <malloc+0x56>
    580a:	8a 81       	ldd	r24, Y+2	; 0x02
    580c:	9b 81       	ldd	r25, Y+3	; 0x03
    580e:	21 15       	cp	r18, r1
    5810:	31 05       	cpc	r19, r1
    5812:	21 f0       	breq	.+8      	; 0x581c <malloc+0x4a>
    5814:	f9 01       	movw	r30, r18
    5816:	93 83       	std	Z+3, r25	; 0x03
    5818:	82 83       	std	Z+2, r24	; 0x02
    581a:	04 c0       	rjmp	.+8      	; 0x5824 <malloc+0x52>
    581c:	90 93 a2 04 	sts	0x04A2, r25
    5820:	80 93 a1 04 	sts	0x04A1, r24
    5824:	de 01       	movw	r26, r28
    5826:	2a c0       	rjmp	.+84     	; 0x587c <malloc+0xaa>
    5828:	41 15       	cp	r20, r1
    582a:	51 05       	cpc	r21, r1
    582c:	19 f0       	breq	.+6      	; 0x5834 <malloc+0x62>
    582e:	64 17       	cp	r22, r20
    5830:	75 07       	cpc	r23, r21
    5832:	18 f4       	brcc	.+6      	; 0x583a <malloc+0x68>
    5834:	fe 01       	movw	r30, r28
    5836:	ab 01       	movw	r20, r22
    5838:	d9 01       	movw	r26, r18
    583a:	9e 01       	movw	r18, r28
    583c:	7a 81       	ldd	r23, Y+2	; 0x02
    583e:	6b 81       	ldd	r22, Y+3	; 0x03
    5840:	e7 2e       	mov	r14, r23
    5842:	e7 01       	movw	r28, r14
    5844:	7e 01       	movw	r14, r28
    5846:	06 2f       	mov	r16, r22
    5848:	f6 2e       	mov	r15, r22
    584a:	e7 01       	movw	r28, r14
    584c:	20 97       	sbiw	r28, 0x00	; 0
    584e:	a9 f6       	brne	.-86     	; 0x57fa <malloc+0x28>
    5850:	41 15       	cp	r20, r1
    5852:	51 05       	cpc	r21, r1
    5854:	f9 f0       	breq	.+62     	; 0x5894 <malloc+0xc2>
    5856:	48 1b       	sub	r20, r24
    5858:	59 0b       	sbc	r21, r25
    585a:	44 30       	cpi	r20, 0x04	; 4
    585c:	51 05       	cpc	r21, r1
    585e:	80 f4       	brcc	.+32     	; 0x5880 <malloc+0xae>
    5860:	82 81       	ldd	r24, Z+2	; 0x02
    5862:	93 81       	ldd	r25, Z+3	; 0x03
    5864:	10 97       	sbiw	r26, 0x00	; 0
    5866:	29 f0       	breq	.+10     	; 0x5872 <malloc+0xa0>
    5868:	13 96       	adiw	r26, 0x03	; 3
    586a:	9c 93       	st	X, r25
    586c:	8e 93       	st	-X, r24
    586e:	12 97       	sbiw	r26, 0x02	; 2
    5870:	04 c0       	rjmp	.+8      	; 0x587a <malloc+0xa8>
    5872:	90 93 a2 04 	sts	0x04A2, r25
    5876:	80 93 a1 04 	sts	0x04A1, r24
    587a:	df 01       	movw	r26, r30
    587c:	12 96       	adiw	r26, 0x02	; 2
    587e:	45 c0       	rjmp	.+138    	; 0x590a <malloc+0x138>
    5880:	df 01       	movw	r26, r30
    5882:	a4 0f       	add	r26, r20
    5884:	b5 1f       	adc	r27, r21
    5886:	8d 93       	st	X+, r24
    5888:	9d 93       	st	X+, r25
    588a:	42 50       	subi	r20, 0x02	; 2
    588c:	50 40       	sbci	r21, 0x00	; 0
    588e:	51 83       	std	Z+1, r21	; 0x01
    5890:	40 83       	st	Z, r20
    5892:	3b c0       	rjmp	.+118    	; 0x590a <malloc+0x138>
    5894:	20 91 9f 04 	lds	r18, 0x049F
    5898:	30 91 a0 04 	lds	r19, 0x04A0
    589c:	21 15       	cp	r18, r1
    589e:	31 05       	cpc	r19, r1
    58a0:	41 f4       	brne	.+16     	; 0x58b2 <malloc+0xe0>
    58a2:	20 91 06 03 	lds	r18, 0x0306
    58a6:	30 91 07 03 	lds	r19, 0x0307
    58aa:	30 93 a0 04 	sts	0x04A0, r19
    58ae:	20 93 9f 04 	sts	0x049F, r18
    58b2:	20 91 08 03 	lds	r18, 0x0308
    58b6:	30 91 09 03 	lds	r19, 0x0309
    58ba:	21 15       	cp	r18, r1
    58bc:	31 05       	cpc	r19, r1
    58be:	41 f4       	brne	.+16     	; 0x58d0 <malloc+0xfe>
    58c0:	2d b7       	in	r18, 0x3d	; 61
    58c2:	3e b7       	in	r19, 0x3e	; 62
    58c4:	40 91 04 03 	lds	r20, 0x0304
    58c8:	50 91 05 03 	lds	r21, 0x0305
    58cc:	24 1b       	sub	r18, r20
    58ce:	35 0b       	sbc	r19, r21
    58d0:	a0 91 9f 04 	lds	r26, 0x049F
    58d4:	b0 91 a0 04 	lds	r27, 0x04A0
    58d8:	a2 17       	cp	r26, r18
    58da:	b3 07       	cpc	r27, r19
    58dc:	a0 f4       	brcc	.+40     	; 0x5906 <malloc+0x134>
    58de:	2a 1b       	sub	r18, r26
    58e0:	3b 0b       	sbc	r19, r27
    58e2:	28 17       	cp	r18, r24
    58e4:	39 07       	cpc	r19, r25
    58e6:	78 f0       	brcs	.+30     	; 0x5906 <malloc+0x134>
    58e8:	ac 01       	movw	r20, r24
    58ea:	4e 5f       	subi	r20, 0xFE	; 254
    58ec:	5f 4f       	sbci	r21, 0xFF	; 255
    58ee:	24 17       	cp	r18, r20
    58f0:	35 07       	cpc	r19, r21
    58f2:	48 f0       	brcs	.+18     	; 0x5906 <malloc+0x134>
    58f4:	4a 0f       	add	r20, r26
    58f6:	5b 1f       	adc	r21, r27
    58f8:	50 93 a0 04 	sts	0x04A0, r21
    58fc:	40 93 9f 04 	sts	0x049F, r20
    5900:	8d 93       	st	X+, r24
    5902:	9d 93       	st	X+, r25
    5904:	02 c0       	rjmp	.+4      	; 0x590a <malloc+0x138>
    5906:	a0 e0       	ldi	r26, 0x00	; 0
    5908:	b0 e0       	ldi	r27, 0x00	; 0
    590a:	cd 01       	movw	r24, r26
    590c:	cd b7       	in	r28, 0x3d	; 61
    590e:	de b7       	in	r29, 0x3e	; 62
    5910:	e6 e0       	ldi	r30, 0x06	; 6
    5912:	0c 94 ab 29 	jmp	0x5356	; 0x5356 <__epilogue_restores__+0x18>

00005916 <free>:
    5916:	cf 93       	push	r28
    5918:	df 93       	push	r29
    591a:	00 97       	sbiw	r24, 0x00	; 0
    591c:	09 f4       	brne	.+2      	; 0x5920 <free+0xa>
    591e:	8f c0       	rjmp	.+286    	; 0x5a3e <free+0x128>
    5920:	fc 01       	movw	r30, r24
    5922:	32 97       	sbiw	r30, 0x02	; 2
    5924:	13 82       	std	Z+3, r1	; 0x03
    5926:	12 82       	std	Z+2, r1	; 0x02
    5928:	60 91 a1 04 	lds	r22, 0x04A1
    592c:	70 91 a2 04 	lds	r23, 0x04A2
    5930:	61 15       	cp	r22, r1
    5932:	71 05       	cpc	r23, r1
    5934:	81 f4       	brne	.+32     	; 0x5956 <free+0x40>
    5936:	20 81       	ld	r18, Z
    5938:	31 81       	ldd	r19, Z+1	; 0x01
    593a:	28 0f       	add	r18, r24
    593c:	39 1f       	adc	r19, r25
    593e:	80 91 9f 04 	lds	r24, 0x049F
    5942:	90 91 a0 04 	lds	r25, 0x04A0
    5946:	82 17       	cp	r24, r18
    5948:	93 07       	cpc	r25, r19
    594a:	61 f5       	brne	.+88     	; 0x59a4 <free+0x8e>
    594c:	f0 93 a0 04 	sts	0x04A0, r31
    5950:	e0 93 9f 04 	sts	0x049F, r30
    5954:	74 c0       	rjmp	.+232    	; 0x5a3e <free+0x128>
    5956:	eb 01       	movw	r28, r22
    5958:	80 e0       	ldi	r24, 0x00	; 0
    595a:	90 e0       	ldi	r25, 0x00	; 0
    595c:	ce 17       	cp	r28, r30
    595e:	df 07       	cpc	r29, r31
    5960:	40 f4       	brcc	.+16     	; 0x5972 <free+0x5c>
    5962:	2a 81       	ldd	r18, Y+2	; 0x02
    5964:	3b 81       	ldd	r19, Y+3	; 0x03
    5966:	ce 01       	movw	r24, r28
    5968:	21 15       	cp	r18, r1
    596a:	31 05       	cpc	r19, r1
    596c:	01 f1       	breq	.+64     	; 0x59ae <free+0x98>
    596e:	e9 01       	movw	r28, r18
    5970:	f5 cf       	rjmp	.-22     	; 0x595c <free+0x46>
    5972:	d3 83       	std	Z+3, r29	; 0x03
    5974:	c2 83       	std	Z+2, r28	; 0x02
    5976:	df 01       	movw	r26, r30
    5978:	4d 91       	ld	r20, X+
    597a:	5d 91       	ld	r21, X+
    597c:	9d 01       	movw	r18, r26
    597e:	24 0f       	add	r18, r20
    5980:	35 1f       	adc	r19, r21
    5982:	c2 17       	cp	r28, r18
    5984:	d3 07       	cpc	r29, r19
    5986:	61 f4       	brne	.+24     	; 0x59a0 <free+0x8a>
    5988:	28 81       	ld	r18, Y
    598a:	39 81       	ldd	r19, Y+1	; 0x01
    598c:	24 0f       	add	r18, r20
    598e:	35 1f       	adc	r19, r21
    5990:	2e 5f       	subi	r18, 0xFE	; 254
    5992:	3f 4f       	sbci	r19, 0xFF	; 255
    5994:	31 83       	std	Z+1, r19	; 0x01
    5996:	20 83       	st	Z, r18
    5998:	2a 81       	ldd	r18, Y+2	; 0x02
    599a:	3b 81       	ldd	r19, Y+3	; 0x03
    599c:	33 83       	std	Z+3, r19	; 0x03
    599e:	22 83       	std	Z+2, r18	; 0x02
    59a0:	00 97       	sbiw	r24, 0x00	; 0
    59a2:	29 f4       	brne	.+10     	; 0x59ae <free+0x98>
    59a4:	f0 93 a2 04 	sts	0x04A2, r31
    59a8:	e0 93 a1 04 	sts	0x04A1, r30
    59ac:	48 c0       	rjmp	.+144    	; 0x5a3e <free+0x128>
    59ae:	dc 01       	movw	r26, r24
    59b0:	13 96       	adiw	r26, 0x03	; 3
    59b2:	fc 93       	st	X, r31
    59b4:	ee 93       	st	-X, r30
    59b6:	12 97       	sbiw	r26, 0x02	; 2
    59b8:	ec 01       	movw	r28, r24
    59ba:	49 91       	ld	r20, Y+
    59bc:	59 91       	ld	r21, Y+
    59be:	c4 0f       	add	r28, r20
    59c0:	d5 1f       	adc	r29, r21
    59c2:	ec 17       	cp	r30, r28
    59c4:	fd 07       	cpc	r31, r29
    59c6:	79 f4       	brne	.+30     	; 0x59e6 <free+0xd0>
    59c8:	20 81       	ld	r18, Z
    59ca:	31 81       	ldd	r19, Z+1	; 0x01
    59cc:	24 0f       	add	r18, r20
    59ce:	35 1f       	adc	r19, r21
    59d0:	2e 5f       	subi	r18, 0xFE	; 254
    59d2:	3f 4f       	sbci	r19, 0xFF	; 255
    59d4:	11 96       	adiw	r26, 0x01	; 1
    59d6:	3c 93       	st	X, r19
    59d8:	2e 93       	st	-X, r18
    59da:	22 81       	ldd	r18, Z+2	; 0x02
    59dc:	33 81       	ldd	r19, Z+3	; 0x03
    59de:	13 96       	adiw	r26, 0x03	; 3
    59e0:	3c 93       	st	X, r19
    59e2:	2e 93       	st	-X, r18
    59e4:	12 97       	sbiw	r26, 0x02	; 2
    59e6:	e0 e0       	ldi	r30, 0x00	; 0
    59e8:	f0 e0       	ldi	r31, 0x00	; 0
    59ea:	db 01       	movw	r26, r22
    59ec:	12 96       	adiw	r26, 0x02	; 2
    59ee:	8d 91       	ld	r24, X+
    59f0:	9c 91       	ld	r25, X
    59f2:	13 97       	sbiw	r26, 0x03	; 3
    59f4:	00 97       	sbiw	r24, 0x00	; 0
    59f6:	21 f0       	breq	.+8      	; 0x5a00 <free+0xea>
    59f8:	e6 2f       	mov	r30, r22
    59fa:	f7 2f       	mov	r31, r23
    59fc:	bc 01       	movw	r22, r24
    59fe:	f5 cf       	rjmp	.-22     	; 0x59ea <free+0xd4>
    5a00:	9b 01       	movw	r18, r22
    5a02:	2e 5f       	subi	r18, 0xFE	; 254
    5a04:	3f 4f       	sbci	r19, 0xFF	; 255
    5a06:	db 01       	movw	r26, r22
    5a08:	8d 91       	ld	r24, X+
    5a0a:	9c 91       	ld	r25, X
    5a0c:	11 97       	sbiw	r26, 0x01	; 1
    5a0e:	82 0f       	add	r24, r18
    5a10:	93 1f       	adc	r25, r19
    5a12:	40 91 9f 04 	lds	r20, 0x049F
    5a16:	50 91 a0 04 	lds	r21, 0x04A0
    5a1a:	48 17       	cp	r20, r24
    5a1c:	59 07       	cpc	r21, r25
    5a1e:	79 f4       	brne	.+30     	; 0x5a3e <free+0x128>
    5a20:	30 97       	sbiw	r30, 0x00	; 0
    5a22:	29 f4       	brne	.+10     	; 0x5a2e <free+0x118>
    5a24:	10 92 a2 04 	sts	0x04A2, r1
    5a28:	10 92 a1 04 	sts	0x04A1, r1
    5a2c:	02 c0       	rjmp	.+4      	; 0x5a32 <free+0x11c>
    5a2e:	13 82       	std	Z+3, r1	; 0x03
    5a30:	12 82       	std	Z+2, r1	; 0x02
    5a32:	22 50       	subi	r18, 0x02	; 2
    5a34:	30 40       	sbci	r19, 0x00	; 0
    5a36:	30 93 a0 04 	sts	0x04A0, r19
    5a3a:	20 93 9f 04 	sts	0x049F, r18
    5a3e:	df 91       	pop	r29
    5a40:	cf 91       	pop	r28
    5a42:	08 95       	ret

00005a44 <realloc>:
    5a44:	a0 e0       	ldi	r26, 0x00	; 0
    5a46:	b0 e0       	ldi	r27, 0x00	; 0
    5a48:	e8 e2       	ldi	r30, 0x28	; 40
    5a4a:	fd e2       	ldi	r31, 0x2D	; 45
    5a4c:	0c 94 87 29 	jmp	0x530e	; 0x530e <__prologue_saves__+0x8>
    5a50:	ec 01       	movw	r28, r24
    5a52:	cb 01       	movw	r24, r22
    5a54:	20 97       	sbiw	r28, 0x00	; 0
    5a56:	41 f4       	brne	.+16     	; 0x5a68 <realloc+0x24>
    5a58:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <malloc>
    5a5c:	e8 2e       	mov	r14, r24
    5a5e:	e7 01       	movw	r28, r14
    5a60:	7e 01       	movw	r14, r28
    5a62:	f9 2e       	mov	r15, r25
    5a64:	e7 01       	movw	r28, r14
    5a66:	b9 c0       	rjmp	.+370    	; 0x5bda <realloc+0x196>
    5a68:	be ef       	ldi	r27, 0xFE	; 254
    5a6a:	eb 2e       	mov	r14, r27
    5a6c:	bf ef       	ldi	r27, 0xFF	; 255
    5a6e:	fb 2e       	mov	r15, r27
    5a70:	ec 0e       	add	r14, r28
    5a72:	fd 1e       	adc	r15, r29
    5a74:	ae 01       	movw	r20, r28
    5a76:	46 0f       	add	r20, r22
    5a78:	57 1f       	adc	r21, r23
    5a7a:	4e 15       	cp	r20, r14
    5a7c:	5f 05       	cpc	r21, r15
    5a7e:	08 f4       	brcc	.+2      	; 0x5a82 <realloc+0x3e>
    5a80:	aa c0       	rjmp	.+340    	; 0x5bd6 <realloc+0x192>
    5a82:	d7 01       	movw	r26, r14
    5a84:	2d 91       	ld	r18, X+
    5a86:	3c 91       	ld	r19, X
    5a88:	11 97       	sbiw	r26, 0x01	; 1
    5a8a:	26 17       	cp	r18, r22
    5a8c:	37 07       	cpc	r19, r23
    5a8e:	c0 f0       	brcs	.+48     	; 0x5ac0 <realloc+0x7c>
    5a90:	25 30       	cpi	r18, 0x05	; 5
    5a92:	31 05       	cpc	r19, r1
    5a94:	08 f4       	brcc	.+2      	; 0x5a98 <realloc+0x54>
    5a96:	a1 c0       	rjmp	.+322    	; 0x5bda <realloc+0x196>
    5a98:	b9 01       	movw	r22, r18
    5a9a:	64 50       	subi	r22, 0x04	; 4
    5a9c:	70 40       	sbci	r23, 0x00	; 0
    5a9e:	68 17       	cp	r22, r24
    5aa0:	79 07       	cpc	r23, r25
    5aa2:	08 f4       	brcc	.+2      	; 0x5aa6 <realloc+0x62>
    5aa4:	9a c0       	rjmp	.+308    	; 0x5bda <realloc+0x196>
    5aa6:	22 50       	subi	r18, 0x02	; 2
    5aa8:	30 40       	sbci	r19, 0x00	; 0
    5aaa:	28 1b       	sub	r18, r24
    5aac:	39 0b       	sbc	r19, r25
    5aae:	fa 01       	movw	r30, r20
    5ab0:	21 93       	st	Z+, r18
    5ab2:	31 93       	st	Z+, r19
    5ab4:	8d 93       	st	X+, r24
    5ab6:	9c 93       	st	X, r25
    5ab8:	cf 01       	movw	r24, r30
    5aba:	0e 94 8b 2c 	call	0x5916	; 0x5916 <free>
    5abe:	8d c0       	rjmp	.+282    	; 0x5bda <realloc+0x196>
    5ac0:	6b 01       	movw	r12, r22
    5ac2:	c2 1a       	sub	r12, r18
    5ac4:	d3 0a       	sbc	r13, r19
    5ac6:	5e 01       	movw	r10, r28
    5ac8:	a2 0e       	add	r10, r18
    5aca:	b3 1e       	adc	r11, r19
    5acc:	e0 91 a1 04 	lds	r30, 0x04A1
    5ad0:	f0 91 a2 04 	lds	r31, 0x04A2
    5ad4:	66 24       	eor	r6, r6
    5ad6:	77 24       	eor	r7, r7
    5ad8:	00 e0       	ldi	r16, 0x00	; 0
    5ada:	10 e0       	ldi	r17, 0x00	; 0
    5adc:	45 c0       	rjmp	.+138    	; 0x5b68 <realloc+0x124>
    5ade:	ea 15       	cp	r30, r10
    5ae0:	fb 05       	cpc	r31, r11
    5ae2:	b9 f5       	brne	.+110    	; 0x5b52 <realloc+0x10e>
    5ae4:	60 81       	ld	r22, Z
    5ae6:	71 81       	ldd	r23, Z+1	; 0x01
    5ae8:	a2 e0       	ldi	r26, 0x02	; 2
    5aea:	8a 2e       	mov	r8, r26
    5aec:	91 2c       	mov	r9, r1
    5aee:	86 0e       	add	r8, r22
    5af0:	97 1e       	adc	r9, r23
    5af2:	8c 14       	cp	r8, r12
    5af4:	9d 04       	cpc	r9, r13
    5af6:	68 f1       	brcs	.+90     	; 0x5b52 <realloc+0x10e>
    5af8:	8b 01       	movw	r16, r22
    5afa:	0c 19       	sub	r16, r12
    5afc:	1d 09       	sbc	r17, r13
    5afe:	0e 5f       	subi	r16, 0xFE	; 254
    5b00:	1f 4f       	sbci	r17, 0xFF	; 255
    5b02:	b2 80       	ldd	r11, Z+2	; 0x02
    5b04:	a3 80       	ldd	r10, Z+3	; 0x03
    5b06:	05 30       	cpi	r16, 0x05	; 5
    5b08:	11 05       	cpc	r17, r1
    5b0a:	60 f0       	brcs	.+24     	; 0x5b24 <realloc+0xe0>
    5b0c:	fa 01       	movw	r30, r20
    5b0e:	b2 82       	std	Z+2, r11	; 0x02
    5b10:	a3 82       	std	Z+3, r10	; 0x03
    5b12:	6c 19       	sub	r22, r12
    5b14:	7d 09       	sbc	r23, r13
    5b16:	71 83       	std	Z+1, r23	; 0x01
    5b18:	60 83       	st	Z, r22
    5b1a:	d7 01       	movw	r26, r14
    5b1c:	11 96       	adiw	r26, 0x01	; 1
    5b1e:	9c 93       	st	X, r25
    5b20:	8e 93       	st	-X, r24
    5b22:	09 c0       	rjmp	.+18     	; 0x5b36 <realloc+0xf2>
    5b24:	2e 5f       	subi	r18, 0xFE	; 254
    5b26:	3f 4f       	sbci	r19, 0xFF	; 255
    5b28:	26 0f       	add	r18, r22
    5b2a:	37 1f       	adc	r19, r23
    5b2c:	f7 01       	movw	r30, r14
    5b2e:	31 83       	std	Z+1, r19	; 0x01
    5b30:	20 83       	st	Z, r18
    5b32:	eb 2d       	mov	r30, r11
    5b34:	fa 2d       	mov	r31, r10
    5b36:	61 14       	cp	r6, r1
    5b38:	71 04       	cpc	r7, r1
    5b3a:	31 f0       	breq	.+12     	; 0x5b48 <realloc+0x104>
    5b3c:	d3 01       	movw	r26, r6
    5b3e:	13 96       	adiw	r26, 0x03	; 3
    5b40:	fc 93       	st	X, r31
    5b42:	ee 93       	st	-X, r30
    5b44:	12 97       	sbiw	r26, 0x02	; 2
    5b46:	49 c0       	rjmp	.+146    	; 0x5bda <realloc+0x196>
    5b48:	f0 93 a2 04 	sts	0x04A2, r31
    5b4c:	e0 93 a1 04 	sts	0x04A1, r30
    5b50:	44 c0       	rjmp	.+136    	; 0x5bda <realloc+0x196>
    5b52:	60 81       	ld	r22, Z
    5b54:	71 81       	ldd	r23, Z+1	; 0x01
    5b56:	06 17       	cp	r16, r22
    5b58:	17 07       	cpc	r17, r23
    5b5a:	08 f4       	brcc	.+2      	; 0x5b5e <realloc+0x11a>
    5b5c:	8b 01       	movw	r16, r22
    5b5e:	3f 01       	movw	r6, r30
    5b60:	72 81       	ldd	r23, Z+2	; 0x02
    5b62:	63 81       	ldd	r22, Z+3	; 0x03
    5b64:	e7 2f       	mov	r30, r23
    5b66:	f6 2f       	mov	r31, r22
    5b68:	30 97       	sbiw	r30, 0x00	; 0
    5b6a:	09 f0       	breq	.+2      	; 0x5b6e <realloc+0x12a>
    5b6c:	b8 cf       	rjmp	.-144    	; 0x5ade <realloc+0x9a>
    5b6e:	20 91 9f 04 	lds	r18, 0x049F
    5b72:	30 91 a0 04 	lds	r19, 0x04A0
    5b76:	2a 15       	cp	r18, r10
    5b78:	3b 05       	cpc	r19, r11
    5b7a:	e9 f4       	brne	.+58     	; 0x5bb6 <realloc+0x172>
    5b7c:	08 17       	cp	r16, r24
    5b7e:	19 07       	cpc	r17, r25
    5b80:	d0 f4       	brcc	.+52     	; 0x5bb6 <realloc+0x172>
    5b82:	20 91 08 03 	lds	r18, 0x0308
    5b86:	30 91 09 03 	lds	r19, 0x0309
    5b8a:	21 15       	cp	r18, r1
    5b8c:	31 05       	cpc	r19, r1
    5b8e:	41 f4       	brne	.+16     	; 0x5ba0 <realloc+0x15c>
    5b90:	2d b7       	in	r18, 0x3d	; 61
    5b92:	3e b7       	in	r19, 0x3e	; 62
    5b94:	60 91 04 03 	lds	r22, 0x0304
    5b98:	70 91 05 03 	lds	r23, 0x0305
    5b9c:	26 1b       	sub	r18, r22
    5b9e:	37 0b       	sbc	r19, r23
    5ba0:	42 17       	cp	r20, r18
    5ba2:	53 07       	cpc	r21, r19
    5ba4:	c0 f4       	brcc	.+48     	; 0x5bd6 <realloc+0x192>
    5ba6:	50 93 a0 04 	sts	0x04A0, r21
    5baa:	40 93 9f 04 	sts	0x049F, r20
    5bae:	f7 01       	movw	r30, r14
    5bb0:	91 83       	std	Z+1, r25	; 0x01
    5bb2:	80 83       	st	Z, r24
    5bb4:	12 c0       	rjmp	.+36     	; 0x5bda <realloc+0x196>
    5bb6:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <malloc>
    5bba:	8c 01       	movw	r16, r24
    5bbc:	00 97       	sbiw	r24, 0x00	; 0
    5bbe:	59 f0       	breq	.+22     	; 0x5bd6 <realloc+0x192>
    5bc0:	d7 01       	movw	r26, r14
    5bc2:	4d 91       	ld	r20, X+
    5bc4:	5c 91       	ld	r21, X
    5bc6:	be 01       	movw	r22, r28
    5bc8:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
    5bcc:	ce 01       	movw	r24, r28
    5bce:	0e 94 8b 2c 	call	0x5916	; 0x5916 <free>
    5bd2:	e8 01       	movw	r28, r16
    5bd4:	02 c0       	rjmp	.+4      	; 0x5bda <realloc+0x196>
    5bd6:	c0 e0       	ldi	r28, 0x00	; 0
    5bd8:	d0 e0       	ldi	r29, 0x00	; 0
    5bda:	ce 01       	movw	r24, r28
    5bdc:	cd b7       	in	r28, 0x3d	; 61
    5bde:	de b7       	in	r29, 0x3e	; 62
    5be0:	ee e0       	ldi	r30, 0x0E	; 14
    5be2:	0c 94 a3 29 	jmp	0x5346	; 0x5346 <__epilogue_restores__+0x8>

00005be6 <atol>:
    5be6:	1f 93       	push	r17
    5be8:	fc 01       	movw	r30, r24
    5bea:	99 27       	eor	r25, r25
    5bec:	88 27       	eor	r24, r24
    5bee:	bc 01       	movw	r22, r24
    5bf0:	e8 94       	clt
    5bf2:	11 91       	ld	r17, Z+
    5bf4:	10 32       	cpi	r17, 0x20	; 32
    5bf6:	e9 f3       	breq	.-6      	; 0x5bf2 <atol+0xc>
    5bf8:	19 30       	cpi	r17, 0x09	; 9
    5bfa:	10 f0       	brcs	.+4      	; 0x5c00 <atol+0x1a>
    5bfc:	1e 30       	cpi	r17, 0x0E	; 14
    5bfe:	c8 f3       	brcs	.-14     	; 0x5bf2 <atol+0xc>
    5c00:	1b 32       	cpi	r17, 0x2B	; 43
    5c02:	51 f0       	breq	.+20     	; 0x5c18 <atol+0x32>
    5c04:	1d 32       	cpi	r17, 0x2D	; 45
    5c06:	49 f4       	brne	.+18     	; 0x5c1a <atol+0x34>
    5c08:	68 94       	set
    5c0a:	06 c0       	rjmp	.+12     	; 0x5c18 <atol+0x32>
    5c0c:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <__mulsi_const_10>
    5c10:	61 0f       	add	r22, r17
    5c12:	71 1d       	adc	r23, r1
    5c14:	81 1d       	adc	r24, r1
    5c16:	91 1d       	adc	r25, r1
    5c18:	11 91       	ld	r17, Z+
    5c1a:	10 53       	subi	r17, 0x30	; 48
    5c1c:	1a 30       	cpi	r17, 0x0A	; 10
    5c1e:	b0 f3       	brcs	.-20     	; 0x5c0c <atol+0x26>
    5c20:	3e f4       	brtc	.+14     	; 0x5c30 <atol+0x4a>
    5c22:	90 95       	com	r25
    5c24:	80 95       	com	r24
    5c26:	70 95       	com	r23
    5c28:	61 95       	neg	r22
    5c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    5c2c:	8f 4f       	sbci	r24, 0xFF	; 255
    5c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    5c30:	1f 91       	pop	r17
    5c32:	08 95       	ret

00005c34 <isspace>:
    5c34:	91 11       	cpse	r25, r1
    5c36:	19 c3       	rjmp	.+1586   	; 0x626a <__ctype_isfalse>
    5c38:	80 32       	cpi	r24, 0x20	; 32
    5c3a:	19 f0       	breq	.+6      	; 0x5c42 <isspace+0xe>
    5c3c:	89 50       	subi	r24, 0x09	; 9
    5c3e:	85 50       	subi	r24, 0x05	; 5
    5c40:	d0 f7       	brcc	.-12     	; 0x5c36 <isspace+0x2>
    5c42:	08 95       	ret

00005c44 <tolower>:
    5c44:	91 11       	cpse	r25, r1
    5c46:	08 95       	ret
    5c48:	81 54       	subi	r24, 0x41	; 65
    5c4a:	8a 51       	subi	r24, 0x1A	; 26
    5c4c:	08 f4       	brcc	.+2      	; 0x5c50 <tolower+0xc>
    5c4e:	80 5e       	subi	r24, 0xE0	; 224
    5c50:	85 5a       	subi	r24, 0xA5	; 165
    5c52:	08 95       	ret

00005c54 <toupper>:
    5c54:	91 11       	cpse	r25, r1
    5c56:	08 95       	ret
    5c58:	81 56       	subi	r24, 0x61	; 97
    5c5a:	8a 51       	subi	r24, 0x1A	; 26
    5c5c:	08 f4       	brcc	.+2      	; 0x5c60 <toupper+0xc>
    5c5e:	80 52       	subi	r24, 0x20	; 32
    5c60:	85 58       	subi	r24, 0x85	; 133
    5c62:	08 95       	ret

00005c64 <memcpy>:
    5c64:	fb 01       	movw	r30, r22
    5c66:	dc 01       	movw	r26, r24
    5c68:	02 c0       	rjmp	.+4      	; 0x5c6e <memcpy+0xa>
    5c6a:	01 90       	ld	r0, Z+
    5c6c:	0d 92       	st	X+, r0
    5c6e:	41 50       	subi	r20, 0x01	; 1
    5c70:	50 40       	sbci	r21, 0x00	; 0
    5c72:	d8 f7       	brcc	.-10     	; 0x5c6a <memcpy+0x6>
    5c74:	08 95       	ret

00005c76 <memset>:
    5c76:	dc 01       	movw	r26, r24
    5c78:	01 c0       	rjmp	.+2      	; 0x5c7c <memset+0x6>
    5c7a:	6d 93       	st	X+, r22
    5c7c:	41 50       	subi	r20, 0x01	; 1
    5c7e:	50 40       	sbci	r21, 0x00	; 0
    5c80:	e0 f7       	brcc	.-8      	; 0x5c7a <memset+0x4>
    5c82:	08 95       	ret

00005c84 <strcat>:
    5c84:	fb 01       	movw	r30, r22
    5c86:	dc 01       	movw	r26, r24
    5c88:	0d 90       	ld	r0, X+
    5c8a:	00 20       	and	r0, r0
    5c8c:	e9 f7       	brne	.-6      	; 0x5c88 <strcat+0x4>
    5c8e:	11 97       	sbiw	r26, 0x01	; 1
    5c90:	01 90       	ld	r0, Z+
    5c92:	0d 92       	st	X+, r0
    5c94:	00 20       	and	r0, r0
    5c96:	e1 f7       	brne	.-8      	; 0x5c90 <strcat+0xc>
    5c98:	08 95       	ret

00005c9a <strchr>:
    5c9a:	fc 01       	movw	r30, r24
    5c9c:	81 91       	ld	r24, Z+
    5c9e:	86 17       	cp	r24, r22
    5ca0:	21 f0       	breq	.+8      	; 0x5caa <strchr+0x10>
    5ca2:	88 23       	and	r24, r24
    5ca4:	d9 f7       	brne	.-10     	; 0x5c9c <strchr+0x2>
    5ca6:	99 27       	eor	r25, r25
    5ca8:	08 95       	ret
    5caa:	31 97       	sbiw	r30, 0x01	; 1
    5cac:	cf 01       	movw	r24, r30
    5cae:	08 95       	ret

00005cb0 <strcmp>:
    5cb0:	fb 01       	movw	r30, r22
    5cb2:	dc 01       	movw	r26, r24
    5cb4:	8d 91       	ld	r24, X+
    5cb6:	01 90       	ld	r0, Z+
    5cb8:	80 19       	sub	r24, r0
    5cba:	01 10       	cpse	r0, r1
    5cbc:	d9 f3       	breq	.-10     	; 0x5cb4 <strcmp+0x4>
    5cbe:	99 0b       	sbc	r25, r25
    5cc0:	08 95       	ret

00005cc2 <strcpy>:
    5cc2:	fb 01       	movw	r30, r22
    5cc4:	dc 01       	movw	r26, r24
    5cc6:	01 90       	ld	r0, Z+
    5cc8:	0d 92       	st	X+, r0
    5cca:	00 20       	and	r0, r0
    5ccc:	e1 f7       	brne	.-8      	; 0x5cc6 <strcpy+0x4>
    5cce:	08 95       	ret

00005cd0 <strncmp>:
    5cd0:	fb 01       	movw	r30, r22
    5cd2:	dc 01       	movw	r26, r24
    5cd4:	41 50       	subi	r20, 0x01	; 1
    5cd6:	50 40       	sbci	r21, 0x00	; 0
    5cd8:	30 f0       	brcs	.+12     	; 0x5ce6 <strncmp+0x16>
    5cda:	8d 91       	ld	r24, X+
    5cdc:	01 90       	ld	r0, Z+
    5cde:	80 19       	sub	r24, r0
    5ce0:	19 f4       	brne	.+6      	; 0x5ce8 <strncmp+0x18>
    5ce2:	00 20       	and	r0, r0
    5ce4:	b9 f7       	brne	.-18     	; 0x5cd4 <strncmp+0x4>
    5ce6:	88 1b       	sub	r24, r24
    5ce8:	99 0b       	sbc	r25, r25
    5cea:	08 95       	ret

00005cec <strncpy>:
    5cec:	fb 01       	movw	r30, r22
    5cee:	dc 01       	movw	r26, r24
    5cf0:	41 50       	subi	r20, 0x01	; 1
    5cf2:	50 40       	sbci	r21, 0x00	; 0
    5cf4:	48 f0       	brcs	.+18     	; 0x5d08 <strncpy+0x1c>
    5cf6:	01 90       	ld	r0, Z+
    5cf8:	0d 92       	st	X+, r0
    5cfa:	00 20       	and	r0, r0
    5cfc:	c9 f7       	brne	.-14     	; 0x5cf0 <strncpy+0x4>
    5cfe:	01 c0       	rjmp	.+2      	; 0x5d02 <strncpy+0x16>
    5d00:	1d 92       	st	X+, r1
    5d02:	41 50       	subi	r20, 0x01	; 1
    5d04:	50 40       	sbci	r21, 0x00	; 0
    5d06:	e0 f7       	brcc	.-8      	; 0x5d00 <strncpy+0x14>
    5d08:	08 95       	ret

00005d0a <strrchr>:
    5d0a:	fc 01       	movw	r30, r24
    5d0c:	81 e0       	ldi	r24, 0x01	; 1
    5d0e:	90 e0       	ldi	r25, 0x00	; 0
    5d10:	01 90       	ld	r0, Z+
    5d12:	06 16       	cp	r0, r22
    5d14:	09 f4       	brne	.+2      	; 0x5d18 <strrchr+0xe>
    5d16:	cf 01       	movw	r24, r30
    5d18:	00 20       	and	r0, r0
    5d1a:	d1 f7       	brne	.-12     	; 0x5d10 <strrchr+0x6>
    5d1c:	01 97       	sbiw	r24, 0x01	; 1
    5d1e:	08 95       	ret

00005d20 <strstr>:
    5d20:	fb 01       	movw	r30, r22
    5d22:	51 91       	ld	r21, Z+
    5d24:	55 23       	and	r21, r21
    5d26:	a9 f0       	breq	.+42     	; 0x5d52 <strstr+0x32>
    5d28:	bf 01       	movw	r22, r30
    5d2a:	dc 01       	movw	r26, r24
    5d2c:	4d 91       	ld	r20, X+
    5d2e:	45 17       	cp	r20, r21
    5d30:	41 11       	cpse	r20, r1
    5d32:	e1 f7       	brne	.-8      	; 0x5d2c <strstr+0xc>
    5d34:	59 f4       	brne	.+22     	; 0x5d4c <strstr+0x2c>
    5d36:	cd 01       	movw	r24, r26
    5d38:	01 90       	ld	r0, Z+
    5d3a:	00 20       	and	r0, r0
    5d3c:	49 f0       	breq	.+18     	; 0x5d50 <strstr+0x30>
    5d3e:	4d 91       	ld	r20, X+
    5d40:	40 15       	cp	r20, r0
    5d42:	41 11       	cpse	r20, r1
    5d44:	c9 f3       	breq	.-14     	; 0x5d38 <strstr+0x18>
    5d46:	fb 01       	movw	r30, r22
    5d48:	41 11       	cpse	r20, r1
    5d4a:	ef cf       	rjmp	.-34     	; 0x5d2a <strstr+0xa>
    5d4c:	81 e0       	ldi	r24, 0x01	; 1
    5d4e:	90 e0       	ldi	r25, 0x00	; 0
    5d50:	01 97       	sbiw	r24, 0x01	; 1
    5d52:	08 95       	ret

00005d54 <itoa>:
    5d54:	fb 01       	movw	r30, r22
    5d56:	9f 01       	movw	r18, r30
    5d58:	e8 94       	clt
    5d5a:	42 30       	cpi	r20, 0x02	; 2
    5d5c:	c4 f0       	brlt	.+48     	; 0x5d8e <itoa+0x3a>
    5d5e:	45 32       	cpi	r20, 0x25	; 37
    5d60:	b4 f4       	brge	.+44     	; 0x5d8e <itoa+0x3a>
    5d62:	4a 30       	cpi	r20, 0x0A	; 10
    5d64:	29 f4       	brne	.+10     	; 0x5d70 <itoa+0x1c>
    5d66:	97 fb       	bst	r25, 7
    5d68:	1e f4       	brtc	.+6      	; 0x5d70 <itoa+0x1c>
    5d6a:	90 95       	com	r25
    5d6c:	81 95       	neg	r24
    5d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d70:	64 2f       	mov	r22, r20
    5d72:	77 27       	eor	r23, r23
    5d74:	0e 94 3a 29 	call	0x5274	; 0x5274 <__udivmodhi4>
    5d78:	80 5d       	subi	r24, 0xD0	; 208
    5d7a:	8a 33       	cpi	r24, 0x3A	; 58
    5d7c:	0c f0       	brlt	.+2      	; 0x5d80 <itoa+0x2c>
    5d7e:	89 5d       	subi	r24, 0xD9	; 217
    5d80:	81 93       	st	Z+, r24
    5d82:	cb 01       	movw	r24, r22
    5d84:	00 97       	sbiw	r24, 0x00	; 0
    5d86:	a1 f7       	brne	.-24     	; 0x5d70 <itoa+0x1c>
    5d88:	16 f4       	brtc	.+4      	; 0x5d8e <itoa+0x3a>
    5d8a:	5d e2       	ldi	r21, 0x2D	; 45
    5d8c:	51 93       	st	Z+, r21
    5d8e:	10 82       	st	Z, r1
    5d90:	c9 01       	movw	r24, r18
    5d92:	0c 94 4e 31 	jmp	0x629c	; 0x629c <strrev>

00005d96 <ltoa>:
    5d96:	fa 01       	movw	r30, r20
    5d98:	cf 93       	push	r28
    5d9a:	ff 93       	push	r31
    5d9c:	ef 93       	push	r30
    5d9e:	22 30       	cpi	r18, 0x02	; 2
    5da0:	44 f1       	brlt	.+80     	; 0x5df2 <ltoa+0x5c>
    5da2:	25 32       	cpi	r18, 0x25	; 37
    5da4:	34 f5       	brge	.+76     	; 0x5df2 <ltoa+0x5c>
    5da6:	c2 2f       	mov	r28, r18
    5da8:	e8 94       	clt
    5daa:	ca 30       	cpi	r28, 0x0A	; 10
    5dac:	49 f4       	brne	.+18     	; 0x5dc0 <ltoa+0x2a>
    5dae:	97 fb       	bst	r25, 7
    5db0:	3e f4       	brtc	.+14     	; 0x5dc0 <ltoa+0x2a>
    5db2:	90 95       	com	r25
    5db4:	80 95       	com	r24
    5db6:	70 95       	com	r23
    5db8:	61 95       	neg	r22
    5dba:	7f 4f       	sbci	r23, 0xFF	; 255
    5dbc:	8f 4f       	sbci	r24, 0xFF	; 255
    5dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    5dc0:	2c 2f       	mov	r18, r28
    5dc2:	33 27       	eor	r19, r19
    5dc4:	44 27       	eor	r20, r20
    5dc6:	55 27       	eor	r21, r21
    5dc8:	ff 93       	push	r31
    5dca:	ef 93       	push	r30
    5dcc:	0e 94 61 29 	call	0x52c2	; 0x52c2 <__udivmodsi4>
    5dd0:	ef 91       	pop	r30
    5dd2:	ff 91       	pop	r31
    5dd4:	60 5d       	subi	r22, 0xD0	; 208
    5dd6:	6a 33       	cpi	r22, 0x3A	; 58
    5dd8:	0c f0       	brlt	.+2      	; 0x5ddc <ltoa+0x46>
    5dda:	69 5d       	subi	r22, 0xD9	; 217
    5ddc:	61 93       	st	Z+, r22
    5dde:	b9 01       	movw	r22, r18
    5de0:	ca 01       	movw	r24, r20
    5de2:	60 50       	subi	r22, 0x00	; 0
    5de4:	70 40       	sbci	r23, 0x00	; 0
    5de6:	80 40       	sbci	r24, 0x00	; 0
    5de8:	90 40       	sbci	r25, 0x00	; 0
    5dea:	51 f7       	brne	.-44     	; 0x5dc0 <ltoa+0x2a>
    5dec:	16 f4       	brtc	.+4      	; 0x5df2 <ltoa+0x5c>
    5dee:	cd e2       	ldi	r28, 0x2D	; 45
    5df0:	c1 93       	st	Z+, r28
    5df2:	10 82       	st	Z, r1
    5df4:	8f 91       	pop	r24
    5df6:	9f 91       	pop	r25
    5df8:	cf 91       	pop	r28
    5dfa:	0c 94 4e 31 	jmp	0x629c	; 0x629c <strrev>

00005dfe <__mulsi_const_10>:
    5dfe:	59 2f       	mov	r21, r25
    5e00:	48 2f       	mov	r20, r24
    5e02:	37 2f       	mov	r19, r23
    5e04:	26 2f       	mov	r18, r22
    5e06:	66 0f       	add	r22, r22
    5e08:	77 1f       	adc	r23, r23
    5e0a:	88 1f       	adc	r24, r24
    5e0c:	99 1f       	adc	r25, r25
    5e0e:	66 0f       	add	r22, r22
    5e10:	77 1f       	adc	r23, r23
    5e12:	88 1f       	adc	r24, r24
    5e14:	99 1f       	adc	r25, r25
    5e16:	62 0f       	add	r22, r18
    5e18:	73 1f       	adc	r23, r19
    5e1a:	84 1f       	adc	r24, r20
    5e1c:	95 1f       	adc	r25, r21
    5e1e:	66 0f       	add	r22, r22
    5e20:	77 1f       	adc	r23, r23
    5e22:	88 1f       	adc	r24, r24
    5e24:	99 1f       	adc	r25, r25
    5e26:	08 95       	ret

00005e28 <ultoa>:
    5e28:	fa 01       	movw	r30, r20
    5e2a:	cf 93       	push	r28
    5e2c:	ff 93       	push	r31
    5e2e:	ef 93       	push	r30
    5e30:	22 30       	cpi	r18, 0x02	; 2
    5e32:	cc f0       	brlt	.+50     	; 0x5e66 <ultoa+0x3e>
    5e34:	25 32       	cpi	r18, 0x25	; 37
    5e36:	bc f4       	brge	.+46     	; 0x5e66 <ultoa+0x3e>
    5e38:	c2 2f       	mov	r28, r18
    5e3a:	2c 2f       	mov	r18, r28
    5e3c:	33 27       	eor	r19, r19
    5e3e:	44 27       	eor	r20, r20
    5e40:	55 27       	eor	r21, r21
    5e42:	ff 93       	push	r31
    5e44:	ef 93       	push	r30
    5e46:	0e 94 61 29 	call	0x52c2	; 0x52c2 <__udivmodsi4>
    5e4a:	ef 91       	pop	r30
    5e4c:	ff 91       	pop	r31
    5e4e:	60 5d       	subi	r22, 0xD0	; 208
    5e50:	6a 33       	cpi	r22, 0x3A	; 58
    5e52:	0c f0       	brlt	.+2      	; 0x5e56 <ultoa+0x2e>
    5e54:	69 5d       	subi	r22, 0xD9	; 217
    5e56:	61 93       	st	Z+, r22
    5e58:	b9 01       	movw	r22, r18
    5e5a:	ca 01       	movw	r24, r20
    5e5c:	60 50       	subi	r22, 0x00	; 0
    5e5e:	70 40       	sbci	r23, 0x00	; 0
    5e60:	80 40       	sbci	r24, 0x00	; 0
    5e62:	90 40       	sbci	r25, 0x00	; 0
    5e64:	51 f7       	brne	.-44     	; 0x5e3a <ultoa+0x12>
    5e66:	10 82       	st	Z, r1
    5e68:	8f 91       	pop	r24
    5e6a:	9f 91       	pop	r25
    5e6c:	cf 91       	pop	r28
    5e6e:	0c 94 4e 31 	jmp	0x629c	; 0x629c <strrev>

00005e72 <sprintf>:
    5e72:	ae e0       	ldi	r26, 0x0E	; 14
    5e74:	b0 e0       	ldi	r27, 0x00	; 0
    5e76:	ef e3       	ldi	r30, 0x3F	; 63
    5e78:	ff e2       	ldi	r31, 0x2F	; 47
    5e7a:	0c 94 91 29 	jmp	0x5322	; 0x5322 <__prologue_saves__+0x1c>
    5e7e:	0d 89       	ldd	r16, Y+21	; 0x15
    5e80:	1e 89       	ldd	r17, Y+22	; 0x16
    5e82:	86 e0       	ldi	r24, 0x06	; 6
    5e84:	8c 83       	std	Y+4, r24	; 0x04
    5e86:	1a 83       	std	Y+2, r17	; 0x02
    5e88:	09 83       	std	Y+1, r16	; 0x01
    5e8a:	8f ef       	ldi	r24, 0xFF	; 255
    5e8c:	9f e7       	ldi	r25, 0x7F	; 127
    5e8e:	9e 83       	std	Y+6, r25	; 0x06
    5e90:	8d 83       	std	Y+5, r24	; 0x05
    5e92:	9e 01       	movw	r18, r28
    5e94:	27 5e       	subi	r18, 0xE7	; 231
    5e96:	3f 4f       	sbci	r19, 0xFF	; 255
    5e98:	ce 01       	movw	r24, r28
    5e9a:	01 96       	adiw	r24, 0x01	; 1
    5e9c:	6f 89       	ldd	r22, Y+23	; 0x17
    5e9e:	78 8d       	ldd	r23, Y+24	; 0x18
    5ea0:	a9 01       	movw	r20, r18
    5ea2:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <vfprintf>
    5ea6:	ef 81       	ldd	r30, Y+7	; 0x07
    5ea8:	f8 85       	ldd	r31, Y+8	; 0x08
    5eaa:	e0 0f       	add	r30, r16
    5eac:	f1 1f       	adc	r31, r17
    5eae:	10 82       	st	Z, r1
    5eb0:	2e 96       	adiw	r28, 0x0e	; 14
    5eb2:	e4 e0       	ldi	r30, 0x04	; 4
    5eb4:	0c 94 ad 29 	jmp	0x535a	; 0x535a <__epilogue_restores__+0x1c>

00005eb8 <vfprintf>:
    5eb8:	ac e0       	ldi	r26, 0x0C	; 12
    5eba:	b0 e0       	ldi	r27, 0x00	; 0
    5ebc:	e2 e6       	ldi	r30, 0x62	; 98
    5ebe:	ff e2       	ldi	r31, 0x2F	; 47
    5ec0:	0c 94 84 29 	jmp	0x5308	; 0x5308 <__prologue_saves__+0x2>
    5ec4:	6c 01       	movw	r12, r24
    5ec6:	2b 01       	movw	r4, r22
    5ec8:	8a 01       	movw	r16, r20
    5eca:	fc 01       	movw	r30, r24
    5ecc:	17 82       	std	Z+7, r1	; 0x07
    5ece:	16 82       	std	Z+6, r1	; 0x06
    5ed0:	83 81       	ldd	r24, Z+3	; 0x03
    5ed2:	81 fd       	sbrc	r24, 1
    5ed4:	03 c0       	rjmp	.+6      	; 0x5edc <vfprintf+0x24>
    5ed6:	2f ef       	ldi	r18, 0xFF	; 255
    5ed8:	3f ef       	ldi	r19, 0xFF	; 255
    5eda:	c2 c1       	rjmp	.+900    	; 0x6260 <vfprintf+0x3a8>
    5edc:	4e 01       	movw	r8, r28
    5ede:	08 94       	sec
    5ee0:	81 1c       	adc	r8, r1
    5ee2:	91 1c       	adc	r9, r1
    5ee4:	6f e3       	ldi	r22, 0x3F	; 63
    5ee6:	36 2e       	mov	r3, r22
    5ee8:	f6 01       	movw	r30, r12
    5eea:	93 81       	ldd	r25, Z+3	; 0x03
    5eec:	f2 01       	movw	r30, r4
    5eee:	93 fd       	sbrc	r25, 3
    5ef0:	85 91       	lpm	r24, Z+
    5ef2:	93 ff       	sbrs	r25, 3
    5ef4:	81 91       	ld	r24, Z+
    5ef6:	2f 01       	movw	r4, r30
    5ef8:	88 23       	and	r24, r24
    5efa:	09 f4       	brne	.+2      	; 0x5efe <vfprintf+0x46>
    5efc:	ae c1       	rjmp	.+860    	; 0x625a <vfprintf+0x3a2>
    5efe:	85 32       	cpi	r24, 0x25	; 37
    5f00:	39 f4       	brne	.+14     	; 0x5f10 <vfprintf+0x58>
    5f02:	93 fd       	sbrc	r25, 3
    5f04:	85 91       	lpm	r24, Z+
    5f06:	93 ff       	sbrs	r25, 3
    5f08:	81 91       	ld	r24, Z+
    5f0a:	2f 01       	movw	r4, r30
    5f0c:	85 32       	cpi	r24, 0x25	; 37
    5f0e:	29 f4       	brne	.+10     	; 0x5f1a <vfprintf+0x62>
    5f10:	90 e0       	ldi	r25, 0x00	; 0
    5f12:	b6 01       	movw	r22, r12
    5f14:	0e 94 5e 31 	call	0x62bc	; 0x62bc <fputc>
    5f18:	e7 cf       	rjmp	.-50     	; 0x5ee8 <vfprintf+0x30>
    5f1a:	ee 24       	eor	r14, r14
    5f1c:	ff 24       	eor	r15, r15
    5f1e:	20 e0       	ldi	r18, 0x00	; 0
    5f20:	20 32       	cpi	r18, 0x20	; 32
    5f22:	b0 f4       	brcc	.+44     	; 0x5f50 <vfprintf+0x98>
    5f24:	8b 32       	cpi	r24, 0x2B	; 43
    5f26:	69 f0       	breq	.+26     	; 0x5f42 <vfprintf+0x8a>
    5f28:	8c 32       	cpi	r24, 0x2C	; 44
    5f2a:	28 f4       	brcc	.+10     	; 0x5f36 <vfprintf+0x7e>
    5f2c:	80 32       	cpi	r24, 0x20	; 32
    5f2e:	51 f0       	breq	.+20     	; 0x5f44 <vfprintf+0x8c>
    5f30:	83 32       	cpi	r24, 0x23	; 35
    5f32:	71 f4       	brne	.+28     	; 0x5f50 <vfprintf+0x98>
    5f34:	0b c0       	rjmp	.+22     	; 0x5f4c <vfprintf+0x94>
    5f36:	8d 32       	cpi	r24, 0x2D	; 45
    5f38:	39 f0       	breq	.+14     	; 0x5f48 <vfprintf+0x90>
    5f3a:	80 33       	cpi	r24, 0x30	; 48
    5f3c:	49 f4       	brne	.+18     	; 0x5f50 <vfprintf+0x98>
    5f3e:	21 60       	ori	r18, 0x01	; 1
    5f40:	2c c0       	rjmp	.+88     	; 0x5f9a <vfprintf+0xe2>
    5f42:	22 60       	ori	r18, 0x02	; 2
    5f44:	24 60       	ori	r18, 0x04	; 4
    5f46:	29 c0       	rjmp	.+82     	; 0x5f9a <vfprintf+0xe2>
    5f48:	28 60       	ori	r18, 0x08	; 8
    5f4a:	27 c0       	rjmp	.+78     	; 0x5f9a <vfprintf+0xe2>
    5f4c:	20 61       	ori	r18, 0x10	; 16
    5f4e:	25 c0       	rjmp	.+74     	; 0x5f9a <vfprintf+0xe2>
    5f50:	27 fd       	sbrc	r18, 7
    5f52:	2c c0       	rjmp	.+88     	; 0x5fac <vfprintf+0xf4>
    5f54:	38 2f       	mov	r19, r24
    5f56:	30 53       	subi	r19, 0x30	; 48
    5f58:	3a 30       	cpi	r19, 0x0A	; 10
    5f5a:	98 f4       	brcc	.+38     	; 0x5f82 <vfprintf+0xca>
    5f5c:	26 ff       	sbrs	r18, 6
    5f5e:	08 c0       	rjmp	.+16     	; 0x5f70 <vfprintf+0xb8>
    5f60:	8e 2d       	mov	r24, r14
    5f62:	88 0f       	add	r24, r24
    5f64:	e8 2e       	mov	r14, r24
    5f66:	ee 0c       	add	r14, r14
    5f68:	ee 0c       	add	r14, r14
    5f6a:	e8 0e       	add	r14, r24
    5f6c:	e3 0e       	add	r14, r19
    5f6e:	15 c0       	rjmp	.+42     	; 0x5f9a <vfprintf+0xe2>
    5f70:	8f 2d       	mov	r24, r15
    5f72:	88 0f       	add	r24, r24
    5f74:	f8 2e       	mov	r15, r24
    5f76:	ff 0c       	add	r15, r15
    5f78:	ff 0c       	add	r15, r15
    5f7a:	f8 0e       	add	r15, r24
    5f7c:	f3 0e       	add	r15, r19
    5f7e:	20 62       	ori	r18, 0x20	; 32
    5f80:	0c c0       	rjmp	.+24     	; 0x5f9a <vfprintf+0xe2>
    5f82:	8e 32       	cpi	r24, 0x2E	; 46
    5f84:	21 f4       	brne	.+8      	; 0x5f8e <vfprintf+0xd6>
    5f86:	26 fd       	sbrc	r18, 6
    5f88:	68 c1       	rjmp	.+720    	; 0x625a <vfprintf+0x3a2>
    5f8a:	20 64       	ori	r18, 0x40	; 64
    5f8c:	06 c0       	rjmp	.+12     	; 0x5f9a <vfprintf+0xe2>
    5f8e:	8c 36       	cpi	r24, 0x6C	; 108
    5f90:	11 f4       	brne	.+4      	; 0x5f96 <vfprintf+0xde>
    5f92:	20 68       	ori	r18, 0x80	; 128
    5f94:	02 c0       	rjmp	.+4      	; 0x5f9a <vfprintf+0xe2>
    5f96:	88 36       	cpi	r24, 0x68	; 104
    5f98:	49 f4       	brne	.+18     	; 0x5fac <vfprintf+0xf4>
    5f9a:	f2 01       	movw	r30, r4
    5f9c:	93 fd       	sbrc	r25, 3
    5f9e:	85 91       	lpm	r24, Z+
    5fa0:	93 ff       	sbrs	r25, 3
    5fa2:	81 91       	ld	r24, Z+
    5fa4:	2f 01       	movw	r4, r30
    5fa6:	88 23       	and	r24, r24
    5fa8:	09 f0       	breq	.+2      	; 0x5fac <vfprintf+0xf4>
    5faa:	ba cf       	rjmp	.-140    	; 0x5f20 <vfprintf+0x68>
    5fac:	98 2f       	mov	r25, r24
    5fae:	95 54       	subi	r25, 0x45	; 69
    5fb0:	93 30       	cpi	r25, 0x03	; 3
    5fb2:	18 f0       	brcs	.+6      	; 0x5fba <vfprintf+0x102>
    5fb4:	90 52       	subi	r25, 0x20	; 32
    5fb6:	93 30       	cpi	r25, 0x03	; 3
    5fb8:	20 f4       	brcc	.+8      	; 0x5fc2 <vfprintf+0x10a>
    5fba:	0c 5f       	subi	r16, 0xFC	; 252
    5fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    5fbe:	39 82       	std	Y+1, r3	; 0x01
    5fc0:	0d c0       	rjmp	.+26     	; 0x5fdc <vfprintf+0x124>
    5fc2:	83 36       	cpi	r24, 0x63	; 99
    5fc4:	31 f0       	breq	.+12     	; 0x5fd2 <vfprintf+0x11a>
    5fc6:	83 37       	cpi	r24, 0x73	; 115
    5fc8:	71 f0       	breq	.+28     	; 0x5fe6 <vfprintf+0x12e>
    5fca:	83 35       	cpi	r24, 0x53	; 83
    5fcc:	09 f0       	breq	.+2      	; 0x5fd0 <vfprintf+0x118>
    5fce:	58 c0       	rjmp	.+176    	; 0x6080 <vfprintf+0x1c8>
    5fd0:	1e c0       	rjmp	.+60     	; 0x600e <vfprintf+0x156>
    5fd2:	f8 01       	movw	r30, r16
    5fd4:	80 81       	ld	r24, Z
    5fd6:	89 83       	std	Y+1, r24	; 0x01
    5fd8:	0e 5f       	subi	r16, 0xFE	; 254
    5fda:	1f 4f       	sbci	r17, 0xFF	; 255
    5fdc:	54 01       	movw	r10, r8
    5fde:	51 e0       	ldi	r21, 0x01	; 1
    5fe0:	65 2e       	mov	r6, r21
    5fe2:	71 2c       	mov	r7, r1
    5fe4:	12 c0       	rjmp	.+36     	; 0x600a <vfprintf+0x152>
    5fe6:	f8 01       	movw	r30, r16
    5fe8:	a0 80       	ld	r10, Z
    5fea:	b1 80       	ldd	r11, Z+1	; 0x01
    5fec:	26 fd       	sbrc	r18, 6
    5fee:	03 c0       	rjmp	.+6      	; 0x5ff6 <vfprintf+0x13e>
    5ff0:	6f ef       	ldi	r22, 0xFF	; 255
    5ff2:	7f ef       	ldi	r23, 0xFF	; 255
    5ff4:	02 c0       	rjmp	.+4      	; 0x5ffa <vfprintf+0x142>
    5ff6:	6e 2d       	mov	r22, r14
    5ff8:	70 e0       	ldi	r23, 0x00	; 0
    5ffa:	0e 5f       	subi	r16, 0xFE	; 254
    5ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    5ffe:	c5 01       	movw	r24, r10
    6000:	2c 87       	std	Y+12, r18	; 0x0c
    6002:	0e 94 43 31 	call	0x6286	; 0x6286 <strnlen>
    6006:	3c 01       	movw	r6, r24
    6008:	2c 85       	ldd	r18, Y+12	; 0x0c
    600a:	2f 77       	andi	r18, 0x7F	; 127
    600c:	13 c0       	rjmp	.+38     	; 0x6034 <vfprintf+0x17c>
    600e:	f8 01       	movw	r30, r16
    6010:	a0 80       	ld	r10, Z
    6012:	b1 80       	ldd	r11, Z+1	; 0x01
    6014:	26 fd       	sbrc	r18, 6
    6016:	03 c0       	rjmp	.+6      	; 0x601e <vfprintf+0x166>
    6018:	6f ef       	ldi	r22, 0xFF	; 255
    601a:	7f ef       	ldi	r23, 0xFF	; 255
    601c:	02 c0       	rjmp	.+4      	; 0x6022 <vfprintf+0x16a>
    601e:	6e 2d       	mov	r22, r14
    6020:	70 e0       	ldi	r23, 0x00	; 0
    6022:	0e 5f       	subi	r16, 0xFE	; 254
    6024:	1f 4f       	sbci	r17, 0xFF	; 255
    6026:	c5 01       	movw	r24, r10
    6028:	2c 87       	std	Y+12, r18	; 0x0c
    602a:	0e 94 38 31 	call	0x6270	; 0x6270 <strnlen_P>
    602e:	3c 01       	movw	r6, r24
    6030:	2c 85       	ldd	r18, Y+12	; 0x0c
    6032:	20 68       	ori	r18, 0x80	; 128
    6034:	23 ff       	sbrs	r18, 3
    6036:	09 c0       	rjmp	.+18     	; 0x604a <vfprintf+0x192>
    6038:	1f c0       	rjmp	.+62     	; 0x6078 <vfprintf+0x1c0>
    603a:	80 e2       	ldi	r24, 0x20	; 32
    603c:	90 e0       	ldi	r25, 0x00	; 0
    603e:	b6 01       	movw	r22, r12
    6040:	2c 87       	std	Y+12, r18	; 0x0c
    6042:	0e 94 5e 31 	call	0x62bc	; 0x62bc <fputc>
    6046:	fa 94       	dec	r15
    6048:	2c 85       	ldd	r18, Y+12	; 0x0c
    604a:	8f 2d       	mov	r24, r15
    604c:	90 e0       	ldi	r25, 0x00	; 0
    604e:	68 16       	cp	r6, r24
    6050:	79 06       	cpc	r7, r25
    6052:	98 f3       	brcs	.-26     	; 0x603a <vfprintf+0x182>
    6054:	11 c0       	rjmp	.+34     	; 0x6078 <vfprintf+0x1c0>
    6056:	f5 01       	movw	r30, r10
    6058:	27 fd       	sbrc	r18, 7
    605a:	85 91       	lpm	r24, Z+
    605c:	27 ff       	sbrs	r18, 7
    605e:	81 91       	ld	r24, Z+
    6060:	5f 01       	movw	r10, r30
    6062:	90 e0       	ldi	r25, 0x00	; 0
    6064:	b6 01       	movw	r22, r12
    6066:	2c 87       	std	Y+12, r18	; 0x0c
    6068:	0e 94 5e 31 	call	0x62bc	; 0x62bc <fputc>
    606c:	2c 85       	ldd	r18, Y+12	; 0x0c
    606e:	f1 10       	cpse	r15, r1
    6070:	fa 94       	dec	r15
    6072:	08 94       	sec
    6074:	61 08       	sbc	r6, r1
    6076:	71 08       	sbc	r7, r1
    6078:	61 14       	cp	r6, r1
    607a:	71 04       	cpc	r7, r1
    607c:	61 f7       	brne	.-40     	; 0x6056 <vfprintf+0x19e>
    607e:	ea c0       	rjmp	.+468    	; 0x6254 <vfprintf+0x39c>
    6080:	84 36       	cpi	r24, 0x64	; 100
    6082:	11 f0       	breq	.+4      	; 0x6088 <vfprintf+0x1d0>
    6084:	89 36       	cpi	r24, 0x69	; 105
    6086:	51 f5       	brne	.+84     	; 0x60dc <vfprintf+0x224>
    6088:	27 ff       	sbrs	r18, 7
    608a:	08 c0       	rjmp	.+16     	; 0x609c <vfprintf+0x1e4>
    608c:	f8 01       	movw	r30, r16
    608e:	60 81       	ld	r22, Z
    6090:	71 81       	ldd	r23, Z+1	; 0x01
    6092:	82 81       	ldd	r24, Z+2	; 0x02
    6094:	93 81       	ldd	r25, Z+3	; 0x03
    6096:	0c 5f       	subi	r16, 0xFC	; 252
    6098:	1f 4f       	sbci	r17, 0xFF	; 255
    609a:	0a c0       	rjmp	.+20     	; 0x60b0 <vfprintf+0x1f8>
    609c:	f8 01       	movw	r30, r16
    609e:	40 81       	ld	r20, Z
    60a0:	51 81       	ldd	r21, Z+1	; 0x01
    60a2:	ba 01       	movw	r22, r20
    60a4:	88 27       	eor	r24, r24
    60a6:	77 fd       	sbrc	r23, 7
    60a8:	80 95       	com	r24
    60aa:	98 2f       	mov	r25, r24
    60ac:	0e 5f       	subi	r16, 0xFE	; 254
    60ae:	1f 4f       	sbci	r17, 0xFF	; 255
    60b0:	4f e6       	ldi	r20, 0x6F	; 111
    60b2:	b4 2e       	mov	r11, r20
    60b4:	b2 22       	and	r11, r18
    60b6:	97 ff       	sbrs	r25, 7
    60b8:	09 c0       	rjmp	.+18     	; 0x60cc <vfprintf+0x214>
    60ba:	90 95       	com	r25
    60bc:	80 95       	com	r24
    60be:	70 95       	com	r23
    60c0:	61 95       	neg	r22
    60c2:	7f 4f       	sbci	r23, 0xFF	; 255
    60c4:	8f 4f       	sbci	r24, 0xFF	; 255
    60c6:	9f 4f       	sbci	r25, 0xFF	; 255
    60c8:	f0 e8       	ldi	r31, 0x80	; 128
    60ca:	bf 2a       	or	r11, r31
    60cc:	a4 01       	movw	r20, r8
    60ce:	2a e0       	ldi	r18, 0x0A	; 10
    60d0:	30 e0       	ldi	r19, 0x00	; 0
    60d2:	0e 94 8a 31 	call	0x6314	; 0x6314 <__ultoa_invert>
    60d6:	78 2e       	mov	r7, r24
    60d8:	78 18       	sub	r7, r8
    60da:	43 c0       	rjmp	.+134    	; 0x6162 <vfprintf+0x2aa>
    60dc:	85 37       	cpi	r24, 0x75	; 117
    60de:	31 f4       	brne	.+12     	; 0x60ec <vfprintf+0x234>
    60e0:	3f ee       	ldi	r19, 0xEF	; 239
    60e2:	b3 2e       	mov	r11, r19
    60e4:	b2 22       	and	r11, r18
    60e6:	2a e0       	ldi	r18, 0x0A	; 10
    60e8:	30 e0       	ldi	r19, 0x00	; 0
    60ea:	23 c0       	rjmp	.+70     	; 0x6132 <vfprintf+0x27a>
    60ec:	99 ef       	ldi	r25, 0xF9	; 249
    60ee:	b9 2e       	mov	r11, r25
    60f0:	b2 22       	and	r11, r18
    60f2:	8f 36       	cpi	r24, 0x6F	; 111
    60f4:	61 f0       	breq	.+24     	; 0x610e <vfprintf+0x256>
    60f6:	80 37       	cpi	r24, 0x70	; 112
    60f8:	20 f4       	brcc	.+8      	; 0x6102 <vfprintf+0x24a>
    60fa:	88 35       	cpi	r24, 0x58	; 88
    60fc:	09 f0       	breq	.+2      	; 0x6100 <vfprintf+0x248>
    60fe:	ad c0       	rjmp	.+346    	; 0x625a <vfprintf+0x3a2>
    6100:	12 c0       	rjmp	.+36     	; 0x6126 <vfprintf+0x26e>
    6102:	80 37       	cpi	r24, 0x70	; 112
    6104:	39 f0       	breq	.+14     	; 0x6114 <vfprintf+0x25c>
    6106:	88 37       	cpi	r24, 0x78	; 120
    6108:	09 f0       	breq	.+2      	; 0x610c <vfprintf+0x254>
    610a:	a7 c0       	rjmp	.+334    	; 0x625a <vfprintf+0x3a2>
    610c:	05 c0       	rjmp	.+10     	; 0x6118 <vfprintf+0x260>
    610e:	28 e0       	ldi	r18, 0x08	; 8
    6110:	30 e0       	ldi	r19, 0x00	; 0
    6112:	0f c0       	rjmp	.+30     	; 0x6132 <vfprintf+0x27a>
    6114:	20 e1       	ldi	r18, 0x10	; 16
    6116:	b2 2a       	or	r11, r18
    6118:	b4 fe       	sbrs	r11, 4
    611a:	02 c0       	rjmp	.+4      	; 0x6120 <vfprintf+0x268>
    611c:	84 e0       	ldi	r24, 0x04	; 4
    611e:	b8 2a       	or	r11, r24
    6120:	20 e1       	ldi	r18, 0x10	; 16
    6122:	30 e0       	ldi	r19, 0x00	; 0
    6124:	06 c0       	rjmp	.+12     	; 0x6132 <vfprintf+0x27a>
    6126:	b4 fe       	sbrs	r11, 4
    6128:	02 c0       	rjmp	.+4      	; 0x612e <vfprintf+0x276>
    612a:	e6 e0       	ldi	r30, 0x06	; 6
    612c:	be 2a       	or	r11, r30
    612e:	20 e1       	ldi	r18, 0x10	; 16
    6130:	32 e0       	ldi	r19, 0x02	; 2
    6132:	b7 fe       	sbrs	r11, 7
    6134:	08 c0       	rjmp	.+16     	; 0x6146 <vfprintf+0x28e>
    6136:	f8 01       	movw	r30, r16
    6138:	60 81       	ld	r22, Z
    613a:	71 81       	ldd	r23, Z+1	; 0x01
    613c:	82 81       	ldd	r24, Z+2	; 0x02
    613e:	93 81       	ldd	r25, Z+3	; 0x03
    6140:	0c 5f       	subi	r16, 0xFC	; 252
    6142:	1f 4f       	sbci	r17, 0xFF	; 255
    6144:	07 c0       	rjmp	.+14     	; 0x6154 <vfprintf+0x29c>
    6146:	f8 01       	movw	r30, r16
    6148:	60 81       	ld	r22, Z
    614a:	71 81       	ldd	r23, Z+1	; 0x01
    614c:	80 e0       	ldi	r24, 0x00	; 0
    614e:	90 e0       	ldi	r25, 0x00	; 0
    6150:	0e 5f       	subi	r16, 0xFE	; 254
    6152:	1f 4f       	sbci	r17, 0xFF	; 255
    6154:	a4 01       	movw	r20, r8
    6156:	0e 94 8a 31 	call	0x6314	; 0x6314 <__ultoa_invert>
    615a:	78 2e       	mov	r7, r24
    615c:	78 18       	sub	r7, r8
    615e:	ff e7       	ldi	r31, 0x7F	; 127
    6160:	bf 22       	and	r11, r31
    6162:	b6 fe       	sbrs	r11, 6
    6164:	0b c0       	rjmp	.+22     	; 0x617c <vfprintf+0x2c4>
    6166:	2e ef       	ldi	r18, 0xFE	; 254
    6168:	b2 22       	and	r11, r18
    616a:	7e 14       	cp	r7, r14
    616c:	38 f4       	brcc	.+14     	; 0x617c <vfprintf+0x2c4>
    616e:	b4 fe       	sbrs	r11, 4
    6170:	07 c0       	rjmp	.+14     	; 0x6180 <vfprintf+0x2c8>
    6172:	b2 fc       	sbrc	r11, 2
    6174:	05 c0       	rjmp	.+10     	; 0x6180 <vfprintf+0x2c8>
    6176:	8f ee       	ldi	r24, 0xEF	; 239
    6178:	b8 22       	and	r11, r24
    617a:	02 c0       	rjmp	.+4      	; 0x6180 <vfprintf+0x2c8>
    617c:	a7 2c       	mov	r10, r7
    617e:	01 c0       	rjmp	.+2      	; 0x6182 <vfprintf+0x2ca>
    6180:	ae 2c       	mov	r10, r14
    6182:	8b 2d       	mov	r24, r11
    6184:	b4 fe       	sbrs	r11, 4
    6186:	0d c0       	rjmp	.+26     	; 0x61a2 <vfprintf+0x2ea>
    6188:	fe 01       	movw	r30, r28
    618a:	e7 0d       	add	r30, r7
    618c:	f1 1d       	adc	r31, r1
    618e:	90 81       	ld	r25, Z
    6190:	90 33       	cpi	r25, 0x30	; 48
    6192:	19 f4       	brne	.+6      	; 0x619a <vfprintf+0x2e2>
    6194:	e9 ee       	ldi	r30, 0xE9	; 233
    6196:	be 22       	and	r11, r30
    6198:	07 c0       	rjmp	.+14     	; 0x61a8 <vfprintf+0x2f0>
    619a:	a3 94       	inc	r10
    619c:	b2 fe       	sbrs	r11, 2
    619e:	04 c0       	rjmp	.+8      	; 0x61a8 <vfprintf+0x2f0>
    61a0:	02 c0       	rjmp	.+4      	; 0x61a6 <vfprintf+0x2ee>
    61a2:	86 78       	andi	r24, 0x86	; 134
    61a4:	09 f0       	breq	.+2      	; 0x61a8 <vfprintf+0x2f0>
    61a6:	a3 94       	inc	r10
    61a8:	6b 2c       	mov	r6, r11
    61aa:	b3 fc       	sbrc	r11, 3
    61ac:	14 c0       	rjmp	.+40     	; 0x61d6 <vfprintf+0x31e>
    61ae:	b0 fe       	sbrs	r11, 0
    61b0:	0f c0       	rjmp	.+30     	; 0x61d0 <vfprintf+0x318>
    61b2:	af 14       	cp	r10, r15
    61b4:	10 f0       	brcs	.+4      	; 0x61ba <vfprintf+0x302>
    61b6:	e7 2c       	mov	r14, r7
    61b8:	0b c0       	rjmp	.+22     	; 0x61d0 <vfprintf+0x318>
    61ba:	e7 2c       	mov	r14, r7
    61bc:	ef 0c       	add	r14, r15
    61be:	ea 18       	sub	r14, r10
    61c0:	af 2c       	mov	r10, r15
    61c2:	06 c0       	rjmp	.+12     	; 0x61d0 <vfprintf+0x318>
    61c4:	80 e2       	ldi	r24, 0x20	; 32
    61c6:	90 e0       	ldi	r25, 0x00	; 0
    61c8:	b6 01       	movw	r22, r12
    61ca:	0e 94 5e 31 	call	0x62bc	; 0x62bc <fputc>
    61ce:	a3 94       	inc	r10
    61d0:	af 14       	cp	r10, r15
    61d2:	c0 f3       	brcs	.-16     	; 0x61c4 <vfprintf+0x30c>
    61d4:	04 c0       	rjmp	.+8      	; 0x61de <vfprintf+0x326>
    61d6:	af 14       	cp	r10, r15
    61d8:	10 f4       	brcc	.+4      	; 0x61de <vfprintf+0x326>
    61da:	fa 18       	sub	r15, r10
    61dc:	01 c0       	rjmp	.+2      	; 0x61e0 <vfprintf+0x328>
    61de:	ff 24       	eor	r15, r15
    61e0:	64 fe       	sbrs	r6, 4
    61e2:	0f c0       	rjmp	.+30     	; 0x6202 <vfprintf+0x34a>
    61e4:	80 e3       	ldi	r24, 0x30	; 48
    61e6:	90 e0       	ldi	r25, 0x00	; 0
    61e8:	b6 01       	movw	r22, r12
    61ea:	0e 94 5e 31 	call	0x62bc	; 0x62bc <fputc>
    61ee:	62 fe       	sbrs	r6, 2
    61f0:	1d c0       	rjmp	.+58     	; 0x622c <vfprintf+0x374>
    61f2:	61 fc       	sbrc	r6, 1
    61f4:	03 c0       	rjmp	.+6      	; 0x61fc <vfprintf+0x344>
    61f6:	88 e7       	ldi	r24, 0x78	; 120
    61f8:	90 e0       	ldi	r25, 0x00	; 0
    61fa:	0e c0       	rjmp	.+28     	; 0x6218 <vfprintf+0x360>
    61fc:	88 e5       	ldi	r24, 0x58	; 88
    61fe:	90 e0       	ldi	r25, 0x00	; 0
    6200:	0b c0       	rjmp	.+22     	; 0x6218 <vfprintf+0x360>
    6202:	86 2d       	mov	r24, r6
    6204:	86 78       	andi	r24, 0x86	; 134
    6206:	91 f0       	breq	.+36     	; 0x622c <vfprintf+0x374>
    6208:	61 fe       	sbrs	r6, 1
    620a:	02 c0       	rjmp	.+4      	; 0x6210 <vfprintf+0x358>
    620c:	8b e2       	ldi	r24, 0x2B	; 43
    620e:	01 c0       	rjmp	.+2      	; 0x6212 <vfprintf+0x35a>
    6210:	80 e2       	ldi	r24, 0x20	; 32
    6212:	b7 fc       	sbrc	r11, 7
    6214:	8d e2       	ldi	r24, 0x2D	; 45
    6216:	90 e0       	ldi	r25, 0x00	; 0
    6218:	b6 01       	movw	r22, r12
    621a:	0e 94 5e 31 	call	0x62bc	; 0x62bc <fputc>
    621e:	06 c0       	rjmp	.+12     	; 0x622c <vfprintf+0x374>
    6220:	80 e3       	ldi	r24, 0x30	; 48
    6222:	90 e0       	ldi	r25, 0x00	; 0
    6224:	b6 01       	movw	r22, r12
    6226:	0e 94 5e 31 	call	0x62bc	; 0x62bc <fputc>
    622a:	ea 94       	dec	r14
    622c:	7e 14       	cp	r7, r14
    622e:	c0 f3       	brcs	.-16     	; 0x6220 <vfprintf+0x368>
    6230:	7a 94       	dec	r7
    6232:	f4 01       	movw	r30, r8
    6234:	e7 0d       	add	r30, r7
    6236:	f1 1d       	adc	r31, r1
    6238:	80 81       	ld	r24, Z
    623a:	90 e0       	ldi	r25, 0x00	; 0
    623c:	b6 01       	movw	r22, r12
    623e:	0e 94 5e 31 	call	0x62bc	; 0x62bc <fputc>
    6242:	77 20       	and	r7, r7
    6244:	a9 f7       	brne	.-22     	; 0x6230 <vfprintf+0x378>
    6246:	06 c0       	rjmp	.+12     	; 0x6254 <vfprintf+0x39c>
    6248:	80 e2       	ldi	r24, 0x20	; 32
    624a:	90 e0       	ldi	r25, 0x00	; 0
    624c:	b6 01       	movw	r22, r12
    624e:	0e 94 5e 31 	call	0x62bc	; 0x62bc <fputc>
    6252:	fa 94       	dec	r15
    6254:	ff 20       	and	r15, r15
    6256:	c1 f7       	brne	.-16     	; 0x6248 <vfprintf+0x390>
    6258:	47 ce       	rjmp	.-882    	; 0x5ee8 <vfprintf+0x30>
    625a:	f6 01       	movw	r30, r12
    625c:	26 81       	ldd	r18, Z+6	; 0x06
    625e:	37 81       	ldd	r19, Z+7	; 0x07
    6260:	c9 01       	movw	r24, r18
    6262:	2c 96       	adiw	r28, 0x0c	; 12
    6264:	e1 e1       	ldi	r30, 0x11	; 17
    6266:	0c 94 a0 29 	jmp	0x5340	; 0x5340 <__epilogue_restores__+0x2>

0000626a <__ctype_isfalse>:
    626a:	99 27       	eor	r25, r25
    626c:	88 27       	eor	r24, r24

0000626e <__ctype_istrue>:
    626e:	08 95       	ret

00006270 <strnlen_P>:
    6270:	fc 01       	movw	r30, r24
    6272:	05 90       	lpm	r0, Z+
    6274:	61 50       	subi	r22, 0x01	; 1
    6276:	70 40       	sbci	r23, 0x00	; 0
    6278:	01 10       	cpse	r0, r1
    627a:	d8 f7       	brcc	.-10     	; 0x6272 <strnlen_P+0x2>
    627c:	80 95       	com	r24
    627e:	90 95       	com	r25
    6280:	8e 0f       	add	r24, r30
    6282:	9f 1f       	adc	r25, r31
    6284:	08 95       	ret

00006286 <strnlen>:
    6286:	fc 01       	movw	r30, r24
    6288:	61 50       	subi	r22, 0x01	; 1
    628a:	70 40       	sbci	r23, 0x00	; 0
    628c:	01 90       	ld	r0, Z+
    628e:	01 10       	cpse	r0, r1
    6290:	d8 f7       	brcc	.-10     	; 0x6288 <strnlen+0x2>
    6292:	80 95       	com	r24
    6294:	90 95       	com	r25
    6296:	8e 0f       	add	r24, r30
    6298:	9f 1f       	adc	r25, r31
    629a:	08 95       	ret

0000629c <strrev>:
    629c:	dc 01       	movw	r26, r24
    629e:	fc 01       	movw	r30, r24
    62a0:	67 2f       	mov	r22, r23
    62a2:	71 91       	ld	r23, Z+
    62a4:	77 23       	and	r23, r23
    62a6:	e1 f7       	brne	.-8      	; 0x62a0 <strrev+0x4>
    62a8:	32 97       	sbiw	r30, 0x02	; 2
    62aa:	04 c0       	rjmp	.+8      	; 0x62b4 <strrev+0x18>
    62ac:	7c 91       	ld	r23, X
    62ae:	6d 93       	st	X+, r22
    62b0:	70 83       	st	Z, r23
    62b2:	62 91       	ld	r22, -Z
    62b4:	ae 17       	cp	r26, r30
    62b6:	bf 07       	cpc	r27, r31
    62b8:	c8 f3       	brcs	.-14     	; 0x62ac <strrev+0x10>
    62ba:	08 95       	ret

000062bc <fputc>:
    62bc:	0f 93       	push	r16
    62be:	1f 93       	push	r17
    62c0:	cf 93       	push	r28
    62c2:	df 93       	push	r29
    62c4:	8c 01       	movw	r16, r24
    62c6:	eb 01       	movw	r28, r22
    62c8:	8b 81       	ldd	r24, Y+3	; 0x03
    62ca:	81 ff       	sbrs	r24, 1
    62cc:	1b c0       	rjmp	.+54     	; 0x6304 <fputc+0x48>
    62ce:	82 ff       	sbrs	r24, 2
    62d0:	0d c0       	rjmp	.+26     	; 0x62ec <fputc+0x30>
    62d2:	2e 81       	ldd	r18, Y+6	; 0x06
    62d4:	3f 81       	ldd	r19, Y+7	; 0x07
    62d6:	8c 81       	ldd	r24, Y+4	; 0x04
    62d8:	9d 81       	ldd	r25, Y+5	; 0x05
    62da:	28 17       	cp	r18, r24
    62dc:	39 07       	cpc	r19, r25
    62de:	64 f4       	brge	.+24     	; 0x62f8 <fputc+0x3c>
    62e0:	e8 81       	ld	r30, Y
    62e2:	f9 81       	ldd	r31, Y+1	; 0x01
    62e4:	01 93       	st	Z+, r16
    62e6:	f9 83       	std	Y+1, r31	; 0x01
    62e8:	e8 83       	st	Y, r30
    62ea:	06 c0       	rjmp	.+12     	; 0x62f8 <fputc+0x3c>
    62ec:	e8 85       	ldd	r30, Y+8	; 0x08
    62ee:	f9 85       	ldd	r31, Y+9	; 0x09
    62f0:	80 2f       	mov	r24, r16
    62f2:	09 95       	icall
    62f4:	00 97       	sbiw	r24, 0x00	; 0
    62f6:	31 f4       	brne	.+12     	; 0x6304 <fputc+0x48>
    62f8:	8e 81       	ldd	r24, Y+6	; 0x06
    62fa:	9f 81       	ldd	r25, Y+7	; 0x07
    62fc:	01 96       	adiw	r24, 0x01	; 1
    62fe:	9f 83       	std	Y+7, r25	; 0x07
    6300:	8e 83       	std	Y+6, r24	; 0x06
    6302:	02 c0       	rjmp	.+4      	; 0x6308 <fputc+0x4c>
    6304:	0f ef       	ldi	r16, 0xFF	; 255
    6306:	1f ef       	ldi	r17, 0xFF	; 255
    6308:	c8 01       	movw	r24, r16
    630a:	df 91       	pop	r29
    630c:	cf 91       	pop	r28
    630e:	1f 91       	pop	r17
    6310:	0f 91       	pop	r16
    6312:	08 95       	ret

00006314 <__ultoa_invert>:
    6314:	fa 01       	movw	r30, r20
    6316:	aa 27       	eor	r26, r26
    6318:	28 30       	cpi	r18, 0x08	; 8
    631a:	51 f1       	breq	.+84     	; 0x6370 <__ultoa_invert+0x5c>
    631c:	20 31       	cpi	r18, 0x10	; 16
    631e:	81 f1       	breq	.+96     	; 0x6380 <__ultoa_invert+0x6c>
    6320:	e8 94       	clt
    6322:	6f 93       	push	r22
    6324:	6e 7f       	andi	r22, 0xFE	; 254
    6326:	6e 5f       	subi	r22, 0xFE	; 254
    6328:	7f 4f       	sbci	r23, 0xFF	; 255
    632a:	8f 4f       	sbci	r24, 0xFF	; 255
    632c:	9f 4f       	sbci	r25, 0xFF	; 255
    632e:	af 4f       	sbci	r26, 0xFF	; 255
    6330:	b1 e0       	ldi	r27, 0x01	; 1
    6332:	3e d0       	rcall	.+124    	; 0x63b0 <__ultoa_invert+0x9c>
    6334:	b4 e0       	ldi	r27, 0x04	; 4
    6336:	3c d0       	rcall	.+120    	; 0x63b0 <__ultoa_invert+0x9c>
    6338:	67 0f       	add	r22, r23
    633a:	78 1f       	adc	r23, r24
    633c:	89 1f       	adc	r24, r25
    633e:	9a 1f       	adc	r25, r26
    6340:	a1 1d       	adc	r26, r1
    6342:	68 0f       	add	r22, r24
    6344:	79 1f       	adc	r23, r25
    6346:	8a 1f       	adc	r24, r26
    6348:	91 1d       	adc	r25, r1
    634a:	a1 1d       	adc	r26, r1
    634c:	6a 0f       	add	r22, r26
    634e:	71 1d       	adc	r23, r1
    6350:	81 1d       	adc	r24, r1
    6352:	91 1d       	adc	r25, r1
    6354:	a1 1d       	adc	r26, r1
    6356:	20 d0       	rcall	.+64     	; 0x6398 <__ultoa_invert+0x84>
    6358:	09 f4       	brne	.+2      	; 0x635c <__ultoa_invert+0x48>
    635a:	68 94       	set
    635c:	3f 91       	pop	r19
    635e:	2a e0       	ldi	r18, 0x0A	; 10
    6360:	26 9f       	mul	r18, r22
    6362:	11 24       	eor	r1, r1
    6364:	30 19       	sub	r19, r0
    6366:	30 5d       	subi	r19, 0xD0	; 208
    6368:	31 93       	st	Z+, r19
    636a:	de f6       	brtc	.-74     	; 0x6322 <__ultoa_invert+0xe>
    636c:	cf 01       	movw	r24, r30
    636e:	08 95       	ret
    6370:	46 2f       	mov	r20, r22
    6372:	47 70       	andi	r20, 0x07	; 7
    6374:	40 5d       	subi	r20, 0xD0	; 208
    6376:	41 93       	st	Z+, r20
    6378:	b3 e0       	ldi	r27, 0x03	; 3
    637a:	0f d0       	rcall	.+30     	; 0x639a <__ultoa_invert+0x86>
    637c:	c9 f7       	brne	.-14     	; 0x6370 <__ultoa_invert+0x5c>
    637e:	f6 cf       	rjmp	.-20     	; 0x636c <__ultoa_invert+0x58>
    6380:	46 2f       	mov	r20, r22
    6382:	4f 70       	andi	r20, 0x0F	; 15
    6384:	40 5d       	subi	r20, 0xD0	; 208
    6386:	4a 33       	cpi	r20, 0x3A	; 58
    6388:	18 f0       	brcs	.+6      	; 0x6390 <__ultoa_invert+0x7c>
    638a:	49 5d       	subi	r20, 0xD9	; 217
    638c:	31 fd       	sbrc	r19, 1
    638e:	40 52       	subi	r20, 0x20	; 32
    6390:	41 93       	st	Z+, r20
    6392:	02 d0       	rcall	.+4      	; 0x6398 <__ultoa_invert+0x84>
    6394:	a9 f7       	brne	.-22     	; 0x6380 <__ultoa_invert+0x6c>
    6396:	ea cf       	rjmp	.-44     	; 0x636c <__ultoa_invert+0x58>
    6398:	b4 e0       	ldi	r27, 0x04	; 4
    639a:	a6 95       	lsr	r26
    639c:	97 95       	ror	r25
    639e:	87 95       	ror	r24
    63a0:	77 95       	ror	r23
    63a2:	67 95       	ror	r22
    63a4:	ba 95       	dec	r27
    63a6:	c9 f7       	brne	.-14     	; 0x639a <__ultoa_invert+0x86>
    63a8:	00 97       	sbiw	r24, 0x00	; 0
    63aa:	61 05       	cpc	r22, r1
    63ac:	71 05       	cpc	r23, r1
    63ae:	08 95       	ret
    63b0:	9b 01       	movw	r18, r22
    63b2:	ac 01       	movw	r20, r24
    63b4:	0a 2e       	mov	r0, r26
    63b6:	06 94       	lsr	r0
    63b8:	57 95       	ror	r21
    63ba:	47 95       	ror	r20
    63bc:	37 95       	ror	r19
    63be:	27 95       	ror	r18
    63c0:	ba 95       	dec	r27
    63c2:	c9 f7       	brne	.-14     	; 0x63b6 <__ultoa_invert+0xa2>
    63c4:	62 0f       	add	r22, r18
    63c6:	73 1f       	adc	r23, r19
    63c8:	84 1f       	adc	r24, r20
    63ca:	95 1f       	adc	r25, r21
    63cc:	a0 1d       	adc	r26, r0
    63ce:	08 95       	ret

000063d0 <__do_global_dtors>:
    63d0:	16 e0       	ldi	r17, 0x06	; 6
    63d2:	c0 ed       	ldi	r28, 0xD0	; 208
    63d4:	d6 e0       	ldi	r29, 0x06	; 6
    63d6:	04 c0       	rjmp	.+8      	; 0x63e0 <__do_global_dtors+0x10>
    63d8:	fe 01       	movw	r30, r28
    63da:	0e 94 bc 29 	call	0x5378	; 0x5378 <__tablejump__>
    63de:	22 96       	adiw	r28, 0x02	; 2
    63e0:	c2 3d       	cpi	r28, 0xD2	; 210
    63e2:	d1 07       	cpc	r29, r17
    63e4:	c9 f7       	brne	.-14     	; 0x63d8 <__do_global_dtors+0x8>
    63e6:	f8 94       	cli

000063e8 <__stop_program>:
    63e8:	ff cf       	rjmp	.-2      	; 0x63e8 <__stop_program>
