
RoverMission.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000180  00800100  00005ac0  00005b54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005ac0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004c3  00800280  00800280  00005cd4  2**0
                  ALLOC
  3 .stab         00001f38  00000000  00000000  00005cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008a9  00000000  00000000  00007c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003a8  00000000  00000000  000084b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000120f  00000000  00000000  0000885d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000854b  00000000  00000000  00009a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002cba  00000000  00000000  00011fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005834  00000000  00000000  00014c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c90  00000000  00000000  0001a4a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001ae4  00000000  00000000  0001b138  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004f1d  00000000  00000000  0001cc1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000578  00000000  00000000  00021b39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__dtors_end>
       4:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
       8:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
       c:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
      10:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
      14:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
      18:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
      1c:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
      20:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
      24:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
      28:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
      2c:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
      30:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
      34:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
      38:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
      3c:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
      40:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__vector_16>
      44:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
      48:	0c 94 62 0c 	jmp	0x18c4	; 0x18c4 <__vector_18>
      4c:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
      50:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
      54:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
      58:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
      5c:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
      60:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__vector_24>
      64:	0c 94 1b 02 	jmp	0x436	; 0x436 <__bad_interrupt>
      68:	25 1f       	adc	r18, r21
      6a:	d3 1e       	adc	r13, r19
      6c:	d3 1e       	adc	r13, r19
      6e:	d3 1e       	adc	r13, r19
      70:	d3 1e       	adc	r13, r19
      72:	d3 1e       	adc	r13, r19
      74:	d3 1e       	adc	r13, r19
      76:	d3 1e       	adc	r13, r19
      78:	2f 1f       	adc	r18, r31
      7a:	d3 1e       	adc	r13, r19
      7c:	d3 1e       	adc	r13, r19
      7e:	d3 1e       	adc	r13, r19
      80:	d3 1e       	adc	r13, r19
      82:	d3 1e       	adc	r13, r19
      84:	d3 1e       	adc	r13, r19
      86:	d3 1e       	adc	r13, r19
      88:	2f 1f       	adc	r18, r31
      8a:	d3 1e       	adc	r13, r19
      8c:	d3 1e       	adc	r13, r19
      8e:	d3 1e       	adc	r13, r19
      90:	d3 1e       	adc	r13, r19
      92:	d3 1e       	adc	r13, r19
      94:	d3 1e       	adc	r13, r19
      96:	d3 1e       	adc	r13, r19
      98:	37 1f       	adc	r19, r23
      9a:	d3 1e       	adc	r13, r19
      9c:	d3 1e       	adc	r13, r19
      9e:	d3 1e       	adc	r13, r19
      a0:	d3 1e       	adc	r13, r19
      a2:	d3 1e       	adc	r13, r19
      a4:	d3 1e       	adc	r13, r19
      a6:	d3 1e       	adc	r13, r19
      a8:	46 1f       	adc	r20, r22
      aa:	d3 1e       	adc	r13, r19
      ac:	d3 1e       	adc	r13, r19
      ae:	d3 1e       	adc	r13, r19
      b0:	d3 1e       	adc	r13, r19
      b2:	d3 1e       	adc	r13, r19
      b4:	d3 1e       	adc	r13, r19
      b6:	d3 1e       	adc	r13, r19
      b8:	37 1f       	adc	r19, r23
      ba:	d3 1e       	adc	r13, r19
      bc:	d3 1e       	adc	r13, r19
      be:	d3 1e       	adc	r13, r19
      c0:	d3 1e       	adc	r13, r19
      c2:	d3 1e       	adc	r13, r19
      c4:	d3 1e       	adc	r13, r19
      c6:	d3 1e       	adc	r13, r19
      c8:	71 1f       	adc	r23, r17
      ca:	d3 1e       	adc	r13, r19
      cc:	d3 1e       	adc	r13, r19
      ce:	d3 1e       	adc	r13, r19
      d0:	d3 1e       	adc	r13, r19
      d2:	d3 1e       	adc	r13, r19
      d4:	d3 1e       	adc	r13, r19
      d6:	d3 1e       	adc	r13, r19
      d8:	7c 1f       	adc	r23, r28
      da:	d3 1e       	adc	r13, r19
      dc:	d3 1e       	adc	r13, r19
      de:	d3 1e       	adc	r13, r19
      e0:	d3 1e       	adc	r13, r19
      e2:	d3 1e       	adc	r13, r19
      e4:	d3 1e       	adc	r13, r19
      e6:	d3 1e       	adc	r13, r19
      e8:	f9 1e       	adc	r15, r25
      ea:	d3 1e       	adc	r13, r19
      ec:	d3 1e       	adc	r13, r19
      ee:	d3 1e       	adc	r13, r19
      f0:	d3 1e       	adc	r13, r19
      f2:	d3 1e       	adc	r13, r19
      f4:	d3 1e       	adc	r13, r19
      f6:	d3 1e       	adc	r13, r19
      f8:	0c 1f       	adc	r16, r28
      fa:	d3 1e       	adc	r13, r19
      fc:	d3 1e       	adc	r13, r19
      fe:	d3 1e       	adc	r13, r19
     100:	d3 1e       	adc	r13, r19
     102:	d3 1e       	adc	r13, r19
     104:	d3 1e       	adc	r13, r19
     106:	d3 1e       	adc	r13, r19
     108:	ed 1e       	adc	r14, r29
     10a:	d3 1e       	adc	r13, r19
     10c:	d3 1e       	adc	r13, r19
     10e:	d3 1e       	adc	r13, r19
     110:	d3 1e       	adc	r13, r19
     112:	d3 1e       	adc	r13, r19
     114:	d3 1e       	adc	r13, r19
     116:	d3 1e       	adc	r13, r19
     118:	00 1f       	adc	r16, r16
     11a:	d3 1e       	adc	r13, r19
     11c:	d3 1e       	adc	r13, r19
     11e:	d3 1e       	adc	r13, r19
     120:	d3 1e       	adc	r13, r19
     122:	d3 1e       	adc	r13, r19
     124:	d3 1e       	adc	r13, r19
     126:	d3 1e       	adc	r13, r19
     128:	1c 1f       	adc	r17, r28
     12a:	d3 1e       	adc	r13, r19
     12c:	d3 1e       	adc	r13, r19
     12e:	d3 1e       	adc	r13, r19
     130:	d3 1e       	adc	r13, r19
     132:	d3 1e       	adc	r13, r19
     134:	d3 1e       	adc	r13, r19
     136:	d3 1e       	adc	r13, r19
     138:	1c 1f       	adc	r17, r28
     13a:	d3 1e       	adc	r13, r19
     13c:	d3 1e       	adc	r13, r19
     13e:	d3 1e       	adc	r13, r19
     140:	d3 1e       	adc	r13, r19
     142:	d3 1e       	adc	r13, r19
     144:	d3 1e       	adc	r13, r19
     146:	d3 1e       	adc	r13, r19
     148:	1c 1f       	adc	r17, r28
     14a:	d3 1e       	adc	r13, r19
     14c:	d3 1e       	adc	r13, r19
     14e:	d3 1e       	adc	r13, r19
     150:	d3 1e       	adc	r13, r19
     152:	d3 1e       	adc	r13, r19
     154:	d3 1e       	adc	r13, r19
     156:	d3 1e       	adc	r13, r19
     158:	1c 1f       	adc	r17, r28
     15a:	d3 1e       	adc	r13, r19
     15c:	d3 1e       	adc	r13, r19
     15e:	d3 1e       	adc	r13, r19
     160:	d3 1e       	adc	r13, r19
     162:	d3 1e       	adc	r13, r19
     164:	d3 1e       	adc	r13, r19
     166:	d3 1e       	adc	r13, r19
     168:	e4 1e       	adc	r14, r20
     16a:	d3 1e       	adc	r13, r19
     16c:	d3 1e       	adc	r13, r19
     16e:	d3 1e       	adc	r13, r19
     170:	d3 1e       	adc	r13, r19
     172:	d3 1e       	adc	r13, r19
     174:	d3 1e       	adc	r13, r19
     176:	d3 1e       	adc	r13, r19
     178:	e9 1e       	adc	r14, r25
     17a:	d3 1e       	adc	r13, r19
     17c:	d3 1e       	adc	r13, r19
     17e:	d3 1e       	adc	r13, r19
     180:	d3 1e       	adc	r13, r19
     182:	d3 1e       	adc	r13, r19
     184:	d3 1e       	adc	r13, r19
     186:	d3 1e       	adc	r13, r19
     188:	e4 1e       	adc	r14, r20
     18a:	d3 1e       	adc	r13, r19
     18c:	d3 1e       	adc	r13, r19
     18e:	d3 1e       	adc	r13, r19
     190:	d3 1e       	adc	r13, r19
     192:	d3 1e       	adc	r13, r19
     194:	d3 1e       	adc	r13, r19
     196:	d3 1e       	adc	r13, r19
     198:	e9 1e       	adc	r14, r25
     19a:	d3 1e       	adc	r13, r19
     19c:	d3 1e       	adc	r13, r19
     19e:	d3 1e       	adc	r13, r19
     1a0:	d3 1e       	adc	r13, r19
     1a2:	d3 1e       	adc	r13, r19
     1a4:	d3 1e       	adc	r13, r19
     1a6:	d3 1e       	adc	r13, r19
     1a8:	51 1f       	adc	r21, r17
     1aa:	d3 1e       	adc	r13, r19
     1ac:	d3 1e       	adc	r13, r19
     1ae:	d3 1e       	adc	r13, r19
     1b0:	d3 1e       	adc	r13, r19
     1b2:	d3 1e       	adc	r13, r19
     1b4:	d3 1e       	adc	r13, r19
     1b6:	d3 1e       	adc	r13, r19
     1b8:	a9 1e       	adc	r10, r25
     1ba:	d3 1e       	adc	r13, r19
     1bc:	d3 1e       	adc	r13, r19
     1be:	d3 1e       	adc	r13, r19
     1c0:	d3 1e       	adc	r13, r19
     1c2:	d3 1e       	adc	r13, r19
     1c4:	d3 1e       	adc	r13, r19
     1c6:	d3 1e       	adc	r13, r19
     1c8:	a9 1e       	adc	r10, r25
     1ca:	d3 1e       	adc	r13, r19
     1cc:	d3 1e       	adc	r13, r19
     1ce:	d3 1e       	adc	r13, r19
     1d0:	d3 1e       	adc	r13, r19
     1d2:	d3 1e       	adc	r13, r19
     1d4:	d3 1e       	adc	r13, r19
     1d6:	d3 1e       	adc	r13, r19
     1d8:	be 1e       	adc	r11, r30
     1da:	d3 1e       	adc	r13, r19
     1dc:	d3 1e       	adc	r13, r19
     1de:	d3 1e       	adc	r13, r19
     1e0:	d3 1e       	adc	r13, r19
     1e2:	d3 1e       	adc	r13, r19
     1e4:	d3 1e       	adc	r13, r19
     1e6:	d3 1e       	adc	r13, r19
     1e8:	16 1f       	adc	r17, r22
     1ea:	d3 1e       	adc	r13, r19
     1ec:	d3 1e       	adc	r13, r19
     1ee:	d3 1e       	adc	r13, r19
     1f0:	d3 1e       	adc	r13, r19
     1f2:	d3 1e       	adc	r13, r19
     1f4:	d3 1e       	adc	r13, r19
     1f6:	d3 1e       	adc	r13, r19
     1f8:	16 1f       	adc	r17, r22

000001fa <_ZL15long_range_data>:
     1fa:	e6 db d9 d7 d5 d3 d2 d0 ce cd cb c9 c8 c6 c5 c3     ................
     20a:	c2 c0 bf be bc bb b9 b8 b7 b6 b4 b3 b2 b1 af ae     ................
     21a:	ad ac ab aa a8 a7 a6 a5 a4 a3 a2 a1 a0 9f 9e 9d     ................
     22a:	9c 9b 9a 99 98 98 97 96 95 94 93 92 92 91 90 8f     ................
     23a:	8e 8d 8d 8c 8b 8a 8a 89 88 88 87 86 85 85 84 83     ................
     24a:	83 82 81 81 80 7f 7f 7e 7e 7d 7c 7c 7b 7b 7a 79     .......~~}||{{zy
     25a:	79 78 78 77 77 76 76 75 74 74 73 73 72 72 71 71     yxxwwvvuttssrrqq
     26a:	70 70 6f 6f 6e 6e 6d 6d 6d 6c 6c 6b 6b 6a 6a 69     ppoonnmmmllkkjji
     27a:	69 69 68 68 67 67 66 66 66 65 65 64 64 64 63 63     iihhggfffeedddcc
     28a:	63 62 62 61 61 61 60 60 60 5f 5f 5f 5e 5e 5d 5d     cbbaaa```___^^]]
     29a:	5d 5c 5c 5c 5b 5b 5b 5b 5a 5a 5a 59 59 59 58 58     ]\\\[[[[ZZZYYYXX
     2aa:	58 57 57 57 57 56 56 56 55 55 55 55 54 54 54 53     XWWWWVVVUUUUTTTS
     2ba:	53 53 53 52 52 52 52 51 51 51 51 50 50 50 50 4f     SSSRRRRQQQQPPPPO
     2ca:	4f 4f 4f 4e 4e 4e 4e 4d 4d 4d 4d 4c 4c 4c 4c 4c     OOONNNNMMMMLLLLL
     2da:	4b 4b 4b 4b 4a 4a 4a 4a 4a 49 49 49 49 49 48 48     KKKKJJJJJIIIIIHH
     2ea:	48 48 48 47 47 47 47 47 46 46 46 46 46 45 45 45     HHHGGGGGFFFFFEEE
     2fa:	45 45 44 44 44 44 44 44 43 43 43 43 43 43 42 42     EEDDDDDDCCCCCCBB
     30a:	42 42 42 41 41 41 41 41 41 41 40 40 40 40 40 40     BBBAAAAAAA@@@@@@
     31a:	3f 3f 3f 3f 3f 3f 3e 3e 3e 3e 3e 3e 3e 3d 3d 3d     ??????>>>>>>>===
     32a:	3d 3d 3d 3d 3c 3c 3c 3c 3c 3c 3c 3b 3b 3b 3b 3b     ====<<<<<<<;;;;;
     33a:	3b 3b 3a 3a 3a 3a 3a 3a 3a 3a 39 39 39 39 39 39     ;;::::::::999999
     34a:	39 39 38 38 38 38 38 38 38 38 37 37 37 37 37 37     9988888888777777
     35a:	37 37 36 36 36 36 36 36 36 36 36 35 35 35 35 35     7766666666655555
     36a:	35 35 35 35 34 34 34 34 34 34 34 34 34 34 33 33     5555444444444433
     37a:	33 33 33 33 33 33 33 32 32                          333333322

00000383 <port_to_mode_PGM>:
     383:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000038d <port_to_output_PGM>:
     38d:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000397 <port_to_input_PGM>:
     397:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000003a1 <digital_pin_to_port_PGM>:
     3a1:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     3b1:	03 03 03 03                                         ....

000003b5 <digital_pin_to_bit_mask_PGM>:
     3b5:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     3c5:	04 08 10 20                                         ... 

000003c9 <digital_pin_to_timer_PGM>:
     3c9:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     3d9:	00 00 00 00 00                                      .....

000003de <__ctors_start>:
     3de:	a3 02       	muls	r26, r19
     3e0:	66 07       	cpc	r22, r22
     3e2:	f5 0d       	add	r31, r5

000003e4 <__ctors_end>:
     3e4:	a8 02       	muls	r26, r24

000003e6 <__dtors_end>:
     3e6:	11 24       	eor	r1, r1
     3e8:	1f be       	out	0x3f, r1	; 63
     3ea:	cf ef       	ldi	r28, 0xFF	; 255
     3ec:	d8 e0       	ldi	r29, 0x08	; 8
     3ee:	de bf       	out	0x3e, r29	; 62
     3f0:	cd bf       	out	0x3d, r28	; 61

000003f2 <__do_copy_data>:
     3f2:	12 e0       	ldi	r17, 0x02	; 2
     3f4:	a0 e0       	ldi	r26, 0x00	; 0
     3f6:	b1 e0       	ldi	r27, 0x01	; 1
     3f8:	e0 ec       	ldi	r30, 0xC0	; 192
     3fa:	fa e5       	ldi	r31, 0x5A	; 90
     3fc:	02 c0       	rjmp	.+4      	; 0x402 <__do_copy_data+0x10>
     3fe:	05 90       	lpm	r0, Z+
     400:	0d 92       	st	X+, r0
     402:	a0 38       	cpi	r26, 0x80	; 128
     404:	b1 07       	cpc	r27, r17
     406:	d9 f7       	brne	.-10     	; 0x3fe <__do_copy_data+0xc>

00000408 <__do_clear_bss>:
     408:	17 e0       	ldi	r17, 0x07	; 7
     40a:	a0 e8       	ldi	r26, 0x80	; 128
     40c:	b2 e0       	ldi	r27, 0x02	; 2
     40e:	01 c0       	rjmp	.+2      	; 0x412 <.do_clear_bss_start>

00000410 <.do_clear_bss_loop>:
     410:	1d 92       	st	X+, r1

00000412 <.do_clear_bss_start>:
     412:	a3 34       	cpi	r26, 0x43	; 67
     414:	b1 07       	cpc	r27, r17
     416:	e1 f7       	brne	.-8      	; 0x410 <.do_clear_bss_loop>

00000418 <__do_global_ctors>:
     418:	13 e0       	ldi	r17, 0x03	; 3
     41a:	c4 ee       	ldi	r28, 0xE4	; 228
     41c:	d3 e0       	ldi	r29, 0x03	; 3
     41e:	04 c0       	rjmp	.+8      	; 0x428 <__do_global_ctors+0x10>
     420:	22 97       	sbiw	r28, 0x02	; 2
     422:	fe 01       	movw	r30, r28
     424:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__tablejump__>
     428:	ce 3d       	cpi	r28, 0xDE	; 222
     42a:	d1 07       	cpc	r29, r17
     42c:	c9 f7       	brne	.-14     	; 0x420 <__do_global_ctors+0x8>
     42e:	0e 94 1d 02 	call	0x43a	; 0x43a <main>
     432:	0c 94 53 2d 	jmp	0x5aa6	; 0x5aa6 <__do_global_dtors>

00000436 <__bad_interrupt>:
     436:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000043a <main>:
     43a:	0e 94 dd 12 	call	0x25ba	; 0x25ba <init>
     43e:	8c e6       	ldi	r24, 0x6C	; 108
     440:	96 e0       	ldi	r25, 0x06	; 6
     442:	40 e0       	ldi	r20, 0x00	; 0
     444:	51 ee       	ldi	r21, 0xE1	; 225
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN14HardwareSerial5beginEl>
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	0e 94 18 13 	call	0x2630	; 0x2630 <analogReference>
     454:	80 e8       	ldi	r24, 0x80	; 128
     456:	92 e0       	ldi	r25, 0x02	; 2
     458:	0e 94 00 03 	call	0x600	; 0x600 <_ZN14HMC6352compass10getHeadingEv>
     45c:	83 e0       	ldi	r24, 0x03	; 3
     45e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <_Z10irDistanceh>
     462:	bc 01       	movw	r22, r24
     464:	83 ee       	ldi	r24, 0xE3	; 227
     466:	95 e0       	ldi	r25, 0x05	; 5
     468:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_ZN15Cmissionconsole11longRangeIREj>
     46c:	82 e0       	ldi	r24, 0x02	; 2
     46e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <_Z10irDistanceh>
     472:	bc 01       	movw	r22, r24
     474:	83 ee       	ldi	r24, 0xE3	; 227
     476:	95 e0       	ldi	r25, 0x05	; 5
     478:	0e 94 6e 06 	call	0xcdc	; 0xcdc <_ZN15Cmissionconsole13mediumRangeIREj>
     47c:	64 e6       	ldi	r22, 0x64	; 100
     47e:	70 e0       	ldi	r23, 0x00	; 0
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 a8 12 	call	0x2550	; 0x2550 <delay>
     488:	e9 cf       	rjmp	.-46     	; 0x45c <main+0x22>

0000048a <T.6>:
     48a:	81 30       	cpi	r24, 0x01	; 1
     48c:	91 05       	cpc	r25, r1
     48e:	09 f0       	breq	.+2      	; 0x492 <T.6+0x8>
     490:	53 c0       	rjmp	.+166    	; 0x538 <T.6+0xae>
     492:	80 e8       	ldi	r24, 0x80	; 128
     494:	92 e0       	ldi	r25, 0x02	; 2
     496:	0e 94 4a 03 	call	0x694	; 0x694 <_ZN14HMC6352compassC1Ev>
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	dc 01       	movw	r26, r24
     4a0:	80 93 84 02 	sts	0x0284, r24
     4a4:	90 93 85 02 	sts	0x0285, r25
     4a8:	a0 93 86 02 	sts	0x0286, r26
     4ac:	b0 93 87 02 	sts	0x0287, r27
     4b0:	80 93 88 02 	sts	0x0288, r24
     4b4:	90 93 89 02 	sts	0x0289, r25
     4b8:	a0 93 8a 02 	sts	0x028A, r26
     4bc:	b0 93 8b 02 	sts	0x028B, r27
     4c0:	86 e6       	ldi	r24, 0x66	; 102
     4c2:	96 e6       	ldi	r25, 0x66	; 102
     4c4:	a6 e6       	ldi	r26, 0x66	; 102
     4c6:	bf e3       	ldi	r27, 0x3F	; 63
     4c8:	80 93 9c 02 	sts	0x029C, r24
     4cc:	90 93 9d 02 	sts	0x029D, r25
     4d0:	a0 93 9e 02 	sts	0x029E, r26
     4d4:	b0 93 9f 02 	sts	0x029F, r27
     4d8:	8a e0       	ldi	r24, 0x0A	; 10
     4da:	97 ed       	ldi	r25, 0xD7	; 215
     4dc:	a3 e2       	ldi	r26, 0x23	; 35
     4de:	bc e3       	ldi	r27, 0x3C	; 60
     4e0:	80 93 a0 02 	sts	0x02A0, r24
     4e4:	90 93 a1 02 	sts	0x02A1, r25
     4e8:	a0 93 a2 02 	sts	0x02A2, r26
     4ec:	b0 93 a3 02 	sts	0x02A3, r27
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	a0 e8       	ldi	r26, 0x80	; 128
     4f6:	bf e3       	ldi	r27, 0x3F	; 63
     4f8:	80 93 a4 02 	sts	0x02A4, r24
     4fc:	90 93 a5 02 	sts	0x02A5, r25
     500:	a0 93 a6 02 	sts	0x02A6, r26
     504:	b0 93 a7 02 	sts	0x02A7, r27
     508:	89 ea       	ldi	r24, 0xA9	; 169
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	63 e0       	ldi	r22, 0x03	; 3
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN10AF_DCMotorC1Ehh>
     514:	8b ea       	ldi	r24, 0xAB	; 171
     516:	92 e0       	ldi	r25, 0x02	; 2
     518:	64 e0       	ldi	r22, 0x04	; 4
     51a:	41 e0       	ldi	r20, 0x01	; 1
     51c:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN10AF_DCMotorC1Ehh>
     520:	8d ea       	ldi	r24, 0xAD	; 173
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	68 ec       	ldi	r22, 0xC8	; 200
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	41 e0       	ldi	r20, 0x01	; 1
     52a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <_ZN10AF_StepperC1Ejh>
     52e:	83 ee       	ldi	r24, 0xE3	; 227
     530:	95 e0       	ldi	r25, 0x05	; 5
     532:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN15CmissionconsoleC1Ev>
     536:	08 95       	ret
     538:	00 97       	sbiw	r24, 0x00	; 0
     53a:	21 f4       	brne	.+8      	; 0x544 <T.6+0xba>
     53c:	83 ee       	ldi	r24, 0xE3	; 227
     53e:	95 e0       	ldi	r25, 0x05	; 5
     540:	0e 94 65 06 	call	0xcca	; 0xcca <_ZN15CmissionconsoleD1Ev>
     544:	08 95       	ret

00000546 <_GLOBAL__I_compass>:
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 45 02 	call	0x48a	; 0x48a <T.6>
     54e:	08 95       	ret

00000550 <_GLOBAL__D_compass>:
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 45 02 	call	0x48a	; 0x48a <T.6>
     558:	08 95       	ret

0000055a <_ZN14HMC6352compass14getLastHeadingEv>:
     55a:	fc 01       	movw	r30, r24
     55c:	82 81       	ldd	r24, Z+2	; 0x02
     55e:	93 81       	ldd	r25, Z+3	; 0x03
     560:	08 95       	ret

00000562 <_ZN14HMC6352compass16enterCalibrationEv>:
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	0f 93       	push	r16
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	ec 01       	movw	r28, r24
     570:	8c 01       	movw	r16, r24
     572:	69 81       	ldd	r22, Y+1	; 0x01
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	6e 7f       	andi	r22, 0xFE	; 254
     578:	70 70       	andi	r23, 0x00	; 0
     57a:	7e 01       	movw	r14, r28
     57c:	9f 2d       	mov	r25, r15
     57e:	0e 94 1c 11 	call	0x2238	; 0x2238 <_ZN7TwoWire17beginTransmissionEi>
     582:	ce 01       	movw	r24, r28
     584:	63 e4       	ldi	r22, 0x43	; 67
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	0e 94 ac 11 	call	0x2358	; 0x2358 <_ZN7TwoWire4sendEi>
     58c:	ce 01       	movw	r24, r28
     58e:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <_ZN7TwoWire15endTransmissionEv>
     592:	ee 24       	eor	r14, r14
     594:	ff 24       	eor	r15, r15
     596:	8d e0       	ldi	r24, 0x0D	; 13
     598:	61 e0       	ldi	r22, 0x01	; 1
     59a:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
     59e:	64 ef       	ldi	r22, 0xF4	; 244
     5a0:	71 e0       	ldi	r23, 0x01	; 1
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 a8 12 	call	0x2550	; 0x2550 <delay>
     5aa:	8d e0       	ldi	r24, 0x0D	; 13
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
     5b2:	64 ef       	ldi	r22, 0xF4	; 244
     5b4:	71 e0       	ldi	r23, 0x01	; 1
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 a8 12 	call	0x2550	; 0x2550 <delay>
     5be:	08 94       	sec
     5c0:	e1 1c       	adc	r14, r1
     5c2:	f1 1c       	adc	r15, r1
     5c4:	24 e1       	ldi	r18, 0x14	; 20
     5c6:	e2 16       	cp	r14, r18
     5c8:	f1 04       	cpc	r15, r1
     5ca:	29 f7       	brne	.-54     	; 0x596 <_ZN14HMC6352compass16enterCalibrationEv+0x34>
     5cc:	69 81       	ldd	r22, Y+1	; 0x01
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	6e 7f       	andi	r22, 0xFE	; 254
     5d2:	70 70       	andi	r23, 0x00	; 0
     5d4:	c8 01       	movw	r24, r16
     5d6:	0e 94 1c 11 	call	0x2238	; 0x2238 <_ZN7TwoWire17beginTransmissionEi>
     5da:	c8 01       	movw	r24, r16
     5dc:	65 e4       	ldi	r22, 0x45	; 69
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	0e 94 ac 11 	call	0x2358	; 0x2358 <_ZN7TwoWire4sendEi>
     5e4:	c8 01       	movw	r24, r16
     5e6:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <_ZN7TwoWire15endTransmissionEv>
     5ea:	8d e0       	ldi	r24, 0x0D	; 13
     5ec:	60 e0       	ldi	r22, 0x00	; 0
     5ee:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	08 95       	ret

00000600 <_ZN14HMC6352compass10getHeadingEv>:
     600:	ef 92       	push	r14
     602:	ff 92       	push	r15
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	ec 01       	movw	r28, r24
     60e:	8d e0       	ldi	r24, 0x0D	; 13
     610:	61 e0       	ldi	r22, 0x01	; 1
     612:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
     616:	8e 01       	movw	r16, r28
     618:	ce 01       	movw	r24, r28
     61a:	69 81       	ldd	r22, Y+1	; 0x01
     61c:	0e 94 12 11 	call	0x2224	; 0x2224 <_ZN7TwoWire17beginTransmissionEh>
     620:	ce 01       	movw	r24, r28
     622:	61 e4       	ldi	r22, 0x41	; 65
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	0e 94 ac 11 	call	0x2358	; 0x2358 <_ZN7TwoWire4sendEi>
     62a:	ce 01       	movw	r24, r28
     62c:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <_ZN7TwoWire15endTransmissionEv>
     630:	66 e0       	ldi	r22, 0x06	; 6
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0e 94 a8 12 	call	0x2550	; 0x2550 <delay>
     63c:	69 81       	ldd	r22, Y+1	; 0x01
     63e:	ce 01       	movw	r24, r28
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	42 e0       	ldi	r20, 0x02	; 2
     644:	50 e0       	ldi	r21, 0x00	; 0
     646:	0e 94 06 12 	call	0x240c	; 0x240c <_ZN7TwoWire11requestFromEii>
     64a:	c8 01       	movw	r24, r16
     64c:	0e 94 26 11 	call	0x224c	; 0x224c <_ZN7TwoWire9availableEv>
     650:	88 23       	and	r24, r24
     652:	d9 f3       	breq	.-10     	; 0x64a <_ZN14HMC6352compass10getHeadingEv+0x4a>
     654:	c8 01       	movw	r24, r16
     656:	0e 94 2c 11 	call	0x2258	; 0x2258 <_ZN7TwoWire7receiveEv>
     65a:	f8 2e       	mov	r15, r24
     65c:	c8 01       	movw	r24, r16
     65e:	0e 94 26 11 	call	0x224c	; 0x224c <_ZN7TwoWire9availableEv>
     662:	88 23       	and	r24, r24
     664:	d9 f3       	breq	.-10     	; 0x65c <_ZN14HMC6352compass10getHeadingEv+0x5c>
     666:	c8 01       	movw	r24, r16
     668:	0e 94 2c 11 	call	0x2258	; 0x2258 <_ZN7TwoWire7receiveEv>
     66c:	3f 2d       	mov	r19, r15
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	08 2f       	mov	r16, r24
     672:	10 e0       	ldi	r17, 0x00	; 0
     674:	02 2b       	or	r16, r18
     676:	13 2b       	or	r17, r19
     678:	1b 83       	std	Y+3, r17	; 0x03
     67a:	0a 83       	std	Y+2, r16	; 0x02
     67c:	8d e0       	ldi	r24, 0x0D	; 13
     67e:	60 e0       	ldi	r22, 0x00	; 0
     680:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
     684:	c8 01       	movw	r24, r16
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	1f 91       	pop	r17
     68c:	0f 91       	pop	r16
     68e:	ff 90       	pop	r15
     690:	ef 90       	pop	r14
     692:	08 95       	ret

00000694 <_ZN14HMC6352compassC1Ev>:
     694:	ef 92       	push	r14
     696:	ff 92       	push	r15
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	ec 01       	movw	r28, r24
     69e:	7e 01       	movw	r14, r28
     6a0:	9f 2d       	mov	r25, r15
     6a2:	0e 94 11 11 	call	0x2222	; 0x2222 <_ZN7TwoWireC1Ev>
     6a6:	81 e2       	ldi	r24, 0x21	; 33
     6a8:	89 83       	std	Y+1, r24	; 0x01
     6aa:	8d e0       	ldi	r24, 0x0D	; 13
     6ac:	61 e0       	ldi	r22, 0x01	; 1
     6ae:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
     6b2:	8d e0       	ldi	r24, 0x0D	; 13
     6b4:	61 e0       	ldi	r22, 0x01	; 1
     6b6:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
     6ba:	ce 01       	movw	r24, r28
     6bc:	0e 94 09 12 	call	0x2412	; 0x2412 <_ZN7TwoWire5beginEv>
     6c0:	8d e0       	ldi	r24, 0x0D	; 13
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	ff 90       	pop	r15
     6ce:	ef 90       	pop	r14
     6d0:	08 95       	ret

000006d2 <_ZN14HMC6352compassC2Ev>:
     6d2:	ef 92       	push	r14
     6d4:	ff 92       	push	r15
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	ec 01       	movw	r28, r24
     6dc:	7e 01       	movw	r14, r28
     6de:	9f 2d       	mov	r25, r15
     6e0:	0e 94 11 11 	call	0x2222	; 0x2222 <_ZN7TwoWireC1Ev>
     6e4:	81 e2       	ldi	r24, 0x21	; 33
     6e6:	89 83       	std	Y+1, r24	; 0x01
     6e8:	8d e0       	ldi	r24, 0x0D	; 13
     6ea:	61 e0       	ldi	r22, 0x01	; 1
     6ec:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
     6f0:	8d e0       	ldi	r24, 0x0D	; 13
     6f2:	61 e0       	ldi	r22, 0x01	; 1
     6f4:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
     6f8:	ce 01       	movw	r24, r28
     6fa:	0e 94 09 12 	call	0x2412	; 0x2412 <_ZN7TwoWire5beginEv>
     6fe:	8d e0       	ldi	r24, 0x0D	; 13
     700:	60 e0       	ldi	r22, 0x00	; 0
     702:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	ff 90       	pop	r15
     70c:	ef 90       	pop	r14
     70e:	08 95       	ret

00000710 <_Z11analyzeRoomPjS_S_>:
     710:	cf 92       	push	r12
     712:	df 92       	push	r13
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	8a 01       	movw	r16, r20
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	f8 01       	movw	r30, r16
     728:	e2 0f       	add	r30, r18
     72a:	f3 1f       	adc	r31, r19
     72c:	11 82       	std	Z+1, r1	; 0x01
     72e:	10 82       	st	Z, r1
     730:	2e 5f       	subi	r18, 0xFE	; 254
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	2a 30       	cpi	r18, 0x0A	; 10
     736:	31 05       	cpc	r19, r1
     738:	b1 f7       	brne	.-20     	; 0x726 <_Z11analyzeRoomPjS_S_+0x16>
     73a:	cc 24       	eor	r12, r12
     73c:	dd 24       	eor	r13, r13
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	e0 e0       	ldi	r30, 0x00	; 0
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	50 e0       	ldi	r21, 0x00	; 0
     748:	ec 01       	movw	r28, r24
     74a:	c2 0f       	add	r28, r18
     74c:	d3 1f       	adc	r29, r19
     74e:	7b 01       	movw	r14, r22
     750:	e2 0e       	add	r14, r18
     752:	f3 1e       	adc	r15, r19
     754:	09 90       	ld	r0, Y+
     756:	d8 81       	ld	r29, Y
     758:	c0 2d       	mov	r28, r0
     75a:	d7 01       	movw	r26, r14
     75c:	ed 90       	ld	r14, X+
     75e:	fc 90       	ld	r15, X
     760:	11 97       	sbiw	r26, 0x01	; 1
     762:	ce 19       	sub	r28, r14
     764:	df 09       	sbc	r29, r15
     766:	c5 36       	cpi	r28, 0x65	; 101
     768:	d1 05       	cpc	r29, r1
     76a:	10 f4       	brcc	.+4      	; 0x770 <_Z11analyzeRoomPjS_S_+0x60>
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	0e c0       	rjmp	.+28     	; 0x78c <_Z11analyzeRoomPjS_S_+0x7c>
     770:	54 30       	cpi	r21, 0x04	; 4
     772:	58 f0       	brcs	.+22     	; 0x78a <_Z11analyzeRoomPjS_S_+0x7a>
     774:	ef 01       	movw	r28, r30
     776:	cc 0f       	add	r28, r28
     778:	dd 1f       	adc	r29, r29
     77a:	c0 0f       	add	r28, r16
     77c:	d1 1f       	adc	r29, r17
     77e:	d9 82       	std	Y+1, r13	; 0x01
     780:	c8 82       	st	Y, r12
     782:	31 96       	adiw	r30, 0x01	; 1
     784:	e5 30       	cpi	r30, 0x05	; 5
     786:	f1 05       	cpc	r31, r1
     788:	59 f0       	breq	.+22     	; 0x7a0 <_Z11analyzeRoomPjS_S_+0x90>
     78a:	5f 5f       	subi	r21, 0xFF	; 255
     78c:	2e 5f       	subi	r18, 0xFE	; 254
     78e:	3f 4f       	sbci	r19, 0xFF	; 255
     790:	a2 e1       	ldi	r26, 0x12	; 18
     792:	b0 e0       	ldi	r27, 0x00	; 0
     794:	ca 0e       	add	r12, r26
     796:	db 1e       	adc	r13, r27
     798:	b1 e0       	ldi	r27, 0x01	; 1
     79a:	20 39       	cpi	r18, 0x90	; 144
     79c:	3b 07       	cpc	r19, r27
     79e:	a1 f6       	brne	.-88     	; 0x748 <_Z11analyzeRoomPjS_S_+0x38>
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	df 90       	pop	r13
     7ae:	cf 90       	pop	r12
     7b0:	08 95       	ret

000007b2 <_Z18adjustScanPlatformhh>:
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	88 3c       	cpi	r24, 0xC8	; 200
     7b8:	08 f0       	brcs	.+2      	; 0x7bc <_Z18adjustScanPlatformhh+0xa>
     7ba:	57 c0       	rjmp	.+174    	; 0x86a <_Z18adjustScanPlatformhh+0xb8>
     7bc:	61 30       	cpi	r22, 0x01	; 1
     7be:	09 f0       	breq	.+2      	; 0x7c2 <_Z18adjustScanPlatformhh+0x10>
     7c0:	54 c0       	rjmp	.+168    	; 0x86a <_Z18adjustScanPlatformhh+0xb8>
     7c2:	20 91 e4 05 	lds	r18, 0x05E4
     7c6:	30 91 e5 05 	lds	r19, 0x05E5
     7ca:	c8 2f       	mov	r28, r24
     7cc:	d0 e0       	ldi	r29, 0x00	; 0
     7ce:	2c 17       	cp	r18, r28
     7d0:	3d 07       	cpc	r19, r29
     7d2:	dc f0       	brlt	.+54     	; 0x80a <_Z18adjustScanPlatformhh+0x58>
     7d4:	22 c0       	rjmp	.+68     	; 0x81a <_Z18adjustScanPlatformhh+0x68>
     7d6:	8d ea       	ldi	r24, 0xAD	; 173
     7d8:	92 e0       	ldi	r25, 0x02	; 2
     7da:	61 e0       	ldi	r22, 0x01	; 1
     7dc:	41 e0       	ldi	r20, 0x01	; 1
     7de:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZN10AF_Stepper7onestepEhh>
     7e2:	60 91 e4 05 	lds	r22, 0x05E4
     7e6:	70 91 e5 05 	lds	r23, 0x05E5
     7ea:	6f 5f       	subi	r22, 0xFF	; 255
     7ec:	7f 4f       	sbci	r23, 0xFF	; 255
     7ee:	70 93 e5 05 	sts	0x05E5, r23
     7f2:	60 93 e4 05 	sts	0x05E4, r22
     7f6:	83 ee       	ldi	r24, 0xE3	; 227
     7f8:	95 e0       	ldi	r25, 0x05	; 5
     7fa:	0e 94 6e 06 	call	0xcdc	; 0xcdc <_ZN15Cmissionconsole13mediumRangeIREj>
     7fe:	6a e0       	ldi	r22, 0x0A	; 10
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 a8 12 	call	0x2550	; 0x2550 <delay>
     80a:	80 91 e4 05 	lds	r24, 0x05E4
     80e:	90 91 e5 05 	lds	r25, 0x05E5
     812:	8c 17       	cp	r24, r28
     814:	9d 07       	cpc	r25, r29
     816:	f9 f6       	brne	.-66     	; 0x7d6 <_Z18adjustScanPlatformhh+0x24>
     818:	28 c0       	rjmp	.+80     	; 0x86a <_Z18adjustScanPlatformhh+0xb8>
     81a:	c2 17       	cp	r28, r18
     81c:	d3 07       	cpc	r29, r19
     81e:	f4 f0       	brlt	.+60     	; 0x85c <_Z18adjustScanPlatformhh+0xaa>
     820:	24 c0       	rjmp	.+72     	; 0x86a <_Z18adjustScanPlatformhh+0xb8>
     822:	8d ea       	ldi	r24, 0xAD	; 173
     824:	92 e0       	ldi	r25, 0x02	; 2
     826:	62 e0       	ldi	r22, 0x02	; 2
     828:	41 e0       	ldi	r20, 0x01	; 1
     82a:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZN10AF_Stepper7onestepEhh>
     82e:	80 91 e4 05 	lds	r24, 0x05E4
     832:	90 91 e5 05 	lds	r25, 0x05E5
     836:	01 97       	sbiw	r24, 0x01	; 1
     838:	90 93 e5 05 	sts	0x05E5, r25
     83c:	80 93 e4 05 	sts	0x05E4, r24
     840:	6a e0       	ldi	r22, 0x0A	; 10
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 a8 12 	call	0x2550	; 0x2550 <delay>
     84c:	60 91 e4 05 	lds	r22, 0x05E4
     850:	70 91 e5 05 	lds	r23, 0x05E5
     854:	83 ee       	ldi	r24, 0xE3	; 227
     856:	95 e0       	ldi	r25, 0x05	; 5
     858:	0e 94 6e 06 	call	0xcdc	; 0xcdc <_ZN15Cmissionconsole13mediumRangeIREj>
     85c:	80 91 e4 05 	lds	r24, 0x05E4
     860:	90 91 e5 05 	lds	r25, 0x05E5
     864:	8c 17       	cp	r24, r28
     866:	9d 07       	cpc	r25, r29
     868:	e1 f6       	brne	.-72     	; 0x822 <_Z18adjustScanPlatformhh+0x70>
     86a:	80 91 e4 05 	lds	r24, 0x05E4
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <_Z7readADCj>:
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	f8 2e       	mov	r15, r24
     882:	00 e0       	ldi	r16, 0x00	; 0
     884:	10 e0       	ldi	r17, 0x00	; 0
     886:	c0 e0       	ldi	r28, 0x00	; 0
     888:	d0 e0       	ldi	r29, 0x00	; 0
     88a:	8f 2d       	mov	r24, r15
     88c:	0e 94 1b 13 	call	0x2636	; 0x2636 <analogRead>
     890:	0f 5f       	subi	r16, 0xFF	; 255
     892:	1f 4f       	sbci	r17, 0xFF	; 255
     894:	8c 1b       	sub	r24, r28
     896:	9d 0b       	sbc	r25, r29
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <__divmodhi4>
     89e:	c6 0f       	add	r28, r22
     8a0:	d7 1f       	adc	r29, r23
     8a2:	04 36       	cpi	r16, 0x64	; 100
     8a4:	11 05       	cpc	r17, r1
     8a6:	89 f7       	brne	.-30     	; 0x88a <_Z7readADCj+0x16>
     8a8:	ce 01       	movw	r24, r28
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	1f 91       	pop	r17
     8b0:	0f 91       	pop	r16
     8b2:	ff 90       	pop	r15
     8b4:	ef 90       	pop	r14
     8b6:	08 95       	ret

000008b8 <_Z10irDistanceh>:
     8b8:	1f 93       	push	r17
     8ba:	18 2f       	mov	r17, r24
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 3a 04 	call	0x874	; 0x874 <_Z7readADCj>
     8c2:	11 23       	and	r17, r17
     8c4:	61 f1       	breq	.+88     	; 0x91e <__stack+0x1f>
     8c6:	9c 01       	movw	r18, r24
     8c8:	12 30       	cpi	r17, 0x02	; 2
     8ca:	91 f4       	brne	.+36     	; 0x8f0 <_Z10irDistanceh+0x38>
     8cc:	83 e0       	ldi	r24, 0x03	; 3
     8ce:	26 33       	cpi	r18, 0x36	; 54
     8d0:	38 07       	cpc	r19, r24
     8d2:	18 f0       	brcs	.+6      	; 0x8da <_Z10irDistanceh+0x22>
     8d4:	26 e9       	ldi	r18, 0x96	; 150
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	24 c0       	rjmp	.+72     	; 0x922 <__stack+0x23>
     8da:	21 39       	cpi	r18, 0x91	; 145
     8dc:	31 05       	cpc	r19, r1
     8de:	18 f4       	brcc	.+6      	; 0x8e6 <_Z10irDistanceh+0x2e>
     8e0:	24 e1       	ldi	r18, 0x14	; 20
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	1e c0       	rjmp	.+60     	; 0x922 <__stack+0x23>
     8e6:	27 59       	subi	r18, 0x97	; 151
     8e8:	3e 4f       	sbci	r19, 0xFE	; 254
     8ea:	f9 01       	movw	r30, r18
     8ec:	24 91       	lpm	r18, Z+
     8ee:	13 c0       	rjmp	.+38     	; 0x916 <__stack+0x17>
     8f0:	13 30       	cpi	r17, 0x03	; 3
     8f2:	a9 f4       	brne	.+42     	; 0x91e <__stack+0x1f>
     8f4:	f2 e0       	ldi	r31, 0x02	; 2
     8f6:	8b 32       	cpi	r24, 0x2B	; 43
     8f8:	9f 07       	cpc	r25, r31
     8fa:	18 f0       	brcs	.+6      	; 0x902 <__stack+0x3>
     8fc:	24 e6       	ldi	r18, 0x64	; 100
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	10 c0       	rjmp	.+32     	; 0x922 <__stack+0x23>
     902:	83 3a       	cpi	r24, 0xA3	; 163
     904:	91 05       	cpc	r25, r1
     906:	18 f4       	brcc	.+6      	; 0x90e <__stack+0xf>
     908:	2c ec       	ldi	r18, 0xCC	; 204
     90a:	31 e0       	ldi	r19, 0x01	; 1
     90c:	0a c0       	rjmp	.+20     	; 0x922 <__stack+0x23>
     90e:	29 5a       	subi	r18, 0xA9	; 169
     910:	3e 4f       	sbci	r19, 0xFE	; 254
     912:	f9 01       	movw	r30, r18
     914:	24 91       	lpm	r18, Z+
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	22 0f       	add	r18, r18
     91a:	33 1f       	adc	r19, r19
     91c:	02 c0       	rjmp	.+4      	; 0x922 <__stack+0x23>
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	c9 01       	movw	r24, r18
     924:	1f 91       	pop	r17
     926:	08 95       	ret

00000928 <_Z15scanEnvironmentPj>:
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	8c 01       	movw	r16, r24
     932:	c0 e0       	ldi	r28, 0x00	; 0
     934:	d0 e0       	ldi	r29, 0x00	; 0
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <_Z10irDistanceh>
     93c:	f8 01       	movw	r30, r16
     93e:	ec 0f       	add	r30, r28
     940:	fd 1f       	adc	r31, r29
     942:	91 83       	std	Z+1, r25	; 0x01
     944:	80 83       	st	Z, r24
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <_Z18adjustScanPlatformhh>
     94e:	8f 5f       	subi	r24, 0xFF	; 255
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <_Z18adjustScanPlatformhh>
     956:	64 e6       	ldi	r22, 0x64	; 100
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 a8 12 	call	0x2550	; 0x2550 <delay>
     962:	22 96       	adiw	r28, 0x02	; 2
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	c0 39       	cpi	r28, 0x90	; 144
     968:	d8 07       	cpc	r29, r24
     96a:	29 f7       	brne	.-54     	; 0x936 <_Z15scanEnvironmentPj+0xe>
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	61 e0       	ldi	r22, 0x01	; 1
     970:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <_Z18adjustScanPlatformhh>
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	1f 91       	pop	r17
     97a:	0f 91       	pop	r16
     97c:	08 95       	ret

0000097e <_Z10turnToFacej>:
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	ec 01       	movw	r28, r24
     988:	02 c0       	rjmp	.+4      	; 0x98e <_Z10turnToFacej+0x10>
     98a:	c0 51       	subi	r28, 0x10	; 16
     98c:	de 40       	sbci	r29, 0x0E	; 14
     98e:	2e e0       	ldi	r18, 0x0E	; 14
     990:	c0 31       	cpi	r28, 0x10	; 16
     992:	d2 07       	cpc	r29, r18
     994:	d0 f7       	brcc	.-12     	; 0x98a <_Z10turnToFacej+0xc>
     996:	8b ea       	ldi	r24, 0xAB	; 171
     998:	92 e0       	ldi	r25, 0x02	; 2
     99a:	66 e9       	ldi	r22, 0x96	; 150
     99c:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZN10AF_DCMotor8setSpeedEh>
     9a0:	89 ea       	ldi	r24, 0xA9	; 169
     9a2:	92 e0       	ldi	r25, 0x02	; 2
     9a4:	66 e9       	ldi	r22, 0x96	; 150
     9a6:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZN10AF_DCMotor8setSpeedEh>
     9aa:	8b ea       	ldi	r24, 0xAB	; 171
     9ac:	92 e0       	ldi	r25, 0x02	; 2
     9ae:	61 e0       	ldi	r22, 0x01	; 1
     9b0:	0e 94 c9 09 	call	0x1392	; 0x1392 <_ZN10AF_DCMotor3runEh>
     9b4:	89 ea       	ldi	r24, 0xA9	; 169
     9b6:	92 e0       	ldi	r25, 0x02	; 2
     9b8:	62 e0       	ldi	r22, 0x02	; 2
     9ba:	0e 94 c9 09 	call	0x1392	; 0x1392 <_ZN10AF_DCMotor3runEh>
     9be:	80 e8       	ldi	r24, 0x80	; 128
     9c0:	92 e0       	ldi	r25, 0x02	; 2
     9c2:	0e 94 00 03 	call	0x600	; 0x600 <_ZN14HMC6352compass10getHeadingEv>
     9c6:	8c 01       	movw	r16, r24
     9c8:	0c c0       	rjmp	.+24     	; 0x9e2 <_Z10turnToFacej+0x64>
     9ca:	80 e8       	ldi	r24, 0x80	; 128
     9cc:	92 e0       	ldi	r25, 0x02	; 2
     9ce:	0e 94 00 03 	call	0x600	; 0x600 <_ZN14HMC6352compass10getHeadingEv>
     9d2:	8c 01       	movw	r16, r24
     9d4:	8c e6       	ldi	r24, 0x6C	; 108
     9d6:	96 e0       	ldi	r25, 0x06	; 6
     9d8:	b8 01       	movw	r22, r16
     9da:	4a e0       	ldi	r20, 0x0A	; 10
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	0e 94 23 10 	call	0x2046	; 0x2046 <_ZN5Print7printlnEii>
     9e2:	c0 17       	cp	r28, r16
     9e4:	d1 07       	cpc	r29, r17
     9e6:	31 f0       	breq	.+12     	; 0x9f4 <_Z10turnToFacej+0x76>
     9e8:	9e 01       	movw	r18, r28
     9ea:	20 1b       	sub	r18, r16
     9ec:	31 0b       	sbc	r19, r17
     9ee:	23 33       	cpi	r18, 0x33	; 51
     9f0:	31 05       	cpc	r19, r1
     9f2:	58 f7       	brcc	.-42     	; 0x9ca <_Z10turnToFacej+0x4c>
     9f4:	89 ea       	ldi	r24, 0xA9	; 169
     9f6:	92 e0       	ldi	r25, 0x02	; 2
     9f8:	64 e0       	ldi	r22, 0x04	; 4
     9fa:	0e 94 c9 09 	call	0x1392	; 0x1392 <_ZN10AF_DCMotor3runEh>
     9fe:	8b ea       	ldi	r24, 0xAB	; 171
     a00:	92 e0       	ldi	r25, 0x02	; 2
     a02:	64 e0       	ldi	r22, 0x04	; 4
     a04:	0e 94 c9 09 	call	0x1392	; 0x1392 <_ZN10AF_DCMotor3runEh>
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	08 95       	ret

00000a12 <_Z10goStraightj>:
     a12:	4f 92       	push	r4
     a14:	5f 92       	push	r5
     a16:	6f 92       	push	r6
     a18:	7f 92       	push	r7
     a1a:	8f 92       	push	r8
     a1c:	9f 92       	push	r9
     a1e:	af 92       	push	r10
     a20:	bf 92       	push	r11
     a22:	cf 92       	push	r12
     a24:	df 92       	push	r13
     a26:	ef 92       	push	r14
     a28:	ff 92       	push	r15
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	8c 01       	movw	r16, r24
     a34:	0e 94 73 12 	call	0x24e6	; 0x24e6 <millis>
     a38:	eb 01       	movw	r28, r22
     a3a:	80 e8       	ldi	r24, 0x80	; 128
     a3c:	92 e0       	ldi	r25, 0x02	; 2
     a3e:	0e 94 00 03 	call	0x600	; 0x600 <_ZN14HMC6352compass10getHeadingEv>
     a42:	90 93 85 02 	sts	0x0285, r25
     a46:	80 93 84 02 	sts	0x0284, r24
     a4a:	c8 01       	movw	r24, r16
     a4c:	6a e0       	ldi	r22, 0x0A	; 10
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__udivmodhi4>
     a54:	06 2f       	mov	r16, r22
     a56:	17 2f       	mov	r17, r23
     a58:	89 ea       	ldi	r24, 0xA9	; 169
     a5a:	92 e0       	ldi	r25, 0x02	; 2
     a5c:	6d e7       	ldi	r22, 0x7D	; 125
     a5e:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZN10AF_DCMotor8setSpeedEh>
     a62:	8b ea       	ldi	r24, 0xAB	; 171
     a64:	92 e0       	ldi	r25, 0x02	; 2
     a66:	6d e7       	ldi	r22, 0x7D	; 125
     a68:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZN10AF_DCMotor8setSpeedEh>
     a6c:	89 ea       	ldi	r24, 0xA9	; 169
     a6e:	92 e0       	ldi	r25, 0x02	; 2
     a70:	61 e0       	ldi	r22, 0x01	; 1
     a72:	0e 94 c9 09 	call	0x1392	; 0x1392 <_ZN10AF_DCMotor3runEh>
     a76:	8b ea       	ldi	r24, 0xAB	; 171
     a78:	92 e0       	ldi	r25, 0x02	; 2
     a7a:	61 e0       	ldi	r22, 0x01	; 1
     a7c:	0e 94 c9 09 	call	0x1392	; 0x1392 <_ZN10AF_DCMotor3runEh>
     a80:	ed e7       	ldi	r30, 0x7D	; 125
     a82:	4e 2e       	mov	r4, r30
     a84:	51 2c       	mov	r5, r1
     a86:	f5 c0       	rjmp	.+490    	; 0xc72 <_Z10goStraightj+0x260>
     a88:	0e 94 73 12 	call	0x24e6	; 0x24e6 <millis>
     a8c:	6c 15       	cp	r22, r12
     a8e:	7d 05       	cpc	r23, r13
     a90:	8e 05       	cpc	r24, r14
     a92:	9f 05       	cpc	r25, r15
     a94:	10 f4       	brcc	.+4      	; 0xa9a <_Z10goStraightj+0x88>
     a96:	c0 e0       	ldi	r28, 0x00	; 0
     a98:	d0 e0       	ldi	r29, 0x00	; 0
     a9a:	0e 94 73 12 	call	0x24e6	; 0x24e6 <millis>
     a9e:	6e 01       	movw	r12, r28
     aa0:	ee 24       	eor	r14, r14
     aa2:	ff 24       	eor	r15, r15
     aa4:	6c 19       	sub	r22, r12
     aa6:	7d 09       	sbc	r23, r13
     aa8:	8e 09       	sbc	r24, r14
     aaa:	9f 09       	sbc	r25, r15
     aac:	6b 30       	cpi	r22, 0x0B	; 11
     aae:	71 05       	cpc	r23, r1
     ab0:	81 05       	cpc	r24, r1
     ab2:	91 05       	cpc	r25, r1
     ab4:	48 f3       	brcs	.-46     	; 0xa88 <_Z10goStraightj+0x76>
     ab6:	0e 94 73 12 	call	0x24e6	; 0x24e6 <millis>
     aba:	6c 19       	sub	r22, r12
     abc:	7d 09       	sbc	r23, r13
     abe:	8e 09       	sbc	r24, r14
     ac0:	9f 09       	sbc	r25, r15
     ac2:	6b 30       	cpi	r22, 0x0B	; 11
     ac4:	71 05       	cpc	r23, r1
     ac6:	81 05       	cpc	r24, r1
     ac8:	91 05       	cpc	r25, r1
     aca:	08 f4       	brcc	.+2      	; 0xace <_Z10goStraightj+0xbc>
     acc:	d0 c0       	rjmp	.+416    	; 0xc6e <_Z10goStraightj+0x25c>
     ace:	80 e8       	ldi	r24, 0x80	; 128
     ad0:	92 e0       	ldi	r25, 0x02	; 2
     ad2:	0e 94 00 03 	call	0x600	; 0x600 <_ZN14HMC6352compass10getHeadingEv>
     ad6:	20 91 84 02 	lds	r18, 0x0284
     ada:	30 91 85 02 	lds	r19, 0x0285
     ade:	28 1b       	sub	r18, r24
     ae0:	39 0b       	sbc	r19, r25
     ae2:	87 e0       	ldi	r24, 0x07	; 7
     ae4:	29 30       	cpi	r18, 0x09	; 9
     ae6:	38 07       	cpc	r19, r24
     ae8:	28 f0       	brcs	.+10     	; 0xaf4 <_Z10goStraightj+0xe2>
     aea:	70 ef       	ldi	r23, 0xF0	; 240
     aec:	c7 2e       	mov	r12, r23
     aee:	71 ef       	ldi	r23, 0xF1	; 241
     af0:	d7 2e       	mov	r13, r23
     af2:	04 c0       	rjmp	.+8      	; 0xafc <_Z10goStraightj+0xea>
     af4:	60 e1       	ldi	r22, 0x10	; 16
     af6:	c6 2e       	mov	r12, r22
     af8:	6e e0       	ldi	r22, 0x0E	; 14
     afa:	d6 2e       	mov	r13, r22
     afc:	c2 0e       	add	r12, r18
     afe:	d3 1e       	adc	r13, r19
     b00:	80 91 96 02 	lds	r24, 0x0296
     b04:	90 91 97 02 	lds	r25, 0x0297
     b08:	c8 9e       	mul	r12, r24
     b0a:	b0 01       	movw	r22, r0
     b0c:	c9 9e       	mul	r12, r25
     b0e:	70 0d       	add	r23, r0
     b10:	d8 9e       	mul	r13, r24
     b12:	70 0d       	add	r23, r0
     b14:	11 24       	eor	r1, r1
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	0e 94 3c 24 	call	0x4878	; 0x4878 <__floatunsisf>
     b1e:	60 93 8a 02 	sts	0x028A, r22
     b22:	70 93 8b 02 	sts	0x028B, r23
     b26:	80 93 8c 02 	sts	0x028C, r24
     b2a:	90 93 8d 02 	sts	0x028D, r25
     b2e:	20 91 88 02 	lds	r18, 0x0288
     b32:	30 91 89 02 	lds	r19, 0x0289
     b36:	2c 0d       	add	r18, r12
     b38:	3d 1d       	adc	r19, r13
     b3a:	30 93 89 02 	sts	0x0289, r19
     b3e:	20 93 88 02 	sts	0x0288, r18
     b42:	60 91 98 02 	lds	r22, 0x0298
     b46:	70 91 99 02 	lds	r23, 0x0299
     b4a:	84 e6       	ldi	r24, 0x64	; 100
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__udivmodhi4>
     b52:	62 17       	cp	r22, r18
     b54:	73 07       	cpc	r23, r19
     b56:	28 f4       	brcc	.+10     	; 0xb62 <_Z10goStraightj+0x150>
     b58:	70 93 89 02 	sts	0x0289, r23
     b5c:	60 93 88 02 	sts	0x0288, r22
     b60:	0b c0       	rjmp	.+22     	; 0xb78 <_Z10goStraightj+0x166>
     b62:	44 27       	eor	r20, r20
     b64:	55 27       	eor	r21, r21
     b66:	46 1b       	sub	r20, r22
     b68:	57 0b       	sbc	r21, r23
     b6a:	24 17       	cp	r18, r20
     b6c:	35 07       	cpc	r19, r21
     b6e:	20 f4       	brcc	.+8      	; 0xb78 <_Z10goStraightj+0x166>
     b70:	50 93 89 02 	sts	0x0289, r21
     b74:	40 93 88 02 	sts	0x0288, r20
     b78:	20 91 98 02 	lds	r18, 0x0298
     b7c:	30 91 99 02 	lds	r19, 0x0299
     b80:	80 91 88 02 	lds	r24, 0x0288
     b84:	90 91 89 02 	lds	r25, 0x0289
     b88:	28 9f       	mul	r18, r24
     b8a:	b0 01       	movw	r22, r0
     b8c:	29 9f       	mul	r18, r25
     b8e:	70 0d       	add	r23, r0
     b90:	38 9f       	mul	r19, r24
     b92:	70 0d       	add	r23, r0
     b94:	11 24       	eor	r1, r1
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 3c 24 	call	0x4878	; 0x4878 <__floatunsisf>
     b9e:	4b 01       	movw	r8, r22
     ba0:	5c 01       	movw	r10, r24
     ba2:	60 93 8e 02 	sts	0x028E, r22
     ba6:	70 93 8f 02 	sts	0x028F, r23
     baa:	80 93 90 02 	sts	0x0290, r24
     bae:	90 93 91 02 	sts	0x0291, r25
     bb2:	60 90 84 02 	lds	r6, 0x0284
     bb6:	70 90 85 02 	lds	r7, 0x0285
     bba:	20 91 86 02 	lds	r18, 0x0286
     bbe:	30 91 87 02 	lds	r19, 0x0287
     bc2:	c3 01       	movw	r24, r6
     bc4:	82 1b       	sub	r24, r18
     bc6:	93 0b       	sbc	r25, r19
     bc8:	9c 01       	movw	r18, r24
     bca:	80 91 9a 02 	lds	r24, 0x029A
     bce:	90 91 9b 02 	lds	r25, 0x029B
     bd2:	28 9f       	mul	r18, r24
     bd4:	b0 01       	movw	r22, r0
     bd6:	29 9f       	mul	r18, r25
     bd8:	70 0d       	add	r23, r0
     bda:	38 9f       	mul	r19, r24
     bdc:	70 0d       	add	r23, r0
     bde:	11 24       	eor	r1, r1
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	0e 94 3c 24 	call	0x4878	; 0x4878 <__floatunsisf>
     be8:	6b 01       	movw	r12, r22
     bea:	7c 01       	movw	r14, r24
     bec:	60 93 92 02 	sts	0x0292, r22
     bf0:	70 93 93 02 	sts	0x0293, r23
     bf4:	80 93 94 02 	sts	0x0294, r24
     bf8:	90 93 95 02 	sts	0x0295, r25
     bfc:	70 92 87 02 	sts	0x0287, r7
     c00:	60 92 86 02 	sts	0x0286, r6
     c04:	c5 01       	movw	r24, r10
     c06:	b4 01       	movw	r22, r8
     c08:	20 91 8a 02 	lds	r18, 0x028A
     c0c:	30 91 8b 02 	lds	r19, 0x028B
     c10:	40 91 8c 02 	lds	r20, 0x028C
     c14:	50 91 8d 02 	lds	r21, 0x028D
     c18:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__addsf3>
     c1c:	a7 01       	movw	r20, r14
     c1e:	96 01       	movw	r18, r12
     c20:	0e 94 28 21 	call	0x4250	; 0x4250 <__subsf3>
     c24:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
     c28:	6b 01       	movw	r12, r22
     c2a:	63 58       	subi	r22, 0x83	; 131
     c2c:	7f 4f       	sbci	r23, 0xFF	; 255
     c2e:	62 33       	cpi	r22, 0x32	; 50
     c30:	71 05       	cpc	r23, r1
     c32:	10 f4       	brcc	.+4      	; 0xc38 <_Z10goStraightj+0x226>
     c34:	62 e3       	ldi	r22, 0x32	; 50
     c36:	05 c0       	rjmp	.+10     	; 0xc42 <_Z10goStraightj+0x230>
     c38:	69 3c       	cpi	r22, 0xC9	; 201
     c3a:	71 05       	cpc	r23, r1
     c3c:	10 f0       	brcs	.+4      	; 0xc42 <_Z10goStraightj+0x230>
     c3e:	68 ec       	ldi	r22, 0xC8	; 200
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	8b ea       	ldi	r24, 0xAB	; 171
     c44:	92 e0       	ldi	r25, 0x02	; 2
     c46:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZN10AF_DCMotor8setSpeedEh>
     c4a:	b2 01       	movw	r22, r4
     c4c:	6c 19       	sub	r22, r12
     c4e:	7d 09       	sbc	r23, r13
     c50:	62 33       	cpi	r22, 0x32	; 50
     c52:	71 05       	cpc	r23, r1
     c54:	10 f4       	brcc	.+4      	; 0xc5a <_Z10goStraightj+0x248>
     c56:	62 e3       	ldi	r22, 0x32	; 50
     c58:	05 c0       	rjmp	.+10     	; 0xc64 <_Z10goStraightj+0x252>
     c5a:	69 3c       	cpi	r22, 0xC9	; 201
     c5c:	71 05       	cpc	r23, r1
     c5e:	10 f0       	brcs	.+4      	; 0xc64 <_Z10goStraightj+0x252>
     c60:	68 ec       	ldi	r22, 0xC8	; 200
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	2a 96       	adiw	r28, 0x0a	; 10
     c66:	89 ea       	ldi	r24, 0xA9	; 169
     c68:	92 e0       	ldi	r25, 0x02	; 2
     c6a:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZN10AF_DCMotor8setSpeedEh>
     c6e:	01 50       	subi	r16, 0x01	; 1
     c70:	10 40       	sbci	r17, 0x00	; 0
     c72:	01 15       	cp	r16, r1
     c74:	11 05       	cpc	r17, r1
     c76:	09 f0       	breq	.+2      	; 0xc7a <_Z10goStraightj+0x268>
     c78:	10 cf       	rjmp	.-480    	; 0xa9a <_Z10goStraightj+0x88>
     c7a:	89 ea       	ldi	r24, 0xA9	; 169
     c7c:	92 e0       	ldi	r25, 0x02	; 2
     c7e:	64 e0       	ldi	r22, 0x04	; 4
     c80:	0e 94 c9 09 	call	0x1392	; 0x1392 <_ZN10AF_DCMotor3runEh>
     c84:	8b ea       	ldi	r24, 0xAB	; 171
     c86:	92 e0       	ldi	r25, 0x02	; 2
     c88:	64 e0       	ldi	r22, 0x04	; 4
     c8a:	0e 94 c9 09 	call	0x1392	; 0x1392 <_ZN10AF_DCMotor3runEh>
     c8e:	89 ea       	ldi	r24, 0xA9	; 169
     c90:	92 e0       	ldi	r25, 0x02	; 2
     c92:	6d e7       	ldi	r22, 0x7D	; 125
     c94:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZN10AF_DCMotor8setSpeedEh>
     c98:	8b ea       	ldi	r24, 0xAB	; 171
     c9a:	92 e0       	ldi	r25, 0x02	; 2
     c9c:	6d e7       	ldi	r22, 0x7D	; 125
     c9e:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZN10AF_DCMotor8setSpeedEh>
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	ff 90       	pop	r15
     cac:	ef 90       	pop	r14
     cae:	df 90       	pop	r13
     cb0:	cf 90       	pop	r12
     cb2:	bf 90       	pop	r11
     cb4:	af 90       	pop	r10
     cb6:	9f 90       	pop	r9
     cb8:	8f 90       	pop	r8
     cba:	7f 90       	pop	r7
     cbc:	6f 90       	pop	r6
     cbe:	5f 90       	pop	r5
     cc0:	4f 90       	pop	r4
     cc2:	08 95       	ret

00000cc4 <_ZN15CmissionconsoleC2Ev>:
     cc4:	08 95       	ret

00000cc6 <_ZN15CmissionconsoleC1Ev>:
     cc6:	08 95       	ret

00000cc8 <_ZN15CmissionconsoleD2Ev>:
     cc8:	08 95       	ret

00000cca <_ZN15CmissionconsoleD1Ev>:
     cca:	08 95       	ret

00000ccc <_ZN15Cmissionconsole6enableEv>:
     ccc:	08 95       	ret

00000cce <_ZN15Cmissionconsole7disableEv>:
     cce:	08 95       	ret

00000cd0 <_ZN15Cmissionconsole5writeEh>:
     cd0:	08 95       	ret

00000cd2 <_ZN15Cmissionconsole5writeEPc>:
     cd2:	8c e6       	ldi	r24, 0x6C	; 108
     cd4:	96 e0       	ldi	r25, 0x06	; 6
     cd6:	0e 94 02 10 	call	0x2004	; 0x2004 <_ZN5Print7printlnEPKc>
     cda:	08 95       	ret

00000cdc <_ZN15Cmissionconsole13mediumRangeIREj>:
     cdc:	ef 92       	push	r14
     cde:	ff 92       	push	r15
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	8b 01       	movw	r16, r22
     cea:	80 e4       	ldi	r24, 0x40	; 64
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <calloc>
     cf6:	e8 2e       	mov	r14, r24
     cf8:	e7 01       	movw	r28, r14
     cfa:	7e 01       	movw	r14, r28
     cfc:	f9 2e       	mov	r15, r25
     cfe:	e1 14       	cp	r14, r1
     d00:	f1 04       	cpc	r15, r1
     d02:	29 f1       	breq	.+74     	; 0xd4e <_ZN15Cmissionconsole13mediumRangeIREj+0x72>
     d04:	00 d0       	rcall	.+0      	; 0xd06 <_ZN15Cmissionconsole13mediumRangeIREj+0x2a>
     d06:	00 d0       	rcall	.+0      	; 0xd08 <_ZN15Cmissionconsole13mediumRangeIREj+0x2c>
     d08:	00 d0       	rcall	.+0      	; 0xd0a <_ZN15Cmissionconsole13mediumRangeIREj+0x2e>
     d0a:	ed b7       	in	r30, 0x3d	; 61
     d0c:	fe b7       	in	r31, 0x3e	; 62
     d0e:	31 96       	adiw	r30, 0x01	; 1
     d10:	ad b7       	in	r26, 0x3d	; 61
     d12:	be b7       	in	r27, 0x3e	; 62
     d14:	12 96       	adiw	r26, 0x02	; 2
     d16:	fc 92       	st	X, r15
     d18:	ee 92       	st	-X, r14
     d1a:	11 97       	sbiw	r26, 0x01	; 1
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	93 83       	std	Z+3, r25	; 0x03
     d22:	82 83       	std	Z+2, r24	; 0x02
     d24:	15 83       	std	Z+5, r17	; 0x05
     d26:	04 83       	std	Z+4, r16	; 0x04
     d28:	0e 94 a4 2a 	call	0x5548	; 0x5548 <sprintf>
     d2c:	2d b7       	in	r18, 0x3d	; 61
     d2e:	3e b7       	in	r19, 0x3e	; 62
     d30:	2a 5f       	subi	r18, 0xFA	; 250
     d32:	3f 4f       	sbci	r19, 0xFF	; 255
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	3e bf       	out	0x3e, r19	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	2d bf       	out	0x3d, r18	; 61
     d3e:	8c e6       	ldi	r24, 0x6C	; 108
     d40:	96 e0       	ldi	r25, 0x06	; 6
     d42:	b7 01       	movw	r22, r14
     d44:	0e 94 02 10 	call	0x2004	; 0x2004 <_ZN5Print7printlnEPKc>
     d48:	c7 01       	movw	r24, r14
     d4a:	0e 94 f6 27 	call	0x4fec	; 0x4fec <free>
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	1f 91       	pop	r17
     d54:	0f 91       	pop	r16
     d56:	ff 90       	pop	r15
     d58:	ef 90       	pop	r14
     d5a:	08 95       	ret

00000d5c <_ZN15Cmissionconsole11longRangeIREj>:
     d5c:	ef 92       	push	r14
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	8b 01       	movw	r16, r22
     d6a:	80 e4       	ldi	r24, 0x40	; 64
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	61 e0       	ldi	r22, 0x01	; 1
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <calloc>
     d76:	e8 2e       	mov	r14, r24
     d78:	e7 01       	movw	r28, r14
     d7a:	7e 01       	movw	r14, r28
     d7c:	f9 2e       	mov	r15, r25
     d7e:	e1 14       	cp	r14, r1
     d80:	f1 04       	cpc	r15, r1
     d82:	29 f1       	breq	.+74     	; 0xdce <_ZN15Cmissionconsole11longRangeIREj+0x72>
     d84:	00 d0       	rcall	.+0      	; 0xd86 <_ZN15Cmissionconsole11longRangeIREj+0x2a>
     d86:	00 d0       	rcall	.+0      	; 0xd88 <_ZN15Cmissionconsole11longRangeIREj+0x2c>
     d88:	00 d0       	rcall	.+0      	; 0xd8a <_ZN15Cmissionconsole11longRangeIREj+0x2e>
     d8a:	ed b7       	in	r30, 0x3d	; 61
     d8c:	fe b7       	in	r31, 0x3e	; 62
     d8e:	31 96       	adiw	r30, 0x01	; 1
     d90:	ad b7       	in	r26, 0x3d	; 61
     d92:	be b7       	in	r27, 0x3e	; 62
     d94:	12 96       	adiw	r26, 0x02	; 2
     d96:	fc 92       	st	X, r15
     d98:	ee 92       	st	-X, r14
     d9a:	11 97       	sbiw	r26, 0x01	; 1
     d9c:	81 e1       	ldi	r24, 0x11	; 17
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	93 83       	std	Z+3, r25	; 0x03
     da2:	82 83       	std	Z+2, r24	; 0x02
     da4:	15 83       	std	Z+5, r17	; 0x05
     da6:	04 83       	std	Z+4, r16	; 0x04
     da8:	0e 94 a4 2a 	call	0x5548	; 0x5548 <sprintf>
     dac:	2d b7       	in	r18, 0x3d	; 61
     dae:	3e b7       	in	r19, 0x3e	; 62
     db0:	2a 5f       	subi	r18, 0xFA	; 250
     db2:	3f 4f       	sbci	r19, 0xFF	; 255
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	3e bf       	out	0x3e, r19	; 62
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	2d bf       	out	0x3d, r18	; 61
     dbe:	8c e6       	ldi	r24, 0x6C	; 108
     dc0:	96 e0       	ldi	r25, 0x06	; 6
     dc2:	b7 01       	movw	r22, r14
     dc4:	0e 94 02 10 	call	0x2004	; 0x2004 <_ZN5Print7printlnEPKc>
     dc8:	c7 01       	movw	r24, r14
     dca:	0e 94 f6 27 	call	0x4fec	; 0x4fec <free>
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	ff 90       	pop	r15
     dd8:	ef 90       	pop	r14
     dda:	08 95       	ret

00000ddc <_ZN15Cmissionconsole7adValueEj>:
     ddc:	ef 92       	push	r14
     dde:	ff 92       	push	r15
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	8b 01       	movw	r16, r22
     dea:	80 e4       	ldi	r24, 0x40	; 64
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	61 e0       	ldi	r22, 0x01	; 1
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <calloc>
     df6:	e8 2e       	mov	r14, r24
     df8:	e7 01       	movw	r28, r14
     dfa:	7e 01       	movw	r14, r28
     dfc:	f9 2e       	mov	r15, r25
     dfe:	e1 14       	cp	r14, r1
     e00:	f1 04       	cpc	r15, r1
     e02:	29 f1       	breq	.+74     	; 0xe4e <_ZN15Cmissionconsole7adValueEj+0x72>
     e04:	00 d0       	rcall	.+0      	; 0xe06 <_ZN15Cmissionconsole7adValueEj+0x2a>
     e06:	00 d0       	rcall	.+0      	; 0xe08 <_ZN15Cmissionconsole7adValueEj+0x2c>
     e08:	00 d0       	rcall	.+0      	; 0xe0a <_ZN15Cmissionconsole7adValueEj+0x2e>
     e0a:	ed b7       	in	r30, 0x3d	; 61
     e0c:	fe b7       	in	r31, 0x3e	; 62
     e0e:	31 96       	adiw	r30, 0x01	; 1
     e10:	ad b7       	in	r26, 0x3d	; 61
     e12:	be b7       	in	r27, 0x3e	; 62
     e14:	12 96       	adiw	r26, 0x02	; 2
     e16:	fc 92       	st	X, r15
     e18:	ee 92       	st	-X, r14
     e1a:	11 97       	sbiw	r26, 0x01	; 1
     e1c:	82 e2       	ldi	r24, 0x22	; 34
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	93 83       	std	Z+3, r25	; 0x03
     e22:	82 83       	std	Z+2, r24	; 0x02
     e24:	15 83       	std	Z+5, r17	; 0x05
     e26:	04 83       	std	Z+4, r16	; 0x04
     e28:	0e 94 a4 2a 	call	0x5548	; 0x5548 <sprintf>
     e2c:	2d b7       	in	r18, 0x3d	; 61
     e2e:	3e b7       	in	r19, 0x3e	; 62
     e30:	2a 5f       	subi	r18, 0xFA	; 250
     e32:	3f 4f       	sbci	r19, 0xFF	; 255
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	3e bf       	out	0x3e, r19	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	2d bf       	out	0x3d, r18	; 61
     e3e:	8c e6       	ldi	r24, 0x6C	; 108
     e40:	96 e0       	ldi	r25, 0x06	; 6
     e42:	b7 01       	movw	r22, r14
     e44:	0e 94 02 10 	call	0x2004	; 0x2004 <_ZN5Print7printlnEPKc>
     e48:	c7 01       	movw	r24, r14
     e4a:	0e 94 f6 27 	call	0x4fec	; 0x4fec <free>
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	ff 90       	pop	r15
     e58:	ef 90       	pop	r14
     e5a:	08 95       	ret

00000e5c <_ZN17AFMotorControllerC2Ev>:
#elif (MICROSTEPS == 16)
uint8_t microstepcurve[] = {0, 25, 50, 74, 98, 120, 141, 162, 180, 197, 212, 225, 236, 244, 250, 253, 255};
#endif

AFMotorController::AFMotorController(void) {
}
     e5c:	08 95       	ret

00000e5e <_ZN17AFMotorControllerC1Ev>:
     e5e:	08 95       	ret

00000e60 <_ZN10AF_DCMotor8setSpeedEh>:
    break;
  }
}

void AF_DCMotor::setSpeed(uint8_t speed) {
  switch (motornum) {
     e60:	fc 01       	movw	r30, r24
     e62:	80 81       	ld	r24, Z
     e64:	82 30       	cpi	r24, 0x02	; 2
     e66:	71 f0       	breq	.+28     	; 0xe84 <_ZN10AF_DCMotor8setSpeedEh+0x24>
     e68:	83 30       	cpi	r24, 0x03	; 3
     e6a:	28 f0       	brcs	.+10     	; 0xe76 <_ZN10AF_DCMotor8setSpeedEh+0x16>
     e6c:	83 30       	cpi	r24, 0x03	; 3
     e6e:	69 f0       	breq	.+26     	; 0xe8a <_ZN10AF_DCMotor8setSpeedEh+0x2a>
     e70:	84 30       	cpi	r24, 0x04	; 4
     e72:	31 f0       	breq	.+12     	; 0xe80 <_ZN10AF_DCMotor8setSpeedEh+0x20>
     e74:	08 95       	ret
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	e9 f7       	brne	.-6      	; 0xe74 <_ZN10AF_DCMotor8setSpeedEh+0x14>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
     e7a:	60 93 b3 00 	sts	0x00B3, r22
}

void AF_DCMotor::setSpeed(uint8_t speed) {
  switch (motornum) {
  case 1:
    setPWM1(speed); break;
     e7e:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
     e80:	68 bd       	out	0x28, r22	; 40
     e82:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
     e84:	60 93 b4 00 	sts	0x00B4, r22
void AF_DCMotor::setSpeed(uint8_t speed) {
  switch (motornum) {
  case 1:
    setPWM1(speed); break;
  case 2:
    setPWM2(speed); break;
     e88:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
     e8a:	67 bd       	out	0x27, r22	; 39
  case 1:
    setPWM1(speed); break;
  case 2:
    setPWM2(speed); break;
  case 3:
    setPWM3(speed); break;
     e8c:	08 95       	ret

00000e8e <_ZN10AF_Stepper8setSpeedEj>:
    setPWM3(255);
    setPWM4(255);
  }
}

void AF_Stepper::setSpeed(uint16_t rpm) {
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	ec 01       	movw	r28, r24
  uint32_t tmp = 0;
  tmp = revsteps * rpm;
  usperstep = 60000000 / tmp;
     e94:	88 81       	ld	r24, Y
     e96:	99 81       	ldd	r25, Y+1	; 0x01
     e98:	68 9f       	mul	r22, r24
     e9a:	90 01       	movw	r18, r0
     e9c:	69 9f       	mul	r22, r25
     e9e:	30 0d       	add	r19, r0
     ea0:	78 9f       	mul	r23, r24
     ea2:	30 0d       	add	r19, r0
     ea4:	11 24       	eor	r1, r1
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	77 e8       	ldi	r23, 0x87	; 135
     eae:	83 e9       	ldi	r24, 0x93	; 147
     eb0:	93 e0       	ldi	r25, 0x03	; 3
     eb2:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__udivmodsi4>
     eb6:	2b 83       	std	Y+3, r18	; 0x03
     eb8:	3c 83       	std	Y+4, r19	; 0x04
     eba:	4d 83       	std	Y+5, r20	; 0x05
     ebc:	5e 83       	std	Y+6, r21	; 0x06
  // wont compile with -O2 or -O3 - see bug http://gcc.gnu.org/bugzilla/show_bug.cgi?id=44245#c5
  //usperstep = 60000000 / ((uint32_t)revsteps * (uint32_t)rpm);
  steppingcounter = 0;
     ebe:	1f 82       	std	Y+7, r1	; 0x07
     ec0:	18 86       	std	Y+8, r1	; 0x08
     ec2:	19 86       	std	Y+9, r1	; 0x09
     ec4:	1a 86       	std	Y+10, r1	; 0x0a
}
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	08 95       	ret

00000ecc <_GLOBAL__I_microstepcurve>:
  }

 
  MC.latch_tx();
  return currentstep;
}
     ecc:	08 95       	ret

00000ece <_ZN17AFMotorController8latch_txEv>:
  //ENABLE_PORT &= ~_BV(ENABLE); // enable the chip outputs!
  digitalWrite(MOTORENABLE, LOW);
}


void AFMotorController::latch_tx(void) {
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
  uint8_t i;

  //LATCH_PORT &= ~_BV(LATCH);
  digitalWrite(MOTORLATCH, LOW);
     ed2:	8c e0       	ldi	r24, 0x0C	; 12
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>

  //SER_PORT &= ~_BV(SER);
  digitalWrite(MOTORDATA, LOW);
     eda:	88 e0       	ldi	r24, 0x08	; 8
     edc:	60 e0       	ldi	r22, 0x00	; 0
     ede:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
     ee2:	c7 e0       	ldi	r28, 0x07	; 7
     ee4:	d0 e0       	ldi	r29, 0x00	; 0
     ee6:	0d c0       	rjmp	.+26     	; 0xf02 <_ZN17AFMotorController8latch_txEv+0x34>
    //CLK_PORT &= ~_BV(CLK);
    digitalWrite(MOTORCLK, LOW);

    if (latch_state & _BV(7-i)) {
      //SER_PORT |= _BV(SER);
      digitalWrite(MOTORDATA, HIGH);
     ee8:	88 e0       	ldi	r24, 0x08	; 8
     eea:	61 e0       	ldi	r22, 0x01	; 1
     eec:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
    } else {
      //SER_PORT &= ~_BV(SER);
      digitalWrite(MOTORDATA, LOW);
    }
    //CLK_PORT |= _BV(CLK);
    digitalWrite(MOTORCLK, HIGH);
     ef0:	84 e0       	ldi	r24, 0x04	; 4
     ef2:	61 e0       	ldi	r22, 0x01	; 1
     ef4:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
     ef8:	21 97       	sbiw	r28, 0x01	; 1
  digitalWrite(MOTORLATCH, LOW);

  //SER_PORT &= ~_BV(SER);
  digitalWrite(MOTORDATA, LOW);

  for (i=0; i<8; i++) {
     efa:	3f ef       	ldi	r19, 0xFF	; 255
     efc:	cf 3f       	cpi	r28, 0xFF	; 255
     efe:	d3 07       	cpc	r29, r19
     f00:	a1 f0       	breq	.+40     	; 0xf2a <_ZN17AFMotorController8latch_txEv+0x5c>
    //CLK_PORT &= ~_BV(CLK);
    digitalWrite(MOTORCLK, LOW);
     f02:	84 e0       	ldi	r24, 0x04	; 4
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>

    if (latch_state & _BV(7-i)) {
     f0a:	80 91 e7 05 	lds	r24, 0x05E7
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0c 2e       	mov	r0, r28
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <_ZN17AFMotorController8latch_txEv+0x4a>
     f14:	95 95       	asr	r25
     f16:	87 95       	ror	r24
     f18:	0a 94       	dec	r0
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <_ZN17AFMotorController8latch_txEv+0x46>
     f1c:	80 fd       	sbrc	r24, 0
     f1e:	e4 cf       	rjmp	.-56     	; 0xee8 <_ZN17AFMotorController8latch_txEv+0x1a>
      //SER_PORT |= _BV(SER);
      digitalWrite(MOTORDATA, HIGH);
    } else {
      //SER_PORT &= ~_BV(SER);
      digitalWrite(MOTORDATA, LOW);
     f20:	88 e0       	ldi	r24, 0x08	; 8
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
     f28:	e3 cf       	rjmp	.-58     	; 0xef0 <_ZN17AFMotorController8latch_txEv+0x22>
    }
    //CLK_PORT |= _BV(CLK);
    digitalWrite(MOTORCLK, HIGH);
  }
  //LATCH_PORT |= _BV(LATCH);
  digitalWrite(MOTORLATCH, HIGH);
     f2a:	8c e0       	ldi	r24, 0x0C	; 12
     f2c:	61 e0       	ldi	r22, 0x01	; 1
     f2e:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
}
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	08 95       	ret

00000f38 <_ZN10AF_Stepper7onestepEhh>:
      } 
    }
  }
}

uint8_t AF_Stepper::onestep(uint8_t dir, uint8_t style) {
     f38:	df 92       	push	r13
     f3a:	ef 92       	push	r14
     f3c:	ff 92       	push	r15
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	ec 01       	movw	r28, r24
  uint8_t a, b, c, d;
  uint8_t ocrb, ocra;

  ocra = ocrb = 255;

  if (steppernum == 1) {
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	09 f4       	brne	.+2      	; 0xf50 <_ZN10AF_Stepper7onestepEhh+0x18>
     f4e:	71 c0       	rjmp	.+226    	; 0x1032 <_ZN10AF_Stepper7onestepEhh+0xfa>
    a = _BV(MOTOR1_A);
    b = _BV(MOTOR2_A);
    c = _BV(MOTOR1_B);
    d = _BV(MOTOR2_B);
  } else if (steppernum == 2) {
     f50:	82 30       	cpi	r24, 0x02	; 2
     f52:	49 f0       	breq	.+18     	; 0xf66 <_ZN10AF_Stepper7onestepEhh+0x2e>
     f54:	80 e0       	ldi	r24, 0x00	; 0
  }

 
  MC.latch_tx();
  return currentstep;
}
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	df 90       	pop	r13
     f64:	08 95       	ret
  if (steppernum == 1) {
    a = _BV(MOTOR1_A);
    b = _BV(MOTOR2_A);
    c = _BV(MOTOR1_B);
    d = _BV(MOTOR2_B);
  } else if (steppernum == 2) {
     f66:	2e e1       	ldi	r18, 0x1E	; 30
     f68:	91 e2       	ldi	r25, 0x21	; 33
     f6a:	d9 2e       	mov	r13, r25
     f6c:	30 e4       	ldi	r19, 0x40	; 64
     f6e:	50 e8       	ldi	r21, 0x80	; 128
     f70:	e1 e0       	ldi	r30, 0x01	; 1
     f72:	f0 e2       	ldi	r31, 0x20	; 32
  } else {
    return 0;
  }

  // next determine what sort of stepping procedure we're up to
  if (style == SINGLE) {
     f74:	41 30       	cpi	r20, 0x01	; 1
     f76:	01 f1       	breq	.+64     	; 0xfb8 <_ZN10AF_Stepper7onestepEhh+0x80>
      }
      else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == DOUBLE) {
     f78:	42 30       	cpi	r20, 0x02	; 2
     f7a:	09 f4       	brne	.+2      	; 0xf7e <_ZN10AF_Stepper7onestepEhh+0x46>
     f7c:	95 c0       	rjmp	.+298    	; 0x10a8 <_ZN10AF_Stepper7onestepEhh+0x170>
	currentstep += MICROSTEPS;
      } else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == INTERLEAVE) {
     f7e:	43 30       	cpi	r20, 0x03	; 3
     f80:	09 f4       	brne	.+2      	; 0xf84 <_ZN10AF_Stepper7onestepEhh+0x4c>
     f82:	a2 c0       	rjmp	.+324    	; 0x10c8 <_ZN10AF_Stepper7onestepEhh+0x190>
     f84:	9b 85       	ldd	r25, Y+11	; 0x0b
    } else {
       currentstep -= MICROSTEPS/2;
    }
  } 

  if (style == MICROSTEP) {
     f86:	44 30       	cpi	r20, 0x04	; 4
     f88:	21 f5       	brne	.+72     	; 0xfd2 <_ZN10AF_Stepper7onestepEhh+0x9a>
    if (dir == FORWARD) {
     f8a:	61 30       	cpi	r22, 0x01	; 1
     f8c:	09 f4       	brne	.+2      	; 0xf90 <_ZN10AF_Stepper7onestepEhh+0x58>
     f8e:	f3 c0       	rjmp	.+486    	; 0x1176 <_ZN10AF_Stepper7onestepEhh+0x23e>
      currentstep++;
    } else {
      // BACKWARDS
      currentstep--;
     f90:	91 50       	subi	r25, 0x01	; 1
     f92:	9b 87       	std	Y+11, r25	; 0x0b
    }

    currentstep += MICROSTEPS*4;
    currentstep %= MICROSTEPS*4;
     f94:	9f 73       	andi	r25, 0x3F	; 63
     f96:	9b 87       	std	Y+11, r25	; 0x0b

    ocra = ocrb = 0;
    if ( (currentstep >= 0) && (currentstep < MICROSTEPS)) {
     f98:	90 31       	cpi	r25, 0x10	; 16
     f9a:	08 f0       	brcs	.+2      	; 0xf9e <_ZN10AF_Stepper7onestepEhh+0x66>
     f9c:	99 c0       	rjmp	.+306    	; 0x10d0 <_ZN10AF_Stepper7onestepEhh+0x198>
      ocra = microstepcurve[MICROSTEPS - currentstep];
     f9e:	09 2f       	mov	r16, r25
     fa0:	10 e0       	ldi	r17, 0x00	; 0
     fa2:	6e e3       	ldi	r22, 0x3E	; 62
     fa4:	71 e0       	ldi	r23, 0x01	; 1
     fa6:	60 1b       	sub	r22, r16
     fa8:	71 0b       	sbc	r23, r17
     faa:	db 01       	movw	r26, r22
     fac:	7c 91       	ld	r23, X
      ocrb = microstepcurve[currentstep];
     fae:	02 5d       	subi	r16, 0xD2	; 210
     fb0:	1e 4f       	sbci	r17, 0xFE	; 254
     fb2:	d8 01       	movw	r26, r16
     fb4:	6c 91       	ld	r22, X
     fb6:	0f c0       	rjmp	.+30     	; 0xfd6 <_ZN10AF_Stepper7onestepEhh+0x9e>
    return 0;
  }

  // next determine what sort of stepping procedure we're up to
  if (style == SINGLE) {
    if ((currentstep/(MICROSTEPS/2)) % 2) { // we're at an odd step, weird
     fb8:	9b 85       	ldd	r25, Y+11	; 0x0b
     fba:	79 2f       	mov	r23, r25
     fbc:	76 95       	lsr	r23
     fbe:	76 95       	lsr	r23
     fc0:	76 95       	lsr	r23
     fc2:	70 ff       	sbrs	r23, 0
     fc4:	9b c0       	rjmp	.+310    	; 0x10fc <_ZN10AF_Stepper7onestepEhh+0x1c4>
      if (dir == FORWARD) {
     fc6:	61 30       	cpi	r22, 0x01	; 1
     fc8:	09 f4       	brne	.+2      	; 0xfcc <_ZN10AF_Stepper7onestepEhh+0x94>
     fca:	dc c0       	rjmp	.+440    	; 0x1184 <_ZN10AF_Stepper7onestepEhh+0x24c>
	currentstep += MICROSTEPS/2;
      }
      else {
	currentstep -= MICROSTEPS/2;
     fcc:	98 50       	subi	r25, 0x08	; 8
     fce:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
     fd0:	9b 85       	ldd	r25, Y+11	; 0x0b
     fd2:	7f ef       	ldi	r23, 0xFF	; 255
     fd4:	6f ef       	ldi	r22, 0xFF	; 255
      ocrb = microstepcurve[MICROSTEPS*4 - currentstep];
    }
  }

  currentstep += MICROSTEPS*4;
  currentstep %= MICROSTEPS*4;
     fd6:	9f 73       	andi	r25, 0x3F	; 63
     fd8:	9b 87       	std	Y+11, r25	; 0x0b
  Serial.print("current step: "); Serial.println(currentstep, DEC);
  Serial.print(" pwmA = "); Serial.print(ocra, DEC); 
  Serial.print(" pwmB = "); Serial.println(ocrb, DEC); 
#endif

  if (steppernum == 1) {
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <_ZN10AF_Stepper7onestepEhh+0xa8>
     fde:	5f c0       	rjmp	.+190    	; 0x109e <_ZN10AF_Stepper7onestepEhh+0x166>
    setPWM1(ocra);
    setPWM2(ocrb);
  } else if (steppernum == 2) {
     fe0:	82 30       	cpi	r24, 0x02	; 2
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <_ZN10AF_Stepper7onestepEhh+0xae>
     fe4:	6e c0       	rjmp	.+220    	; 0x10c2 <_ZN10AF_Stepper7onestepEhh+0x18a>
    setPWM4(ocrb);
  }


  // release all
  latch_state &= ~a & ~b & ~c & ~d; // all motor pins to 0
     fe6:	80 91 e7 05 	lds	r24, 0x05E7
     fea:	82 23       	and	r24, r18
     fec:	80 93 e7 05 	sts	0x05E7, r24

  //Serial.println(step, DEC);
  if (style == MICROSTEP) {
     ff0:	44 30       	cpi	r20, 0x04	; 4
     ff2:	91 f1       	breq	.+100    	; 0x1058 <_ZN10AF_Stepper7onestepEhh+0x120>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
     ff4:	96 95       	lsr	r25
     ff6:	96 95       	lsr	r25
     ff8:	96 95       	lsr	r25
     ffa:	94 30       	cpi	r25, 0x04	; 4
     ffc:	09 f4       	brne	.+2      	; 0x1000 <_ZN10AF_Stepper7onestepEhh+0xc8>
     ffe:	af c0       	rjmp	.+350    	; 0x115e <_ZN10AF_Stepper7onestepEhh+0x226>
    1000:	95 30       	cpi	r25, 0x05	; 5
    1002:	f8 f0       	brcs	.+62     	; 0x1042 <_ZN10AF_Stepper7onestepEhh+0x10a>
    1004:	96 30       	cpi	r25, 0x06	; 6
    1006:	09 f4       	brne	.+2      	; 0x100a <_ZN10AF_Stepper7onestepEhh+0xd2>
    1008:	ae c0       	rjmp	.+348    	; 0x1166 <_ZN10AF_Stepper7onestepEhh+0x22e>
    100a:	96 30       	cpi	r25, 0x06	; 6
    100c:	08 f0       	brcs	.+2      	; 0x1010 <_ZN10AF_Stepper7onestepEhh+0xd8>
    100e:	87 c0       	rjmp	.+270    	; 0x111e <_ZN10AF_Stepper7onestepEhh+0x1e6>
      break;
    case 4:
      latch_state |= c; // energize coil 3 only
      break; 
    case 5:
      latch_state |= c | d; // energize coil 3+4
    1010:	35 2b       	or	r19, r21
    1012:	38 2b       	or	r19, r24
    1014:	30 93 e7 05 	sts	0x05E7, r19
      break;
    }
  }

 
  MC.latch_tx();
    1018:	86 ee       	ldi	r24, 0xE6	; 230
    101a:	95 e0       	ldi	r25, 0x05	; 5
    101c:	0e 94 67 07 	call	0xece	; 0xece <_ZN17AFMotorController8latch_txEv>
  return currentstep;
    1020:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	df 90       	pop	r13
    1030:	08 95       	ret
  uint8_t a, b, c, d;
  uint8_t ocrb, ocra;

  ocra = ocrb = 255;

  if (steppernum == 1) {
    1032:	21 ee       	ldi	r18, 0xE1	; 225
    1034:	36 e0       	ldi	r19, 0x06	; 6
    1036:	d3 2e       	mov	r13, r19
    1038:	30 e1       	ldi	r19, 0x10	; 16
    103a:	58 e0       	ldi	r21, 0x08	; 8
    103c:	e2 e0       	ldi	r30, 0x02	; 2
    103e:	f4 e0       	ldi	r31, 0x04	; 4
    1040:	99 cf       	rjmp	.-206    	; 0xf74 <_ZN10AF_Stepper7onestepEhh+0x3c>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
    1042:	92 30       	cpi	r25, 0x02	; 2
    1044:	09 f4       	brne	.+2      	; 0x1048 <_ZN10AF_Stepper7onestepEhh+0x110>
    1046:	93 c0       	rjmp	.+294    	; 0x116e <_ZN10AF_Stepper7onestepEhh+0x236>
    1048:	93 30       	cpi	r25, 0x03	; 3
    104a:	08 f4       	brcc	.+2      	; 0x104e <_ZN10AF_Stepper7onestepEhh+0x116>
    104c:	62 c0       	rjmp	.+196    	; 0x1112 <_ZN10AF_Stepper7onestepEhh+0x1da>
      break;
    case 2:
      latch_state |= b; // energize coil 2 only
      break;
    case 3:
      latch_state |= b | c; // energize coil 2+3
    104e:	5e 2b       	or	r21, r30
    1050:	58 2b       	or	r21, r24
    1052:	50 93 e7 05 	sts	0x05E7, r21
      break;
    1056:	e0 cf       	rjmp	.-64     	; 0x1018 <_ZN10AF_Stepper7onestepEhh+0xe0>
  // release all
  latch_state &= ~a & ~b & ~c & ~d; // all motor pins to 0

  //Serial.println(step, DEC);
  if (style == MICROSTEP) {
    if ((currentstep >= 0) && (currentstep < MICROSTEPS))
    1058:	90 31       	cpi	r25, 0x10	; 16
    105a:	18 f4       	brcc	.+6      	; 0x1062 <_ZN10AF_Stepper7onestepEhh+0x12a>
      latch_state |= a | b;
    105c:	8d 29       	or	r24, r13
    105e:	80 93 e7 05 	sts	0x05E7, r24
    if ((currentstep >= MICROSTEPS) && (currentstep < MICROSTEPS*2))
    1062:	89 2f       	mov	r24, r25
    1064:	80 51       	subi	r24, 0x10	; 16
    1066:	80 31       	cpi	r24, 0x10	; 16
    1068:	30 f4       	brcc	.+12     	; 0x1076 <_ZN10AF_Stepper7onestepEhh+0x13e>
      latch_state |= b | c;
    106a:	e5 2b       	or	r30, r21
    106c:	20 91 e7 05 	lds	r18, 0x05E7
    1070:	2e 2b       	or	r18, r30
    1072:	20 93 e7 05 	sts	0x05E7, r18
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
    1076:	89 2f       	mov	r24, r25
    1078:	80 52       	subi	r24, 0x20	; 32
    107a:	80 31       	cpi	r24, 0x10	; 16
    107c:	30 f4       	brcc	.+12     	; 0x108a <_ZN10AF_Stepper7onestepEhh+0x152>
      latch_state |= c | d;
    107e:	53 2b       	or	r21, r19
    1080:	20 91 e7 05 	lds	r18, 0x05E7
    1084:	25 2b       	or	r18, r21
    1086:	20 93 e7 05 	sts	0x05E7, r18
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
    108a:	90 53       	subi	r25, 0x30	; 48
    108c:	90 31       	cpi	r25, 0x10	; 16
    108e:	20 f6       	brcc	.-120    	; 0x1018 <_ZN10AF_Stepper7onestepEhh+0xe0>
      latch_state |= d | a;
    1090:	3f 2b       	or	r19, r31
    1092:	90 91 e7 05 	lds	r25, 0x05E7
    1096:	93 2b       	or	r25, r19
    1098:	90 93 e7 05 	sts	0x05E7, r25
    109c:	bd cf       	rjmp	.-134    	; 0x1018 <_ZN10AF_Stepper7onestepEhh+0xe0>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    109e:	70 93 b3 00 	sts	0x00B3, r23
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    10a2:	60 93 b4 00 	sts	0x00B4, r22
    10a6:	9f cf       	rjmp	.-194    	; 0xfe6 <_ZN10AF_Stepper7onestepEhh+0xae>
      else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == DOUBLE) {
    if (! (currentstep/(MICROSTEPS/2) % 2)) { // we're at an even step, weird
    10a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    10aa:	79 2f       	mov	r23, r25
    10ac:	76 95       	lsr	r23
    10ae:	76 95       	lsr	r23
    10b0:	76 95       	lsr	r23
    10b2:	70 fd       	sbrc	r23, 0
    10b4:	29 c0       	rjmp	.+82     	; 0x1108 <_ZN10AF_Stepper7onestepEhh+0x1d0>
      if (dir == FORWARD) {
    10b6:	61 30       	cpi	r22, 0x01	; 1
    10b8:	09 f4       	brne	.+2      	; 0x10bc <_ZN10AF_Stepper7onestepEhh+0x184>
    10ba:	47 c0       	rjmp	.+142    	; 0x114a <_ZN10AF_Stepper7onestepEhh+0x212>
    }
  } else if (style == INTERLEAVE) {
    if (dir == FORWARD) {
       currentstep += MICROSTEPS/2;
    } else {
       currentstep -= MICROSTEPS/2;
    10bc:	98 50       	subi	r25, 0x08	; 8
    10be:	9b 87       	std	Y+11, r25	; 0x0b
    10c0:	88 cf       	rjmp	.-240    	; 0xfd2 <_ZN10AF_Stepper7onestepEhh+0x9a>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    10c2:	77 bd       	out	0x27, r23	; 39
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    10c4:	68 bd       	out	0x28, r22	; 40
    10c6:	8f cf       	rjmp	.-226    	; 0xfe6 <_ZN10AF_Stepper7onestepEhh+0xae>
      } else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == INTERLEAVE) {
    if (dir == FORWARD) {
    10c8:	61 30       	cpi	r22, 0x01	; 1
    10ca:	f1 f1       	breq	.+124    	; 0x1148 <_ZN10AF_Stepper7onestepEhh+0x210>
       currentstep += MICROSTEPS/2;
    } else {
       currentstep -= MICROSTEPS/2;
    10cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    10ce:	f6 cf       	rjmp	.-20     	; 0x10bc <_ZN10AF_Stepper7onestepEhh+0x184>

    ocra = ocrb = 0;
    if ( (currentstep >= 0) && (currentstep < MICROSTEPS)) {
      ocra = microstepcurve[MICROSTEPS - currentstep];
      ocrb = microstepcurve[currentstep];
    } else if  ( (currentstep >= MICROSTEPS) && (currentstep < MICROSTEPS*2)) {
    10d0:	69 2f       	mov	r22, r25
    10d2:	60 51       	subi	r22, 0x10	; 16
    10d4:	60 31       	cpi	r22, 0x10	; 16
    10d6:	50 f1       	brcs	.+84     	; 0x112c <_ZN10AF_Stepper7onestepEhh+0x1f4>
      ocra = microstepcurve[currentstep - MICROSTEPS];
      ocrb = microstepcurve[MICROSTEPS*2 - currentstep];
    } else if  ( (currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3)) {
    10d8:	69 2f       	mov	r22, r25
    10da:	60 52       	subi	r22, 0x20	; 32
    10dc:	60 31       	cpi	r22, 0x10	; 16
    10de:	08 f0       	brcs	.+2      	; 0x10e2 <_ZN10AF_Stepper7onestepEhh+0x1aa>
    10e0:	55 c0       	rjmp	.+170    	; 0x118c <_ZN10AF_Stepper7onestepEhh+0x254>
      ocra = microstepcurve[MICROSTEPS*3 - currentstep];
    10e2:	09 2f       	mov	r16, r25
    10e4:	10 e0       	ldi	r17, 0x00	; 0
    10e6:	6e e5       	ldi	r22, 0x5E	; 94
    10e8:	71 e0       	ldi	r23, 0x01	; 1
    10ea:	60 1b       	sub	r22, r16
    10ec:	71 0b       	sbc	r23, r17
    10ee:	db 01       	movw	r26, r22
    10f0:	7c 91       	ld	r23, X
      ocrb = microstepcurve[currentstep - MICROSTEPS*2];
    10f2:	02 5f       	subi	r16, 0xF2	; 242
    10f4:	1e 4f       	sbci	r17, 0xFE	; 254
    10f6:	d8 01       	movw	r26, r16
    10f8:	6c 91       	ld	r22, X
    10fa:	6d cf       	rjmp	.-294    	; 0xfd6 <_ZN10AF_Stepper7onestepEhh+0x9e>
      }
      else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next even step
      if (dir == FORWARD) {
    10fc:	61 30       	cpi	r22, 0x01	; 1
    10fe:	f1 f1       	breq	.+124    	; 0x117c <_ZN10AF_Stepper7onestepEhh+0x244>
	currentstep += MICROSTEPS;
      }
      else {
	currentstep -= MICROSTEPS;
    1100:	90 51       	subi	r25, 0x10	; 16
    1102:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
    1104:	9b 85       	ldd	r25, Y+11	; 0x0b
    1106:	65 cf       	rjmp	.-310    	; 0xfd2 <_ZN10AF_Stepper7onestepEhh+0x9a>
	currentstep += MICROSTEPS/2;
      } else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next odd step
      if (dir == FORWARD) {
    1108:	61 30       	cpi	r22, 0x01	; 1
    110a:	11 f1       	breq	.+68     	; 0x1150 <_ZN10AF_Stepper7onestepEhh+0x218>
	currentstep += MICROSTEPS;
      } else {
	currentstep -= MICROSTEPS;
    110c:	90 51       	subi	r25, 0x10	; 16
    110e:	9b 87       	std	Y+11, r25	; 0x0b
    1110:	60 cf       	rjmp	.-320    	; 0xfd2 <_ZN10AF_Stepper7onestepEhh+0x9a>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
    1112:	91 30       	cpi	r25, 0x01	; 1
    1114:	01 f1       	breq	.+64     	; 0x1156 <_ZN10AF_Stepper7onestepEhh+0x21e>
    case 0:
      latch_state |= a; // energize coil 1 only
    1116:	8f 2b       	or	r24, r31
    1118:	80 93 e7 05 	sts	0x05E7, r24
      break;
    111c:	7d cf       	rjmp	.-262    	; 0x1018 <_ZN10AF_Stepper7onestepEhh+0xe0>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
    111e:	97 30       	cpi	r25, 0x07	; 7
    1120:	d1 f7       	brne	.-12     	; 0x1116 <_ZN10AF_Stepper7onestepEhh+0x1de>
      break;
    case 6:
      latch_state |= d; // energize coil 4 only
      break;
    case 7:
      latch_state |= d | a; // energize coil 1+4
    1122:	3f 2b       	or	r19, r31
    1124:	38 2b       	or	r19, r24
    1126:	30 93 e7 05 	sts	0x05E7, r19
    112a:	76 cf       	rjmp	.-276    	; 0x1018 <_ZN10AF_Stepper7onestepEhh+0xe0>
    ocra = ocrb = 0;
    if ( (currentstep >= 0) && (currentstep < MICROSTEPS)) {
      ocra = microstepcurve[MICROSTEPS - currentstep];
      ocrb = microstepcurve[currentstep];
    } else if  ( (currentstep >= MICROSTEPS) && (currentstep < MICROSTEPS*2)) {
      ocra = microstepcurve[currentstep - MICROSTEPS];
    112c:	e9 2e       	mov	r14, r25
    112e:	ff 24       	eor	r15, r15
    1130:	b7 01       	movw	r22, r14
    1132:	62 5e       	subi	r22, 0xE2	; 226
    1134:	7e 4f       	sbci	r23, 0xFE	; 254
    1136:	db 01       	movw	r26, r22
    1138:	7c 91       	ld	r23, X
      ocrb = microstepcurve[MICROSTEPS*2 - currentstep];
    113a:	0e e4       	ldi	r16, 0x4E	; 78
    113c:	11 e0       	ldi	r17, 0x01	; 1
    113e:	0e 19       	sub	r16, r14
    1140:	1f 09       	sbc	r17, r15
    1142:	d8 01       	movw	r26, r16
    1144:	6c 91       	ld	r22, X
    1146:	47 cf       	rjmp	.-370    	; 0xfd6 <_ZN10AF_Stepper7onestepEhh+0x9e>
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == INTERLEAVE) {
    if (dir == FORWARD) {
       currentstep += MICROSTEPS/2;
    1148:	9b 85       	ldd	r25, Y+11	; 0x0b
    114a:	98 5f       	subi	r25, 0xF8	; 248
    114c:	9b 87       	std	Y+11, r25	; 0x0b
    114e:	41 cf       	rjmp	.-382    	; 0xfd2 <_ZN10AF_Stepper7onestepEhh+0x9a>
      } else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next odd step
      if (dir == FORWARD) {
	currentstep += MICROSTEPS;
    1150:	90 5f       	subi	r25, 0xF0	; 240
    1152:	9b 87       	std	Y+11, r25	; 0x0b
    1154:	3e cf       	rjmp	.-388    	; 0xfd2 <_ZN10AF_Stepper7onestepEhh+0x9a>
    switch (currentstep/(MICROSTEPS/2)) {
    case 0:
      latch_state |= a; // energize coil 1 only
      break;
    case 1:
      latch_state |= a | b; // energize coil 1+2
    1156:	8d 29       	or	r24, r13
    1158:	80 93 e7 05 	sts	0x05E7, r24
      break;
    115c:	5d cf       	rjmp	.-326    	; 0x1018 <_ZN10AF_Stepper7onestepEhh+0xe0>
      break;
    case 3:
      latch_state |= b | c; // energize coil 2+3
      break;
    case 4:
      latch_state |= c; // energize coil 3 only
    115e:	85 2b       	or	r24, r21
    1160:	80 93 e7 05 	sts	0x05E7, r24
      break; 
    1164:	59 cf       	rjmp	.-334    	; 0x1018 <_ZN10AF_Stepper7onestepEhh+0xe0>
    case 5:
      latch_state |= c | d; // energize coil 3+4
      break;
    case 6:
      latch_state |= d; // energize coil 4 only
    1166:	83 2b       	or	r24, r19
    1168:	80 93 e7 05 	sts	0x05E7, r24
      break;
    116c:	55 cf       	rjmp	.-342    	; 0x1018 <_ZN10AF_Stepper7onestepEhh+0xe0>
      break;
    case 1:
      latch_state |= a | b; // energize coil 1+2
      break;
    case 2:
      latch_state |= b; // energize coil 2 only
    116e:	8e 2b       	or	r24, r30
    1170:	80 93 e7 05 	sts	0x05E7, r24
      break;
    1174:	51 cf       	rjmp	.-350    	; 0x1018 <_ZN10AF_Stepper7onestepEhh+0xe0>
    }
  } 

  if (style == MICROSTEP) {
    if (dir == FORWARD) {
      currentstep++;
    1176:	9f 5f       	subi	r25, 0xFF	; 255
    1178:	9b 87       	std	Y+11, r25	; 0x0b
    117a:	0c cf       	rjmp	.-488    	; 0xf94 <_ZN10AF_Stepper7onestepEhh+0x5c>
      else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next even step
      if (dir == FORWARD) {
	currentstep += MICROSTEPS;
    117c:	90 5f       	subi	r25, 0xF0	; 240
    117e:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
    1180:	9b 85       	ldd	r25, Y+11	; 0x0b
    1182:	27 cf       	rjmp	.-434    	; 0xfd2 <_ZN10AF_Stepper7onestepEhh+0x9a>

  // next determine what sort of stepping procedure we're up to
  if (style == SINGLE) {
    if ((currentstep/(MICROSTEPS/2)) % 2) { // we're at an odd step, weird
      if (dir == FORWARD) {
	currentstep += MICROSTEPS/2;
    1184:	98 5f       	subi	r25, 0xF8	; 248
    1186:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
    1188:	9b 85       	ldd	r25, Y+11	; 0x0b
    118a:	23 cf       	rjmp	.-442    	; 0xfd2 <_ZN10AF_Stepper7onestepEhh+0x9a>
      ocra = microstepcurve[currentstep - MICROSTEPS];
      ocrb = microstepcurve[MICROSTEPS*2 - currentstep];
    } else if  ( (currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3)) {
      ocra = microstepcurve[MICROSTEPS*3 - currentstep];
      ocrb = microstepcurve[currentstep - MICROSTEPS*2];
    } else if  ( (currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4)) {
    118c:	69 2f       	mov	r22, r25
    118e:	60 53       	subi	r22, 0x30	; 48
    1190:	60 31       	cpi	r22, 0x10	; 16
    1192:	18 f0       	brcs	.+6      	; 0x119a <_ZN10AF_Stepper7onestepEhh+0x262>
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	1e cf       	rjmp	.-452    	; 0xfd6 <_ZN10AF_Stepper7onestepEhh+0x9e>
      ocra = microstepcurve[currentstep - MICROSTEPS*3];
    119a:	e9 2e       	mov	r14, r25
    119c:	ff 24       	eor	r15, r15
    119e:	b7 01       	movw	r22, r14
    11a0:	62 50       	subi	r22, 0x02	; 2
    11a2:	7f 4f       	sbci	r23, 0xFF	; 255
    11a4:	db 01       	movw	r26, r22
    11a6:	7c 91       	ld	r23, X
      ocrb = microstepcurve[MICROSTEPS*4 - currentstep];
    11a8:	0e e6       	ldi	r16, 0x6E	; 110
    11aa:	11 e0       	ldi	r17, 0x01	; 1
    11ac:	0e 19       	sub	r16, r14
    11ae:	1f 09       	sbc	r17, r15
    11b0:	d8 01       	movw	r26, r16
    11b2:	6c 91       	ld	r22, X
    11b4:	10 cf       	rjmp	.-480    	; 0xfd6 <_ZN10AF_Stepper7onestepEhh+0x9e>

000011b6 <_ZN10AF_Stepper4stepEjhh>:
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    MC.latch_tx();
  }
}

void AF_Stepper::step(uint16_t steps, uint8_t dir,  uint8_t style) {
    11b6:	5f 92       	push	r5
    11b8:	6f 92       	push	r6
    11ba:	7f 92       	push	r7
    11bc:	8f 92       	push	r8
    11be:	9f 92       	push	r9
    11c0:	af 92       	push	r10
    11c2:	bf 92       	push	r11
    11c4:	cf 92       	push	r12
    11c6:	df 92       	push	r13
    11c8:	ef 92       	push	r14
    11ca:	ff 92       	push	r15
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	ec 01       	movw	r28, r24
    11d6:	8b 01       	movw	r16, r22
    11d8:	54 2e       	mov	r5, r20
    11da:	f2 2e       	mov	r15, r18
  uint32_t uspers = usperstep;
    11dc:	8b 80       	ldd	r8, Y+3	; 0x03
    11de:	9c 80       	ldd	r9, Y+4	; 0x04
    11e0:	ad 80       	ldd	r10, Y+5	; 0x05
    11e2:	be 80       	ldd	r11, Y+6	; 0x06
  uint8_t ret = 0;

  if (style == INTERLEAVE) {
    11e4:	23 e0       	ldi	r18, 0x03	; 3
    11e6:	f2 16       	cp	r15, r18
    11e8:	09 f4       	brne	.+2      	; 0x11ec <_ZN10AF_Stepper4stepEjhh+0x36>
    11ea:	a5 c0       	rjmp	.+330    	; 0x1336 <_ZN10AF_Stepper4stepEjhh+0x180>
    uspers /= 2;
  }
 else if (style == MICROSTEP) {
    11ec:	84 e0       	ldi	r24, 0x04	; 4
    11ee:	f8 16       	cp	r15, r24
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <_ZN10AF_Stepper4stepEjhh+0x3e>
    11f2:	a6 c0       	rjmp	.+332    	; 0x1340 <_ZN10AF_Stepper4stepEjhh+0x18a>
#endif
  }

  while (steps--) {
    ret = onestep(dir, style);
    delay(uspers/1000); // in ms
    11f4:	c5 01       	movw	r24, r10
    11f6:	b4 01       	movw	r22, r8
    11f8:	28 ee       	ldi	r18, 0xE8	; 232
    11fa:	33 e0       	ldi	r19, 0x03	; 3
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__udivmodsi4>
    1204:	72 2e       	mov	r7, r18
    1206:	c3 2e       	mov	r12, r19
    1208:	d4 2e       	mov	r13, r20
    120a:	e5 2e       	mov	r14, r21
    steppingcounter += (uspers % 1000);
    120c:	c5 01       	movw	r24, r10
    120e:	b4 01       	movw	r22, r8
    1210:	28 ee       	ldi	r18, 0xE8	; 232
    1212:	33 e0       	ldi	r19, 0x03	; 3
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__udivmodsi4>
    121c:	4b 01       	movw	r8, r22
    121e:	5c 01       	movw	r10, r24
    1220:	66 24       	eor	r6, r6
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <_ZN10AF_Stepper4stepEjhh+0x72>
    if (steppingcounter >= 1000) {
      delay(1);
      steppingcounter -= 1000;
    1224:	01 50       	subi	r16, 0x01	; 1
    1226:	10 40       	sbci	r17, 0x00	; 0
#ifdef MOTORDEBUG
    Serial.print("steps = "); Serial.println(steps, DEC);
#endif
  }

  while (steps--) {
    1228:	01 15       	cp	r16, r1
    122a:	11 05       	cpc	r17, r1
    122c:	99 f1       	breq	.+102    	; 0x1294 <_ZN10AF_Stepper4stepEjhh+0xde>
    ret = onestep(dir, style);
    122e:	ce 01       	movw	r24, r28
    1230:	65 2d       	mov	r22, r5
    1232:	4f 2d       	mov	r20, r15
    1234:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZN10AF_Stepper7onestepEhh>
    1238:	68 2e       	mov	r6, r24
    delay(uspers/1000); // in ms
    123a:	67 2d       	mov	r22, r7
    123c:	7c 2d       	mov	r23, r12
    123e:	8d 2d       	mov	r24, r13
    1240:	9e 2d       	mov	r25, r14
    1242:	0e 94 a8 12 	call	0x2550	; 0x2550 <delay>
    steppingcounter += (uspers % 1000);
    1246:	8f 81       	ldd	r24, Y+7	; 0x07
    1248:	98 85       	ldd	r25, Y+8	; 0x08
    124a:	a9 85       	ldd	r26, Y+9	; 0x09
    124c:	ba 85       	ldd	r27, Y+10	; 0x0a
    124e:	88 0d       	add	r24, r8
    1250:	99 1d       	adc	r25, r9
    1252:	aa 1d       	adc	r26, r10
    1254:	bb 1d       	adc	r27, r11
    1256:	8f 83       	std	Y+7, r24	; 0x07
    1258:	98 87       	std	Y+8, r25	; 0x08
    125a:	a9 87       	std	Y+9, r26	; 0x09
    125c:	ba 87       	std	Y+10, r27	; 0x0a
    if (steppingcounter >= 1000) {
    125e:	88 3e       	cpi	r24, 0xE8	; 232
    1260:	23 e0       	ldi	r18, 0x03	; 3
    1262:	92 07       	cpc	r25, r18
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	a2 07       	cpc	r26, r18
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	b2 07       	cpc	r27, r18
    126c:	d8 f2       	brcs	.-74     	; 0x1224 <_ZN10AF_Stepper4stepEjhh+0x6e>
      delay(1);
    126e:	61 e0       	ldi	r22, 0x01	; 1
    1270:	70 e0       	ldi	r23, 0x00	; 0
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 a8 12 	call	0x2550	; 0x2550 <delay>
      steppingcounter -= 1000;
    127a:	8f 81       	ldd	r24, Y+7	; 0x07
    127c:	98 85       	ldd	r25, Y+8	; 0x08
    127e:	a9 85       	ldd	r26, Y+9	; 0x09
    1280:	ba 85       	ldd	r27, Y+10	; 0x0a
    1282:	88 5e       	subi	r24, 0xE8	; 232
    1284:	93 40       	sbci	r25, 0x03	; 3
    1286:	a0 40       	sbci	r26, 0x00	; 0
    1288:	b0 40       	sbci	r27, 0x00	; 0
    128a:	8f 83       	std	Y+7, r24	; 0x07
    128c:	98 87       	std	Y+8, r25	; 0x08
    128e:	a9 87       	std	Y+9, r26	; 0x09
    1290:	ba 87       	std	Y+10, r27	; 0x0a
    1292:	c8 cf       	rjmp	.-112    	; 0x1224 <_ZN10AF_Stepper4stepEjhh+0x6e>
    }
  }
  if (style == MICROSTEP) {
    1294:	84 e0       	ldi	r24, 0x04	; 4
    1296:	f8 16       	cp	r15, r24
    1298:	81 f0       	breq	.+32     	; 0x12ba <_ZN10AF_Stepper4stepEjhh+0x104>
	delay(1);
	steppingcounter -= 1000;
      } 
    }
  }
}
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	1f 91       	pop	r17
    12a0:	0f 91       	pop	r16
    12a2:	ff 90       	pop	r15
    12a4:	ef 90       	pop	r14
    12a6:	df 90       	pop	r13
    12a8:	cf 90       	pop	r12
    12aa:	bf 90       	pop	r11
    12ac:	af 90       	pop	r10
    12ae:	9f 90       	pop	r9
    12b0:	8f 90       	pop	r8
    12b2:	7f 90       	pop	r7
    12b4:	6f 90       	pop	r6
    12b6:	5f 90       	pop	r5
    12b8:	08 95       	ret
      delay(1);
      steppingcounter -= 1000;
    }
  }
  if (style == MICROSTEP) {
    while ((ret != 0) && (ret != MICROSTEPS)) {
    12ba:	66 20       	and	r6, r6
    12bc:	71 f3       	breq	.-36     	; 0x129a <_ZN10AF_Stepper4stepEjhh+0xe4>
    12be:	20 e1       	ldi	r18, 0x10	; 16
    12c0:	62 16       	cp	r6, r18
    12c2:	19 f4       	brne	.+6      	; 0x12ca <_ZN10AF_Stepper4stepEjhh+0x114>
    12c4:	ea cf       	rjmp	.-44     	; 0x129a <_ZN10AF_Stepper4stepEjhh+0xe4>
    12c6:	00 31       	cpi	r16, 0x10	; 16
    12c8:	41 f3       	breq	.-48     	; 0x129a <_ZN10AF_Stepper4stepEjhh+0xe4>
      ret = onestep(dir, style);
    12ca:	ce 01       	movw	r24, r28
    12cc:	65 2d       	mov	r22, r5
    12ce:	44 e0       	ldi	r20, 0x04	; 4
    12d0:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZN10AF_Stepper7onestepEhh>
    12d4:	08 2f       	mov	r16, r24
      delay(uspers/1000); // in ms
    12d6:	67 2d       	mov	r22, r7
    12d8:	7c 2d       	mov	r23, r12
    12da:	8d 2d       	mov	r24, r13
    12dc:	9e 2d       	mov	r25, r14
    12de:	0e 94 a8 12 	call	0x2550	; 0x2550 <delay>
      steppingcounter += (uspers % 1000);
    12e2:	8f 81       	ldd	r24, Y+7	; 0x07
    12e4:	98 85       	ldd	r25, Y+8	; 0x08
    12e6:	a9 85       	ldd	r26, Y+9	; 0x09
    12e8:	ba 85       	ldd	r27, Y+10	; 0x0a
    12ea:	88 0d       	add	r24, r8
    12ec:	99 1d       	adc	r25, r9
    12ee:	aa 1d       	adc	r26, r10
    12f0:	bb 1d       	adc	r27, r11
    12f2:	8f 83       	std	Y+7, r24	; 0x07
    12f4:	98 87       	std	Y+8, r25	; 0x08
    12f6:	a9 87       	std	Y+9, r26	; 0x09
    12f8:	ba 87       	std	Y+10, r27	; 0x0a
      if (steppingcounter >= 1000) {
    12fa:	88 3e       	cpi	r24, 0xE8	; 232
    12fc:	23 e0       	ldi	r18, 0x03	; 3
    12fe:	92 07       	cpc	r25, r18
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	a2 07       	cpc	r26, r18
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	b2 07       	cpc	r27, r18
    1308:	90 f0       	brcs	.+36     	; 0x132e <_ZN10AF_Stepper4stepEjhh+0x178>
	delay(1);
    130a:	61 e0       	ldi	r22, 0x01	; 1
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	0e 94 a8 12 	call	0x2550	; 0x2550 <delay>
	steppingcounter -= 1000;
    1316:	8f 81       	ldd	r24, Y+7	; 0x07
    1318:	98 85       	ldd	r25, Y+8	; 0x08
    131a:	a9 85       	ldd	r26, Y+9	; 0x09
    131c:	ba 85       	ldd	r27, Y+10	; 0x0a
    131e:	88 5e       	subi	r24, 0xE8	; 232
    1320:	93 40       	sbci	r25, 0x03	; 3
    1322:	a0 40       	sbci	r26, 0x00	; 0
    1324:	b0 40       	sbci	r27, 0x00	; 0
    1326:	8f 83       	std	Y+7, r24	; 0x07
    1328:	98 87       	std	Y+8, r25	; 0x08
    132a:	a9 87       	std	Y+9, r26	; 0x09
    132c:	ba 87       	std	Y+10, r27	; 0x0a
      delay(1);
      steppingcounter -= 1000;
    }
  }
  if (style == MICROSTEP) {
    while ((ret != 0) && (ret != MICROSTEPS)) {
    132e:	00 23       	and	r16, r16
    1330:	09 f4       	brne	.+2      	; 0x1334 <_ZN10AF_Stepper4stepEjhh+0x17e>
    1332:	b3 cf       	rjmp	.-154    	; 0x129a <_ZN10AF_Stepper4stepEjhh+0xe4>
    1334:	c8 cf       	rjmp	.-112    	; 0x12c6 <_ZN10AF_Stepper4stepEjhh+0x110>
void AF_Stepper::step(uint16_t steps, uint8_t dir,  uint8_t style) {
  uint32_t uspers = usperstep;
  uint8_t ret = 0;

  if (style == INTERLEAVE) {
    uspers /= 2;
    1336:	b6 94       	lsr	r11
    1338:	a7 94       	ror	r10
    133a:	97 94       	ror	r9
    133c:	87 94       	ror	r8
    133e:	5a cf       	rjmp	.-332    	; 0x11f4 <_ZN10AF_Stepper4stepEjhh+0x3e>
  }
 else if (style == MICROSTEP) {
    uspers /= MICROSTEPS;
    1340:	54 e0       	ldi	r21, 0x04	; 4
    1342:	b6 94       	lsr	r11
    1344:	a7 94       	ror	r10
    1346:	97 94       	ror	r9
    1348:	87 94       	ror	r8
    134a:	5a 95       	dec	r21
    134c:	d1 f7       	brne	.-12     	; 0x1342 <_ZN10AF_Stepper4stepEjhh+0x18c>
    steps *= MICROSTEPS;
    134e:	02 95       	swap	r16
    1350:	12 95       	swap	r17
    1352:	10 7f       	andi	r17, 0xF0	; 240
    1354:	10 27       	eor	r17, r16
    1356:	00 7f       	andi	r16, 0xF0	; 240
    1358:	10 27       	eor	r17, r16
    135a:	4c cf       	rjmp	.-360    	; 0x11f4 <_ZN10AF_Stepper4stepEjhh+0x3e>

0000135c <_ZN10AF_Stepper7releaseEv>:
  //usperstep = 60000000 / ((uint32_t)revsteps * (uint32_t)rpm);
  steppingcounter = 0;
}

void AF_Stepper::release(void) {
  if (steppernum == 1) {
    135c:	fc 01       	movw	r30, r24
    135e:	82 81       	ldd	r24, Z+2	; 0x02
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	69 f0       	breq	.+26     	; 0x137e <_ZN10AF_Stepper7releaseEv+0x22>
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    MC.latch_tx();
  } else if (steppernum == 2) {
    1364:	82 30       	cpi	r24, 0x02	; 2
    1366:	09 f0       	breq	.+2      	; 0x136a <_ZN10AF_Stepper7releaseEv+0xe>
    1368:	08 95       	ret
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B) &
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    136a:	80 91 e7 05 	lds	r24, 0x05E7
    136e:	8e 71       	andi	r24, 0x1E	; 30
    1370:	80 93 e7 05 	sts	0x05E7, r24
    MC.latch_tx();
    1374:	86 ee       	ldi	r24, 0xE6	; 230
    1376:	95 e0       	ldi	r25, 0x05	; 5
    1378:	0e 94 67 07 	call	0xece	; 0xece <_ZN17AFMotorController8latch_txEv>
    137c:	08 95       	ret
}

void AF_Stepper::release(void) {
  if (steppernum == 1) {
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    137e:	80 91 e7 05 	lds	r24, 0x05E7
    1382:	81 7e       	andi	r24, 0xE1	; 225
    1384:	80 93 e7 05 	sts	0x05E7, r24
    MC.latch_tx();
    1388:	86 ee       	ldi	r24, 0xE6	; 230
    138a:	95 e0       	ldi	r25, 0x05	; 5
    138c:	0e 94 67 07 	call	0xece	; 0xece <_ZN17AFMotorController8latch_txEv>
    1390:	08 95       	ret

00001392 <_ZN10AF_DCMotor3runEh>:
  }
}

void AF_DCMotor::run(uint8_t cmd) {
  uint8_t a, b;
  switch (motornum) {
    1392:	fc 01       	movw	r30, r24
    1394:	80 81       	ld	r24, Z
    1396:	82 30       	cpi	r24, 0x02	; 2
    1398:	09 f4       	brne	.+2      	; 0x139c <_ZN10AF_DCMotor3runEh+0xa>
    139a:	6a c0       	rjmp	.+212    	; 0x1470 <_ZN10AF_DCMotor3runEh+0xde>
    139c:	83 30       	cpi	r24, 0x03	; 3
    139e:	30 f0       	brcs	.+12     	; 0x13ac <_ZN10AF_DCMotor3runEh+0x1a>
    13a0:	83 30       	cpi	r24, 0x03	; 3
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <_ZN10AF_DCMotor3runEh+0x14>
    13a4:	62 c0       	rjmp	.+196    	; 0x146a <_ZN10AF_DCMotor3runEh+0xd8>
    13a6:	84 30       	cpi	r24, 0x04	; 4
    13a8:	39 f1       	breq	.+78     	; 0x13f8 <_ZN10AF_DCMotor3runEh+0x66>
    13aa:	08 95       	ret
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	e9 f7       	brne	.-6      	; 0x13aa <_ZN10AF_DCMotor3runEh+0x18>
    13b0:	83 e0       	ldi	r24, 0x03	; 3
    13b2:	92 e0       	ldi	r25, 0x02	; 2
    a = MOTOR4_A; b = MOTOR4_B; break;
  default:
    return;
  }
  
  switch (cmd) {
    13b4:	62 30       	cpi	r22, 0x02	; 2
    13b6:	21 f1       	breq	.+72     	; 0x1400 <_ZN10AF_DCMotor3runEh+0x6e>
    13b8:	64 30       	cpi	r22, 0x04	; 4
    13ba:	09 f4       	brne	.+2      	; 0x13be <_ZN10AF_DCMotor3runEh+0x2c>
    13bc:	3b c0       	rjmp	.+118    	; 0x1434 <_ZN10AF_DCMotor3runEh+0xa2>
    13be:	61 30       	cpi	r22, 0x01	; 1
    13c0:	a1 f7       	brne	.-24     	; 0x13aa <_ZN10AF_DCMotor3runEh+0x18>
  case FORWARD:
    latch_state |= _BV(a);
    latch_state &= ~_BV(b); 
    13c2:	21 e0       	ldi	r18, 0x01	; 1
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	a9 01       	movw	r20, r18
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <_ZN10AF_DCMotor3runEh+0x3c>
    13ca:	44 0f       	add	r20, r20
    13cc:	55 1f       	adc	r21, r21
    13ce:	8a 95       	dec	r24
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <_ZN10AF_DCMotor3runEh+0x38>
    13d2:	84 2f       	mov	r24, r20
    13d4:	80 95       	com	r24
    13d6:	a9 01       	movw	r20, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <_ZN10AF_DCMotor3runEh+0x4c>
    13da:	44 0f       	add	r20, r20
    13dc:	55 1f       	adc	r21, r21
    13de:	9a 95       	dec	r25
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <_ZN10AF_DCMotor3runEh+0x48>
    13e2:	20 91 e7 05 	lds	r18, 0x05E7
    13e6:	24 2b       	or	r18, r20
    13e8:	82 23       	and	r24, r18
    13ea:	80 93 e7 05 	sts	0x05E7, r24
    MC.latch_tx();
    13ee:	86 ee       	ldi	r24, 0xE6	; 230
    13f0:	95 e0       	ldi	r25, 0x05	; 5
    13f2:	0e 94 67 07 	call	0xece	; 0xece <_ZN17AFMotorController8latch_txEv>
    break;
    13f6:	08 95       	ret
  case 1:
    a = MOTOR1_A; b = MOTOR1_B; break;
  case 2:
    a = MOTOR2_A; b = MOTOR2_B; break;
  case 3:
    a = MOTOR3_A; b = MOTOR3_B; break;
    13f8:	86 e0       	ldi	r24, 0x06	; 6
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    a = MOTOR4_A; b = MOTOR4_B; break;
  default:
    return;
  }
  
  switch (cmd) {
    13fc:	62 30       	cpi	r22, 0x02	; 2
    13fe:	e1 f6       	brne	.-72     	; 0x13b8 <_ZN10AF_DCMotor3runEh+0x26>
    latch_state &= ~_BV(b); 
    MC.latch_tx();
    break;
  case BACKWARD:
    latch_state &= ~_BV(a);
    latch_state |= _BV(b); 
    1400:	21 e0       	ldi	r18, 0x01	; 1
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	a9 01       	movw	r20, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <_ZN10AF_DCMotor3runEh+0x7a>
    1408:	44 0f       	add	r20, r20
    140a:	55 1f       	adc	r21, r21
    140c:	9a 95       	dec	r25
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <_ZN10AF_DCMotor3runEh+0x76>
    1410:	94 2f       	mov	r25, r20
    1412:	90 95       	com	r25
    1414:	40 91 e7 05 	lds	r20, 0x05E7
    1418:	94 23       	and	r25, r20
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <_ZN10AF_DCMotor3runEh+0x8e>
    141c:	22 0f       	add	r18, r18
    141e:	33 1f       	adc	r19, r19
    1420:	8a 95       	dec	r24
    1422:	e2 f7       	brpl	.-8      	; 0x141c <_ZN10AF_DCMotor3runEh+0x8a>
    1424:	92 2b       	or	r25, r18
    1426:	90 93 e7 05 	sts	0x05E7, r25
    MC.latch_tx();
    142a:	86 ee       	ldi	r24, 0xE6	; 230
    142c:	95 e0       	ldi	r25, 0x05	; 5
    142e:	0e 94 67 07 	call	0xece	; 0xece <_ZN17AFMotorController8latch_txEv>
    break;
    1432:	08 95       	ret
  case RELEASE:
    latch_state &= ~_BV(a);
    latch_state &= ~_BV(b); 
    1434:	21 e0       	ldi	r18, 0x01	; 1
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	a9 01       	movw	r20, r18
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <_ZN10AF_DCMotor3runEh+0xae>
    143c:	44 0f       	add	r20, r20
    143e:	55 1f       	adc	r21, r21
    1440:	9a 95       	dec	r25
    1442:	e2 f7       	brpl	.-8      	; 0x143c <_ZN10AF_DCMotor3runEh+0xaa>
    1444:	b9 01       	movw	r22, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <_ZN10AF_DCMotor3runEh+0xba>
    1448:	66 0f       	add	r22, r22
    144a:	77 1f       	adc	r23, r23
    144c:	8a 95       	dec	r24
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <_ZN10AF_DCMotor3runEh+0xb6>
    1450:	cb 01       	movw	r24, r22
    1452:	84 2b       	or	r24, r20
    1454:	80 95       	com	r24
    1456:	20 91 e7 05 	lds	r18, 0x05E7
    145a:	28 23       	and	r18, r24
    145c:	20 93 e7 05 	sts	0x05E7, r18
    MC.latch_tx();
    1460:	86 ee       	ldi	r24, 0xE6	; 230
    1462:	95 e0       	ldi	r25, 0x05	; 5
    1464:	0e 94 67 07 	call	0xece	; 0xece <_ZN17AFMotorController8latch_txEv>
    1468:	08 95       	ret
  }
}

void AF_DCMotor::run(uint8_t cmd) {
  uint8_t a, b;
  switch (motornum) {
    146a:	87 e0       	ldi	r24, 0x07	; 7
    146c:	95 e0       	ldi	r25, 0x05	; 5
  case 1:
    a = MOTOR1_A; b = MOTOR1_B; break;
  case 2:
    a = MOTOR2_A; b = MOTOR2_B; break;
  case 3:
    a = MOTOR3_A; b = MOTOR3_B; break;
    146e:	a2 cf       	rjmp	.-188    	; 0x13b4 <_ZN10AF_DCMotor3runEh+0x22>
  }
}

void AF_DCMotor::run(uint8_t cmd) {
  uint8_t a, b;
  switch (motornum) {
    1470:	84 e0       	ldi	r24, 0x04	; 4
    1472:	91 e0       	ldi	r25, 0x01	; 1
    1474:	9f cf       	rjmp	.-194    	; 0x13b4 <_ZN10AF_DCMotor3runEh+0x22>

00001476 <_ZN17AFMotorController6enableEv>:
#endif

AFMotorController::AFMotorController(void) {
}

void AFMotorController::enable(void) {
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
    147a:	ec 01       	movw	r28, r24
  LATCH_DDR |= _BV(LATCH);
  ENABLE_DDR |= _BV(ENABLE);
  CLK_DDR |= _BV(CLK);
  SER_DDR |= _BV(SER);
  */
  pinMode(MOTORLATCH, OUTPUT);
    147c:	8c e0       	ldi	r24, 0x0C	; 12
    147e:	61 e0       	ldi	r22, 0x01	; 1
    1480:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
  pinMode(MOTORENABLE, OUTPUT);
    1484:	87 e0       	ldi	r24, 0x07	; 7
    1486:	61 e0       	ldi	r22, 0x01	; 1
    1488:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
  pinMode(MOTORDATA, OUTPUT);
    148c:	88 e0       	ldi	r24, 0x08	; 8
    148e:	61 e0       	ldi	r22, 0x01	; 1
    1490:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
  pinMode(MOTORCLK, OUTPUT);
    1494:	84 e0       	ldi	r24, 0x04	; 4
    1496:	61 e0       	ldi	r22, 0x01	; 1
    1498:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>

  latch_state = 0;
    149c:	10 92 e7 05 	sts	0x05E7, r1

  latch_tx();  // "reset"
    14a0:	ce 01       	movw	r24, r28
    14a2:	0e 94 67 07 	call	0xece	; 0xece <_ZN17AFMotorController8latch_txEv>

  //ENABLE_PORT &= ~_BV(ENABLE); // enable the chip outputs!
  digitalWrite(MOTORENABLE, LOW);
    14a6:	87 e0       	ldi	r24, 0x07	; 7
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
}
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	08 95       	ret

000014b4 <_ZN10AF_StepperC1Ejh>:

/******************************************
               STEPPERS
******************************************/

AF_Stepper::AF_Stepper(uint16_t steps, uint8_t num) {
    14b4:	ef 92       	push	r14
    14b6:	ff 92       	push	r15
    14b8:	1f 93       	push	r17
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	ec 01       	movw	r28, r24
    14c0:	7b 01       	movw	r14, r22
    14c2:	14 2f       	mov	r17, r20
  MC.enable();
    14c4:	86 ee       	ldi	r24, 0xE6	; 230
    14c6:	95 e0       	ldi	r25, 0x05	; 5
    14c8:	0e 94 3b 0a 	call	0x1476	; 0x1476 <_ZN17AFMotorController6enableEv>

  revsteps = steps;
    14cc:	f9 82       	std	Y+1, r15	; 0x01
    14ce:	e8 82       	st	Y, r14
  steppernum = num;
    14d0:	1a 83       	std	Y+2, r17	; 0x02
  currentstep = 0;
    14d2:	1b 86       	std	Y+11, r1	; 0x0b

  if (steppernum == 1) {
    14d4:	11 30       	cpi	r17, 0x01	; 1
    14d6:	d1 f1       	breq	.+116    	; 0x154c <_ZN10AF_StepperC1Ejh+0x98>
    initPWM1(MOTOR12_64KHZ);
    initPWM2(MOTOR12_64KHZ);
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    14d8:	12 30       	cpi	r17, 0x02	; 2
    14da:	31 f0       	breq	.+12     	; 0x14e8 <_ZN10AF_StepperC1Ejh+0x34>
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	ff 90       	pop	r15
    14e4:	ef 90       	pop	r14
    14e6:	08 95       	ret
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B) &
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    14e8:	80 91 e7 05 	lds	r24, 0x05E7
    14ec:	8e 71       	andi	r24, 0x1E	; 30
    14ee:	80 93 e7 05 	sts	0x05E7, r24
    MC.latch_tx();
    14f2:	86 ee       	ldi	r24, 0xE6	; 230
    14f4:	95 e0       	ldi	r25, 0x05	; 5
    14f6:	0e 94 67 07 	call	0xece	; 0xece <_ZN17AFMotorController8latch_txEv>

    // enable both H bridges
    pinMode(5, OUTPUT);
    14fa:	85 e0       	ldi	r24, 0x05	; 5
    14fc:	61 e0       	ldi	r22, 0x01	; 1
    14fe:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    pinMode(6, OUTPUT);
    1502:	86 e0       	ldi	r24, 0x06	; 6
    1504:	61 e0       	ldi	r22, 0x01	; 1
    1506:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    digitalWrite(5, HIGH);
    150a:	85 e0       	ldi	r24, 0x05	; 5
    150c:	61 e0       	ldi	r22, 0x01	; 1
    150e:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
    digitalWrite(6, HIGH);
    1512:	86 e0       	ldi	r24, 0x06	; 6
    1514:	61 e0       	ldi	r22, 0x01	; 1
    1516:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    151a:	84 b5       	in	r24, 0x24	; 36
    151c:	83 68       	ori	r24, 0x83	; 131
    151e:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    1520:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    1522:	86 e0       	ldi	r24, 0x06	; 6
    1524:	61 e0       	ldi	r22, 0x01	; 1
    1526:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    152a:	84 b5       	in	r24, 0x24	; 36
    152c:	83 62       	ori	r24, 0x23	; 35
    152e:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    1530:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    1532:	85 e0       	ldi	r24, 0x05	; 5
    1534:	61 e0       	ldi	r22, 0x01	; 1
    1536:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    153a:	8f ef       	ldi	r24, 0xFF	; 255
    153c:	87 bd       	out	0x27, r24	; 39
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    153e:	88 bd       	out	0x28, r24	; 40
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	ff 90       	pop	r15
    1548:	ef 90       	pop	r14
    154a:	08 95       	ret
  steppernum = num;
  currentstep = 0;

  if (steppernum == 1) {
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    154c:	80 91 e7 05 	lds	r24, 0x05E7
    1550:	81 7e       	andi	r24, 0xE1	; 225
    1552:	80 93 e7 05 	sts	0x05E7, r24
    MC.latch_tx();
    1556:	86 ee       	ldi	r24, 0xE6	; 230
    1558:	95 e0       	ldi	r25, 0x05	; 5
    155a:	0e 94 67 07 	call	0xece	; 0xece <_ZN17AFMotorController8latch_txEv>
    
    // enable both H bridges
    pinMode(11, OUTPUT);
    155e:	8b e0       	ldi	r24, 0x0B	; 11
    1560:	61 e0       	ldi	r22, 0x01	; 1
    1562:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    pinMode(3, OUTPUT);
    1566:	83 e0       	ldi	r24, 0x03	; 3
    1568:	61 e0       	ldi	r22, 0x01	; 1
    156a:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    digitalWrite(11, HIGH);
    156e:	8b e0       	ldi	r24, 0x0B	; 11
    1570:	61 e0       	ldi	r22, 0x01	; 1
    1572:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
    digitalWrite(3, HIGH);
    1576:	83 e0       	ldi	r24, 0x03	; 3
    1578:	61 e0       	ldi	r22, 0x01	; 1
    157a:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    157e:	80 91 b0 00 	lds	r24, 0x00B0
    1582:	83 68       	ori	r24, 0x83	; 131
    1584:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1588:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    158c:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    1590:	8b e0       	ldi	r24, 0x0B	; 11
    1592:	61 e0       	ldi	r22, 0x01	; 1
    1594:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    1598:	80 91 b0 00 	lds	r24, 0x00B0
    159c:	83 62       	ori	r24, 0x23	; 35
    159e:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    15a2:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    15a6:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    15aa:	83 e0       	ldi	r24, 0x03	; 3
    15ac:	61 e0       	ldi	r22, 0x01	; 1
    15ae:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    15b2:	8f ef       	ldi	r24, 0xFF	; 255
    15b4:	80 93 b3 00 	sts	0x00B3, r24
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    15b8:	80 93 b4 00 	sts	0x00B4, r24
    15bc:	8f cf       	rjmp	.-226    	; 0x14dc <_ZN10AF_StepperC1Ejh+0x28>

000015be <_ZN10AF_DCMotorC2Ehh>:
#else
   #error "This chip is not supported!"
#endif
}

AF_DCMotor::AF_DCMotor(uint8_t num, uint8_t freq) {
    15be:	1f 93       	push	r17
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	0f 92       	push	r0
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	fc 01       	movw	r30, r24
    15cc:	14 2f       	mov	r17, r20
  motornum = num;
    15ce:	60 83       	st	Z, r22
  pwmfreq = freq;
    15d0:	41 83       	std	Z+1, r20	; 0x01

  MC.enable();
    15d2:	86 ee       	ldi	r24, 0xE6	; 230
    15d4:	95 e0       	ldi	r25, 0x05	; 5
    15d6:	69 83       	std	Y+1, r22	; 0x01
    15d8:	0e 94 3b 0a 	call	0x1476	; 0x1476 <_ZN17AFMotorController6enableEv>

  switch (num) {
    15dc:	69 81       	ldd	r22, Y+1	; 0x01
    15de:	62 30       	cpi	r22, 0x02	; 2
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <_ZN10AF_DCMotorC2Ehh+0x26>
    15e2:	50 c0       	rjmp	.+160    	; 0x1684 <_ZN10AF_DCMotorC2Ehh+0xc6>
    15e4:	63 30       	cpi	r22, 0x03	; 3
    15e6:	f0 f4       	brcc	.+60     	; 0x1624 <_ZN10AF_DCMotorC2Ehh+0x66>
    15e8:	61 30       	cpi	r22, 0x01	; 1
    15ea:	b9 f4       	brne	.+46     	; 0x161a <_ZN10AF_DCMotorC2Ehh+0x5c>
  case 1:
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    15ec:	80 91 e7 05 	lds	r24, 0x05E7
    15f0:	83 7f       	andi	r24, 0xF3	; 243
    15f2:	80 93 e7 05 	sts	0x05E7, r24
    MC.latch_tx();
    15f6:	86 ee       	ldi	r24, 0xE6	; 230
    15f8:	95 e0       	ldi	r25, 0x05	; 5
    15fa:	0e 94 67 07 	call	0xece	; 0xece <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    15fe:	80 91 b0 00 	lds	r24, 0x00B0
    1602:	83 68       	ori	r24, 0x83	; 131
    1604:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1608:	17 70       	andi	r17, 0x07	; 7
    160a:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    160e:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    1612:	8b e0       	ldi	r24, 0x0B	; 11
    1614:	61 e0       	ldi	r22, 0x01	; 1
    1616:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	1f 91       	pop	r17
    1622:	08 95       	ret
  motornum = num;
  pwmfreq = freq;

  MC.enable();

  switch (num) {
    1624:	63 30       	cpi	r22, 0x03	; 3
    1626:	c1 f0       	breq	.+48     	; 0x1658 <_ZN10AF_DCMotorC2Ehh+0x9a>
    1628:	64 30       	cpi	r22, 0x04	; 4
    162a:	b9 f7       	brne	.-18     	; 0x161a <_ZN10AF_DCMotorC2Ehh+0x5c>
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM3(freq);
    break;
  case 4:
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    162c:	80 91 e7 05 	lds	r24, 0x05E7
    1630:	8e 7b       	andi	r24, 0xBE	; 190
    1632:	80 93 e7 05 	sts	0x05E7, r24
    MC.latch_tx();
    1636:	86 ee       	ldi	r24, 0xE6	; 230
    1638:	95 e0       	ldi	r25, 0x05	; 5
    163a:	0e 94 67 07 	call	0xece	; 0xece <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    163e:	84 b5       	in	r24, 0x24	; 36
    1640:	83 62       	ori	r24, 0x23	; 35
    1642:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    1644:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    1646:	85 e0       	ldi	r24, 0x05	; 5
    1648:	61 e0       	ldi	r22, 0x01	; 1
    164a:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    164e:	0f 90       	pop	r0
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	1f 91       	pop	r17
    1656:	08 95       	ret
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM2(freq);
    break;
  case 3:
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    1658:	80 91 e7 05 	lds	r24, 0x05E7
    165c:	8f 75       	andi	r24, 0x5F	; 95
    165e:	80 93 e7 05 	sts	0x05E7, r24
    MC.latch_tx();
    1662:	86 ee       	ldi	r24, 0xE6	; 230
    1664:	95 e0       	ldi	r25, 0x05	; 5
    1666:	0e 94 67 07 	call	0xece	; 0xece <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    166a:	84 b5       	in	r24, 0x24	; 36
    166c:	83 68       	ori	r24, 0x83	; 131
    166e:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    1670:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    1672:	86 e0       	ldi	r24, 0x06	; 6
    1674:	61 e0       	ldi	r22, 0x01	; 1
    1676:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    167a:	0f 90       	pop	r0
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	1f 91       	pop	r17
    1682:	08 95       	ret
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM1(freq);
    break;
  case 2:
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    1684:	80 91 e7 05 	lds	r24, 0x05E7
    1688:	8d 7e       	andi	r24, 0xED	; 237
    168a:	80 93 e7 05 	sts	0x05E7, r24
    MC.latch_tx();
    168e:	86 ee       	ldi	r24, 0xE6	; 230
    1690:	95 e0       	ldi	r25, 0x05	; 5
    1692:	0e 94 67 07 	call	0xece	; 0xece <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    1696:	80 91 b0 00 	lds	r24, 0x00B0
    169a:	83 62       	ori	r24, 0x23	; 35
    169c:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    16a0:	17 70       	andi	r17, 0x07	; 7
    16a2:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    16a6:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    16aa:	83 e0       	ldi	r24, 0x03	; 3
    16ac:	61 e0       	ldi	r22, 0x01	; 1
    16ae:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    16b2:	0f 90       	pop	r0
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	1f 91       	pop	r17
    16ba:	08 95       	ret

000016bc <_ZN10AF_DCMotorC1Ehh>:
#else
   #error "This chip is not supported!"
#endif
}

AF_DCMotor::AF_DCMotor(uint8_t num, uint8_t freq) {
    16bc:	1f 93       	push	r17
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	0f 92       	push	r0
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	fc 01       	movw	r30, r24
    16ca:	14 2f       	mov	r17, r20
  motornum = num;
    16cc:	60 83       	st	Z, r22
  pwmfreq = freq;
    16ce:	41 83       	std	Z+1, r20	; 0x01

  MC.enable();
    16d0:	86 ee       	ldi	r24, 0xE6	; 230
    16d2:	95 e0       	ldi	r25, 0x05	; 5
    16d4:	69 83       	std	Y+1, r22	; 0x01
    16d6:	0e 94 3b 0a 	call	0x1476	; 0x1476 <_ZN17AFMotorController6enableEv>

  switch (num) {
    16da:	69 81       	ldd	r22, Y+1	; 0x01
    16dc:	62 30       	cpi	r22, 0x02	; 2
    16de:	09 f4       	brne	.+2      	; 0x16e2 <_ZN10AF_DCMotorC1Ehh+0x26>
    16e0:	50 c0       	rjmp	.+160    	; 0x1782 <_ZN10AF_DCMotorC1Ehh+0xc6>
    16e2:	63 30       	cpi	r22, 0x03	; 3
    16e4:	f0 f4       	brcc	.+60     	; 0x1722 <_ZN10AF_DCMotorC1Ehh+0x66>
    16e6:	61 30       	cpi	r22, 0x01	; 1
    16e8:	b9 f4       	brne	.+46     	; 0x1718 <_ZN10AF_DCMotorC1Ehh+0x5c>
  case 1:
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    16ea:	80 91 e7 05 	lds	r24, 0x05E7
    16ee:	83 7f       	andi	r24, 0xF3	; 243
    16f0:	80 93 e7 05 	sts	0x05E7, r24
    MC.latch_tx();
    16f4:	86 ee       	ldi	r24, 0xE6	; 230
    16f6:	95 e0       	ldi	r25, 0x05	; 5
    16f8:	0e 94 67 07 	call	0xece	; 0xece <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    16fc:	80 91 b0 00 	lds	r24, 0x00B0
    1700:	83 68       	ori	r24, 0x83	; 131
    1702:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1706:	17 70       	andi	r17, 0x07	; 7
    1708:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    170c:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    1710:	8b e0       	ldi	r24, 0x0B	; 11
    1712:	61 e0       	ldi	r22, 0x01	; 1
    1714:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1718:	0f 90       	pop	r0
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	1f 91       	pop	r17
    1720:	08 95       	ret
  motornum = num;
  pwmfreq = freq;

  MC.enable();

  switch (num) {
    1722:	63 30       	cpi	r22, 0x03	; 3
    1724:	c1 f0       	breq	.+48     	; 0x1756 <_ZN10AF_DCMotorC1Ehh+0x9a>
    1726:	64 30       	cpi	r22, 0x04	; 4
    1728:	b9 f7       	brne	.-18     	; 0x1718 <_ZN10AF_DCMotorC1Ehh+0x5c>
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM3(freq);
    break;
  case 4:
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    172a:	80 91 e7 05 	lds	r24, 0x05E7
    172e:	8e 7b       	andi	r24, 0xBE	; 190
    1730:	80 93 e7 05 	sts	0x05E7, r24
    MC.latch_tx();
    1734:	86 ee       	ldi	r24, 0xE6	; 230
    1736:	95 e0       	ldi	r25, 0x05	; 5
    1738:	0e 94 67 07 	call	0xece	; 0xece <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    173c:	84 b5       	in	r24, 0x24	; 36
    173e:	83 62       	ori	r24, 0x23	; 35
    1740:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    1742:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    1744:	85 e0       	ldi	r24, 0x05	; 5
    1746:	61 e0       	ldi	r22, 0x01	; 1
    1748:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    174c:	0f 90       	pop	r0
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	1f 91       	pop	r17
    1754:	08 95       	ret
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM2(freq);
    break;
  case 3:
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    1756:	80 91 e7 05 	lds	r24, 0x05E7
    175a:	8f 75       	andi	r24, 0x5F	; 95
    175c:	80 93 e7 05 	sts	0x05E7, r24
    MC.latch_tx();
    1760:	86 ee       	ldi	r24, 0xE6	; 230
    1762:	95 e0       	ldi	r25, 0x05	; 5
    1764:	0e 94 67 07 	call	0xece	; 0xece <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    1768:	84 b5       	in	r24, 0x24	; 36
    176a:	83 68       	ori	r24, 0x83	; 131
    176c:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    176e:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    1770:	86 e0       	ldi	r24, 0x06	; 6
    1772:	61 e0       	ldi	r22, 0x01	; 1
    1774:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1778:	0f 90       	pop	r0
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	1f 91       	pop	r17
    1780:	08 95       	ret
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM1(freq);
    break;
  case 2:
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    1782:	80 91 e7 05 	lds	r24, 0x05E7
    1786:	8d 7e       	andi	r24, 0xED	; 237
    1788:	80 93 e7 05 	sts	0x05E7, r24
    MC.latch_tx();
    178c:	86 ee       	ldi	r24, 0xE6	; 230
    178e:	95 e0       	ldi	r25, 0x05	; 5
    1790:	0e 94 67 07 	call	0xece	; 0xece <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    1794:	80 91 b0 00 	lds	r24, 0x00B0
    1798:	83 62       	ori	r24, 0x23	; 35
    179a:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    179e:	17 70       	andi	r17, 0x07	; 7
    17a0:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    17a4:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    17a8:	83 e0       	ldi	r24, 0x03	; 3
    17aa:	61 e0       	ldi	r22, 0x01	; 1
    17ac:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    17b0:	0f 90       	pop	r0
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	1f 91       	pop	r17
    17b8:	08 95       	ret

000017ba <_ZN10AF_StepperC2Ejh>:

/******************************************
               STEPPERS
******************************************/

AF_Stepper::AF_Stepper(uint16_t steps, uint8_t num) {
    17ba:	ef 92       	push	r14
    17bc:	ff 92       	push	r15
    17be:	1f 93       	push	r17
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	ec 01       	movw	r28, r24
    17c6:	7b 01       	movw	r14, r22
    17c8:	14 2f       	mov	r17, r20
  MC.enable();
    17ca:	86 ee       	ldi	r24, 0xE6	; 230
    17cc:	95 e0       	ldi	r25, 0x05	; 5
    17ce:	0e 94 3b 0a 	call	0x1476	; 0x1476 <_ZN17AFMotorController6enableEv>

  revsteps = steps;
    17d2:	f9 82       	std	Y+1, r15	; 0x01
    17d4:	e8 82       	st	Y, r14
  steppernum = num;
    17d6:	1a 83       	std	Y+2, r17	; 0x02
  currentstep = 0;
    17d8:	1b 86       	std	Y+11, r1	; 0x0b

  if (steppernum == 1) {
    17da:	11 30       	cpi	r17, 0x01	; 1
    17dc:	d1 f1       	breq	.+116    	; 0x1852 <_ZN10AF_StepperC2Ejh+0x98>
    initPWM1(MOTOR12_64KHZ);
    initPWM2(MOTOR12_64KHZ);
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    17de:	12 30       	cpi	r17, 0x02	; 2
    17e0:	31 f0       	breq	.+12     	; 0x17ee <_ZN10AF_StepperC2Ejh+0x34>
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	1f 91       	pop	r17
    17e8:	ff 90       	pop	r15
    17ea:	ef 90       	pop	r14
    17ec:	08 95       	ret
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B) &
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    17ee:	80 91 e7 05 	lds	r24, 0x05E7
    17f2:	8e 71       	andi	r24, 0x1E	; 30
    17f4:	80 93 e7 05 	sts	0x05E7, r24
    MC.latch_tx();
    17f8:	86 ee       	ldi	r24, 0xE6	; 230
    17fa:	95 e0       	ldi	r25, 0x05	; 5
    17fc:	0e 94 67 07 	call	0xece	; 0xece <_ZN17AFMotorController8latch_txEv>

    // enable both H bridges
    pinMode(5, OUTPUT);
    1800:	85 e0       	ldi	r24, 0x05	; 5
    1802:	61 e0       	ldi	r22, 0x01	; 1
    1804:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    pinMode(6, OUTPUT);
    1808:	86 e0       	ldi	r24, 0x06	; 6
    180a:	61 e0       	ldi	r22, 0x01	; 1
    180c:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    digitalWrite(5, HIGH);
    1810:	85 e0       	ldi	r24, 0x05	; 5
    1812:	61 e0       	ldi	r22, 0x01	; 1
    1814:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
    digitalWrite(6, HIGH);
    1818:	86 e0       	ldi	r24, 0x06	; 6
    181a:	61 e0       	ldi	r22, 0x01	; 1
    181c:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    1820:	84 b5       	in	r24, 0x24	; 36
    1822:	83 68       	ori	r24, 0x83	; 131
    1824:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    1826:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    1828:	86 e0       	ldi	r24, 0x06	; 6
    182a:	61 e0       	ldi	r22, 0x01	; 1
    182c:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    1830:	84 b5       	in	r24, 0x24	; 36
    1832:	83 62       	ori	r24, 0x23	; 35
    1834:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    1836:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    1838:	85 e0       	ldi	r24, 0x05	; 5
    183a:	61 e0       	ldi	r22, 0x01	; 1
    183c:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    1840:	8f ef       	ldi	r24, 0xFF	; 255
    1842:	87 bd       	out	0x27, r24	; 39
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    1844:	88 bd       	out	0x28, r24	; 40
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	1f 91       	pop	r17
    184c:	ff 90       	pop	r15
    184e:	ef 90       	pop	r14
    1850:	08 95       	ret
  steppernum = num;
  currentstep = 0;

  if (steppernum == 1) {
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    1852:	80 91 e7 05 	lds	r24, 0x05E7
    1856:	81 7e       	andi	r24, 0xE1	; 225
    1858:	80 93 e7 05 	sts	0x05E7, r24
    MC.latch_tx();
    185c:	86 ee       	ldi	r24, 0xE6	; 230
    185e:	95 e0       	ldi	r25, 0x05	; 5
    1860:	0e 94 67 07 	call	0xece	; 0xece <_ZN17AFMotorController8latch_txEv>
    
    // enable both H bridges
    pinMode(11, OUTPUT);
    1864:	8b e0       	ldi	r24, 0x0B	; 11
    1866:	61 e0       	ldi	r22, 0x01	; 1
    1868:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    pinMode(3, OUTPUT);
    186c:	83 e0       	ldi	r24, 0x03	; 3
    186e:	61 e0       	ldi	r22, 0x01	; 1
    1870:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    digitalWrite(11, HIGH);
    1874:	8b e0       	ldi	r24, 0x0B	; 11
    1876:	61 e0       	ldi	r22, 0x01	; 1
    1878:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
    digitalWrite(3, HIGH);
    187c:	83 e0       	ldi	r24, 0x03	; 3
    187e:	61 e0       	ldi	r22, 0x01	; 1
    1880:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    1884:	80 91 b0 00 	lds	r24, 0x00B0
    1888:	83 68       	ori	r24, 0x83	; 131
    188a:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    188e:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    1892:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    1896:	8b e0       	ldi	r24, 0x0B	; 11
    1898:	61 e0       	ldi	r22, 0x01	; 1
    189a:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    189e:	80 91 b0 00 	lds	r24, 0x00B0
    18a2:	83 62       	ori	r24, 0x23	; 35
    18a4:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    18a8:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    18ac:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    18b0:	83 e0       	ldi	r24, 0x03	; 3
    18b2:	61 e0       	ldi	r22, 0x01	; 1
    18b4:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    18b8:	8f ef       	ldi	r24, 0xFF	; 255
    18ba:	80 93 b3 00 	sts	0x00B3, r24
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    18be:	80 93 b4 00 	sts	0x00B4, r24
    18c2:	8f cf       	rjmp	.-226    	; 0x17e2 <_ZN10AF_StepperC2Ejh+0x28>

000018c4 <__vector_18>:
  }
}

#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
  {
    18c4:	1f 92       	push	r1
    18c6:	0f 92       	push	r0
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	0f 92       	push	r0
    18cc:	11 24       	eor	r1, r1
    18ce:	2f 93       	push	r18
    18d0:	3f 93       	push	r19
    18d2:	4f 93       	push	r20
    18d4:	5f 93       	push	r21
    18d6:	6f 93       	push	r22
    18d8:	8f 93       	push	r24
    18da:	9f 93       	push	r25
    18dc:	ef 93       	push	r30
    18de:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    18e0:	60 91 c6 00 	lds	r22, 0x00C6
  ring_buffer rx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *rx_buffer)
{
  int i = (unsigned int)(rx_buffer->head + 1) % RX_BUFFER_SIZE;
    18e4:	20 91 68 06 	lds	r18, 0x0668
    18e8:	30 91 69 06 	lds	r19, 0x0669
    18ec:	c9 01       	movw	r24, r18
    18ee:	01 96       	adiw	r24, 0x01	; 1
    18f0:	8f 77       	andi	r24, 0x7F	; 127
    18f2:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != rx_buffer->tail) {
    18f4:	40 91 6a 06 	lds	r20, 0x066A
    18f8:	50 91 6b 06 	lds	r21, 0x066B
    18fc:	84 17       	cp	r24, r20
    18fe:	95 07       	cpc	r25, r21
    1900:	41 f0       	breq	.+16     	; 0x1912 <__vector_18+0x4e>
    rx_buffer->buffer[rx_buffer->head] = c;
    1902:	28 51       	subi	r18, 0x18	; 24
    1904:	3a 4f       	sbci	r19, 0xFA	; 250
    1906:	f9 01       	movw	r30, r18
    1908:	60 83       	st	Z, r22
    rx_buffer->head = i;
    190a:	90 93 69 06 	sts	0x0669, r25
    190e:	80 93 68 06 	sts	0x0668, r24
    unsigned char c  =  UDR;  //  atmega8535
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    1912:	ff 91       	pop	r31
    1914:	ef 91       	pop	r30
    1916:	9f 91       	pop	r25
    1918:	8f 91       	pop	r24
    191a:	6f 91       	pop	r22
    191c:	5f 91       	pop	r21
    191e:	4f 91       	pop	r20
    1920:	3f 91       	pop	r19
    1922:	2f 91       	pop	r18
    1924:	0f 90       	pop	r0
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	0f 90       	pop	r0
    192a:	1f 90       	pop	r1
    192c:	18 95       	reti

0000192e <_ZN14HardwareSerialC2EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:



// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
    192e:	8f 92       	push	r8
    1930:	af 92       	push	r10
    1932:	cf 92       	push	r12
    1934:	df 92       	push	r13
    1936:	ef 92       	push	r14
    1938:	ff 92       	push	r15
    193a:	0f 93       	push	r16
    193c:	1f 93       	push	r17
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	fc 01       	movw	r30, r24
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    1948:	83 e4       	ldi	r24, 0x43	; 67
    194a:	91 e0       	ldi	r25, 0x01	; 1
    194c:	91 83       	std	Z+1, r25	; 0x01
    194e:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    1950:	73 83       	std	Z+3, r23	; 0x03
    1952:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
    1954:	55 83       	std	Z+5, r21	; 0x05
    1956:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
    1958:	37 83       	std	Z+7, r19	; 0x07
    195a:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
    195c:	11 87       	std	Z+9, r17	; 0x09
    195e:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
    1960:	f3 86       	std	Z+11, r15	; 0x0b
    1962:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
    1964:	d5 86       	std	Z+13, r13	; 0x0d
    1966:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
    1968:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
    196a:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
    196c:	8d 85       	ldd	r24, Y+13	; 0x0d
    196e:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
    1970:	8e 85       	ldd	r24, Y+14	; 0x0e
    1972:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
    1974:	8f 85       	ldd	r24, Y+15	; 0x0f
    1976:	82 8b       	std	Z+18, r24	; 0x12
}
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	1f 91       	pop	r17
    197e:	0f 91       	pop	r16
    1980:	ff 90       	pop	r15
    1982:	ef 90       	pop	r14
    1984:	df 90       	pop	r13
    1986:	cf 90       	pop	r12
    1988:	af 90       	pop	r10
    198a:	8f 90       	pop	r8
    198c:	08 95       	ret

0000198e <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:



// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
    198e:	8f 92       	push	r8
    1990:	af 92       	push	r10
    1992:	cf 92       	push	r12
    1994:	df 92       	push	r13
    1996:	ef 92       	push	r14
    1998:	ff 92       	push	r15
    199a:	0f 93       	push	r16
    199c:	1f 93       	push	r17
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	fc 01       	movw	r30, r24
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    19a8:	83 e4       	ldi	r24, 0x43	; 67
    19aa:	91 e0       	ldi	r25, 0x01	; 1
    19ac:	91 83       	std	Z+1, r25	; 0x01
    19ae:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    19b0:	73 83       	std	Z+3, r23	; 0x03
    19b2:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
    19b4:	55 83       	std	Z+5, r21	; 0x05
    19b6:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
    19b8:	37 83       	std	Z+7, r19	; 0x07
    19ba:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
    19bc:	11 87       	std	Z+9, r17	; 0x09
    19be:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
    19c0:	f3 86       	std	Z+11, r15	; 0x0b
    19c2:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
    19c4:	d5 86       	std	Z+13, r13	; 0x0d
    19c6:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
    19c8:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
    19ca:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
    19cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ce:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
    19d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    19d2:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
    19d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d6:	82 8b       	std	Z+18, r24	; 0x12
}
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	1f 91       	pop	r17
    19de:	0f 91       	pop	r16
    19e0:	ff 90       	pop	r15
    19e2:	ef 90       	pop	r14
    19e4:	df 90       	pop	r13
    19e6:	cf 90       	pop	r12
    19e8:	af 90       	pop	r10
    19ea:	8f 90       	pop	r8
    19ec:	08 95       	ret

000019ee <_ZN14HardwareSerial5beginEl>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(long baud)
{
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	ec 01       	movw	r28, r24
    19f4:	9a 01       	movw	r18, r20
    19f6:	ab 01       	movw	r20, r22

#if F_CPU == 16000000UL
  // hardcoded exception for compatibility with the bootloader shipped
  // with the Duemilanove and previous boards and the firmware on the 8U2
  // on the Uno and Mega 2560.
  if (baud == 57600) {
    19f8:	20 30       	cpi	r18, 0x00	; 0
    19fa:	81 ee       	ldi	r24, 0xE1	; 225
    19fc:	38 07       	cpc	r19, r24
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	48 07       	cpc	r20, r24
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	58 07       	cpc	r21, r24
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <_ZN14HardwareSerial5beginEl+0x1c>
    1a08:	48 c0       	rjmp	.+144    	; 0x1a9a <_ZN14HardwareSerial5beginEl+0xac>
    use_u2x = false;
  }
#endif
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    1a0a:	e8 85       	ldd	r30, Y+8	; 0x08
    1a0c:	f9 85       	ldd	r31, Y+9	; 0x09
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0a 88       	ldd	r0, Y+18	; 0x12
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <_ZN14HardwareSerial5beginEl+0x2c>
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	0a 94       	dec	r0
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <_ZN14HardwareSerial5beginEl+0x28>
    1a1e:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	79 e0       	ldi	r23, 0x09	; 9
    1a24:	8d e3       	ldi	r24, 0x3D	; 61
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__udivmodsi4>
    1a2c:	21 50       	subi	r18, 0x01	; 1
    1a2e:	30 40       	sbci	r19, 0x00	; 0
    1a30:	40 40       	sbci	r20, 0x00	; 0
    1a32:	50 40       	sbci	r21, 0x00	; 0
    1a34:	56 95       	lsr	r21
    1a36:	47 95       	ror	r20
    1a38:	37 95       	ror	r19
    1a3a:	27 95       	ror	r18
    1a3c:	83 2f       	mov	r24, r19
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1a3e:	ec 81       	ldd	r30, Y+4	; 0x04
    1a40:	fd 81       	ldd	r31, Y+5	; 0x05
    1a42:	80 83       	st	Z, r24
  *_ubrrl = baud_setting;
    1a44:	ee 81       	ldd	r30, Y+6	; 0x06
    1a46:	ff 81       	ldd	r31, Y+7	; 0x07
    1a48:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    1a4a:	ea 85       	ldd	r30, Y+10	; 0x0a
    1a4c:	fb 85       	ldd	r31, Y+11	; 0x0b
    1a4e:	80 81       	ld	r24, Z
    1a50:	21 e0       	ldi	r18, 0x01	; 1
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	a9 01       	movw	r20, r18
    1a56:	0e 84       	ldd	r0, Y+14	; 0x0e
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <_ZN14HardwareSerial5beginEl+0x70>
    1a5a:	44 0f       	add	r20, r20
    1a5c:	55 1f       	adc	r21, r21
    1a5e:	0a 94       	dec	r0
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <_ZN14HardwareSerial5beginEl+0x6c>
    1a62:	84 2b       	or	r24, r20
    1a64:	80 83       	st	Z, r24
  sbi(*_ucsrb, _txen);
    1a66:	ea 85       	ldd	r30, Y+10	; 0x0a
    1a68:	fb 85       	ldd	r31, Y+11	; 0x0b
    1a6a:	80 81       	ld	r24, Z
    1a6c:	a9 01       	movw	r20, r18
    1a6e:	0f 84       	ldd	r0, Y+15	; 0x0f
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <_ZN14HardwareSerial5beginEl+0x88>
    1a72:	44 0f       	add	r20, r20
    1a74:	55 1f       	adc	r21, r21
    1a76:	0a 94       	dec	r0
    1a78:	e2 f7       	brpl	.-8      	; 0x1a72 <_ZN14HardwareSerial5beginEl+0x84>
    1a7a:	84 2b       	or	r24, r20
    1a7c:	80 83       	st	Z, r24
  sbi(*_ucsrb, _rxcie);
    1a7e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1a80:	fb 85       	ldd	r31, Y+11	; 0x0b
    1a82:	80 81       	ld	r24, Z
    1a84:	08 88       	ldd	r0, Y+16	; 0x10
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <_ZN14HardwareSerial5beginEl+0x9e>
    1a88:	22 0f       	add	r18, r18
    1a8a:	33 1f       	adc	r19, r19
    1a8c:	0a 94       	dec	r0
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <_ZN14HardwareSerial5beginEl+0x9a>
    1a90:	82 2b       	or	r24, r18
    1a92:	80 83       	st	Z, r24
}
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	08 95       	ret
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    1a9a:	e8 85       	ldd	r30, Y+8	; 0x08
    1a9c:	f9 85       	ldd	r31, Y+9	; 0x09
    1a9e:	10 82       	st	Z, r1
    1aa0:	20 e1       	ldi	r18, 0x10	; 16
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	cc cf       	rjmp	.-104    	; 0x1a3e <_ZN14HardwareSerial5beginEl+0x50>

00001aa6 <_ZN14HardwareSerial3endEv>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
}

void HardwareSerial::end()
{
    1aa6:	fc 01       	movw	r30, r24
  cbi(*_ucsrb, _rxen);
    1aa8:	a2 85       	ldd	r26, Z+10	; 0x0a
    1aaa:	b3 85       	ldd	r27, Z+11	; 0x0b
    1aac:	3c 91       	ld	r19, X
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	ac 01       	movw	r20, r24
    1ab4:	06 84       	ldd	r0, Z+14	; 0x0e
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <_ZN14HardwareSerial3endEv+0x16>
    1ab8:	44 0f       	add	r20, r20
    1aba:	55 1f       	adc	r21, r21
    1abc:	0a 94       	dec	r0
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <_ZN14HardwareSerial3endEv+0x12>
    1ac0:	24 2f       	mov	r18, r20
    1ac2:	20 95       	com	r18
    1ac4:	23 23       	and	r18, r19
    1ac6:	2c 93       	st	X, r18
  cbi(*_ucsrb, _txen);
    1ac8:	a2 85       	ldd	r26, Z+10	; 0x0a
    1aca:	b3 85       	ldd	r27, Z+11	; 0x0b
    1acc:	3c 91       	ld	r19, X
    1ace:	ac 01       	movw	r20, r24
    1ad0:	07 84       	ldd	r0, Z+15	; 0x0f
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <_ZN14HardwareSerial3endEv+0x32>
    1ad4:	44 0f       	add	r20, r20
    1ad6:	55 1f       	adc	r21, r21
    1ad8:	0a 94       	dec	r0
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <_ZN14HardwareSerial3endEv+0x2e>
    1adc:	24 2f       	mov	r18, r20
    1ade:	20 95       	com	r18
    1ae0:	23 23       	and	r18, r19
    1ae2:	2c 93       	st	X, r18
  cbi(*_ucsrb, _rxcie);  
    1ae4:	a2 85       	ldd	r26, Z+10	; 0x0a
    1ae6:	b3 85       	ldd	r27, Z+11	; 0x0b
    1ae8:	2c 91       	ld	r18, X
    1aea:	00 88       	ldd	r0, Z+16	; 0x10
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <_ZN14HardwareSerial3endEv+0x4c>
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	0a 94       	dec	r0
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <_ZN14HardwareSerial3endEv+0x48>
    1af6:	80 95       	com	r24
    1af8:	82 23       	and	r24, r18
    1afa:	8c 93       	st	X, r24
}
    1afc:	08 95       	ret

00001afe <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
    1afe:	fc 01       	movw	r30, r24
    1b00:	82 81       	ldd	r24, Z+2	; 0x02
    1b02:	93 81       	ldd	r25, Z+3	; 0x03
    1b04:	fc 01       	movw	r30, r24
    1b06:	e0 58       	subi	r30, 0x80	; 128
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	20 81       	ld	r18, Z
    1b0c:	31 81       	ldd	r19, Z+1	; 0x01
    1b0e:	8e 57       	subi	r24, 0x7E	; 126
    1b10:	9f 4f       	sbci	r25, 0xFF	; 255
    1b12:	fc 01       	movw	r30, r24
    1b14:	80 81       	ld	r24, Z
    1b16:	91 81       	ldd	r25, Z+1	; 0x01
    1b18:	28 1b       	sub	r18, r24
    1b1a:	39 0b       	sbc	r19, r25
    1b1c:	2f 77       	andi	r18, 0x7F	; 127
    1b1e:	30 70       	andi	r19, 0x00	; 0
}
    1b20:	c9 01       	movw	r24, r18
    1b22:	08 95       	ret

00001b24 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    1b24:	fc 01       	movw	r30, r24
    1b26:	82 81       	ldd	r24, Z+2	; 0x02
    1b28:	93 81       	ldd	r25, Z+3	; 0x03
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	ee 57       	subi	r30, 0x7E	; 126
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	20 81       	ld	r18, Z
    1b32:	31 81       	ldd	r19, Z+1	; 0x01
    1b34:	fc 01       	movw	r30, r24
    1b36:	e0 58       	subi	r30, 0x80	; 128
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	40 81       	ld	r20, Z
    1b3c:	51 81       	ldd	r21, Z+1	; 0x01
    1b3e:	42 17       	cp	r20, r18
    1b40:	53 07       	cpc	r21, r19
    1b42:	39 f0       	breq	.+14     	; 0x1b52 <_ZN14HardwareSerial4peekEv+0x2e>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    1b44:	82 0f       	add	r24, r18
    1b46:	93 1f       	adc	r25, r19
    1b48:	fc 01       	movw	r30, r24
    1b4a:	20 81       	ld	r18, Z
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1b4e:	c9 01       	movw	r24, r18
    1b50:	08 95       	ret
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    1b52:	2f ef       	ldi	r18, 0xFF	; 255
    1b54:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    1b56:	c9 01       	movw	r24, r18
    1b58:	08 95       	ret

00001b5a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	12 96       	adiw	r26, 0x02	; 2
    1b5e:	8d 91       	ld	r24, X+
    1b60:	9c 91       	ld	r25, X
    1b62:	13 97       	sbiw	r26, 0x03	; 3
    1b64:	fc 01       	movw	r30, r24
    1b66:	ee 57       	subi	r30, 0x7E	; 126
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	40 81       	ld	r20, Z
    1b6c:	51 81       	ldd	r21, Z+1	; 0x01
    1b6e:	dc 01       	movw	r26, r24
    1b70:	a0 58       	subi	r26, 0x80	; 128
    1b72:	bf 4f       	sbci	r27, 0xFF	; 255
    1b74:	2d 91       	ld	r18, X+
    1b76:	3c 91       	ld	r19, X
    1b78:	11 97       	sbiw	r26, 0x01	; 1
    1b7a:	24 17       	cp	r18, r20
    1b7c:	35 07       	cpc	r19, r21
    1b7e:	69 f0       	breq	.+26     	; 0x1b9a <_ZN14HardwareSerial4readEv+0x40>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1b80:	84 0f       	add	r24, r20
    1b82:	95 1f       	adc	r25, r21
    1b84:	dc 01       	movw	r26, r24
    1b86:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
    1b88:	4f 5f       	subi	r20, 0xFF	; 255
    1b8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b8c:	4f 77       	andi	r20, 0x7F	; 127
    1b8e:	50 70       	andi	r21, 0x00	; 0
    1b90:	51 83       	std	Z+1, r21	; 0x01
    1b92:	40 83       	st	Z, r20
    return c;
    1b94:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1b96:	c9 01       	movw	r24, r18
    1b98:	08 95       	ret
}

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    1b9a:	2f ef       	ldi	r18, 0xFF	; 255
    1b9c:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
    return c;
  }
}
    1b9e:	c9 01       	movw	r24, r18
    1ba0:	08 95       	ret

00001ba2 <_ZN14HardwareSerial5flushEv>:
  // don't reverse this or there may be problems if the RX interrupt
  // occurs after reading the value of rx_buffer_head but before writing
  // the value to rx_buffer_tail; the previous value of rx_buffer_head
  // may be written to rx_buffer_tail, making it appear as if the buffer
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	12 96       	adiw	r26, 0x02	; 2
    1ba6:	8d 91       	ld	r24, X+
    1ba8:	9c 91       	ld	r25, X
    1baa:	13 97       	sbiw	r26, 0x03	; 3
    1bac:	fc 01       	movw	r30, r24
    1bae:	e0 58       	subi	r30, 0x80	; 128
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	8e 57       	subi	r24, 0x7E	; 126
    1bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	8d 91       	ld	r24, X+
    1bba:	9c 91       	ld	r25, X
    1bbc:	11 97       	sbiw	r26, 0x01	; 1
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	80 83       	st	Z, r24
}
    1bc2:	08 95       	ret

00001bc4 <_ZN14HardwareSerial5writeEh>:

void HardwareSerial::write(uint8_t c)
{
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	a0 85       	ldd	r26, Z+8	; 0x08
    1bc8:	b1 85       	ldd	r27, Z+9	; 0x09
    1bca:	21 89       	ldd	r18, Z+17	; 0x11
  while (!((*_ucsra) & (1 << _udre)))
    1bcc:	8c 91       	ld	r24, X
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	02 2e       	mov	r0, r18
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <_ZN14HardwareSerial5writeEh+0x14>
    1bd4:	95 95       	asr	r25
    1bd6:	87 95       	ror	r24
    1bd8:	0a 94       	dec	r0
    1bda:	e2 f7       	brpl	.-8      	; 0x1bd4 <_ZN14HardwareSerial5writeEh+0x10>
    1bdc:	80 ff       	sbrs	r24, 0
    1bde:	f6 cf       	rjmp	.-20     	; 0x1bcc <_ZN14HardwareSerial5writeEh+0x8>
    ;

  *_udr = c;
    1be0:	04 84       	ldd	r0, Z+12	; 0x0c
    1be2:	f5 85       	ldd	r31, Z+13	; 0x0d
    1be4:	e0 2d       	mov	r30, r0
    1be6:	60 83       	st	Z, r22
}
    1be8:	08 95       	ret

00001bea <_GLOBAL__I_rx_buffer>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    1bea:	83 e4       	ldi	r24, 0x43	; 67
    1bec:	91 e0       	ldi	r25, 0x01	; 1
    1bee:	90 93 6d 06 	sts	0x066D, r25
    1bf2:	80 93 6c 06 	sts	0x066C, r24
{
  _rx_buffer = rx_buffer;
    1bf6:	88 ee       	ldi	r24, 0xE8	; 232
    1bf8:	95 e0       	ldi	r25, 0x05	; 5
    1bfa:	90 93 6f 06 	sts	0x066F, r25
    1bfe:	80 93 6e 06 	sts	0x066E, r24
  _ubrrh = ubrrh;
    1c02:	85 ec       	ldi	r24, 0xC5	; 197
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	90 93 71 06 	sts	0x0671, r25
    1c0a:	80 93 70 06 	sts	0x0670, r24
  _ubrrl = ubrrl;
    1c0e:	84 ec       	ldi	r24, 0xC4	; 196
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	90 93 73 06 	sts	0x0673, r25
    1c16:	80 93 72 06 	sts	0x0672, r24
  _ucsra = ucsra;
    1c1a:	80 ec       	ldi	r24, 0xC0	; 192
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	90 93 75 06 	sts	0x0675, r25
    1c22:	80 93 74 06 	sts	0x0674, r24
  _ucsrb = ucsrb;
    1c26:	81 ec       	ldi	r24, 0xC1	; 193
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	90 93 77 06 	sts	0x0677, r25
    1c2e:	80 93 76 06 	sts	0x0676, r24
  _udr = udr;
    1c32:	86 ec       	ldi	r24, 0xC6	; 198
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	90 93 79 06 	sts	0x0679, r25
    1c3a:	80 93 78 06 	sts	0x0678, r24
  _rxen = rxen;
    1c3e:	84 e0       	ldi	r24, 0x04	; 4
    1c40:	80 93 7a 06 	sts	0x067A, r24
  _txen = txen;
    1c44:	83 e0       	ldi	r24, 0x03	; 3
    1c46:	80 93 7b 06 	sts	0x067B, r24
  _rxcie = rxcie;
    1c4a:	87 e0       	ldi	r24, 0x07	; 7
    1c4c:	80 93 7c 06 	sts	0x067C, r24
  _udre = udre;
    1c50:	85 e0       	ldi	r24, 0x05	; 5
    1c52:	80 93 7d 06 	sts	0x067D, r24
  _u2x = u2x;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	80 93 7e 06 	sts	0x067E, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
    1c5c:	08 95       	ret

00001c5e <_ZN5Print5writeEPKc>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
    1c5e:	0f 93       	push	r16
    1c60:	1f 93       	push	r17
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	ec 01       	movw	r28, r24
    1c68:	8b 01       	movw	r16, r22
  while (*str)
    1c6a:	fb 01       	movw	r30, r22
    1c6c:	60 81       	ld	r22, Z
    1c6e:	66 23       	and	r22, r22
    1c70:	69 f0       	breq	.+26     	; 0x1c8c <_ZN5Print5writeEPKc+0x2e>
    write(*str++);
    1c72:	0f 5f       	subi	r16, 0xFF	; 255
    1c74:	1f 4f       	sbci	r17, 0xFF	; 255
    1c76:	e8 81       	ld	r30, Y
    1c78:	f9 81       	ldd	r31, Y+1	; 0x01
    1c7a:	01 90       	ld	r0, Z+
    1c7c:	f0 81       	ld	r31, Z
    1c7e:	e0 2d       	mov	r30, r0
    1c80:	ce 01       	movw	r24, r28
    1c82:	09 95       	icall
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
  while (*str)
    1c84:	f8 01       	movw	r30, r16
    1c86:	60 81       	ld	r22, Z
    1c88:	66 23       	and	r22, r22
    1c8a:	99 f7       	brne	.-26     	; 0x1c72 <_ZN5Print5writeEPKc+0x14>
    write(*str++);
}
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	1f 91       	pop	r17
    1c92:	0f 91       	pop	r16
    1c94:	08 95       	ret

00001c96 <_ZN5Print5writeEPKhj>:

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
    1c96:	ef 92       	push	r14
    1c98:	ff 92       	push	r15
    1c9a:	0f 93       	push	r16
    1c9c:	1f 93       	push	r17
    1c9e:	cf 93       	push	r28
    1ca0:	df 93       	push	r29
    1ca2:	ec 01       	movw	r28, r24
    1ca4:	8b 01       	movw	r16, r22
    1ca6:	7a 01       	movw	r14, r20
  while (size--)
    1ca8:	41 15       	cp	r20, r1
    1caa:	51 05       	cpc	r21, r1
    1cac:	81 f0       	breq	.+32     	; 0x1cce <_ZN5Print5writeEPKhj+0x38>
    write(*buffer++);
    1cae:	f8 01       	movw	r30, r16
    1cb0:	61 91       	ld	r22, Z+
    1cb2:	8f 01       	movw	r16, r30
    1cb4:	e8 81       	ld	r30, Y
    1cb6:	f9 81       	ldd	r31, Y+1	; 0x01
    1cb8:	01 90       	ld	r0, Z+
    1cba:	f0 81       	ld	r31, Z
    1cbc:	e0 2d       	mov	r30, r0
    1cbe:	ce 01       	movw	r24, r28
    1cc0:	09 95       	icall
    1cc2:	08 94       	sec
    1cc4:	e1 08       	sbc	r14, r1
    1cc6:	f1 08       	sbc	r15, r1
}

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
  while (size--)
    1cc8:	e1 14       	cp	r14, r1
    1cca:	f1 04       	cpc	r15, r1
    1ccc:	81 f7       	brne	.-32     	; 0x1cae <_ZN5Print5writeEPKhj+0x18>
    write(*buffer++);
}
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	1f 91       	pop	r17
    1cd4:	0f 91       	pop	r16
    1cd6:	ff 90       	pop	r15
    1cd8:	ef 90       	pop	r14
    1cda:	08 95       	ret

00001cdc <_ZN5Print5printEPKc>:
  }
}

void Print::print(const char str[])
{
  write(str);
    1cdc:	dc 01       	movw	r26, r24
    1cde:	ed 91       	ld	r30, X+
    1ce0:	fc 91       	ld	r31, X
    1ce2:	02 80       	ldd	r0, Z+2	; 0x02
    1ce4:	f3 81       	ldd	r31, Z+3	; 0x03
    1ce6:	e0 2d       	mov	r30, r0
    1ce8:	09 95       	icall
}
    1cea:	08 95       	ret

00001cec <_ZN5Print5printERK6String>:
  while (size--)
    write(*buffer++);
}

void Print::print(const String &s)
{
    1cec:	cf 92       	push	r12
    1cee:	df 92       	push	r13
    1cf0:	ef 92       	push	r14
    1cf2:	ff 92       	push	r15
    1cf4:	0f 93       	push	r16
    1cf6:	1f 93       	push	r17
    1cf8:	cf 93       	push	r28
    1cfa:	df 93       	push	r29
    1cfc:	7c 01       	movw	r14, r24
    1cfe:	8b 01       	movw	r16, r22
  for (int i = 0; i < s.length(); i++) {
    1d00:	db 01       	movw	r26, r22
    1d02:	14 96       	adiw	r26, 0x04	; 4
    1d04:	8d 91       	ld	r24, X+
    1d06:	9c 91       	ld	r25, X
    1d08:	15 97       	sbiw	r26, 0x05	; 5
    1d0a:	00 97       	sbiw	r24, 0x00	; 0
    1d0c:	c1 f0       	breq	.+48     	; 0x1d3e <_ZN5Print5printERK6String+0x52>
    1d0e:	60 e0       	ldi	r22, 0x00	; 0
    1d10:	70 e0       	ldi	r23, 0x00	; 0
    1d12:	c0 e0       	ldi	r28, 0x00	; 0
    1d14:	d0 e0       	ldi	r29, 0x00	; 0
    write(s[i]);
    1d16:	d7 01       	movw	r26, r14
    1d18:	ed 91       	ld	r30, X+
    1d1a:	fc 91       	ld	r31, X
    1d1c:	c0 80       	ld	r12, Z
    1d1e:	d1 80       	ldd	r13, Z+1	; 0x01
    1d20:	c8 01       	movw	r24, r16
    1d22:	0e 94 a3 14 	call	0x2946	; 0x2946 <_ZNK6StringixEj>
    1d26:	68 2f       	mov	r22, r24
    1d28:	c7 01       	movw	r24, r14
    1d2a:	f6 01       	movw	r30, r12
    1d2c:	09 95       	icall
    write(*buffer++);
}

void Print::print(const String &s)
{
  for (int i = 0; i < s.length(); i++) {
    1d2e:	21 96       	adiw	r28, 0x01	; 1
    1d30:	be 01       	movw	r22, r28
    1d32:	f8 01       	movw	r30, r16
    1d34:	84 81       	ldd	r24, Z+4	; 0x04
    1d36:	95 81       	ldd	r25, Z+5	; 0x05
    1d38:	c8 17       	cp	r28, r24
    1d3a:	d9 07       	cpc	r29, r25
    1d3c:	60 f3       	brcs	.-40     	; 0x1d16 <_ZN5Print5printERK6String+0x2a>
    write(s[i]);
  }
}
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	1f 91       	pop	r17
    1d44:	0f 91       	pop	r16
    1d46:	ff 90       	pop	r15
    1d48:	ef 90       	pop	r14
    1d4a:	df 90       	pop	r13
    1d4c:	cf 90       	pop	r12
    1d4e:	08 95       	ret

00001d50 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

void Print::printNumber(unsigned long n, uint8_t base)
{
    1d50:	2f 92       	push	r2
    1d52:	3f 92       	push	r3
    1d54:	4f 92       	push	r4
    1d56:	5f 92       	push	r5
    1d58:	6f 92       	push	r6
    1d5a:	7f 92       	push	r7
    1d5c:	8f 92       	push	r8
    1d5e:	9f 92       	push	r9
    1d60:	af 92       	push	r10
    1d62:	bf 92       	push	r11
    1d64:	cf 92       	push	r12
    1d66:	df 92       	push	r13
    1d68:	ef 92       	push	r14
    1d6a:	ff 92       	push	r15
    1d6c:	0f 93       	push	r16
    1d6e:	1f 93       	push	r17
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	a2 97       	sbiw	r28, 0x22	; 34
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	9a a3       	std	Y+34, r25	; 0x22
    1d86:	89 a3       	std	Y+33, r24	; 0x21
    1d88:	7a 01       	movw	r14, r20
    1d8a:	8b 01       	movw	r16, r22
  unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
  unsigned long i = 0;

  if (n == 0) {
    1d8c:	41 15       	cp	r20, r1
    1d8e:	51 05       	cpc	r21, r1
    1d90:	61 05       	cpc	r22, r1
    1d92:	71 05       	cpc	r23, r1
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <_ZN5Print11printNumberEmh+0x48>
    1d96:	55 c0       	rjmp	.+170    	; 0x1e42 <_ZN5Print11printNumberEmh+0xf2>
    print('0');
    return;
    1d98:	62 2e       	mov	r6, r18
    1d9a:	77 24       	eor	r7, r7
    1d9c:	88 24       	eor	r8, r8
    1d9e:	99 24       	eor	r9, r9
    1da0:	aa 24       	eor	r10, r10
    1da2:	bb 24       	eor	r11, r11
    1da4:	65 01       	movw	r12, r10
    1da6:	1e 01       	movw	r2, r28
    1da8:	08 94       	sec
    1daa:	21 1c       	adc	r2, r1
    1dac:	31 1c       	adc	r3, r1
  } 

  while (n > 0) {
    buf[i++] = n % base;
    1dae:	21 01       	movw	r4, r2
    1db0:	4a 0c       	add	r4, r10
    1db2:	5b 1c       	adc	r5, r11
    1db4:	c8 01       	movw	r24, r16
    1db6:	b7 01       	movw	r22, r14
    1db8:	a4 01       	movw	r20, r8
    1dba:	93 01       	movw	r18, r6
    1dbc:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__udivmodsi4>
    1dc0:	f2 01       	movw	r30, r4
    1dc2:	60 83       	st	Z, r22
    1dc4:	08 94       	sec
    1dc6:	a1 1c       	adc	r10, r1
    1dc8:	b1 1c       	adc	r11, r1
    1dca:	c1 1c       	adc	r12, r1
    1dcc:	d1 1c       	adc	r13, r1
    n /= base;
    1dce:	c8 01       	movw	r24, r16
    1dd0:	b7 01       	movw	r22, r14
    1dd2:	a4 01       	movw	r20, r8
    1dd4:	93 01       	movw	r18, r6
    1dd6:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__udivmodsi4>
    1dda:	e2 2e       	mov	r14, r18
    1ddc:	f3 2e       	mov	r15, r19
    1dde:	04 2f       	mov	r16, r20
    1de0:	15 2f       	mov	r17, r21
  if (n == 0) {
    print('0');
    return;
  } 

  while (n > 0) {
    1de2:	e1 14       	cp	r14, r1
    1de4:	f1 04       	cpc	r15, r1
    1de6:	01 05       	cpc	r16, r1
    1de8:	11 05       	cpc	r17, r1
    1dea:	09 f7       	brne	.-62     	; 0x1dae <_ZN5Print11printNumberEmh+0x5e>
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
    1dec:	a1 14       	cp	r10, r1
    1dee:	b1 04       	cpc	r11, r1
    1df0:	c1 04       	cpc	r12, r1
    1df2:	d1 04       	cpc	r13, r1
    1df4:	71 f1       	breq	.+92     	; 0x1e52 <_ZN5Print11printNumberEmh+0x102>
    1df6:	08 94       	sec
    1df8:	a1 08       	sbc	r10, r1
    1dfa:	b1 08       	sbc	r11, r1
    1dfc:	c1 08       	sbc	r12, r1
    1dfe:	d1 08       	sbc	r13, r1
    1e00:	18 c0       	rjmp	.+48     	; 0x1e32 <_ZN5Print11printNumberEmh+0xe2>
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
    1e02:	40 5d       	subi	r20, 0xD0	; 208
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    1e04:	50 e0       	ldi	r21, 0x00	; 0
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	70 e0       	ldi	r23, 0x00	; 0
    1e0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN5Print5printEli>
    1e16:	08 94       	sec
    1e18:	a1 08       	sbc	r10, r1
    1e1a:	b1 08       	sbc	r11, r1
    1e1c:	c1 08       	sbc	r12, r1
    1e1e:	d1 08       	sbc	r13, r1
  while (n > 0) {
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
    1e20:	ff ef       	ldi	r31, 0xFF	; 255
    1e22:	af 16       	cp	r10, r31
    1e24:	ff ef       	ldi	r31, 0xFF	; 255
    1e26:	bf 06       	cpc	r11, r31
    1e28:	ff ef       	ldi	r31, 0xFF	; 255
    1e2a:	cf 06       	cpc	r12, r31
    1e2c:	ff ef       	ldi	r31, 0xFF	; 255
    1e2e:	df 06       	cpc	r13, r31
    1e30:	81 f0       	breq	.+32     	; 0x1e52 <_ZN5Print11printNumberEmh+0x102>
    print((char) (buf[i - 1] < 10 ?
    1e32:	f1 01       	movw	r30, r2
    1e34:	ea 0d       	add	r30, r10
    1e36:	fb 1d       	adc	r31, r11
    1e38:	40 81       	ld	r20, Z
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
    1e3a:	4a 30       	cpi	r20, 0x0A	; 10
    1e3c:	10 f3       	brcs	.-60     	; 0x1e02 <_ZN5Print11printNumberEmh+0xb2>
    1e3e:	49 5c       	subi	r20, 0xC9	; 201
    1e40:	e1 cf       	rjmp	.-62     	; 0x1e04 <_ZN5Print11printNumberEmh+0xb4>
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    1e42:	40 e3       	ldi	r20, 0x30	; 48
    1e44:	50 e0       	ldi	r21, 0x00	; 0
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	70 e0       	ldi	r23, 0x00	; 0
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN5Print5printEli>

  for (; i > 0; i--)
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}
    1e52:	a2 96       	adiw	r28, 0x22	; 34
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	1f 91       	pop	r17
    1e64:	0f 91       	pop	r16
    1e66:	ff 90       	pop	r15
    1e68:	ef 90       	pop	r14
    1e6a:	df 90       	pop	r13
    1e6c:	cf 90       	pop	r12
    1e6e:	bf 90       	pop	r11
    1e70:	af 90       	pop	r10
    1e72:	9f 90       	pop	r9
    1e74:	8f 90       	pop	r8
    1e76:	7f 90       	pop	r7
    1e78:	6f 90       	pop	r6
    1e7a:	5f 90       	pop	r5
    1e7c:	4f 90       	pop	r4
    1e7e:	3f 90       	pop	r3
    1e80:	2f 90       	pop	r2
    1e82:	08 95       	ret

00001e84 <_ZN5Print5printEmi>:
  }
}

void Print::print(unsigned long n, int base)
{
  if (base == 0) write(n);
    1e84:	21 15       	cp	r18, r1
    1e86:	31 05       	cpc	r19, r1
    1e88:	19 f0       	breq	.+6      	; 0x1e90 <_ZN5Print5printEmi+0xc>
  else printNumber(n, base);
    1e8a:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <_ZN5Print11printNumberEmh>
    1e8e:	08 95       	ret
  }
}

void Print::print(unsigned long n, int base)
{
  if (base == 0) write(n);
    1e90:	dc 01       	movw	r26, r24
    1e92:	ed 91       	ld	r30, X+
    1e94:	fc 91       	ld	r31, X
    1e96:	01 90       	ld	r0, Z+
    1e98:	f0 81       	ld	r31, Z
    1e9a:	e0 2d       	mov	r30, r0
    1e9c:	64 2f       	mov	r22, r20
    1e9e:	09 95       	icall
    1ea0:	08 95       	ret

00001ea2 <_ZN5Print5printEji>:
{
  print((long) n, base);
}

void Print::print(unsigned int n, int base)
{
    1ea2:	9a 01       	movw	r18, r20
  print((unsigned long) n, base);
    1ea4:	ab 01       	movw	r20, r22
    1ea6:	60 e0       	ldi	r22, 0x00	; 0
    1ea8:	70 e0       	ldi	r23, 0x00	; 0
    1eaa:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <_ZN5Print5printEmi>
}
    1eae:	08 95       	ret

00001eb0 <_ZN5Print5printEhi>:
{
  print((long) c, base);
}

void Print::print(unsigned char b, int base)
{
    1eb0:	9a 01       	movw	r18, r20
  print((unsigned long) b, base);
    1eb2:	46 2f       	mov	r20, r22
    1eb4:	50 e0       	ldi	r21, 0x00	; 0
    1eb6:	60 e0       	ldi	r22, 0x00	; 0
    1eb8:	70 e0       	ldi	r23, 0x00	; 0
    1eba:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <_ZN5Print5printEmi>
}
    1ebe:	08 95       	ret

00001ec0 <_ZN5Print5printEli>:
{
  print((unsigned long) n, base);
}

void Print::print(long n, int base)
{
    1ec0:	ef 92       	push	r14
    1ec2:	ff 92       	push	r15
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	ec 01       	movw	r28, r24
    1ece:	7a 01       	movw	r14, r20
    1ed0:	8b 01       	movw	r16, r22
  if (base == 0) {
    1ed2:	21 15       	cp	r18, r1
    1ed4:	31 05       	cpc	r19, r1
    1ed6:	d9 f0       	breq	.+54     	; 0x1f0e <_ZN5Print5printEli+0x4e>
    write(n);
  } else if (base == 10) {
    1ed8:	2a 30       	cpi	r18, 0x0A	; 10
    1eda:	31 05       	cpc	r19, r1
    1edc:	49 f0       	breq	.+18     	; 0x1ef0 <_ZN5Print5printEli+0x30>
      print('-');
      n = -n;
    }
    printNumber(n, 10);
  } else {
    printNumber(n, base);
    1ede:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <_ZN5Print11printNumberEmh>
  }
}
    1ee2:	df 91       	pop	r29
    1ee4:	cf 91       	pop	r28
    1ee6:	1f 91       	pop	r17
    1ee8:	0f 91       	pop	r16
    1eea:	ff 90       	pop	r15
    1eec:	ef 90       	pop	r14
    1eee:	08 95       	ret
void Print::print(long n, int base)
{
  if (base == 0) {
    write(n);
  } else if (base == 10) {
    if (n < 0) {
    1ef0:	77 fd       	sbrc	r23, 7
    1ef2:	1b c0       	rjmp	.+54     	; 0x1f2a <_ZN5Print5printEli+0x6a>
      print('-');
      n = -n;
    }
    printNumber(n, 10);
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	b8 01       	movw	r22, r16
    1ef8:	a7 01       	movw	r20, r14
    1efa:	2a e0       	ldi	r18, 0x0A	; 10
    1efc:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <_ZN5Print11printNumberEmh>
  } else {
    printNumber(n, base);
  }
}
    1f00:	df 91       	pop	r29
    1f02:	cf 91       	pop	r28
    1f04:	1f 91       	pop	r17
    1f06:	0f 91       	pop	r16
    1f08:	ff 90       	pop	r15
    1f0a:	ef 90       	pop	r14
    1f0c:	08 95       	ret
}

void Print::print(long n, int base)
{
  if (base == 0) {
    write(n);
    1f0e:	e8 81       	ld	r30, Y
    1f10:	f9 81       	ldd	r31, Y+1	; 0x01
    1f12:	01 90       	ld	r0, Z+
    1f14:	f0 81       	ld	r31, Z
    1f16:	e0 2d       	mov	r30, r0
    1f18:	64 2f       	mov	r22, r20
    1f1a:	09 95       	icall
    }
    printNumber(n, 10);
  } else {
    printNumber(n, base);
  }
}
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	1f 91       	pop	r17
    1f22:	0f 91       	pop	r16
    1f24:	ff 90       	pop	r15
    1f26:	ef 90       	pop	r14
    1f28:	08 95       	ret
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    1f2a:	4d e2       	ldi	r20, 0x2D	; 45
    1f2c:	50 e0       	ldi	r21, 0x00	; 0
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN5Print5printEli>
  if (base == 0) {
    write(n);
  } else if (base == 10) {
    if (n < 0) {
      print('-');
      n = -n;
    1f3a:	10 95       	com	r17
    1f3c:	00 95       	com	r16
    1f3e:	f0 94       	com	r15
    1f40:	e0 94       	com	r14
    1f42:	e1 1c       	adc	r14, r1
    1f44:	f1 1c       	adc	r15, r1
    1f46:	01 1d       	adc	r16, r1
    1f48:	11 1d       	adc	r17, r1
    1f4a:	d4 cf       	rjmp	.-88     	; 0x1ef4 <_ZN5Print5printEli+0x34>

00001f4c <_ZN5Print5printEii>:
{
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
{
    1f4c:	ef 92       	push	r14
    1f4e:	ff 92       	push	r15
    1f50:	0f 93       	push	r16
    1f52:	1f 93       	push	r17
    1f54:	9a 01       	movw	r18, r20
  print((long) n, base);
    1f56:	7b 01       	movw	r14, r22
    1f58:	00 27       	eor	r16, r16
    1f5a:	f7 fc       	sbrc	r15, 7
    1f5c:	00 95       	com	r16
    1f5e:	10 2f       	mov	r17, r16
    1f60:	b8 01       	movw	r22, r16
    1f62:	a7 01       	movw	r20, r14
    1f64:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN5Print5printEli>
}
    1f68:	1f 91       	pop	r17
    1f6a:	0f 91       	pop	r16
    1f6c:	ff 90       	pop	r15
    1f6e:	ef 90       	pop	r14
    1f70:	08 95       	ret

00001f72 <_ZN5Print5printEci>:
{
  write(str);
}

void Print::print(char c, int base)
{
    1f72:	9a 01       	movw	r18, r20
  print((long) c, base);
    1f74:	46 2f       	mov	r20, r22
    1f76:	50 e0       	ldi	r21, 0x00	; 0
    1f78:	60 e0       	ldi	r22, 0x00	; 0
    1f7a:	70 e0       	ldi	r23, 0x00	; 0
    1f7c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN5Print5printEli>
}
    1f80:	08 95       	ret

00001f82 <_ZN5Print7printlnEv>:
{
  printFloat(n, digits);
}

void Print::println(void)
{
    1f82:	cf 93       	push	r28
    1f84:	df 93       	push	r29
    1f86:	ec 01       	movw	r28, r24
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    1f88:	4d e0       	ldi	r20, 0x0D	; 13
    1f8a:	50 e0       	ldi	r21, 0x00	; 0
    1f8c:	60 e0       	ldi	r22, 0x00	; 0
    1f8e:	70 e0       	ldi	r23, 0x00	; 0
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN5Print5printEli>
    1f98:	ce 01       	movw	r24, r28
    1f9a:	4a e0       	ldi	r20, 0x0A	; 10
    1f9c:	50 e0       	ldi	r21, 0x00	; 0
    1f9e:	60 e0       	ldi	r22, 0x00	; 0
    1fa0:	70 e0       	ldi	r23, 0x00	; 0
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN5Print5printEli>

void Print::println(void)
{
  print('\r');
  print('\n');  
}
    1faa:	df 91       	pop	r29
    1fac:	cf 91       	pop	r28
    1fae:	08 95       	ret

00001fb0 <_ZN5Print7printlnEmi>:
  print(n, base);
  println();
}

void Print::println(unsigned long n, int base)
{
    1fb0:	cf 93       	push	r28
    1fb2:	df 93       	push	r29
    1fb4:	ec 01       	movw	r28, r24
  print(n, base);
    1fb6:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <_ZN5Print5printEmi>
  println();
    1fba:	ce 01       	movw	r24, r28
    1fbc:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN5Print7printlnEv>
}
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	08 95       	ret

00001fc6 <_ZN5Print7printlnEji>:
  print(n, base);
  println();
}

void Print::println(unsigned int n, int base)
{
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	ec 01       	movw	r28, r24
    1fcc:	9a 01       	movw	r18, r20
  print((long) n, base);
}

void Print::print(unsigned int n, int base)
{
  print((unsigned long) n, base);
    1fce:	ab 01       	movw	r20, r22
    1fd0:	60 e0       	ldi	r22, 0x00	; 0
    1fd2:	70 e0       	ldi	r23, 0x00	; 0
    1fd4:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <_ZN5Print5printEmi>
}

void Print::println(unsigned int n, int base)
{
  print(n, base);
  println();
    1fd8:	ce 01       	movw	r24, r28
    1fda:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN5Print7printlnEv>
}
    1fde:	df 91       	pop	r29
    1fe0:	cf 91       	pop	r28
    1fe2:	08 95       	ret

00001fe4 <_ZN5Print7printlnEhi>:
  print(c, base);
  println();
}

void Print::println(unsigned char b, int base)
{
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
    1fe8:	ec 01       	movw	r28, r24
    1fea:	9a 01       	movw	r18, r20
  print((long) c, base);
}

void Print::print(unsigned char b, int base)
{
  print((unsigned long) b, base);
    1fec:	46 2f       	mov	r20, r22
    1fee:	50 e0       	ldi	r21, 0x00	; 0
    1ff0:	60 e0       	ldi	r22, 0x00	; 0
    1ff2:	70 e0       	ldi	r23, 0x00	; 0
    1ff4:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <_ZN5Print5printEmi>
}

void Print::println(unsigned char b, int base)
{
  print(b, base);
  println();
    1ff8:	ce 01       	movw	r24, r28
    1ffa:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN5Print7printlnEv>
}
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	08 95       	ret

00002004 <_ZN5Print7printlnEPKc>:
  print(s);
  println();
}

void Print::println(const char c[])
{
    2004:	cf 93       	push	r28
    2006:	df 93       	push	r29
    2008:	ec 01       	movw	r28, r24
  print(c);
    200a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <_ZN5Print5printEPKc>
  println();
    200e:	ce 01       	movw	r24, r28
    2010:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN5Print7printlnEv>
}
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	08 95       	ret

0000201a <_ZN5Print7printlnERK6String>:
  print('\r');
  print('\n');  
}

void Print::println(const String &s)
{
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	ec 01       	movw	r28, r24
  print(s);
    2020:	0e 94 76 0e 	call	0x1cec	; 0x1cec <_ZN5Print5printERK6String>
  println();
    2024:	ce 01       	movw	r24, r28
    2026:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN5Print7printlnEv>
}
    202a:	df 91       	pop	r29
    202c:	cf 91       	pop	r28
    202e:	08 95       	ret

00002030 <_ZN5Print7printlnEli>:
  print(n, base);
  println();
}

void Print::println(long n, int base)
{
    2030:	cf 93       	push	r28
    2032:	df 93       	push	r29
    2034:	ec 01       	movw	r28, r24
  print(n, base);
    2036:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN5Print5printEli>
  println();
    203a:	ce 01       	movw	r24, r28
    203c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN5Print7printlnEv>
}
    2040:	df 91       	pop	r29
    2042:	cf 91       	pop	r28
    2044:	08 95       	ret

00002046 <_ZN5Print7printlnEii>:
  print(b, base);
  println();
}

void Print::println(int n, int base)
{
    2046:	cf 93       	push	r28
    2048:	df 93       	push	r29
    204a:	ec 01       	movw	r28, r24
    204c:	cb 01       	movw	r24, r22
    204e:	9a 01       	movw	r18, r20
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
{
  print((long) n, base);
    2050:	ac 01       	movw	r20, r24
    2052:	66 27       	eor	r22, r22
    2054:	57 fd       	sbrc	r21, 7
    2056:	60 95       	com	r22
    2058:	76 2f       	mov	r23, r22
    205a:	ce 01       	movw	r24, r28
    205c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN5Print5printEli>
}

void Print::println(int n, int base)
{
  print(n, base);
  println();
    2060:	ce 01       	movw	r24, r28
    2062:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN5Print7printlnEv>
}
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	08 95       	ret

0000206c <_ZN5Print7printlnEci>:
  print(c);
  println();
}

void Print::println(char c, int base)
{
    206c:	cf 93       	push	r28
    206e:	df 93       	push	r29
    2070:	ec 01       	movw	r28, r24
    2072:	9a 01       	movw	r18, r20
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    2074:	46 2f       	mov	r20, r22
    2076:	50 e0       	ldi	r21, 0x00	; 0
    2078:	60 e0       	ldi	r22, 0x00	; 0
    207a:	70 e0       	ldi	r23, 0x00	; 0
    207c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN5Print5printEli>
}

void Print::println(char c, int base)
{
  print(c, base);
  println();
    2080:	ce 01       	movw	r24, r28
    2082:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN5Print7printlnEv>
}
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	08 95       	ret

0000208c <_ZN5Print10printFloatEdh>:
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}

void Print::printFloat(double number, uint8_t digits) 
{ 
    208c:	9f 92       	push	r9
    208e:	af 92       	push	r10
    2090:	bf 92       	push	r11
    2092:	cf 92       	push	r12
    2094:	df 92       	push	r13
    2096:	ef 92       	push	r14
    2098:	ff 92       	push	r15
    209a:	0f 93       	push	r16
    209c:	1f 93       	push	r17
    209e:	cf 93       	push	r28
    20a0:	df 93       	push	r29
    20a2:	ec 01       	movw	r28, r24
    20a4:	6a 01       	movw	r12, r20
    20a6:	7b 01       	movw	r14, r22
    20a8:	12 2f       	mov	r17, r18
  // Handle negative numbers
  if (number < 0.0)
    20aa:	cb 01       	movw	r24, r22
    20ac:	ba 01       	movw	r22, r20
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	a9 01       	movw	r20, r18
    20b4:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <__ltsf2>
    20b8:	88 23       	and	r24, r24
    20ba:	0c f4       	brge	.+2      	; 0x20be <_ZN5Print10printFloatEdh+0x32>
    20bc:	83 c0       	rjmp	.+262    	; 0x21c4 <_ZN5Print10printFloatEdh+0x138>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    20be:	11 23       	and	r17, r17
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <_ZN5Print10printFloatEdh+0x38>
    20c2:	8e c0       	rjmp	.+284    	; 0x21e0 <_ZN5Print10printFloatEdh+0x154>
    20c4:	00 e0       	ldi	r16, 0x00	; 0
    20c6:	50 e0       	ldi	r21, 0x00	; 0
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	2f e3       	ldi	r18, 0x3F	; 63
    rounding /= 10.0;
    20ce:	da 01       	movw	r26, r20
    20d0:	f9 01       	movw	r30, r18
    20d2:	6b 2f       	mov	r22, r27
    20d4:	74 2f       	mov	r23, r20
    20d6:	8f 2f       	mov	r24, r31
    20d8:	92 2f       	mov	r25, r18
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e2       	ldi	r20, 0x20	; 32
    20e0:	51 e4       	ldi	r21, 0x41	; 65
    20e2:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__divsf3>
    20e6:	56 2f       	mov	r21, r22
    20e8:	47 2f       	mov	r20, r23
    20ea:	38 2f       	mov	r19, r24
    20ec:	29 2f       	mov	r18, r25
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    20ee:	0f 5f       	subi	r16, 0xFF	; 255
    20f0:	01 17       	cp	r16, r17
    20f2:	68 f3       	brcs	.-38     	; 0x20ce <_ZN5Print10printFloatEdh+0x42>
    rounding /= 10.0;
  
  number += rounding;
    20f4:	c7 01       	movw	r24, r14
    20f6:	b6 01       	movw	r22, r12
    20f8:	da 01       	movw	r26, r20
    20fa:	f9 01       	movw	r30, r18
    20fc:	2b 2f       	mov	r18, r27
    20fe:	3a 2f       	mov	r19, r26
    2100:	4f 2f       	mov	r20, r31
    2102:	5e 2f       	mov	r21, r30
    2104:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__addsf3>
    2108:	5b 01       	movw	r10, r22
    210a:	c8 2e       	mov	r12, r24
    210c:	09 2f       	mov	r16, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    210e:	7b 2d       	mov	r23, r11
    2110:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    2114:	96 2e       	mov	r9, r22
    2116:	f7 2e       	mov	r15, r23
    2118:	e8 2e       	mov	r14, r24
    211a:	d9 2e       	mov	r13, r25
  double remainder = number - (double)int_part;
    211c:	0e 94 3c 24 	call	0x4878	; 0x4878 <__floatunsisf>
    2120:	9b 01       	movw	r18, r22
    2122:	ac 01       	movw	r20, r24
    2124:	6a 2d       	mov	r22, r10
    2126:	7b 2d       	mov	r23, r11
    2128:	8c 2d       	mov	r24, r12
    212a:	90 2f       	mov	r25, r16
    212c:	0e 94 28 21 	call	0x4250	; 0x4250 <__subsf3>
    2130:	5b 01       	movw	r10, r22
    2132:	c8 2e       	mov	r12, r24
    2134:	09 2f       	mov	r16, r25
  print(int_part);
    2136:	ce 01       	movw	r24, r28
    2138:	49 2d       	mov	r20, r9
    213a:	5f 2d       	mov	r21, r15
    213c:	6e 2d       	mov	r22, r14
    213e:	7d 2d       	mov	r23, r13
    2140:	2a e0       	ldi	r18, 0x0A	; 10
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <_ZN5Print5printEmi>

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    print("."); 
    2148:	ce 01       	movw	r24, r28
    214a:	63 e6       	ldi	r22, 0x63	; 99
    214c:	71 e0       	ldi	r23, 0x01	; 1
    214e:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <_ZN5Print5printEPKc>

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    2152:	6a 2d       	mov	r22, r10
    2154:	7b 2d       	mov	r23, r11
    2156:	8c 2d       	mov	r24, r12
    2158:	90 2f       	mov	r25, r16
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e2       	ldi	r20, 0x20	; 32
    2160:	51 e4       	ldi	r21, 0x41	; 65
    2162:	0e 94 86 21 	call	0x430c	; 0x430c <__mulsf3>
    2166:	06 2f       	mov	r16, r22
    2168:	b7 2e       	mov	r11, r23
    216a:	a8 2e       	mov	r10, r24
    216c:	99 2e       	mov	r9, r25
    int toPrint = int(remainder);
    216e:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <__fixsfsi>
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
{
  print((long) n, base);
    2172:	6b 01       	movw	r12, r22
    2174:	ee 24       	eor	r14, r14
    2176:	d7 fc       	sbrc	r13, 7
    2178:	e0 94       	com	r14
    217a:	fe 2c       	mov	r15, r14
    217c:	ce 01       	movw	r24, r28
    217e:	b7 01       	movw	r22, r14
    2180:	a6 01       	movw	r20, r12
    2182:	2a e0       	ldi	r18, 0x0A	; 10
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN5Print5printEli>
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
    218a:	c7 01       	movw	r24, r14
    218c:	b6 01       	movw	r22, r12
    218e:	0e 94 8c 23 	call	0x4718	; 0x4718 <__floatsisf>
    2192:	9b 01       	movw	r18, r22
    2194:	ac 01       	movw	r20, r24
    2196:	60 2f       	mov	r22, r16
    2198:	7b 2d       	mov	r23, r11
    219a:	8a 2d       	mov	r24, r10
    219c:	99 2d       	mov	r25, r9
    219e:	0e 94 28 21 	call	0x4250	; 0x4250 <__subsf3>
    21a2:	5b 01       	movw	r10, r22
    21a4:	c8 2e       	mov	r12, r24
    21a6:	09 2f       	mov	r16, r25
    21a8:	11 50       	subi	r17, 0x01	; 1
  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    print("."); 

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    21aa:	99 f6       	brne	.-90     	; 0x2152 <_ZN5Print10printFloatEdh+0xc6>
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
  } 
}
    21ac:	df 91       	pop	r29
    21ae:	cf 91       	pop	r28
    21b0:	1f 91       	pop	r17
    21b2:	0f 91       	pop	r16
    21b4:	ff 90       	pop	r15
    21b6:	ef 90       	pop	r14
    21b8:	df 90       	pop	r13
    21ba:	cf 90       	pop	r12
    21bc:	bf 90       	pop	r11
    21be:	af 90       	pop	r10
    21c0:	9f 90       	pop	r9
    21c2:	08 95       	ret
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    21c4:	ce 01       	movw	r24, r28
    21c6:	4d e2       	ldi	r20, 0x2D	; 45
    21c8:	50 e0       	ldi	r21, 0x00	; 0
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	70 e0       	ldi	r23, 0x00	; 0
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN5Print5printEli>
{ 
  // Handle negative numbers
  if (number < 0.0)
  {
     print('-');
     number = -number;
    21d6:	f7 fa       	bst	r15, 7
    21d8:	f0 94       	com	r15
    21da:	f7 f8       	bld	r15, 7
    21dc:	f0 94       	com	r15
    21de:	6f cf       	rjmp	.-290    	; 0x20be <_ZN5Print10printFloatEdh+0x32>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  print(int_part);
    21e0:	c7 01       	movw	r24, r14
    21e2:	b6 01       	movw	r22, r12
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	5f e3       	ldi	r21, 0x3F	; 63
    21ec:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__addsf3>
    21f0:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    21f4:	ab 01       	movw	r20, r22
    21f6:	bc 01       	movw	r22, r24
    21f8:	ce 01       	movw	r24, r28
    21fa:	2a e0       	ldi	r18, 0x0A	; 10
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <_ZN5Print5printEmi>
    2202:	d4 cf       	rjmp	.-88     	; 0x21ac <_ZN5Print10printFloatEdh+0x120>

00002204 <_ZN5Print5printEdi>:
  else printNumber(n, base);
}

void Print::print(double n, int digits)
{
  printFloat(n, digits);
    2204:	0e 94 46 10 	call	0x208c	; 0x208c <_ZN5Print10printFloatEdh>
}
    2208:	08 95       	ret

0000220a <_ZN5Print7printlnEdi>:
  print(n, base);
  println();
}

void Print::println(double n, int digits)
{
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	ec 01       	movw	r28, r24
  else printNumber(n, base);
}

void Print::print(double n, int digits)
{
  printFloat(n, digits);
    2210:	0e 94 46 10 	call	0x208c	; 0x208c <_ZN5Print10printFloatEdh>
}

void Print::println(double n, int digits)
{
  print(n, digits);
  println();
    2214:	ce 01       	movw	r24, r28
    2216:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN5Print7printlnEv>
}
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	08 95       	ret

00002220 <_ZN7TwoWireC2Ev>:

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
{
}
    2220:	08 95       	ret

00002222 <_ZN7TwoWireC1Ev>:
    2222:	08 95       	ret

00002224 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	80 93 c4 06 	sts	0x06C4, r24
  // set address of targeted slave
  txAddress = address;
    222a:	60 93 a1 06 	sts	0x06A1, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    222e:	10 92 c2 06 	sts	0x06C2, r1
  txBufferLength = 0;
    2232:	10 92 c3 06 	sts	0x06C3, r1
}
    2236:	08 95       	ret

00002238 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	80 93 c4 06 	sts	0x06C4, r24
  // set address of targeted slave
  txAddress = address;
    223e:	60 93 a1 06 	sts	0x06A1, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2242:	10 92 c2 06 	sts	0x06C2, r1
  txBufferLength = 0;
    2246:	10 92 c3 06 	sts	0x06C3, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    224a:	08 95       	ret

0000224c <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
uint8_t TwoWire::available(void)
{
    224c:	80 91 a0 06 	lds	r24, 0x06A0
    2250:	90 91 9f 06 	lds	r25, 0x069F
  return rxBufferLength - rxBufferIndex;
}
    2254:	89 1b       	sub	r24, r25
    2256:	08 95       	ret

00002258 <_ZN7TwoWire7receiveEv>:
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2258:	90 91 9f 06 	lds	r25, 0x069F
    225c:	80 91 a0 06 	lds	r24, 0x06A0
    2260:	98 17       	cp	r25, r24
    2262:	48 f4       	brcc	.+18     	; 0x2276 <_ZN7TwoWire7receiveEv+0x1e>
    value = rxBuffer[rxBufferIndex];
    2264:	e9 2f       	mov	r30, r25
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	e1 58       	subi	r30, 0x81	; 129
    226a:	f9 4f       	sbci	r31, 0xF9	; 249
    226c:	80 81       	ld	r24, Z
    ++rxBufferIndex;
    226e:	9f 5f       	subi	r25, 0xFF	; 255
    2270:	90 93 9f 06 	sts	0x069F, r25
  }

  return value;
}
    2274:	08 95       	ret
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	08 95       	ret

0000227a <_ZN7TwoWire16onReceiveServiceEPhi>:
  return value;
}

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
    227a:	cf 93       	push	r28
    227c:	df 93       	push	r29
    227e:	9c 01       	movw	r18, r24
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    2280:	e0 91 c7 06 	lds	r30, 0x06C7
    2284:	f0 91 c8 06 	lds	r31, 0x06C8
    2288:	30 97       	sbiw	r30, 0x00	; 0
    228a:	11 f1       	breq	.+68     	; 0x22d0 <_ZN7TwoWire16onReceiveServiceEPhi+0x56>
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    228c:	90 91 9f 06 	lds	r25, 0x069F
    2290:	80 91 a0 06 	lds	r24, 0x06A0
    2294:	98 17       	cp	r25, r24
    2296:	e0 f0       	brcs	.+56     	; 0x22d0 <_ZN7TwoWire16onReceiveServiceEPhi+0x56>
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2298:	16 16       	cp	r1, r22
    229a:	17 06       	cpc	r1, r23
    229c:	9c f4       	brge	.+38     	; 0x22c4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
    229e:	a0 e0       	ldi	r26, 0x00	; 0
    22a0:	b0 e0       	ldi	r27, 0x00	; 0
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	40 e0       	ldi	r20, 0x00	; 0
    22a6:	50 e0       	ldi	r21, 0x00	; 0
    rxBuffer[i] = inBytes[i];    
    22a8:	a1 58       	subi	r26, 0x81	; 129
    22aa:	b9 4f       	sbci	r27, 0xF9	; 249
    22ac:	42 0f       	add	r20, r18
    22ae:	53 1f       	adc	r21, r19
    22b0:	ea 01       	movw	r28, r20
    22b2:	48 81       	ld	r20, Y
    22b4:	4c 93       	st	X, r20
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    22b6:	9f 5f       	subi	r25, 0xFF	; 255
    22b8:	49 2f       	mov	r20, r25
    22ba:	50 e0       	ldi	r21, 0x00	; 0
    22bc:	da 01       	movw	r26, r20
    22be:	46 17       	cp	r20, r22
    22c0:	57 07       	cpc	r21, r23
    22c2:	94 f3       	brlt	.-28     	; 0x22a8 <_ZN7TwoWire16onReceiveServiceEPhi+0x2e>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
    22c4:	10 92 9f 06 	sts	0x069F, r1
  rxBufferLength = numBytes;
    22c8:	60 93 a0 06 	sts	0x06A0, r22
  // alert user program
  user_onReceive(numBytes);
    22cc:	cb 01       	movw	r24, r22
    22ce:	09 95       	icall
}
    22d0:	df 91       	pop	r29
    22d2:	cf 91       	pop	r28
    22d4:	08 95       	ret

000022d6 <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    22d6:	e0 91 c5 06 	lds	r30, 0x06C5
    22da:	f0 91 c6 06 	lds	r31, 0x06C6
    22de:	30 97       	sbiw	r30, 0x00	; 0
    22e0:	29 f0       	breq	.+10     	; 0x22ec <_ZN7TwoWire16onRequestServiceEv+0x16>
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
    22e2:	10 92 c2 06 	sts	0x06C2, r1
  txBufferLength = 0;
    22e6:	10 92 c3 06 	sts	0x06C3, r1
  // alert user program
  user_onRequest();
    22ea:	09 95       	icall
    22ec:	08 95       	ret

000022ee <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  user_onReceive = function;
    22ee:	70 93 c8 06 	sts	0x06C8, r23
    22f2:	60 93 c7 06 	sts	0x06C7, r22
}
    22f6:	08 95       	ret

000022f8 <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    22f8:	70 93 c6 06 	sts	0x06C6, r23
    22fc:	60 93 c5 06 	sts	0x06C5, r22
}
    2300:	08 95       	ret

00002302 <_ZN7TwoWire4sendEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(uint8_t data)
{
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	0f 92       	push	r0
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    230e:	80 91 c4 06 	lds	r24, 0x06C4
    2312:	88 23       	and	r24, r24
    2314:	c1 f0       	breq	.+48     	; 0x2346 <_ZN7TwoWire4sendEh+0x44>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    2316:	80 91 c3 06 	lds	r24, 0x06C3
    231a:	80 32       	cpi	r24, 0x20	; 32
    231c:	20 f0       	brcs	.+8      	; 0x2326 <_ZN7TwoWire4sendEh+0x24>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
}
    231e:	0f 90       	pop	r0
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
      return;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    2326:	80 91 c2 06 	lds	r24, 0x06C2
    232a:	e8 2f       	mov	r30, r24
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	ee 55       	subi	r30, 0x5E	; 94
    2330:	f9 4f       	sbci	r31, 0xF9	; 249
    2332:	60 83       	st	Z, r22
    ++txBufferIndex;
    2334:	8f 5f       	subi	r24, 0xFF	; 255
    2336:	80 93 c2 06 	sts	0x06C2, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    233a:	80 93 c3 06 	sts	0x06C3, r24
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
}
    233e:	0f 90       	pop	r0
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret
    // update amount in buffer   
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    2346:	ce 01       	movw	r24, r28
    2348:	01 96       	adiw	r24, 0x01	; 1
    234a:	61 e0       	ldi	r22, 0x01	; 1
    234c:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <twi_transmit>
  }
}
    2350:	0f 90       	pop	r0
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <_ZN7TwoWire4sendEi>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(int data)
{
  send((uint8_t)data);
    2358:	0e 94 81 11 	call	0x2302	; 0x2302 <_ZN7TwoWire4sendEh>
}
    235c:	08 95       	ret

0000235e <_ZN7TwoWire4sendEPhh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(uint8_t* data, uint8_t quantity)
{
    235e:	ef 92       	push	r14
    2360:	ff 92       	push	r15
    2362:	0f 93       	push	r16
    2364:	1f 93       	push	r17
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	ec 01       	movw	r28, r24
    236c:	16 2f       	mov	r17, r22
    236e:	04 2f       	mov	r16, r20
  if(transmitting){
    2370:	80 91 c4 06 	lds	r24, 0x06C4
    2374:	88 23       	and	r24, r24
    2376:	a9 f0       	breq	.+42     	; 0x23a2 <_ZN7TwoWire4sendEPhh+0x44>
  // in master transmitter mode
    for(uint8_t i = 0; i < quantity; ++i){
    2378:	44 23       	and	r20, r20
    237a:	61 f0       	breq	.+24     	; 0x2394 <_ZN7TwoWire4sendEPhh+0x36>
    237c:	e6 2e       	mov	r14, r22
    237e:	f7 2e       	mov	r15, r23
      send(data[i]);
    2380:	ce 01       	movw	r24, r28
    2382:	f7 01       	movw	r30, r14
    2384:	61 91       	ld	r22, Z+
    2386:	7f 01       	movw	r14, r30
    2388:	0e 94 81 11 	call	0x2302	; 0x2302 <_ZN7TwoWire4sendEh>
// or after beginTransmission(address)
void TwoWire::send(uint8_t* data, uint8_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(uint8_t i = 0; i < quantity; ++i){
    238c:	8e 2d       	mov	r24, r14
    238e:	81 1b       	sub	r24, r17
    2390:	80 17       	cp	r24, r16
    2392:	b0 f3       	brcs	.-20     	; 0x2380 <_ZN7TwoWire4sendEPhh+0x22>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
  }
}
    2394:	df 91       	pop	r29
    2396:	cf 91       	pop	r28
    2398:	1f 91       	pop	r17
    239a:	0f 91       	pop	r16
    239c:	ff 90       	pop	r15
    239e:	ef 90       	pop	r14
    23a0:	08 95       	ret
      send(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    23a2:	86 2f       	mov	r24, r22
    23a4:	97 2f       	mov	r25, r23
    23a6:	64 2f       	mov	r22, r20
    23a8:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <twi_transmit>
  }
}
    23ac:	df 91       	pop	r29
    23ae:	cf 91       	pop	r28
    23b0:	1f 91       	pop	r17
    23b2:	0f 91       	pop	r16
    23b4:	ff 90       	pop	r15
    23b6:	ef 90       	pop	r14
    23b8:	08 95       	ret

000023ba <_ZN7TwoWire4sendEPc>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(char* data)
{
  send((uint8_t*)data, strlen(data));
    23ba:	db 01       	movw	r26, r22
    23bc:	0d 90       	ld	r0, X+
    23be:	00 20       	and	r0, r0
    23c0:	e9 f7       	brne	.-6      	; 0x23bc <_ZN7TwoWire4sendEPc+0x2>
    23c2:	ad 01       	movw	r20, r26
    23c4:	41 50       	subi	r20, 0x01	; 1
    23c6:	50 40       	sbci	r21, 0x00	; 0
    23c8:	46 1b       	sub	r20, r22
    23ca:	57 0b       	sbc	r21, r23
    23cc:	0e 94 af 11 	call	0x235e	; 0x235e <_ZN7TwoWire4sendEPhh>
}
    23d0:	08 95       	ret

000023d2 <_ZN7TwoWire15endTransmissionEv>:
}

uint8_t TwoWire::endTransmission(void)
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1);
    23d2:	80 91 a1 06 	lds	r24, 0x06A1
    23d6:	62 ea       	ldi	r22, 0xA2	; 162
    23d8:	76 e0       	ldi	r23, 0x06	; 6
    23da:	40 91 c3 06 	lds	r20, 0x06C3
    23de:	21 e0       	ldi	r18, 0x01	; 1
    23e0:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    23e4:	10 92 c2 06 	sts	0x06C2, r1
  txBufferLength = 0;
    23e8:	10 92 c3 06 	sts	0x06C3, r1
  // indicate that we are done transmitting
  transmitting = 0;
    23ec:	10 92 c4 06 	sts	0x06C4, r1
  return ret;
}
    23f0:	08 95       	ret

000023f2 <_ZN7TwoWire11requestFromEhh>:
{
  begin((uint8_t)address);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
    23f2:	86 2f       	mov	r24, r22
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity);
    23f4:	41 32       	cpi	r20, 0x21	; 33
    23f6:	08 f0       	brcs	.+2      	; 0x23fa <_ZN7TwoWire11requestFromEhh+0x8>
    23f8:	40 e2       	ldi	r20, 0x20	; 32
    23fa:	6f e7       	ldi	r22, 0x7F	; 127
    23fc:	76 e0       	ldi	r23, 0x06	; 6
    23fe:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    2402:	10 92 9f 06 	sts	0x069F, r1
  rxBufferLength = read;
    2406:	80 93 a0 06 	sts	0x06A0, r24

  return read;
}
    240a:	08 95       	ret

0000240c <_ZN7TwoWire11requestFromEii>:

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity);
    240c:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <_ZN7TwoWire11requestFromEhh>
}
    2410:	08 95       	ret

00002412 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    2412:	10 92 9f 06 	sts	0x069F, r1
  rxBufferLength = 0;
    2416:	10 92 a0 06 	sts	0x06A0, r1

  txBufferIndex = 0;
    241a:	10 92 c2 06 	sts	0x06C2, r1
  txBufferLength = 0;
    241e:	10 92 c3 06 	sts	0x06C3, r1

  twi_init();
    2422:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <twi_init>
}
    2426:	08 95       	ret

00002428 <_ZN7TwoWire5beginEh>:

void TwoWire::begin(uint8_t address)
{
    2428:	cf 93       	push	r28
    242a:	df 93       	push	r29
    242c:	ec 01       	movw	r28, r24
    242e:	86 2f       	mov	r24, r22
  twi_setAddress(address);
    2430:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <twi_setAddress>
  twi_attachSlaveTxEvent(onRequestService);
    2434:	8b e6       	ldi	r24, 0x6B	; 107
    2436:	91 e1       	ldi	r25, 0x11	; 17
    2438:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <twi_attachSlaveTxEvent>
  twi_attachSlaveRxEvent(onReceiveService);
    243c:	8d e3       	ldi	r24, 0x3D	; 61
    243e:	91 e1       	ldi	r25, 0x11	; 17
    2440:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <twi_attachSlaveRxEvent>
  begin();
    2444:	ce 01       	movw	r24, r28
    2446:	0e 94 09 12 	call	0x2412	; 0x2412 <_ZN7TwoWire5beginEv>
}
    244a:	df 91       	pop	r29
    244c:	cf 91       	pop	r28
    244e:	08 95       	ret

00002450 <_ZN7TwoWire5beginEi>:

void TwoWire::begin(int address)
{
  begin((uint8_t)address);
    2450:	0e 94 14 12 	call	0x2428	; 0x2428 <_ZN7TwoWire5beginEh>
}
    2454:	08 95       	ret

00002456 <__vector_16>:
volatile unsigned long timer0_overflow_count = 0;
volatile unsigned long timer0_millis = 0;
static unsigned char timer0_fract = 0;

SIGNAL(TIMER0_OVF_vect)
{
    2456:	1f 92       	push	r1
    2458:	0f 92       	push	r0
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	0f 92       	push	r0
    245e:	11 24       	eor	r1, r1
    2460:	2f 93       	push	r18
    2462:	3f 93       	push	r19
    2464:	8f 93       	push	r24
    2466:	9f 93       	push	r25
    2468:	af 93       	push	r26
    246a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    246c:	80 91 cd 06 	lds	r24, 0x06CD
    2470:	90 91 ce 06 	lds	r25, 0x06CE
    2474:	a0 91 cf 06 	lds	r26, 0x06CF
    2478:	b0 91 d0 06 	lds	r27, 0x06D0
	unsigned char f = timer0_fract;
    247c:	30 91 d1 06 	lds	r19, 0x06D1

	m += MILLIS_INC;
    2480:	01 96       	adiw	r24, 0x01	; 1
    2482:	a1 1d       	adc	r26, r1
    2484:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    2486:	23 2f       	mov	r18, r19
    2488:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    248a:	2d 37       	cpi	r18, 0x7D	; 125
    248c:	20 f0       	brcs	.+8      	; 0x2496 <__vector_16+0x40>
		f -= FRACT_MAX;
    248e:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    2490:	01 96       	adiw	r24, 0x01	; 1
    2492:	a1 1d       	adc	r26, r1
    2494:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2496:	20 93 d1 06 	sts	0x06D1, r18
	timer0_millis = m;
    249a:	80 93 cd 06 	sts	0x06CD, r24
    249e:	90 93 ce 06 	sts	0x06CE, r25
    24a2:	a0 93 cf 06 	sts	0x06CF, r26
    24a6:	b0 93 d0 06 	sts	0x06D0, r27
	timer0_overflow_count++;
    24aa:	80 91 c9 06 	lds	r24, 0x06C9
    24ae:	90 91 ca 06 	lds	r25, 0x06CA
    24b2:	a0 91 cb 06 	lds	r26, 0x06CB
    24b6:	b0 91 cc 06 	lds	r27, 0x06CC
    24ba:	01 96       	adiw	r24, 0x01	; 1
    24bc:	a1 1d       	adc	r26, r1
    24be:	b1 1d       	adc	r27, r1
    24c0:	80 93 c9 06 	sts	0x06C9, r24
    24c4:	90 93 ca 06 	sts	0x06CA, r25
    24c8:	a0 93 cb 06 	sts	0x06CB, r26
    24cc:	b0 93 cc 06 	sts	0x06CC, r27
}
    24d0:	bf 91       	pop	r27
    24d2:	af 91       	pop	r26
    24d4:	9f 91       	pop	r25
    24d6:	8f 91       	pop	r24
    24d8:	3f 91       	pop	r19
    24da:	2f 91       	pop	r18
    24dc:	0f 90       	pop	r0
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	0f 90       	pop	r0
    24e2:	1f 90       	pop	r1
    24e4:	18 95       	reti

000024e6 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    24e6:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    24e8:	f8 94       	cli
	m = timer0_millis;
    24ea:	20 91 cd 06 	lds	r18, 0x06CD
    24ee:	30 91 ce 06 	lds	r19, 0x06CE
    24f2:	40 91 cf 06 	lds	r20, 0x06CF
    24f6:	50 91 d0 06 	lds	r21, 0x06D0
	SREG = oldSREG;
    24fa:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    24fc:	b9 01       	movw	r22, r18
    24fe:	ca 01       	movw	r24, r20
    2500:	08 95       	ret

00002502 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2502:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    2504:	f8 94       	cli
	m = timer0_overflow_count;
    2506:	20 91 c9 06 	lds	r18, 0x06C9
    250a:	30 91 ca 06 	lds	r19, 0x06CA
    250e:	40 91 cb 06 	lds	r20, 0x06CB
    2512:	50 91 cc 06 	lds	r21, 0x06CC
#if defined(TCNT0)
	t = TCNT0;
    2516:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2518:	a8 9b       	sbis	0x15, 0	; 21
    251a:	06 c0       	rjmp	.+12     	; 0x2528 <micros+0x26>
    251c:	8f 3f       	cpi	r24, 0xFF	; 255
    251e:	21 f0       	breq	.+8      	; 0x2528 <micros+0x26>
		m++;
    2520:	2f 5f       	subi	r18, 0xFF	; 255
    2522:	3f 4f       	sbci	r19, 0xFF	; 255
    2524:	4f 4f       	sbci	r20, 0xFF	; 255
    2526:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2528:	9f bf       	out	0x3f, r25	; 63
    252a:	54 2f       	mov	r21, r20
    252c:	43 2f       	mov	r20, r19
    252e:	32 2f       	mov	r19, r18
    2530:	22 27       	eor	r18, r18
    2532:	28 0f       	add	r18, r24
    2534:	31 1d       	adc	r19, r1
    2536:	41 1d       	adc	r20, r1
    2538:	51 1d       	adc	r21, r1
    253a:	22 0f       	add	r18, r18
    253c:	33 1f       	adc	r19, r19
    253e:	44 1f       	adc	r20, r20
    2540:	55 1f       	adc	r21, r21
    2542:	22 0f       	add	r18, r18
    2544:	33 1f       	adc	r19, r19
    2546:	44 1f       	adc	r20, r20
    2548:	55 1f       	adc	r21, r21
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
    254a:	b9 01       	movw	r22, r18
    254c:	ca 01       	movw	r24, r20
    254e:	08 95       	ret

00002550 <delay>:

void delay(unsigned long ms)
{
    2550:	ef 92       	push	r14
    2552:	ff 92       	push	r15
    2554:	0f 93       	push	r16
    2556:	1f 93       	push	r17
    2558:	cf 93       	push	r28
    255a:	df 93       	push	r29
    255c:	7b 01       	movw	r14, r22
    255e:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
    2560:	0e 94 81 12 	call	0x2502	; 0x2502 <micros>
    2564:	eb 01       	movw	r28, r22

	while (ms > 0) {
    2566:	e1 14       	cp	r14, r1
    2568:	f1 04       	cpc	r15, r1
    256a:	01 05       	cpc	r16, r1
    256c:	11 05       	cpc	r17, r1
    256e:	a1 f0       	breq	.+40     	; 0x2598 <delay+0x48>
		if (((uint16_t)micros() - start) >= 1000) {
    2570:	0e 94 81 12 	call	0x2502	; 0x2502 <micros>
    2574:	6c 1b       	sub	r22, r28
    2576:	7d 0b       	sbc	r23, r29
    2578:	83 e0       	ldi	r24, 0x03	; 3
    257a:	68 3e       	cpi	r22, 0xE8	; 232
    257c:	78 07       	cpc	r23, r24
    257e:	c0 f3       	brcs	.-16     	; 0x2570 <delay+0x20>
			ms--;
    2580:	08 94       	sec
    2582:	e1 08       	sbc	r14, r1
    2584:	f1 08       	sbc	r15, r1
    2586:	01 09       	sbc	r16, r1
    2588:	11 09       	sbc	r17, r1
			start += 1000;
    258a:	c8 51       	subi	r28, 0x18	; 24
    258c:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    258e:	e1 14       	cp	r14, r1
    2590:	f1 04       	cpc	r15, r1
    2592:	01 05       	cpc	r16, r1
    2594:	11 05       	cpc	r17, r1
    2596:	61 f7       	brne	.-40     	; 0x2570 <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2598:	df 91       	pop	r29
    259a:	cf 91       	pop	r28
    259c:	1f 91       	pop	r17
    259e:	0f 91       	pop	r16
    25a0:	ff 90       	pop	r15
    25a2:	ef 90       	pop	r14
    25a4:	08 95       	ret

000025a6 <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	39 f0       	breq	.+14     	; 0x25b8 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    25aa:	88 0f       	add	r24, r24
    25ac:	99 1f       	adc	r25, r25
    25ae:	88 0f       	add	r24, r24
    25b0:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    25b2:	02 97       	sbiw	r24, 0x02	; 2

	// busy wait
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	f1 f7       	brne	.-4      	; 0x25b4 <delayMicroseconds+0xe>
    25b8:	08 95       	ret

000025ba <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    25ba:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    25bc:	84 b5       	in	r24, 0x24	; 36
    25be:	82 60       	ori	r24, 0x02	; 2
    25c0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    25c2:	84 b5       	in	r24, 0x24	; 36
    25c4:	81 60       	ori	r24, 0x01	; 1
    25c6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    25c8:	85 b5       	in	r24, 0x25	; 37
    25ca:	82 60       	ori	r24, 0x02	; 2
    25cc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    25ce:	85 b5       	in	r24, 0x25	; 37
    25d0:	81 60       	ori	r24, 0x01	; 1
    25d2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    25d4:	ee e6       	ldi	r30, 0x6E	; 110
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	81 60       	ori	r24, 0x01	; 1
    25dc:	80 83       	st	Z, r24
	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

	TCCR1B = 0;
    25de:	e1 e8       	ldi	r30, 0x81	; 129
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	sbi(TCCR1B, CS11);
    25e4:	80 81       	ld	r24, Z
    25e6:	82 60       	ori	r24, 0x02	; 2
    25e8:	80 83       	st	Z, r24
	sbi(TCCR1B, CS10);
    25ea:	80 81       	ld	r24, Z
    25ec:	81 60       	ori	r24, 0x01	; 1
    25ee:	80 83       	st	Z, r24
	sbi(TCCR1, CS11);
	sbi(TCCR1, CS10);
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    25f0:	e0 e8       	ldi	r30, 0x80	; 128
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	81 60       	ori	r24, 0x01	; 1
    25f8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    25fa:	e1 eb       	ldi	r30, 0xB1	; 177
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	84 60       	ori	r24, 0x04	; 4
    2602:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2604:	e0 eb       	ldi	r30, 0xB0	; 176
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	81 60       	ori	r24, 0x01	; 1
    260c:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    260e:	ea e7       	ldi	r30, 0x7A	; 122
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	84 60       	ori	r24, 0x04	; 4
    2616:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2618:	80 81       	ld	r24, Z
    261a:	82 60       	ori	r24, 0x02	; 2
    261c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    261e:	80 81       	ld	r24, Z
    2620:	81 60       	ori	r24, 0x01	; 1
    2622:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2624:	80 81       	ld	r24, Z
    2626:	80 68       	ori	r24, 0x80	; 128
    2628:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    262a:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    262e:	08 95       	ret

00002630 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    2630:	80 93 6f 01 	sts	0x016F, r24
}
    2634:	08 95       	ret

00002636 <analogRead>:
	uint8_t low, high;

#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    2636:	8e 30       	cpi	r24, 0x0E	; 14
    2638:	08 f0       	brcs	.+2      	; 0x263c <analogRead+0x6>
    263a:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    263c:	87 70       	andi	r24, 0x07	; 7
    263e:	90 91 6f 01 	lds	r25, 0x016F
    2642:	92 95       	swap	r25
    2644:	99 0f       	add	r25, r25
    2646:	99 0f       	add	r25, r25
    2648:	90 7c       	andi	r25, 0xC0	; 192
    264a:	98 2b       	or	r25, r24
    264c:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2650:	80 91 7a 00 	lds	r24, 0x007A
    2654:	80 64       	ori	r24, 0x40	; 64
    2656:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    265a:	80 91 7a 00 	lds	r24, 0x007A
    265e:	86 fd       	sbrc	r24, 6
    2660:	fc cf       	rjmp	.-8      	; 0x265a <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2662:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    2666:	30 91 79 00 	lds	r19, 0x0079
    266a:	93 2f       	mov	r25, r19
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	28 2b       	or	r18, r24
    2672:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    2674:	c9 01       	movw	r24, r18
    2676:	08 95       	ret

00002678 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    2678:	1f 93       	push	r17
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	18 2f       	mov	r17, r24
    2680:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    2682:	61 e0       	ldi	r22, 0x01	; 1
    2684:	0e 94 b1 13 	call	0x2762	; 0x2762 <pinMode>
	if (val == 0)
    2688:	20 97       	sbiw	r28, 0x00	; 0
    268a:	59 f1       	breq	.+86     	; 0x26e2 <analogWrite+0x6a>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
    268c:	cf 3f       	cpi	r28, 0xFF	; 255
    268e:	d1 05       	cpc	r29, r1
    2690:	a1 f0       	breq	.+40     	; 0x26ba <analogWrite+0x42>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2692:	e1 2f       	mov	r30, r17
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	e7 53       	subi	r30, 0x37	; 55
    2698:	fc 4f       	sbci	r31, 0xFC	; 252
    269a:	84 91       	lpm	r24, Z+
    269c:	83 30       	cpi	r24, 0x03	; 3
    269e:	e1 f1       	breq	.+120    	; 0x2718 <analogWrite+0xa0>
    26a0:	84 30       	cpi	r24, 0x04	; 4
    26a2:	98 f0       	brcs	.+38     	; 0x26ca <analogWrite+0x52>
    26a4:	86 30       	cpi	r24, 0x06	; 6
    26a6:	69 f1       	breq	.+90     	; 0x2702 <analogWrite+0x8a>
    26a8:	87 30       	cpi	r24, 0x07	; 7
    26aa:	09 f4       	brne	.+2      	; 0x26ae <analogWrite+0x36>
    26ac:	4f c0       	rjmp	.+158    	; 0x274c <analogWrite+0xd4>
    26ae:	84 30       	cpi	r24, 0x04	; 4
    26b0:	09 f4       	brne	.+2      	; 0x26b4 <analogWrite+0x3c>
    26b2:	3f c0       	rjmp	.+126    	; 0x2732 <analogWrite+0xba>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    26b4:	c0 38       	cpi	r28, 0x80	; 128
    26b6:	d1 05       	cpc	r29, r1
    26b8:	a4 f0       	brlt	.+40     	; 0x26e2 <analogWrite+0x6a>
					digitalWrite(pin, LOW);
				} else {
					digitalWrite(pin, HIGH);
    26ba:	81 2f       	mov	r24, r17
    26bc:	61 e0       	ldi	r22, 0x01	; 1
    26be:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
				}
		}
	}
}
    26c2:	df 91       	pop	r29
    26c4:	cf 91       	pop	r28
    26c6:	1f 91       	pop	r17
    26c8:	08 95       	ret
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    26ca:	81 30       	cpi	r24, 0x01	; 1
    26cc:	91 f0       	breq	.+36     	; 0x26f2 <analogWrite+0x7a>
    26ce:	82 30       	cpi	r24, 0x02	; 2
    26d0:	89 f7       	brne	.-30     	; 0x26b4 <analogWrite+0x3c>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    26d2:	84 b5       	in	r24, 0x24	; 36
    26d4:	80 62       	ori	r24, 0x20	; 32
    26d6:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    26d8:	c8 bd       	out	0x28, r28	; 40
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	1f 91       	pop	r17
    26e0:	08 95       	ret
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
					digitalWrite(pin, LOW);
    26e2:	81 2f       	mov	r24, r17
    26e4:	60 e0       	ldi	r22, 0x00	; 0
    26e6:	0e 94 03 14 	call	0x2806	; 0x2806 <digitalWrite>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    26ea:	df 91       	pop	r29
    26ec:	cf 91       	pop	r28
    26ee:	1f 91       	pop	r17
    26f0:	08 95       	ret
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    26f2:	84 b5       	in	r24, 0x24	; 36
    26f4:	80 68       	ori	r24, 0x80	; 128
    26f6:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    26f8:	c7 bd       	out	0x27, r28	; 39
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	1f 91       	pop	r17
    2700:	08 95       	ret
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    2702:	80 91 b0 00 	lds	r24, 0x00B0
    2706:	80 68       	ori	r24, 0x80	; 128
    2708:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    270c:	c0 93 b3 00 	sts	0x00B3, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	1f 91       	pop	r17
    2716:	08 95       	ret
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    2718:	80 91 80 00 	lds	r24, 0x0080
    271c:	80 68       	ori	r24, 0x80	; 128
    271e:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    2722:	d0 93 89 00 	sts	0x0089, r29
    2726:	c0 93 88 00 	sts	0x0088, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    272a:	df 91       	pop	r29
    272c:	cf 91       	pop	r28
    272e:	1f 91       	pop	r17
    2730:	08 95       	ret
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    2732:	80 91 80 00 	lds	r24, 0x0080
    2736:	80 62       	ori	r24, 0x20	; 32
    2738:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    273c:	d0 93 8b 00 	sts	0x008B, r29
    2740:	c0 93 8a 00 	sts	0x008A, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2744:	df 91       	pop	r29
    2746:	cf 91       	pop	r28
    2748:	1f 91       	pop	r17
    274a:	08 95       	ret
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    274c:	80 91 b0 00 	lds	r24, 0x00B0
    2750:	80 62       	ori	r24, 0x20	; 32
    2752:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    2756:	c0 93 b4 00 	sts	0x00B4, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    275a:	df 91       	pop	r29
    275c:	cf 91       	pop	r28
    275e:	1f 91       	pop	r17
    2760:	08 95       	ret

00002762 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	fc 01       	movw	r30, r24
    2766:	eb 54       	subi	r30, 0x4B	; 75
    2768:	fc 4f       	sbci	r31, 0xFC	; 252
    276a:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    276c:	fc 01       	movw	r30, r24
    276e:	ef 55       	subi	r30, 0x5F	; 95
    2770:	fc 4f       	sbci	r31, 0xFC	; 252
    2772:	e4 91       	lpm	r30, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    2774:	ee 23       	and	r30, r30
    2776:	79 f0       	breq	.+30     	; 0x2796 <pinMode+0x34>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	ee 0f       	add	r30, r30
    277c:	ff 1f       	adc	r31, r31
    277e:	ed 57       	subi	r30, 0x7D	; 125
    2780:	fc 4f       	sbci	r31, 0xFC	; 252
    2782:	a5 91       	lpm	r26, Z+
    2784:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
    2786:	66 23       	and	r22, r22
    2788:	39 f0       	breq	.+14     	; 0x2798 <pinMode+0x36>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    278a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    278c:	f8 94       	cli
		*reg |= bit;
    278e:	8c 91       	ld	r24, X
    2790:	82 2b       	or	r24, r18
    2792:	8c 93       	st	X, r24
		SREG = oldSREG;
    2794:	9f bf       	out	0x3f, r25	; 63
    2796:	08 95       	ret

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
    2798:	9f b7       	in	r25, 0x3f	; 63
                cli();
    279a:	f8 94       	cli
		*reg &= ~bit;
    279c:	8c 91       	ld	r24, X
    279e:	20 95       	com	r18
    27a0:	82 23       	and	r24, r18
    27a2:	8c 93       	st	X, r24
		SREG = oldSREG;
    27a4:	9f bf       	out	0x3f, r25	; 63
    27a6:	08 95       	ret

000027a8 <_ZL10turnOffPWMh>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    27a8:	83 30       	cpi	r24, 0x03	; 3
    27aa:	39 f1       	breq	.+78     	; 0x27fa <_ZL10turnOffPWMh+0x52>
    27ac:	84 30       	cpi	r24, 0x04	; 4
    27ae:	60 f0       	brcs	.+24     	; 0x27c8 <_ZL10turnOffPWMh+0x20>
    27b0:	86 30       	cpi	r24, 0x06	; 6
    27b2:	c9 f0       	breq	.+50     	; 0x27e6 <_ZL10turnOffPWMh+0x3e>
    27b4:	87 30       	cpi	r24, 0x07	; 7
    27b6:	69 f0       	breq	.+26     	; 0x27d2 <_ZL10turnOffPWMh+0x2a>
    27b8:	84 30       	cpi	r24, 0x04	; 4
    27ba:	51 f4       	brne	.+20     	; 0x27d0 <_ZL10turnOffPWMh+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    27bc:	80 91 80 00 	lds	r24, 0x0080
    27c0:	8f 7d       	andi	r24, 0xDF	; 223
    27c2:	80 93 80 00 	sts	0x0080, r24
    27c6:	08 95       	ret
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    27c8:	81 30       	cpi	r24, 0x01	; 1
    27ca:	99 f0       	breq	.+38     	; 0x27f2 <_ZL10turnOffPWMh+0x4a>
    27cc:	82 30       	cpi	r24, 0x02	; 2
    27ce:	39 f0       	breq	.+14     	; 0x27de <_ZL10turnOffPWMh+0x36>
    27d0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    27d2:	80 91 b0 00 	lds	r24, 0x00B0
    27d6:	8f 7d       	andi	r24, 0xDF	; 223
    27d8:	80 93 b0 00 	sts	0x00B0, r24
    27dc:	08 95       	ret
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    27de:	84 b5       	in	r24, 0x24	; 36
    27e0:	8f 7d       	andi	r24, 0xDF	; 223
    27e2:	84 bd       	out	0x24, r24	; 36
    27e4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    27e6:	80 91 b0 00 	lds	r24, 0x00B0
    27ea:	8f 77       	andi	r24, 0x7F	; 127
    27ec:	80 93 b0 00 	sts	0x00B0, r24
    27f0:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    27f2:	84 b5       	in	r24, 0x24	; 36
    27f4:	8f 77       	andi	r24, 0x7F	; 127
    27f6:	84 bd       	out	0x24, r24	; 36
    27f8:	08 95       	ret
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    27fa:	80 91 80 00 	lds	r24, 0x0080
    27fe:	8f 77       	andi	r24, 0x7F	; 127
    2800:	80 93 80 00 	sts	0x0080, r24
    2804:	08 95       	ret

00002806 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2806:	0f 93       	push	r16
    2808:	1f 93       	push	r17
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	0f 92       	push	r0
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    2814:	28 2f       	mov	r18, r24
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	f9 01       	movw	r30, r18
    281a:	e7 53       	subi	r30, 0x37	; 55
    281c:	fc 4f       	sbci	r31, 0xFC	; 252
    281e:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2820:	f9 01       	movw	r30, r18
    2822:	eb 54       	subi	r30, 0x4B	; 75
    2824:	fc 4f       	sbci	r31, 0xFC	; 252
    2826:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
    2828:	2f 55       	subi	r18, 0x5F	; 95
    282a:	3c 4f       	sbci	r19, 0xFC	; 252
    282c:	f9 01       	movw	r30, r18
    282e:	14 91       	lpm	r17, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2830:	11 23       	and	r17, r17
    2832:	91 f0       	breq	.+36     	; 0x2858 <digitalWrite+0x52>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2834:	88 23       	and	r24, r24
    2836:	19 f5       	brne	.+70     	; 0x287e <digitalWrite+0x78>

	out = portOutputRegister(port);
    2838:	e1 2f       	mov	r30, r17
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	ee 0f       	add	r30, r30
    283e:	ff 1f       	adc	r31, r31
    2840:	e3 57       	subi	r30, 0x73	; 115
    2842:	fc 4f       	sbci	r31, 0xFC	; 252
    2844:	a5 91       	lpm	r26, Z+
    2846:	b4 91       	lpm	r27, Z+

	if (val == LOW) {
    2848:	66 23       	and	r22, r22
    284a:	61 f0       	breq	.+24     	; 0x2864 <digitalWrite+0x5e>
		uint8_t oldSREG = SREG;
                cli();
		*out &= ~bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    284c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    284e:	f8 94       	cli
		*out |= bit;
    2850:	8c 91       	ld	r24, X
    2852:	80 2b       	or	r24, r16
    2854:	8c 93       	st	X, r24
		SREG = oldSREG;
    2856:	9f bf       	out	0x3f, r25	; 63
	}
}
    2858:	0f 90       	pop	r0
    285a:	cf 91       	pop	r28
    285c:	df 91       	pop	r29
    285e:	1f 91       	pop	r17
    2860:	0f 91       	pop	r16
    2862:	08 95       	ret
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);

	if (val == LOW) {
		uint8_t oldSREG = SREG;
    2864:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2866:	f8 94       	cli
		*out &= ~bit;
    2868:	8c 91       	ld	r24, X
    286a:	00 95       	com	r16
    286c:	80 23       	and	r24, r16
    286e:	8c 93       	st	X, r24
		SREG = oldSREG;
    2870:	9f bf       	out	0x3f, r25	; 63
		uint8_t oldSREG = SREG;
                cli();
		*out |= bit;
		SREG = oldSREG;
	}
}
    2872:	0f 90       	pop	r0
    2874:	cf 91       	pop	r28
    2876:	df 91       	pop	r29
    2878:	1f 91       	pop	r17
    287a:	0f 91       	pop	r16
    287c:	08 95       	ret

	if (port == NOT_A_PIN) return;

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    287e:	69 83       	std	Y+1, r22	; 0x01
    2880:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <_ZL10turnOffPWMh>
    2884:	69 81       	ldd	r22, Y+1	; 0x01
    2886:	d8 cf       	rjmp	.-80     	; 0x2838 <digitalWrite+0x32>

00002888 <digitalRead>:
		SREG = oldSREG;
	}
}

int digitalRead(uint8_t pin)
{
    2888:	0f 93       	push	r16
    288a:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
    288c:	28 2f       	mov	r18, r24
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	f9 01       	movw	r30, r18
    2892:	e7 53       	subi	r30, 0x37	; 55
    2894:	fc 4f       	sbci	r31, 0xFC	; 252
    2896:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2898:	f9 01       	movw	r30, r18
    289a:	eb 54       	subi	r30, 0x4B	; 75
    289c:	fc 4f       	sbci	r31, 0xFC	; 252
    289e:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
    28a0:	2f 55       	subi	r18, 0x5F	; 95
    28a2:	3c 4f       	sbci	r19, 0xFC	; 252
    28a4:	f9 01       	movw	r30, r18
    28a6:	14 91       	lpm	r17, Z+

	if (port == NOT_A_PIN) return LOW;
    28a8:	11 23       	and	r17, r17
    28aa:	c9 f0       	breq	.+50     	; 0x28de <digitalRead+0x56>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    28ac:	88 23       	and	r24, r24
    28ae:	e9 f4       	brne	.+58     	; 0x28ea <digitalRead+0x62>

	if (*portInputRegister(port) & bit) return HIGH;
    28b0:	e1 2f       	mov	r30, r17
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	ee 0f       	add	r30, r30
    28b6:	ff 1f       	adc	r31, r31
    28b8:	e9 56       	subi	r30, 0x69	; 105
    28ba:	fc 4f       	sbci	r31, 0xFC	; 252
    28bc:	a5 91       	lpm	r26, Z+
    28be:	b4 91       	lpm	r27, Z+
    28c0:	8c 91       	ld	r24, X
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	80 23       	and	r24, r16
    28c8:	21 f4       	brne	.+8      	; 0x28d2 <digitalRead+0x4a>
	return LOW;
}
    28ca:	c9 01       	movw	r24, r18
    28cc:	1f 91       	pop	r17
    28ce:	0f 91       	pop	r16
    28d0:	08 95       	ret

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    28d2:	21 e0       	ldi	r18, 0x01	; 1
    28d4:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    28d6:	c9 01       	movw	r24, r18
    28d8:	1f 91       	pop	r17
    28da:	0f 91       	pop	r16
    28dc:	08 95       	ret
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    28e2:	c9 01       	movw	r24, r18
    28e4:	1f 91       	pop	r17
    28e6:	0f 91       	pop	r16
    28e8:	08 95       	ret

	if (port == NOT_A_PIN) return LOW;

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    28ea:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <_ZL10turnOffPWMh>
    28ee:	e0 cf       	rjmp	.-64     	; 0x28b0 <digitalRead+0x28>

000028f0 <_ZNK6String6charAtEj>:
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

char String::charAt( unsigned int loc ) const
{
    28f0:	dc 01       	movw	r26, r24
    28f2:	ed 91       	ld	r30, X+
    28f4:	fc 91       	ld	r31, X
    28f6:	11 97       	sbiw	r26, 0x01	; 1
    28f8:	e6 0f       	add	r30, r22
    28fa:	f7 1f       	adc	r31, r23
  return operator[]( loc );
}
    28fc:	80 81       	ld	r24, Z
    28fe:	08 95       	ret

00002900 <_ZN6String9setCharAtEjc>:

void String::setCharAt( unsigned int loc, const char aChar ) 
{
    2900:	fc 01       	movw	r30, r24
  if(_buffer == NULL) return;
    2902:	80 81       	ld	r24, Z
    2904:	91 81       	ldd	r25, Z+1	; 0x01
    2906:	00 97       	sbiw	r24, 0x00	; 0
    2908:	49 f0       	breq	.+18     	; 0x291c <_ZN6String9setCharAtEjc+0x1c>
  if(_length > loc) {
    290a:	24 81       	ldd	r18, Z+4	; 0x04
    290c:	35 81       	ldd	r19, Z+5	; 0x05
    290e:	62 17       	cp	r22, r18
    2910:	73 07       	cpc	r23, r19
    2912:	20 f4       	brcc	.+8      	; 0x291c <_ZN6String9setCharAtEjc+0x1c>
    _buffer[loc] = aChar;
    2914:	68 0f       	add	r22, r24
    2916:	79 1f       	adc	r23, r25
    2918:	fb 01       	movw	r30, r22
    291a:	40 83       	st	Z, r20
    291c:	08 95       	ret

0000291e <_ZN6StringixEj>:
{
  return strcmp( _buffer, rhs._buffer ) >= 0;
}

char & String::operator[]( unsigned int index )
{
    291e:	fc 01       	movw	r30, r24
  static char dummy_writable_char;
  if (index >= _length || !_buffer) {
    2920:	84 81       	ldd	r24, Z+4	; 0x04
    2922:	95 81       	ldd	r25, Z+5	; 0x05
    2924:	68 17       	cp	r22, r24
    2926:	79 07       	cpc	r23, r25
    2928:	40 f4       	brcc	.+16     	; 0x293a <_ZN6StringixEj+0x1c>
    292a:	80 81       	ld	r24, Z
    292c:	91 81       	ldd	r25, Z+1	; 0x01
    292e:	00 97       	sbiw	r24, 0x00	; 0
    2930:	21 f0       	breq	.+8      	; 0x293a <_ZN6StringixEj+0x1c>
    dummy_writable_char = 0;
    return dummy_writable_char;
  }
  return _buffer[ index ];
    2932:	68 0f       	add	r22, r24
    2934:	79 1f       	adc	r23, r25
}
    2936:	cb 01       	movw	r24, r22
    2938:	08 95       	ret

char & String::operator[]( unsigned int index )
{
  static char dummy_writable_char;
  if (index >= _length || !_buffer) {
    dummy_writable_char = 0;
    293a:	10 92 d2 06 	sts	0x06D2, r1
    293e:	62 ed       	ldi	r22, 0xD2	; 210
    2940:	76 e0       	ldi	r23, 0x06	; 6
    return dummy_writable_char;
  }
  return _buffer[ index ];
}
    2942:	cb 01       	movw	r24, r22
    2944:	08 95       	ret

00002946 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
    2946:	dc 01       	movw	r26, r24
    2948:	ed 91       	ld	r30, X+
    294a:	fc 91       	ld	r31, X
    294c:	11 97       	sbiw	r26, 0x01	; 1
    294e:	e6 0f       	add	r30, r22
    2950:	f7 1f       	adc	r31, r23
  // need to check for valid index, to do later
  return _buffer[ index ];
}
    2952:	80 81       	ld	r24, Z
    2954:	08 95       	ret

00002956 <_ZN6String5toIntEv>:
  buf[len] = 0;
}


long String::toInt() {
  return atol(_buffer);
    2956:	fc 01       	movw	r30, r24
    2958:	80 81       	ld	r24, Z
    295a:	91 81       	ldd	r25, Z+1	; 0x01
    295c:	0e 94 5e 29 	call	0x52bc	; 0x52bc <atol>
}
    2960:	08 95       	ret

00002962 <_ZN6String11toCharArrayEPcj>:
  strncpy((char *)buf, _buffer, len);
  buf[len] = 0;
}

void String::toCharArray(char *buf, unsigned int bufsize)
{
    2962:	0f 93       	push	r16
    2964:	1f 93       	push	r17
    2966:	cf 93       	push	r28
    2968:	df 93       	push	r29
    296a:	fc 01       	movw	r30, r24
    296c:	eb 01       	movw	r28, r22
  if (!bufsize || !buf) return;
    296e:	41 15       	cp	r20, r1
    2970:	51 05       	cpc	r21, r1
    2972:	a1 f0       	breq	.+40     	; 0x299c <_ZN6String11toCharArrayEPcj+0x3a>
    2974:	61 15       	cp	r22, r1
    2976:	71 05       	cpc	r23, r1
    2978:	89 f0       	breq	.+34     	; 0x299c <_ZN6String11toCharArrayEPcj+0x3a>
  unsigned int len = bufsize - 1;
    297a:	84 81       	ldd	r24, Z+4	; 0x04
    297c:	95 81       	ldd	r25, Z+5	; 0x05
    297e:	8a 01       	movw	r16, r20
    2980:	01 50       	subi	r16, 0x01	; 1
    2982:	10 40       	sbci	r17, 0x00	; 0
    2984:	80 17       	cp	r24, r16
    2986:	91 07       	cpc	r25, r17
    2988:	70 f0       	brcs	.+28     	; 0x29a6 <_ZN6String11toCharArrayEPcj+0x44>
  if (len > _length) len = _length;
  strncpy(buf, _buffer, len);
    298a:	60 81       	ld	r22, Z
    298c:	71 81       	ldd	r23, Z+1	; 0x01
    298e:	ce 01       	movw	r24, r28
    2990:	a8 01       	movw	r20, r16
    2992:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <strncpy>
  buf[len] = 0;
    2996:	c0 0f       	add	r28, r16
    2998:	d1 1f       	adc	r29, r17
    299a:	18 82       	st	Y, r1
}
    299c:	df 91       	pop	r29
    299e:	cf 91       	pop	r28
    29a0:	1f 91       	pop	r17
    29a2:	0f 91       	pop	r16
    29a4:	08 95       	ret
}

void String::toCharArray(char *buf, unsigned int bufsize)
{
  if (!bufsize || !buf) return;
  unsigned int len = bufsize - 1;
    29a6:	8c 01       	movw	r16, r24
    29a8:	f0 cf       	rjmp	.-32     	; 0x298a <_ZN6String11toCharArrayEPcj+0x28>

000029aa <_ZN6String8getBytesEPhj>:

  return temp.substring( i, j + 1);
}

void String::getBytes(unsigned char *buf, unsigned int bufsize)
{
    29aa:	0f 93       	push	r16
    29ac:	1f 93       	push	r17
    29ae:	cf 93       	push	r28
    29b0:	df 93       	push	r29
    29b2:	fc 01       	movw	r30, r24
    29b4:	eb 01       	movw	r28, r22
  if (!bufsize || !buf) return;
    29b6:	41 15       	cp	r20, r1
    29b8:	51 05       	cpc	r21, r1
    29ba:	a1 f0       	breq	.+40     	; 0x29e4 <_ZN6String8getBytesEPhj+0x3a>
    29bc:	61 15       	cp	r22, r1
    29be:	71 05       	cpc	r23, r1
    29c0:	89 f0       	breq	.+34     	; 0x29e4 <_ZN6String8getBytesEPhj+0x3a>
  unsigned int len = bufsize - 1;
    29c2:	84 81       	ldd	r24, Z+4	; 0x04
    29c4:	95 81       	ldd	r25, Z+5	; 0x05
    29c6:	8a 01       	movw	r16, r20
    29c8:	01 50       	subi	r16, 0x01	; 1
    29ca:	10 40       	sbci	r17, 0x00	; 0
    29cc:	80 17       	cp	r24, r16
    29ce:	91 07       	cpc	r25, r17
    29d0:	70 f0       	brcs	.+28     	; 0x29ee <_ZN6String8getBytesEPhj+0x44>
  if (len > _length) len = _length;
  strncpy((char *)buf, _buffer, len);
    29d2:	60 81       	ld	r22, Z
    29d4:	71 81       	ldd	r23, Z+1	; 0x01
    29d6:	ce 01       	movw	r24, r28
    29d8:	a8 01       	movw	r20, r16
    29da:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <strncpy>
  buf[len] = 0;
    29de:	c0 0f       	add	r28, r16
    29e0:	d1 1f       	adc	r29, r17
    29e2:	18 82       	st	Y, r1
}
    29e4:	df 91       	pop	r29
    29e6:	cf 91       	pop	r28
    29e8:	1f 91       	pop	r17
    29ea:	0f 91       	pop	r16
    29ec:	08 95       	ret
}

void String::getBytes(unsigned char *buf, unsigned int bufsize)
{
  if (!bufsize || !buf) return;
  unsigned int len = bufsize - 1;
    29ee:	8c 01       	movw	r16, r24
    29f0:	f0 cf       	rjmp	.-32     	; 0x29d2 <_ZN6String8getBytesEPhj+0x28>

000029f2 <_ZNK6String10startsWithERKS_j>:

  return startsWith( s2, 0 );
}

boolean String::startsWith( const String &s2, unsigned int offset ) const
{
    29f2:	fc 01       	movw	r30, r24
    29f4:	db 01       	movw	r26, r22
    29f6:	ca 01       	movw	r24, r20
  if ( offset > _length - s2._length )
    29f8:	14 96       	adiw	r26, 0x04	; 4
    29fa:	4d 91       	ld	r20, X+
    29fc:	5c 91       	ld	r21, X
    29fe:	15 97       	sbiw	r26, 0x05	; 5
    2a00:	24 81       	ldd	r18, Z+4	; 0x04
    2a02:	35 81       	ldd	r19, Z+5	; 0x05
    2a04:	24 1b       	sub	r18, r20
    2a06:	35 0b       	sbc	r19, r21
    2a08:	28 17       	cp	r18, r24
    2a0a:	39 07       	cpc	r19, r25
    2a0c:	80 f0       	brcs	.+32     	; 0x2a2e <_ZNK6String10startsWithERKS_j+0x3c>
    return 0;

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
    2a0e:	20 81       	ld	r18, Z
    2a10:	31 81       	ldd	r19, Z+1	; 0x01
    2a12:	6d 91       	ld	r22, X+
    2a14:	7c 91       	ld	r23, X
    2a16:	82 0f       	add	r24, r18
    2a18:	93 1f       	adc	r25, r19
    2a1a:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <strncmp>
    2a1e:	9c 01       	movw	r18, r24
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	21 15       	cp	r18, r1
    2a24:	31 05       	cpc	r19, r1
    2a26:	09 f0       	breq	.+2      	; 0x2a2a <_ZNK6String10startsWithERKS_j+0x38>
}
    2a28:	08 95       	ret
boolean String::startsWith( const String &s2, unsigned int offset ) const
{
  if ( offset > _length - s2._length )
    return 0;

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
}
    2a2c:	08 95       	ret
  return startsWith( s2, 0 );
}

boolean String::startsWith( const String &s2, unsigned int offset ) const
{
  if ( offset > _length - s2._length )
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	08 95       	ret

00002a32 <_ZNK6String10startsWithERKS_>:
  return -1;
}

boolean String::startsWith( const String &s2 ) const
{
  if ( _length < s2._length )
    2a32:	fc 01       	movw	r30, r24
    2a34:	44 81       	ldd	r20, Z+4	; 0x04
    2a36:	55 81       	ldd	r21, Z+5	; 0x05
    2a38:	fb 01       	movw	r30, r22
    2a3a:	24 81       	ldd	r18, Z+4	; 0x04
    2a3c:	35 81       	ldd	r19, Z+5	; 0x05
    2a3e:	42 17       	cp	r20, r18
    2a40:	53 07       	cpc	r21, r19
    2a42:	10 f4       	brcc	.+4      	; 0x2a48 <_ZNK6String10startsWithERKS_+0x16>
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	08 95       	ret
    return 0;

  return startsWith( s2, 0 );
    2a48:	40 e0       	ldi	r20, 0x00	; 0
    2a4a:	50 e0       	ldi	r21, 0x00	; 0
    2a4c:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <_ZNK6String10startsWithERKS_j>
}
    2a50:	08 95       	ret

00002a52 <_ZNK6String11lastIndexOfEcj>:
{
  return lastIndexOf( theChar, _length - 1 );
}

int String::lastIndexOf( char ch, unsigned int fromIndex ) const
{
    2a52:	df 92       	push	r13
    2a54:	ef 92       	push	r14
    2a56:	ff 92       	push	r15
    2a58:	0f 93       	push	r16
    2a5a:	1f 93       	push	r17
    2a5c:	cf 93       	push	r28
    2a5e:	df 93       	push	r29
    2a60:	ec 01       	movw	r28, r24
  if ( fromIndex >= _length )
    2a62:	8c 81       	ldd	r24, Y+4	; 0x04
    2a64:	9d 81       	ldd	r25, Y+5	; 0x05
    2a66:	48 17       	cp	r20, r24
    2a68:	59 07       	cpc	r21, r25
    2a6a:	58 f0       	brcs	.+22     	; 0x2a82 <_ZNK6String11lastIndexOfEcj+0x30>
  char tempchar = _buffer[fromIndex + 1];
  _buffer[fromIndex + 1] = '\0';
  char* temp = strrchr( _buffer, ch );
  _buffer[fromIndex + 1] = tempchar;

  if ( temp == NULL )
    2a6c:	2f ef       	ldi	r18, 0xFF	; 255
    2a6e:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;

  return temp - _buffer;
}
    2a70:	c9 01       	movw	r24, r18
    2a72:	df 91       	pop	r29
    2a74:	cf 91       	pop	r28
    2a76:	1f 91       	pop	r17
    2a78:	0f 91       	pop	r16
    2a7a:	ff 90       	pop	r15
    2a7c:	ef 90       	pop	r14
    2a7e:	df 90       	pop	r13
    2a80:	08 95       	ret
int String::lastIndexOf( char ch, unsigned int fromIndex ) const
{
  if ( fromIndex >= _length )
    return -1;

  char tempchar = _buffer[fromIndex + 1];
    2a82:	8a 01       	movw	r16, r20
    2a84:	0f 5f       	subi	r16, 0xFF	; 255
    2a86:	1f 4f       	sbci	r17, 0xFF	; 255
    2a88:	e8 81       	ld	r30, Y
    2a8a:	f9 81       	ldd	r31, Y+1	; 0x01
    2a8c:	e0 0f       	add	r30, r16
    2a8e:	f1 1f       	adc	r31, r17
    2a90:	d0 80       	ld	r13, Z
  _buffer[fromIndex + 1] = '\0';
    2a92:	10 82       	st	Z, r1
  char* temp = strrchr( _buffer, ch );
    2a94:	e8 80       	ld	r14, Y
    2a96:	f9 80       	ldd	r15, Y+1	; 0x01
    2a98:	c7 01       	movw	r24, r14
    2a9a:	70 e0       	ldi	r23, 0x00	; 0
    2a9c:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <strrchr>
    2aa0:	9c 01       	movw	r18, r24
  _buffer[fromIndex + 1] = tempchar;
    2aa2:	0e 0d       	add	r16, r14
    2aa4:	1f 1d       	adc	r17, r15
    2aa6:	f8 01       	movw	r30, r16
    2aa8:	d0 82       	st	Z, r13

  if ( temp == NULL )
    2aaa:	00 97       	sbiw	r24, 0x00	; 0
    2aac:	f9 f2       	breq	.-66     	; 0x2a6c <_ZNK6String11lastIndexOfEcj+0x1a>
    return -1;

  return temp - _buffer;
    2aae:	88 81       	ld	r24, Y
    2ab0:	99 81       	ldd	r25, Y+1	; 0x01
    2ab2:	28 1b       	sub	r18, r24
    2ab4:	39 0b       	sbc	r19, r25
    2ab6:	dc cf       	rjmp	.-72     	; 0x2a70 <_ZNK6String11lastIndexOfEcj+0x1e>

00002ab8 <_ZNK6String11lastIndexOfEc>:
  return theFind - _buffer; // pointer subtraction
}

int String::lastIndexOf( char theChar ) const
{
  return lastIndexOf( theChar, _length - 1 );
    2ab8:	fc 01       	movw	r30, r24
    2aba:	44 81       	ldd	r20, Z+4	; 0x04
    2abc:	55 81       	ldd	r21, Z+5	; 0x05
    2abe:	41 50       	subi	r20, 0x01	; 1
    2ac0:	50 40       	sbci	r21, 0x00	; 0
    2ac2:	0e 94 29 15 	call	0x2a52	; 0x2a52 <_ZNK6String11lastIndexOfEcj>
}
    2ac6:	08 95       	ret

00002ac8 <_ZNK6String7indexOfERKS_j>:
{
  return indexOf( s2, 0 );
}

int String::indexOf( const String &s2, unsigned int fromIndex ) const
{
    2ac8:	cf 93       	push	r28
    2aca:	df 93       	push	r29
    2acc:	fc 01       	movw	r30, r24
  if ( fromIndex >= _length )
    2ace:	84 81       	ldd	r24, Z+4	; 0x04
    2ad0:	95 81       	ldd	r25, Z+5	; 0x05
    2ad2:	48 17       	cp	r20, r24
    2ad4:	59 07       	cpc	r21, r25
    2ad6:	30 f0       	brcs	.+12     	; 0x2ae4 <_ZNK6String7indexOfERKS_j+0x1c>
    return -1;

  const char *theFind = strstr( &_buffer[ fromIndex ], s2._buffer );

  if ( theFind == NULL )
    2ad8:	2f ef       	ldi	r18, 0xFF	; 255
    2ada:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;

  return theFind - _buffer; // pointer subtraction
}
    2adc:	c9 01       	movw	r24, r18
    2ade:	df 91       	pop	r29
    2ae0:	cf 91       	pop	r28
    2ae2:	08 95       	ret
int String::indexOf( const String &s2, unsigned int fromIndex ) const
{
  if ( fromIndex >= _length )
    return -1;

  const char *theFind = strstr( &_buffer[ fromIndex ], s2._buffer );
    2ae4:	c0 81       	ld	r28, Z
    2ae6:	d1 81       	ldd	r29, Z+1	; 0x01
    2ae8:	fb 01       	movw	r30, r22
    2aea:	60 81       	ld	r22, Z
    2aec:	71 81       	ldd	r23, Z+1	; 0x01
    2aee:	ce 01       	movw	r24, r28
    2af0:	84 0f       	add	r24, r20
    2af2:	95 1f       	adc	r25, r21
    2af4:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <strstr>
    2af8:	9c 01       	movw	r18, r24

  if ( theFind == NULL )
    2afa:	00 97       	sbiw	r24, 0x00	; 0
    2afc:	69 f3       	breq	.-38     	; 0x2ad8 <_ZNK6String7indexOfERKS_j+0x10>
    return -1;

  return theFind - _buffer; // pointer subtraction
    2afe:	2c 1b       	sub	r18, r28
    2b00:	3d 0b       	sbc	r19, r29
    2b02:	ec cf       	rjmp	.-40     	; 0x2adc <_ZNK6String7indexOfERKS_j+0x14>

00002b04 <_ZNK6String7indexOfERKS_>:
  return temp - _buffer;
}

int String::indexOf( const String &s2 ) const
{
  return indexOf( s2, 0 );
    2b04:	40 e0       	ldi	r20, 0x00	; 0
    2b06:	50 e0       	ldi	r21, 0x00	; 0
    2b08:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_ZNK6String7indexOfERKS_j>
}
    2b0c:	08 95       	ret

00002b0e <_ZNK6String7indexOfEcj>:
{
  return indexOf( temp, 0 );
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	fc 01       	movw	r30, r24
  if ( fromIndex >= _length )
    2b14:	84 81       	ldd	r24, Z+4	; 0x04
    2b16:	95 81       	ldd	r25, Z+5	; 0x05
    2b18:	48 17       	cp	r20, r24
    2b1a:	59 07       	cpc	r21, r25
    2b1c:	30 f0       	brcs	.+12     	; 0x2b2a <_ZNK6String7indexOfEcj+0x1c>
    return -1;

  const char* temp = strchr( &_buffer[fromIndex], ch );
  if ( temp == NULL )
    2b1e:	2f ef       	ldi	r18, 0xFF	; 255
    2b20:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;

  return temp - _buffer;
}
    2b22:	c9 01       	movw	r24, r18
    2b24:	df 91       	pop	r29
    2b26:	cf 91       	pop	r28
    2b28:	08 95       	ret
int String::indexOf( char ch, unsigned int fromIndex ) const
{
  if ( fromIndex >= _length )
    return -1;

  const char* temp = strchr( &_buffer[fromIndex], ch );
    2b2a:	c0 81       	ld	r28, Z
    2b2c:	d1 81       	ldd	r29, Z+1	; 0x01
    2b2e:	ce 01       	movw	r24, r28
    2b30:	84 0f       	add	r24, r20
    2b32:	95 1f       	adc	r25, r21
    2b34:	70 e0       	ldi	r23, 0x00	; 0
    2b36:	0e 94 b8 29 	call	0x5370	; 0x5370 <strchr>
    2b3a:	9c 01       	movw	r18, r24
  if ( temp == NULL )
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	79 f3       	breq	.-34     	; 0x2b1e <_ZNK6String7indexOfEcj+0x10>
    return -1;

  return temp - _buffer;
    2b40:	2c 1b       	sub	r18, r28
    2b42:	3d 0b       	sbc	r19, r29
    2b44:	ee cf       	rjmp	.-36     	; 0x2b22 <_ZNK6String7indexOfEcj+0x14>

00002b46 <_ZNK6String7indexOfEc>:
  return newString;
}

int String::indexOf( char temp ) const
{
  return indexOf( temp, 0 );
    2b46:	40 e0       	ldi	r20, 0x00	; 0
    2b48:	50 e0       	ldi	r21, 0x00	; 0
    2b4a:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <_ZNK6String7indexOfEcj>
}
    2b4e:	08 95       	ret

00002b50 <_ZNK6String6equalsERKS_>:

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
}

boolean String::equals( const String &s2 ) const
{
    2b50:	fc 01       	movw	r30, r24
    2b52:	db 01       	movw	r26, r22
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
    2b54:	24 81       	ldd	r18, Z+4	; 0x04
    2b56:	35 81       	ldd	r19, Z+5	; 0x05
    2b58:	14 96       	adiw	r26, 0x04	; 4
    2b5a:	8d 91       	ld	r24, X+
    2b5c:	9c 91       	ld	r25, X
    2b5e:	15 97       	sbiw	r26, 0x05	; 5
    2b60:	28 17       	cp	r18, r24
    2b62:	39 07       	cpc	r19, r25
    2b64:	11 f0       	breq	.+4      	; 0x2b6a <_ZNK6String6equalsERKS_+0x1a>
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	08 95       	ret
    2b6a:	6d 91       	ld	r22, X+
    2b6c:	7c 91       	ld	r23, X
    2b6e:	80 81       	ld	r24, Z
    2b70:	91 81       	ldd	r25, Z+1	; 0x01
    2b72:	0e 94 c3 29 	call	0x5386	; 0x5386 <strcmp>
    2b76:	9c 01       	movw	r18, r24
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	21 15       	cp	r18, r1
    2b7c:	31 05       	cpc	r19, r1
    2b7e:	09 f0       	breq	.+2      	; 0x2b82 <_ZNK6String6equalsERKS_+0x32>
}
    2b80:	08 95       	ret
  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
}

boolean String::equals( const String &s2 ) const
{
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
    2b82:	81 e0       	ldi	r24, 0x01	; 1
}
    2b84:	08 95       	ret

00002b86 <_ZNK6String8endsWithERKS_>:
  // need to check for valid index, to do later
  return _buffer[ index ];
}

boolean String::endsWith( const String &s2 ) const
{
    2b86:	fc 01       	movw	r30, r24
    2b88:	db 01       	movw	r26, r22
  if ( _length < s2._length )
    2b8a:	84 81       	ldd	r24, Z+4	; 0x04
    2b8c:	95 81       	ldd	r25, Z+5	; 0x05
    2b8e:	14 96       	adiw	r26, 0x04	; 4
    2b90:	2d 91       	ld	r18, X+
    2b92:	3c 91       	ld	r19, X
    2b94:	15 97       	sbiw	r26, 0x05	; 5
    2b96:	82 17       	cp	r24, r18
    2b98:	93 07       	cpc	r25, r19
    2b9a:	90 f0       	brcs	.+36     	; 0x2bc0 <_ZNK6String8endsWithERKS_+0x3a>
    return 0;

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
    2b9c:	82 1b       	sub	r24, r18
    2b9e:	93 0b       	sbc	r25, r19
    2ba0:	20 81       	ld	r18, Z
    2ba2:	31 81       	ldd	r19, Z+1	; 0x01
    2ba4:	6d 91       	ld	r22, X+
    2ba6:	7c 91       	ld	r23, X
    2ba8:	82 0f       	add	r24, r18
    2baa:	93 1f       	adc	r25, r19
    2bac:	0e 94 c3 29 	call	0x5386	; 0x5386 <strcmp>
    2bb0:	9c 01       	movw	r18, r24
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	21 15       	cp	r18, r1
    2bb6:	31 05       	cpc	r19, r1
    2bb8:	09 f0       	breq	.+2      	; 0x2bbc <_ZNK6String8endsWithERKS_+0x36>
}
    2bba:	08 95       	ret
boolean String::endsWith( const String &s2 ) const
{
  if ( _length < s2._length )
    return 0;

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
}
    2bbe:	08 95       	ret
  return _buffer[ index ];
}

boolean String::endsWith( const String &s2 ) const
{
  if ( _length < s2._length )
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	08 95       	ret

00002bc4 <_ZNK6StringgeERKS_>:
  return strcmp( _buffer, rhs._buffer ) <= 0;
}

int String::operator>=( const String & rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) >= 0;
    2bc4:	fb 01       	movw	r30, r22
    2bc6:	60 81       	ld	r22, Z
    2bc8:	71 81       	ldd	r23, Z+1	; 0x01
    2bca:	fc 01       	movw	r30, r24
    2bcc:	80 81       	ld	r24, Z
    2bce:	91 81       	ldd	r25, Z+1	; 0x01
    2bd0:	0e 94 c3 29 	call	0x5386	; 0x5386 <strcmp>
    2bd4:	29 2f       	mov	r18, r25
    2bd6:	33 27       	eor	r19, r19
    2bd8:	27 fd       	sbrc	r18, 7
    2bda:	30 95       	com	r19
    2bdc:	20 95       	com	r18
    2bde:	30 95       	com	r19
    2be0:	22 27       	eor	r18, r18
    2be2:	33 0f       	add	r19, r19
    2be4:	22 1f       	adc	r18, r18
    2be6:	33 27       	eor	r19, r19
}
    2be8:	c9 01       	movw	r24, r18
    2bea:	08 95       	ret

00002bec <_ZNK6StringleERKS_>:
  return strcmp( _buffer, rhs._buffer ) > 0;
}

int String::operator<=( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) <= 0;
    2bec:	fb 01       	movw	r30, r22
    2bee:	60 81       	ld	r22, Z
    2bf0:	71 81       	ldd	r23, Z+1	; 0x01
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	80 81       	ld	r24, Z
    2bf6:	91 81       	ldd	r25, Z+1	; 0x01
    2bf8:	0e 94 c3 29 	call	0x5386	; 0x5386 <strcmp>
    2bfc:	40 e0       	ldi	r20, 0x00	; 0
    2bfe:	50 e0       	ldi	r21, 0x00	; 0
    2c00:	18 16       	cp	r1, r24
    2c02:	19 06       	cpc	r1, r25
    2c04:	14 f4       	brge	.+4      	; 0x2c0a <_ZNK6StringleERKS_+0x1e>
}
    2c06:	ca 01       	movw	r24, r20
    2c08:	08 95       	ret
  return strcmp( _buffer, rhs._buffer ) > 0;
}

int String::operator<=( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) <= 0;
    2c0a:	41 e0       	ldi	r20, 0x01	; 1
    2c0c:	50 e0       	ldi	r21, 0x00	; 0
}
    2c0e:	ca 01       	movw	r24, r20
    2c10:	08 95       	ret

00002c12 <_ZNK6StringgtERKS_>:
  return strcmp( _buffer, rhs._buffer ) < 0;
}

int String::operator>( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) > 0;
    2c12:	fb 01       	movw	r30, r22
    2c14:	60 81       	ld	r22, Z
    2c16:	71 81       	ldd	r23, Z+1	; 0x01
    2c18:	fc 01       	movw	r30, r24
    2c1a:	80 81       	ld	r24, Z
    2c1c:	91 81       	ldd	r25, Z+1	; 0x01
    2c1e:	0e 94 c3 29 	call	0x5386	; 0x5386 <strcmp>
    2c22:	40 e0       	ldi	r20, 0x00	; 0
    2c24:	50 e0       	ldi	r21, 0x00	; 0
    2c26:	18 16       	cp	r1, r24
    2c28:	19 06       	cpc	r1, r25
    2c2a:	14 f4       	brge	.+4      	; 0x2c30 <_ZNK6StringgtERKS_+0x1e>
    2c2c:	41 e0       	ldi	r20, 0x01	; 1
    2c2e:	50 e0       	ldi	r21, 0x00	; 0
}
    2c30:	ca 01       	movw	r24, r20
    2c32:	08 95       	ret

00002c34 <_ZNK6StringltERKS_>:
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
}

int String::operator<( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) < 0;
    2c34:	fb 01       	movw	r30, r22
    2c36:	60 81       	ld	r22, Z
    2c38:	71 81       	ldd	r23, Z+1	; 0x01
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	80 81       	ld	r24, Z
    2c3e:	91 81       	ldd	r25, Z+1	; 0x01
    2c40:	0e 94 c3 29 	call	0x5386	; 0x5386 <strcmp>
    2c44:	29 2f       	mov	r18, r25
    2c46:	33 27       	eor	r19, r19
    2c48:	27 fd       	sbrc	r18, 7
    2c4a:	30 95       	com	r19
    2c4c:	22 27       	eor	r18, r18
    2c4e:	33 0f       	add	r19, r19
    2c50:	22 1f       	adc	r18, r18
    2c52:	33 27       	eor	r19, r19
}
    2c54:	c9 01       	movw	r24, r18
    2c56:	08 95       	ret

00002c58 <_ZNK6StringneERKS_>:
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
}

int String::operator!=( const String &rhs ) const
{
    2c58:	fc 01       	movw	r30, r24
    2c5a:	db 01       	movw	r26, r22
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
    2c5c:	24 81       	ldd	r18, Z+4	; 0x04
    2c5e:	35 81       	ldd	r19, Z+5	; 0x05
    2c60:	14 96       	adiw	r26, 0x04	; 4
    2c62:	8d 91       	ld	r24, X+
    2c64:	9c 91       	ld	r25, X
    2c66:	15 97       	sbiw	r26, 0x05	; 5
    2c68:	28 17       	cp	r18, r24
    2c6a:	39 07       	cpc	r19, r25
    2c6c:	21 f0       	breq	.+8      	; 0x2c76 <_ZNK6StringneERKS_+0x1e>
    2c6e:	21 e0       	ldi	r18, 0x01	; 1
    2c70:	30 e0       	ldi	r19, 0x00	; 0
}
    2c72:	c9 01       	movw	r24, r18
    2c74:	08 95       	ret
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
}

int String::operator!=( const String &rhs ) const
{
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
    2c76:	6d 91       	ld	r22, X+
    2c78:	7c 91       	ld	r23, X
    2c7a:	80 81       	ld	r24, Z
    2c7c:	91 81       	ldd	r25, Z+1	; 0x01
    2c7e:	0e 94 c3 29 	call	0x5386	; 0x5386 <strcmp>
    2c82:	9c 01       	movw	r18, r24
    2c84:	21 15       	cp	r18, r1
    2c86:	31 05       	cpc	r19, r1
    2c88:	91 f7       	brne	.-28     	; 0x2c6e <_ZNK6StringneERKS_+0x16>
}
    2c8a:	c9 01       	movw	r24, r18
    2c8c:	08 95       	ret

00002c8e <_ZNK6StringeqERKS_>:
  return *this;
}


int String::operator==( const String &rhs ) const
{
    2c8e:	fc 01       	movw	r30, r24
    2c90:	db 01       	movw	r26, r22
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
    2c92:	24 81       	ldd	r18, Z+4	; 0x04
    2c94:	35 81       	ldd	r19, Z+5	; 0x05
    2c96:	14 96       	adiw	r26, 0x04	; 4
    2c98:	8d 91       	ld	r24, X+
    2c9a:	9c 91       	ld	r25, X
    2c9c:	15 97       	sbiw	r26, 0x05	; 5
    2c9e:	28 17       	cp	r18, r24
    2ca0:	39 07       	cpc	r19, r25
    2ca2:	21 f0       	breq	.+8      	; 0x2cac <_ZNK6StringeqERKS_+0x1e>
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
}
    2ca8:	c9 01       	movw	r24, r18
    2caa:	08 95       	ret
}


int String::operator==( const String &rhs ) const
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
    2cac:	6d 91       	ld	r22, X+
    2cae:	7c 91       	ld	r23, X
    2cb0:	80 81       	ld	r24, Z
    2cb2:	91 81       	ldd	r25, Z+1	; 0x01
    2cb4:	0e 94 c3 29 	call	0x5386	; 0x5386 <strcmp>
    2cb8:	9c 01       	movw	r18, r24
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	21 15       	cp	r18, r1
    2cc0:	31 05       	cpc	r19, r1
    2cc2:	19 f0       	breq	.+6      	; 0x2cca <_ZNK6StringeqERKS_+0x3c>
    2cc4:	9c 01       	movw	r18, r24
}
    2cc6:	c9 01       	movw	r24, r18
    2cc8:	08 95       	ret
}


int String::operator==( const String &rhs ) const
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	9c 01       	movw	r18, r24
    2cd0:	fa cf       	rjmp	.-12     	; 0x2cc6 <_ZNK6StringeqERKS_+0x38>

00002cd2 <_ZNK6String9compareToERKS_>:
  }
}

int String::compareTo( const String &s2 ) const
{
  return strcmp( _buffer, s2._buffer );
    2cd2:	fb 01       	movw	r30, r22
    2cd4:	60 81       	ld	r22, Z
    2cd6:	71 81       	ldd	r23, Z+1	; 0x01
    2cd8:	fc 01       	movw	r30, r24
    2cda:	80 81       	ld	r24, Z
    2cdc:	91 81       	ldd	r25, Z+1	; 0x01
    2cde:	0e 94 c3 29 	call	0x5386	; 0x5386 <strcmp>
}
    2ce2:	08 95       	ret

00002ce4 <_ZN6StringpLERKS_>:
//  _buffer[ _length ] = '\0';
//  return *this;
//}

const String & String::operator+=( const String &other )
{
    2ce4:	ef 92       	push	r14
    2ce6:	ff 92       	push	r15
    2ce8:	0f 93       	push	r16
    2cea:	1f 93       	push	r17
    2cec:	cf 93       	push	r28
    2cee:	df 93       	push	r29
    2cf0:	ec 01       	movw	r28, r24
    2cf2:	8b 01       	movw	r16, r22
  _length += other._length;
    2cf4:	fb 01       	movw	r30, r22
    2cf6:	64 81       	ldd	r22, Z+4	; 0x04
    2cf8:	75 81       	ldd	r23, Z+5	; 0x05
    2cfa:	8c 81       	ldd	r24, Y+4	; 0x04
    2cfc:	9d 81       	ldd	r25, Y+5	; 0x05
    2cfe:	68 0f       	add	r22, r24
    2d00:	79 1f       	adc	r23, r25
    2d02:	7d 83       	std	Y+5, r23	; 0x05
    2d04:	6c 83       	std	Y+4, r22	; 0x04
  if ( _length > _capacity )
    2d06:	8a 81       	ldd	r24, Y+2	; 0x02
    2d08:	9b 81       	ldd	r25, Y+3	; 0x03
    2d0a:	86 17       	cp	r24, r22
    2d0c:	97 07       	cpc	r25, r23
    2d0e:	78 f4       	brcc	.+30     	; 0x2d2e <_ZN6StringpLERKS_+0x4a>
  {
    char *temp = (char *)realloc(_buffer, _length + 1);
    2d10:	6f 5f       	subi	r22, 0xFF	; 255
    2d12:	7f 4f       	sbci	r23, 0xFF	; 255
    2d14:	88 81       	ld	r24, Y
    2d16:	99 81       	ldd	r25, Y+1	; 0x01
    2d18:	0e 94 8d 28 	call	0x511a	; 0x511a <realloc>
    if ( temp != NULL ) {
    2d1c:	00 97       	sbiw	r24, 0x00	; 0
    2d1e:	b1 f0       	breq	.+44     	; 0x2d4c <_ZN6StringpLERKS_+0x68>
      _buffer = temp;
    2d20:	99 83       	std	Y+1, r25	; 0x01
    2d22:	88 83       	st	Y, r24
      _capacity = _length;
    2d24:	2c 81       	ldd	r18, Y+4	; 0x04
    2d26:	3d 81       	ldd	r19, Y+5	; 0x05
    2d28:	3b 83       	std	Y+3, r19	; 0x03
    2d2a:	2a 83       	std	Y+2, r18	; 0x02
    2d2c:	02 c0       	rjmp	.+4      	; 0x2d32 <_ZN6StringpLERKS_+0x4e>
    } else {
      _length -= other._length;
      return *this;
    2d2e:	88 81       	ld	r24, Y
    2d30:	99 81       	ldd	r25, Y+1	; 0x01
    }
  }
  strcat( _buffer, other._buffer );
    2d32:	f8 01       	movw	r30, r16
    2d34:	60 81       	ld	r22, Z
    2d36:	71 81       	ldd	r23, Z+1	; 0x01
    2d38:	0e 94 ad 29 	call	0x535a	; 0x535a <strcat>
  return *this;
}
    2d3c:	ce 01       	movw	r24, r28
    2d3e:	df 91       	pop	r29
    2d40:	cf 91       	pop	r28
    2d42:	1f 91       	pop	r17
    2d44:	0f 91       	pop	r16
    2d46:	ff 90       	pop	r15
    2d48:	ef 90       	pop	r14
    2d4a:	08 95       	ret
    char *temp = (char *)realloc(_buffer, _length + 1);
    if ( temp != NULL ) {
      _buffer = temp;
      _capacity = _length;
    } else {
      _length -= other._length;
    2d4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d50:	f8 01       	movw	r30, r16
    2d52:	24 81       	ldd	r18, Z+4	; 0x04
    2d54:	35 81       	ldd	r19, Z+5	; 0x05
    2d56:	82 1b       	sub	r24, r18
    2d58:	93 0b       	sbc	r25, r19
    2d5a:	9d 83       	std	Y+5, r25	; 0x05
    2d5c:	8c 83       	std	Y+4, r24	; 0x04
      return *this;
    2d5e:	ee cf       	rjmp	.-36     	; 0x2d3c <_ZN6StringpLERKS_+0x58>

00002d60 <_ZN6String6concatERKS_>:
  return strcmp( _buffer, s2._buffer );
}

const String & String::concat( const String &s2 )
{
  return (*this) += s2;
    2d60:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <_ZN6StringpLERKS_>
}
    2d64:	08 95       	ret

00002d66 <_ZN6StringaSERKS_>:

const String & String::operator=( const String &rhs )
{
    2d66:	ef 92       	push	r14
    2d68:	ff 92       	push	r15
    2d6a:	0f 93       	push	r16
    2d6c:	1f 93       	push	r17
    2d6e:	cf 93       	push	r28
    2d70:	df 93       	push	r29
    2d72:	ec 01       	movw	r28, r24
    2d74:	8b 01       	movw	r16, r22
  if ( this == &rhs )
    2d76:	86 17       	cp	r24, r22
    2d78:	97 07       	cpc	r25, r23
    2d7a:	99 f0       	breq	.+38     	; 0x2da2 <_ZN6StringaSERKS_+0x3c>
    return *this;

  if ( rhs._length > _length )
    2d7c:	fb 01       	movw	r30, r22
    2d7e:	44 81       	ldd	r20, Z+4	; 0x04
    2d80:	55 81       	ldd	r21, Z+5	; 0x05
    2d82:	8c 81       	ldd	r24, Y+4	; 0x04
    2d84:	9d 81       	ldd	r25, Y+5	; 0x05
    2d86:	84 17       	cp	r24, r20
    2d88:	95 07       	cpc	r25, r21
    2d8a:	98 f0       	brcs	.+38     	; 0x2db2 <_ZN6StringaSERKS_+0x4c>
  {
    free(_buffer);
    getBuffer( rhs._length );
  }
  
  if ( _buffer != NULL ) {
    2d8c:	88 81       	ld	r24, Y
    2d8e:	99 81       	ldd	r25, Y+1	; 0x01
    2d90:	00 97       	sbiw	r24, 0x00	; 0
    2d92:	39 f0       	breq	.+14     	; 0x2da2 <_ZN6StringaSERKS_+0x3c>
    _length = rhs._length;
    2d94:	5d 83       	std	Y+5, r21	; 0x05
    2d96:	4c 83       	std	Y+4, r20	; 0x04
    strcpy( _buffer, rhs._buffer );
    2d98:	f8 01       	movw	r30, r16
    2d9a:	60 81       	ld	r22, Z
    2d9c:	71 81       	ldd	r23, Z+1	; 0x01
    2d9e:	0e 94 cc 29 	call	0x5398	; 0x5398 <strcpy>
  }
  return *this;
}
    2da2:	ce 01       	movw	r24, r28
    2da4:	df 91       	pop	r29
    2da6:	cf 91       	pop	r28
    2da8:	1f 91       	pop	r17
    2daa:	0f 91       	pop	r16
    2dac:	ff 90       	pop	r15
    2dae:	ef 90       	pop	r14
    2db0:	08 95       	ret
  if ( this == &rhs )
    return *this;

  if ( rhs._length > _length )
  {
    free(_buffer);
    2db2:	88 81       	ld	r24, Y
    2db4:	99 81       	ldd	r25, Y+1	; 0x01
    2db6:	0e 94 f6 27 	call	0x4fec	; 0x4fec <free>
    getBuffer( rhs._length );
    2dba:	f8 01       	movw	r30, r16
    2dbc:	84 81       	ldd	r24, Z+4	; 0x04
    2dbe:	95 81       	ldd	r25, Z+5	; 0x05
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2dc0:	9b 83       	std	Y+3, r25	; 0x03
    2dc2:	8a 83       	std	Y+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    2dc4:	01 96       	adiw	r24, 0x01	; 1
    2dc6:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <malloc>
    2dca:	99 83       	std	Y+1, r25	; 0x01
    2dcc:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2dce:	00 97       	sbiw	r24, 0x00	; 0
    2dd0:	21 f0       	breq	.+8      	; 0x2dda <_ZN6StringaSERKS_+0x74>
    2dd2:	f8 01       	movw	r30, r16
    2dd4:	44 81       	ldd	r20, Z+4	; 0x04
    2dd6:	55 81       	ldd	r21, Z+5	; 0x05
    2dd8:	dd cf       	rjmp	.-70     	; 0x2d94 <_ZN6StringaSERKS_+0x2e>
    2dda:	1b 82       	std	Y+3, r1	; 0x03
    2ddc:	1a 82       	std	Y+2, r1	; 0x02
    2dde:	1d 82       	std	Y+5, r1	; 0x05
    2de0:	1c 82       	std	Y+4, r1	; 0x04
    2de2:	df cf       	rjmp	.-66     	; 0x2da2 <_ZN6StringaSERKS_+0x3c>

00002de4 <_ZN6StringC1Eh>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const unsigned char value )
    2de4:	0f 93       	push	r16
    2de6:	1f 93       	push	r17
    2de8:	df 93       	push	r29
    2dea:	cf 93       	push	r28
    2dec:	0f 92       	push	r0
    2dee:	cd b7       	in	r28, 0x3d	; 61
    2df0:	de b7       	in	r29, 0x3e	; 62
    2df2:	8c 01       	movw	r16, r24
{
  _length = 1;
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	d8 01       	movw	r26, r16
    2dfa:	15 96       	adiw	r26, 0x05	; 5
    2dfc:	9c 93       	st	X, r25
    2dfe:	8e 93       	st	-X, r24
    2e00:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2e02:	13 96       	adiw	r26, 0x03	; 3
    2e04:	9c 93       	st	X, r25
    2e06:	8e 93       	st	-X, r24
    2e08:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    2e0a:	82 e0       	ldi	r24, 0x02	; 2
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	69 83       	std	Y+1, r22	; 0x01
    2e10:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <malloc>
    2e14:	fc 01       	movw	r30, r24
    2e16:	d8 01       	movw	r26, r16
    2e18:	11 96       	adiw	r26, 0x01	; 1
    2e1a:	9c 93       	st	X, r25
    2e1c:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2e1e:	69 81       	ldd	r22, Y+1	; 0x01
    2e20:	00 97       	sbiw	r24, 0x00	; 0
    2e22:	61 f0       	breq	.+24     	; 0x2e3c <_ZN6StringC1Eh+0x58>
  getBuffer(1);
  if ( _buffer != NULL) {
    _buffer[0] = value;
    2e24:	60 83       	st	Z, r22
    _buffer[1] = 0;
    2e26:	d8 01       	movw	r26, r16
    2e28:	ed 91       	ld	r30, X+
    2e2a:	fc 91       	ld	r31, X
    2e2c:	11 97       	sbiw	r26, 0x01	; 1
    2e2e:	11 82       	std	Z+1, r1	; 0x01
  }
}
    2e30:	0f 90       	pop	r0
    2e32:	cf 91       	pop	r28
    2e34:	df 91       	pop	r29
    2e36:	1f 91       	pop	r17
    2e38:	0f 91       	pop	r16
    2e3a:	08 95       	ret
    2e3c:	13 96       	adiw	r26, 0x03	; 3
    2e3e:	1c 92       	st	X, r1
    2e40:	1e 92       	st	-X, r1
    2e42:	12 97       	sbiw	r26, 0x02	; 2
    2e44:	15 96       	adiw	r26, 0x05	; 5
    2e46:	1c 92       	st	X, r1
    2e48:	1e 92       	st	-X, r1
    2e4a:	14 97       	sbiw	r26, 0x04	; 4
    2e4c:	0f 90       	pop	r0
    2e4e:	cf 91       	pop	r28
    2e50:	df 91       	pop	r29
    2e52:	1f 91       	pop	r17
    2e54:	0f 91       	pop	r16
    2e56:	08 95       	ret

00002e58 <_ZN6StringC2Eh>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const unsigned char value )
    2e58:	0f 93       	push	r16
    2e5a:	1f 93       	push	r17
    2e5c:	df 93       	push	r29
    2e5e:	cf 93       	push	r28
    2e60:	0f 92       	push	r0
    2e62:	cd b7       	in	r28, 0x3d	; 61
    2e64:	de b7       	in	r29, 0x3e	; 62
    2e66:	8c 01       	movw	r16, r24
{
  _length = 1;
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	d8 01       	movw	r26, r16
    2e6e:	15 96       	adiw	r26, 0x05	; 5
    2e70:	9c 93       	st	X, r25
    2e72:	8e 93       	st	-X, r24
    2e74:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2e76:	13 96       	adiw	r26, 0x03	; 3
    2e78:	9c 93       	st	X, r25
    2e7a:	8e 93       	st	-X, r24
    2e7c:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    2e7e:	82 e0       	ldi	r24, 0x02	; 2
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	69 83       	std	Y+1, r22	; 0x01
    2e84:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <malloc>
    2e88:	fc 01       	movw	r30, r24
    2e8a:	d8 01       	movw	r26, r16
    2e8c:	11 96       	adiw	r26, 0x01	; 1
    2e8e:	9c 93       	st	X, r25
    2e90:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2e92:	69 81       	ldd	r22, Y+1	; 0x01
    2e94:	00 97       	sbiw	r24, 0x00	; 0
    2e96:	61 f0       	breq	.+24     	; 0x2eb0 <_ZN6StringC2Eh+0x58>
  getBuffer(1);
  if ( _buffer != NULL) {
    _buffer[0] = value;
    2e98:	60 83       	st	Z, r22
    _buffer[1] = 0;
    2e9a:	d8 01       	movw	r26, r16
    2e9c:	ed 91       	ld	r30, X+
    2e9e:	fc 91       	ld	r31, X
    2ea0:	11 97       	sbiw	r26, 0x01	; 1
    2ea2:	11 82       	std	Z+1, r1	; 0x01
  }
}
    2ea4:	0f 90       	pop	r0
    2ea6:	cf 91       	pop	r28
    2ea8:	df 91       	pop	r29
    2eaa:	1f 91       	pop	r17
    2eac:	0f 91       	pop	r16
    2eae:	08 95       	ret
    2eb0:	13 96       	adiw	r26, 0x03	; 3
    2eb2:	1c 92       	st	X, r1
    2eb4:	1e 92       	st	-X, r1
    2eb6:	12 97       	sbiw	r26, 0x02	; 2
    2eb8:	15 96       	adiw	r26, 0x05	; 5
    2eba:	1c 92       	st	X, r1
    2ebc:	1e 92       	st	-X, r1
    2ebe:	14 97       	sbiw	r26, 0x04	; 4
    2ec0:	0f 90       	pop	r0
    2ec2:	cf 91       	pop	r28
    2ec4:	df 91       	pop	r29
    2ec6:	1f 91       	pop	r17
    2ec8:	0f 91       	pop	r16
    2eca:	08 95       	ret

00002ecc <_ZN6StringC1Ec>:
  getBuffer( _length = value._length );
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
}

String::String( const char value )
    2ecc:	0f 93       	push	r16
    2ece:	1f 93       	push	r17
    2ed0:	df 93       	push	r29
    2ed2:	cf 93       	push	r28
    2ed4:	0f 92       	push	r0
    2ed6:	cd b7       	in	r28, 0x3d	; 61
    2ed8:	de b7       	in	r29, 0x3e	; 62
    2eda:	8c 01       	movw	r16, r24
{
  _length = 1;
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	d8 01       	movw	r26, r16
    2ee2:	15 96       	adiw	r26, 0x05	; 5
    2ee4:	9c 93       	st	X, r25
    2ee6:	8e 93       	st	-X, r24
    2ee8:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2eea:	13 96       	adiw	r26, 0x03	; 3
    2eec:	9c 93       	st	X, r25
    2eee:	8e 93       	st	-X, r24
    2ef0:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    2ef2:	82 e0       	ldi	r24, 0x02	; 2
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	69 83       	std	Y+1, r22	; 0x01
    2ef8:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <malloc>
    2efc:	fc 01       	movw	r30, r24
    2efe:	d8 01       	movw	r26, r16
    2f00:	11 96       	adiw	r26, 0x01	; 1
    2f02:	9c 93       	st	X, r25
    2f04:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2f06:	69 81       	ldd	r22, Y+1	; 0x01
    2f08:	00 97       	sbiw	r24, 0x00	; 0
    2f0a:	61 f0       	breq	.+24     	; 0x2f24 <_ZN6StringC1Ec+0x58>
  getBuffer(1);
  if ( _buffer != NULL ) {
    _buffer[0] = value;
    2f0c:	60 83       	st	Z, r22
    _buffer[1] = 0;
    2f0e:	d8 01       	movw	r26, r16
    2f10:	ed 91       	ld	r30, X+
    2f12:	fc 91       	ld	r31, X
    2f14:	11 97       	sbiw	r26, 0x01	; 1
    2f16:	11 82       	std	Z+1, r1	; 0x01
  }
}
    2f18:	0f 90       	pop	r0
    2f1a:	cf 91       	pop	r28
    2f1c:	df 91       	pop	r29
    2f1e:	1f 91       	pop	r17
    2f20:	0f 91       	pop	r16
    2f22:	08 95       	ret
    2f24:	13 96       	adiw	r26, 0x03	; 3
    2f26:	1c 92       	st	X, r1
    2f28:	1e 92       	st	-X, r1
    2f2a:	12 97       	sbiw	r26, 0x02	; 2
    2f2c:	15 96       	adiw	r26, 0x05	; 5
    2f2e:	1c 92       	st	X, r1
    2f30:	1e 92       	st	-X, r1
    2f32:	14 97       	sbiw	r26, 0x04	; 4
    2f34:	0f 90       	pop	r0
    2f36:	cf 91       	pop	r28
    2f38:	df 91       	pop	r29
    2f3a:	1f 91       	pop	r17
    2f3c:	0f 91       	pop	r16
    2f3e:	08 95       	ret

00002f40 <_ZN6StringC2Ec>:
  getBuffer( _length = value._length );
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
}

String::String( const char value )
    2f40:	0f 93       	push	r16
    2f42:	1f 93       	push	r17
    2f44:	df 93       	push	r29
    2f46:	cf 93       	push	r28
    2f48:	0f 92       	push	r0
    2f4a:	cd b7       	in	r28, 0x3d	; 61
    2f4c:	de b7       	in	r29, 0x3e	; 62
    2f4e:	8c 01       	movw	r16, r24
{
  _length = 1;
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	d8 01       	movw	r26, r16
    2f56:	15 96       	adiw	r26, 0x05	; 5
    2f58:	9c 93       	st	X, r25
    2f5a:	8e 93       	st	-X, r24
    2f5c:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2f5e:	13 96       	adiw	r26, 0x03	; 3
    2f60:	9c 93       	st	X, r25
    2f62:	8e 93       	st	-X, r24
    2f64:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    2f66:	82 e0       	ldi	r24, 0x02	; 2
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	69 83       	std	Y+1, r22	; 0x01
    2f6c:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <malloc>
    2f70:	fc 01       	movw	r30, r24
    2f72:	d8 01       	movw	r26, r16
    2f74:	11 96       	adiw	r26, 0x01	; 1
    2f76:	9c 93       	st	X, r25
    2f78:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2f7a:	69 81       	ldd	r22, Y+1	; 0x01
    2f7c:	00 97       	sbiw	r24, 0x00	; 0
    2f7e:	61 f0       	breq	.+24     	; 0x2f98 <_ZN6StringC2Ec+0x58>
  getBuffer(1);
  if ( _buffer != NULL ) {
    _buffer[0] = value;
    2f80:	60 83       	st	Z, r22
    _buffer[1] = 0;
    2f82:	d8 01       	movw	r26, r16
    2f84:	ed 91       	ld	r30, X+
    2f86:	fc 91       	ld	r31, X
    2f88:	11 97       	sbiw	r26, 0x01	; 1
    2f8a:	11 82       	std	Z+1, r1	; 0x01
  }
}
    2f8c:	0f 90       	pop	r0
    2f8e:	cf 91       	pop	r28
    2f90:	df 91       	pop	r29
    2f92:	1f 91       	pop	r17
    2f94:	0f 91       	pop	r16
    2f96:	08 95       	ret
    2f98:	13 96       	adiw	r26, 0x03	; 3
    2f9a:	1c 92       	st	X, r1
    2f9c:	1e 92       	st	-X, r1
    2f9e:	12 97       	sbiw	r26, 0x02	; 2
    2fa0:	15 96       	adiw	r26, 0x05	; 5
    2fa2:	1c 92       	st	X, r1
    2fa4:	1e 92       	st	-X, r1
    2fa6:	14 97       	sbiw	r26, 0x04	; 4
    2fa8:	0f 90       	pop	r0
    2faa:	cf 91       	pop	r28
    2fac:	df 91       	pop	r29
    2fae:	1f 91       	pop	r17
    2fb0:	0f 91       	pop	r16
    2fb2:	08 95       	ret

00002fb4 <_ZN6StringC1ERKS_>:
  getBuffer( _length = strlen( value ) );
  if ( _buffer != NULL )
    strcpy( _buffer, value );
}

String::String( const String &value )
    2fb4:	0f 93       	push	r16
    2fb6:	1f 93       	push	r17
    2fb8:	cf 93       	push	r28
    2fba:	df 93       	push	r29
    2fbc:	ec 01       	movw	r28, r24
    2fbe:	8b 01       	movw	r16, r22
{
  getBuffer( _length = value._length );
    2fc0:	fb 01       	movw	r30, r22
    2fc2:	84 81       	ldd	r24, Z+4	; 0x04
    2fc4:	95 81       	ldd	r25, Z+5	; 0x05
    2fc6:	9d 83       	std	Y+5, r25	; 0x05
    2fc8:	8c 83       	std	Y+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2fca:	9b 83       	std	Y+3, r25	; 0x03
    2fcc:	8a 83       	std	Y+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    2fce:	01 96       	adiw	r24, 0x01	; 1
    2fd0:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <malloc>
    2fd4:	99 83       	std	Y+1, r25	; 0x01
    2fd6:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2fd8:	00 97       	sbiw	r24, 0x00	; 0
    2fda:	51 f0       	breq	.+20     	; 0x2ff0 <_ZN6StringC1ERKS_+0x3c>
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
    2fdc:	f8 01       	movw	r30, r16
    2fde:	60 81       	ld	r22, Z
    2fe0:	71 81       	ldd	r23, Z+1	; 0x01
    2fe2:	0e 94 cc 29 	call	0x5398	; 0x5398 <strcpy>
}
    2fe6:	df 91       	pop	r29
    2fe8:	cf 91       	pop	r28
    2fea:	1f 91       	pop	r17
    2fec:	0f 91       	pop	r16
    2fee:	08 95       	ret
    2ff0:	1b 82       	std	Y+3, r1	; 0x03
    2ff2:	1a 82       	std	Y+2, r1	; 0x02
    2ff4:	1d 82       	std	Y+5, r1	; 0x05
    2ff6:	1c 82       	std	Y+4, r1	; 0x04
    2ff8:	df 91       	pop	r29
    2ffa:	cf 91       	pop	r28
    2ffc:	1f 91       	pop	r17
    2ffe:	0f 91       	pop	r16
    3000:	08 95       	ret

00003002 <_ZN6StringC2ERKS_>:
  getBuffer( _length = strlen( value ) );
  if ( _buffer != NULL )
    strcpy( _buffer, value );
}

String::String( const String &value )
    3002:	0f 93       	push	r16
    3004:	1f 93       	push	r17
    3006:	cf 93       	push	r28
    3008:	df 93       	push	r29
    300a:	ec 01       	movw	r28, r24
    300c:	8b 01       	movw	r16, r22
{
  getBuffer( _length = value._length );
    300e:	fb 01       	movw	r30, r22
    3010:	84 81       	ldd	r24, Z+4	; 0x04
    3012:	95 81       	ldd	r25, Z+5	; 0x05
    3014:	9d 83       	std	Y+5, r25	; 0x05
    3016:	8c 83       	std	Y+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3018:	9b 83       	std	Y+3, r25	; 0x03
    301a:	8a 83       	std	Y+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    301c:	01 96       	adiw	r24, 0x01	; 1
    301e:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <malloc>
    3022:	99 83       	std	Y+1, r25	; 0x01
    3024:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3026:	00 97       	sbiw	r24, 0x00	; 0
    3028:	51 f0       	breq	.+20     	; 0x303e <_ZN6StringC2ERKS_+0x3c>
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
    302a:	f8 01       	movw	r30, r16
    302c:	60 81       	ld	r22, Z
    302e:	71 81       	ldd	r23, Z+1	; 0x01
    3030:	0e 94 cc 29 	call	0x5398	; 0x5398 <strcpy>
}
    3034:	df 91       	pop	r29
    3036:	cf 91       	pop	r28
    3038:	1f 91       	pop	r17
    303a:	0f 91       	pop	r16
    303c:	08 95       	ret
    303e:	1b 82       	std	Y+3, r1	; 0x03
    3040:	1a 82       	std	Y+2, r1	; 0x02
    3042:	1d 82       	std	Y+5, r1	; 0x05
    3044:	1c 82       	std	Y+4, r1	; 0x04
    3046:	df 91       	pop	r29
    3048:	cf 91       	pop	r28
    304a:	1f 91       	pop	r17
    304c:	0f 91       	pop	r16
    304e:	08 95       	ret

00003050 <_ZN6StringC1Emi>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned long value, const int base )
    3050:	ef 92       	push	r14
    3052:	ff 92       	push	r15
    3054:	0f 93       	push	r16
    3056:	1f 93       	push	r17
    3058:	df 93       	push	r29
    305a:	cf 93       	push	r28
    305c:	cd b7       	in	r28, 0x3d	; 61
    305e:	de b7       	in	r29, 0x3e	; 62
    3060:	a1 97       	sbiw	r28, 0x21	; 33
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	f8 94       	cli
    3066:	de bf       	out	0x3e, r29	; 62
    3068:	0f be       	out	0x3f, r0	; 63
    306a:	cd bf       	out	0x3d, r28	; 61
    306c:	7c 01       	movw	r14, r24
    306e:	cb 01       	movw	r24, r22
    3070:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ultoa(value, buf, 10);
    3072:	8e 01       	movw	r16, r28
    3074:	0f 5f       	subi	r16, 0xFF	; 255
    3076:	1f 4f       	sbci	r17, 0xFF	; 255
    3078:	a8 01       	movw	r20, r16
    307a:	2a e0       	ldi	r18, 0x0A	; 10
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <ultoa>
  getBuffer( _length = strlen(buf) );
    3082:	f8 01       	movw	r30, r16
    3084:	01 90       	ld	r0, Z+
    3086:	00 20       	and	r0, r0
    3088:	e9 f7       	brne	.-6      	; 0x3084 <_ZN6StringC1Emi+0x34>
    308a:	cf 01       	movw	r24, r30
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	80 1b       	sub	r24, r16
    3090:	91 0b       	sbc	r25, r17
    3092:	f7 01       	movw	r30, r14
    3094:	95 83       	std	Z+5, r25	; 0x05
    3096:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3098:	93 83       	std	Z+3, r25	; 0x03
    309a:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    309c:	01 96       	adiw	r24, 0x01	; 1
    309e:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <malloc>
    30a2:	f7 01       	movw	r30, r14
    30a4:	91 83       	std	Z+1, r25	; 0x01
    30a6:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    30a8:	00 97       	sbiw	r24, 0x00	; 0
    30aa:	81 f0       	breq	.+32     	; 0x30cc <_ZN6StringC1Emi+0x7c>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    30ac:	b8 01       	movw	r22, r16
    30ae:	0e 94 cc 29 	call	0x5398	; 0x5398 <strcpy>
}
    30b2:	a1 96       	adiw	r28, 0x21	; 33
    30b4:	0f b6       	in	r0, 0x3f	; 63
    30b6:	f8 94       	cli
    30b8:	de bf       	out	0x3e, r29	; 62
    30ba:	0f be       	out	0x3f, r0	; 63
    30bc:	cd bf       	out	0x3d, r28	; 61
    30be:	cf 91       	pop	r28
    30c0:	df 91       	pop	r29
    30c2:	1f 91       	pop	r17
    30c4:	0f 91       	pop	r16
    30c6:	ff 90       	pop	r15
    30c8:	ef 90       	pop	r14
    30ca:	08 95       	ret
    30cc:	13 82       	std	Z+3, r1	; 0x03
    30ce:	12 82       	std	Z+2, r1	; 0x02
    30d0:	15 82       	std	Z+5, r1	; 0x05
    30d2:	14 82       	std	Z+4, r1	; 0x04
    30d4:	ee cf       	rjmp	.-36     	; 0x30b2 <_ZN6StringC1Emi+0x62>

000030d6 <_ZN6StringC2Emi>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned long value, const int base )
    30d6:	ef 92       	push	r14
    30d8:	ff 92       	push	r15
    30da:	0f 93       	push	r16
    30dc:	1f 93       	push	r17
    30de:	df 93       	push	r29
    30e0:	cf 93       	push	r28
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	a1 97       	sbiw	r28, 0x21	; 33
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	f8 94       	cli
    30ec:	de bf       	out	0x3e, r29	; 62
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	cd bf       	out	0x3d, r28	; 61
    30f2:	7c 01       	movw	r14, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ultoa(value, buf, 10);
    30f8:	8e 01       	movw	r16, r28
    30fa:	0f 5f       	subi	r16, 0xFF	; 255
    30fc:	1f 4f       	sbci	r17, 0xFF	; 255
    30fe:	a8 01       	movw	r20, r16
    3100:	2a e0       	ldi	r18, 0x0A	; 10
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <ultoa>
  getBuffer( _length = strlen(buf) );
    3108:	f8 01       	movw	r30, r16
    310a:	01 90       	ld	r0, Z+
    310c:	00 20       	and	r0, r0
    310e:	e9 f7       	brne	.-6      	; 0x310a <_ZN6StringC2Emi+0x34>
    3110:	cf 01       	movw	r24, r30
    3112:	01 97       	sbiw	r24, 0x01	; 1
    3114:	80 1b       	sub	r24, r16
    3116:	91 0b       	sbc	r25, r17
    3118:	f7 01       	movw	r30, r14
    311a:	95 83       	std	Z+5, r25	; 0x05
    311c:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    311e:	93 83       	std	Z+3, r25	; 0x03
    3120:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3122:	01 96       	adiw	r24, 0x01	; 1
    3124:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <malloc>
    3128:	f7 01       	movw	r30, r14
    312a:	91 83       	std	Z+1, r25	; 0x01
    312c:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    312e:	00 97       	sbiw	r24, 0x00	; 0
    3130:	81 f0       	breq	.+32     	; 0x3152 <_ZN6StringC2Emi+0x7c>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    3132:	b8 01       	movw	r22, r16
    3134:	0e 94 cc 29 	call	0x5398	; 0x5398 <strcpy>
}
    3138:	a1 96       	adiw	r28, 0x21	; 33
    313a:	0f b6       	in	r0, 0x3f	; 63
    313c:	f8 94       	cli
    313e:	de bf       	out	0x3e, r29	; 62
    3140:	0f be       	out	0x3f, r0	; 63
    3142:	cd bf       	out	0x3d, r28	; 61
    3144:	cf 91       	pop	r28
    3146:	df 91       	pop	r29
    3148:	1f 91       	pop	r17
    314a:	0f 91       	pop	r16
    314c:	ff 90       	pop	r15
    314e:	ef 90       	pop	r14
    3150:	08 95       	ret
    3152:	13 82       	std	Z+3, r1	; 0x03
    3154:	12 82       	std	Z+2, r1	; 0x02
    3156:	15 82       	std	Z+5, r1	; 0x05
    3158:	14 82       	std	Z+4, r1	; 0x04
    315a:	ee cf       	rjmp	.-36     	; 0x3138 <_ZN6StringC2Emi+0x62>

0000315c <_ZN6StringC1Eji>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned int value, const int base )
    315c:	ef 92       	push	r14
    315e:	ff 92       	push	r15
    3160:	0f 93       	push	r16
    3162:	1f 93       	push	r17
    3164:	df 93       	push	r29
    3166:	cf 93       	push	r28
    3168:	cd b7       	in	r28, 0x3d	; 61
    316a:	de b7       	in	r29, 0x3e	; 62
    316c:	a1 97       	sbiw	r28, 0x21	; 33
    316e:	0f b6       	in	r0, 0x3f	; 63
    3170:	f8 94       	cli
    3172:	de bf       	out	0x3e, r29	; 62
    3174:	0f be       	out	0x3f, r0	; 63
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	7c 01       	movw	r14, r24
    317a:	9a 01       	movw	r18, r20
{
  char buf[33];   
  ultoa((unsigned long)value, buf, base);
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	8e 01       	movw	r16, r28
    3182:	0f 5f       	subi	r16, 0xFF	; 255
    3184:	1f 4f       	sbci	r17, 0xFF	; 255
    3186:	a8 01       	movw	r20, r16
    3188:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <ultoa>
  getBuffer( _length = strlen(buf) );
    318c:	f8 01       	movw	r30, r16
    318e:	01 90       	ld	r0, Z+
    3190:	00 20       	and	r0, r0
    3192:	e9 f7       	brne	.-6      	; 0x318e <_ZN6StringC1Eji+0x32>
    3194:	cf 01       	movw	r24, r30
    3196:	01 97       	sbiw	r24, 0x01	; 1
    3198:	80 1b       	sub	r24, r16
    319a:	91 0b       	sbc	r25, r17
    319c:	f7 01       	movw	r30, r14
    319e:	95 83       	std	Z+5, r25	; 0x05
    31a0:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    31a2:	93 83       	std	Z+3, r25	; 0x03
    31a4:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    31a6:	01 96       	adiw	r24, 0x01	; 1
    31a8:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <malloc>
    31ac:	f7 01       	movw	r30, r14
    31ae:	91 83       	std	Z+1, r25	; 0x01
    31b0:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    31b2:	00 97       	sbiw	r24, 0x00	; 0
    31b4:	81 f0       	breq	.+32     	; 0x31d6 <_ZN6StringC1Eji+0x7a>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    31b6:	b8 01       	movw	r22, r16
    31b8:	0e 94 cc 29 	call	0x5398	; 0x5398 <strcpy>
}
    31bc:	a1 96       	adiw	r28, 0x21	; 33
    31be:	0f b6       	in	r0, 0x3f	; 63
    31c0:	f8 94       	cli
    31c2:	de bf       	out	0x3e, r29	; 62
    31c4:	0f be       	out	0x3f, r0	; 63
    31c6:	cd bf       	out	0x3d, r28	; 61
    31c8:	cf 91       	pop	r28
    31ca:	df 91       	pop	r29
    31cc:	1f 91       	pop	r17
    31ce:	0f 91       	pop	r16
    31d0:	ff 90       	pop	r15
    31d2:	ef 90       	pop	r14
    31d4:	08 95       	ret
    31d6:	13 82       	std	Z+3, r1	; 0x03
    31d8:	12 82       	std	Z+2, r1	; 0x02
    31da:	15 82       	std	Z+5, r1	; 0x05
    31dc:	14 82       	std	Z+4, r1	; 0x04
    31de:	ee cf       	rjmp	.-36     	; 0x31bc <_ZN6StringC1Eji+0x60>

000031e0 <_ZN6StringC2Eji>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned int value, const int base )
    31e0:	ef 92       	push	r14
    31e2:	ff 92       	push	r15
    31e4:	0f 93       	push	r16
    31e6:	1f 93       	push	r17
    31e8:	df 93       	push	r29
    31ea:	cf 93       	push	r28
    31ec:	cd b7       	in	r28, 0x3d	; 61
    31ee:	de b7       	in	r29, 0x3e	; 62
    31f0:	a1 97       	sbiw	r28, 0x21	; 33
    31f2:	0f b6       	in	r0, 0x3f	; 63
    31f4:	f8 94       	cli
    31f6:	de bf       	out	0x3e, r29	; 62
    31f8:	0f be       	out	0x3f, r0	; 63
    31fa:	cd bf       	out	0x3d, r28	; 61
    31fc:	7c 01       	movw	r14, r24
    31fe:	9a 01       	movw	r18, r20
{
  char buf[33];   
  ultoa((unsigned long)value, buf, base);
    3200:	80 e0       	ldi	r24, 0x00	; 0
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	8e 01       	movw	r16, r28
    3206:	0f 5f       	subi	r16, 0xFF	; 255
    3208:	1f 4f       	sbci	r17, 0xFF	; 255
    320a:	a8 01       	movw	r20, r16
    320c:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <ultoa>
  getBuffer( _length = strlen(buf) );
    3210:	f8 01       	movw	r30, r16
    3212:	01 90       	ld	r0, Z+
    3214:	00 20       	and	r0, r0
    3216:	e9 f7       	brne	.-6      	; 0x3212 <_ZN6StringC2Eji+0x32>
    3218:	cf 01       	movw	r24, r30
    321a:	01 97       	sbiw	r24, 0x01	; 1
    321c:	80 1b       	sub	r24, r16
    321e:	91 0b       	sbc	r25, r17
    3220:	f7 01       	movw	r30, r14
    3222:	95 83       	std	Z+5, r25	; 0x05
    3224:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3226:	93 83       	std	Z+3, r25	; 0x03
    3228:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    322a:	01 96       	adiw	r24, 0x01	; 1
    322c:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <malloc>
    3230:	f7 01       	movw	r30, r14
    3232:	91 83       	std	Z+1, r25	; 0x01
    3234:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3236:	00 97       	sbiw	r24, 0x00	; 0
    3238:	81 f0       	breq	.+32     	; 0x325a <_ZN6StringC2Eji+0x7a>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    323a:	b8 01       	movw	r22, r16
    323c:	0e 94 cc 29 	call	0x5398	; 0x5398 <strcpy>
}
    3240:	a1 96       	adiw	r28, 0x21	; 33
    3242:	0f b6       	in	r0, 0x3f	; 63
    3244:	f8 94       	cli
    3246:	de bf       	out	0x3e, r29	; 62
    3248:	0f be       	out	0x3f, r0	; 63
    324a:	cd bf       	out	0x3d, r28	; 61
    324c:	cf 91       	pop	r28
    324e:	df 91       	pop	r29
    3250:	1f 91       	pop	r17
    3252:	0f 91       	pop	r16
    3254:	ff 90       	pop	r15
    3256:	ef 90       	pop	r14
    3258:	08 95       	ret
    325a:	13 82       	std	Z+3, r1	; 0x03
    325c:	12 82       	std	Z+2, r1	; 0x02
    325e:	15 82       	std	Z+5, r1	; 0x05
    3260:	14 82       	std	Z+4, r1	; 0x04
    3262:	ee cf       	rjmp	.-36     	; 0x3240 <_ZN6StringC2Eji+0x60>

00003264 <_ZN6StringC1EPKc>:
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    3264:	0f 93       	push	r16
    3266:	1f 93       	push	r17
    3268:	cf 93       	push	r28
    326a:	df 93       	push	r29
    326c:	ec 01       	movw	r28, r24
    326e:	8b 01       	movw	r16, r22
{
  if ( value == NULL )
    3270:	61 15       	cp	r22, r1
    3272:	71 05       	cpc	r23, r1
    3274:	21 f1       	breq	.+72     	; 0x32be <_ZN6StringC1EPKc+0x5a>
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    3276:	fb 01       	movw	r30, r22
    3278:	01 90       	ld	r0, Z+
    327a:	00 20       	and	r0, r0
    327c:	e9 f7       	brne	.-6      	; 0x3278 <_ZN6StringC1EPKc+0x14>
    327e:	31 97       	sbiw	r30, 0x01	; 1
    3280:	e6 1b       	sub	r30, r22
    3282:	f7 0b       	sbc	r31, r23
    3284:	cf 01       	movw	r24, r30
    3286:	01 96       	adiw	r24, 0x01	; 1
{
  if ( value == NULL )
    value = "";
  getBuffer( _length = strlen( value ) );
    3288:	fd 83       	std	Y+5, r31	; 0x05
    328a:	ec 83       	std	Y+4, r30	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    328c:	fb 83       	std	Y+3, r31	; 0x03
    328e:	ea 83       	std	Y+2, r30	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3290:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <malloc>
    3294:	99 83       	std	Y+1, r25	; 0x01
    3296:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3298:	00 97       	sbiw	r24, 0x00	; 0
    329a:	41 f0       	breq	.+16     	; 0x32ac <_ZN6StringC1EPKc+0x48>
  if ( _buffer != NULL )
    strcpy( _buffer, value );
    329c:	b8 01       	movw	r22, r16
    329e:	0e 94 cc 29 	call	0x5398	; 0x5398 <strcpy>
}
    32a2:	df 91       	pop	r29
    32a4:	cf 91       	pop	r28
    32a6:	1f 91       	pop	r17
    32a8:	0f 91       	pop	r16
    32aa:	08 95       	ret
    32ac:	1b 82       	std	Y+3, r1	; 0x03
    32ae:	1a 82       	std	Y+2, r1	; 0x02
    32b0:	1d 82       	std	Y+5, r1	; 0x05
    32b2:	1c 82       	std	Y+4, r1	; 0x04
    32b4:	df 91       	pop	r29
    32b6:	cf 91       	pop	r28
    32b8:	1f 91       	pop	r17
    32ba:	0f 91       	pop	r16
    32bc:	08 95       	ret
#include "WString.h"


String::String( const char *value )
{
  if ( value == NULL )
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	e0 e0       	ldi	r30, 0x00	; 0
    32c4:	f0 e0       	ldi	r31, 0x00	; 0
    32c6:	00 e7       	ldi	r16, 0x70	; 112
    32c8:	11 e0       	ldi	r17, 0x01	; 1
    32ca:	de cf       	rjmp	.-68     	; 0x3288 <_ZN6StringC1EPKc+0x24>

000032cc <_ZNK6String11toUpperCaseEv>:
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
  return temp;
}

String String::toUpperCase() const
{
    32cc:	af 92       	push	r10
    32ce:	bf 92       	push	r11
    32d0:	cf 92       	push	r12
    32d2:	df 92       	push	r13
    32d4:	ef 92       	push	r14
    32d6:	ff 92       	push	r15
    32d8:	0f 93       	push	r16
    32da:	1f 93       	push	r17
    32dc:	cf 93       	push	r28
    32de:	df 93       	push	r29
    32e0:	7c 01       	movw	r14, r24
    32e2:	8b 01       	movw	r16, r22
  String temp = _buffer;
    32e4:	c8 2e       	mov	r12, r24
    32e6:	e6 01       	movw	r28, r12
    32e8:	6e 01       	movw	r12, r28
    32ea:	df 2c       	mov	r13, r15
    32ec:	e6 01       	movw	r28, r12
    32ee:	fb 01       	movw	r30, r22
    32f0:	60 81       	ld	r22, Z
    32f2:	71 81       	ldd	r23, Z+1	; 0x01
    32f4:	c6 01       	movw	r24, r12
    32f6:	0e 94 32 19 	call	0x3264	; 0x3264 <_ZN6StringC1EPKc>

  for ( unsigned int i = 0; i < _length; i++ )
    32fa:	f8 01       	movw	r30, r16
    32fc:	84 81       	ldd	r24, Z+4	; 0x04
    32fe:	95 81       	ldd	r25, Z+5	; 0x05
    3300:	00 97       	sbiw	r24, 0x00	; 0
    3302:	b1 f0       	breq	.+44     	; 0x3330 <_ZNK6String11toUpperCaseEv+0x64>
    3304:	aa 24       	eor	r10, r10
    3306:	bb 24       	eor	r11, r11
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
    3308:	c8 80       	ld	r12, Y
    330a:	d9 80       	ldd	r13, Y+1	; 0x01
    330c:	ca 0c       	add	r12, r10
    330e:	db 1c       	adc	r13, r11
    3310:	f6 01       	movw	r30, r12
    3312:	80 81       	ld	r24, Z
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	0e 94 95 29 	call	0x532a	; 0x532a <toupper>
    331a:	f6 01       	movw	r30, r12
    331c:	80 83       	st	Z, r24

String String::toUpperCase() const
{
  String temp = _buffer;

  for ( unsigned int i = 0; i < _length; i++ )
    331e:	08 94       	sec
    3320:	a1 1c       	adc	r10, r1
    3322:	b1 1c       	adc	r11, r1
    3324:	f8 01       	movw	r30, r16
    3326:	84 81       	ldd	r24, Z+4	; 0x04
    3328:	95 81       	ldd	r25, Z+5	; 0x05
    332a:	a8 16       	cp	r10, r24
    332c:	b9 06       	cpc	r11, r25
    332e:	60 f3       	brcs	.-40     	; 0x3308 <_ZNK6String11toUpperCaseEv+0x3c>
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
  return temp;
}
    3330:	c7 01       	movw	r24, r14
    3332:	df 91       	pop	r29
    3334:	cf 91       	pop	r28
    3336:	1f 91       	pop	r17
    3338:	0f 91       	pop	r16
    333a:	ff 90       	pop	r15
    333c:	ef 90       	pop	r14
    333e:	df 90       	pop	r13
    3340:	cf 90       	pop	r12
    3342:	bf 90       	pop	r11
    3344:	af 90       	pop	r10
    3346:	08 95       	ret

00003348 <_ZNK6String11toLowerCaseEv>:
  _buffer[ right ] = temp;  //restore character
  return outPut;
}

String String::toLowerCase() const
{
    3348:	af 92       	push	r10
    334a:	bf 92       	push	r11
    334c:	cf 92       	push	r12
    334e:	df 92       	push	r13
    3350:	ef 92       	push	r14
    3352:	ff 92       	push	r15
    3354:	0f 93       	push	r16
    3356:	1f 93       	push	r17
    3358:	cf 93       	push	r28
    335a:	df 93       	push	r29
    335c:	7c 01       	movw	r14, r24
    335e:	8b 01       	movw	r16, r22
  String temp = _buffer;
    3360:	c8 2e       	mov	r12, r24
    3362:	e6 01       	movw	r28, r12
    3364:	6e 01       	movw	r12, r28
    3366:	df 2c       	mov	r13, r15
    3368:	e6 01       	movw	r28, r12
    336a:	fb 01       	movw	r30, r22
    336c:	60 81       	ld	r22, Z
    336e:	71 81       	ldd	r23, Z+1	; 0x01
    3370:	c6 01       	movw	r24, r12
    3372:	0e 94 32 19 	call	0x3264	; 0x3264 <_ZN6StringC1EPKc>

  for ( unsigned int i = 0; i < _length; i++ )
    3376:	f8 01       	movw	r30, r16
    3378:	84 81       	ldd	r24, Z+4	; 0x04
    337a:	95 81       	ldd	r25, Z+5	; 0x05
    337c:	00 97       	sbiw	r24, 0x00	; 0
    337e:	b1 f0       	breq	.+44     	; 0x33ac <_ZNK6String11toLowerCaseEv+0x64>
    3380:	aa 24       	eor	r10, r10
    3382:	bb 24       	eor	r11, r11
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
    3384:	c8 80       	ld	r12, Y
    3386:	d9 80       	ldd	r13, Y+1	; 0x01
    3388:	ca 0c       	add	r12, r10
    338a:	db 1c       	adc	r13, r11
    338c:	f6 01       	movw	r30, r12
    338e:	80 81       	ld	r24, Z
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	0e 94 8d 29 	call	0x531a	; 0x531a <tolower>
    3396:	f6 01       	movw	r30, r12
    3398:	80 83       	st	Z, r24

String String::toLowerCase() const
{
  String temp = _buffer;

  for ( unsigned int i = 0; i < _length; i++ )
    339a:	08 94       	sec
    339c:	a1 1c       	adc	r10, r1
    339e:	b1 1c       	adc	r11, r1
    33a0:	f8 01       	movw	r30, r16
    33a2:	84 81       	ldd	r24, Z+4	; 0x04
    33a4:	95 81       	ldd	r25, Z+5	; 0x05
    33a6:	a8 16       	cp	r10, r24
    33a8:	b9 06       	cpc	r11, r25
    33aa:	60 f3       	brcs	.-40     	; 0x3384 <_ZNK6String11toLowerCaseEv+0x3c>
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
  return temp;
}
    33ac:	c7 01       	movw	r24, r14
    33ae:	df 91       	pop	r29
    33b0:	cf 91       	pop	r28
    33b2:	1f 91       	pop	r17
    33b4:	0f 91       	pop	r16
    33b6:	ff 90       	pop	r15
    33b8:	ef 90       	pop	r14
    33ba:	df 90       	pop	r13
    33bc:	cf 90       	pop	r12
    33be:	bf 90       	pop	r11
    33c0:	af 90       	pop	r10
    33c2:	08 95       	ret

000033c4 <_ZNK6String16equalsIgnoreCaseERKS_>:
{
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
}

boolean String::equalsIgnoreCase( const String &s2 ) const
{
    33c4:	ef 92       	push	r14
    33c6:	ff 92       	push	r15
    33c8:	0f 93       	push	r16
    33ca:	1f 93       	push	r17
    33cc:	df 93       	push	r29
    33ce:	cf 93       	push	r28
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
    33d4:	2d 97       	sbiw	r28, 0x0d	; 13
    33d6:	0f b6       	in	r0, 0x3f	; 63
    33d8:	f8 94       	cli
    33da:	de bf       	out	0x3e, r29	; 62
    33dc:	0f be       	out	0x3f, r0	; 63
    33de:	cd bf       	out	0x3d, r28	; 61
    33e0:	fc 01       	movw	r30, r24
    33e2:	8b 01       	movw	r16, r22
  if ( this == &s2 )
    33e4:	86 17       	cp	r24, r22
    33e6:	97 07       	cpc	r25, r23
    33e8:	e9 f1       	breq	.+122    	; 0x3464 <_ZNK6String16equalsIgnoreCaseERKS_+0xa0>
    return true; //1;
  else if ( _length != s2._length )
    33ea:	24 81       	ldd	r18, Z+4	; 0x04
    33ec:	35 81       	ldd	r19, Z+5	; 0x05
    33ee:	db 01       	movw	r26, r22
    33f0:	14 96       	adiw	r26, 0x04	; 4
    33f2:	8d 91       	ld	r24, X+
    33f4:	9c 91       	ld	r25, X
    33f6:	15 97       	sbiw	r26, 0x05	; 5
    33f8:	28 17       	cp	r18, r24
    33fa:	39 07       	cpc	r19, r25
    33fc:	79 f0       	breq	.+30     	; 0x341c <_ZNK6String16equalsIgnoreCaseERKS_+0x58>
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    return false; //0;

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}
    3400:	82 2f       	mov	r24, r18
    3402:	2d 96       	adiw	r28, 0x0d	; 13
    3404:	0f b6       	in	r0, 0x3f	; 63
    3406:	f8 94       	cli
    3408:	de bf       	out	0x3e, r29	; 62
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	cd bf       	out	0x3d, r28	; 61
    340e:	cf 91       	pop	r28
    3410:	df 91       	pop	r29
    3412:	1f 91       	pop	r17
    3414:	0f 91       	pop	r16
    3416:	ff 90       	pop	r15
    3418:	ef 90       	pop	r14
    341a:	08 95       	ret
  if ( this == &s2 )
    return true; //1;
  else if ( _length != s2._length )
    return false; //0;

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
    341c:	ce 01       	movw	r24, r28
    341e:	01 96       	adiw	r24, 0x01	; 1
    3420:	bf 01       	movw	r22, r30
    3422:	0e 94 a4 19 	call	0x3348	; 0x3348 <_ZNK6String11toLowerCaseEv>
    3426:	e9 80       	ldd	r14, Y+1	; 0x01
    3428:	fa 80       	ldd	r15, Y+2	; 0x02
    342a:	ce 01       	movw	r24, r28
    342c:	07 96       	adiw	r24, 0x07	; 7
    342e:	b8 01       	movw	r22, r16
    3430:	0e 94 a4 19 	call	0x3348	; 0x3348 <_ZNK6String11toLowerCaseEv>
    3434:	0f 81       	ldd	r16, Y+7	; 0x07
    3436:	18 85       	ldd	r17, Y+8	; 0x08
    3438:	c7 01       	movw	r24, r14
    343a:	b8 01       	movw	r22, r16
    343c:	0e 94 c3 29 	call	0x5386	; 0x5386 <strcmp>
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	00 97       	sbiw	r24, 0x00	; 0
    3444:	09 f4       	brne	.+2      	; 0x3448 <_ZNK6String16equalsIgnoreCaseERKS_+0x84>
    3446:	21 e0       	ldi	r18, 0x01	; 1
    String( const unsigned char );
    String( const int, const int base=10);
    String( const unsigned int, const int base=10 );
    String( const long, const int base=10 );
    String( const unsigned long, const int base=10 );
    ~String() { free(_buffer); _length = _capacity = 0;}     //added _length = _capacity = 0;
    3448:	c8 01       	movw	r24, r16
    344a:	2d 87       	std	Y+13, r18	; 0x0d
    344c:	0e 94 f6 27 	call	0x4fec	; 0x4fec <free>
    3450:	1a 86       	std	Y+10, r1	; 0x0a
    3452:	19 86       	std	Y+9, r1	; 0x09
    3454:	1c 86       	std	Y+12, r1	; 0x0c
    3456:	1b 86       	std	Y+11, r1	; 0x0b
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	9a 81       	ldd	r25, Y+2	; 0x02
    345c:	0e 94 f6 27 	call	0x4fec	; 0x4fec <free>
    3460:	2d 85       	ldd	r18, Y+13	; 0x0d
    3462:	ce cf       	rjmp	.-100    	; 0x3400 <_ZNK6String16equalsIgnoreCaseERKS_+0x3c>
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
}

boolean String::equalsIgnoreCase( const String &s2 ) const
{
  if ( this == &s2 )
    3464:	21 e0       	ldi	r18, 0x01	; 1
    3466:	cc cf       	rjmp	.-104    	; 0x3400 <_ZNK6String16equalsIgnoreCaseERKS_+0x3c>

00003468 <_ZNK6String9substringEjj>:
{
  return substring( left, _length );
}

String String::substring( unsigned int left, unsigned int right ) const
{
    3468:	df 92       	push	r13
    346a:	ef 92       	push	r14
    346c:	ff 92       	push	r15
    346e:	0f 93       	push	r16
    3470:	1f 93       	push	r17
    3472:	cf 93       	push	r28
    3474:	df 93       	push	r29
    3476:	8c 01       	movw	r16, r24
    3478:	eb 01       	movw	r28, r22
    347a:	79 01       	movw	r14, r18
  if ( left > right )
    347c:	24 17       	cp	r18, r20
    347e:	35 07       	cpc	r19, r21
    3480:	30 f4       	brcc	.+12     	; 0x348e <_ZNK6String9substringEjj+0x26>
    3482:	34 2f       	mov	r19, r20
    3484:	25 2f       	mov	r18, r21
    3486:	a7 01       	movw	r20, r14
    3488:	c9 01       	movw	r24, r18
    348a:	e9 2e       	mov	r14, r25
    348c:	f8 2e       	mov	r15, r24
    348e:	8c 81       	ldd	r24, Y+4	; 0x04
    3490:	9d 81       	ldd	r25, Y+5	; 0x05
    3492:	8e 15       	cp	r24, r14
    3494:	9f 05       	cpc	r25, r15
    3496:	08 f4       	brcc	.+2      	; 0x349a <_ZNK6String9substringEjj+0x32>
    3498:	7c 01       	movw	r14, r24
  if ( right > _length )
  {
    right = _length;
  } 

  char temp = _buffer[ right ];  // save the replaced character
    349a:	e8 81       	ld	r30, Y
    349c:	f9 81       	ldd	r31, Y+1	; 0x01
    349e:	ee 0d       	add	r30, r14
    34a0:	ff 1d       	adc	r31, r15
    34a2:	d0 80       	ld	r13, Z
  _buffer[ right ] = '\0';	
    34a4:	10 82       	st	Z, r1
  String outPut = ( _buffer + left );  // pointer arithmetic
    34a6:	68 81       	ld	r22, Y
    34a8:	79 81       	ldd	r23, Y+1	; 0x01
    34aa:	64 0f       	add	r22, r20
    34ac:	75 1f       	adc	r23, r21
    34ae:	c8 01       	movw	r24, r16
    34b0:	0e 94 32 19 	call	0x3264	; 0x3264 <_ZN6StringC1EPKc>
  _buffer[ right ] = temp;  //restore character
    34b4:	e8 81       	ld	r30, Y
    34b6:	f9 81       	ldd	r31, Y+1	; 0x01
    34b8:	ee 0d       	add	r30, r14
    34ba:	ff 1d       	adc	r31, r15
    34bc:	d0 82       	st	Z, r13
  return outPut;
}
    34be:	c8 01       	movw	r24, r16
    34c0:	df 91       	pop	r29
    34c2:	cf 91       	pop	r28
    34c4:	1f 91       	pop	r17
    34c6:	0f 91       	pop	r16
    34c8:	ff 90       	pop	r15
    34ca:	ef 90       	pop	r14
    34cc:	df 90       	pop	r13
    34ce:	08 95       	ret

000034d0 <_ZNK6String9substringEj>:

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
}

String String::substring( unsigned int left ) const
{
    34d0:	cf 93       	push	r28
    34d2:	df 93       	push	r29
    34d4:	ec 01       	movw	r28, r24
  return substring( left, _length );
    34d6:	fb 01       	movw	r30, r22
    34d8:	24 81       	ldd	r18, Z+4	; 0x04
    34da:	35 81       	ldd	r19, Z+5	; 0x05
    34dc:	0e 94 34 1a 	call	0x3468	; 0x3468 <_ZNK6String9substringEjj>
}
    34e0:	ce 01       	movw	r24, r28
    34e2:	df 91       	pop	r29
    34e4:	cf 91       	pop	r28
    34e6:	08 95       	ret

000034e8 <_ZNK6String11lastIndexOfERKS_j>:
{
  return lastIndexOf( s2, _length - s2._length );
}

int String::lastIndexOf( const String &s2, unsigned int fromIndex ) const
{
    34e8:	8f 92       	push	r8
    34ea:	9f 92       	push	r9
    34ec:	af 92       	push	r10
    34ee:	bf 92       	push	r11
    34f0:	cf 92       	push	r12
    34f2:	df 92       	push	r13
    34f4:	ef 92       	push	r14
    34f6:	ff 92       	push	r15
    34f8:	0f 93       	push	r16
    34fa:	1f 93       	push	r17
    34fc:	df 93       	push	r29
    34fe:	cf 93       	push	r28
    3500:	00 d0       	rcall	.+0      	; 0x3502 <_ZNK6String11lastIndexOfERKS_j+0x1a>
    3502:	00 d0       	rcall	.+0      	; 0x3504 <_ZNK6String11lastIndexOfERKS_j+0x1c>
    3504:	00 d0       	rcall	.+0      	; 0x3506 <_ZNK6String11lastIndexOfERKS_j+0x1e>
    3506:	cd b7       	in	r28, 0x3d	; 61
    3508:	de b7       	in	r29, 0x3e	; 62
    350a:	6c 01       	movw	r12, r24
    350c:	7b 01       	movw	r14, r22
  // check for empty strings
  if ( s2._length == 0 || s2._length - 1 > fromIndex || fromIndex >= _length )
    350e:	db 01       	movw	r26, r22
    3510:	14 96       	adiw	r26, 0x04	; 4
    3512:	8d 91       	ld	r24, X+
    3514:	9c 91       	ld	r25, X
    3516:	15 97       	sbiw	r26, 0x05	; 5
    3518:	00 97       	sbiw	r24, 0x00	; 0
    351a:	b1 f4       	brne	.+44     	; 0x3548 <_ZNK6String11lastIndexOfERKS_j+0x60>
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    351c:	0f ef       	ldi	r16, 0xFF	; 255
    351e:	1f ef       	ldi	r17, 0xFF	; 255
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    return i;
  }
  return -1;
}
    3520:	c8 01       	movw	r24, r16
    3522:	26 96       	adiw	r28, 0x06	; 6
    3524:	0f b6       	in	r0, 0x3f	; 63
    3526:	f8 94       	cli
    3528:	de bf       	out	0x3e, r29	; 62
    352a:	0f be       	out	0x3f, r0	; 63
    352c:	cd bf       	out	0x3d, r28	; 61
    352e:	cf 91       	pop	r28
    3530:	df 91       	pop	r29
    3532:	1f 91       	pop	r17
    3534:	0f 91       	pop	r16
    3536:	ff 90       	pop	r15
    3538:	ef 90       	pop	r14
    353a:	df 90       	pop	r13
    353c:	cf 90       	pop	r12
    353e:	bf 90       	pop	r11
    3540:	af 90       	pop	r10
    3542:	9f 90       	pop	r9
    3544:	8f 90       	pop	r8
    3546:	08 95       	ret
}

int String::lastIndexOf( const String &s2, unsigned int fromIndex ) const
{
  // check for empty strings
  if ( s2._length == 0 || s2._length - 1 > fromIndex || fromIndex >= _length )
    3548:	01 97       	sbiw	r24, 0x01	; 1
    354a:	48 17       	cp	r20, r24
    354c:	59 07       	cpc	r21, r25
    354e:	30 f3       	brcs	.-52     	; 0x351c <_ZNK6String11lastIndexOfERKS_j+0x34>
    3550:	f6 01       	movw	r30, r12
    3552:	84 81       	ldd	r24, Z+4	; 0x04
    3554:	95 81       	ldd	r25, Z+5	; 0x05
    3556:	48 17       	cp	r20, r24
    3558:	59 07       	cpc	r21, r25
    355a:	00 f7       	brcc	.-64     	; 0x351c <_ZNK6String11lastIndexOfERKS_j+0x34>
}

char String::operator[]( unsigned int index ) const
{
  // need to check for valid index, to do later
  return _buffer[ index ];
    355c:	ed 91       	ld	r30, X+
    355e:	fc 91       	ld	r31, X
    3560:	11 97       	sbiw	r26, 0x01	; 1
    3562:	90 80       	ld	r9, Z
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    3564:	8a 01       	movw	r16, r20
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    3566:	5e 01       	movw	r10, r28
    3568:	08 94       	sec
    356a:	a1 1c       	adc	r10, r1
    356c:	b1 1c       	adc	r11, r1
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    356e:	02 c0       	rjmp	.+4      	; 0x3574 <_ZNK6String11lastIndexOfERKS_j+0x8c>
    3570:	01 50       	subi	r16, 0x01	; 1
    3572:	10 40       	sbci	r17, 0x00	; 0
    3574:	17 fd       	sbrc	r17, 7
    3576:	d2 cf       	rjmp	.-92     	; 0x351c <_ZNK6String11lastIndexOfERKS_j+0x34>
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    3578:	d6 01       	movw	r26, r12
    357a:	ed 91       	ld	r30, X+
    357c:	fc 91       	ld	r31, X
    357e:	11 97       	sbiw	r26, 0x01	; 1
    3580:	e0 0f       	add	r30, r16
    3582:	f1 1f       	adc	r31, r17
    3584:	80 81       	ld	r24, Z
    3586:	89 15       	cp	r24, r9
    3588:	99 f7       	brne	.-26     	; 0x3570 <_ZNK6String11lastIndexOfERKS_j+0x88>
    358a:	f7 01       	movw	r30, r14
    358c:	24 81       	ldd	r18, Z+4	; 0x04
    358e:	35 81       	ldd	r19, Z+5	; 0x05
    3590:	20 0f       	add	r18, r16
    3592:	31 1f       	adc	r19, r17
    3594:	c5 01       	movw	r24, r10
    3596:	b6 01       	movw	r22, r12
    3598:	a8 01       	movw	r20, r16
    359a:	0e 94 34 1a 	call	0x3468	; 0x3468 <_ZNK6String9substringEjj>
    359e:	c5 01       	movw	r24, r10
    35a0:	b7 01       	movw	r22, r14
    35a2:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <_ZNK6String6equalsERKS_>
    35a6:	88 2e       	mov	r8, r24
    35a8:	89 81       	ldd	r24, Y+1	; 0x01
    35aa:	9a 81       	ldd	r25, Y+2	; 0x02
    35ac:	0e 94 f6 27 	call	0x4fec	; 0x4fec <free>
    35b0:	88 20       	and	r8, r8
    35b2:	09 f0       	breq	.+2      	; 0x35b6 <_ZNK6String11lastIndexOfERKS_j+0xce>
    35b4:	b5 cf       	rjmp	.-150    	; 0x3520 <_ZNK6String11lastIndexOfERKS_j+0x38>
    35b6:	1c 82       	std	Y+4, r1	; 0x04
    35b8:	1b 82       	std	Y+3, r1	; 0x03
    35ba:	1e 82       	std	Y+6, r1	; 0x06
    35bc:	1d 82       	std	Y+5, r1	; 0x05
    35be:	d8 cf       	rjmp	.-80     	; 0x3570 <_ZNK6String11lastIndexOfERKS_j+0x88>

000035c0 <_ZNK6String11lastIndexOfERKS_>:
  return temp - _buffer;
}

int String::lastIndexOf( const String &s2 ) const
{
  return lastIndexOf( s2, _length - s2._length );
    35c0:	fc 01       	movw	r30, r24
    35c2:	44 81       	ldd	r20, Z+4	; 0x04
    35c4:	55 81       	ldd	r21, Z+5	; 0x05
    35c6:	fb 01       	movw	r30, r22
    35c8:	24 81       	ldd	r18, Z+4	; 0x04
    35ca:	35 81       	ldd	r19, Z+5	; 0x05
    35cc:	42 1b       	sub	r20, r18
    35ce:	53 0b       	sbc	r21, r19
    35d0:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <_ZNK6String11lastIndexOfERKS_j>
}
    35d4:	08 95       	ret

000035d6 <_ZNK6String4trimEv>:
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
  return temp;
}

String String::trim() const
{
    35d6:	6f 92       	push	r6
    35d8:	7f 92       	push	r7
    35da:	8f 92       	push	r8
    35dc:	9f 92       	push	r9
    35de:	af 92       	push	r10
    35e0:	bf 92       	push	r11
    35e2:	cf 92       	push	r12
    35e4:	df 92       	push	r13
    35e6:	ef 92       	push	r14
    35e8:	ff 92       	push	r15
    35ea:	0f 93       	push	r16
    35ec:	1f 93       	push	r17
    35ee:	df 93       	push	r29
    35f0:	cf 93       	push	r28
    35f2:	00 d0       	rcall	.+0      	; 0x35f4 <_ZNK6String4trimEv+0x1e>
    35f4:	00 d0       	rcall	.+0      	; 0x35f6 <_ZNK6String4trimEv+0x20>
    35f6:	00 d0       	rcall	.+0      	; 0x35f8 <_ZNK6String4trimEv+0x22>
    35f8:	cd b7       	in	r28, 0x3d	; 61
    35fa:	de b7       	in	r29, 0x3e	; 62
    35fc:	8c 01       	movw	r16, r24
    35fe:	6b 01       	movw	r12, r22
  if ( _buffer == NULL ) return *this;
    3600:	fb 01       	movw	r30, r22
    3602:	60 81       	ld	r22, Z
    3604:	71 81       	ldd	r23, Z+1	; 0x01
    3606:	61 15       	cp	r22, r1
    3608:	71 05       	cpc	r23, r1
    360a:	09 f4       	brne	.+2      	; 0x360e <_ZNK6String4trimEv+0x38>
    360c:	63 c0       	rjmp	.+198    	; 0x36d4 <_ZNK6String4trimEv+0xfe>
  String temp = _buffer;
    360e:	5e 01       	movw	r10, r28
    3610:	08 94       	sec
    3612:	a1 1c       	adc	r10, r1
    3614:	b1 1c       	adc	r11, r1
    3616:	c5 01       	movw	r24, r10
    3618:	0e 94 32 19 	call	0x3264	; 0x3264 <_ZN6StringC1EPKc>
  unsigned int i,j;

  for ( i = 0; i < _length; i++ )
    361c:	f6 01       	movw	r30, r12
    361e:	84 80       	ldd	r8, Z+4	; 0x04
    3620:	95 80       	ldd	r9, Z+5	; 0x05
    3622:	81 14       	cp	r8, r1
    3624:	91 04       	cpc	r9, r1
    3626:	09 f4       	brne	.+2      	; 0x362a <_ZNK6String4trimEv+0x54>
    3628:	59 c0       	rjmp	.+178    	; 0x36dc <_ZNK6String4trimEv+0x106>
    362a:	f6 01       	movw	r30, r12
    362c:	60 80       	ld	r6, Z
    362e:	71 80       	ldd	r7, Z+1	; 0x01
    3630:	ee 24       	eor	r14, r14
    3632:	ff 24       	eor	r15, r15
    3634:	06 c0       	rjmp	.+12     	; 0x3642 <_ZNK6String4trimEv+0x6c>
    3636:	08 94       	sec
    3638:	e1 1c       	adc	r14, r1
    363a:	f1 1c       	adc	r15, r1
    363c:	e8 14       	cp	r14, r8
    363e:	f9 04       	cpc	r15, r9
    3640:	48 f4       	brcc	.+18     	; 0x3654 <_ZNK6String4trimEv+0x7e>
  {
    if ( !isspace(_buffer[i]) )
    3642:	f3 01       	movw	r30, r6
    3644:	ee 0d       	add	r30, r14
    3646:	ff 1d       	adc	r31, r15
    3648:	80 81       	ld	r24, Z
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	0e 94 85 29 	call	0x530a	; 0x530a <isspace>
    3650:	00 97       	sbiw	r24, 0x00	; 0
    3652:	89 f7       	brne	.-30     	; 0x3636 <_ZNK6String4trimEv+0x60>
      break;
  }

  for ( j = temp._length - 1; j > i; j-- )
    3654:	8d 80       	ldd	r8, Y+5	; 0x05
    3656:	9e 80       	ldd	r9, Y+6	; 0x06
    3658:	08 94       	sec
    365a:	81 08       	sbc	r8, r1
    365c:	91 08       	sbc	r9, r1
    365e:	e8 14       	cp	r14, r8
    3660:	f9 04       	cpc	r15, r9
    3662:	b0 f4       	brcc	.+44     	; 0x3690 <_ZNK6String4trimEv+0xba>
    3664:	f6 01       	movw	r30, r12
    3666:	c0 80       	ld	r12, Z
    3668:	d1 80       	ldd	r13, Z+1	; 0x01
    366a:	c8 0c       	add	r12, r8
    366c:	d9 1c       	adc	r13, r9
    366e:	09 c0       	rjmp	.+18     	; 0x3682 <_ZNK6String4trimEv+0xac>
    3670:	08 94       	sec
    3672:	81 08       	sbc	r8, r1
    3674:	91 08       	sbc	r9, r1
    3676:	08 94       	sec
    3678:	c1 08       	sbc	r12, r1
    367a:	d1 08       	sbc	r13, r1
    367c:	e8 14       	cp	r14, r8
    367e:	f9 04       	cpc	r15, r9
    3680:	38 f4       	brcc	.+14     	; 0x3690 <_ZNK6String4trimEv+0xba>
  {
    if ( !isspace(_buffer[j]) )
    3682:	f6 01       	movw	r30, r12
    3684:	80 81       	ld	r24, Z
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	0e 94 85 29 	call	0x530a	; 0x530a <isspace>
    368c:	00 97       	sbiw	r24, 0x00	; 0
    368e:	81 f7       	brne	.-32     	; 0x3670 <_ZNK6String4trimEv+0x9a>
      break;
  }

  return temp.substring( i, j + 1);
    3690:	94 01       	movw	r18, r8
    3692:	2f 5f       	subi	r18, 0xFF	; 255
    3694:	3f 4f       	sbci	r19, 0xFF	; 255
    3696:	c8 01       	movw	r24, r16
    3698:	b5 01       	movw	r22, r10
    369a:	a7 01       	movw	r20, r14
    369c:	0e 94 34 1a 	call	0x3468	; 0x3468 <_ZNK6String9substringEjj>
    36a0:	89 81       	ldd	r24, Y+1	; 0x01
    36a2:	9a 81       	ldd	r25, Y+2	; 0x02
    36a4:	0e 94 f6 27 	call	0x4fec	; 0x4fec <free>
}
    36a8:	c8 01       	movw	r24, r16
    36aa:	26 96       	adiw	r28, 0x06	; 6
    36ac:	0f b6       	in	r0, 0x3f	; 63
    36ae:	f8 94       	cli
    36b0:	de bf       	out	0x3e, r29	; 62
    36b2:	0f be       	out	0x3f, r0	; 63
    36b4:	cd bf       	out	0x3d, r28	; 61
    36b6:	cf 91       	pop	r28
    36b8:	df 91       	pop	r29
    36ba:	1f 91       	pop	r17
    36bc:	0f 91       	pop	r16
    36be:	ff 90       	pop	r15
    36c0:	ef 90       	pop	r14
    36c2:	df 90       	pop	r13
    36c4:	cf 90       	pop	r12
    36c6:	bf 90       	pop	r11
    36c8:	af 90       	pop	r10
    36ca:	9f 90       	pop	r9
    36cc:	8f 90       	pop	r8
    36ce:	7f 90       	pop	r7
    36d0:	6f 90       	pop	r6
    36d2:	08 95       	ret
  return temp;
}

String String::trim() const
{
  if ( _buffer == NULL ) return *this;
    36d4:	b6 01       	movw	r22, r12
    36d6:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <_ZN6StringC1ERKS_>
    36da:	e6 cf       	rjmp	.-52     	; 0x36a8 <_ZNK6String4trimEv+0xd2>
  String temp = _buffer;
  unsigned int i,j;

  for ( i = 0; i < _length; i++ )
    36dc:	ee 24       	eor	r14, r14
    36de:	ff 24       	eor	r15, r15
    36e0:	b9 cf       	rjmp	.-142    	; 0x3654 <_ZNK6String4trimEv+0x7e>

000036e2 <_ZN6String7replaceERKS_S1_>:

  return theReturn;
}

String String::replace( const String& match, const String& replace )
{
    36e2:	2f 92       	push	r2
    36e4:	3f 92       	push	r3
    36e6:	4f 92       	push	r4
    36e8:	5f 92       	push	r5
    36ea:	6f 92       	push	r6
    36ec:	7f 92       	push	r7
    36ee:	8f 92       	push	r8
    36f0:	9f 92       	push	r9
    36f2:	af 92       	push	r10
    36f4:	bf 92       	push	r11
    36f6:	cf 92       	push	r12
    36f8:	df 92       	push	r13
    36fa:	ef 92       	push	r14
    36fc:	ff 92       	push	r15
    36fe:	0f 93       	push	r16
    3700:	1f 93       	push	r17
    3702:	df 93       	push	r29
    3704:	cf 93       	push	r28
    3706:	cd b7       	in	r28, 0x3d	; 61
    3708:	de b7       	in	r29, 0x3e	; 62
    370a:	68 97       	sbiw	r28, 0x18	; 24
    370c:	0f b6       	in	r0, 0x3f	; 63
    370e:	f8 94       	cli
    3710:	de bf       	out	0x3e, r29	; 62
    3712:	0f be       	out	0x3f, r0	; 63
    3714:	cd bf       	out	0x3d, r28	; 61
    3716:	1c 01       	movw	r2, r24
    3718:	fb 01       	movw	r30, r22
    371a:	5a 01       	movw	r10, r20
    371c:	29 01       	movw	r4, r18
  if ( _buffer == NULL ) return *this;
    371e:	60 81       	ld	r22, Z
    3720:	71 81       	ldd	r23, Z+1	; 0x01
    3722:	61 15       	cp	r22, r1
    3724:	71 05       	cpc	r23, r1
    3726:	09 f4       	brne	.+2      	; 0x372a <_ZN6String7replaceERKS_S1_+0x48>
    3728:	7e c0       	rjmp	.+252    	; 0x3826 <_ZN6String7replaceERKS_S1_+0x144>
  String temp = _buffer, newString;
    372a:	8e 01       	movw	r16, r28
    372c:	0f 5f       	subi	r16, 0xFF	; 255
    372e:	1f 4f       	sbci	r17, 0xFF	; 255
    3730:	c8 01       	movw	r24, r16
    3732:	0e 94 32 19 	call	0x3264	; 0x3264 <_ZN6StringC1EPKc>
    3736:	47 e0       	ldi	r20, 0x07	; 7
    3738:	c4 2e       	mov	r12, r20
    373a:	d1 2c       	mov	r13, r1
    373c:	cc 0e       	add	r12, r28
    373e:	dd 1e       	adc	r13, r29
    3740:	c6 01       	movw	r24, r12
    3742:	60 e7       	ldi	r22, 0x70	; 112
    3744:	71 e0       	ldi	r23, 0x01	; 1
    3746:	0e 94 32 19 	call	0x3264	; 0x3264 <_ZN6StringC1EPKc>

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
  {
    newString += temp.substring( 0, loc );
    374a:	3d e0       	ldi	r19, 0x0D	; 13
    374c:	83 2e       	mov	r8, r19
    374e:	91 2c       	mov	r9, r1
    3750:	8c 0e       	add	r8, r28
    3752:	9d 1e       	adc	r9, r29
    newString += replace;
    temp = temp.substring( loc + match._length );
    3754:	23 e1       	ldi	r18, 0x13	; 19
    3756:	62 2e       	mov	r6, r18
    3758:	71 2c       	mov	r7, r1
    375a:	6c 0e       	add	r6, r28
    375c:	7d 1e       	adc	r7, r29
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer, newString;

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
    375e:	2c c0       	rjmp	.+88     	; 0x37b8 <_ZN6String7replaceERKS_S1_+0xd6>
  {
    newString += temp.substring( 0, loc );
    3760:	c4 01       	movw	r24, r8
    3762:	b8 01       	movw	r22, r16
    3764:	40 e0       	ldi	r20, 0x00	; 0
    3766:	50 e0       	ldi	r21, 0x00	; 0
    3768:	97 01       	movw	r18, r14
    376a:	0e 94 34 1a 	call	0x3468	; 0x3468 <_ZNK6String9substringEjj>
    376e:	c6 01       	movw	r24, r12
    3770:	b4 01       	movw	r22, r8
    3772:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <_ZN6StringpLERKS_>
    3776:	8d 85       	ldd	r24, Y+13	; 0x0d
    3778:	9e 85       	ldd	r25, Y+14	; 0x0e
    377a:	0e 94 f6 27 	call	0x4fec	; 0x4fec <free>
    377e:	18 8a       	std	Y+16, r1	; 0x10
    3780:	1f 86       	std	Y+15, r1	; 0x0f
    3782:	1a 8a       	std	Y+18, r1	; 0x12
    3784:	19 8a       	std	Y+17, r1	; 0x11
    newString += replace;
    3786:	c6 01       	movw	r24, r12
    3788:	b2 01       	movw	r22, r4
    378a:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <_ZN6StringpLERKS_>
    temp = temp.substring( loc + match._length );
    378e:	f5 01       	movw	r30, r10
    3790:	44 81       	ldd	r20, Z+4	; 0x04
    3792:	55 81       	ldd	r21, Z+5	; 0x05
    3794:	4e 0d       	add	r20, r14
    3796:	5f 1d       	adc	r21, r15
    3798:	c3 01       	movw	r24, r6
    379a:	b8 01       	movw	r22, r16
    379c:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <_ZNK6String9substringEj>
    37a0:	c8 01       	movw	r24, r16
    37a2:	b3 01       	movw	r22, r6
    37a4:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <_ZN6StringaSERKS_>
    37a8:	8b 89       	ldd	r24, Y+19	; 0x13
    37aa:	9c 89       	ldd	r25, Y+20	; 0x14
    37ac:	0e 94 f6 27 	call	0x4fec	; 0x4fec <free>
    37b0:	1e 8a       	std	Y+22, r1	; 0x16
    37b2:	1d 8a       	std	Y+21, r1	; 0x15
    37b4:	18 8e       	std	Y+24, r1	; 0x18
    37b6:	1f 8a       	std	Y+23, r1	; 0x17
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer, newString;

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
    37b8:	c8 01       	movw	r24, r16
    37ba:	b5 01       	movw	r22, r10
    37bc:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZNK6String7indexOfERKS_>
    37c0:	7c 01       	movw	r14, r24
    37c2:	ff ef       	ldi	r31, 0xFF	; 255
    37c4:	8f 3f       	cpi	r24, 0xFF	; 255
    37c6:	9f 07       	cpc	r25, r31
    37c8:	59 f6       	brne	.-106    	; 0x3760 <_ZN6String7replaceERKS_S1_+0x7e>
  {
    newString += temp.substring( 0, loc );
    newString += replace;
    temp = temp.substring( loc + match._length );
  }
  newString += temp;  
    37ca:	c6 01       	movw	r24, r12
    37cc:	b8 01       	movw	r22, r16
    37ce:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <_ZN6StringpLERKS_>
  return newString;
    37d2:	c1 01       	movw	r24, r2
    37d4:	b6 01       	movw	r22, r12
    37d6:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <_ZN6StringC1ERKS_>
    37da:	8f 81       	ldd	r24, Y+7	; 0x07
    37dc:	98 85       	ldd	r25, Y+8	; 0x08
    37de:	0e 94 f6 27 	call	0x4fec	; 0x4fec <free>
    37e2:	1a 86       	std	Y+10, r1	; 0x0a
    37e4:	19 86       	std	Y+9, r1	; 0x09
    37e6:	1c 86       	std	Y+12, r1	; 0x0c
    37e8:	1b 86       	std	Y+11, r1	; 0x0b
    37ea:	89 81       	ldd	r24, Y+1	; 0x01
    37ec:	9a 81       	ldd	r25, Y+2	; 0x02
    37ee:	0e 94 f6 27 	call	0x4fec	; 0x4fec <free>
}
    37f2:	c1 01       	movw	r24, r2
    37f4:	68 96       	adiw	r28, 0x18	; 24
    37f6:	0f b6       	in	r0, 0x3f	; 63
    37f8:	f8 94       	cli
    37fa:	de bf       	out	0x3e, r29	; 62
    37fc:	0f be       	out	0x3f, r0	; 63
    37fe:	cd bf       	out	0x3d, r28	; 61
    3800:	cf 91       	pop	r28
    3802:	df 91       	pop	r29
    3804:	1f 91       	pop	r17
    3806:	0f 91       	pop	r16
    3808:	ff 90       	pop	r15
    380a:	ef 90       	pop	r14
    380c:	df 90       	pop	r13
    380e:	cf 90       	pop	r12
    3810:	bf 90       	pop	r11
    3812:	af 90       	pop	r10
    3814:	9f 90       	pop	r9
    3816:	8f 90       	pop	r8
    3818:	7f 90       	pop	r7
    381a:	6f 90       	pop	r6
    381c:	5f 90       	pop	r5
    381e:	4f 90       	pop	r4
    3820:	3f 90       	pop	r3
    3822:	2f 90       	pop	r2
    3824:	08 95       	ret
  return theReturn;
}

String String::replace( const String& match, const String& replace )
{
  if ( _buffer == NULL ) return *this;
    3826:	bf 01       	movw	r22, r30
    3828:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <_ZN6StringC1ERKS_>
    382c:	e2 cf       	rjmp	.-60     	; 0x37f2 <_ZN6String7replaceERKS_S1_+0x110>

0000382e <_ZN6String7replaceEcc>:

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}

String String::replace( char findChar, char replaceChar )
{
    382e:	cf 92       	push	r12
    3830:	df 92       	push	r13
    3832:	ef 92       	push	r14
    3834:	ff 92       	push	r15
    3836:	0f 93       	push	r16
    3838:	1f 93       	push	r17
    383a:	df 93       	push	r29
    383c:	cf 93       	push	r28
    383e:	00 d0       	rcall	.+0      	; 0x3840 <_ZN6String7replaceEcc+0x12>
    3840:	00 d0       	rcall	.+0      	; 0x3842 <_ZN6String7replaceEcc+0x14>
    3842:	00 d0       	rcall	.+0      	; 0x3844 <_ZN6String7replaceEcc+0x16>
    3844:	cd b7       	in	r28, 0x3d	; 61
    3846:	de b7       	in	r29, 0x3e	; 62
    3848:	8c 01       	movw	r16, r24
    384a:	fb 01       	movw	r30, r22
    384c:	f4 2e       	mov	r15, r20
    384e:	e2 2e       	mov	r14, r18
  if ( _buffer == NULL ) return *this;
    3850:	60 81       	ld	r22, Z
    3852:	71 81       	ldd	r23, Z+1	; 0x01
    3854:	61 15       	cp	r22, r1
    3856:	71 05       	cpc	r23, r1
    3858:	51 f1       	breq	.+84     	; 0x38ae <_ZN6String7replaceEcc+0x80>
  String theReturn = _buffer;
    385a:	6e 01       	movw	r12, r28
    385c:	08 94       	sec
    385e:	c1 1c       	adc	r12, r1
    3860:	d1 1c       	adc	r13, r1
    3862:	c6 01       	movw	r24, r12
    3864:	0e 94 32 19 	call	0x3264	; 0x3264 <_ZN6StringC1EPKc>
  char* temp = theReturn._buffer;
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	9a 81       	ldd	r25, Y+2	; 0x02
  while( (temp = strchr( temp, findChar )) != 0 )
    386c:	01 c0       	rjmp	.+2      	; 0x3870 <_ZN6String7replaceEcc+0x42>
    *temp = replaceChar;
    386e:	e0 82       	st	Z, r14
String String::replace( char findChar, char replaceChar )
{
  if ( _buffer == NULL ) return *this;
  String theReturn = _buffer;
  char* temp = theReturn._buffer;
  while( (temp = strchr( temp, findChar )) != 0 )
    3870:	6f 2d       	mov	r22, r15
    3872:	70 e0       	ldi	r23, 0x00	; 0
    3874:	0e 94 b8 29 	call	0x5370	; 0x5370 <strchr>
    3878:	fc 01       	movw	r30, r24
    387a:	00 97       	sbiw	r24, 0x00	; 0
    387c:	c1 f7       	brne	.-16     	; 0x386e <_ZN6String7replaceEcc+0x40>
    *temp = replaceChar;

  return theReturn;
    387e:	c8 01       	movw	r24, r16
    3880:	b6 01       	movw	r22, r12
    3882:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <_ZN6StringC1ERKS_>
    3886:	89 81       	ldd	r24, Y+1	; 0x01
    3888:	9a 81       	ldd	r25, Y+2	; 0x02
    388a:	0e 94 f6 27 	call	0x4fec	; 0x4fec <free>
}
    388e:	c8 01       	movw	r24, r16
    3890:	26 96       	adiw	r28, 0x06	; 6
    3892:	0f b6       	in	r0, 0x3f	; 63
    3894:	f8 94       	cli
    3896:	de bf       	out	0x3e, r29	; 62
    3898:	0f be       	out	0x3f, r0	; 63
    389a:	cd bf       	out	0x3d, r28	; 61
    389c:	cf 91       	pop	r28
    389e:	df 91       	pop	r29
    38a0:	1f 91       	pop	r17
    38a2:	0f 91       	pop	r16
    38a4:	ff 90       	pop	r15
    38a6:	ef 90       	pop	r14
    38a8:	df 90       	pop	r13
    38aa:	cf 90       	pop	r12
    38ac:	08 95       	ret
  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}

String String::replace( char findChar, char replaceChar )
{
  if ( _buffer == NULL ) return *this;
    38ae:	bf 01       	movw	r22, r30
    38b0:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <_ZN6StringC1ERKS_>
    38b4:	ec cf       	rjmp	.-40     	; 0x388e <_ZN6String7replaceEcc+0x60>

000038b6 <_ZN6StringC2EPKc>:
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    38b6:	0f 93       	push	r16
    38b8:	1f 93       	push	r17
    38ba:	cf 93       	push	r28
    38bc:	df 93       	push	r29
    38be:	ec 01       	movw	r28, r24
    38c0:	8b 01       	movw	r16, r22
{
  if ( value == NULL )
    38c2:	61 15       	cp	r22, r1
    38c4:	71 05       	cpc	r23, r1
    38c6:	21 f1       	breq	.+72     	; 0x3910 <_ZN6StringC2EPKc+0x5a>
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    38c8:	fb 01       	movw	r30, r22
    38ca:	01 90       	ld	r0, Z+
    38cc:	00 20       	and	r0, r0
    38ce:	e9 f7       	brne	.-6      	; 0x38ca <_ZN6StringC2EPKc+0x14>
    38d0:	31 97       	sbiw	r30, 0x01	; 1
    38d2:	e6 1b       	sub	r30, r22
    38d4:	f7 0b       	sbc	r31, r23
    38d6:	cf 01       	movw	r24, r30
    38d8:	01 96       	adiw	r24, 0x01	; 1
{
  if ( value == NULL )
    value = "";
  getBuffer( _length = strlen( value ) );
    38da:	fd 83       	std	Y+5, r31	; 0x05
    38dc:	ec 83       	std	Y+4, r30	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    38de:	fb 83       	std	Y+3, r31	; 0x03
    38e0:	ea 83       	std	Y+2, r30	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    38e2:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <malloc>
    38e6:	99 83       	std	Y+1, r25	; 0x01
    38e8:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    38ea:	00 97       	sbiw	r24, 0x00	; 0
    38ec:	41 f0       	breq	.+16     	; 0x38fe <_ZN6StringC2EPKc+0x48>
  if ( _buffer != NULL )
    strcpy( _buffer, value );
    38ee:	b8 01       	movw	r22, r16
    38f0:	0e 94 cc 29 	call	0x5398	; 0x5398 <strcpy>
}
    38f4:	df 91       	pop	r29
    38f6:	cf 91       	pop	r28
    38f8:	1f 91       	pop	r17
    38fa:	0f 91       	pop	r16
    38fc:	08 95       	ret
    38fe:	1b 82       	std	Y+3, r1	; 0x03
    3900:	1a 82       	std	Y+2, r1	; 0x02
    3902:	1d 82       	std	Y+5, r1	; 0x05
    3904:	1c 82       	std	Y+4, r1	; 0x04
    3906:	df 91       	pop	r29
    3908:	cf 91       	pop	r28
    390a:	1f 91       	pop	r17
    390c:	0f 91       	pop	r16
    390e:	08 95       	ret
#include "WString.h"


String::String( const char *value )
{
  if ( value == NULL )
    3910:	81 e0       	ldi	r24, 0x01	; 1
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	e0 e0       	ldi	r30, 0x00	; 0
    3916:	f0 e0       	ldi	r31, 0x00	; 0
    3918:	00 e7       	ldi	r16, 0x70	; 112
    391a:	11 e0       	ldi	r17, 0x01	; 1
    391c:	de cf       	rjmp	.-68     	; 0x38da <_ZN6StringC2EPKc+0x24>

0000391e <_ZN6StringC1Eli>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const long value, const int base )
    391e:	ef 92       	push	r14
    3920:	ff 92       	push	r15
    3922:	0f 93       	push	r16
    3924:	1f 93       	push	r17
    3926:	df 93       	push	r29
    3928:	cf 93       	push	r28
    392a:	cd b7       	in	r28, 0x3d	; 61
    392c:	de b7       	in	r29, 0x3e	; 62
    392e:	a1 97       	sbiw	r28, 0x21	; 33
    3930:	0f b6       	in	r0, 0x3f	; 63
    3932:	f8 94       	cli
    3934:	de bf       	out	0x3e, r29	; 62
    3936:	0f be       	out	0x3f, r0	; 63
    3938:	cd bf       	out	0x3d, r28	; 61
    393a:	7c 01       	movw	r14, r24
    393c:	cb 01       	movw	r24, r22
    393e:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ltoa(value, buf, base);
    3940:	8e 01       	movw	r16, r28
    3942:	0f 5f       	subi	r16, 0xFF	; 255
    3944:	1f 4f       	sbci	r17, 0xFF	; 255
    3946:	a8 01       	movw	r20, r16
    3948:	0e 94 36 2a 	call	0x546c	; 0x546c <ltoa>
  getBuffer( _length = strlen(buf) );
    394c:	f8 01       	movw	r30, r16
    394e:	01 90       	ld	r0, Z+
    3950:	00 20       	and	r0, r0
    3952:	e9 f7       	brne	.-6      	; 0x394e <_ZN6StringC1Eli+0x30>
    3954:	cf 01       	movw	r24, r30
    3956:	01 97       	sbiw	r24, 0x01	; 1
    3958:	80 1b       	sub	r24, r16
    395a:	91 0b       	sbc	r25, r17
    395c:	f7 01       	movw	r30, r14
    395e:	95 83       	std	Z+5, r25	; 0x05
    3960:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3962:	93 83       	std	Z+3, r25	; 0x03
    3964:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3966:	01 96       	adiw	r24, 0x01	; 1
    3968:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <malloc>
    396c:	f7 01       	movw	r30, r14
    396e:	91 83       	std	Z+1, r25	; 0x01
    3970:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3972:	00 97       	sbiw	r24, 0x00	; 0
    3974:	81 f0       	breq	.+32     	; 0x3996 <_ZN6StringC1Eli+0x78>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    3976:	b8 01       	movw	r22, r16
    3978:	0e 94 cc 29 	call	0x5398	; 0x5398 <strcpy>
}
    397c:	a1 96       	adiw	r28, 0x21	; 33
    397e:	0f b6       	in	r0, 0x3f	; 63
    3980:	f8 94       	cli
    3982:	de bf       	out	0x3e, r29	; 62
    3984:	0f be       	out	0x3f, r0	; 63
    3986:	cd bf       	out	0x3d, r28	; 61
    3988:	cf 91       	pop	r28
    398a:	df 91       	pop	r29
    398c:	1f 91       	pop	r17
    398e:	0f 91       	pop	r16
    3990:	ff 90       	pop	r15
    3992:	ef 90       	pop	r14
    3994:	08 95       	ret
    3996:	13 82       	std	Z+3, r1	; 0x03
    3998:	12 82       	std	Z+2, r1	; 0x02
    399a:	15 82       	std	Z+5, r1	; 0x05
    399c:	14 82       	std	Z+4, r1	; 0x04
    399e:	ee cf       	rjmp	.-36     	; 0x397c <_ZN6StringC1Eli+0x5e>

000039a0 <_ZN6StringC2Eli>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const long value, const int base )
    39a0:	ef 92       	push	r14
    39a2:	ff 92       	push	r15
    39a4:	0f 93       	push	r16
    39a6:	1f 93       	push	r17
    39a8:	df 93       	push	r29
    39aa:	cf 93       	push	r28
    39ac:	cd b7       	in	r28, 0x3d	; 61
    39ae:	de b7       	in	r29, 0x3e	; 62
    39b0:	a1 97       	sbiw	r28, 0x21	; 33
    39b2:	0f b6       	in	r0, 0x3f	; 63
    39b4:	f8 94       	cli
    39b6:	de bf       	out	0x3e, r29	; 62
    39b8:	0f be       	out	0x3f, r0	; 63
    39ba:	cd bf       	out	0x3d, r28	; 61
    39bc:	7c 01       	movw	r14, r24
    39be:	cb 01       	movw	r24, r22
    39c0:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ltoa(value, buf, base);
    39c2:	8e 01       	movw	r16, r28
    39c4:	0f 5f       	subi	r16, 0xFF	; 255
    39c6:	1f 4f       	sbci	r17, 0xFF	; 255
    39c8:	a8 01       	movw	r20, r16
    39ca:	0e 94 36 2a 	call	0x546c	; 0x546c <ltoa>
  getBuffer( _length = strlen(buf) );
    39ce:	f8 01       	movw	r30, r16
    39d0:	01 90       	ld	r0, Z+
    39d2:	00 20       	and	r0, r0
    39d4:	e9 f7       	brne	.-6      	; 0x39d0 <_ZN6StringC2Eli+0x30>
    39d6:	cf 01       	movw	r24, r30
    39d8:	01 97       	sbiw	r24, 0x01	; 1
    39da:	80 1b       	sub	r24, r16
    39dc:	91 0b       	sbc	r25, r17
    39de:	f7 01       	movw	r30, r14
    39e0:	95 83       	std	Z+5, r25	; 0x05
    39e2:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    39e4:	93 83       	std	Z+3, r25	; 0x03
    39e6:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    39e8:	01 96       	adiw	r24, 0x01	; 1
    39ea:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <malloc>
    39ee:	f7 01       	movw	r30, r14
    39f0:	91 83       	std	Z+1, r25	; 0x01
    39f2:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    39f4:	00 97       	sbiw	r24, 0x00	; 0
    39f6:	81 f0       	breq	.+32     	; 0x3a18 <_ZN6StringC2Eli+0x78>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    39f8:	b8 01       	movw	r22, r16
    39fa:	0e 94 cc 29 	call	0x5398	; 0x5398 <strcpy>
}
    39fe:	a1 96       	adiw	r28, 0x21	; 33
    3a00:	0f b6       	in	r0, 0x3f	; 63
    3a02:	f8 94       	cli
    3a04:	de bf       	out	0x3e, r29	; 62
    3a06:	0f be       	out	0x3f, r0	; 63
    3a08:	cd bf       	out	0x3d, r28	; 61
    3a0a:	cf 91       	pop	r28
    3a0c:	df 91       	pop	r29
    3a0e:	1f 91       	pop	r17
    3a10:	0f 91       	pop	r16
    3a12:	ff 90       	pop	r15
    3a14:	ef 90       	pop	r14
    3a16:	08 95       	ret
    3a18:	13 82       	std	Z+3, r1	; 0x03
    3a1a:	12 82       	std	Z+2, r1	; 0x02
    3a1c:	15 82       	std	Z+5, r1	; 0x05
    3a1e:	14 82       	std	Z+4, r1	; 0x04
    3a20:	ee cf       	rjmp	.-36     	; 0x39fe <_ZN6StringC2Eli+0x5e>

00003a22 <_ZN6StringC1Eii>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const int value, const int base )
    3a22:	ef 92       	push	r14
    3a24:	ff 92       	push	r15
    3a26:	0f 93       	push	r16
    3a28:	1f 93       	push	r17
    3a2a:	df 93       	push	r29
    3a2c:	cf 93       	push	r28
    3a2e:	cd b7       	in	r28, 0x3d	; 61
    3a30:	de b7       	in	r29, 0x3e	; 62
    3a32:	a1 97       	sbiw	r28, 0x21	; 33
    3a34:	0f b6       	in	r0, 0x3f	; 63
    3a36:	f8 94       	cli
    3a38:	de bf       	out	0x3e, r29	; 62
    3a3a:	0f be       	out	0x3f, r0	; 63
    3a3c:	cd bf       	out	0x3d, r28	; 61
    3a3e:	7c 01       	movw	r14, r24
    3a40:	cb 01       	movw	r24, r22
{
  char buf[33];   
  itoa((signed long)value, buf, base);
    3a42:	8e 01       	movw	r16, r28
    3a44:	0f 5f       	subi	r16, 0xFF	; 255
    3a46:	1f 4f       	sbci	r17, 0xFF	; 255
    3a48:	b8 01       	movw	r22, r16
    3a4a:	0e 94 15 2a 	call	0x542a	; 0x542a <itoa>
  getBuffer( _length = strlen(buf) );
    3a4e:	f8 01       	movw	r30, r16
    3a50:	01 90       	ld	r0, Z+
    3a52:	00 20       	and	r0, r0
    3a54:	e9 f7       	brne	.-6      	; 0x3a50 <_ZN6StringC1Eii+0x2e>
    3a56:	cf 01       	movw	r24, r30
    3a58:	01 97       	sbiw	r24, 0x01	; 1
    3a5a:	80 1b       	sub	r24, r16
    3a5c:	91 0b       	sbc	r25, r17
    3a5e:	f7 01       	movw	r30, r14
    3a60:	95 83       	std	Z+5, r25	; 0x05
    3a62:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3a64:	93 83       	std	Z+3, r25	; 0x03
    3a66:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3a68:	01 96       	adiw	r24, 0x01	; 1
    3a6a:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <malloc>
    3a6e:	f7 01       	movw	r30, r14
    3a70:	91 83       	std	Z+1, r25	; 0x01
    3a72:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3a74:	00 97       	sbiw	r24, 0x00	; 0
    3a76:	81 f0       	breq	.+32     	; 0x3a98 <_ZN6StringC1Eii+0x76>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    3a78:	b8 01       	movw	r22, r16
    3a7a:	0e 94 cc 29 	call	0x5398	; 0x5398 <strcpy>
}
    3a7e:	a1 96       	adiw	r28, 0x21	; 33
    3a80:	0f b6       	in	r0, 0x3f	; 63
    3a82:	f8 94       	cli
    3a84:	de bf       	out	0x3e, r29	; 62
    3a86:	0f be       	out	0x3f, r0	; 63
    3a88:	cd bf       	out	0x3d, r28	; 61
    3a8a:	cf 91       	pop	r28
    3a8c:	df 91       	pop	r29
    3a8e:	1f 91       	pop	r17
    3a90:	0f 91       	pop	r16
    3a92:	ff 90       	pop	r15
    3a94:	ef 90       	pop	r14
    3a96:	08 95       	ret
    3a98:	13 82       	std	Z+3, r1	; 0x03
    3a9a:	12 82       	std	Z+2, r1	; 0x02
    3a9c:	15 82       	std	Z+5, r1	; 0x05
    3a9e:	14 82       	std	Z+4, r1	; 0x04
    3aa0:	ee cf       	rjmp	.-36     	; 0x3a7e <_ZN6StringC1Eii+0x5c>

00003aa2 <_ZN6StringC2Eii>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const int value, const int base )
    3aa2:	ef 92       	push	r14
    3aa4:	ff 92       	push	r15
    3aa6:	0f 93       	push	r16
    3aa8:	1f 93       	push	r17
    3aaa:	df 93       	push	r29
    3aac:	cf 93       	push	r28
    3aae:	cd b7       	in	r28, 0x3d	; 61
    3ab0:	de b7       	in	r29, 0x3e	; 62
    3ab2:	a1 97       	sbiw	r28, 0x21	; 33
    3ab4:	0f b6       	in	r0, 0x3f	; 63
    3ab6:	f8 94       	cli
    3ab8:	de bf       	out	0x3e, r29	; 62
    3aba:	0f be       	out	0x3f, r0	; 63
    3abc:	cd bf       	out	0x3d, r28	; 61
    3abe:	7c 01       	movw	r14, r24
    3ac0:	cb 01       	movw	r24, r22
{
  char buf[33];   
  itoa((signed long)value, buf, base);
    3ac2:	8e 01       	movw	r16, r28
    3ac4:	0f 5f       	subi	r16, 0xFF	; 255
    3ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ac8:	b8 01       	movw	r22, r16
    3aca:	0e 94 15 2a 	call	0x542a	; 0x542a <itoa>
  getBuffer( _length = strlen(buf) );
    3ace:	f8 01       	movw	r30, r16
    3ad0:	01 90       	ld	r0, Z+
    3ad2:	00 20       	and	r0, r0
    3ad4:	e9 f7       	brne	.-6      	; 0x3ad0 <_ZN6StringC2Eii+0x2e>
    3ad6:	cf 01       	movw	r24, r30
    3ad8:	01 97       	sbiw	r24, 0x01	; 1
    3ada:	80 1b       	sub	r24, r16
    3adc:	91 0b       	sbc	r25, r17
    3ade:	f7 01       	movw	r30, r14
    3ae0:	95 83       	std	Z+5, r25	; 0x05
    3ae2:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3ae4:	93 83       	std	Z+3, r25	; 0x03
    3ae6:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3ae8:	01 96       	adiw	r24, 0x01	; 1
    3aea:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <malloc>
    3aee:	f7 01       	movw	r30, r14
    3af0:	91 83       	std	Z+1, r25	; 0x01
    3af2:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3af4:	00 97       	sbiw	r24, 0x00	; 0
    3af6:	81 f0       	breq	.+32     	; 0x3b18 <_ZN6StringC2Eii+0x76>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    3af8:	b8 01       	movw	r22, r16
    3afa:	0e 94 cc 29 	call	0x5398	; 0x5398 <strcpy>
}
    3afe:	a1 96       	adiw	r28, 0x21	; 33
    3b00:	0f b6       	in	r0, 0x3f	; 63
    3b02:	f8 94       	cli
    3b04:	de bf       	out	0x3e, r29	; 62
    3b06:	0f be       	out	0x3f, r0	; 63
    3b08:	cd bf       	out	0x3d, r28	; 61
    3b0a:	cf 91       	pop	r28
    3b0c:	df 91       	pop	r29
    3b0e:	1f 91       	pop	r17
    3b10:	0f 91       	pop	r16
    3b12:	ff 90       	pop	r15
    3b14:	ef 90       	pop	r14
    3b16:	08 95       	ret
    3b18:	13 82       	std	Z+3, r1	; 0x03
    3b1a:	12 82       	std	Z+2, r1	; 0x02
    3b1c:	15 82       	std	Z+5, r1	; 0x05
    3b1e:	14 82       	std	Z+4, r1	; 0x04
    3b20:	ee cf       	rjmp	.-36     	; 0x3afe <_ZN6StringC2Eii+0x5c>

00003b22 <__cxa_pure_virtual>:
#include "cplusplushelper.h"
#include <stdlib.h>

void __cxa_pure_virtual(void)
{

    3b22:	08 95       	ret

00003b24 <__cxa_guard_acquire>:
}

int __cxa_guard_acquire(__guard *g)
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	fc 01       	movw	r30, r24
    3b2a:	80 81       	ld	r24, Z
    3b2c:	88 23       	and	r24, r24
    3b2e:	11 f4       	brne	.+4      	; 0x3b34 <__cxa_guard_acquire+0x10>
    3b30:	21 e0       	ldi	r18, 0x01	; 1
    3b32:	30 e0       	ldi	r19, 0x00	; 0
{
	return !*(char *)(g);
    3b34:	c9 01       	movw	r24, r18
    3b36:	08 95       	ret

00003b38 <__cxa_guard_release>:
}
 
void __cxa_guard_release (__guard *g)
{
    3b38:	21 e0       	ldi	r18, 0x01	; 1
    3b3a:	fc 01       	movw	r30, r24
    3b3c:	20 83       	st	Z, r18
	*(char *)g = 1;
    3b3e:	08 95       	ret

00003b40 <__cxa_guard_abort>:
}
 
void __cxa_guard_abort (__guard *)
{

    3b40:	08 95       	ret

00003b42 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    3b42:	10 92 f7 06 	sts	0x06F7, r1

  #if defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega328P__)
    // activate internal pull-ups for twi
    // as per note from atmega8 manual pg167
    sbi(PORTC, 4);
    3b46:	44 9a       	sbi	0x08, 4	; 8
    sbi(PORTC, 5);
    3b48:	45 9a       	sbi	0x08, 5	; 8
    sbi(PORTD, 0);
    sbi(PORTD, 1);
  #endif

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    3b4a:	e9 eb       	ldi	r30, 0xB9	; 185
    3b4c:	f0 e0       	ldi	r31, 0x00	; 0
    3b4e:	80 81       	ld	r24, Z
    3b50:	8e 7f       	andi	r24, 0xFE	; 254
    3b52:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    3b54:	80 81       	ld	r24, Z
    3b56:	8d 7f       	andi	r24, 0xFD	; 253
    3b58:	80 83       	st	Z, r24
  TWBR = ((CPU_FREQ / TWI_FREQ) - 16) / 2;
    3b5a:	88 e4       	ldi	r24, 0x48	; 72
    3b5c:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    3b60:	85 e4       	ldi	r24, 0x45	; 69
    3b62:	80 93 bc 00 	sts	0x00BC, r24
}
    3b66:	08 95       	ret

00003b68 <twi_setAddress>:
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
    3b68:	88 0f       	add	r24, r24
    3b6a:	80 93 ba 00 	sts	0x00BA, r24
}
    3b6e:	08 95       	ret

00003b70 <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3b70:	41 32       	cpi	r20, 0x21	; 33
    3b72:	a0 f5       	brcc	.+104    	; 0x3bdc <twi_readFrom+0x6c>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    3b74:	90 91 f7 06 	lds	r25, 0x06F7
    3b78:	99 23       	and	r25, r25
    3b7a:	e1 f7       	brne	.-8      	; 0x3b74 <twi_readFrom+0x4>
    continue;
  }
  twi_state = TWI_MRX;
    3b7c:	91 e0       	ldi	r25, 0x01	; 1
    3b7e:	90 93 f7 06 	sts	0x06F7, r25
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    3b82:	9f ef       	ldi	r25, 0xFF	; 255
    3b84:	90 93 f6 06 	sts	0x06F6, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    3b88:	10 92 d4 06 	sts	0x06D4, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    3b8c:	94 2f       	mov	r25, r20
    3b8e:	91 50       	subi	r25, 0x01	; 1
    3b90:	90 93 d5 06 	sts	0x06D5, r25
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
  twi_slarw |= address << 1;
    3b94:	88 0f       	add	r24, r24
    3b96:	81 60       	ori	r24, 0x01	; 1
    3b98:	80 93 d3 06 	sts	0x06D3, r24

  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    3b9c:	85 ee       	ldi	r24, 0xE5	; 229
    3b9e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    3ba2:	80 91 f7 06 	lds	r24, 0x06F7
    3ba6:	81 30       	cpi	r24, 0x01	; 1
    3ba8:	e1 f3       	breq	.-8      	; 0x3ba2 <twi_readFrom+0x32>
    continue;
  }

  if (twi_masterBufferIndex < length)
    3baa:	80 91 d4 06 	lds	r24, 0x06D4
    3bae:	84 17       	cp	r24, r20
    3bb0:	90 f0       	brcs	.+36     	; 0x3bd6 <twi_readFrom+0x66>
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    3bb2:	44 23       	and	r20, r20
    3bb4:	71 f0       	breq	.+28     	; 0x3bd2 <twi_readFrom+0x62>
    3bb6:	20 e0       	ldi	r18, 0x00	; 0
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    data[i] = twi_masterBuffer[i];
    3bba:	fb 01       	movw	r30, r22
    3bbc:	e2 0f       	add	r30, r18
    3bbe:	f3 1f       	adc	r31, r19
    3bc0:	d9 01       	movw	r26, r18
    3bc2:	aa 52       	subi	r26, 0x2A	; 42
    3bc4:	b9 4f       	sbci	r27, 0xF9	; 249
    3bc6:	9c 91       	ld	r25, X
    3bc8:	90 83       	st	Z, r25
    3bca:	2f 5f       	subi	r18, 0xFF	; 255
    3bcc:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    3bce:	24 17       	cp	r18, r20
    3bd0:	a0 f3       	brcs	.-24     	; 0x3bba <twi_readFrom+0x4a>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    3bd2:	84 2f       	mov	r24, r20
    3bd4:	08 95       	ret
  while(TWI_MRX == twi_state){
    continue;
  }

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;
    3bd6:	40 91 d4 06 	lds	r20, 0x06D4
    3bda:	eb cf       	rjmp	.-42     	; 0x3bb2 <twi_readFrom+0x42>
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3bdc:	40 e0       	ldi	r20, 0x00	; 0
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    3bde:	84 2f       	mov	r24, r20
    3be0:	08 95       	ret

00003be2 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait)
{
    3be2:	cf 93       	push	r28
    3be4:	df 93       	push	r29
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3be6:	41 32       	cpi	r20, 0x21	; 33
    3be8:	08 f0       	brcs	.+2      	; 0x3bec <twi_writeTo+0xa>
    3bea:	43 c0       	rjmp	.+134    	; 0x3c72 <twi_writeTo+0x90>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    3bec:	90 91 f7 06 	lds	r25, 0x06F7
    3bf0:	99 23       	and	r25, r25
    3bf2:	e1 f7       	brne	.-8      	; 0x3bec <twi_writeTo+0xa>
    continue;
  }
  twi_state = TWI_MTX;
    3bf4:	92 e0       	ldi	r25, 0x02	; 2
    3bf6:	90 93 f7 06 	sts	0x06F7, r25
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    3bfa:	9f ef       	ldi	r25, 0xFF	; 255
    3bfc:	90 93 f6 06 	sts	0x06F6, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    3c00:	10 92 d4 06 	sts	0x06D4, r1
  twi_masterBufferLength = length;
    3c04:	40 93 d5 06 	sts	0x06D5, r20
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    3c08:	44 23       	and	r20, r20
    3c0a:	69 f0       	breq	.+26     	; 0x3c26 <twi_writeTo+0x44>
    3c0c:	e0 e0       	ldi	r30, 0x00	; 0
    3c0e:	f0 e0       	ldi	r31, 0x00	; 0
    twi_masterBuffer[i] = data[i];
    3c10:	df 01       	movw	r26, r30
    3c12:	aa 52       	subi	r26, 0x2A	; 42
    3c14:	b9 4f       	sbci	r27, 0xF9	; 249
    3c16:	eb 01       	movw	r28, r22
    3c18:	ce 0f       	add	r28, r30
    3c1a:	df 1f       	adc	r29, r31
    3c1c:	98 81       	ld	r25, Y
    3c1e:	9c 93       	st	X, r25
    3c20:	31 96       	adiw	r30, 0x01	; 1
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    3c22:	e4 17       	cp	r30, r20
    3c24:	a8 f3       	brcs	.-22     	; 0x3c10 <twi_writeTo+0x2e>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
  twi_slarw |= address << 1;
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	88 0f       	add	r24, r24
    3c2a:	99 1f       	adc	r25, r25
    3c2c:	80 93 d3 06 	sts	0x06D3, r24
  
  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    3c30:	85 ee       	ldi	r24, 0xE5	; 229
    3c32:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    3c36:	22 23       	and	r18, r18
    3c38:	81 f4       	brne	.+32     	; 0x3c5a <twi_writeTo+0x78>
    continue;
  }
  
  if (twi_error == 0xFF)
    3c3a:	80 91 f6 06 	lds	r24, 0x06F6
    3c3e:	8f 3f       	cpi	r24, 0xFF	; 255
    3c40:	a1 f0       	breq	.+40     	; 0x3c6a <twi_writeTo+0x88>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    3c42:	80 91 f6 06 	lds	r24, 0x06F6
    3c46:	80 32       	cpi	r24, 0x20	; 32
    3c48:	c1 f0       	breq	.+48     	; 0x3c7a <twi_writeTo+0x98>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    3c4a:	80 91 f6 06 	lds	r24, 0x06F6
    3c4e:	80 33       	cpi	r24, 0x30	; 48
    3c50:	b1 f0       	breq	.+44     	; 0x3c7e <twi_writeTo+0x9c>
    3c52:	84 e0       	ldi	r24, 0x04	; 4
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    3c54:	df 91       	pop	r29
    3c56:	cf 91       	pop	r28
    3c58:	08 95       	ret
  
  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    3c5a:	80 91 f7 06 	lds	r24, 0x06F7
    3c5e:	82 30       	cpi	r24, 0x02	; 2
    3c60:	e1 f3       	breq	.-8      	; 0x3c5a <twi_writeTo+0x78>
    continue;
  }
  
  if (twi_error == 0xFF)
    3c62:	80 91 f6 06 	lds	r24, 0x06F6
    3c66:	8f 3f       	cpi	r24, 0xFF	; 255
    3c68:	61 f7       	brne	.-40     	; 0x3c42 <twi_writeTo+0x60>
    3c6a:	80 e0       	ldi	r24, 0x00	; 0
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    3c6c:	df 91       	pop	r29
    3c6e:	cf 91       	pop	r28
    3c70:	08 95       	ret
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3c72:	81 e0       	ldi	r24, 0x01	; 1
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    3c74:	df 91       	pop	r29
    3c76:	cf 91       	pop	r28
    3c78:	08 95       	ret
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    3c7a:	82 e0       	ldi	r24, 0x02	; 2
    3c7c:	eb cf       	rjmp	.-42     	; 0x3c54 <twi_writeTo+0x72>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    3c7e:	83 e0       	ldi	r24, 0x03	; 3
    3c80:	e9 cf       	rjmp	.-46     	; 0x3c54 <twi_writeTo+0x72>

00003c82 <twi_transmit>:
uint8_t twi_transmit(uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3c82:	61 32       	cpi	r22, 0x21	; 33
    3c84:	d0 f4       	brcc	.+52     	; 0x3cba <twi_transmit+0x38>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    3c86:	20 91 f7 06 	lds	r18, 0x06F7
    3c8a:	24 30       	cpi	r18, 0x04	; 4
    3c8c:	11 f0       	breq	.+4      	; 0x3c92 <twi_transmit+0x10>
    3c8e:	82 e0       	ldi	r24, 0x02	; 2
    3c90:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    3c92:	60 93 1c 07 	sts	0x071C, r22
  for(i = 0; i < length; ++i){
    3c96:	66 23       	and	r22, r22
    3c98:	71 f0       	breq	.+28     	; 0x3cb6 <twi_transmit+0x34>
    3c9a:	20 e0       	ldi	r18, 0x00	; 0
    3c9c:	30 e0       	ldi	r19, 0x00	; 0
    twi_txBuffer[i] = data[i];
    3c9e:	f9 01       	movw	r30, r18
    3ca0:	e1 5e       	subi	r30, 0xE1	; 225
    3ca2:	f8 4f       	sbci	r31, 0xF8	; 248
    3ca4:	dc 01       	movw	r26, r24
    3ca6:	a2 0f       	add	r26, r18
    3ca8:	b3 1f       	adc	r27, r19
    3caa:	4c 91       	ld	r20, X
    3cac:	40 83       	st	Z, r20
    3cae:	2f 5f       	subi	r18, 0xFF	; 255
    3cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    3cb2:	26 17       	cp	r18, r22
    3cb4:	a0 f3       	brcs	.-24     	; 0x3c9e <twi_transmit+0x1c>
    3cb6:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    3cb8:	08 95       	ret
uint8_t twi_transmit(uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3cba:	81 e0       	ldi	r24, 0x01	; 1
    3cbc:	08 95       	ret

00003cbe <twi_attachSlaveRxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    3cbe:	90 93 1a 07 	sts	0x071A, r25
    3cc2:	80 93 19 07 	sts	0x0719, r24
}
    3cc6:	08 95       	ret

00003cc8 <twi_attachSlaveTxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    3cc8:	90 93 1e 07 	sts	0x071E, r25
    3ccc:	80 93 1d 07 	sts	0x071D, r24
}
    3cd0:	08 95       	ret

00003cd2 <twi_reply>:
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    3cd2:	88 23       	and	r24, r24
    3cd4:	21 f4       	brne	.+8      	; 0x3cde <twi_reply+0xc>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3cd6:	85 e8       	ldi	r24, 0x85	; 133
    3cd8:	80 93 bc 00 	sts	0x00BC, r24
    3cdc:	08 95       	ret
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3cde:	85 ec       	ldi	r24, 0xC5	; 197
    3ce0:	80 93 bc 00 	sts	0x00BC, r24
    3ce4:	08 95       	ret

00003ce6 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3ce6:	85 ed       	ldi	r24, 0xD5	; 213
    3ce8:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3cec:	80 91 bc 00 	lds	r24, 0x00BC
    3cf0:	84 fd       	sbrc	r24, 4
    3cf2:	fc cf       	rjmp	.-8      	; 0x3cec <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3cf4:	10 92 f7 06 	sts	0x06F7, r1
}
    3cf8:	08 95       	ret

00003cfa <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3cfa:	85 ec       	ldi	r24, 0xC5	; 197
    3cfc:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    3d00:	10 92 f7 06 	sts	0x06F7, r1
}
    3d04:	08 95       	ret

00003d06 <__vector_24>:

SIGNAL(TWI_vect)
{
    3d06:	1f 92       	push	r1
    3d08:	0f 92       	push	r0
    3d0a:	0f b6       	in	r0, 0x3f	; 63
    3d0c:	0f 92       	push	r0
    3d0e:	11 24       	eor	r1, r1
    3d10:	2f 93       	push	r18
    3d12:	3f 93       	push	r19
    3d14:	4f 93       	push	r20
    3d16:	5f 93       	push	r21
    3d18:	6f 93       	push	r22
    3d1a:	7f 93       	push	r23
    3d1c:	8f 93       	push	r24
    3d1e:	9f 93       	push	r25
    3d20:	af 93       	push	r26
    3d22:	bf 93       	push	r27
    3d24:	ef 93       	push	r30
    3d26:	ff 93       	push	r31
  switch(TW_STATUS){
    3d28:	80 91 b9 00 	lds	r24, 0x00B9
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	a0 e0       	ldi	r26, 0x00	; 0
    3d30:	b0 e0       	ldi	r27, 0x00	; 0
    3d32:	88 7f       	andi	r24, 0xF8	; 248
    3d34:	90 70       	andi	r25, 0x00	; 0
    3d36:	a0 70       	andi	r26, 0x00	; 0
    3d38:	b0 70       	andi	r27, 0x00	; 0
    3d3a:	89 3c       	cpi	r24, 0xC9	; 201
    3d3c:	91 05       	cpc	r25, r1
    3d3e:	98 f5       	brcc	.+102    	; 0x3da6 <__vector_24+0xa0>
    3d40:	8c 5c       	subi	r24, 0xCC	; 204
    3d42:	9f 4f       	sbci	r25, 0xFF	; 255
    3d44:	fc 01       	movw	r30, r24
    3d46:	ee 0f       	add	r30, r30
    3d48:	ff 1f       	adc	r31, r31
    3d4a:	05 90       	lpm	r0, Z+
    3d4c:	f4 91       	lpm	r31, Z+
    3d4e:	e0 2d       	mov	r30, r0
    3d50:	09 94       	ijmp
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3d52:	84 e0       	ldi	r24, 0x04	; 4
    3d54:	80 93 f7 06 	sts	0x06F7, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3d58:	10 92 1b 07 	sts	0x071B, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3d5c:	10 92 1c 07 	sts	0x071C, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3d60:	e0 91 1d 07 	lds	r30, 0x071D
    3d64:	f0 91 1e 07 	lds	r31, 0x071E
    3d68:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3d6a:	80 91 1c 07 	lds	r24, 0x071C
    3d6e:	88 23       	and	r24, r24
    3d70:	29 f4       	brne	.+10     	; 0x3d7c <__vector_24+0x76>
        twi_txBufferLength = 1;
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	80 93 1c 07 	sts	0x071C, r24
        twi_txBuffer[0] = 0x00;
    3d78:	10 92 1f 07 	sts	0x071F, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3d7c:	80 91 1b 07 	lds	r24, 0x071B
    3d80:	e8 2f       	mov	r30, r24
    3d82:	f0 e0       	ldi	r31, 0x00	; 0
    3d84:	e1 5e       	subi	r30, 0xE1	; 225
    3d86:	f8 4f       	sbci	r31, 0xF8	; 248
    3d88:	90 81       	ld	r25, Z
    3d8a:	90 93 bb 00 	sts	0x00BB, r25
    3d8e:	8f 5f       	subi	r24, 0xFF	; 255
    3d90:	80 93 1b 07 	sts	0x071B, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3d94:	90 91 1b 07 	lds	r25, 0x071B
    3d98:	80 91 1c 07 	lds	r24, 0x071C
    3d9c:	98 17       	cp	r25, r24
    3d9e:	c8 f4       	brcc	.+50     	; 0x3dd2 <__vector_24+0xcc>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3da0:	85 ec       	ldi	r24, 0xC5	; 197
    3da2:	80 93 bc 00 	sts	0x00BC, r24
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    3da6:	ff 91       	pop	r31
    3da8:	ef 91       	pop	r30
    3daa:	bf 91       	pop	r27
    3dac:	af 91       	pop	r26
    3dae:	9f 91       	pop	r25
    3db0:	8f 91       	pop	r24
    3db2:	7f 91       	pop	r23
    3db4:	6f 91       	pop	r22
    3db6:	5f 91       	pop	r21
    3db8:	4f 91       	pop	r20
    3dba:	3f 91       	pop	r19
    3dbc:	2f 91       	pop	r18
    3dbe:	0f 90       	pop	r0
    3dc0:	0f be       	out	0x3f, r0	; 63
    3dc2:	0f 90       	pop	r0
    3dc4:	1f 90       	pop	r1
    3dc6:	18 95       	reti
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3dc8:	80 91 f8 06 	lds	r24, 0x06F8
    3dcc:	80 32       	cpi	r24, 0x20	; 32
    3dce:	08 f4       	brcc	.+2      	; 0x3dd2 <__vector_24+0xcc>
    3dd0:	9c c0       	rjmp	.+312    	; 0x3f0a <__vector_24+0x204>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3dd2:	85 e8       	ldi	r24, 0x85	; 133
    3dd4:	80 93 bc 00 	sts	0x00BC, r24
    3dd8:	e6 cf       	rjmp	.-52     	; 0x3da6 <__vector_24+0xa0>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3dda:	80 91 d4 06 	lds	r24, 0x06D4
    3dde:	90 91 bb 00 	lds	r25, 0x00BB
    3de2:	e8 2f       	mov	r30, r24
    3de4:	f0 e0       	ldi	r31, 0x00	; 0
    3de6:	ea 52       	subi	r30, 0x2A	; 42
    3de8:	f9 4f       	sbci	r31, 0xF9	; 249
    3dea:	90 83       	st	Z, r25
    3dec:	8f 5f       	subi	r24, 0xFF	; 255
    3dee:	80 93 d4 06 	sts	0x06D4, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3df2:	90 91 d4 06 	lds	r25, 0x06D4
    3df6:	80 91 d5 06 	lds	r24, 0x06D5
    3dfa:	98 17       	cp	r25, r24
    3dfc:	50 f7       	brcc	.-44     	; 0x3dd2 <__vector_24+0xcc>
    3dfe:	d0 cf       	rjmp	.-96     	; 0x3da0 <__vector_24+0x9a>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3e00:	80 91 d4 06 	lds	r24, 0x06D4
    3e04:	90 91 bb 00 	lds	r25, 0x00BB
    3e08:	e8 2f       	mov	r30, r24
    3e0a:	f0 e0       	ldi	r31, 0x00	; 0
    3e0c:	ea 52       	subi	r30, 0x2A	; 42
    3e0e:	f9 4f       	sbci	r31, 0xF9	; 249
    3e10:	90 83       	st	Z, r25
    3e12:	8f 5f       	subi	r24, 0xFF	; 255
    3e14:	80 93 d4 06 	sts	0x06D4, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3e18:	85 ed       	ldi	r24, 0xD5	; 213
    3e1a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3e1e:	80 91 bc 00 	lds	r24, 0x00BC
    3e22:	84 fd       	sbrc	r24, 4
    3e24:	fc cf       	rjmp	.-8      	; 0x3e1e <__vector_24+0x118>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3e26:	10 92 f7 06 	sts	0x06F7, r1
    3e2a:	bd cf       	rjmp	.-134    	; 0x3da6 <__vector_24+0xa0>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3e2c:	85 ec       	ldi	r24, 0xC5	; 197
    3e2e:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3e32:	10 92 f7 06 	sts	0x06F7, r1
      break;
    3e36:	b7 cf       	rjmp	.-146    	; 0x3da6 <__vector_24+0xa0>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3e38:	83 e0       	ldi	r24, 0x03	; 3
    3e3a:	80 93 f7 06 	sts	0x06F7, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3e3e:	10 92 f8 06 	sts	0x06F8, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3e42:	85 ec       	ldi	r24, 0xC5	; 197
    3e44:	80 93 bc 00 	sts	0x00BC, r24
    3e48:	ae cf       	rjmp	.-164    	; 0x3da6 <__vector_24+0xa0>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3e4a:	10 92 f6 06 	sts	0x06F6, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3e4e:	85 ed       	ldi	r24, 0xD5	; 213
    3e50:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3e54:	80 91 bc 00 	lds	r24, 0x00BC
    3e58:	84 fd       	sbrc	r24, 4
    3e5a:	fc cf       	rjmp	.-8      	; 0x3e54 <__vector_24+0x14e>
    3e5c:	e4 cf       	rjmp	.-56     	; 0x3e26 <__vector_24+0x120>
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3e5e:	80 91 d3 06 	lds	r24, 0x06D3
    3e62:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3e66:	85 ec       	ldi	r24, 0xC5	; 197
    3e68:	80 93 bc 00 	sts	0x00BC, r24
    3e6c:	9c cf       	rjmp	.-200    	; 0x3da6 <__vector_24+0xa0>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3e6e:	90 91 d4 06 	lds	r25, 0x06D4
    3e72:	80 91 d5 06 	lds	r24, 0x06D5
    3e76:	98 17       	cp	r25, r24
    3e78:	08 f4       	brcc	.+2      	; 0x3e7c <__vector_24+0x176>
    3e7a:	5e c0       	rjmp	.+188    	; 0x3f38 <__vector_24+0x232>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3e7c:	85 ed       	ldi	r24, 0xD5	; 213
    3e7e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3e82:	80 91 bc 00 	lds	r24, 0x00BC
    3e86:	84 fd       	sbrc	r24, 4
    3e88:	fc cf       	rjmp	.-8      	; 0x3e82 <__vector_24+0x17c>
    3e8a:	cd cf       	rjmp	.-102    	; 0x3e26 <__vector_24+0x120>
      }else{
        twi_stop();
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    3e8c:	80 e2       	ldi	r24, 0x20	; 32
    3e8e:	80 93 f6 06 	sts	0x06F6, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3e92:	85 ed       	ldi	r24, 0xD5	; 213
    3e94:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3e98:	80 91 bc 00 	lds	r24, 0x00BC
    3e9c:	84 fd       	sbrc	r24, 4
    3e9e:	fc cf       	rjmp	.-8      	; 0x3e98 <__vector_24+0x192>
    3ea0:	c2 cf       	rjmp	.-124    	; 0x3e26 <__vector_24+0x120>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3ea2:	80 91 f8 06 	lds	r24, 0x06F8
    3ea6:	80 32       	cpi	r24, 0x20	; 32
    3ea8:	08 f4       	brcc	.+2      	; 0x3eac <__vector_24+0x1a6>
    3eaa:	3f c0       	rjmp	.+126    	; 0x3f2a <__vector_24+0x224>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3eac:	85 ed       	ldi	r24, 0xD5	; 213
    3eae:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3eb2:	80 91 bc 00 	lds	r24, 0x00BC
    3eb6:	84 fd       	sbrc	r24, 4
    3eb8:	fc cf       	rjmp	.-8      	; 0x3eb2 <__vector_24+0x1ac>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3eba:	10 92 f7 06 	sts	0x06F7, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3ebe:	60 91 f8 06 	lds	r22, 0x06F8
    3ec2:	e0 91 19 07 	lds	r30, 0x0719
    3ec6:	f0 91 1a 07 	lds	r31, 0x071A
    3eca:	89 ef       	ldi	r24, 0xF9	; 249
    3ecc:	96 e0       	ldi	r25, 0x06	; 6
    3ece:	70 e0       	ldi	r23, 0x00	; 0
    3ed0:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3ed2:	10 92 f8 06 	sts	0x06F8, r1
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3ed6:	85 ec       	ldi	r24, 0xC5	; 197
    3ed8:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    3edc:	10 92 f7 06 	sts	0x06F7, r1
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      break;
    3ee0:	62 cf       	rjmp	.-316    	; 0x3da6 <__vector_24+0xa0>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3ee2:	80 e3       	ldi	r24, 0x30	; 48
    3ee4:	80 93 f6 06 	sts	0x06F6, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3ee8:	85 ed       	ldi	r24, 0xD5	; 213
    3eea:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3eee:	80 91 bc 00 	lds	r24, 0x00BC
    3ef2:	84 fd       	sbrc	r24, 4
    3ef4:	fc cf       	rjmp	.-8      	; 0x3eee <__vector_24+0x1e8>
    3ef6:	97 cf       	rjmp	.-210    	; 0x3e26 <__vector_24+0x120>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3ef8:	88 e3       	ldi	r24, 0x38	; 56
    3efa:	80 93 f6 06 	sts	0x06F6, r24
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3efe:	85 ec       	ldi	r24, 0xC5	; 197
    3f00:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    3f04:	10 92 f7 06 	sts	0x06F7, r1
    3f08:	4e cf       	rjmp	.-356    	; 0x3da6 <__vector_24+0xa0>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3f0a:	80 91 f8 06 	lds	r24, 0x06F8
    3f0e:	90 91 bb 00 	lds	r25, 0x00BB
    3f12:	e8 2f       	mov	r30, r24
    3f14:	f0 e0       	ldi	r31, 0x00	; 0
    3f16:	e7 50       	subi	r30, 0x07	; 7
    3f18:	f9 4f       	sbci	r31, 0xF9	; 249
    3f1a:	90 83       	st	Z, r25
    3f1c:	8f 5f       	subi	r24, 0xFF	; 255
    3f1e:	80 93 f8 06 	sts	0x06F8, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3f22:	85 ec       	ldi	r24, 0xC5	; 197
    3f24:	80 93 bc 00 	sts	0x00BC, r24
    3f28:	3e cf       	rjmp	.-388    	; 0x3da6 <__vector_24+0xa0>
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3f2a:	e0 91 f8 06 	lds	r30, 0x06F8
    3f2e:	f0 e0       	ldi	r31, 0x00	; 0
    3f30:	e7 50       	subi	r30, 0x07	; 7
    3f32:	f9 4f       	sbci	r31, 0xF9	; 249
    3f34:	10 82       	st	Z, r1
    3f36:	ba cf       	rjmp	.-140    	; 0x3eac <__vector_24+0x1a6>
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3f38:	80 91 d4 06 	lds	r24, 0x06D4
    3f3c:	e8 2f       	mov	r30, r24
    3f3e:	f0 e0       	ldi	r31, 0x00	; 0
    3f40:	ea 52       	subi	r30, 0x2A	; 42
    3f42:	f9 4f       	sbci	r31, 0xF9	; 249
    3f44:	90 81       	ld	r25, Z
    3f46:	90 93 bb 00 	sts	0x00BB, r25
    3f4a:	8f 5f       	subi	r24, 0xFF	; 255
    3f4c:	80 93 d4 06 	sts	0x06D4, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3f50:	85 ec       	ldi	r24, 0xC5	; 197
    3f52:	80 93 bc 00 	sts	0x00BC, r24
    3f56:	27 cf       	rjmp	.-434    	; 0x3da6 <__vector_24+0xa0>

00003f58 <__fixunssfsi>:
    3f58:	ef 92       	push	r14
    3f5a:	ff 92       	push	r15
    3f5c:	0f 93       	push	r16
    3f5e:	1f 93       	push	r17
    3f60:	7b 01       	movw	r14, r22
    3f62:	8c 01       	movw	r16, r24
    3f64:	20 e0       	ldi	r18, 0x00	; 0
    3f66:	30 e0       	ldi	r19, 0x00	; 0
    3f68:	40 e0       	ldi	r20, 0x00	; 0
    3f6a:	5f e4       	ldi	r21, 0x4F	; 79
    3f6c:	0e 94 2c 23 	call	0x4658	; 0x4658 <__gesf2>
    3f70:	88 23       	and	r24, r24
    3f72:	8c f0       	brlt	.+34     	; 0x3f96 <__fixunssfsi+0x3e>
    3f74:	c8 01       	movw	r24, r16
    3f76:	b7 01       	movw	r22, r14
    3f78:	20 e0       	ldi	r18, 0x00	; 0
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	40 e0       	ldi	r20, 0x00	; 0
    3f7e:	5f e4       	ldi	r21, 0x4F	; 79
    3f80:	0e 94 28 21 	call	0x4250	; 0x4250 <__subsf3>
    3f84:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <__fixsfsi>
    3f88:	9b 01       	movw	r18, r22
    3f8a:	ac 01       	movw	r20, r24
    3f8c:	20 50       	subi	r18, 0x00	; 0
    3f8e:	30 40       	sbci	r19, 0x00	; 0
    3f90:	40 40       	sbci	r20, 0x00	; 0
    3f92:	50 48       	sbci	r21, 0x80	; 128
    3f94:	06 c0       	rjmp	.+12     	; 0x3fa2 <__fixunssfsi+0x4a>
    3f96:	c8 01       	movw	r24, r16
    3f98:	b7 01       	movw	r22, r14
    3f9a:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <__fixsfsi>
    3f9e:	9b 01       	movw	r18, r22
    3fa0:	ac 01       	movw	r20, r24
    3fa2:	b9 01       	movw	r22, r18
    3fa4:	ca 01       	movw	r24, r20
    3fa6:	1f 91       	pop	r17
    3fa8:	0f 91       	pop	r16
    3faa:	ff 90       	pop	r15
    3fac:	ef 90       	pop	r14
    3fae:	08 95       	ret

00003fb0 <_fpadd_parts>:
    3fb0:	a0 e0       	ldi	r26, 0x00	; 0
    3fb2:	b0 e0       	ldi	r27, 0x00	; 0
    3fb4:	ee ed       	ldi	r30, 0xDE	; 222
    3fb6:	ff e1       	ldi	r31, 0x1F	; 31
    3fb8:	0c 94 f4 26 	jmp	0x4de8	; 0x4de8 <__prologue_saves__+0x4>
    3fbc:	fc 01       	movw	r30, r24
    3fbe:	2b 01       	movw	r4, r22
    3fc0:	ea 01       	movw	r28, r20
    3fc2:	80 81       	ld	r24, Z
    3fc4:	82 30       	cpi	r24, 0x02	; 2
    3fc6:	08 f4       	brcc	.+2      	; 0x3fca <_fpadd_parts+0x1a>
    3fc8:	3d c1       	rjmp	.+634    	; 0x4244 <_fpadd_parts+0x294>
    3fca:	db 01       	movw	r26, r22
    3fcc:	9c 91       	ld	r25, X
    3fce:	92 30       	cpi	r25, 0x02	; 2
    3fd0:	08 f4       	brcc	.+2      	; 0x3fd4 <_fpadd_parts+0x24>
    3fd2:	37 c1       	rjmp	.+622    	; 0x4242 <_fpadd_parts+0x292>
    3fd4:	84 30       	cpi	r24, 0x04	; 4
    3fd6:	69 f4       	brne	.+26     	; 0x3ff2 <_fpadd_parts+0x42>
    3fd8:	94 30       	cpi	r25, 0x04	; 4
    3fda:	09 f0       	breq	.+2      	; 0x3fde <_fpadd_parts+0x2e>
    3fdc:	33 c1       	rjmp	.+614    	; 0x4244 <_fpadd_parts+0x294>
    3fde:	91 81       	ldd	r25, Z+1	; 0x01
    3fe0:	11 96       	adiw	r26, 0x01	; 1
    3fe2:	8c 91       	ld	r24, X
    3fe4:	11 97       	sbiw	r26, 0x01	; 1
    3fe6:	98 17       	cp	r25, r24
    3fe8:	09 f4       	brne	.+2      	; 0x3fec <_fpadd_parts+0x3c>
    3fea:	2c c1       	rjmp	.+600    	; 0x4244 <_fpadd_parts+0x294>
    3fec:	e1 e7       	ldi	r30, 0x71	; 113
    3fee:	f1 e0       	ldi	r31, 0x01	; 1
    3ff0:	29 c1       	rjmp	.+594    	; 0x4244 <_fpadd_parts+0x294>
    3ff2:	94 30       	cpi	r25, 0x04	; 4
    3ff4:	09 f4       	brne	.+2      	; 0x3ff8 <_fpadd_parts+0x48>
    3ff6:	25 c1       	rjmp	.+586    	; 0x4242 <_fpadd_parts+0x292>
    3ff8:	92 30       	cpi	r25, 0x02	; 2
    3ffa:	a9 f4       	brne	.+42     	; 0x4026 <_fpadd_parts+0x76>
    3ffc:	82 30       	cpi	r24, 0x02	; 2
    3ffe:	09 f0       	breq	.+2      	; 0x4002 <_fpadd_parts+0x52>
    4000:	21 c1       	rjmp	.+578    	; 0x4244 <_fpadd_parts+0x294>
    4002:	9f 01       	movw	r18, r30
    4004:	88 e0       	ldi	r24, 0x08	; 8
    4006:	d9 01       	movw	r26, r18
    4008:	0d 90       	ld	r0, X+
    400a:	9d 01       	movw	r18, r26
    400c:	da 01       	movw	r26, r20
    400e:	0d 92       	st	X+, r0
    4010:	ad 01       	movw	r20, r26
    4012:	81 50       	subi	r24, 0x01	; 1
    4014:	c1 f7       	brne	.-16     	; 0x4006 <_fpadd_parts+0x56>
    4016:	d2 01       	movw	r26, r4
    4018:	11 96       	adiw	r26, 0x01	; 1
    401a:	8c 91       	ld	r24, X
    401c:	11 97       	sbiw	r26, 0x01	; 1
    401e:	91 81       	ldd	r25, Z+1	; 0x01
    4020:	89 23       	and	r24, r25
    4022:	89 83       	std	Y+1, r24	; 0x01
    4024:	0c c1       	rjmp	.+536    	; 0x423e <_fpadd_parts+0x28e>
    4026:	82 30       	cpi	r24, 0x02	; 2
    4028:	09 f4       	brne	.+2      	; 0x402c <_fpadd_parts+0x7c>
    402a:	0b c1       	rjmp	.+534    	; 0x4242 <_fpadd_parts+0x292>
    402c:	82 81       	ldd	r24, Z+2	; 0x02
    402e:	93 81       	ldd	r25, Z+3	; 0x03
    4030:	db 01       	movw	r26, r22
    4032:	12 96       	adiw	r26, 0x02	; 2
    4034:	4d 91       	ld	r20, X+
    4036:	5c 91       	ld	r21, X
    4038:	13 97       	sbiw	r26, 0x03	; 3
    403a:	e4 80       	ldd	r14, Z+4	; 0x04
    403c:	f5 80       	ldd	r15, Z+5	; 0x05
    403e:	06 81       	ldd	r16, Z+6	; 0x06
    4040:	17 81       	ldd	r17, Z+7	; 0x07
    4042:	14 96       	adiw	r26, 0x04	; 4
    4044:	ad 90       	ld	r10, X+
    4046:	bd 90       	ld	r11, X+
    4048:	cd 90       	ld	r12, X+
    404a:	dc 90       	ld	r13, X
    404c:	17 97       	sbiw	r26, 0x07	; 7
    404e:	9c 01       	movw	r18, r24
    4050:	24 1b       	sub	r18, r20
    4052:	35 0b       	sbc	r19, r21
    4054:	b9 01       	movw	r22, r18
    4056:	37 ff       	sbrs	r19, 7
    4058:	04 c0       	rjmp	.+8      	; 0x4062 <_fpadd_parts+0xb2>
    405a:	66 27       	eor	r22, r22
    405c:	77 27       	eor	r23, r23
    405e:	62 1b       	sub	r22, r18
    4060:	73 0b       	sbc	r23, r19
    4062:	60 32       	cpi	r22, 0x20	; 32
    4064:	71 05       	cpc	r23, r1
    4066:	0c f0       	brlt	.+2      	; 0x406a <_fpadd_parts+0xba>
    4068:	62 c0       	rjmp	.+196    	; 0x412e <_fpadd_parts+0x17e>
    406a:	12 16       	cp	r1, r18
    406c:	13 06       	cpc	r1, r19
    406e:	6c f5       	brge	.+90     	; 0x40ca <_fpadd_parts+0x11a>
    4070:	35 01       	movw	r6, r10
    4072:	46 01       	movw	r8, r12
    4074:	06 2e       	mov	r0, r22
    4076:	04 c0       	rjmp	.+8      	; 0x4080 <_fpadd_parts+0xd0>
    4078:	96 94       	lsr	r9
    407a:	87 94       	ror	r8
    407c:	77 94       	ror	r7
    407e:	67 94       	ror	r6
    4080:	0a 94       	dec	r0
    4082:	d2 f7       	brpl	.-12     	; 0x4078 <_fpadd_parts+0xc8>
    4084:	21 e0       	ldi	r18, 0x01	; 1
    4086:	30 e0       	ldi	r19, 0x00	; 0
    4088:	40 e0       	ldi	r20, 0x00	; 0
    408a:	50 e0       	ldi	r21, 0x00	; 0
    408c:	04 c0       	rjmp	.+8      	; 0x4096 <_fpadd_parts+0xe6>
    408e:	22 0f       	add	r18, r18
    4090:	33 1f       	adc	r19, r19
    4092:	44 1f       	adc	r20, r20
    4094:	55 1f       	adc	r21, r21
    4096:	6a 95       	dec	r22
    4098:	d2 f7       	brpl	.-12     	; 0x408e <_fpadd_parts+0xde>
    409a:	21 50       	subi	r18, 0x01	; 1
    409c:	30 40       	sbci	r19, 0x00	; 0
    409e:	40 40       	sbci	r20, 0x00	; 0
    40a0:	50 40       	sbci	r21, 0x00	; 0
    40a2:	2a 21       	and	r18, r10
    40a4:	3b 21       	and	r19, r11
    40a6:	4c 21       	and	r20, r12
    40a8:	5d 21       	and	r21, r13
    40aa:	21 15       	cp	r18, r1
    40ac:	31 05       	cpc	r19, r1
    40ae:	41 05       	cpc	r20, r1
    40b0:	51 05       	cpc	r21, r1
    40b2:	21 f0       	breq	.+8      	; 0x40bc <_fpadd_parts+0x10c>
    40b4:	21 e0       	ldi	r18, 0x01	; 1
    40b6:	30 e0       	ldi	r19, 0x00	; 0
    40b8:	40 e0       	ldi	r20, 0x00	; 0
    40ba:	50 e0       	ldi	r21, 0x00	; 0
    40bc:	59 01       	movw	r10, r18
    40be:	6a 01       	movw	r12, r20
    40c0:	a6 28       	or	r10, r6
    40c2:	b7 28       	or	r11, r7
    40c4:	c8 28       	or	r12, r8
    40c6:	d9 28       	or	r13, r9
    40c8:	3d c0       	rjmp	.+122    	; 0x4144 <_fpadd_parts+0x194>
    40ca:	21 15       	cp	r18, r1
    40cc:	31 05       	cpc	r19, r1
    40ce:	d1 f1       	breq	.+116    	; 0x4144 <_fpadd_parts+0x194>
    40d0:	86 0f       	add	r24, r22
    40d2:	97 1f       	adc	r25, r23
    40d4:	37 01       	movw	r6, r14
    40d6:	48 01       	movw	r8, r16
    40d8:	06 2e       	mov	r0, r22
    40da:	04 c0       	rjmp	.+8      	; 0x40e4 <_fpadd_parts+0x134>
    40dc:	96 94       	lsr	r9
    40de:	87 94       	ror	r8
    40e0:	77 94       	ror	r7
    40e2:	67 94       	ror	r6
    40e4:	0a 94       	dec	r0
    40e6:	d2 f7       	brpl	.-12     	; 0x40dc <_fpadd_parts+0x12c>
    40e8:	21 e0       	ldi	r18, 0x01	; 1
    40ea:	30 e0       	ldi	r19, 0x00	; 0
    40ec:	40 e0       	ldi	r20, 0x00	; 0
    40ee:	50 e0       	ldi	r21, 0x00	; 0
    40f0:	04 c0       	rjmp	.+8      	; 0x40fa <_fpadd_parts+0x14a>
    40f2:	22 0f       	add	r18, r18
    40f4:	33 1f       	adc	r19, r19
    40f6:	44 1f       	adc	r20, r20
    40f8:	55 1f       	adc	r21, r21
    40fa:	6a 95       	dec	r22
    40fc:	d2 f7       	brpl	.-12     	; 0x40f2 <_fpadd_parts+0x142>
    40fe:	21 50       	subi	r18, 0x01	; 1
    4100:	30 40       	sbci	r19, 0x00	; 0
    4102:	40 40       	sbci	r20, 0x00	; 0
    4104:	50 40       	sbci	r21, 0x00	; 0
    4106:	2e 21       	and	r18, r14
    4108:	3f 21       	and	r19, r15
    410a:	40 23       	and	r20, r16
    410c:	51 23       	and	r21, r17
    410e:	21 15       	cp	r18, r1
    4110:	31 05       	cpc	r19, r1
    4112:	41 05       	cpc	r20, r1
    4114:	51 05       	cpc	r21, r1
    4116:	21 f0       	breq	.+8      	; 0x4120 <_fpadd_parts+0x170>
    4118:	21 e0       	ldi	r18, 0x01	; 1
    411a:	30 e0       	ldi	r19, 0x00	; 0
    411c:	40 e0       	ldi	r20, 0x00	; 0
    411e:	50 e0       	ldi	r21, 0x00	; 0
    4120:	79 01       	movw	r14, r18
    4122:	8a 01       	movw	r16, r20
    4124:	e6 28       	or	r14, r6
    4126:	f7 28       	or	r15, r7
    4128:	08 29       	or	r16, r8
    412a:	19 29       	or	r17, r9
    412c:	0b c0       	rjmp	.+22     	; 0x4144 <_fpadd_parts+0x194>
    412e:	48 17       	cp	r20, r24
    4130:	59 07       	cpc	r21, r25
    4132:	2c f0       	brlt	.+10     	; 0x413e <_fpadd_parts+0x18e>
    4134:	ca 01       	movw	r24, r20
    4136:	ee 24       	eor	r14, r14
    4138:	ff 24       	eor	r15, r15
    413a:	87 01       	movw	r16, r14
    413c:	03 c0       	rjmp	.+6      	; 0x4144 <_fpadd_parts+0x194>
    413e:	aa 24       	eor	r10, r10
    4140:	bb 24       	eor	r11, r11
    4142:	65 01       	movw	r12, r10
    4144:	21 81       	ldd	r18, Z+1	; 0x01
    4146:	f2 01       	movw	r30, r4
    4148:	31 81       	ldd	r19, Z+1	; 0x01
    414a:	23 17       	cp	r18, r19
    414c:	09 f4       	brne	.+2      	; 0x4150 <_fpadd_parts+0x1a0>
    414e:	4a c0       	rjmp	.+148    	; 0x41e4 <_fpadd_parts+0x234>
    4150:	22 23       	and	r18, r18
    4152:	49 f0       	breq	.+18     	; 0x4166 <_fpadd_parts+0x1b6>
    4154:	a6 01       	movw	r20, r12
    4156:	95 01       	movw	r18, r10
    4158:	2e 19       	sub	r18, r14
    415a:	3f 09       	sbc	r19, r15
    415c:	40 0b       	sbc	r20, r16
    415e:	51 0b       	sbc	r21, r17
    4160:	79 01       	movw	r14, r18
    4162:	8a 01       	movw	r16, r20
    4164:	04 c0       	rjmp	.+8      	; 0x416e <_fpadd_parts+0x1be>
    4166:	ea 18       	sub	r14, r10
    4168:	fb 08       	sbc	r15, r11
    416a:	0c 09       	sbc	r16, r12
    416c:	1d 09       	sbc	r17, r13
    416e:	17 fd       	sbrc	r17, 7
    4170:	0c c0       	rjmp	.+24     	; 0x418a <_fpadd_parts+0x1da>
    4172:	19 82       	std	Y+1, r1	; 0x01
    4174:	9b 83       	std	Y+3, r25	; 0x03
    4176:	8a 83       	std	Y+2, r24	; 0x02
    4178:	ec 82       	std	Y+4, r14	; 0x04
    417a:	fd 82       	std	Y+5, r15	; 0x05
    417c:	0e 83       	std	Y+6, r16	; 0x06
    417e:	1f 83       	std	Y+7, r17	; 0x07
    4180:	8c 81       	ldd	r24, Y+4	; 0x04
    4182:	9d 81       	ldd	r25, Y+5	; 0x05
    4184:	ae 81       	ldd	r26, Y+6	; 0x06
    4186:	bf 81       	ldd	r27, Y+7	; 0x07
    4188:	1a c0       	rjmp	.+52     	; 0x41be <_fpadd_parts+0x20e>
    418a:	21 e0       	ldi	r18, 0x01	; 1
    418c:	29 83       	std	Y+1, r18	; 0x01
    418e:	9b 83       	std	Y+3, r25	; 0x03
    4190:	8a 83       	std	Y+2, r24	; 0x02
    4192:	88 27       	eor	r24, r24
    4194:	99 27       	eor	r25, r25
    4196:	dc 01       	movw	r26, r24
    4198:	8e 19       	sub	r24, r14
    419a:	9f 09       	sbc	r25, r15
    419c:	a0 0b       	sbc	r26, r16
    419e:	b1 0b       	sbc	r27, r17
    41a0:	8c 83       	std	Y+4, r24	; 0x04
    41a2:	9d 83       	std	Y+5, r25	; 0x05
    41a4:	ae 83       	std	Y+6, r26	; 0x06
    41a6:	bf 83       	std	Y+7, r27	; 0x07
    41a8:	eb cf       	rjmp	.-42     	; 0x4180 <_fpadd_parts+0x1d0>
    41aa:	88 0f       	add	r24, r24
    41ac:	99 1f       	adc	r25, r25
    41ae:	aa 1f       	adc	r26, r26
    41b0:	bb 1f       	adc	r27, r27
    41b2:	2a 81       	ldd	r18, Y+2	; 0x02
    41b4:	3b 81       	ldd	r19, Y+3	; 0x03
    41b6:	21 50       	subi	r18, 0x01	; 1
    41b8:	30 40       	sbci	r19, 0x00	; 0
    41ba:	3b 83       	std	Y+3, r19	; 0x03
    41bc:	2a 83       	std	Y+2, r18	; 0x02
    41be:	9c 01       	movw	r18, r24
    41c0:	ad 01       	movw	r20, r26
    41c2:	21 50       	subi	r18, 0x01	; 1
    41c4:	30 40       	sbci	r19, 0x00	; 0
    41c6:	40 40       	sbci	r20, 0x00	; 0
    41c8:	50 40       	sbci	r21, 0x00	; 0
    41ca:	2f 3f       	cpi	r18, 0xFF	; 255
    41cc:	6f ef       	ldi	r22, 0xFF	; 255
    41ce:	36 07       	cpc	r19, r22
    41d0:	6f ef       	ldi	r22, 0xFF	; 255
    41d2:	46 07       	cpc	r20, r22
    41d4:	6f e3       	ldi	r22, 0x3F	; 63
    41d6:	56 07       	cpc	r21, r22
    41d8:	40 f3       	brcs	.-48     	; 0x41aa <_fpadd_parts+0x1fa>
    41da:	8c 83       	std	Y+4, r24	; 0x04
    41dc:	9d 83       	std	Y+5, r25	; 0x05
    41de:	ae 83       	std	Y+6, r26	; 0x06
    41e0:	bf 83       	std	Y+7, r27	; 0x07
    41e2:	0b c0       	rjmp	.+22     	; 0x41fa <_fpadd_parts+0x24a>
    41e4:	29 83       	std	Y+1, r18	; 0x01
    41e6:	9b 83       	std	Y+3, r25	; 0x03
    41e8:	8a 83       	std	Y+2, r24	; 0x02
    41ea:	ea 0c       	add	r14, r10
    41ec:	fb 1c       	adc	r15, r11
    41ee:	0c 1d       	adc	r16, r12
    41f0:	1d 1d       	adc	r17, r13
    41f2:	ec 82       	std	Y+4, r14	; 0x04
    41f4:	fd 82       	std	Y+5, r15	; 0x05
    41f6:	0e 83       	std	Y+6, r16	; 0x06
    41f8:	1f 83       	std	Y+7, r17	; 0x07
    41fa:	83 e0       	ldi	r24, 0x03	; 3
    41fc:	88 83       	st	Y, r24
    41fe:	2c 81       	ldd	r18, Y+4	; 0x04
    4200:	3d 81       	ldd	r19, Y+5	; 0x05
    4202:	4e 81       	ldd	r20, Y+6	; 0x06
    4204:	5f 81       	ldd	r21, Y+7	; 0x07
    4206:	57 ff       	sbrs	r21, 7
    4208:	1a c0       	rjmp	.+52     	; 0x423e <_fpadd_parts+0x28e>
    420a:	c9 01       	movw	r24, r18
    420c:	aa 27       	eor	r26, r26
    420e:	97 fd       	sbrc	r25, 7
    4210:	a0 95       	com	r26
    4212:	ba 2f       	mov	r27, r26
    4214:	81 70       	andi	r24, 0x01	; 1
    4216:	90 70       	andi	r25, 0x00	; 0
    4218:	a0 70       	andi	r26, 0x00	; 0
    421a:	b0 70       	andi	r27, 0x00	; 0
    421c:	56 95       	lsr	r21
    421e:	47 95       	ror	r20
    4220:	37 95       	ror	r19
    4222:	27 95       	ror	r18
    4224:	82 2b       	or	r24, r18
    4226:	93 2b       	or	r25, r19
    4228:	a4 2b       	or	r26, r20
    422a:	b5 2b       	or	r27, r21
    422c:	8c 83       	std	Y+4, r24	; 0x04
    422e:	9d 83       	std	Y+5, r25	; 0x05
    4230:	ae 83       	std	Y+6, r26	; 0x06
    4232:	bf 83       	std	Y+7, r27	; 0x07
    4234:	8a 81       	ldd	r24, Y+2	; 0x02
    4236:	9b 81       	ldd	r25, Y+3	; 0x03
    4238:	01 96       	adiw	r24, 0x01	; 1
    423a:	9b 83       	std	Y+3, r25	; 0x03
    423c:	8a 83       	std	Y+2, r24	; 0x02
    423e:	fe 01       	movw	r30, r28
    4240:	01 c0       	rjmp	.+2      	; 0x4244 <_fpadd_parts+0x294>
    4242:	f2 01       	movw	r30, r4
    4244:	cf 01       	movw	r24, r30
    4246:	cd b7       	in	r28, 0x3d	; 61
    4248:	de b7       	in	r29, 0x3e	; 62
    424a:	e0 e1       	ldi	r30, 0x10	; 16
    424c:	0c 94 10 27 	jmp	0x4e20	; 0x4e20 <__epilogue_restores__+0x4>

00004250 <__subsf3>:
    4250:	a0 e2       	ldi	r26, 0x20	; 32
    4252:	b0 e0       	ldi	r27, 0x00	; 0
    4254:	ee e2       	ldi	r30, 0x2E	; 46
    4256:	f1 e2       	ldi	r31, 0x21	; 33
    4258:	0c 94 fe 26 	jmp	0x4dfc	; 0x4dfc <__prologue_saves__+0x18>
    425c:	69 83       	std	Y+1, r22	; 0x01
    425e:	7a 83       	std	Y+2, r23	; 0x02
    4260:	8b 83       	std	Y+3, r24	; 0x03
    4262:	9c 83       	std	Y+4, r25	; 0x04
    4264:	2d 83       	std	Y+5, r18	; 0x05
    4266:	3e 83       	std	Y+6, r19	; 0x06
    4268:	4f 83       	std	Y+7, r20	; 0x07
    426a:	58 87       	std	Y+8, r21	; 0x08
    426c:	e9 e0       	ldi	r30, 0x09	; 9
    426e:	ee 2e       	mov	r14, r30
    4270:	f1 2c       	mov	r15, r1
    4272:	ec 0e       	add	r14, r28
    4274:	fd 1e       	adc	r15, r29
    4276:	ce 01       	movw	r24, r28
    4278:	01 96       	adiw	r24, 0x01	; 1
    427a:	b7 01       	movw	r22, r14
    427c:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__unpack_f>
    4280:	8e 01       	movw	r16, r28
    4282:	0f 5e       	subi	r16, 0xEF	; 239
    4284:	1f 4f       	sbci	r17, 0xFF	; 255
    4286:	ce 01       	movw	r24, r28
    4288:	05 96       	adiw	r24, 0x05	; 5
    428a:	b8 01       	movw	r22, r16
    428c:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__unpack_f>
    4290:	8a 89       	ldd	r24, Y+18	; 0x12
    4292:	91 e0       	ldi	r25, 0x01	; 1
    4294:	89 27       	eor	r24, r25
    4296:	8a 8b       	std	Y+18, r24	; 0x12
    4298:	c7 01       	movw	r24, r14
    429a:	b8 01       	movw	r22, r16
    429c:	ae 01       	movw	r20, r28
    429e:	47 5e       	subi	r20, 0xE7	; 231
    42a0:	5f 4f       	sbci	r21, 0xFF	; 255
    42a2:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <_fpadd_parts>
    42a6:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <__pack_f>
    42aa:	a0 96       	adiw	r28, 0x20	; 32
    42ac:	e6 e0       	ldi	r30, 0x06	; 6
    42ae:	0c 94 1a 27 	jmp	0x4e34	; 0x4e34 <__epilogue_restores__+0x18>

000042b2 <__addsf3>:
    42b2:	a0 e2       	ldi	r26, 0x20	; 32
    42b4:	b0 e0       	ldi	r27, 0x00	; 0
    42b6:	ef e5       	ldi	r30, 0x5F	; 95
    42b8:	f1 e2       	ldi	r31, 0x21	; 33
    42ba:	0c 94 fe 26 	jmp	0x4dfc	; 0x4dfc <__prologue_saves__+0x18>
    42be:	69 83       	std	Y+1, r22	; 0x01
    42c0:	7a 83       	std	Y+2, r23	; 0x02
    42c2:	8b 83       	std	Y+3, r24	; 0x03
    42c4:	9c 83       	std	Y+4, r25	; 0x04
    42c6:	2d 83       	std	Y+5, r18	; 0x05
    42c8:	3e 83       	std	Y+6, r19	; 0x06
    42ca:	4f 83       	std	Y+7, r20	; 0x07
    42cc:	58 87       	std	Y+8, r21	; 0x08
    42ce:	f9 e0       	ldi	r31, 0x09	; 9
    42d0:	ef 2e       	mov	r14, r31
    42d2:	f1 2c       	mov	r15, r1
    42d4:	ec 0e       	add	r14, r28
    42d6:	fd 1e       	adc	r15, r29
    42d8:	ce 01       	movw	r24, r28
    42da:	01 96       	adiw	r24, 0x01	; 1
    42dc:	b7 01       	movw	r22, r14
    42de:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__unpack_f>
    42e2:	8e 01       	movw	r16, r28
    42e4:	0f 5e       	subi	r16, 0xEF	; 239
    42e6:	1f 4f       	sbci	r17, 0xFF	; 255
    42e8:	ce 01       	movw	r24, r28
    42ea:	05 96       	adiw	r24, 0x05	; 5
    42ec:	b8 01       	movw	r22, r16
    42ee:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__unpack_f>
    42f2:	c7 01       	movw	r24, r14
    42f4:	b8 01       	movw	r22, r16
    42f6:	ae 01       	movw	r20, r28
    42f8:	47 5e       	subi	r20, 0xE7	; 231
    42fa:	5f 4f       	sbci	r21, 0xFF	; 255
    42fc:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <_fpadd_parts>
    4300:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <__pack_f>
    4304:	a0 96       	adiw	r28, 0x20	; 32
    4306:	e6 e0       	ldi	r30, 0x06	; 6
    4308:	0c 94 1a 27 	jmp	0x4e34	; 0x4e34 <__epilogue_restores__+0x18>

0000430c <__mulsf3>:
    430c:	a0 e2       	ldi	r26, 0x20	; 32
    430e:	b0 e0       	ldi	r27, 0x00	; 0
    4310:	ec e8       	ldi	r30, 0x8C	; 140
    4312:	f1 e2       	ldi	r31, 0x21	; 33
    4314:	0c 94 f2 26 	jmp	0x4de4	; 0x4de4 <__prologue_saves__>
    4318:	69 83       	std	Y+1, r22	; 0x01
    431a:	7a 83       	std	Y+2, r23	; 0x02
    431c:	8b 83       	std	Y+3, r24	; 0x03
    431e:	9c 83       	std	Y+4, r25	; 0x04
    4320:	2d 83       	std	Y+5, r18	; 0x05
    4322:	3e 83       	std	Y+6, r19	; 0x06
    4324:	4f 83       	std	Y+7, r20	; 0x07
    4326:	58 87       	std	Y+8, r21	; 0x08
    4328:	ce 01       	movw	r24, r28
    432a:	01 96       	adiw	r24, 0x01	; 1
    432c:	be 01       	movw	r22, r28
    432e:	67 5f       	subi	r22, 0xF7	; 247
    4330:	7f 4f       	sbci	r23, 0xFF	; 255
    4332:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__unpack_f>
    4336:	ce 01       	movw	r24, r28
    4338:	05 96       	adiw	r24, 0x05	; 5
    433a:	be 01       	movw	r22, r28
    433c:	6f 5e       	subi	r22, 0xEF	; 239
    433e:	7f 4f       	sbci	r23, 0xFF	; 255
    4340:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__unpack_f>
    4344:	99 85       	ldd	r25, Y+9	; 0x09
    4346:	92 30       	cpi	r25, 0x02	; 2
    4348:	88 f0       	brcs	.+34     	; 0x436c <__mulsf3+0x60>
    434a:	89 89       	ldd	r24, Y+17	; 0x11
    434c:	82 30       	cpi	r24, 0x02	; 2
    434e:	c8 f0       	brcs	.+50     	; 0x4382 <__mulsf3+0x76>
    4350:	94 30       	cpi	r25, 0x04	; 4
    4352:	19 f4       	brne	.+6      	; 0x435a <__mulsf3+0x4e>
    4354:	82 30       	cpi	r24, 0x02	; 2
    4356:	51 f4       	brne	.+20     	; 0x436c <__mulsf3+0x60>
    4358:	04 c0       	rjmp	.+8      	; 0x4362 <__mulsf3+0x56>
    435a:	84 30       	cpi	r24, 0x04	; 4
    435c:	29 f4       	brne	.+10     	; 0x4368 <__mulsf3+0x5c>
    435e:	92 30       	cpi	r25, 0x02	; 2
    4360:	81 f4       	brne	.+32     	; 0x4382 <__mulsf3+0x76>
    4362:	81 e7       	ldi	r24, 0x71	; 113
    4364:	91 e0       	ldi	r25, 0x01	; 1
    4366:	c4 c0       	rjmp	.+392    	; 0x44f0 <__mulsf3+0x1e4>
    4368:	92 30       	cpi	r25, 0x02	; 2
    436a:	49 f4       	brne	.+18     	; 0x437e <__mulsf3+0x72>
    436c:	80 e0       	ldi	r24, 0x00	; 0
    436e:	2a 85       	ldd	r18, Y+10	; 0x0a
    4370:	9a 89       	ldd	r25, Y+18	; 0x12
    4372:	29 13       	cpse	r18, r25
    4374:	81 e0       	ldi	r24, 0x01	; 1
    4376:	8a 87       	std	Y+10, r24	; 0x0a
    4378:	ce 01       	movw	r24, r28
    437a:	09 96       	adiw	r24, 0x09	; 9
    437c:	b9 c0       	rjmp	.+370    	; 0x44f0 <__mulsf3+0x1e4>
    437e:	82 30       	cpi	r24, 0x02	; 2
    4380:	49 f4       	brne	.+18     	; 0x4394 <__mulsf3+0x88>
    4382:	80 e0       	ldi	r24, 0x00	; 0
    4384:	2a 85       	ldd	r18, Y+10	; 0x0a
    4386:	9a 89       	ldd	r25, Y+18	; 0x12
    4388:	29 13       	cpse	r18, r25
    438a:	81 e0       	ldi	r24, 0x01	; 1
    438c:	8a 8b       	std	Y+18, r24	; 0x12
    438e:	ce 01       	movw	r24, r28
    4390:	41 96       	adiw	r24, 0x11	; 17
    4392:	ae c0       	rjmp	.+348    	; 0x44f0 <__mulsf3+0x1e4>
    4394:	6d 84       	ldd	r6, Y+13	; 0x0d
    4396:	7e 84       	ldd	r7, Y+14	; 0x0e
    4398:	8f 84       	ldd	r8, Y+15	; 0x0f
    439a:	98 88       	ldd	r9, Y+16	; 0x10
    439c:	ad 88       	ldd	r10, Y+21	; 0x15
    439e:	be 88       	ldd	r11, Y+22	; 0x16
    43a0:	cf 88       	ldd	r12, Y+23	; 0x17
    43a2:	d8 8c       	ldd	r13, Y+24	; 0x18
    43a4:	60 e0       	ldi	r22, 0x00	; 0
    43a6:	70 e0       	ldi	r23, 0x00	; 0
    43a8:	80 e0       	ldi	r24, 0x00	; 0
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	dc 01       	movw	r26, r24
    43ae:	ee 24       	eor	r14, r14
    43b0:	ff 24       	eor	r15, r15
    43b2:	87 01       	movw	r16, r14
    43b4:	20 e0       	ldi	r18, 0x00	; 0
    43b6:	30 e0       	ldi	r19, 0x00	; 0
    43b8:	a9 01       	movw	r20, r18
    43ba:	f3 01       	movw	r30, r6
    43bc:	e1 70       	andi	r30, 0x01	; 1
    43be:	f0 70       	andi	r31, 0x00	; 0
    43c0:	30 97       	sbiw	r30, 0x00	; 0
    43c2:	c9 f0       	breq	.+50     	; 0x43f6 <__mulsf3+0xea>
    43c4:	2a 0d       	add	r18, r10
    43c6:	3b 1d       	adc	r19, r11
    43c8:	4c 1d       	adc	r20, r12
    43ca:	5d 1d       	adc	r21, r13
    43cc:	8e 0d       	add	r24, r14
    43ce:	9f 1d       	adc	r25, r15
    43d0:	a0 1f       	adc	r26, r16
    43d2:	b1 1f       	adc	r27, r17
    43d4:	22 24       	eor	r2, r2
    43d6:	33 24       	eor	r3, r3
    43d8:	21 01       	movw	r4, r2
    43da:	2a 15       	cp	r18, r10
    43dc:	3b 05       	cpc	r19, r11
    43de:	4c 05       	cpc	r20, r12
    43e0:	5d 05       	cpc	r21, r13
    43e2:	28 f4       	brcc	.+10     	; 0x43ee <__mulsf3+0xe2>
    43e4:	e1 e0       	ldi	r30, 0x01	; 1
    43e6:	2e 2e       	mov	r2, r30
    43e8:	31 2c       	mov	r3, r1
    43ea:	41 2c       	mov	r4, r1
    43ec:	51 2c       	mov	r5, r1
    43ee:	82 0d       	add	r24, r2
    43f0:	93 1d       	adc	r25, r3
    43f2:	a4 1d       	adc	r26, r4
    43f4:	b5 1d       	adc	r27, r5
    43f6:	ee 0c       	add	r14, r14
    43f8:	ff 1c       	adc	r15, r15
    43fa:	00 1f       	adc	r16, r16
    43fc:	11 1f       	adc	r17, r17
    43fe:	d7 fe       	sbrs	r13, 7
    4400:	09 c0       	rjmp	.+18     	; 0x4414 <__mulsf3+0x108>
    4402:	e1 e0       	ldi	r30, 0x01	; 1
    4404:	2e 2e       	mov	r2, r30
    4406:	31 2c       	mov	r3, r1
    4408:	41 2c       	mov	r4, r1
    440a:	51 2c       	mov	r5, r1
    440c:	e2 28       	or	r14, r2
    440e:	f3 28       	or	r15, r3
    4410:	04 29       	or	r16, r4
    4412:	15 29       	or	r17, r5
    4414:	6f 5f       	subi	r22, 0xFF	; 255
    4416:	7f 4f       	sbci	r23, 0xFF	; 255
    4418:	60 32       	cpi	r22, 0x20	; 32
    441a:	71 05       	cpc	r23, r1
    441c:	49 f0       	breq	.+18     	; 0x4430 <__mulsf3+0x124>
    441e:	aa 0c       	add	r10, r10
    4420:	bb 1c       	adc	r11, r11
    4422:	cc 1c       	adc	r12, r12
    4424:	dd 1c       	adc	r13, r13
    4426:	96 94       	lsr	r9
    4428:	87 94       	ror	r8
    442a:	77 94       	ror	r7
    442c:	67 94       	ror	r6
    442e:	c5 cf       	rjmp	.-118    	; 0x43ba <__mulsf3+0xae>
    4430:	6b 89       	ldd	r22, Y+19	; 0x13
    4432:	7c 89       	ldd	r23, Y+20	; 0x14
    4434:	eb 85       	ldd	r30, Y+11	; 0x0b
    4436:	fc 85       	ldd	r31, Y+12	; 0x0c
    4438:	6e 0f       	add	r22, r30
    443a:	7f 1f       	adc	r23, r31
    443c:	6e 5f       	subi	r22, 0xFE	; 254
    443e:	7f 4f       	sbci	r23, 0xFF	; 255
    4440:	7c 8f       	std	Y+28, r23	; 0x1c
    4442:	6b 8f       	std	Y+27, r22	; 0x1b
    4444:	1a 8e       	std	Y+26, r1	; 0x1a
    4446:	7a 85       	ldd	r23, Y+10	; 0x0a
    4448:	6a 89       	ldd	r22, Y+18	; 0x12
    444a:	76 17       	cp	r23, r22
    444c:	11 f0       	breq	.+4      	; 0x4452 <__mulsf3+0x146>
    444e:	61 e0       	ldi	r22, 0x01	; 1
    4450:	6a 8f       	std	Y+26, r22	; 0x1a
    4452:	6b 8d       	ldd	r22, Y+27	; 0x1b
    4454:	7c 8d       	ldd	r23, Y+28	; 0x1c
    4456:	10 c0       	rjmp	.+32     	; 0x4478 <__mulsf3+0x16c>
    4458:	fc 01       	movw	r30, r24
    445a:	e1 70       	andi	r30, 0x01	; 1
    445c:	f0 70       	andi	r31, 0x00	; 0
    445e:	30 97       	sbiw	r30, 0x00	; 0
    4460:	29 f0       	breq	.+10     	; 0x446c <__mulsf3+0x160>
    4462:	56 95       	lsr	r21
    4464:	47 95       	ror	r20
    4466:	37 95       	ror	r19
    4468:	27 95       	ror	r18
    446a:	50 68       	ori	r21, 0x80	; 128
    446c:	b6 95       	lsr	r27
    446e:	a7 95       	ror	r26
    4470:	97 95       	ror	r25
    4472:	87 95       	ror	r24
    4474:	6f 5f       	subi	r22, 0xFF	; 255
    4476:	7f 4f       	sbci	r23, 0xFF	; 255
    4478:	b7 fd       	sbrc	r27, 7
    447a:	ee cf       	rjmp	.-36     	; 0x4458 <__mulsf3+0x14c>
    447c:	0c c0       	rjmp	.+24     	; 0x4496 <__mulsf3+0x18a>
    447e:	88 0f       	add	r24, r24
    4480:	99 1f       	adc	r25, r25
    4482:	aa 1f       	adc	r26, r26
    4484:	bb 1f       	adc	r27, r27
    4486:	57 fd       	sbrc	r21, 7
    4488:	81 60       	ori	r24, 0x01	; 1
    448a:	22 0f       	add	r18, r18
    448c:	33 1f       	adc	r19, r19
    448e:	44 1f       	adc	r20, r20
    4490:	55 1f       	adc	r21, r21
    4492:	61 50       	subi	r22, 0x01	; 1
    4494:	70 40       	sbci	r23, 0x00	; 0
    4496:	80 30       	cpi	r24, 0x00	; 0
    4498:	e0 e0       	ldi	r30, 0x00	; 0
    449a:	9e 07       	cpc	r25, r30
    449c:	e0 e0       	ldi	r30, 0x00	; 0
    449e:	ae 07       	cpc	r26, r30
    44a0:	e0 e4       	ldi	r30, 0x40	; 64
    44a2:	be 07       	cpc	r27, r30
    44a4:	60 f3       	brcs	.-40     	; 0x447e <__mulsf3+0x172>
    44a6:	6b 8f       	std	Y+27, r22	; 0x1b
    44a8:	7c 8f       	std	Y+28, r23	; 0x1c
    44aa:	6f e7       	ldi	r22, 0x7F	; 127
    44ac:	e6 2e       	mov	r14, r22
    44ae:	f1 2c       	mov	r15, r1
    44b0:	01 2d       	mov	r16, r1
    44b2:	11 2d       	mov	r17, r1
    44b4:	e8 22       	and	r14, r24
    44b6:	f9 22       	and	r15, r25
    44b8:	0a 23       	and	r16, r26
    44ba:	1b 23       	and	r17, r27
    44bc:	60 e4       	ldi	r22, 0x40	; 64
    44be:	e6 16       	cp	r14, r22
    44c0:	f1 04       	cpc	r15, r1
    44c2:	01 05       	cpc	r16, r1
    44c4:	11 05       	cpc	r17, r1
    44c6:	61 f4       	brne	.+24     	; 0x44e0 <__mulsf3+0x1d4>
    44c8:	87 fd       	sbrc	r24, 7
    44ca:	0a c0       	rjmp	.+20     	; 0x44e0 <__mulsf3+0x1d4>
    44cc:	21 15       	cp	r18, r1
    44ce:	31 05       	cpc	r19, r1
    44d0:	41 05       	cpc	r20, r1
    44d2:	51 05       	cpc	r21, r1
    44d4:	29 f0       	breq	.+10     	; 0x44e0 <__mulsf3+0x1d4>
    44d6:	80 5c       	subi	r24, 0xC0	; 192
    44d8:	9f 4f       	sbci	r25, 0xFF	; 255
    44da:	af 4f       	sbci	r26, 0xFF	; 255
    44dc:	bf 4f       	sbci	r27, 0xFF	; 255
    44de:	80 78       	andi	r24, 0x80	; 128
    44e0:	8d 8f       	std	Y+29, r24	; 0x1d
    44e2:	9e 8f       	std	Y+30, r25	; 0x1e
    44e4:	af 8f       	std	Y+31, r26	; 0x1f
    44e6:	b8 a3       	std	Y+32, r27	; 0x20
    44e8:	83 e0       	ldi	r24, 0x03	; 3
    44ea:	89 8f       	std	Y+25, r24	; 0x19
    44ec:	ce 01       	movw	r24, r28
    44ee:	49 96       	adiw	r24, 0x19	; 25
    44f0:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <__pack_f>
    44f4:	a0 96       	adiw	r28, 0x20	; 32
    44f6:	e2 e1       	ldi	r30, 0x12	; 18
    44f8:	0c 94 0e 27 	jmp	0x4e1c	; 0x4e1c <__epilogue_restores__>

000044fc <__divsf3>:
    44fc:	a8 e1       	ldi	r26, 0x18	; 24
    44fe:	b0 e0       	ldi	r27, 0x00	; 0
    4500:	e4 e8       	ldi	r30, 0x84	; 132
    4502:	f2 e2       	ldi	r31, 0x22	; 34
    4504:	0c 94 fa 26 	jmp	0x4df4	; 0x4df4 <__prologue_saves__+0x10>
    4508:	69 83       	std	Y+1, r22	; 0x01
    450a:	7a 83       	std	Y+2, r23	; 0x02
    450c:	8b 83       	std	Y+3, r24	; 0x03
    450e:	9c 83       	std	Y+4, r25	; 0x04
    4510:	2d 83       	std	Y+5, r18	; 0x05
    4512:	3e 83       	std	Y+6, r19	; 0x06
    4514:	4f 83       	std	Y+7, r20	; 0x07
    4516:	58 87       	std	Y+8, r21	; 0x08
    4518:	8e 01       	movw	r16, r28
    451a:	07 5f       	subi	r16, 0xF7	; 247
    451c:	1f 4f       	sbci	r17, 0xFF	; 255
    451e:	ce 01       	movw	r24, r28
    4520:	01 96       	adiw	r24, 0x01	; 1
    4522:	b8 01       	movw	r22, r16
    4524:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__unpack_f>
    4528:	81 e1       	ldi	r24, 0x11	; 17
    452a:	e8 2e       	mov	r14, r24
    452c:	f1 2c       	mov	r15, r1
    452e:	ec 0e       	add	r14, r28
    4530:	fd 1e       	adc	r15, r29
    4532:	ce 01       	movw	r24, r28
    4534:	05 96       	adiw	r24, 0x05	; 5
    4536:	b7 01       	movw	r22, r14
    4538:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__unpack_f>
    453c:	99 85       	ldd	r25, Y+9	; 0x09
    453e:	92 30       	cpi	r25, 0x02	; 2
    4540:	08 f4       	brcc	.+2      	; 0x4544 <__divsf3+0x48>
    4542:	83 c0       	rjmp	.+262    	; 0x464a <__divsf3+0x14e>
    4544:	89 89       	ldd	r24, Y+17	; 0x11
    4546:	82 30       	cpi	r24, 0x02	; 2
    4548:	10 f4       	brcc	.+4      	; 0x454e <__divsf3+0x52>
    454a:	87 01       	movw	r16, r14
    454c:	7e c0       	rjmp	.+252    	; 0x464a <__divsf3+0x14e>
    454e:	2a 85       	ldd	r18, Y+10	; 0x0a
    4550:	3a 89       	ldd	r19, Y+18	; 0x12
    4552:	23 27       	eor	r18, r19
    4554:	2a 87       	std	Y+10, r18	; 0x0a
    4556:	94 30       	cpi	r25, 0x04	; 4
    4558:	11 f0       	breq	.+4      	; 0x455e <__divsf3+0x62>
    455a:	92 30       	cpi	r25, 0x02	; 2
    455c:	31 f4       	brne	.+12     	; 0x456a <__divsf3+0x6e>
    455e:	98 17       	cp	r25, r24
    4560:	09 f0       	breq	.+2      	; 0x4564 <__divsf3+0x68>
    4562:	70 c0       	rjmp	.+224    	; 0x4644 <__divsf3+0x148>
    4564:	01 e7       	ldi	r16, 0x71	; 113
    4566:	11 e0       	ldi	r17, 0x01	; 1
    4568:	70 c0       	rjmp	.+224    	; 0x464a <__divsf3+0x14e>
    456a:	84 30       	cpi	r24, 0x04	; 4
    456c:	39 f4       	brne	.+14     	; 0x457c <__divsf3+0x80>
    456e:	1d 86       	std	Y+13, r1	; 0x0d
    4570:	1e 86       	std	Y+14, r1	; 0x0e
    4572:	1f 86       	std	Y+15, r1	; 0x0f
    4574:	18 8a       	std	Y+16, r1	; 0x10
    4576:	1c 86       	std	Y+12, r1	; 0x0c
    4578:	1b 86       	std	Y+11, r1	; 0x0b
    457a:	67 c0       	rjmp	.+206    	; 0x464a <__divsf3+0x14e>
    457c:	82 30       	cpi	r24, 0x02	; 2
    457e:	19 f4       	brne	.+6      	; 0x4586 <__divsf3+0x8a>
    4580:	84 e0       	ldi	r24, 0x04	; 4
    4582:	89 87       	std	Y+9, r24	; 0x09
    4584:	62 c0       	rjmp	.+196    	; 0x464a <__divsf3+0x14e>
    4586:	8b 85       	ldd	r24, Y+11	; 0x0b
    4588:	9c 85       	ldd	r25, Y+12	; 0x0c
    458a:	2b 89       	ldd	r18, Y+19	; 0x13
    458c:	3c 89       	ldd	r19, Y+20	; 0x14
    458e:	82 1b       	sub	r24, r18
    4590:	93 0b       	sbc	r25, r19
    4592:	9c 87       	std	Y+12, r25	; 0x0c
    4594:	8b 87       	std	Y+11, r24	; 0x0b
    4596:	2d 85       	ldd	r18, Y+13	; 0x0d
    4598:	3e 85       	ldd	r19, Y+14	; 0x0e
    459a:	4f 85       	ldd	r20, Y+15	; 0x0f
    459c:	58 89       	ldd	r21, Y+16	; 0x10
    459e:	ad 88       	ldd	r10, Y+21	; 0x15
    45a0:	be 88       	ldd	r11, Y+22	; 0x16
    45a2:	cf 88       	ldd	r12, Y+23	; 0x17
    45a4:	d8 8c       	ldd	r13, Y+24	; 0x18
    45a6:	2a 15       	cp	r18, r10
    45a8:	3b 05       	cpc	r19, r11
    45aa:	4c 05       	cpc	r20, r12
    45ac:	5d 05       	cpc	r21, r13
    45ae:	38 f4       	brcc	.+14     	; 0x45be <__divsf3+0xc2>
    45b0:	22 0f       	add	r18, r18
    45b2:	33 1f       	adc	r19, r19
    45b4:	44 1f       	adc	r20, r20
    45b6:	55 1f       	adc	r21, r21
    45b8:	01 97       	sbiw	r24, 0x01	; 1
    45ba:	9c 87       	std	Y+12, r25	; 0x0c
    45bc:	8b 87       	std	Y+11, r24	; 0x0b
    45be:	60 e0       	ldi	r22, 0x00	; 0
    45c0:	70 e0       	ldi	r23, 0x00	; 0
    45c2:	e1 2c       	mov	r14, r1
    45c4:	f1 2c       	mov	r15, r1
    45c6:	01 2d       	mov	r16, r1
    45c8:	a0 e4       	ldi	r26, 0x40	; 64
    45ca:	1a 2f       	mov	r17, r26
    45cc:	80 e0       	ldi	r24, 0x00	; 0
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	dc 01       	movw	r26, r24
    45d2:	2a 15       	cp	r18, r10
    45d4:	3b 05       	cpc	r19, r11
    45d6:	4c 05       	cpc	r20, r12
    45d8:	5d 05       	cpc	r21, r13
    45da:	40 f0       	brcs	.+16     	; 0x45ec <__divsf3+0xf0>
    45dc:	8e 29       	or	r24, r14
    45de:	9f 29       	or	r25, r15
    45e0:	a0 2b       	or	r26, r16
    45e2:	b1 2b       	or	r27, r17
    45e4:	2a 19       	sub	r18, r10
    45e6:	3b 09       	sbc	r19, r11
    45e8:	4c 09       	sbc	r20, r12
    45ea:	5d 09       	sbc	r21, r13
    45ec:	16 95       	lsr	r17
    45ee:	07 95       	ror	r16
    45f0:	f7 94       	ror	r15
    45f2:	e7 94       	ror	r14
    45f4:	22 0f       	add	r18, r18
    45f6:	33 1f       	adc	r19, r19
    45f8:	44 1f       	adc	r20, r20
    45fa:	55 1f       	adc	r21, r21
    45fc:	6f 5f       	subi	r22, 0xFF	; 255
    45fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4600:	6f 31       	cpi	r22, 0x1F	; 31
    4602:	71 05       	cpc	r23, r1
    4604:	31 f7       	brne	.-52     	; 0x45d2 <__divsf3+0xd6>
    4606:	6f e7       	ldi	r22, 0x7F	; 127
    4608:	e6 2e       	mov	r14, r22
    460a:	f1 2c       	mov	r15, r1
    460c:	01 2d       	mov	r16, r1
    460e:	11 2d       	mov	r17, r1
    4610:	e8 22       	and	r14, r24
    4612:	f9 22       	and	r15, r25
    4614:	0a 23       	and	r16, r26
    4616:	1b 23       	and	r17, r27
    4618:	60 e4       	ldi	r22, 0x40	; 64
    461a:	e6 16       	cp	r14, r22
    461c:	f1 04       	cpc	r15, r1
    461e:	01 05       	cpc	r16, r1
    4620:	11 05       	cpc	r17, r1
    4622:	61 f4       	brne	.+24     	; 0x463c <__divsf3+0x140>
    4624:	87 fd       	sbrc	r24, 7
    4626:	0a c0       	rjmp	.+20     	; 0x463c <__divsf3+0x140>
    4628:	21 15       	cp	r18, r1
    462a:	31 05       	cpc	r19, r1
    462c:	41 05       	cpc	r20, r1
    462e:	51 05       	cpc	r21, r1
    4630:	29 f0       	breq	.+10     	; 0x463c <__divsf3+0x140>
    4632:	80 5c       	subi	r24, 0xC0	; 192
    4634:	9f 4f       	sbci	r25, 0xFF	; 255
    4636:	af 4f       	sbci	r26, 0xFF	; 255
    4638:	bf 4f       	sbci	r27, 0xFF	; 255
    463a:	80 78       	andi	r24, 0x80	; 128
    463c:	8d 87       	std	Y+13, r24	; 0x0d
    463e:	9e 87       	std	Y+14, r25	; 0x0e
    4640:	af 87       	std	Y+15, r26	; 0x0f
    4642:	b8 8b       	std	Y+16, r27	; 0x10
    4644:	8e 01       	movw	r16, r28
    4646:	07 5f       	subi	r16, 0xF7	; 247
    4648:	1f 4f       	sbci	r17, 0xFF	; 255
    464a:	c8 01       	movw	r24, r16
    464c:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <__pack_f>
    4650:	68 96       	adiw	r28, 0x18	; 24
    4652:	ea e0       	ldi	r30, 0x0A	; 10
    4654:	0c 94 16 27 	jmp	0x4e2c	; 0x4e2c <__epilogue_restores__+0x10>

00004658 <__gesf2>:
    4658:	a8 e1       	ldi	r26, 0x18	; 24
    465a:	b0 e0       	ldi	r27, 0x00	; 0
    465c:	e2 e3       	ldi	r30, 0x32	; 50
    465e:	f3 e2       	ldi	r31, 0x23	; 35
    4660:	0c 94 fe 26 	jmp	0x4dfc	; 0x4dfc <__prologue_saves__+0x18>
    4664:	69 83       	std	Y+1, r22	; 0x01
    4666:	7a 83       	std	Y+2, r23	; 0x02
    4668:	8b 83       	std	Y+3, r24	; 0x03
    466a:	9c 83       	std	Y+4, r25	; 0x04
    466c:	2d 83       	std	Y+5, r18	; 0x05
    466e:	3e 83       	std	Y+6, r19	; 0x06
    4670:	4f 83       	std	Y+7, r20	; 0x07
    4672:	58 87       	std	Y+8, r21	; 0x08
    4674:	89 e0       	ldi	r24, 0x09	; 9
    4676:	e8 2e       	mov	r14, r24
    4678:	f1 2c       	mov	r15, r1
    467a:	ec 0e       	add	r14, r28
    467c:	fd 1e       	adc	r15, r29
    467e:	ce 01       	movw	r24, r28
    4680:	01 96       	adiw	r24, 0x01	; 1
    4682:	b7 01       	movw	r22, r14
    4684:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__unpack_f>
    4688:	8e 01       	movw	r16, r28
    468a:	0f 5e       	subi	r16, 0xEF	; 239
    468c:	1f 4f       	sbci	r17, 0xFF	; 255
    468e:	ce 01       	movw	r24, r28
    4690:	05 96       	adiw	r24, 0x05	; 5
    4692:	b8 01       	movw	r22, r16
    4694:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__unpack_f>
    4698:	89 85       	ldd	r24, Y+9	; 0x09
    469a:	82 30       	cpi	r24, 0x02	; 2
    469c:	40 f0       	brcs	.+16     	; 0x46ae <__gesf2+0x56>
    469e:	89 89       	ldd	r24, Y+17	; 0x11
    46a0:	82 30       	cpi	r24, 0x02	; 2
    46a2:	28 f0       	brcs	.+10     	; 0x46ae <__gesf2+0x56>
    46a4:	c7 01       	movw	r24, r14
    46a6:	b8 01       	movw	r22, r16
    46a8:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <__fpcmp_parts_f>
    46ac:	01 c0       	rjmp	.+2      	; 0x46b0 <__gesf2+0x58>
    46ae:	8f ef       	ldi	r24, 0xFF	; 255
    46b0:	68 96       	adiw	r28, 0x18	; 24
    46b2:	e6 e0       	ldi	r30, 0x06	; 6
    46b4:	0c 94 1a 27 	jmp	0x4e34	; 0x4e34 <__epilogue_restores__+0x18>

000046b8 <__ltsf2>:
    46b8:	a8 e1       	ldi	r26, 0x18	; 24
    46ba:	b0 e0       	ldi	r27, 0x00	; 0
    46bc:	e2 e6       	ldi	r30, 0x62	; 98
    46be:	f3 e2       	ldi	r31, 0x23	; 35
    46c0:	0c 94 fe 26 	jmp	0x4dfc	; 0x4dfc <__prologue_saves__+0x18>
    46c4:	69 83       	std	Y+1, r22	; 0x01
    46c6:	7a 83       	std	Y+2, r23	; 0x02
    46c8:	8b 83       	std	Y+3, r24	; 0x03
    46ca:	9c 83       	std	Y+4, r25	; 0x04
    46cc:	2d 83       	std	Y+5, r18	; 0x05
    46ce:	3e 83       	std	Y+6, r19	; 0x06
    46d0:	4f 83       	std	Y+7, r20	; 0x07
    46d2:	58 87       	std	Y+8, r21	; 0x08
    46d4:	89 e0       	ldi	r24, 0x09	; 9
    46d6:	e8 2e       	mov	r14, r24
    46d8:	f1 2c       	mov	r15, r1
    46da:	ec 0e       	add	r14, r28
    46dc:	fd 1e       	adc	r15, r29
    46de:	ce 01       	movw	r24, r28
    46e0:	01 96       	adiw	r24, 0x01	; 1
    46e2:	b7 01       	movw	r22, r14
    46e4:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__unpack_f>
    46e8:	8e 01       	movw	r16, r28
    46ea:	0f 5e       	subi	r16, 0xEF	; 239
    46ec:	1f 4f       	sbci	r17, 0xFF	; 255
    46ee:	ce 01       	movw	r24, r28
    46f0:	05 96       	adiw	r24, 0x05	; 5
    46f2:	b8 01       	movw	r22, r16
    46f4:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__unpack_f>
    46f8:	89 85       	ldd	r24, Y+9	; 0x09
    46fa:	82 30       	cpi	r24, 0x02	; 2
    46fc:	40 f0       	brcs	.+16     	; 0x470e <__ltsf2+0x56>
    46fe:	89 89       	ldd	r24, Y+17	; 0x11
    4700:	82 30       	cpi	r24, 0x02	; 2
    4702:	28 f0       	brcs	.+10     	; 0x470e <__ltsf2+0x56>
    4704:	c7 01       	movw	r24, r14
    4706:	b8 01       	movw	r22, r16
    4708:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <__fpcmp_parts_f>
    470c:	01 c0       	rjmp	.+2      	; 0x4710 <__ltsf2+0x58>
    470e:	81 e0       	ldi	r24, 0x01	; 1
    4710:	68 96       	adiw	r28, 0x18	; 24
    4712:	e6 e0       	ldi	r30, 0x06	; 6
    4714:	0c 94 1a 27 	jmp	0x4e34	; 0x4e34 <__epilogue_restores__+0x18>

00004718 <__floatsisf>:
    4718:	a8 e0       	ldi	r26, 0x08	; 8
    471a:	b0 e0       	ldi	r27, 0x00	; 0
    471c:	e2 e9       	ldi	r30, 0x92	; 146
    471e:	f3 e2       	ldi	r31, 0x23	; 35
    4720:	0c 94 fc 26 	jmp	0x4df8	; 0x4df8 <__prologue_saves__+0x14>
    4724:	23 e0       	ldi	r18, 0x03	; 3
    4726:	29 83       	std	Y+1, r18	; 0x01
    4728:	9b 01       	movw	r18, r22
    472a:	ac 01       	movw	r20, r24
    472c:	22 27       	eor	r18, r18
    472e:	57 fd       	sbrc	r21, 7
    4730:	23 95       	inc	r18
    4732:	33 27       	eor	r19, r19
    4734:	44 27       	eor	r20, r20
    4736:	55 27       	eor	r21, r21
    4738:	2a 83       	std	Y+2, r18	; 0x02
    473a:	61 15       	cp	r22, r1
    473c:	71 05       	cpc	r23, r1
    473e:	81 05       	cpc	r24, r1
    4740:	91 05       	cpc	r25, r1
    4742:	19 f4       	brne	.+6      	; 0x474a <__floatsisf+0x32>
    4744:	82 e0       	ldi	r24, 0x02	; 2
    4746:	89 83       	std	Y+1, r24	; 0x01
    4748:	3c c0       	rjmp	.+120    	; 0x47c2 <__floatsisf+0xaa>
    474a:	22 23       	and	r18, r18
    474c:	a9 f0       	breq	.+42     	; 0x4778 <__floatsisf+0x60>
    474e:	60 30       	cpi	r22, 0x00	; 0
    4750:	20 e0       	ldi	r18, 0x00	; 0
    4752:	72 07       	cpc	r23, r18
    4754:	20 e0       	ldi	r18, 0x00	; 0
    4756:	82 07       	cpc	r24, r18
    4758:	20 e8       	ldi	r18, 0x80	; 128
    475a:	92 07       	cpc	r25, r18
    475c:	29 f4       	brne	.+10     	; 0x4768 <__floatsisf+0x50>
    475e:	60 e0       	ldi	r22, 0x00	; 0
    4760:	70 e0       	ldi	r23, 0x00	; 0
    4762:	80 e0       	ldi	r24, 0x00	; 0
    4764:	9f ec       	ldi	r25, 0xCF	; 207
    4766:	31 c0       	rjmp	.+98     	; 0x47ca <__floatsisf+0xb2>
    4768:	ee 24       	eor	r14, r14
    476a:	ff 24       	eor	r15, r15
    476c:	87 01       	movw	r16, r14
    476e:	e6 1a       	sub	r14, r22
    4770:	f7 0a       	sbc	r15, r23
    4772:	08 0b       	sbc	r16, r24
    4774:	19 0b       	sbc	r17, r25
    4776:	02 c0       	rjmp	.+4      	; 0x477c <__floatsisf+0x64>
    4778:	7b 01       	movw	r14, r22
    477a:	8c 01       	movw	r16, r24
    477c:	8e e1       	ldi	r24, 0x1E	; 30
    477e:	c8 2e       	mov	r12, r24
    4780:	d1 2c       	mov	r13, r1
    4782:	dc 82       	std	Y+4, r13	; 0x04
    4784:	cb 82       	std	Y+3, r12	; 0x03
    4786:	ed 82       	std	Y+5, r14	; 0x05
    4788:	fe 82       	std	Y+6, r15	; 0x06
    478a:	0f 83       	std	Y+7, r16	; 0x07
    478c:	18 87       	std	Y+8, r17	; 0x08
    478e:	c8 01       	movw	r24, r16
    4790:	b7 01       	movw	r22, r14
    4792:	0e 94 b4 24 	call	0x4968	; 0x4968 <__clzsi2>
    4796:	9c 01       	movw	r18, r24
    4798:	21 50       	subi	r18, 0x01	; 1
    479a:	30 40       	sbci	r19, 0x00	; 0
    479c:	12 16       	cp	r1, r18
    479e:	13 06       	cpc	r1, r19
    47a0:	84 f4       	brge	.+32     	; 0x47c2 <__floatsisf+0xaa>
    47a2:	02 2e       	mov	r0, r18
    47a4:	04 c0       	rjmp	.+8      	; 0x47ae <__floatsisf+0x96>
    47a6:	ee 0c       	add	r14, r14
    47a8:	ff 1c       	adc	r15, r15
    47aa:	00 1f       	adc	r16, r16
    47ac:	11 1f       	adc	r17, r17
    47ae:	0a 94       	dec	r0
    47b0:	d2 f7       	brpl	.-12     	; 0x47a6 <__floatsisf+0x8e>
    47b2:	ed 82       	std	Y+5, r14	; 0x05
    47b4:	fe 82       	std	Y+6, r15	; 0x06
    47b6:	0f 83       	std	Y+7, r16	; 0x07
    47b8:	18 87       	std	Y+8, r17	; 0x08
    47ba:	c2 1a       	sub	r12, r18
    47bc:	d3 0a       	sbc	r13, r19
    47be:	dc 82       	std	Y+4, r13	; 0x04
    47c0:	cb 82       	std	Y+3, r12	; 0x03
    47c2:	ce 01       	movw	r24, r28
    47c4:	01 96       	adiw	r24, 0x01	; 1
    47c6:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <__pack_f>
    47ca:	28 96       	adiw	r28, 0x08	; 8
    47cc:	e8 e0       	ldi	r30, 0x08	; 8
    47ce:	0c 94 18 27 	jmp	0x4e30	; 0x4e30 <__epilogue_restores__+0x14>

000047d2 <__fixsfsi>:
    47d2:	ac e0       	ldi	r26, 0x0C	; 12
    47d4:	b0 e0       	ldi	r27, 0x00	; 0
    47d6:	ef ee       	ldi	r30, 0xEF	; 239
    47d8:	f3 e2       	ldi	r31, 0x23	; 35
    47da:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__prologue_saves__+0x20>
    47de:	69 83       	std	Y+1, r22	; 0x01
    47e0:	7a 83       	std	Y+2, r23	; 0x02
    47e2:	8b 83       	std	Y+3, r24	; 0x03
    47e4:	9c 83       	std	Y+4, r25	; 0x04
    47e6:	ce 01       	movw	r24, r28
    47e8:	01 96       	adiw	r24, 0x01	; 1
    47ea:	be 01       	movw	r22, r28
    47ec:	6b 5f       	subi	r22, 0xFB	; 251
    47ee:	7f 4f       	sbci	r23, 0xFF	; 255
    47f0:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__unpack_f>
    47f4:	8d 81       	ldd	r24, Y+5	; 0x05
    47f6:	82 30       	cpi	r24, 0x02	; 2
    47f8:	61 f1       	breq	.+88     	; 0x4852 <__fixsfsi+0x80>
    47fa:	82 30       	cpi	r24, 0x02	; 2
    47fc:	50 f1       	brcs	.+84     	; 0x4852 <__fixsfsi+0x80>
    47fe:	84 30       	cpi	r24, 0x04	; 4
    4800:	21 f4       	brne	.+8      	; 0x480a <__fixsfsi+0x38>
    4802:	8e 81       	ldd	r24, Y+6	; 0x06
    4804:	88 23       	and	r24, r24
    4806:	49 f1       	breq	.+82     	; 0x485a <__fixsfsi+0x88>
    4808:	2d c0       	rjmp	.+90     	; 0x4864 <__fixsfsi+0x92>
    480a:	2f 81       	ldd	r18, Y+7	; 0x07
    480c:	38 85       	ldd	r19, Y+8	; 0x08
    480e:	37 fd       	sbrc	r19, 7
    4810:	20 c0       	rjmp	.+64     	; 0x4852 <__fixsfsi+0x80>
    4812:	6e 81       	ldd	r22, Y+6	; 0x06
    4814:	2f 31       	cpi	r18, 0x1F	; 31
    4816:	31 05       	cpc	r19, r1
    4818:	1c f0       	brlt	.+6      	; 0x4820 <__fixsfsi+0x4e>
    481a:	66 23       	and	r22, r22
    481c:	f1 f0       	breq	.+60     	; 0x485a <__fixsfsi+0x88>
    481e:	22 c0       	rjmp	.+68     	; 0x4864 <__fixsfsi+0x92>
    4820:	8e e1       	ldi	r24, 0x1E	; 30
    4822:	90 e0       	ldi	r25, 0x00	; 0
    4824:	82 1b       	sub	r24, r18
    4826:	93 0b       	sbc	r25, r19
    4828:	29 85       	ldd	r18, Y+9	; 0x09
    482a:	3a 85       	ldd	r19, Y+10	; 0x0a
    482c:	4b 85       	ldd	r20, Y+11	; 0x0b
    482e:	5c 85       	ldd	r21, Y+12	; 0x0c
    4830:	04 c0       	rjmp	.+8      	; 0x483a <__fixsfsi+0x68>
    4832:	56 95       	lsr	r21
    4834:	47 95       	ror	r20
    4836:	37 95       	ror	r19
    4838:	27 95       	ror	r18
    483a:	8a 95       	dec	r24
    483c:	d2 f7       	brpl	.-12     	; 0x4832 <__fixsfsi+0x60>
    483e:	66 23       	and	r22, r22
    4840:	a9 f0       	breq	.+42     	; 0x486c <__fixsfsi+0x9a>
    4842:	50 95       	com	r21
    4844:	40 95       	com	r20
    4846:	30 95       	com	r19
    4848:	21 95       	neg	r18
    484a:	3f 4f       	sbci	r19, 0xFF	; 255
    484c:	4f 4f       	sbci	r20, 0xFF	; 255
    484e:	5f 4f       	sbci	r21, 0xFF	; 255
    4850:	0d c0       	rjmp	.+26     	; 0x486c <__fixsfsi+0x9a>
    4852:	20 e0       	ldi	r18, 0x00	; 0
    4854:	30 e0       	ldi	r19, 0x00	; 0
    4856:	a9 01       	movw	r20, r18
    4858:	09 c0       	rjmp	.+18     	; 0x486c <__fixsfsi+0x9a>
    485a:	2f ef       	ldi	r18, 0xFF	; 255
    485c:	3f ef       	ldi	r19, 0xFF	; 255
    485e:	4f ef       	ldi	r20, 0xFF	; 255
    4860:	5f e7       	ldi	r21, 0x7F	; 127
    4862:	04 c0       	rjmp	.+8      	; 0x486c <__fixsfsi+0x9a>
    4864:	20 e0       	ldi	r18, 0x00	; 0
    4866:	30 e0       	ldi	r19, 0x00	; 0
    4868:	40 e0       	ldi	r20, 0x00	; 0
    486a:	50 e8       	ldi	r21, 0x80	; 128
    486c:	b9 01       	movw	r22, r18
    486e:	ca 01       	movw	r24, r20
    4870:	2c 96       	adiw	r28, 0x0c	; 12
    4872:	e2 e0       	ldi	r30, 0x02	; 2
    4874:	0c 94 1e 27 	jmp	0x4e3c	; 0x4e3c <__epilogue_restores__+0x20>

00004878 <__floatunsisf>:
    4878:	a8 e0       	ldi	r26, 0x08	; 8
    487a:	b0 e0       	ldi	r27, 0x00	; 0
    487c:	e2 e4       	ldi	r30, 0x42	; 66
    487e:	f4 e2       	ldi	r31, 0x24	; 36
    4880:	0c 94 fc 26 	jmp	0x4df8	; 0x4df8 <__prologue_saves__+0x14>
    4884:	7b 01       	movw	r14, r22
    4886:	8c 01       	movw	r16, r24
    4888:	1a 82       	std	Y+2, r1	; 0x02
    488a:	61 15       	cp	r22, r1
    488c:	71 05       	cpc	r23, r1
    488e:	81 05       	cpc	r24, r1
    4890:	91 05       	cpc	r25, r1
    4892:	19 f4       	brne	.+6      	; 0x489a <__floatunsisf+0x22>
    4894:	82 e0       	ldi	r24, 0x02	; 2
    4896:	89 83       	std	Y+1, r24	; 0x01
    4898:	5f c0       	rjmp	.+190    	; 0x4958 <__floatunsisf+0xe0>
    489a:	83 e0       	ldi	r24, 0x03	; 3
    489c:	89 83       	std	Y+1, r24	; 0x01
    489e:	8e e1       	ldi	r24, 0x1E	; 30
    48a0:	c8 2e       	mov	r12, r24
    48a2:	d1 2c       	mov	r13, r1
    48a4:	dc 82       	std	Y+4, r13	; 0x04
    48a6:	cb 82       	std	Y+3, r12	; 0x03
    48a8:	ed 82       	std	Y+5, r14	; 0x05
    48aa:	fe 82       	std	Y+6, r15	; 0x06
    48ac:	0f 83       	std	Y+7, r16	; 0x07
    48ae:	18 87       	std	Y+8, r17	; 0x08
    48b0:	c8 01       	movw	r24, r16
    48b2:	b7 01       	movw	r22, r14
    48b4:	0e 94 b4 24 	call	0x4968	; 0x4968 <__clzsi2>
    48b8:	9c 01       	movw	r18, r24
    48ba:	21 50       	subi	r18, 0x01	; 1
    48bc:	30 40       	sbci	r19, 0x00	; 0
    48be:	37 ff       	sbrs	r19, 7
    48c0:	38 c0       	rjmp	.+112    	; 0x4932 <__floatunsisf+0xba>
    48c2:	ee 27       	eor	r30, r30
    48c4:	ff 27       	eor	r31, r31
    48c6:	e2 1b       	sub	r30, r18
    48c8:	f3 0b       	sbc	r31, r19
    48ca:	40 e0       	ldi	r20, 0x00	; 0
    48cc:	50 e0       	ldi	r21, 0x00	; 0
    48ce:	ba 01       	movw	r22, r20
    48d0:	81 e0       	ldi	r24, 0x01	; 1
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	a0 e0       	ldi	r26, 0x00	; 0
    48d6:	b0 e0       	ldi	r27, 0x00	; 0
    48d8:	0e 2e       	mov	r0, r30
    48da:	04 c0       	rjmp	.+8      	; 0x48e4 <__floatunsisf+0x6c>
    48dc:	88 0f       	add	r24, r24
    48de:	99 1f       	adc	r25, r25
    48e0:	aa 1f       	adc	r26, r26
    48e2:	bb 1f       	adc	r27, r27
    48e4:	0a 94       	dec	r0
    48e6:	d2 f7       	brpl	.-12     	; 0x48dc <__floatunsisf+0x64>
    48e8:	01 97       	sbiw	r24, 0x01	; 1
    48ea:	a1 09       	sbc	r26, r1
    48ec:	b1 09       	sbc	r27, r1
    48ee:	8e 21       	and	r24, r14
    48f0:	9f 21       	and	r25, r15
    48f2:	a0 23       	and	r26, r16
    48f4:	b1 23       	and	r27, r17
    48f6:	00 97       	sbiw	r24, 0x00	; 0
    48f8:	a1 05       	cpc	r26, r1
    48fa:	b1 05       	cpc	r27, r1
    48fc:	21 f0       	breq	.+8      	; 0x4906 <__floatunsisf+0x8e>
    48fe:	41 e0       	ldi	r20, 0x01	; 1
    4900:	50 e0       	ldi	r21, 0x00	; 0
    4902:	60 e0       	ldi	r22, 0x00	; 0
    4904:	70 e0       	ldi	r23, 0x00	; 0
    4906:	04 c0       	rjmp	.+8      	; 0x4910 <__floatunsisf+0x98>
    4908:	16 95       	lsr	r17
    490a:	07 95       	ror	r16
    490c:	f7 94       	ror	r15
    490e:	e7 94       	ror	r14
    4910:	ea 95       	dec	r30
    4912:	d2 f7       	brpl	.-12     	; 0x4908 <__floatunsisf+0x90>
    4914:	e4 2a       	or	r14, r20
    4916:	f5 2a       	or	r15, r21
    4918:	06 2b       	or	r16, r22
    491a:	17 2b       	or	r17, r23
    491c:	ed 82       	std	Y+5, r14	; 0x05
    491e:	fe 82       	std	Y+6, r15	; 0x06
    4920:	0f 83       	std	Y+7, r16	; 0x07
    4922:	18 87       	std	Y+8, r17	; 0x08
    4924:	8e e1       	ldi	r24, 0x1E	; 30
    4926:	90 e0       	ldi	r25, 0x00	; 0
    4928:	82 1b       	sub	r24, r18
    492a:	93 0b       	sbc	r25, r19
    492c:	9c 83       	std	Y+4, r25	; 0x04
    492e:	8b 83       	std	Y+3, r24	; 0x03
    4930:	13 c0       	rjmp	.+38     	; 0x4958 <__floatunsisf+0xe0>
    4932:	21 15       	cp	r18, r1
    4934:	31 05       	cpc	r19, r1
    4936:	81 f0       	breq	.+32     	; 0x4958 <__floatunsisf+0xe0>
    4938:	02 2e       	mov	r0, r18
    493a:	04 c0       	rjmp	.+8      	; 0x4944 <__floatunsisf+0xcc>
    493c:	ee 0c       	add	r14, r14
    493e:	ff 1c       	adc	r15, r15
    4940:	00 1f       	adc	r16, r16
    4942:	11 1f       	adc	r17, r17
    4944:	0a 94       	dec	r0
    4946:	d2 f7       	brpl	.-12     	; 0x493c <__floatunsisf+0xc4>
    4948:	ed 82       	std	Y+5, r14	; 0x05
    494a:	fe 82       	std	Y+6, r15	; 0x06
    494c:	0f 83       	std	Y+7, r16	; 0x07
    494e:	18 87       	std	Y+8, r17	; 0x08
    4950:	c2 1a       	sub	r12, r18
    4952:	d3 0a       	sbc	r13, r19
    4954:	dc 82       	std	Y+4, r13	; 0x04
    4956:	cb 82       	std	Y+3, r12	; 0x03
    4958:	ce 01       	movw	r24, r28
    495a:	01 96       	adiw	r24, 0x01	; 1
    495c:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <__pack_f>
    4960:	28 96       	adiw	r28, 0x08	; 8
    4962:	e8 e0       	ldi	r30, 0x08	; 8
    4964:	0c 94 18 27 	jmp	0x4e30	; 0x4e30 <__epilogue_restores__+0x14>

00004968 <__clzsi2>:
    4968:	af 92       	push	r10
    496a:	bf 92       	push	r11
    496c:	cf 92       	push	r12
    496e:	df 92       	push	r13
    4970:	ef 92       	push	r14
    4972:	ff 92       	push	r15
    4974:	0f 93       	push	r16
    4976:	1f 93       	push	r17
    4978:	7b 01       	movw	r14, r22
    497a:	8c 01       	movw	r16, r24
    497c:	80 e0       	ldi	r24, 0x00	; 0
    497e:	e8 16       	cp	r14, r24
    4980:	80 e0       	ldi	r24, 0x00	; 0
    4982:	f8 06       	cpc	r15, r24
    4984:	81 e0       	ldi	r24, 0x01	; 1
    4986:	08 07       	cpc	r16, r24
    4988:	80 e0       	ldi	r24, 0x00	; 0
    498a:	18 07       	cpc	r17, r24
    498c:	80 f4       	brcc	.+32     	; 0x49ae <__clzsi2+0x46>
    498e:	8f ef       	ldi	r24, 0xFF	; 255
    4990:	e8 16       	cp	r14, r24
    4992:	f1 04       	cpc	r15, r1
    4994:	01 05       	cpc	r16, r1
    4996:	11 05       	cpc	r17, r1
    4998:	31 f0       	breq	.+12     	; 0x49a6 <__clzsi2+0x3e>
    499a:	28 f0       	brcs	.+10     	; 0x49a6 <__clzsi2+0x3e>
    499c:	88 e0       	ldi	r24, 0x08	; 8
    499e:	90 e0       	ldi	r25, 0x00	; 0
    49a0:	a0 e0       	ldi	r26, 0x00	; 0
    49a2:	b0 e0       	ldi	r27, 0x00	; 0
    49a4:	16 c0       	rjmp	.+44     	; 0x49d2 <__clzsi2+0x6a>
    49a6:	80 e0       	ldi	r24, 0x00	; 0
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	dc 01       	movw	r26, r24
    49ac:	12 c0       	rjmp	.+36     	; 0x49d2 <__clzsi2+0x6a>
    49ae:	80 e0       	ldi	r24, 0x00	; 0
    49b0:	e8 16       	cp	r14, r24
    49b2:	80 e0       	ldi	r24, 0x00	; 0
    49b4:	f8 06       	cpc	r15, r24
    49b6:	80 e0       	ldi	r24, 0x00	; 0
    49b8:	08 07       	cpc	r16, r24
    49ba:	81 e0       	ldi	r24, 0x01	; 1
    49bc:	18 07       	cpc	r17, r24
    49be:	28 f0       	brcs	.+10     	; 0x49ca <__clzsi2+0x62>
    49c0:	88 e1       	ldi	r24, 0x18	; 24
    49c2:	90 e0       	ldi	r25, 0x00	; 0
    49c4:	a0 e0       	ldi	r26, 0x00	; 0
    49c6:	b0 e0       	ldi	r27, 0x00	; 0
    49c8:	04 c0       	rjmp	.+8      	; 0x49d2 <__clzsi2+0x6a>
    49ca:	80 e1       	ldi	r24, 0x10	; 16
    49cc:	90 e0       	ldi	r25, 0x00	; 0
    49ce:	a0 e0       	ldi	r26, 0x00	; 0
    49d0:	b0 e0       	ldi	r27, 0x00	; 0
    49d2:	20 e2       	ldi	r18, 0x20	; 32
    49d4:	30 e0       	ldi	r19, 0x00	; 0
    49d6:	40 e0       	ldi	r20, 0x00	; 0
    49d8:	50 e0       	ldi	r21, 0x00	; 0
    49da:	28 1b       	sub	r18, r24
    49dc:	39 0b       	sbc	r19, r25
    49de:	4a 0b       	sbc	r20, r26
    49e0:	5b 0b       	sbc	r21, r27
    49e2:	57 01       	movw	r10, r14
    49e4:	68 01       	movw	r12, r16
    49e6:	04 c0       	rjmp	.+8      	; 0x49f0 <__clzsi2+0x88>
    49e8:	d6 94       	lsr	r13
    49ea:	c7 94       	ror	r12
    49ec:	b7 94       	ror	r11
    49ee:	a7 94       	ror	r10
    49f0:	8a 95       	dec	r24
    49f2:	d2 f7       	brpl	.-12     	; 0x49e8 <__clzsi2+0x80>
    49f4:	f5 01       	movw	r30, r10
    49f6:	e7 58       	subi	r30, 0x87	; 135
    49f8:	fe 4f       	sbci	r31, 0xFE	; 254
    49fa:	80 81       	ld	r24, Z
    49fc:	28 1b       	sub	r18, r24
    49fe:	31 09       	sbc	r19, r1
    4a00:	41 09       	sbc	r20, r1
    4a02:	51 09       	sbc	r21, r1
    4a04:	c9 01       	movw	r24, r18
    4a06:	1f 91       	pop	r17
    4a08:	0f 91       	pop	r16
    4a0a:	ff 90       	pop	r15
    4a0c:	ef 90       	pop	r14
    4a0e:	df 90       	pop	r13
    4a10:	cf 90       	pop	r12
    4a12:	bf 90       	pop	r11
    4a14:	af 90       	pop	r10
    4a16:	08 95       	ret

00004a18 <__pack_f>:
    4a18:	cf 92       	push	r12
    4a1a:	df 92       	push	r13
    4a1c:	ef 92       	push	r14
    4a1e:	ff 92       	push	r15
    4a20:	0f 93       	push	r16
    4a22:	1f 93       	push	r17
    4a24:	fc 01       	movw	r30, r24
    4a26:	24 81       	ldd	r18, Z+4	; 0x04
    4a28:	35 81       	ldd	r19, Z+5	; 0x05
    4a2a:	46 81       	ldd	r20, Z+6	; 0x06
    4a2c:	57 81       	ldd	r21, Z+7	; 0x07
    4a2e:	01 81       	ldd	r16, Z+1	; 0x01
    4a30:	80 81       	ld	r24, Z
    4a32:	82 30       	cpi	r24, 0x02	; 2
    4a34:	20 f4       	brcc	.+8      	; 0x4a3e <__pack_f+0x26>
    4a36:	40 61       	ori	r20, 0x10	; 16
    4a38:	8f ef       	ldi	r24, 0xFF	; 255
    4a3a:	90 e0       	ldi	r25, 0x00	; 0
    4a3c:	a2 c0       	rjmp	.+324    	; 0x4b82 <__pack_f+0x16a>
    4a3e:	84 30       	cpi	r24, 0x04	; 4
    4a40:	09 f4       	brne	.+2      	; 0x4a44 <__pack_f+0x2c>
    4a42:	9a c0       	rjmp	.+308    	; 0x4b78 <__pack_f+0x160>
    4a44:	82 30       	cpi	r24, 0x02	; 2
    4a46:	19 f4       	brne	.+6      	; 0x4a4e <__pack_f+0x36>
    4a48:	80 e0       	ldi	r24, 0x00	; 0
    4a4a:	90 e0       	ldi	r25, 0x00	; 0
    4a4c:	97 c0       	rjmp	.+302    	; 0x4b7c <__pack_f+0x164>
    4a4e:	21 15       	cp	r18, r1
    4a50:	31 05       	cpc	r19, r1
    4a52:	41 05       	cpc	r20, r1
    4a54:	51 05       	cpc	r21, r1
    4a56:	19 f4       	brne	.+6      	; 0x4a5e <__pack_f+0x46>
    4a58:	80 e0       	ldi	r24, 0x00	; 0
    4a5a:	90 e0       	ldi	r25, 0x00	; 0
    4a5c:	92 c0       	rjmp	.+292    	; 0x4b82 <__pack_f+0x16a>
    4a5e:	82 81       	ldd	r24, Z+2	; 0x02
    4a60:	93 81       	ldd	r25, Z+3	; 0x03
    4a62:	6f ef       	ldi	r22, 0xFF	; 255
    4a64:	82 38       	cpi	r24, 0x82	; 130
    4a66:	96 07       	cpc	r25, r22
    4a68:	0c f0       	brlt	.+2      	; 0x4a6c <__pack_f+0x54>
    4a6a:	58 c0       	rjmp	.+176    	; 0x4b1c <__pack_f+0x104>
    4a6c:	62 e8       	ldi	r22, 0x82	; 130
    4a6e:	7f ef       	ldi	r23, 0xFF	; 255
    4a70:	68 1b       	sub	r22, r24
    4a72:	79 0b       	sbc	r23, r25
    4a74:	6a 31       	cpi	r22, 0x1A	; 26
    4a76:	71 05       	cpc	r23, r1
    4a78:	24 f0       	brlt	.+8      	; 0x4a82 <__pack_f+0x6a>
    4a7a:	20 e0       	ldi	r18, 0x00	; 0
    4a7c:	30 e0       	ldi	r19, 0x00	; 0
    4a7e:	a9 01       	movw	r20, r18
    4a80:	2a c0       	rjmp	.+84     	; 0x4ad6 <__pack_f+0xbe>
    4a82:	69 01       	movw	r12, r18
    4a84:	7a 01       	movw	r14, r20
    4a86:	06 2e       	mov	r0, r22
    4a88:	04 c0       	rjmp	.+8      	; 0x4a92 <__pack_f+0x7a>
    4a8a:	f6 94       	lsr	r15
    4a8c:	e7 94       	ror	r14
    4a8e:	d7 94       	ror	r13
    4a90:	c7 94       	ror	r12
    4a92:	0a 94       	dec	r0
    4a94:	d2 f7       	brpl	.-12     	; 0x4a8a <__pack_f+0x72>
    4a96:	81 e0       	ldi	r24, 0x01	; 1
    4a98:	90 e0       	ldi	r25, 0x00	; 0
    4a9a:	a0 e0       	ldi	r26, 0x00	; 0
    4a9c:	b0 e0       	ldi	r27, 0x00	; 0
    4a9e:	04 c0       	rjmp	.+8      	; 0x4aa8 <__pack_f+0x90>
    4aa0:	88 0f       	add	r24, r24
    4aa2:	99 1f       	adc	r25, r25
    4aa4:	aa 1f       	adc	r26, r26
    4aa6:	bb 1f       	adc	r27, r27
    4aa8:	6a 95       	dec	r22
    4aaa:	d2 f7       	brpl	.-12     	; 0x4aa0 <__pack_f+0x88>
    4aac:	01 97       	sbiw	r24, 0x01	; 1
    4aae:	a1 09       	sbc	r26, r1
    4ab0:	b1 09       	sbc	r27, r1
    4ab2:	82 23       	and	r24, r18
    4ab4:	93 23       	and	r25, r19
    4ab6:	a4 23       	and	r26, r20
    4ab8:	b5 23       	and	r27, r21
    4aba:	00 97       	sbiw	r24, 0x00	; 0
    4abc:	a1 05       	cpc	r26, r1
    4abe:	b1 05       	cpc	r27, r1
    4ac0:	21 f0       	breq	.+8      	; 0x4aca <__pack_f+0xb2>
    4ac2:	81 e0       	ldi	r24, 0x01	; 1
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
    4ac6:	a0 e0       	ldi	r26, 0x00	; 0
    4ac8:	b0 e0       	ldi	r27, 0x00	; 0
    4aca:	9c 01       	movw	r18, r24
    4acc:	ad 01       	movw	r20, r26
    4ace:	2c 29       	or	r18, r12
    4ad0:	3d 29       	or	r19, r13
    4ad2:	4e 29       	or	r20, r14
    4ad4:	5f 29       	or	r21, r15
    4ad6:	da 01       	movw	r26, r20
    4ad8:	c9 01       	movw	r24, r18
    4ada:	8f 77       	andi	r24, 0x7F	; 127
    4adc:	90 70       	andi	r25, 0x00	; 0
    4ade:	a0 70       	andi	r26, 0x00	; 0
    4ae0:	b0 70       	andi	r27, 0x00	; 0
    4ae2:	80 34       	cpi	r24, 0x40	; 64
    4ae4:	91 05       	cpc	r25, r1
    4ae6:	a1 05       	cpc	r26, r1
    4ae8:	b1 05       	cpc	r27, r1
    4aea:	39 f4       	brne	.+14     	; 0x4afa <__pack_f+0xe2>
    4aec:	27 ff       	sbrs	r18, 7
    4aee:	09 c0       	rjmp	.+18     	; 0x4b02 <__pack_f+0xea>
    4af0:	20 5c       	subi	r18, 0xC0	; 192
    4af2:	3f 4f       	sbci	r19, 0xFF	; 255
    4af4:	4f 4f       	sbci	r20, 0xFF	; 255
    4af6:	5f 4f       	sbci	r21, 0xFF	; 255
    4af8:	04 c0       	rjmp	.+8      	; 0x4b02 <__pack_f+0xea>
    4afa:	21 5c       	subi	r18, 0xC1	; 193
    4afc:	3f 4f       	sbci	r19, 0xFF	; 255
    4afe:	4f 4f       	sbci	r20, 0xFF	; 255
    4b00:	5f 4f       	sbci	r21, 0xFF	; 255
    4b02:	80 e0       	ldi	r24, 0x00	; 0
    4b04:	90 e0       	ldi	r25, 0x00	; 0
    4b06:	20 30       	cpi	r18, 0x00	; 0
    4b08:	60 e0       	ldi	r22, 0x00	; 0
    4b0a:	36 07       	cpc	r19, r22
    4b0c:	60 e0       	ldi	r22, 0x00	; 0
    4b0e:	46 07       	cpc	r20, r22
    4b10:	60 e4       	ldi	r22, 0x40	; 64
    4b12:	56 07       	cpc	r21, r22
    4b14:	48 f1       	brcs	.+82     	; 0x4b68 <__pack_f+0x150>
    4b16:	81 e0       	ldi	r24, 0x01	; 1
    4b18:	90 e0       	ldi	r25, 0x00	; 0
    4b1a:	26 c0       	rjmp	.+76     	; 0x4b68 <__pack_f+0x150>
    4b1c:	80 38       	cpi	r24, 0x80	; 128
    4b1e:	91 05       	cpc	r25, r1
    4b20:	5c f5       	brge	.+86     	; 0x4b78 <__pack_f+0x160>
    4b22:	81 58       	subi	r24, 0x81	; 129
    4b24:	9f 4f       	sbci	r25, 0xFF	; 255
    4b26:	7f e7       	ldi	r23, 0x7F	; 127
    4b28:	c7 2e       	mov	r12, r23
    4b2a:	d1 2c       	mov	r13, r1
    4b2c:	e1 2c       	mov	r14, r1
    4b2e:	f1 2c       	mov	r15, r1
    4b30:	c2 22       	and	r12, r18
    4b32:	d3 22       	and	r13, r19
    4b34:	e4 22       	and	r14, r20
    4b36:	f5 22       	and	r15, r21
    4b38:	60 e4       	ldi	r22, 0x40	; 64
    4b3a:	c6 16       	cp	r12, r22
    4b3c:	d1 04       	cpc	r13, r1
    4b3e:	e1 04       	cpc	r14, r1
    4b40:	f1 04       	cpc	r15, r1
    4b42:	39 f4       	brne	.+14     	; 0x4b52 <__pack_f+0x13a>
    4b44:	27 ff       	sbrs	r18, 7
    4b46:	09 c0       	rjmp	.+18     	; 0x4b5a <__pack_f+0x142>
    4b48:	20 5c       	subi	r18, 0xC0	; 192
    4b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b4c:	4f 4f       	sbci	r20, 0xFF	; 255
    4b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    4b50:	04 c0       	rjmp	.+8      	; 0x4b5a <__pack_f+0x142>
    4b52:	21 5c       	subi	r18, 0xC1	; 193
    4b54:	3f 4f       	sbci	r19, 0xFF	; 255
    4b56:	4f 4f       	sbci	r20, 0xFF	; 255
    4b58:	5f 4f       	sbci	r21, 0xFF	; 255
    4b5a:	57 ff       	sbrs	r21, 7
    4b5c:	05 c0       	rjmp	.+10     	; 0x4b68 <__pack_f+0x150>
    4b5e:	56 95       	lsr	r21
    4b60:	47 95       	ror	r20
    4b62:	37 95       	ror	r19
    4b64:	27 95       	ror	r18
    4b66:	01 96       	adiw	r24, 0x01	; 1
    4b68:	97 e0       	ldi	r25, 0x07	; 7
    4b6a:	56 95       	lsr	r21
    4b6c:	47 95       	ror	r20
    4b6e:	37 95       	ror	r19
    4b70:	27 95       	ror	r18
    4b72:	9a 95       	dec	r25
    4b74:	d1 f7       	brne	.-12     	; 0x4b6a <__pack_f+0x152>
    4b76:	05 c0       	rjmp	.+10     	; 0x4b82 <__pack_f+0x16a>
    4b78:	8f ef       	ldi	r24, 0xFF	; 255
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	20 e0       	ldi	r18, 0x00	; 0
    4b7e:	30 e0       	ldi	r19, 0x00	; 0
    4b80:	a9 01       	movw	r20, r18
    4b82:	78 2f       	mov	r23, r24
    4b84:	77 95       	ror	r23
    4b86:	77 27       	eor	r23, r23
    4b88:	77 95       	ror	r23
    4b8a:	14 2f       	mov	r17, r20
    4b8c:	1f 77       	andi	r17, 0x7F	; 127
    4b8e:	60 2f       	mov	r22, r16
    4b90:	67 95       	ror	r22
    4b92:	66 27       	eor	r22, r22
    4b94:	67 95       	ror	r22
    4b96:	86 95       	lsr	r24
    4b98:	f1 2f       	mov	r31, r17
    4b9a:	f7 2b       	or	r31, r23
    4b9c:	e8 2f       	mov	r30, r24
    4b9e:	e6 2b       	or	r30, r22
    4ba0:	62 2f       	mov	r22, r18
    4ba2:	73 2f       	mov	r23, r19
    4ba4:	8f 2f       	mov	r24, r31
    4ba6:	9e 2f       	mov	r25, r30
    4ba8:	1f 91       	pop	r17
    4baa:	0f 91       	pop	r16
    4bac:	ff 90       	pop	r15
    4bae:	ef 90       	pop	r14
    4bb0:	df 90       	pop	r13
    4bb2:	cf 90       	pop	r12
    4bb4:	08 95       	ret

00004bb6 <__unpack_f>:
    4bb6:	fc 01       	movw	r30, r24
    4bb8:	db 01       	movw	r26, r22
    4bba:	20 81       	ld	r18, Z
    4bbc:	31 81       	ldd	r19, Z+1	; 0x01
    4bbe:	82 81       	ldd	r24, Z+2	; 0x02
    4bc0:	48 2f       	mov	r20, r24
    4bc2:	4f 77       	andi	r20, 0x7F	; 127
    4bc4:	50 e0       	ldi	r21, 0x00	; 0
    4bc6:	98 2f       	mov	r25, r24
    4bc8:	99 1f       	adc	r25, r25
    4bca:	99 27       	eor	r25, r25
    4bcc:	99 1f       	adc	r25, r25
    4bce:	63 81       	ldd	r22, Z+3	; 0x03
    4bd0:	86 2f       	mov	r24, r22
    4bd2:	88 0f       	add	r24, r24
    4bd4:	89 2b       	or	r24, r25
    4bd6:	90 e0       	ldi	r25, 0x00	; 0
    4bd8:	66 1f       	adc	r22, r22
    4bda:	66 27       	eor	r22, r22
    4bdc:	66 1f       	adc	r22, r22
    4bde:	11 96       	adiw	r26, 0x01	; 1
    4be0:	6c 93       	st	X, r22
    4be2:	11 97       	sbiw	r26, 0x01	; 1
    4be4:	00 97       	sbiw	r24, 0x00	; 0
    4be6:	69 f5       	brne	.+90     	; 0x4c42 <__unpack_f+0x8c>
    4be8:	21 15       	cp	r18, r1
    4bea:	31 05       	cpc	r19, r1
    4bec:	41 05       	cpc	r20, r1
    4bee:	51 05       	cpc	r21, r1
    4bf0:	11 f4       	brne	.+4      	; 0x4bf6 <__unpack_f+0x40>
    4bf2:	82 e0       	ldi	r24, 0x02	; 2
    4bf4:	2f c0       	rjmp	.+94     	; 0x4c54 <__unpack_f+0x9e>
    4bf6:	82 e8       	ldi	r24, 0x82	; 130
    4bf8:	9f ef       	ldi	r25, 0xFF	; 255
    4bfa:	13 96       	adiw	r26, 0x03	; 3
    4bfc:	9c 93       	st	X, r25
    4bfe:	8e 93       	st	-X, r24
    4c00:	12 97       	sbiw	r26, 0x02	; 2
    4c02:	67 e0       	ldi	r22, 0x07	; 7
    4c04:	22 0f       	add	r18, r18
    4c06:	33 1f       	adc	r19, r19
    4c08:	44 1f       	adc	r20, r20
    4c0a:	55 1f       	adc	r21, r21
    4c0c:	6a 95       	dec	r22
    4c0e:	d1 f7       	brne	.-12     	; 0x4c04 <__unpack_f+0x4e>
    4c10:	83 e0       	ldi	r24, 0x03	; 3
    4c12:	8c 93       	st	X, r24
    4c14:	0d c0       	rjmp	.+26     	; 0x4c30 <__unpack_f+0x7a>
    4c16:	22 0f       	add	r18, r18
    4c18:	33 1f       	adc	r19, r19
    4c1a:	44 1f       	adc	r20, r20
    4c1c:	55 1f       	adc	r21, r21
    4c1e:	12 96       	adiw	r26, 0x02	; 2
    4c20:	8d 91       	ld	r24, X+
    4c22:	9c 91       	ld	r25, X
    4c24:	13 97       	sbiw	r26, 0x03	; 3
    4c26:	01 97       	sbiw	r24, 0x01	; 1
    4c28:	13 96       	adiw	r26, 0x03	; 3
    4c2a:	9c 93       	st	X, r25
    4c2c:	8e 93       	st	-X, r24
    4c2e:	12 97       	sbiw	r26, 0x02	; 2
    4c30:	20 30       	cpi	r18, 0x00	; 0
    4c32:	80 e0       	ldi	r24, 0x00	; 0
    4c34:	38 07       	cpc	r19, r24
    4c36:	80 e0       	ldi	r24, 0x00	; 0
    4c38:	48 07       	cpc	r20, r24
    4c3a:	80 e4       	ldi	r24, 0x40	; 64
    4c3c:	58 07       	cpc	r21, r24
    4c3e:	58 f3       	brcs	.-42     	; 0x4c16 <__unpack_f+0x60>
    4c40:	22 c0       	rjmp	.+68     	; 0x4c86 <__unpack_f+0xd0>
    4c42:	8f 3f       	cpi	r24, 0xFF	; 255
    4c44:	91 05       	cpc	r25, r1
    4c46:	79 f4       	brne	.+30     	; 0x4c66 <__unpack_f+0xb0>
    4c48:	21 15       	cp	r18, r1
    4c4a:	31 05       	cpc	r19, r1
    4c4c:	41 05       	cpc	r20, r1
    4c4e:	51 05       	cpc	r21, r1
    4c50:	19 f4       	brne	.+6      	; 0x4c58 <__unpack_f+0xa2>
    4c52:	84 e0       	ldi	r24, 0x04	; 4
    4c54:	8c 93       	st	X, r24
    4c56:	08 95       	ret
    4c58:	44 ff       	sbrs	r20, 4
    4c5a:	03 c0       	rjmp	.+6      	; 0x4c62 <__unpack_f+0xac>
    4c5c:	81 e0       	ldi	r24, 0x01	; 1
    4c5e:	8c 93       	st	X, r24
    4c60:	12 c0       	rjmp	.+36     	; 0x4c86 <__unpack_f+0xd0>
    4c62:	1c 92       	st	X, r1
    4c64:	10 c0       	rjmp	.+32     	; 0x4c86 <__unpack_f+0xd0>
    4c66:	8f 57       	subi	r24, 0x7F	; 127
    4c68:	90 40       	sbci	r25, 0x00	; 0
    4c6a:	13 96       	adiw	r26, 0x03	; 3
    4c6c:	9c 93       	st	X, r25
    4c6e:	8e 93       	st	-X, r24
    4c70:	12 97       	sbiw	r26, 0x02	; 2
    4c72:	83 e0       	ldi	r24, 0x03	; 3
    4c74:	8c 93       	st	X, r24
    4c76:	87 e0       	ldi	r24, 0x07	; 7
    4c78:	22 0f       	add	r18, r18
    4c7a:	33 1f       	adc	r19, r19
    4c7c:	44 1f       	adc	r20, r20
    4c7e:	55 1f       	adc	r21, r21
    4c80:	8a 95       	dec	r24
    4c82:	d1 f7       	brne	.-12     	; 0x4c78 <__unpack_f+0xc2>
    4c84:	50 64       	ori	r21, 0x40	; 64
    4c86:	14 96       	adiw	r26, 0x04	; 4
    4c88:	2d 93       	st	X+, r18
    4c8a:	3d 93       	st	X+, r19
    4c8c:	4d 93       	st	X+, r20
    4c8e:	5c 93       	st	X, r21
    4c90:	17 97       	sbiw	r26, 0x07	; 7
    4c92:	08 95       	ret

00004c94 <__fpcmp_parts_f>:
    4c94:	ef 92       	push	r14
    4c96:	ff 92       	push	r15
    4c98:	0f 93       	push	r16
    4c9a:	1f 93       	push	r17
    4c9c:	fc 01       	movw	r30, r24
    4c9e:	db 01       	movw	r26, r22
    4ca0:	80 81       	ld	r24, Z
    4ca2:	82 30       	cpi	r24, 0x02	; 2
    4ca4:	08 f4       	brcc	.+2      	; 0x4ca8 <__fpcmp_parts_f+0x14>
    4ca6:	47 c0       	rjmp	.+142    	; 0x4d36 <__fpcmp_parts_f+0xa2>
    4ca8:	9c 91       	ld	r25, X
    4caa:	92 30       	cpi	r25, 0x02	; 2
    4cac:	08 f4       	brcc	.+2      	; 0x4cb0 <__fpcmp_parts_f+0x1c>
    4cae:	43 c0       	rjmp	.+134    	; 0x4d36 <__fpcmp_parts_f+0xa2>
    4cb0:	84 30       	cpi	r24, 0x04	; 4
    4cb2:	51 f4       	brne	.+20     	; 0x4cc8 <__fpcmp_parts_f+0x34>
    4cb4:	81 81       	ldd	r24, Z+1	; 0x01
    4cb6:	94 30       	cpi	r25, 0x04	; 4
    4cb8:	a1 f5       	brne	.+104    	; 0x4d22 <__fpcmp_parts_f+0x8e>
    4cba:	11 96       	adiw	r26, 0x01	; 1
    4cbc:	2c 91       	ld	r18, X
    4cbe:	11 97       	sbiw	r26, 0x01	; 1
    4cc0:	30 e0       	ldi	r19, 0x00	; 0
    4cc2:	28 1b       	sub	r18, r24
    4cc4:	31 09       	sbc	r19, r1
    4cc6:	3f c0       	rjmp	.+126    	; 0x4d46 <__fpcmp_parts_f+0xb2>
    4cc8:	94 30       	cpi	r25, 0x04	; 4
    4cca:	21 f0       	breq	.+8      	; 0x4cd4 <__fpcmp_parts_f+0x40>
    4ccc:	82 30       	cpi	r24, 0x02	; 2
    4cce:	31 f4       	brne	.+12     	; 0x4cdc <__fpcmp_parts_f+0x48>
    4cd0:	92 30       	cpi	r25, 0x02	; 2
    4cd2:	b9 f1       	breq	.+110    	; 0x4d42 <__fpcmp_parts_f+0xae>
    4cd4:	11 96       	adiw	r26, 0x01	; 1
    4cd6:	8c 91       	ld	r24, X
    4cd8:	11 97       	sbiw	r26, 0x01	; 1
    4cda:	2b c0       	rjmp	.+86     	; 0x4d32 <__fpcmp_parts_f+0x9e>
    4cdc:	81 81       	ldd	r24, Z+1	; 0x01
    4cde:	92 30       	cpi	r25, 0x02	; 2
    4ce0:	01 f1       	breq	.+64     	; 0x4d22 <__fpcmp_parts_f+0x8e>
    4ce2:	11 96       	adiw	r26, 0x01	; 1
    4ce4:	9c 91       	ld	r25, X
    4ce6:	11 97       	sbiw	r26, 0x01	; 1
    4ce8:	89 17       	cp	r24, r25
    4cea:	d9 f4       	brne	.+54     	; 0x4d22 <__fpcmp_parts_f+0x8e>
    4cec:	42 81       	ldd	r20, Z+2	; 0x02
    4cee:	53 81       	ldd	r21, Z+3	; 0x03
    4cf0:	12 96       	adiw	r26, 0x02	; 2
    4cf2:	2d 91       	ld	r18, X+
    4cf4:	3c 91       	ld	r19, X
    4cf6:	13 97       	sbiw	r26, 0x03	; 3
    4cf8:	24 17       	cp	r18, r20
    4cfa:	35 07       	cpc	r19, r21
    4cfc:	94 f0       	brlt	.+36     	; 0x4d22 <__fpcmp_parts_f+0x8e>
    4cfe:	42 17       	cp	r20, r18
    4d00:	53 07       	cpc	r21, r19
    4d02:	bc f0       	brlt	.+46     	; 0x4d32 <__fpcmp_parts_f+0x9e>
    4d04:	e4 80       	ldd	r14, Z+4	; 0x04
    4d06:	f5 80       	ldd	r15, Z+5	; 0x05
    4d08:	06 81       	ldd	r16, Z+6	; 0x06
    4d0a:	17 81       	ldd	r17, Z+7	; 0x07
    4d0c:	14 96       	adiw	r26, 0x04	; 4
    4d0e:	2d 91       	ld	r18, X+
    4d10:	3d 91       	ld	r19, X+
    4d12:	4d 91       	ld	r20, X+
    4d14:	5c 91       	ld	r21, X
    4d16:	17 97       	sbiw	r26, 0x07	; 7
    4d18:	2e 15       	cp	r18, r14
    4d1a:	3f 05       	cpc	r19, r15
    4d1c:	40 07       	cpc	r20, r16
    4d1e:	51 07       	cpc	r21, r17
    4d20:	18 f4       	brcc	.+6      	; 0x4d28 <__fpcmp_parts_f+0x94>
    4d22:	88 23       	and	r24, r24
    4d24:	41 f0       	breq	.+16     	; 0x4d36 <__fpcmp_parts_f+0xa2>
    4d26:	0a c0       	rjmp	.+20     	; 0x4d3c <__fpcmp_parts_f+0xa8>
    4d28:	e2 16       	cp	r14, r18
    4d2a:	f3 06       	cpc	r15, r19
    4d2c:	04 07       	cpc	r16, r20
    4d2e:	15 07       	cpc	r17, r21
    4d30:	40 f4       	brcc	.+16     	; 0x4d42 <__fpcmp_parts_f+0xae>
    4d32:	88 23       	and	r24, r24
    4d34:	19 f0       	breq	.+6      	; 0x4d3c <__fpcmp_parts_f+0xa8>
    4d36:	21 e0       	ldi	r18, 0x01	; 1
    4d38:	30 e0       	ldi	r19, 0x00	; 0
    4d3a:	05 c0       	rjmp	.+10     	; 0x4d46 <__fpcmp_parts_f+0xb2>
    4d3c:	2f ef       	ldi	r18, 0xFF	; 255
    4d3e:	3f ef       	ldi	r19, 0xFF	; 255
    4d40:	02 c0       	rjmp	.+4      	; 0x4d46 <__fpcmp_parts_f+0xb2>
    4d42:	20 e0       	ldi	r18, 0x00	; 0
    4d44:	30 e0       	ldi	r19, 0x00	; 0
    4d46:	c9 01       	movw	r24, r18
    4d48:	1f 91       	pop	r17
    4d4a:	0f 91       	pop	r16
    4d4c:	ff 90       	pop	r15
    4d4e:	ef 90       	pop	r14
    4d50:	08 95       	ret

00004d52 <__udivmodhi4>:
    4d52:	aa 1b       	sub	r26, r26
    4d54:	bb 1b       	sub	r27, r27
    4d56:	51 e1       	ldi	r21, 0x11	; 17
    4d58:	07 c0       	rjmp	.+14     	; 0x4d68 <__udivmodhi4_ep>

00004d5a <__udivmodhi4_loop>:
    4d5a:	aa 1f       	adc	r26, r26
    4d5c:	bb 1f       	adc	r27, r27
    4d5e:	a6 17       	cp	r26, r22
    4d60:	b7 07       	cpc	r27, r23
    4d62:	10 f0       	brcs	.+4      	; 0x4d68 <__udivmodhi4_ep>
    4d64:	a6 1b       	sub	r26, r22
    4d66:	b7 0b       	sbc	r27, r23

00004d68 <__udivmodhi4_ep>:
    4d68:	88 1f       	adc	r24, r24
    4d6a:	99 1f       	adc	r25, r25
    4d6c:	5a 95       	dec	r21
    4d6e:	a9 f7       	brne	.-22     	; 0x4d5a <__udivmodhi4_loop>
    4d70:	80 95       	com	r24
    4d72:	90 95       	com	r25
    4d74:	bc 01       	movw	r22, r24
    4d76:	cd 01       	movw	r24, r26
    4d78:	08 95       	ret

00004d7a <__divmodhi4>:
    4d7a:	97 fb       	bst	r25, 7
    4d7c:	09 2e       	mov	r0, r25
    4d7e:	07 26       	eor	r0, r23
    4d80:	0a d0       	rcall	.+20     	; 0x4d96 <__divmodhi4_neg1>
    4d82:	77 fd       	sbrc	r23, 7
    4d84:	04 d0       	rcall	.+8      	; 0x4d8e <__divmodhi4_neg2>
    4d86:	e5 df       	rcall	.-54     	; 0x4d52 <__udivmodhi4>
    4d88:	06 d0       	rcall	.+12     	; 0x4d96 <__divmodhi4_neg1>
    4d8a:	00 20       	and	r0, r0
    4d8c:	1a f4       	brpl	.+6      	; 0x4d94 <__divmodhi4_exit>

00004d8e <__divmodhi4_neg2>:
    4d8e:	70 95       	com	r23
    4d90:	61 95       	neg	r22
    4d92:	7f 4f       	sbci	r23, 0xFF	; 255

00004d94 <__divmodhi4_exit>:
    4d94:	08 95       	ret

00004d96 <__divmodhi4_neg1>:
    4d96:	f6 f7       	brtc	.-4      	; 0x4d94 <__divmodhi4_exit>
    4d98:	90 95       	com	r25
    4d9a:	81 95       	neg	r24
    4d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    4d9e:	08 95       	ret

00004da0 <__udivmodsi4>:
    4da0:	a1 e2       	ldi	r26, 0x21	; 33
    4da2:	1a 2e       	mov	r1, r26
    4da4:	aa 1b       	sub	r26, r26
    4da6:	bb 1b       	sub	r27, r27
    4da8:	fd 01       	movw	r30, r26
    4daa:	0d c0       	rjmp	.+26     	; 0x4dc6 <__udivmodsi4_ep>

00004dac <__udivmodsi4_loop>:
    4dac:	aa 1f       	adc	r26, r26
    4dae:	bb 1f       	adc	r27, r27
    4db0:	ee 1f       	adc	r30, r30
    4db2:	ff 1f       	adc	r31, r31
    4db4:	a2 17       	cp	r26, r18
    4db6:	b3 07       	cpc	r27, r19
    4db8:	e4 07       	cpc	r30, r20
    4dba:	f5 07       	cpc	r31, r21
    4dbc:	20 f0       	brcs	.+8      	; 0x4dc6 <__udivmodsi4_ep>
    4dbe:	a2 1b       	sub	r26, r18
    4dc0:	b3 0b       	sbc	r27, r19
    4dc2:	e4 0b       	sbc	r30, r20
    4dc4:	f5 0b       	sbc	r31, r21

00004dc6 <__udivmodsi4_ep>:
    4dc6:	66 1f       	adc	r22, r22
    4dc8:	77 1f       	adc	r23, r23
    4dca:	88 1f       	adc	r24, r24
    4dcc:	99 1f       	adc	r25, r25
    4dce:	1a 94       	dec	r1
    4dd0:	69 f7       	brne	.-38     	; 0x4dac <__udivmodsi4_loop>
    4dd2:	60 95       	com	r22
    4dd4:	70 95       	com	r23
    4dd6:	80 95       	com	r24
    4dd8:	90 95       	com	r25
    4dda:	9b 01       	movw	r18, r22
    4ddc:	ac 01       	movw	r20, r24
    4dde:	bd 01       	movw	r22, r26
    4de0:	cf 01       	movw	r24, r30
    4de2:	08 95       	ret

00004de4 <__prologue_saves__>:
    4de4:	2f 92       	push	r2
    4de6:	3f 92       	push	r3
    4de8:	4f 92       	push	r4
    4dea:	5f 92       	push	r5
    4dec:	6f 92       	push	r6
    4dee:	7f 92       	push	r7
    4df0:	8f 92       	push	r8
    4df2:	9f 92       	push	r9
    4df4:	af 92       	push	r10
    4df6:	bf 92       	push	r11
    4df8:	cf 92       	push	r12
    4dfa:	df 92       	push	r13
    4dfc:	ef 92       	push	r14
    4dfe:	ff 92       	push	r15
    4e00:	0f 93       	push	r16
    4e02:	1f 93       	push	r17
    4e04:	cf 93       	push	r28
    4e06:	df 93       	push	r29
    4e08:	cd b7       	in	r28, 0x3d	; 61
    4e0a:	de b7       	in	r29, 0x3e	; 62
    4e0c:	ca 1b       	sub	r28, r26
    4e0e:	db 0b       	sbc	r29, r27
    4e10:	0f b6       	in	r0, 0x3f	; 63
    4e12:	f8 94       	cli
    4e14:	de bf       	out	0x3e, r29	; 62
    4e16:	0f be       	out	0x3f, r0	; 63
    4e18:	cd bf       	out	0x3d, r28	; 61
    4e1a:	09 94       	ijmp

00004e1c <__epilogue_restores__>:
    4e1c:	2a 88       	ldd	r2, Y+18	; 0x12
    4e1e:	39 88       	ldd	r3, Y+17	; 0x11
    4e20:	48 88       	ldd	r4, Y+16	; 0x10
    4e22:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e24:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e26:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e28:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e2a:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e2c:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e2e:	b9 84       	ldd	r11, Y+9	; 0x09
    4e30:	c8 84       	ldd	r12, Y+8	; 0x08
    4e32:	df 80       	ldd	r13, Y+7	; 0x07
    4e34:	ee 80       	ldd	r14, Y+6	; 0x06
    4e36:	fd 80       	ldd	r15, Y+5	; 0x05
    4e38:	0c 81       	ldd	r16, Y+4	; 0x04
    4e3a:	1b 81       	ldd	r17, Y+3	; 0x03
    4e3c:	aa 81       	ldd	r26, Y+2	; 0x02
    4e3e:	b9 81       	ldd	r27, Y+1	; 0x01
    4e40:	ce 0f       	add	r28, r30
    4e42:	d1 1d       	adc	r29, r1
    4e44:	0f b6       	in	r0, 0x3f	; 63
    4e46:	f8 94       	cli
    4e48:	de bf       	out	0x3e, r29	; 62
    4e4a:	0f be       	out	0x3f, r0	; 63
    4e4c:	cd bf       	out	0x3d, r28	; 61
    4e4e:	ed 01       	movw	r28, r26
    4e50:	08 95       	ret

00004e52 <__tablejump2__>:
    4e52:	ee 0f       	add	r30, r30
    4e54:	ff 1f       	adc	r31, r31

00004e56 <__tablejump__>:
    4e56:	05 90       	lpm	r0, Z+
    4e58:	f4 91       	lpm	r31, Z+
    4e5a:	e0 2d       	mov	r30, r0
    4e5c:	09 94       	ijmp

00004e5e <calloc>:
    4e5e:	ef 92       	push	r14
    4e60:	ff 92       	push	r15
    4e62:	0f 93       	push	r16
    4e64:	1f 93       	push	r17
    4e66:	cf 93       	push	r28
    4e68:	df 93       	push	r29
    4e6a:	68 9f       	mul	r22, r24
    4e6c:	80 01       	movw	r16, r0
    4e6e:	69 9f       	mul	r22, r25
    4e70:	10 0d       	add	r17, r0
    4e72:	78 9f       	mul	r23, r24
    4e74:	10 0d       	add	r17, r0
    4e76:	11 24       	eor	r1, r1
    4e78:	c8 01       	movw	r24, r16
    4e7a:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <malloc>
    4e7e:	e8 2e       	mov	r14, r24
    4e80:	e7 01       	movw	r28, r14
    4e82:	7e 01       	movw	r14, r28
    4e84:	f9 2e       	mov	r15, r25
    4e86:	e7 01       	movw	r28, r14
    4e88:	e1 14       	cp	r14, r1
    4e8a:	f1 04       	cpc	r15, r1
    4e8c:	31 f0       	breq	.+12     	; 0x4e9a <calloc+0x3c>
    4e8e:	8e 2d       	mov	r24, r14
    4e90:	60 e0       	ldi	r22, 0x00	; 0
    4e92:	70 e0       	ldi	r23, 0x00	; 0
    4e94:	a8 01       	movw	r20, r16
    4e96:	0e 94 a6 29 	call	0x534c	; 0x534c <memset>
    4e9a:	7e 01       	movw	r14, r28
    4e9c:	ce 01       	movw	r24, r28
    4e9e:	cd b7       	in	r28, 0x3d	; 61
    4ea0:	de b7       	in	r29, 0x3e	; 62
    4ea2:	e6 e0       	ldi	r30, 0x06	; 6
    4ea4:	0c 94 1a 27 	jmp	0x4e34	; 0x4e34 <__epilogue_restores__+0x18>

00004ea8 <malloc>:
    4ea8:	ef 92       	push	r14
    4eaa:	ff 92       	push	r15
    4eac:	0f 93       	push	r16
    4eae:	1f 93       	push	r17
    4eb0:	cf 93       	push	r28
    4eb2:	df 93       	push	r29
    4eb4:	82 30       	cpi	r24, 0x02	; 2
    4eb6:	91 05       	cpc	r25, r1
    4eb8:	10 f4       	brcc	.+4      	; 0x4ebe <malloc+0x16>
    4eba:	82 e0       	ldi	r24, 0x02	; 2
    4ebc:	90 e0       	ldi	r25, 0x00	; 0
    4ebe:	c0 91 41 07 	lds	r28, 0x0741
    4ec2:	d0 91 42 07 	lds	r29, 0x0742
    4ec6:	20 e0       	ldi	r18, 0x00	; 0
    4ec8:	30 e0       	ldi	r19, 0x00	; 0
    4eca:	40 e0       	ldi	r20, 0x00	; 0
    4ecc:	50 e0       	ldi	r21, 0x00	; 0
    4ece:	29 c0       	rjmp	.+82     	; 0x4f22 <malloc+0x7a>
    4ed0:	68 81       	ld	r22, Y
    4ed2:	79 81       	ldd	r23, Y+1	; 0x01
    4ed4:	68 17       	cp	r22, r24
    4ed6:	79 07       	cpc	r23, r25
    4ed8:	d8 f0       	brcs	.+54     	; 0x4f10 <malloc+0x68>
    4eda:	68 17       	cp	r22, r24
    4edc:	79 07       	cpc	r23, r25
    4ede:	79 f4       	brne	.+30     	; 0x4efe <malloc+0x56>
    4ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ee2:	9b 81       	ldd	r25, Y+3	; 0x03
    4ee4:	21 15       	cp	r18, r1
    4ee6:	31 05       	cpc	r19, r1
    4ee8:	21 f0       	breq	.+8      	; 0x4ef2 <malloc+0x4a>
    4eea:	f9 01       	movw	r30, r18
    4eec:	93 83       	std	Z+3, r25	; 0x03
    4eee:	82 83       	std	Z+2, r24	; 0x02
    4ef0:	04 c0       	rjmp	.+8      	; 0x4efa <malloc+0x52>
    4ef2:	90 93 42 07 	sts	0x0742, r25
    4ef6:	80 93 41 07 	sts	0x0741, r24
    4efa:	de 01       	movw	r26, r28
    4efc:	2a c0       	rjmp	.+84     	; 0x4f52 <malloc+0xaa>
    4efe:	41 15       	cp	r20, r1
    4f00:	51 05       	cpc	r21, r1
    4f02:	19 f0       	breq	.+6      	; 0x4f0a <malloc+0x62>
    4f04:	64 17       	cp	r22, r20
    4f06:	75 07       	cpc	r23, r21
    4f08:	18 f4       	brcc	.+6      	; 0x4f10 <malloc+0x68>
    4f0a:	fe 01       	movw	r30, r28
    4f0c:	ab 01       	movw	r20, r22
    4f0e:	d9 01       	movw	r26, r18
    4f10:	9e 01       	movw	r18, r28
    4f12:	7a 81       	ldd	r23, Y+2	; 0x02
    4f14:	6b 81       	ldd	r22, Y+3	; 0x03
    4f16:	e7 2e       	mov	r14, r23
    4f18:	e7 01       	movw	r28, r14
    4f1a:	7e 01       	movw	r14, r28
    4f1c:	06 2f       	mov	r16, r22
    4f1e:	f6 2e       	mov	r15, r22
    4f20:	e7 01       	movw	r28, r14
    4f22:	20 97       	sbiw	r28, 0x00	; 0
    4f24:	a9 f6       	brne	.-86     	; 0x4ed0 <malloc+0x28>
    4f26:	41 15       	cp	r20, r1
    4f28:	51 05       	cpc	r21, r1
    4f2a:	f9 f0       	breq	.+62     	; 0x4f6a <malloc+0xc2>
    4f2c:	48 1b       	sub	r20, r24
    4f2e:	59 0b       	sbc	r21, r25
    4f30:	44 30       	cpi	r20, 0x04	; 4
    4f32:	51 05       	cpc	r21, r1
    4f34:	80 f4       	brcc	.+32     	; 0x4f56 <malloc+0xae>
    4f36:	82 81       	ldd	r24, Z+2	; 0x02
    4f38:	93 81       	ldd	r25, Z+3	; 0x03
    4f3a:	10 97       	sbiw	r26, 0x00	; 0
    4f3c:	29 f0       	breq	.+10     	; 0x4f48 <malloc+0xa0>
    4f3e:	13 96       	adiw	r26, 0x03	; 3
    4f40:	9c 93       	st	X, r25
    4f42:	8e 93       	st	-X, r24
    4f44:	12 97       	sbiw	r26, 0x02	; 2
    4f46:	04 c0       	rjmp	.+8      	; 0x4f50 <malloc+0xa8>
    4f48:	90 93 42 07 	sts	0x0742, r25
    4f4c:	80 93 41 07 	sts	0x0741, r24
    4f50:	df 01       	movw	r26, r30
    4f52:	12 96       	adiw	r26, 0x02	; 2
    4f54:	45 c0       	rjmp	.+138    	; 0x4fe0 <malloc+0x138>
    4f56:	df 01       	movw	r26, r30
    4f58:	a4 0f       	add	r26, r20
    4f5a:	b5 1f       	adc	r27, r21
    4f5c:	8d 93       	st	X+, r24
    4f5e:	9d 93       	st	X+, r25
    4f60:	42 50       	subi	r20, 0x02	; 2
    4f62:	50 40       	sbci	r21, 0x00	; 0
    4f64:	51 83       	std	Z+1, r21	; 0x01
    4f66:	40 83       	st	Z, r20
    4f68:	3b c0       	rjmp	.+118    	; 0x4fe0 <malloc+0x138>
    4f6a:	20 91 3f 07 	lds	r18, 0x073F
    4f6e:	30 91 40 07 	lds	r19, 0x0740
    4f72:	21 15       	cp	r18, r1
    4f74:	31 05       	cpc	r19, r1
    4f76:	41 f4       	brne	.+16     	; 0x4f88 <malloc+0xe0>
    4f78:	20 91 7b 02 	lds	r18, 0x027B
    4f7c:	30 91 7c 02 	lds	r19, 0x027C
    4f80:	30 93 40 07 	sts	0x0740, r19
    4f84:	20 93 3f 07 	sts	0x073F, r18
    4f88:	20 91 7d 02 	lds	r18, 0x027D
    4f8c:	30 91 7e 02 	lds	r19, 0x027E
    4f90:	21 15       	cp	r18, r1
    4f92:	31 05       	cpc	r19, r1
    4f94:	41 f4       	brne	.+16     	; 0x4fa6 <malloc+0xfe>
    4f96:	2d b7       	in	r18, 0x3d	; 61
    4f98:	3e b7       	in	r19, 0x3e	; 62
    4f9a:	40 91 79 02 	lds	r20, 0x0279
    4f9e:	50 91 7a 02 	lds	r21, 0x027A
    4fa2:	24 1b       	sub	r18, r20
    4fa4:	35 0b       	sbc	r19, r21
    4fa6:	a0 91 3f 07 	lds	r26, 0x073F
    4faa:	b0 91 40 07 	lds	r27, 0x0740
    4fae:	a2 17       	cp	r26, r18
    4fb0:	b3 07       	cpc	r27, r19
    4fb2:	a0 f4       	brcc	.+40     	; 0x4fdc <malloc+0x134>
    4fb4:	2a 1b       	sub	r18, r26
    4fb6:	3b 0b       	sbc	r19, r27
    4fb8:	28 17       	cp	r18, r24
    4fba:	39 07       	cpc	r19, r25
    4fbc:	78 f0       	brcs	.+30     	; 0x4fdc <malloc+0x134>
    4fbe:	ac 01       	movw	r20, r24
    4fc0:	4e 5f       	subi	r20, 0xFE	; 254
    4fc2:	5f 4f       	sbci	r21, 0xFF	; 255
    4fc4:	24 17       	cp	r18, r20
    4fc6:	35 07       	cpc	r19, r21
    4fc8:	48 f0       	brcs	.+18     	; 0x4fdc <malloc+0x134>
    4fca:	4a 0f       	add	r20, r26
    4fcc:	5b 1f       	adc	r21, r27
    4fce:	50 93 40 07 	sts	0x0740, r21
    4fd2:	40 93 3f 07 	sts	0x073F, r20
    4fd6:	8d 93       	st	X+, r24
    4fd8:	9d 93       	st	X+, r25
    4fda:	02 c0       	rjmp	.+4      	; 0x4fe0 <malloc+0x138>
    4fdc:	a0 e0       	ldi	r26, 0x00	; 0
    4fde:	b0 e0       	ldi	r27, 0x00	; 0
    4fe0:	cd 01       	movw	r24, r26
    4fe2:	cd b7       	in	r28, 0x3d	; 61
    4fe4:	de b7       	in	r29, 0x3e	; 62
    4fe6:	e6 e0       	ldi	r30, 0x06	; 6
    4fe8:	0c 94 1a 27 	jmp	0x4e34	; 0x4e34 <__epilogue_restores__+0x18>

00004fec <free>:
    4fec:	cf 93       	push	r28
    4fee:	df 93       	push	r29
    4ff0:	00 97       	sbiw	r24, 0x00	; 0
    4ff2:	09 f4       	brne	.+2      	; 0x4ff6 <free+0xa>
    4ff4:	8f c0       	rjmp	.+286    	; 0x5114 <free+0x128>
    4ff6:	fc 01       	movw	r30, r24
    4ff8:	32 97       	sbiw	r30, 0x02	; 2
    4ffa:	13 82       	std	Z+3, r1	; 0x03
    4ffc:	12 82       	std	Z+2, r1	; 0x02
    4ffe:	60 91 41 07 	lds	r22, 0x0741
    5002:	70 91 42 07 	lds	r23, 0x0742
    5006:	61 15       	cp	r22, r1
    5008:	71 05       	cpc	r23, r1
    500a:	81 f4       	brne	.+32     	; 0x502c <free+0x40>
    500c:	20 81       	ld	r18, Z
    500e:	31 81       	ldd	r19, Z+1	; 0x01
    5010:	28 0f       	add	r18, r24
    5012:	39 1f       	adc	r19, r25
    5014:	80 91 3f 07 	lds	r24, 0x073F
    5018:	90 91 40 07 	lds	r25, 0x0740
    501c:	82 17       	cp	r24, r18
    501e:	93 07       	cpc	r25, r19
    5020:	61 f5       	brne	.+88     	; 0x507a <free+0x8e>
    5022:	f0 93 40 07 	sts	0x0740, r31
    5026:	e0 93 3f 07 	sts	0x073F, r30
    502a:	74 c0       	rjmp	.+232    	; 0x5114 <free+0x128>
    502c:	eb 01       	movw	r28, r22
    502e:	80 e0       	ldi	r24, 0x00	; 0
    5030:	90 e0       	ldi	r25, 0x00	; 0
    5032:	ce 17       	cp	r28, r30
    5034:	df 07       	cpc	r29, r31
    5036:	40 f4       	brcc	.+16     	; 0x5048 <free+0x5c>
    5038:	2a 81       	ldd	r18, Y+2	; 0x02
    503a:	3b 81       	ldd	r19, Y+3	; 0x03
    503c:	ce 01       	movw	r24, r28
    503e:	21 15       	cp	r18, r1
    5040:	31 05       	cpc	r19, r1
    5042:	01 f1       	breq	.+64     	; 0x5084 <free+0x98>
    5044:	e9 01       	movw	r28, r18
    5046:	f5 cf       	rjmp	.-22     	; 0x5032 <free+0x46>
    5048:	d3 83       	std	Z+3, r29	; 0x03
    504a:	c2 83       	std	Z+2, r28	; 0x02
    504c:	df 01       	movw	r26, r30
    504e:	4d 91       	ld	r20, X+
    5050:	5d 91       	ld	r21, X+
    5052:	9d 01       	movw	r18, r26
    5054:	24 0f       	add	r18, r20
    5056:	35 1f       	adc	r19, r21
    5058:	c2 17       	cp	r28, r18
    505a:	d3 07       	cpc	r29, r19
    505c:	61 f4       	brne	.+24     	; 0x5076 <free+0x8a>
    505e:	28 81       	ld	r18, Y
    5060:	39 81       	ldd	r19, Y+1	; 0x01
    5062:	24 0f       	add	r18, r20
    5064:	35 1f       	adc	r19, r21
    5066:	2e 5f       	subi	r18, 0xFE	; 254
    5068:	3f 4f       	sbci	r19, 0xFF	; 255
    506a:	31 83       	std	Z+1, r19	; 0x01
    506c:	20 83       	st	Z, r18
    506e:	2a 81       	ldd	r18, Y+2	; 0x02
    5070:	3b 81       	ldd	r19, Y+3	; 0x03
    5072:	33 83       	std	Z+3, r19	; 0x03
    5074:	22 83       	std	Z+2, r18	; 0x02
    5076:	00 97       	sbiw	r24, 0x00	; 0
    5078:	29 f4       	brne	.+10     	; 0x5084 <free+0x98>
    507a:	f0 93 42 07 	sts	0x0742, r31
    507e:	e0 93 41 07 	sts	0x0741, r30
    5082:	48 c0       	rjmp	.+144    	; 0x5114 <free+0x128>
    5084:	dc 01       	movw	r26, r24
    5086:	13 96       	adiw	r26, 0x03	; 3
    5088:	fc 93       	st	X, r31
    508a:	ee 93       	st	-X, r30
    508c:	12 97       	sbiw	r26, 0x02	; 2
    508e:	ec 01       	movw	r28, r24
    5090:	49 91       	ld	r20, Y+
    5092:	59 91       	ld	r21, Y+
    5094:	c4 0f       	add	r28, r20
    5096:	d5 1f       	adc	r29, r21
    5098:	ec 17       	cp	r30, r28
    509a:	fd 07       	cpc	r31, r29
    509c:	79 f4       	brne	.+30     	; 0x50bc <free+0xd0>
    509e:	20 81       	ld	r18, Z
    50a0:	31 81       	ldd	r19, Z+1	; 0x01
    50a2:	24 0f       	add	r18, r20
    50a4:	35 1f       	adc	r19, r21
    50a6:	2e 5f       	subi	r18, 0xFE	; 254
    50a8:	3f 4f       	sbci	r19, 0xFF	; 255
    50aa:	11 96       	adiw	r26, 0x01	; 1
    50ac:	3c 93       	st	X, r19
    50ae:	2e 93       	st	-X, r18
    50b0:	22 81       	ldd	r18, Z+2	; 0x02
    50b2:	33 81       	ldd	r19, Z+3	; 0x03
    50b4:	13 96       	adiw	r26, 0x03	; 3
    50b6:	3c 93       	st	X, r19
    50b8:	2e 93       	st	-X, r18
    50ba:	12 97       	sbiw	r26, 0x02	; 2
    50bc:	e0 e0       	ldi	r30, 0x00	; 0
    50be:	f0 e0       	ldi	r31, 0x00	; 0
    50c0:	db 01       	movw	r26, r22
    50c2:	12 96       	adiw	r26, 0x02	; 2
    50c4:	8d 91       	ld	r24, X+
    50c6:	9c 91       	ld	r25, X
    50c8:	13 97       	sbiw	r26, 0x03	; 3
    50ca:	00 97       	sbiw	r24, 0x00	; 0
    50cc:	21 f0       	breq	.+8      	; 0x50d6 <free+0xea>
    50ce:	e6 2f       	mov	r30, r22
    50d0:	f7 2f       	mov	r31, r23
    50d2:	bc 01       	movw	r22, r24
    50d4:	f5 cf       	rjmp	.-22     	; 0x50c0 <free+0xd4>
    50d6:	9b 01       	movw	r18, r22
    50d8:	2e 5f       	subi	r18, 0xFE	; 254
    50da:	3f 4f       	sbci	r19, 0xFF	; 255
    50dc:	db 01       	movw	r26, r22
    50de:	8d 91       	ld	r24, X+
    50e0:	9c 91       	ld	r25, X
    50e2:	11 97       	sbiw	r26, 0x01	; 1
    50e4:	82 0f       	add	r24, r18
    50e6:	93 1f       	adc	r25, r19
    50e8:	40 91 3f 07 	lds	r20, 0x073F
    50ec:	50 91 40 07 	lds	r21, 0x0740
    50f0:	48 17       	cp	r20, r24
    50f2:	59 07       	cpc	r21, r25
    50f4:	79 f4       	brne	.+30     	; 0x5114 <free+0x128>
    50f6:	30 97       	sbiw	r30, 0x00	; 0
    50f8:	29 f4       	brne	.+10     	; 0x5104 <free+0x118>
    50fa:	10 92 42 07 	sts	0x0742, r1
    50fe:	10 92 41 07 	sts	0x0741, r1
    5102:	02 c0       	rjmp	.+4      	; 0x5108 <free+0x11c>
    5104:	13 82       	std	Z+3, r1	; 0x03
    5106:	12 82       	std	Z+2, r1	; 0x02
    5108:	22 50       	subi	r18, 0x02	; 2
    510a:	30 40       	sbci	r19, 0x00	; 0
    510c:	30 93 40 07 	sts	0x0740, r19
    5110:	20 93 3f 07 	sts	0x073F, r18
    5114:	df 91       	pop	r29
    5116:	cf 91       	pop	r28
    5118:	08 95       	ret

0000511a <realloc>:
    511a:	a0 e0       	ldi	r26, 0x00	; 0
    511c:	b0 e0       	ldi	r27, 0x00	; 0
    511e:	e3 e9       	ldi	r30, 0x93	; 147
    5120:	f8 e2       	ldi	r31, 0x28	; 40
    5122:	0c 94 f6 26 	jmp	0x4dec	; 0x4dec <__prologue_saves__+0x8>
    5126:	ec 01       	movw	r28, r24
    5128:	cb 01       	movw	r24, r22
    512a:	20 97       	sbiw	r28, 0x00	; 0
    512c:	41 f4       	brne	.+16     	; 0x513e <realloc+0x24>
    512e:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <malloc>
    5132:	e8 2e       	mov	r14, r24
    5134:	e7 01       	movw	r28, r14
    5136:	7e 01       	movw	r14, r28
    5138:	f9 2e       	mov	r15, r25
    513a:	e7 01       	movw	r28, r14
    513c:	b9 c0       	rjmp	.+370    	; 0x52b0 <realloc+0x196>
    513e:	be ef       	ldi	r27, 0xFE	; 254
    5140:	eb 2e       	mov	r14, r27
    5142:	bf ef       	ldi	r27, 0xFF	; 255
    5144:	fb 2e       	mov	r15, r27
    5146:	ec 0e       	add	r14, r28
    5148:	fd 1e       	adc	r15, r29
    514a:	ae 01       	movw	r20, r28
    514c:	46 0f       	add	r20, r22
    514e:	57 1f       	adc	r21, r23
    5150:	4e 15       	cp	r20, r14
    5152:	5f 05       	cpc	r21, r15
    5154:	08 f4       	brcc	.+2      	; 0x5158 <realloc+0x3e>
    5156:	aa c0       	rjmp	.+340    	; 0x52ac <realloc+0x192>
    5158:	d7 01       	movw	r26, r14
    515a:	2d 91       	ld	r18, X+
    515c:	3c 91       	ld	r19, X
    515e:	11 97       	sbiw	r26, 0x01	; 1
    5160:	26 17       	cp	r18, r22
    5162:	37 07       	cpc	r19, r23
    5164:	c0 f0       	brcs	.+48     	; 0x5196 <realloc+0x7c>
    5166:	25 30       	cpi	r18, 0x05	; 5
    5168:	31 05       	cpc	r19, r1
    516a:	08 f4       	brcc	.+2      	; 0x516e <realloc+0x54>
    516c:	a1 c0       	rjmp	.+322    	; 0x52b0 <realloc+0x196>
    516e:	b9 01       	movw	r22, r18
    5170:	64 50       	subi	r22, 0x04	; 4
    5172:	70 40       	sbci	r23, 0x00	; 0
    5174:	68 17       	cp	r22, r24
    5176:	79 07       	cpc	r23, r25
    5178:	08 f4       	brcc	.+2      	; 0x517c <realloc+0x62>
    517a:	9a c0       	rjmp	.+308    	; 0x52b0 <realloc+0x196>
    517c:	22 50       	subi	r18, 0x02	; 2
    517e:	30 40       	sbci	r19, 0x00	; 0
    5180:	28 1b       	sub	r18, r24
    5182:	39 0b       	sbc	r19, r25
    5184:	fa 01       	movw	r30, r20
    5186:	21 93       	st	Z+, r18
    5188:	31 93       	st	Z+, r19
    518a:	8d 93       	st	X+, r24
    518c:	9c 93       	st	X, r25
    518e:	cf 01       	movw	r24, r30
    5190:	0e 94 f6 27 	call	0x4fec	; 0x4fec <free>
    5194:	8d c0       	rjmp	.+282    	; 0x52b0 <realloc+0x196>
    5196:	6b 01       	movw	r12, r22
    5198:	c2 1a       	sub	r12, r18
    519a:	d3 0a       	sbc	r13, r19
    519c:	5e 01       	movw	r10, r28
    519e:	a2 0e       	add	r10, r18
    51a0:	b3 1e       	adc	r11, r19
    51a2:	e0 91 41 07 	lds	r30, 0x0741
    51a6:	f0 91 42 07 	lds	r31, 0x0742
    51aa:	66 24       	eor	r6, r6
    51ac:	77 24       	eor	r7, r7
    51ae:	00 e0       	ldi	r16, 0x00	; 0
    51b0:	10 e0       	ldi	r17, 0x00	; 0
    51b2:	45 c0       	rjmp	.+138    	; 0x523e <realloc+0x124>
    51b4:	ea 15       	cp	r30, r10
    51b6:	fb 05       	cpc	r31, r11
    51b8:	b9 f5       	brne	.+110    	; 0x5228 <realloc+0x10e>
    51ba:	60 81       	ld	r22, Z
    51bc:	71 81       	ldd	r23, Z+1	; 0x01
    51be:	a2 e0       	ldi	r26, 0x02	; 2
    51c0:	8a 2e       	mov	r8, r26
    51c2:	91 2c       	mov	r9, r1
    51c4:	86 0e       	add	r8, r22
    51c6:	97 1e       	adc	r9, r23
    51c8:	8c 14       	cp	r8, r12
    51ca:	9d 04       	cpc	r9, r13
    51cc:	68 f1       	brcs	.+90     	; 0x5228 <realloc+0x10e>
    51ce:	8b 01       	movw	r16, r22
    51d0:	0c 19       	sub	r16, r12
    51d2:	1d 09       	sbc	r17, r13
    51d4:	0e 5f       	subi	r16, 0xFE	; 254
    51d6:	1f 4f       	sbci	r17, 0xFF	; 255
    51d8:	b2 80       	ldd	r11, Z+2	; 0x02
    51da:	a3 80       	ldd	r10, Z+3	; 0x03
    51dc:	05 30       	cpi	r16, 0x05	; 5
    51de:	11 05       	cpc	r17, r1
    51e0:	60 f0       	brcs	.+24     	; 0x51fa <realloc+0xe0>
    51e2:	fa 01       	movw	r30, r20
    51e4:	b2 82       	std	Z+2, r11	; 0x02
    51e6:	a3 82       	std	Z+3, r10	; 0x03
    51e8:	6c 19       	sub	r22, r12
    51ea:	7d 09       	sbc	r23, r13
    51ec:	71 83       	std	Z+1, r23	; 0x01
    51ee:	60 83       	st	Z, r22
    51f0:	d7 01       	movw	r26, r14
    51f2:	11 96       	adiw	r26, 0x01	; 1
    51f4:	9c 93       	st	X, r25
    51f6:	8e 93       	st	-X, r24
    51f8:	09 c0       	rjmp	.+18     	; 0x520c <realloc+0xf2>
    51fa:	2e 5f       	subi	r18, 0xFE	; 254
    51fc:	3f 4f       	sbci	r19, 0xFF	; 255
    51fe:	26 0f       	add	r18, r22
    5200:	37 1f       	adc	r19, r23
    5202:	f7 01       	movw	r30, r14
    5204:	31 83       	std	Z+1, r19	; 0x01
    5206:	20 83       	st	Z, r18
    5208:	eb 2d       	mov	r30, r11
    520a:	fa 2d       	mov	r31, r10
    520c:	61 14       	cp	r6, r1
    520e:	71 04       	cpc	r7, r1
    5210:	31 f0       	breq	.+12     	; 0x521e <realloc+0x104>
    5212:	d3 01       	movw	r26, r6
    5214:	13 96       	adiw	r26, 0x03	; 3
    5216:	fc 93       	st	X, r31
    5218:	ee 93       	st	-X, r30
    521a:	12 97       	sbiw	r26, 0x02	; 2
    521c:	49 c0       	rjmp	.+146    	; 0x52b0 <realloc+0x196>
    521e:	f0 93 42 07 	sts	0x0742, r31
    5222:	e0 93 41 07 	sts	0x0741, r30
    5226:	44 c0       	rjmp	.+136    	; 0x52b0 <realloc+0x196>
    5228:	60 81       	ld	r22, Z
    522a:	71 81       	ldd	r23, Z+1	; 0x01
    522c:	06 17       	cp	r16, r22
    522e:	17 07       	cpc	r17, r23
    5230:	08 f4       	brcc	.+2      	; 0x5234 <realloc+0x11a>
    5232:	8b 01       	movw	r16, r22
    5234:	3f 01       	movw	r6, r30
    5236:	72 81       	ldd	r23, Z+2	; 0x02
    5238:	63 81       	ldd	r22, Z+3	; 0x03
    523a:	e7 2f       	mov	r30, r23
    523c:	f6 2f       	mov	r31, r22
    523e:	30 97       	sbiw	r30, 0x00	; 0
    5240:	09 f0       	breq	.+2      	; 0x5244 <realloc+0x12a>
    5242:	b8 cf       	rjmp	.-144    	; 0x51b4 <realloc+0x9a>
    5244:	20 91 3f 07 	lds	r18, 0x073F
    5248:	30 91 40 07 	lds	r19, 0x0740
    524c:	2a 15       	cp	r18, r10
    524e:	3b 05       	cpc	r19, r11
    5250:	e9 f4       	brne	.+58     	; 0x528c <realloc+0x172>
    5252:	08 17       	cp	r16, r24
    5254:	19 07       	cpc	r17, r25
    5256:	d0 f4       	brcc	.+52     	; 0x528c <realloc+0x172>
    5258:	20 91 7d 02 	lds	r18, 0x027D
    525c:	30 91 7e 02 	lds	r19, 0x027E
    5260:	21 15       	cp	r18, r1
    5262:	31 05       	cpc	r19, r1
    5264:	41 f4       	brne	.+16     	; 0x5276 <realloc+0x15c>
    5266:	2d b7       	in	r18, 0x3d	; 61
    5268:	3e b7       	in	r19, 0x3e	; 62
    526a:	60 91 79 02 	lds	r22, 0x0279
    526e:	70 91 7a 02 	lds	r23, 0x027A
    5272:	26 1b       	sub	r18, r22
    5274:	37 0b       	sbc	r19, r23
    5276:	42 17       	cp	r20, r18
    5278:	53 07       	cpc	r21, r19
    527a:	c0 f4       	brcc	.+48     	; 0x52ac <realloc+0x192>
    527c:	50 93 40 07 	sts	0x0740, r21
    5280:	40 93 3f 07 	sts	0x073F, r20
    5284:	f7 01       	movw	r30, r14
    5286:	91 83       	std	Z+1, r25	; 0x01
    5288:	80 83       	st	Z, r24
    528a:	12 c0       	rjmp	.+36     	; 0x52b0 <realloc+0x196>
    528c:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <malloc>
    5290:	8c 01       	movw	r16, r24
    5292:	00 97       	sbiw	r24, 0x00	; 0
    5294:	59 f0       	breq	.+22     	; 0x52ac <realloc+0x192>
    5296:	d7 01       	movw	r26, r14
    5298:	4d 91       	ld	r20, X+
    529a:	5c 91       	ld	r21, X
    529c:	be 01       	movw	r22, r28
    529e:	0e 94 9d 29 	call	0x533a	; 0x533a <memcpy>
    52a2:	ce 01       	movw	r24, r28
    52a4:	0e 94 f6 27 	call	0x4fec	; 0x4fec <free>
    52a8:	e8 01       	movw	r28, r16
    52aa:	02 c0       	rjmp	.+4      	; 0x52b0 <realloc+0x196>
    52ac:	c0 e0       	ldi	r28, 0x00	; 0
    52ae:	d0 e0       	ldi	r29, 0x00	; 0
    52b0:	ce 01       	movw	r24, r28
    52b2:	cd b7       	in	r28, 0x3d	; 61
    52b4:	de b7       	in	r29, 0x3e	; 62
    52b6:	ee e0       	ldi	r30, 0x0E	; 14
    52b8:	0c 94 12 27 	jmp	0x4e24	; 0x4e24 <__epilogue_restores__+0x8>

000052bc <atol>:
    52bc:	1f 93       	push	r17
    52be:	fc 01       	movw	r30, r24
    52c0:	99 27       	eor	r25, r25
    52c2:	88 27       	eor	r24, r24
    52c4:	bc 01       	movw	r22, r24
    52c6:	e8 94       	clt
    52c8:	11 91       	ld	r17, Z+
    52ca:	10 32       	cpi	r17, 0x20	; 32
    52cc:	e9 f3       	breq	.-6      	; 0x52c8 <atol+0xc>
    52ce:	19 30       	cpi	r17, 0x09	; 9
    52d0:	10 f0       	brcs	.+4      	; 0x52d6 <atol+0x1a>
    52d2:	1e 30       	cpi	r17, 0x0E	; 14
    52d4:	c8 f3       	brcs	.-14     	; 0x52c8 <atol+0xc>
    52d6:	1b 32       	cpi	r17, 0x2B	; 43
    52d8:	51 f0       	breq	.+20     	; 0x52ee <atol+0x32>
    52da:	1d 32       	cpi	r17, 0x2D	; 45
    52dc:	49 f4       	brne	.+18     	; 0x52f0 <atol+0x34>
    52de:	68 94       	set
    52e0:	06 c0       	rjmp	.+12     	; 0x52ee <atol+0x32>
    52e2:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <__mulsi_const_10>
    52e6:	61 0f       	add	r22, r17
    52e8:	71 1d       	adc	r23, r1
    52ea:	81 1d       	adc	r24, r1
    52ec:	91 1d       	adc	r25, r1
    52ee:	11 91       	ld	r17, Z+
    52f0:	10 53       	subi	r17, 0x30	; 48
    52f2:	1a 30       	cpi	r17, 0x0A	; 10
    52f4:	b0 f3       	brcs	.-20     	; 0x52e2 <atol+0x26>
    52f6:	3e f4       	brtc	.+14     	; 0x5306 <atol+0x4a>
    52f8:	90 95       	com	r25
    52fa:	80 95       	com	r24
    52fc:	70 95       	com	r23
    52fe:	61 95       	neg	r22
    5300:	7f 4f       	sbci	r23, 0xFF	; 255
    5302:	8f 4f       	sbci	r24, 0xFF	; 255
    5304:	9f 4f       	sbci	r25, 0xFF	; 255
    5306:	1f 91       	pop	r17
    5308:	08 95       	ret

0000530a <isspace>:
    530a:	91 11       	cpse	r25, r1
    530c:	19 c3       	rjmp	.+1586   	; 0x5940 <__ctype_isfalse>
    530e:	80 32       	cpi	r24, 0x20	; 32
    5310:	19 f0       	breq	.+6      	; 0x5318 <isspace+0xe>
    5312:	89 50       	subi	r24, 0x09	; 9
    5314:	85 50       	subi	r24, 0x05	; 5
    5316:	d0 f7       	brcc	.-12     	; 0x530c <isspace+0x2>
    5318:	08 95       	ret

0000531a <tolower>:
    531a:	91 11       	cpse	r25, r1
    531c:	08 95       	ret
    531e:	81 54       	subi	r24, 0x41	; 65
    5320:	8a 51       	subi	r24, 0x1A	; 26
    5322:	08 f4       	brcc	.+2      	; 0x5326 <tolower+0xc>
    5324:	80 5e       	subi	r24, 0xE0	; 224
    5326:	85 5a       	subi	r24, 0xA5	; 165
    5328:	08 95       	ret

0000532a <toupper>:
    532a:	91 11       	cpse	r25, r1
    532c:	08 95       	ret
    532e:	81 56       	subi	r24, 0x61	; 97
    5330:	8a 51       	subi	r24, 0x1A	; 26
    5332:	08 f4       	brcc	.+2      	; 0x5336 <toupper+0xc>
    5334:	80 52       	subi	r24, 0x20	; 32
    5336:	85 58       	subi	r24, 0x85	; 133
    5338:	08 95       	ret

0000533a <memcpy>:
    533a:	fb 01       	movw	r30, r22
    533c:	dc 01       	movw	r26, r24
    533e:	02 c0       	rjmp	.+4      	; 0x5344 <memcpy+0xa>
    5340:	01 90       	ld	r0, Z+
    5342:	0d 92       	st	X+, r0
    5344:	41 50       	subi	r20, 0x01	; 1
    5346:	50 40       	sbci	r21, 0x00	; 0
    5348:	d8 f7       	brcc	.-10     	; 0x5340 <memcpy+0x6>
    534a:	08 95       	ret

0000534c <memset>:
    534c:	dc 01       	movw	r26, r24
    534e:	01 c0       	rjmp	.+2      	; 0x5352 <memset+0x6>
    5350:	6d 93       	st	X+, r22
    5352:	41 50       	subi	r20, 0x01	; 1
    5354:	50 40       	sbci	r21, 0x00	; 0
    5356:	e0 f7       	brcc	.-8      	; 0x5350 <memset+0x4>
    5358:	08 95       	ret

0000535a <strcat>:
    535a:	fb 01       	movw	r30, r22
    535c:	dc 01       	movw	r26, r24
    535e:	0d 90       	ld	r0, X+
    5360:	00 20       	and	r0, r0
    5362:	e9 f7       	brne	.-6      	; 0x535e <strcat+0x4>
    5364:	11 97       	sbiw	r26, 0x01	; 1
    5366:	01 90       	ld	r0, Z+
    5368:	0d 92       	st	X+, r0
    536a:	00 20       	and	r0, r0
    536c:	e1 f7       	brne	.-8      	; 0x5366 <strcat+0xc>
    536e:	08 95       	ret

00005370 <strchr>:
    5370:	fc 01       	movw	r30, r24
    5372:	81 91       	ld	r24, Z+
    5374:	86 17       	cp	r24, r22
    5376:	21 f0       	breq	.+8      	; 0x5380 <strchr+0x10>
    5378:	88 23       	and	r24, r24
    537a:	d9 f7       	brne	.-10     	; 0x5372 <strchr+0x2>
    537c:	99 27       	eor	r25, r25
    537e:	08 95       	ret
    5380:	31 97       	sbiw	r30, 0x01	; 1
    5382:	cf 01       	movw	r24, r30
    5384:	08 95       	ret

00005386 <strcmp>:
    5386:	fb 01       	movw	r30, r22
    5388:	dc 01       	movw	r26, r24
    538a:	8d 91       	ld	r24, X+
    538c:	01 90       	ld	r0, Z+
    538e:	80 19       	sub	r24, r0
    5390:	01 10       	cpse	r0, r1
    5392:	d9 f3       	breq	.-10     	; 0x538a <strcmp+0x4>
    5394:	99 0b       	sbc	r25, r25
    5396:	08 95       	ret

00005398 <strcpy>:
    5398:	fb 01       	movw	r30, r22
    539a:	dc 01       	movw	r26, r24
    539c:	01 90       	ld	r0, Z+
    539e:	0d 92       	st	X+, r0
    53a0:	00 20       	and	r0, r0
    53a2:	e1 f7       	brne	.-8      	; 0x539c <strcpy+0x4>
    53a4:	08 95       	ret

000053a6 <strncmp>:
    53a6:	fb 01       	movw	r30, r22
    53a8:	dc 01       	movw	r26, r24
    53aa:	41 50       	subi	r20, 0x01	; 1
    53ac:	50 40       	sbci	r21, 0x00	; 0
    53ae:	30 f0       	brcs	.+12     	; 0x53bc <strncmp+0x16>
    53b0:	8d 91       	ld	r24, X+
    53b2:	01 90       	ld	r0, Z+
    53b4:	80 19       	sub	r24, r0
    53b6:	19 f4       	brne	.+6      	; 0x53be <strncmp+0x18>
    53b8:	00 20       	and	r0, r0
    53ba:	b9 f7       	brne	.-18     	; 0x53aa <strncmp+0x4>
    53bc:	88 1b       	sub	r24, r24
    53be:	99 0b       	sbc	r25, r25
    53c0:	08 95       	ret

000053c2 <strncpy>:
    53c2:	fb 01       	movw	r30, r22
    53c4:	dc 01       	movw	r26, r24
    53c6:	41 50       	subi	r20, 0x01	; 1
    53c8:	50 40       	sbci	r21, 0x00	; 0
    53ca:	48 f0       	brcs	.+18     	; 0x53de <strncpy+0x1c>
    53cc:	01 90       	ld	r0, Z+
    53ce:	0d 92       	st	X+, r0
    53d0:	00 20       	and	r0, r0
    53d2:	c9 f7       	brne	.-14     	; 0x53c6 <strncpy+0x4>
    53d4:	01 c0       	rjmp	.+2      	; 0x53d8 <strncpy+0x16>
    53d6:	1d 92       	st	X+, r1
    53d8:	41 50       	subi	r20, 0x01	; 1
    53da:	50 40       	sbci	r21, 0x00	; 0
    53dc:	e0 f7       	brcc	.-8      	; 0x53d6 <strncpy+0x14>
    53de:	08 95       	ret

000053e0 <strrchr>:
    53e0:	fc 01       	movw	r30, r24
    53e2:	81 e0       	ldi	r24, 0x01	; 1
    53e4:	90 e0       	ldi	r25, 0x00	; 0
    53e6:	01 90       	ld	r0, Z+
    53e8:	06 16       	cp	r0, r22
    53ea:	09 f4       	brne	.+2      	; 0x53ee <strrchr+0xe>
    53ec:	cf 01       	movw	r24, r30
    53ee:	00 20       	and	r0, r0
    53f0:	d1 f7       	brne	.-12     	; 0x53e6 <strrchr+0x6>
    53f2:	01 97       	sbiw	r24, 0x01	; 1
    53f4:	08 95       	ret

000053f6 <strstr>:
    53f6:	fb 01       	movw	r30, r22
    53f8:	51 91       	ld	r21, Z+
    53fa:	55 23       	and	r21, r21
    53fc:	a9 f0       	breq	.+42     	; 0x5428 <strstr+0x32>
    53fe:	bf 01       	movw	r22, r30
    5400:	dc 01       	movw	r26, r24
    5402:	4d 91       	ld	r20, X+
    5404:	45 17       	cp	r20, r21
    5406:	41 11       	cpse	r20, r1
    5408:	e1 f7       	brne	.-8      	; 0x5402 <strstr+0xc>
    540a:	59 f4       	brne	.+22     	; 0x5422 <strstr+0x2c>
    540c:	cd 01       	movw	r24, r26
    540e:	01 90       	ld	r0, Z+
    5410:	00 20       	and	r0, r0
    5412:	49 f0       	breq	.+18     	; 0x5426 <strstr+0x30>
    5414:	4d 91       	ld	r20, X+
    5416:	40 15       	cp	r20, r0
    5418:	41 11       	cpse	r20, r1
    541a:	c9 f3       	breq	.-14     	; 0x540e <strstr+0x18>
    541c:	fb 01       	movw	r30, r22
    541e:	41 11       	cpse	r20, r1
    5420:	ef cf       	rjmp	.-34     	; 0x5400 <strstr+0xa>
    5422:	81 e0       	ldi	r24, 0x01	; 1
    5424:	90 e0       	ldi	r25, 0x00	; 0
    5426:	01 97       	sbiw	r24, 0x01	; 1
    5428:	08 95       	ret

0000542a <itoa>:
    542a:	fb 01       	movw	r30, r22
    542c:	9f 01       	movw	r18, r30
    542e:	e8 94       	clt
    5430:	42 30       	cpi	r20, 0x02	; 2
    5432:	c4 f0       	brlt	.+48     	; 0x5464 <itoa+0x3a>
    5434:	45 32       	cpi	r20, 0x25	; 37
    5436:	b4 f4       	brge	.+44     	; 0x5464 <itoa+0x3a>
    5438:	4a 30       	cpi	r20, 0x0A	; 10
    543a:	29 f4       	brne	.+10     	; 0x5446 <itoa+0x1c>
    543c:	97 fb       	bst	r25, 7
    543e:	1e f4       	brtc	.+6      	; 0x5446 <itoa+0x1c>
    5440:	90 95       	com	r25
    5442:	81 95       	neg	r24
    5444:	9f 4f       	sbci	r25, 0xFF	; 255
    5446:	64 2f       	mov	r22, r20
    5448:	77 27       	eor	r23, r23
    544a:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__udivmodhi4>
    544e:	80 5d       	subi	r24, 0xD0	; 208
    5450:	8a 33       	cpi	r24, 0x3A	; 58
    5452:	0c f0       	brlt	.+2      	; 0x5456 <itoa+0x2c>
    5454:	89 5d       	subi	r24, 0xD9	; 217
    5456:	81 93       	st	Z+, r24
    5458:	cb 01       	movw	r24, r22
    545a:	00 97       	sbiw	r24, 0x00	; 0
    545c:	a1 f7       	brne	.-24     	; 0x5446 <itoa+0x1c>
    545e:	16 f4       	brtc	.+4      	; 0x5464 <itoa+0x3a>
    5460:	5d e2       	ldi	r21, 0x2D	; 45
    5462:	51 93       	st	Z+, r21
    5464:	10 82       	st	Z, r1
    5466:	c9 01       	movw	r24, r18
    5468:	0c 94 b9 2c 	jmp	0x5972	; 0x5972 <strrev>

0000546c <ltoa>:
    546c:	fa 01       	movw	r30, r20
    546e:	cf 93       	push	r28
    5470:	ff 93       	push	r31
    5472:	ef 93       	push	r30
    5474:	22 30       	cpi	r18, 0x02	; 2
    5476:	44 f1       	brlt	.+80     	; 0x54c8 <ltoa+0x5c>
    5478:	25 32       	cpi	r18, 0x25	; 37
    547a:	34 f5       	brge	.+76     	; 0x54c8 <ltoa+0x5c>
    547c:	c2 2f       	mov	r28, r18
    547e:	e8 94       	clt
    5480:	ca 30       	cpi	r28, 0x0A	; 10
    5482:	49 f4       	brne	.+18     	; 0x5496 <ltoa+0x2a>
    5484:	97 fb       	bst	r25, 7
    5486:	3e f4       	brtc	.+14     	; 0x5496 <ltoa+0x2a>
    5488:	90 95       	com	r25
    548a:	80 95       	com	r24
    548c:	70 95       	com	r23
    548e:	61 95       	neg	r22
    5490:	7f 4f       	sbci	r23, 0xFF	; 255
    5492:	8f 4f       	sbci	r24, 0xFF	; 255
    5494:	9f 4f       	sbci	r25, 0xFF	; 255
    5496:	2c 2f       	mov	r18, r28
    5498:	33 27       	eor	r19, r19
    549a:	44 27       	eor	r20, r20
    549c:	55 27       	eor	r21, r21
    549e:	ff 93       	push	r31
    54a0:	ef 93       	push	r30
    54a2:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__udivmodsi4>
    54a6:	ef 91       	pop	r30
    54a8:	ff 91       	pop	r31
    54aa:	60 5d       	subi	r22, 0xD0	; 208
    54ac:	6a 33       	cpi	r22, 0x3A	; 58
    54ae:	0c f0       	brlt	.+2      	; 0x54b2 <ltoa+0x46>
    54b0:	69 5d       	subi	r22, 0xD9	; 217
    54b2:	61 93       	st	Z+, r22
    54b4:	b9 01       	movw	r22, r18
    54b6:	ca 01       	movw	r24, r20
    54b8:	60 50       	subi	r22, 0x00	; 0
    54ba:	70 40       	sbci	r23, 0x00	; 0
    54bc:	80 40       	sbci	r24, 0x00	; 0
    54be:	90 40       	sbci	r25, 0x00	; 0
    54c0:	51 f7       	brne	.-44     	; 0x5496 <ltoa+0x2a>
    54c2:	16 f4       	brtc	.+4      	; 0x54c8 <ltoa+0x5c>
    54c4:	cd e2       	ldi	r28, 0x2D	; 45
    54c6:	c1 93       	st	Z+, r28
    54c8:	10 82       	st	Z, r1
    54ca:	8f 91       	pop	r24
    54cc:	9f 91       	pop	r25
    54ce:	cf 91       	pop	r28
    54d0:	0c 94 b9 2c 	jmp	0x5972	; 0x5972 <strrev>

000054d4 <__mulsi_const_10>:
    54d4:	59 2f       	mov	r21, r25
    54d6:	48 2f       	mov	r20, r24
    54d8:	37 2f       	mov	r19, r23
    54da:	26 2f       	mov	r18, r22
    54dc:	66 0f       	add	r22, r22
    54de:	77 1f       	adc	r23, r23
    54e0:	88 1f       	adc	r24, r24
    54e2:	99 1f       	adc	r25, r25
    54e4:	66 0f       	add	r22, r22
    54e6:	77 1f       	adc	r23, r23
    54e8:	88 1f       	adc	r24, r24
    54ea:	99 1f       	adc	r25, r25
    54ec:	62 0f       	add	r22, r18
    54ee:	73 1f       	adc	r23, r19
    54f0:	84 1f       	adc	r24, r20
    54f2:	95 1f       	adc	r25, r21
    54f4:	66 0f       	add	r22, r22
    54f6:	77 1f       	adc	r23, r23
    54f8:	88 1f       	adc	r24, r24
    54fa:	99 1f       	adc	r25, r25
    54fc:	08 95       	ret

000054fe <ultoa>:
    54fe:	fa 01       	movw	r30, r20
    5500:	cf 93       	push	r28
    5502:	ff 93       	push	r31
    5504:	ef 93       	push	r30
    5506:	22 30       	cpi	r18, 0x02	; 2
    5508:	cc f0       	brlt	.+50     	; 0x553c <ultoa+0x3e>
    550a:	25 32       	cpi	r18, 0x25	; 37
    550c:	bc f4       	brge	.+46     	; 0x553c <ultoa+0x3e>
    550e:	c2 2f       	mov	r28, r18
    5510:	2c 2f       	mov	r18, r28
    5512:	33 27       	eor	r19, r19
    5514:	44 27       	eor	r20, r20
    5516:	55 27       	eor	r21, r21
    5518:	ff 93       	push	r31
    551a:	ef 93       	push	r30
    551c:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__udivmodsi4>
    5520:	ef 91       	pop	r30
    5522:	ff 91       	pop	r31
    5524:	60 5d       	subi	r22, 0xD0	; 208
    5526:	6a 33       	cpi	r22, 0x3A	; 58
    5528:	0c f0       	brlt	.+2      	; 0x552c <ultoa+0x2e>
    552a:	69 5d       	subi	r22, 0xD9	; 217
    552c:	61 93       	st	Z+, r22
    552e:	b9 01       	movw	r22, r18
    5530:	ca 01       	movw	r24, r20
    5532:	60 50       	subi	r22, 0x00	; 0
    5534:	70 40       	sbci	r23, 0x00	; 0
    5536:	80 40       	sbci	r24, 0x00	; 0
    5538:	90 40       	sbci	r25, 0x00	; 0
    553a:	51 f7       	brne	.-44     	; 0x5510 <ultoa+0x12>
    553c:	10 82       	st	Z, r1
    553e:	8f 91       	pop	r24
    5540:	9f 91       	pop	r25
    5542:	cf 91       	pop	r28
    5544:	0c 94 b9 2c 	jmp	0x5972	; 0x5972 <strrev>

00005548 <sprintf>:
    5548:	ae e0       	ldi	r26, 0x0E	; 14
    554a:	b0 e0       	ldi	r27, 0x00	; 0
    554c:	ea ea       	ldi	r30, 0xAA	; 170
    554e:	fa e2       	ldi	r31, 0x2A	; 42
    5550:	0c 94 00 27 	jmp	0x4e00	; 0x4e00 <__prologue_saves__+0x1c>
    5554:	0d 89       	ldd	r16, Y+21	; 0x15
    5556:	1e 89       	ldd	r17, Y+22	; 0x16
    5558:	86 e0       	ldi	r24, 0x06	; 6
    555a:	8c 83       	std	Y+4, r24	; 0x04
    555c:	1a 83       	std	Y+2, r17	; 0x02
    555e:	09 83       	std	Y+1, r16	; 0x01
    5560:	8f ef       	ldi	r24, 0xFF	; 255
    5562:	9f e7       	ldi	r25, 0x7F	; 127
    5564:	9e 83       	std	Y+6, r25	; 0x06
    5566:	8d 83       	std	Y+5, r24	; 0x05
    5568:	9e 01       	movw	r18, r28
    556a:	27 5e       	subi	r18, 0xE7	; 231
    556c:	3f 4f       	sbci	r19, 0xFF	; 255
    556e:	ce 01       	movw	r24, r28
    5570:	01 96       	adiw	r24, 0x01	; 1
    5572:	6f 89       	ldd	r22, Y+23	; 0x17
    5574:	78 8d       	ldd	r23, Y+24	; 0x18
    5576:	a9 01       	movw	r20, r18
    5578:	0e 94 c7 2a 	call	0x558e	; 0x558e <vfprintf>
    557c:	ef 81       	ldd	r30, Y+7	; 0x07
    557e:	f8 85       	ldd	r31, Y+8	; 0x08
    5580:	e0 0f       	add	r30, r16
    5582:	f1 1f       	adc	r31, r17
    5584:	10 82       	st	Z, r1
    5586:	2e 96       	adiw	r28, 0x0e	; 14
    5588:	e4 e0       	ldi	r30, 0x04	; 4
    558a:	0c 94 1c 27 	jmp	0x4e38	; 0x4e38 <__epilogue_restores__+0x1c>

0000558e <vfprintf>:
    558e:	ac e0       	ldi	r26, 0x0C	; 12
    5590:	b0 e0       	ldi	r27, 0x00	; 0
    5592:	ed ec       	ldi	r30, 0xCD	; 205
    5594:	fa e2       	ldi	r31, 0x2A	; 42
    5596:	0c 94 f3 26 	jmp	0x4de6	; 0x4de6 <__prologue_saves__+0x2>
    559a:	6c 01       	movw	r12, r24
    559c:	2b 01       	movw	r4, r22
    559e:	8a 01       	movw	r16, r20
    55a0:	fc 01       	movw	r30, r24
    55a2:	17 82       	std	Z+7, r1	; 0x07
    55a4:	16 82       	std	Z+6, r1	; 0x06
    55a6:	83 81       	ldd	r24, Z+3	; 0x03
    55a8:	81 fd       	sbrc	r24, 1
    55aa:	03 c0       	rjmp	.+6      	; 0x55b2 <vfprintf+0x24>
    55ac:	2f ef       	ldi	r18, 0xFF	; 255
    55ae:	3f ef       	ldi	r19, 0xFF	; 255
    55b0:	c2 c1       	rjmp	.+900    	; 0x5936 <vfprintf+0x3a8>
    55b2:	4e 01       	movw	r8, r28
    55b4:	08 94       	sec
    55b6:	81 1c       	adc	r8, r1
    55b8:	91 1c       	adc	r9, r1
    55ba:	6f e3       	ldi	r22, 0x3F	; 63
    55bc:	36 2e       	mov	r3, r22
    55be:	f6 01       	movw	r30, r12
    55c0:	93 81       	ldd	r25, Z+3	; 0x03
    55c2:	f2 01       	movw	r30, r4
    55c4:	93 fd       	sbrc	r25, 3
    55c6:	85 91       	lpm	r24, Z+
    55c8:	93 ff       	sbrs	r25, 3
    55ca:	81 91       	ld	r24, Z+
    55cc:	2f 01       	movw	r4, r30
    55ce:	88 23       	and	r24, r24
    55d0:	09 f4       	brne	.+2      	; 0x55d4 <vfprintf+0x46>
    55d2:	ae c1       	rjmp	.+860    	; 0x5930 <vfprintf+0x3a2>
    55d4:	85 32       	cpi	r24, 0x25	; 37
    55d6:	39 f4       	brne	.+14     	; 0x55e6 <vfprintf+0x58>
    55d8:	93 fd       	sbrc	r25, 3
    55da:	85 91       	lpm	r24, Z+
    55dc:	93 ff       	sbrs	r25, 3
    55de:	81 91       	ld	r24, Z+
    55e0:	2f 01       	movw	r4, r30
    55e2:	85 32       	cpi	r24, 0x25	; 37
    55e4:	29 f4       	brne	.+10     	; 0x55f0 <vfprintf+0x62>
    55e6:	90 e0       	ldi	r25, 0x00	; 0
    55e8:	b6 01       	movw	r22, r12
    55ea:	0e 94 c9 2c 	call	0x5992	; 0x5992 <fputc>
    55ee:	e7 cf       	rjmp	.-50     	; 0x55be <vfprintf+0x30>
    55f0:	ee 24       	eor	r14, r14
    55f2:	ff 24       	eor	r15, r15
    55f4:	20 e0       	ldi	r18, 0x00	; 0
    55f6:	20 32       	cpi	r18, 0x20	; 32
    55f8:	b0 f4       	brcc	.+44     	; 0x5626 <vfprintf+0x98>
    55fa:	8b 32       	cpi	r24, 0x2B	; 43
    55fc:	69 f0       	breq	.+26     	; 0x5618 <vfprintf+0x8a>
    55fe:	8c 32       	cpi	r24, 0x2C	; 44
    5600:	28 f4       	brcc	.+10     	; 0x560c <vfprintf+0x7e>
    5602:	80 32       	cpi	r24, 0x20	; 32
    5604:	51 f0       	breq	.+20     	; 0x561a <vfprintf+0x8c>
    5606:	83 32       	cpi	r24, 0x23	; 35
    5608:	71 f4       	brne	.+28     	; 0x5626 <vfprintf+0x98>
    560a:	0b c0       	rjmp	.+22     	; 0x5622 <vfprintf+0x94>
    560c:	8d 32       	cpi	r24, 0x2D	; 45
    560e:	39 f0       	breq	.+14     	; 0x561e <vfprintf+0x90>
    5610:	80 33       	cpi	r24, 0x30	; 48
    5612:	49 f4       	brne	.+18     	; 0x5626 <vfprintf+0x98>
    5614:	21 60       	ori	r18, 0x01	; 1
    5616:	2c c0       	rjmp	.+88     	; 0x5670 <vfprintf+0xe2>
    5618:	22 60       	ori	r18, 0x02	; 2
    561a:	24 60       	ori	r18, 0x04	; 4
    561c:	29 c0       	rjmp	.+82     	; 0x5670 <vfprintf+0xe2>
    561e:	28 60       	ori	r18, 0x08	; 8
    5620:	27 c0       	rjmp	.+78     	; 0x5670 <vfprintf+0xe2>
    5622:	20 61       	ori	r18, 0x10	; 16
    5624:	25 c0       	rjmp	.+74     	; 0x5670 <vfprintf+0xe2>
    5626:	27 fd       	sbrc	r18, 7
    5628:	2c c0       	rjmp	.+88     	; 0x5682 <vfprintf+0xf4>
    562a:	38 2f       	mov	r19, r24
    562c:	30 53       	subi	r19, 0x30	; 48
    562e:	3a 30       	cpi	r19, 0x0A	; 10
    5630:	98 f4       	brcc	.+38     	; 0x5658 <vfprintf+0xca>
    5632:	26 ff       	sbrs	r18, 6
    5634:	08 c0       	rjmp	.+16     	; 0x5646 <vfprintf+0xb8>
    5636:	8e 2d       	mov	r24, r14
    5638:	88 0f       	add	r24, r24
    563a:	e8 2e       	mov	r14, r24
    563c:	ee 0c       	add	r14, r14
    563e:	ee 0c       	add	r14, r14
    5640:	e8 0e       	add	r14, r24
    5642:	e3 0e       	add	r14, r19
    5644:	15 c0       	rjmp	.+42     	; 0x5670 <vfprintf+0xe2>
    5646:	8f 2d       	mov	r24, r15
    5648:	88 0f       	add	r24, r24
    564a:	f8 2e       	mov	r15, r24
    564c:	ff 0c       	add	r15, r15
    564e:	ff 0c       	add	r15, r15
    5650:	f8 0e       	add	r15, r24
    5652:	f3 0e       	add	r15, r19
    5654:	20 62       	ori	r18, 0x20	; 32
    5656:	0c c0       	rjmp	.+24     	; 0x5670 <vfprintf+0xe2>
    5658:	8e 32       	cpi	r24, 0x2E	; 46
    565a:	21 f4       	brne	.+8      	; 0x5664 <vfprintf+0xd6>
    565c:	26 fd       	sbrc	r18, 6
    565e:	68 c1       	rjmp	.+720    	; 0x5930 <vfprintf+0x3a2>
    5660:	20 64       	ori	r18, 0x40	; 64
    5662:	06 c0       	rjmp	.+12     	; 0x5670 <vfprintf+0xe2>
    5664:	8c 36       	cpi	r24, 0x6C	; 108
    5666:	11 f4       	brne	.+4      	; 0x566c <vfprintf+0xde>
    5668:	20 68       	ori	r18, 0x80	; 128
    566a:	02 c0       	rjmp	.+4      	; 0x5670 <vfprintf+0xe2>
    566c:	88 36       	cpi	r24, 0x68	; 104
    566e:	49 f4       	brne	.+18     	; 0x5682 <vfprintf+0xf4>
    5670:	f2 01       	movw	r30, r4
    5672:	93 fd       	sbrc	r25, 3
    5674:	85 91       	lpm	r24, Z+
    5676:	93 ff       	sbrs	r25, 3
    5678:	81 91       	ld	r24, Z+
    567a:	2f 01       	movw	r4, r30
    567c:	88 23       	and	r24, r24
    567e:	09 f0       	breq	.+2      	; 0x5682 <vfprintf+0xf4>
    5680:	ba cf       	rjmp	.-140    	; 0x55f6 <vfprintf+0x68>
    5682:	98 2f       	mov	r25, r24
    5684:	95 54       	subi	r25, 0x45	; 69
    5686:	93 30       	cpi	r25, 0x03	; 3
    5688:	18 f0       	brcs	.+6      	; 0x5690 <vfprintf+0x102>
    568a:	90 52       	subi	r25, 0x20	; 32
    568c:	93 30       	cpi	r25, 0x03	; 3
    568e:	20 f4       	brcc	.+8      	; 0x5698 <vfprintf+0x10a>
    5690:	0c 5f       	subi	r16, 0xFC	; 252
    5692:	1f 4f       	sbci	r17, 0xFF	; 255
    5694:	39 82       	std	Y+1, r3	; 0x01
    5696:	0d c0       	rjmp	.+26     	; 0x56b2 <vfprintf+0x124>
    5698:	83 36       	cpi	r24, 0x63	; 99
    569a:	31 f0       	breq	.+12     	; 0x56a8 <vfprintf+0x11a>
    569c:	83 37       	cpi	r24, 0x73	; 115
    569e:	71 f0       	breq	.+28     	; 0x56bc <vfprintf+0x12e>
    56a0:	83 35       	cpi	r24, 0x53	; 83
    56a2:	09 f0       	breq	.+2      	; 0x56a6 <vfprintf+0x118>
    56a4:	58 c0       	rjmp	.+176    	; 0x5756 <vfprintf+0x1c8>
    56a6:	1e c0       	rjmp	.+60     	; 0x56e4 <vfprintf+0x156>
    56a8:	f8 01       	movw	r30, r16
    56aa:	80 81       	ld	r24, Z
    56ac:	89 83       	std	Y+1, r24	; 0x01
    56ae:	0e 5f       	subi	r16, 0xFE	; 254
    56b0:	1f 4f       	sbci	r17, 0xFF	; 255
    56b2:	54 01       	movw	r10, r8
    56b4:	51 e0       	ldi	r21, 0x01	; 1
    56b6:	65 2e       	mov	r6, r21
    56b8:	71 2c       	mov	r7, r1
    56ba:	12 c0       	rjmp	.+36     	; 0x56e0 <vfprintf+0x152>
    56bc:	f8 01       	movw	r30, r16
    56be:	a0 80       	ld	r10, Z
    56c0:	b1 80       	ldd	r11, Z+1	; 0x01
    56c2:	26 fd       	sbrc	r18, 6
    56c4:	03 c0       	rjmp	.+6      	; 0x56cc <vfprintf+0x13e>
    56c6:	6f ef       	ldi	r22, 0xFF	; 255
    56c8:	7f ef       	ldi	r23, 0xFF	; 255
    56ca:	02 c0       	rjmp	.+4      	; 0x56d0 <vfprintf+0x142>
    56cc:	6e 2d       	mov	r22, r14
    56ce:	70 e0       	ldi	r23, 0x00	; 0
    56d0:	0e 5f       	subi	r16, 0xFE	; 254
    56d2:	1f 4f       	sbci	r17, 0xFF	; 255
    56d4:	c5 01       	movw	r24, r10
    56d6:	2c 87       	std	Y+12, r18	; 0x0c
    56d8:	0e 94 ae 2c 	call	0x595c	; 0x595c <strnlen>
    56dc:	3c 01       	movw	r6, r24
    56de:	2c 85       	ldd	r18, Y+12	; 0x0c
    56e0:	2f 77       	andi	r18, 0x7F	; 127
    56e2:	13 c0       	rjmp	.+38     	; 0x570a <vfprintf+0x17c>
    56e4:	f8 01       	movw	r30, r16
    56e6:	a0 80       	ld	r10, Z
    56e8:	b1 80       	ldd	r11, Z+1	; 0x01
    56ea:	26 fd       	sbrc	r18, 6
    56ec:	03 c0       	rjmp	.+6      	; 0x56f4 <vfprintf+0x166>
    56ee:	6f ef       	ldi	r22, 0xFF	; 255
    56f0:	7f ef       	ldi	r23, 0xFF	; 255
    56f2:	02 c0       	rjmp	.+4      	; 0x56f8 <vfprintf+0x16a>
    56f4:	6e 2d       	mov	r22, r14
    56f6:	70 e0       	ldi	r23, 0x00	; 0
    56f8:	0e 5f       	subi	r16, 0xFE	; 254
    56fa:	1f 4f       	sbci	r17, 0xFF	; 255
    56fc:	c5 01       	movw	r24, r10
    56fe:	2c 87       	std	Y+12, r18	; 0x0c
    5700:	0e 94 a3 2c 	call	0x5946	; 0x5946 <strnlen_P>
    5704:	3c 01       	movw	r6, r24
    5706:	2c 85       	ldd	r18, Y+12	; 0x0c
    5708:	20 68       	ori	r18, 0x80	; 128
    570a:	23 ff       	sbrs	r18, 3
    570c:	09 c0       	rjmp	.+18     	; 0x5720 <vfprintf+0x192>
    570e:	1f c0       	rjmp	.+62     	; 0x574e <vfprintf+0x1c0>
    5710:	80 e2       	ldi	r24, 0x20	; 32
    5712:	90 e0       	ldi	r25, 0x00	; 0
    5714:	b6 01       	movw	r22, r12
    5716:	2c 87       	std	Y+12, r18	; 0x0c
    5718:	0e 94 c9 2c 	call	0x5992	; 0x5992 <fputc>
    571c:	fa 94       	dec	r15
    571e:	2c 85       	ldd	r18, Y+12	; 0x0c
    5720:	8f 2d       	mov	r24, r15
    5722:	90 e0       	ldi	r25, 0x00	; 0
    5724:	68 16       	cp	r6, r24
    5726:	79 06       	cpc	r7, r25
    5728:	98 f3       	brcs	.-26     	; 0x5710 <vfprintf+0x182>
    572a:	11 c0       	rjmp	.+34     	; 0x574e <vfprintf+0x1c0>
    572c:	f5 01       	movw	r30, r10
    572e:	27 fd       	sbrc	r18, 7
    5730:	85 91       	lpm	r24, Z+
    5732:	27 ff       	sbrs	r18, 7
    5734:	81 91       	ld	r24, Z+
    5736:	5f 01       	movw	r10, r30
    5738:	90 e0       	ldi	r25, 0x00	; 0
    573a:	b6 01       	movw	r22, r12
    573c:	2c 87       	std	Y+12, r18	; 0x0c
    573e:	0e 94 c9 2c 	call	0x5992	; 0x5992 <fputc>
    5742:	2c 85       	ldd	r18, Y+12	; 0x0c
    5744:	f1 10       	cpse	r15, r1
    5746:	fa 94       	dec	r15
    5748:	08 94       	sec
    574a:	61 08       	sbc	r6, r1
    574c:	71 08       	sbc	r7, r1
    574e:	61 14       	cp	r6, r1
    5750:	71 04       	cpc	r7, r1
    5752:	61 f7       	brne	.-40     	; 0x572c <vfprintf+0x19e>
    5754:	ea c0       	rjmp	.+468    	; 0x592a <vfprintf+0x39c>
    5756:	84 36       	cpi	r24, 0x64	; 100
    5758:	11 f0       	breq	.+4      	; 0x575e <vfprintf+0x1d0>
    575a:	89 36       	cpi	r24, 0x69	; 105
    575c:	51 f5       	brne	.+84     	; 0x57b2 <vfprintf+0x224>
    575e:	27 ff       	sbrs	r18, 7
    5760:	08 c0       	rjmp	.+16     	; 0x5772 <vfprintf+0x1e4>
    5762:	f8 01       	movw	r30, r16
    5764:	60 81       	ld	r22, Z
    5766:	71 81       	ldd	r23, Z+1	; 0x01
    5768:	82 81       	ldd	r24, Z+2	; 0x02
    576a:	93 81       	ldd	r25, Z+3	; 0x03
    576c:	0c 5f       	subi	r16, 0xFC	; 252
    576e:	1f 4f       	sbci	r17, 0xFF	; 255
    5770:	0a c0       	rjmp	.+20     	; 0x5786 <vfprintf+0x1f8>
    5772:	f8 01       	movw	r30, r16
    5774:	40 81       	ld	r20, Z
    5776:	51 81       	ldd	r21, Z+1	; 0x01
    5778:	ba 01       	movw	r22, r20
    577a:	88 27       	eor	r24, r24
    577c:	77 fd       	sbrc	r23, 7
    577e:	80 95       	com	r24
    5780:	98 2f       	mov	r25, r24
    5782:	0e 5f       	subi	r16, 0xFE	; 254
    5784:	1f 4f       	sbci	r17, 0xFF	; 255
    5786:	4f e6       	ldi	r20, 0x6F	; 111
    5788:	b4 2e       	mov	r11, r20
    578a:	b2 22       	and	r11, r18
    578c:	97 ff       	sbrs	r25, 7
    578e:	09 c0       	rjmp	.+18     	; 0x57a2 <vfprintf+0x214>
    5790:	90 95       	com	r25
    5792:	80 95       	com	r24
    5794:	70 95       	com	r23
    5796:	61 95       	neg	r22
    5798:	7f 4f       	sbci	r23, 0xFF	; 255
    579a:	8f 4f       	sbci	r24, 0xFF	; 255
    579c:	9f 4f       	sbci	r25, 0xFF	; 255
    579e:	f0 e8       	ldi	r31, 0x80	; 128
    57a0:	bf 2a       	or	r11, r31
    57a2:	a4 01       	movw	r20, r8
    57a4:	2a e0       	ldi	r18, 0x0A	; 10
    57a6:	30 e0       	ldi	r19, 0x00	; 0
    57a8:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <__ultoa_invert>
    57ac:	78 2e       	mov	r7, r24
    57ae:	78 18       	sub	r7, r8
    57b0:	43 c0       	rjmp	.+134    	; 0x5838 <vfprintf+0x2aa>
    57b2:	85 37       	cpi	r24, 0x75	; 117
    57b4:	31 f4       	brne	.+12     	; 0x57c2 <vfprintf+0x234>
    57b6:	3f ee       	ldi	r19, 0xEF	; 239
    57b8:	b3 2e       	mov	r11, r19
    57ba:	b2 22       	and	r11, r18
    57bc:	2a e0       	ldi	r18, 0x0A	; 10
    57be:	30 e0       	ldi	r19, 0x00	; 0
    57c0:	23 c0       	rjmp	.+70     	; 0x5808 <vfprintf+0x27a>
    57c2:	99 ef       	ldi	r25, 0xF9	; 249
    57c4:	b9 2e       	mov	r11, r25
    57c6:	b2 22       	and	r11, r18
    57c8:	8f 36       	cpi	r24, 0x6F	; 111
    57ca:	61 f0       	breq	.+24     	; 0x57e4 <vfprintf+0x256>
    57cc:	80 37       	cpi	r24, 0x70	; 112
    57ce:	20 f4       	brcc	.+8      	; 0x57d8 <vfprintf+0x24a>
    57d0:	88 35       	cpi	r24, 0x58	; 88
    57d2:	09 f0       	breq	.+2      	; 0x57d6 <vfprintf+0x248>
    57d4:	ad c0       	rjmp	.+346    	; 0x5930 <vfprintf+0x3a2>
    57d6:	12 c0       	rjmp	.+36     	; 0x57fc <vfprintf+0x26e>
    57d8:	80 37       	cpi	r24, 0x70	; 112
    57da:	39 f0       	breq	.+14     	; 0x57ea <vfprintf+0x25c>
    57dc:	88 37       	cpi	r24, 0x78	; 120
    57de:	09 f0       	breq	.+2      	; 0x57e2 <vfprintf+0x254>
    57e0:	a7 c0       	rjmp	.+334    	; 0x5930 <vfprintf+0x3a2>
    57e2:	05 c0       	rjmp	.+10     	; 0x57ee <vfprintf+0x260>
    57e4:	28 e0       	ldi	r18, 0x08	; 8
    57e6:	30 e0       	ldi	r19, 0x00	; 0
    57e8:	0f c0       	rjmp	.+30     	; 0x5808 <vfprintf+0x27a>
    57ea:	20 e1       	ldi	r18, 0x10	; 16
    57ec:	b2 2a       	or	r11, r18
    57ee:	b4 fe       	sbrs	r11, 4
    57f0:	02 c0       	rjmp	.+4      	; 0x57f6 <vfprintf+0x268>
    57f2:	84 e0       	ldi	r24, 0x04	; 4
    57f4:	b8 2a       	or	r11, r24
    57f6:	20 e1       	ldi	r18, 0x10	; 16
    57f8:	30 e0       	ldi	r19, 0x00	; 0
    57fa:	06 c0       	rjmp	.+12     	; 0x5808 <vfprintf+0x27a>
    57fc:	b4 fe       	sbrs	r11, 4
    57fe:	02 c0       	rjmp	.+4      	; 0x5804 <vfprintf+0x276>
    5800:	e6 e0       	ldi	r30, 0x06	; 6
    5802:	be 2a       	or	r11, r30
    5804:	20 e1       	ldi	r18, 0x10	; 16
    5806:	32 e0       	ldi	r19, 0x02	; 2
    5808:	b7 fe       	sbrs	r11, 7
    580a:	08 c0       	rjmp	.+16     	; 0x581c <vfprintf+0x28e>
    580c:	f8 01       	movw	r30, r16
    580e:	60 81       	ld	r22, Z
    5810:	71 81       	ldd	r23, Z+1	; 0x01
    5812:	82 81       	ldd	r24, Z+2	; 0x02
    5814:	93 81       	ldd	r25, Z+3	; 0x03
    5816:	0c 5f       	subi	r16, 0xFC	; 252
    5818:	1f 4f       	sbci	r17, 0xFF	; 255
    581a:	07 c0       	rjmp	.+14     	; 0x582a <vfprintf+0x29c>
    581c:	f8 01       	movw	r30, r16
    581e:	60 81       	ld	r22, Z
    5820:	71 81       	ldd	r23, Z+1	; 0x01
    5822:	80 e0       	ldi	r24, 0x00	; 0
    5824:	90 e0       	ldi	r25, 0x00	; 0
    5826:	0e 5f       	subi	r16, 0xFE	; 254
    5828:	1f 4f       	sbci	r17, 0xFF	; 255
    582a:	a4 01       	movw	r20, r8
    582c:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <__ultoa_invert>
    5830:	78 2e       	mov	r7, r24
    5832:	78 18       	sub	r7, r8
    5834:	ff e7       	ldi	r31, 0x7F	; 127
    5836:	bf 22       	and	r11, r31
    5838:	b6 fe       	sbrs	r11, 6
    583a:	0b c0       	rjmp	.+22     	; 0x5852 <vfprintf+0x2c4>
    583c:	2e ef       	ldi	r18, 0xFE	; 254
    583e:	b2 22       	and	r11, r18
    5840:	7e 14       	cp	r7, r14
    5842:	38 f4       	brcc	.+14     	; 0x5852 <vfprintf+0x2c4>
    5844:	b4 fe       	sbrs	r11, 4
    5846:	07 c0       	rjmp	.+14     	; 0x5856 <vfprintf+0x2c8>
    5848:	b2 fc       	sbrc	r11, 2
    584a:	05 c0       	rjmp	.+10     	; 0x5856 <vfprintf+0x2c8>
    584c:	8f ee       	ldi	r24, 0xEF	; 239
    584e:	b8 22       	and	r11, r24
    5850:	02 c0       	rjmp	.+4      	; 0x5856 <vfprintf+0x2c8>
    5852:	a7 2c       	mov	r10, r7
    5854:	01 c0       	rjmp	.+2      	; 0x5858 <vfprintf+0x2ca>
    5856:	ae 2c       	mov	r10, r14
    5858:	8b 2d       	mov	r24, r11
    585a:	b4 fe       	sbrs	r11, 4
    585c:	0d c0       	rjmp	.+26     	; 0x5878 <vfprintf+0x2ea>
    585e:	fe 01       	movw	r30, r28
    5860:	e7 0d       	add	r30, r7
    5862:	f1 1d       	adc	r31, r1
    5864:	90 81       	ld	r25, Z
    5866:	90 33       	cpi	r25, 0x30	; 48
    5868:	19 f4       	brne	.+6      	; 0x5870 <vfprintf+0x2e2>
    586a:	e9 ee       	ldi	r30, 0xE9	; 233
    586c:	be 22       	and	r11, r30
    586e:	07 c0       	rjmp	.+14     	; 0x587e <vfprintf+0x2f0>
    5870:	a3 94       	inc	r10
    5872:	b2 fe       	sbrs	r11, 2
    5874:	04 c0       	rjmp	.+8      	; 0x587e <vfprintf+0x2f0>
    5876:	02 c0       	rjmp	.+4      	; 0x587c <vfprintf+0x2ee>
    5878:	86 78       	andi	r24, 0x86	; 134
    587a:	09 f0       	breq	.+2      	; 0x587e <vfprintf+0x2f0>
    587c:	a3 94       	inc	r10
    587e:	6b 2c       	mov	r6, r11
    5880:	b3 fc       	sbrc	r11, 3
    5882:	14 c0       	rjmp	.+40     	; 0x58ac <vfprintf+0x31e>
    5884:	b0 fe       	sbrs	r11, 0
    5886:	0f c0       	rjmp	.+30     	; 0x58a6 <vfprintf+0x318>
    5888:	af 14       	cp	r10, r15
    588a:	10 f0       	brcs	.+4      	; 0x5890 <vfprintf+0x302>
    588c:	e7 2c       	mov	r14, r7
    588e:	0b c0       	rjmp	.+22     	; 0x58a6 <vfprintf+0x318>
    5890:	e7 2c       	mov	r14, r7
    5892:	ef 0c       	add	r14, r15
    5894:	ea 18       	sub	r14, r10
    5896:	af 2c       	mov	r10, r15
    5898:	06 c0       	rjmp	.+12     	; 0x58a6 <vfprintf+0x318>
    589a:	80 e2       	ldi	r24, 0x20	; 32
    589c:	90 e0       	ldi	r25, 0x00	; 0
    589e:	b6 01       	movw	r22, r12
    58a0:	0e 94 c9 2c 	call	0x5992	; 0x5992 <fputc>
    58a4:	a3 94       	inc	r10
    58a6:	af 14       	cp	r10, r15
    58a8:	c0 f3       	brcs	.-16     	; 0x589a <vfprintf+0x30c>
    58aa:	04 c0       	rjmp	.+8      	; 0x58b4 <vfprintf+0x326>
    58ac:	af 14       	cp	r10, r15
    58ae:	10 f4       	brcc	.+4      	; 0x58b4 <vfprintf+0x326>
    58b0:	fa 18       	sub	r15, r10
    58b2:	01 c0       	rjmp	.+2      	; 0x58b6 <vfprintf+0x328>
    58b4:	ff 24       	eor	r15, r15
    58b6:	64 fe       	sbrs	r6, 4
    58b8:	0f c0       	rjmp	.+30     	; 0x58d8 <vfprintf+0x34a>
    58ba:	80 e3       	ldi	r24, 0x30	; 48
    58bc:	90 e0       	ldi	r25, 0x00	; 0
    58be:	b6 01       	movw	r22, r12
    58c0:	0e 94 c9 2c 	call	0x5992	; 0x5992 <fputc>
    58c4:	62 fe       	sbrs	r6, 2
    58c6:	1d c0       	rjmp	.+58     	; 0x5902 <vfprintf+0x374>
    58c8:	61 fc       	sbrc	r6, 1
    58ca:	03 c0       	rjmp	.+6      	; 0x58d2 <vfprintf+0x344>
    58cc:	88 e7       	ldi	r24, 0x78	; 120
    58ce:	90 e0       	ldi	r25, 0x00	; 0
    58d0:	0e c0       	rjmp	.+28     	; 0x58ee <vfprintf+0x360>
    58d2:	88 e5       	ldi	r24, 0x58	; 88
    58d4:	90 e0       	ldi	r25, 0x00	; 0
    58d6:	0b c0       	rjmp	.+22     	; 0x58ee <vfprintf+0x360>
    58d8:	86 2d       	mov	r24, r6
    58da:	86 78       	andi	r24, 0x86	; 134
    58dc:	91 f0       	breq	.+36     	; 0x5902 <vfprintf+0x374>
    58de:	61 fe       	sbrs	r6, 1
    58e0:	02 c0       	rjmp	.+4      	; 0x58e6 <vfprintf+0x358>
    58e2:	8b e2       	ldi	r24, 0x2B	; 43
    58e4:	01 c0       	rjmp	.+2      	; 0x58e8 <vfprintf+0x35a>
    58e6:	80 e2       	ldi	r24, 0x20	; 32
    58e8:	b7 fc       	sbrc	r11, 7
    58ea:	8d e2       	ldi	r24, 0x2D	; 45
    58ec:	90 e0       	ldi	r25, 0x00	; 0
    58ee:	b6 01       	movw	r22, r12
    58f0:	0e 94 c9 2c 	call	0x5992	; 0x5992 <fputc>
    58f4:	06 c0       	rjmp	.+12     	; 0x5902 <vfprintf+0x374>
    58f6:	80 e3       	ldi	r24, 0x30	; 48
    58f8:	90 e0       	ldi	r25, 0x00	; 0
    58fa:	b6 01       	movw	r22, r12
    58fc:	0e 94 c9 2c 	call	0x5992	; 0x5992 <fputc>
    5900:	ea 94       	dec	r14
    5902:	7e 14       	cp	r7, r14
    5904:	c0 f3       	brcs	.-16     	; 0x58f6 <vfprintf+0x368>
    5906:	7a 94       	dec	r7
    5908:	f4 01       	movw	r30, r8
    590a:	e7 0d       	add	r30, r7
    590c:	f1 1d       	adc	r31, r1
    590e:	80 81       	ld	r24, Z
    5910:	90 e0       	ldi	r25, 0x00	; 0
    5912:	b6 01       	movw	r22, r12
    5914:	0e 94 c9 2c 	call	0x5992	; 0x5992 <fputc>
    5918:	77 20       	and	r7, r7
    591a:	a9 f7       	brne	.-22     	; 0x5906 <vfprintf+0x378>
    591c:	06 c0       	rjmp	.+12     	; 0x592a <vfprintf+0x39c>
    591e:	80 e2       	ldi	r24, 0x20	; 32
    5920:	90 e0       	ldi	r25, 0x00	; 0
    5922:	b6 01       	movw	r22, r12
    5924:	0e 94 c9 2c 	call	0x5992	; 0x5992 <fputc>
    5928:	fa 94       	dec	r15
    592a:	ff 20       	and	r15, r15
    592c:	c1 f7       	brne	.-16     	; 0x591e <vfprintf+0x390>
    592e:	47 ce       	rjmp	.-882    	; 0x55be <vfprintf+0x30>
    5930:	f6 01       	movw	r30, r12
    5932:	26 81       	ldd	r18, Z+6	; 0x06
    5934:	37 81       	ldd	r19, Z+7	; 0x07
    5936:	c9 01       	movw	r24, r18
    5938:	2c 96       	adiw	r28, 0x0c	; 12
    593a:	e1 e1       	ldi	r30, 0x11	; 17
    593c:	0c 94 0f 27 	jmp	0x4e1e	; 0x4e1e <__epilogue_restores__+0x2>

00005940 <__ctype_isfalse>:
    5940:	99 27       	eor	r25, r25
    5942:	88 27       	eor	r24, r24

00005944 <__ctype_istrue>:
    5944:	08 95       	ret

00005946 <strnlen_P>:
    5946:	fc 01       	movw	r30, r24
    5948:	05 90       	lpm	r0, Z+
    594a:	61 50       	subi	r22, 0x01	; 1
    594c:	70 40       	sbci	r23, 0x00	; 0
    594e:	01 10       	cpse	r0, r1
    5950:	d8 f7       	brcc	.-10     	; 0x5948 <strnlen_P+0x2>
    5952:	80 95       	com	r24
    5954:	90 95       	com	r25
    5956:	8e 0f       	add	r24, r30
    5958:	9f 1f       	adc	r25, r31
    595a:	08 95       	ret

0000595c <strnlen>:
    595c:	fc 01       	movw	r30, r24
    595e:	61 50       	subi	r22, 0x01	; 1
    5960:	70 40       	sbci	r23, 0x00	; 0
    5962:	01 90       	ld	r0, Z+
    5964:	01 10       	cpse	r0, r1
    5966:	d8 f7       	brcc	.-10     	; 0x595e <strnlen+0x2>
    5968:	80 95       	com	r24
    596a:	90 95       	com	r25
    596c:	8e 0f       	add	r24, r30
    596e:	9f 1f       	adc	r25, r31
    5970:	08 95       	ret

00005972 <strrev>:
    5972:	dc 01       	movw	r26, r24
    5974:	fc 01       	movw	r30, r24
    5976:	67 2f       	mov	r22, r23
    5978:	71 91       	ld	r23, Z+
    597a:	77 23       	and	r23, r23
    597c:	e1 f7       	brne	.-8      	; 0x5976 <strrev+0x4>
    597e:	32 97       	sbiw	r30, 0x02	; 2
    5980:	04 c0       	rjmp	.+8      	; 0x598a <strrev+0x18>
    5982:	7c 91       	ld	r23, X
    5984:	6d 93       	st	X+, r22
    5986:	70 83       	st	Z, r23
    5988:	62 91       	ld	r22, -Z
    598a:	ae 17       	cp	r26, r30
    598c:	bf 07       	cpc	r27, r31
    598e:	c8 f3       	brcs	.-14     	; 0x5982 <strrev+0x10>
    5990:	08 95       	ret

00005992 <fputc>:
    5992:	0f 93       	push	r16
    5994:	1f 93       	push	r17
    5996:	cf 93       	push	r28
    5998:	df 93       	push	r29
    599a:	8c 01       	movw	r16, r24
    599c:	eb 01       	movw	r28, r22
    599e:	8b 81       	ldd	r24, Y+3	; 0x03
    59a0:	81 ff       	sbrs	r24, 1
    59a2:	1b c0       	rjmp	.+54     	; 0x59da <fputc+0x48>
    59a4:	82 ff       	sbrs	r24, 2
    59a6:	0d c0       	rjmp	.+26     	; 0x59c2 <fputc+0x30>
    59a8:	2e 81       	ldd	r18, Y+6	; 0x06
    59aa:	3f 81       	ldd	r19, Y+7	; 0x07
    59ac:	8c 81       	ldd	r24, Y+4	; 0x04
    59ae:	9d 81       	ldd	r25, Y+5	; 0x05
    59b0:	28 17       	cp	r18, r24
    59b2:	39 07       	cpc	r19, r25
    59b4:	64 f4       	brge	.+24     	; 0x59ce <fputc+0x3c>
    59b6:	e8 81       	ld	r30, Y
    59b8:	f9 81       	ldd	r31, Y+1	; 0x01
    59ba:	01 93       	st	Z+, r16
    59bc:	f9 83       	std	Y+1, r31	; 0x01
    59be:	e8 83       	st	Y, r30
    59c0:	06 c0       	rjmp	.+12     	; 0x59ce <fputc+0x3c>
    59c2:	e8 85       	ldd	r30, Y+8	; 0x08
    59c4:	f9 85       	ldd	r31, Y+9	; 0x09
    59c6:	80 2f       	mov	r24, r16
    59c8:	09 95       	icall
    59ca:	00 97       	sbiw	r24, 0x00	; 0
    59cc:	31 f4       	brne	.+12     	; 0x59da <fputc+0x48>
    59ce:	8e 81       	ldd	r24, Y+6	; 0x06
    59d0:	9f 81       	ldd	r25, Y+7	; 0x07
    59d2:	01 96       	adiw	r24, 0x01	; 1
    59d4:	9f 83       	std	Y+7, r25	; 0x07
    59d6:	8e 83       	std	Y+6, r24	; 0x06
    59d8:	02 c0       	rjmp	.+4      	; 0x59de <fputc+0x4c>
    59da:	0f ef       	ldi	r16, 0xFF	; 255
    59dc:	1f ef       	ldi	r17, 0xFF	; 255
    59de:	c8 01       	movw	r24, r16
    59e0:	df 91       	pop	r29
    59e2:	cf 91       	pop	r28
    59e4:	1f 91       	pop	r17
    59e6:	0f 91       	pop	r16
    59e8:	08 95       	ret

000059ea <__ultoa_invert>:
    59ea:	fa 01       	movw	r30, r20
    59ec:	aa 27       	eor	r26, r26
    59ee:	28 30       	cpi	r18, 0x08	; 8
    59f0:	51 f1       	breq	.+84     	; 0x5a46 <__ultoa_invert+0x5c>
    59f2:	20 31       	cpi	r18, 0x10	; 16
    59f4:	81 f1       	breq	.+96     	; 0x5a56 <__ultoa_invert+0x6c>
    59f6:	e8 94       	clt
    59f8:	6f 93       	push	r22
    59fa:	6e 7f       	andi	r22, 0xFE	; 254
    59fc:	6e 5f       	subi	r22, 0xFE	; 254
    59fe:	7f 4f       	sbci	r23, 0xFF	; 255
    5a00:	8f 4f       	sbci	r24, 0xFF	; 255
    5a02:	9f 4f       	sbci	r25, 0xFF	; 255
    5a04:	af 4f       	sbci	r26, 0xFF	; 255
    5a06:	b1 e0       	ldi	r27, 0x01	; 1
    5a08:	3e d0       	rcall	.+124    	; 0x5a86 <__ultoa_invert+0x9c>
    5a0a:	b4 e0       	ldi	r27, 0x04	; 4
    5a0c:	3c d0       	rcall	.+120    	; 0x5a86 <__ultoa_invert+0x9c>
    5a0e:	67 0f       	add	r22, r23
    5a10:	78 1f       	adc	r23, r24
    5a12:	89 1f       	adc	r24, r25
    5a14:	9a 1f       	adc	r25, r26
    5a16:	a1 1d       	adc	r26, r1
    5a18:	68 0f       	add	r22, r24
    5a1a:	79 1f       	adc	r23, r25
    5a1c:	8a 1f       	adc	r24, r26
    5a1e:	91 1d       	adc	r25, r1
    5a20:	a1 1d       	adc	r26, r1
    5a22:	6a 0f       	add	r22, r26
    5a24:	71 1d       	adc	r23, r1
    5a26:	81 1d       	adc	r24, r1
    5a28:	91 1d       	adc	r25, r1
    5a2a:	a1 1d       	adc	r26, r1
    5a2c:	20 d0       	rcall	.+64     	; 0x5a6e <__ultoa_invert+0x84>
    5a2e:	09 f4       	brne	.+2      	; 0x5a32 <__ultoa_invert+0x48>
    5a30:	68 94       	set
    5a32:	3f 91       	pop	r19
    5a34:	2a e0       	ldi	r18, 0x0A	; 10
    5a36:	26 9f       	mul	r18, r22
    5a38:	11 24       	eor	r1, r1
    5a3a:	30 19       	sub	r19, r0
    5a3c:	30 5d       	subi	r19, 0xD0	; 208
    5a3e:	31 93       	st	Z+, r19
    5a40:	de f6       	brtc	.-74     	; 0x59f8 <__ultoa_invert+0xe>
    5a42:	cf 01       	movw	r24, r30
    5a44:	08 95       	ret
    5a46:	46 2f       	mov	r20, r22
    5a48:	47 70       	andi	r20, 0x07	; 7
    5a4a:	40 5d       	subi	r20, 0xD0	; 208
    5a4c:	41 93       	st	Z+, r20
    5a4e:	b3 e0       	ldi	r27, 0x03	; 3
    5a50:	0f d0       	rcall	.+30     	; 0x5a70 <__ultoa_invert+0x86>
    5a52:	c9 f7       	brne	.-14     	; 0x5a46 <__ultoa_invert+0x5c>
    5a54:	f6 cf       	rjmp	.-20     	; 0x5a42 <__ultoa_invert+0x58>
    5a56:	46 2f       	mov	r20, r22
    5a58:	4f 70       	andi	r20, 0x0F	; 15
    5a5a:	40 5d       	subi	r20, 0xD0	; 208
    5a5c:	4a 33       	cpi	r20, 0x3A	; 58
    5a5e:	18 f0       	brcs	.+6      	; 0x5a66 <__ultoa_invert+0x7c>
    5a60:	49 5d       	subi	r20, 0xD9	; 217
    5a62:	31 fd       	sbrc	r19, 1
    5a64:	40 52       	subi	r20, 0x20	; 32
    5a66:	41 93       	st	Z+, r20
    5a68:	02 d0       	rcall	.+4      	; 0x5a6e <__ultoa_invert+0x84>
    5a6a:	a9 f7       	brne	.-22     	; 0x5a56 <__ultoa_invert+0x6c>
    5a6c:	ea cf       	rjmp	.-44     	; 0x5a42 <__ultoa_invert+0x58>
    5a6e:	b4 e0       	ldi	r27, 0x04	; 4
    5a70:	a6 95       	lsr	r26
    5a72:	97 95       	ror	r25
    5a74:	87 95       	ror	r24
    5a76:	77 95       	ror	r23
    5a78:	67 95       	ror	r22
    5a7a:	ba 95       	dec	r27
    5a7c:	c9 f7       	brne	.-14     	; 0x5a70 <__ultoa_invert+0x86>
    5a7e:	00 97       	sbiw	r24, 0x00	; 0
    5a80:	61 05       	cpc	r22, r1
    5a82:	71 05       	cpc	r23, r1
    5a84:	08 95       	ret
    5a86:	9b 01       	movw	r18, r22
    5a88:	ac 01       	movw	r20, r24
    5a8a:	0a 2e       	mov	r0, r26
    5a8c:	06 94       	lsr	r0
    5a8e:	57 95       	ror	r21
    5a90:	47 95       	ror	r20
    5a92:	37 95       	ror	r19
    5a94:	27 95       	ror	r18
    5a96:	ba 95       	dec	r27
    5a98:	c9 f7       	brne	.-14     	; 0x5a8c <__ultoa_invert+0xa2>
    5a9a:	62 0f       	add	r22, r18
    5a9c:	73 1f       	adc	r23, r19
    5a9e:	84 1f       	adc	r24, r20
    5aa0:	95 1f       	adc	r25, r21
    5aa2:	a0 1d       	adc	r26, r0
    5aa4:	08 95       	ret

00005aa6 <__do_global_dtors>:
    5aa6:	13 e0       	ldi	r17, 0x03	; 3
    5aa8:	c4 ee       	ldi	r28, 0xE4	; 228
    5aaa:	d3 e0       	ldi	r29, 0x03	; 3
    5aac:	04 c0       	rjmp	.+8      	; 0x5ab6 <__do_global_dtors+0x10>
    5aae:	fe 01       	movw	r30, r28
    5ab0:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__tablejump__>
    5ab4:	22 96       	adiw	r28, 0x02	; 2
    5ab6:	c6 3e       	cpi	r28, 0xE6	; 230
    5ab8:	d1 07       	cpc	r29, r17
    5aba:	c9 f7       	brne	.-14     	; 0x5aae <__do_global_dtors+0x8>
    5abc:	f8 94       	cli

00005abe <__stop_program>:
    5abe:	ff cf       	rjmp	.-2      	; 0x5abe <__stop_program>
