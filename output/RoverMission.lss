
RoverMission.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000192  00800100  00005f94  00006028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005f94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000031b  00800292  00800292  000061ba  2**0
                  ALLOC
  3 .stab         00001f38  00000000  00000000  000061bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008a9  00000000  00000000  000080f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004d0  00000000  00000000  0000899d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000150c  00000000  00000000  00008e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000e024  00000000  00000000  0000a379  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003662  00000000  00000000  0001839d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006599  00000000  00000000  0001b9ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000e60  00000000  00000000  00021f98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000020e2  00000000  00000000  00022df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000052fe  00000000  00000000  00024eda  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000698  00000000  00000000  0002a1d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <__dtors_end>
       4:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
       8:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
       c:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
      10:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
      14:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
      18:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
      1c:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
      20:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
      24:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
      28:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
      2c:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
      30:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
      34:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
      38:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
      3c:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
      40:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__vector_16>
      44:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
      48:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__vector_18>
      4c:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
      50:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
      54:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
      58:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
      5c:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
      60:	0c 94 ae 1c 	jmp	0x395c	; 0x395c <__vector_24>
      64:	0c 94 57 05 	jmp	0xaae	; 0xaae <__bad_interrupt>
      68:	50 1d       	adc	r21, r0
      6a:	fe 1c       	adc	r15, r14
      6c:	fe 1c       	adc	r15, r14
      6e:	fe 1c       	adc	r15, r14
      70:	fe 1c       	adc	r15, r14
      72:	fe 1c       	adc	r15, r14
      74:	fe 1c       	adc	r15, r14
      76:	fe 1c       	adc	r15, r14
      78:	5a 1d       	adc	r21, r10
      7a:	fe 1c       	adc	r15, r14
      7c:	fe 1c       	adc	r15, r14
      7e:	fe 1c       	adc	r15, r14
      80:	fe 1c       	adc	r15, r14
      82:	fe 1c       	adc	r15, r14
      84:	fe 1c       	adc	r15, r14
      86:	fe 1c       	adc	r15, r14
      88:	5a 1d       	adc	r21, r10
      8a:	fe 1c       	adc	r15, r14
      8c:	fe 1c       	adc	r15, r14
      8e:	fe 1c       	adc	r15, r14
      90:	fe 1c       	adc	r15, r14
      92:	fe 1c       	adc	r15, r14
      94:	fe 1c       	adc	r15, r14
      96:	fe 1c       	adc	r15, r14
      98:	62 1d       	adc	r22, r2
      9a:	fe 1c       	adc	r15, r14
      9c:	fe 1c       	adc	r15, r14
      9e:	fe 1c       	adc	r15, r14
      a0:	fe 1c       	adc	r15, r14
      a2:	fe 1c       	adc	r15, r14
      a4:	fe 1c       	adc	r15, r14
      a6:	fe 1c       	adc	r15, r14
      a8:	71 1d       	adc	r23, r1
      aa:	fe 1c       	adc	r15, r14
      ac:	fe 1c       	adc	r15, r14
      ae:	fe 1c       	adc	r15, r14
      b0:	fe 1c       	adc	r15, r14
      b2:	fe 1c       	adc	r15, r14
      b4:	fe 1c       	adc	r15, r14
      b6:	fe 1c       	adc	r15, r14
      b8:	62 1d       	adc	r22, r2
      ba:	fe 1c       	adc	r15, r14
      bc:	fe 1c       	adc	r15, r14
      be:	fe 1c       	adc	r15, r14
      c0:	fe 1c       	adc	r15, r14
      c2:	fe 1c       	adc	r15, r14
      c4:	fe 1c       	adc	r15, r14
      c6:	fe 1c       	adc	r15, r14
      c8:	9c 1d       	adc	r25, r12
      ca:	fe 1c       	adc	r15, r14
      cc:	fe 1c       	adc	r15, r14
      ce:	fe 1c       	adc	r15, r14
      d0:	fe 1c       	adc	r15, r14
      d2:	fe 1c       	adc	r15, r14
      d4:	fe 1c       	adc	r15, r14
      d6:	fe 1c       	adc	r15, r14
      d8:	a7 1d       	adc	r26, r7
      da:	fe 1c       	adc	r15, r14
      dc:	fe 1c       	adc	r15, r14
      de:	fe 1c       	adc	r15, r14
      e0:	fe 1c       	adc	r15, r14
      e2:	fe 1c       	adc	r15, r14
      e4:	fe 1c       	adc	r15, r14
      e6:	fe 1c       	adc	r15, r14
      e8:	24 1d       	adc	r18, r4
      ea:	fe 1c       	adc	r15, r14
      ec:	fe 1c       	adc	r15, r14
      ee:	fe 1c       	adc	r15, r14
      f0:	fe 1c       	adc	r15, r14
      f2:	fe 1c       	adc	r15, r14
      f4:	fe 1c       	adc	r15, r14
      f6:	fe 1c       	adc	r15, r14
      f8:	37 1d       	adc	r19, r7
      fa:	fe 1c       	adc	r15, r14
      fc:	fe 1c       	adc	r15, r14
      fe:	fe 1c       	adc	r15, r14
     100:	fe 1c       	adc	r15, r14
     102:	fe 1c       	adc	r15, r14
     104:	fe 1c       	adc	r15, r14
     106:	fe 1c       	adc	r15, r14
     108:	18 1d       	adc	r17, r8
     10a:	fe 1c       	adc	r15, r14
     10c:	fe 1c       	adc	r15, r14
     10e:	fe 1c       	adc	r15, r14
     110:	fe 1c       	adc	r15, r14
     112:	fe 1c       	adc	r15, r14
     114:	fe 1c       	adc	r15, r14
     116:	fe 1c       	adc	r15, r14
     118:	2b 1d       	adc	r18, r11
     11a:	fe 1c       	adc	r15, r14
     11c:	fe 1c       	adc	r15, r14
     11e:	fe 1c       	adc	r15, r14
     120:	fe 1c       	adc	r15, r14
     122:	fe 1c       	adc	r15, r14
     124:	fe 1c       	adc	r15, r14
     126:	fe 1c       	adc	r15, r14
     128:	47 1d       	adc	r20, r7
     12a:	fe 1c       	adc	r15, r14
     12c:	fe 1c       	adc	r15, r14
     12e:	fe 1c       	adc	r15, r14
     130:	fe 1c       	adc	r15, r14
     132:	fe 1c       	adc	r15, r14
     134:	fe 1c       	adc	r15, r14
     136:	fe 1c       	adc	r15, r14
     138:	47 1d       	adc	r20, r7
     13a:	fe 1c       	adc	r15, r14
     13c:	fe 1c       	adc	r15, r14
     13e:	fe 1c       	adc	r15, r14
     140:	fe 1c       	adc	r15, r14
     142:	fe 1c       	adc	r15, r14
     144:	fe 1c       	adc	r15, r14
     146:	fe 1c       	adc	r15, r14
     148:	47 1d       	adc	r20, r7
     14a:	fe 1c       	adc	r15, r14
     14c:	fe 1c       	adc	r15, r14
     14e:	fe 1c       	adc	r15, r14
     150:	fe 1c       	adc	r15, r14
     152:	fe 1c       	adc	r15, r14
     154:	fe 1c       	adc	r15, r14
     156:	fe 1c       	adc	r15, r14
     158:	47 1d       	adc	r20, r7
     15a:	fe 1c       	adc	r15, r14
     15c:	fe 1c       	adc	r15, r14
     15e:	fe 1c       	adc	r15, r14
     160:	fe 1c       	adc	r15, r14
     162:	fe 1c       	adc	r15, r14
     164:	fe 1c       	adc	r15, r14
     166:	fe 1c       	adc	r15, r14
     168:	0f 1d       	adc	r16, r15
     16a:	fe 1c       	adc	r15, r14
     16c:	fe 1c       	adc	r15, r14
     16e:	fe 1c       	adc	r15, r14
     170:	fe 1c       	adc	r15, r14
     172:	fe 1c       	adc	r15, r14
     174:	fe 1c       	adc	r15, r14
     176:	fe 1c       	adc	r15, r14
     178:	14 1d       	adc	r17, r4
     17a:	fe 1c       	adc	r15, r14
     17c:	fe 1c       	adc	r15, r14
     17e:	fe 1c       	adc	r15, r14
     180:	fe 1c       	adc	r15, r14
     182:	fe 1c       	adc	r15, r14
     184:	fe 1c       	adc	r15, r14
     186:	fe 1c       	adc	r15, r14
     188:	0f 1d       	adc	r16, r15
     18a:	fe 1c       	adc	r15, r14
     18c:	fe 1c       	adc	r15, r14
     18e:	fe 1c       	adc	r15, r14
     190:	fe 1c       	adc	r15, r14
     192:	fe 1c       	adc	r15, r14
     194:	fe 1c       	adc	r15, r14
     196:	fe 1c       	adc	r15, r14
     198:	14 1d       	adc	r17, r4
     19a:	fe 1c       	adc	r15, r14
     19c:	fe 1c       	adc	r15, r14
     19e:	fe 1c       	adc	r15, r14
     1a0:	fe 1c       	adc	r15, r14
     1a2:	fe 1c       	adc	r15, r14
     1a4:	fe 1c       	adc	r15, r14
     1a6:	fe 1c       	adc	r15, r14
     1a8:	7c 1d       	adc	r23, r12
     1aa:	fe 1c       	adc	r15, r14
     1ac:	fe 1c       	adc	r15, r14
     1ae:	fe 1c       	adc	r15, r14
     1b0:	fe 1c       	adc	r15, r14
     1b2:	fe 1c       	adc	r15, r14
     1b4:	fe 1c       	adc	r15, r14
     1b6:	fe 1c       	adc	r15, r14
     1b8:	d4 1c       	adc	r13, r4
     1ba:	fe 1c       	adc	r15, r14
     1bc:	fe 1c       	adc	r15, r14
     1be:	fe 1c       	adc	r15, r14
     1c0:	fe 1c       	adc	r15, r14
     1c2:	fe 1c       	adc	r15, r14
     1c4:	fe 1c       	adc	r15, r14
     1c6:	fe 1c       	adc	r15, r14
     1c8:	d4 1c       	adc	r13, r4
     1ca:	fe 1c       	adc	r15, r14
     1cc:	fe 1c       	adc	r15, r14
     1ce:	fe 1c       	adc	r15, r14
     1d0:	fe 1c       	adc	r15, r14
     1d2:	fe 1c       	adc	r15, r14
     1d4:	fe 1c       	adc	r15, r14
     1d6:	fe 1c       	adc	r15, r14
     1d8:	e9 1c       	adc	r14, r9
     1da:	fe 1c       	adc	r15, r14
     1dc:	fe 1c       	adc	r15, r14
     1de:	fe 1c       	adc	r15, r14
     1e0:	fe 1c       	adc	r15, r14
     1e2:	fe 1c       	adc	r15, r14
     1e4:	fe 1c       	adc	r15, r14
     1e6:	fe 1c       	adc	r15, r14
     1e8:	41 1d       	adc	r20, r1
     1ea:	fe 1c       	adc	r15, r14
     1ec:	fe 1c       	adc	r15, r14
     1ee:	fe 1c       	adc	r15, r14
     1f0:	fe 1c       	adc	r15, r14
     1f2:	fe 1c       	adc	r15, r14
     1f4:	fe 1c       	adc	r15, r14
     1f6:	fe 1c       	adc	r15, r14
     1f8:	41 1d       	adc	r20, r1

000001fa <_ZL15long_range_data>:
     1fa:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     20a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     21a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     22a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     23a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     24a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     25a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     26a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     27a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     28a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     29a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     2aa:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     2ba:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     2ca:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     2da:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     2ea:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     2fa:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     30a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     31a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     32a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     33a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     34a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     35a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     36a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     37a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     38a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     39a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     3aa:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     3ba:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     3ca:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     3da:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     3ea:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     3fa:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     40a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     41a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     42a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     43a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     44a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     45a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     46a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     47a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     48a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     49a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     4aa:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     4ba:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     4ca:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     4da:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     4ea:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     4fa:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     50a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     51a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     52a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     53a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     54a:	26 02 26 02 26 02 26 02 26 02 26 02 26 02 26 02     &.&.&.&.&.&.&.&.
     55a:	26 02 26 02 26 02 26 02 26 02 26 02 1d 02 18 02     &.&.&.&.&.&.....
     56a:	14 02 0f 02 0a 02 06 02 02 02 fd 01 f9 01 f5 01     ................
     57a:	f1 01 ec 01 e8 01 e4 01 e1 01 dd 01 d9 01 d5 01     ................
     58a:	d2 01 ce 01 ca 01 c7 01 c3 01 c0 01 bd 01 b9 01     ................
     59a:	b6 01 b3 01 b0 01 ad 01 aa 01 a7 01 a4 01 a1 01     ................
     5aa:	9e 01 9b 01 98 01 95 01 92 01 90 01 8d 01 8a 01     ................
     5ba:	88 01 85 01 83 01 80 01 7d 01 7b 01 79 01 76 01     ........}.{.y.v.
     5ca:	74 01 71 01 6f 01 6d 01 6b 01 68 01 66 01 64 01     t.q.o.m.k.h.f.d.
     5da:	62 01 60 01 5e 01 5b 01 59 01 57 01 55 01 53 01     b.`.^.[.Y.W.U.S.
     5ea:	51 01 4f 01 4d 01 4c 01 4a 01 48 01 46 01 44 01     Q.O.M.L.J.H.F.D.
     5fa:	42 01 41 01 3f 01 3d 01 3b 01 3a 01 38 01 36 01     B.A.?.=.;.:.8.6.
     60a:	34 01 33 01 31 01 30 01 2e 01 2c 01 2b 01 29 01     4.3.1.0...,.+.).
     61a:	28 01 26 01 25 01 23 01 22 01 20 01 1f 01 1d 01     (.&.%.#.". .....
     62a:	1c 01 1b 01 19 01 18 01 16 01 15 01 14 01 12 01     ................
     63a:	11 01 10 01 0e 01 0d 01 0c 01 0b 01 09 01 08 01     ................
     64a:	07 01 06 01 04 01 03 01 02 01 01 01 00 01 ff 00     ................
     65a:	fd 00 fc 00 fb 00 fa 00 f9 00 f8 00 f7 00 f6 00     ................
     66a:	f5 00 f3 00 f2 00 f1 00 f0 00 ef 00 ee 00 ed 00     ................
     67a:	ec 00 eb 00 ea 00 e9 00 e8 00 e7 00 e6 00 e5 00     ................
     68a:	e4 00 e3 00 e3 00 e2 00 e1 00 e0 00 df 00 de 00     ................
     69a:	dd 00 dc 00 db 00 da 00 da 00 d9 00 d8 00 d7 00     ................
     6aa:	d6 00 d5 00 d5 00 d4 00 d3 00 d2 00 d1 00 d0 00     ................
     6ba:	d0 00 cf 00 ce 00 cd 00 cd 00 cc 00 cb 00 ca 00     ................
     6ca:	ca 00 c9 00 c8 00 c7 00 c7 00 c6 00 c5 00 c4 00     ................
     6da:	c4 00 c3 00 c2 00 c2 00 c1 00 c0 00 bf 00 bf 00     ................
     6ea:	be 00 bd 00 bd 00 bc 00 bb 00 bb 00 ba 00 ba 00     ................
     6fa:	b9 00 b8 00 b8 00 b7 00 b6 00 b6 00 b5 00 b5 00     ................
     70a:	b4 00 b3 00 b3 00 b2 00 b1 00 b1 00 b0 00 b0 00     ................
     71a:	af 00 af 00 ae 00 ad 00 ad 00 ac 00 ac 00 ab 00     ................
     72a:	ab 00 aa 00 aa 00 a9 00 a8 00 a8 00 a7 00 a7 00     ................
     73a:	a6 00 a6 00 a5 00 a5 00 a4 00 a4 00 a3 00 a3 00     ................
     74a:	a2 00 a2 00 a1 00 a1 00 a0 00 a0 00 9f 00 9f 00     ................
     75a:	9e 00 9e 00 9d 00 9d 00 9c 00 9c 00 9b 00 9b 00     ................
     76a:	9a 00 9a 00 9a 00 99 00 99 00 98 00 98 00 97 00     ................
     77a:	97 00 96 00 96 00 95 00 95 00 95 00 94 00 94 00     ................
     78a:	93 00 93 00 92 00 92 00 92 00 91 00 91 00 90 00     ................
     79a:	90 00 90 00 8f 00 8f 00 8e 00 8e 00 8e 00 8d 00     ................
     7aa:	8d 00 8c 00 8c 00 8c 00 8b 00 8b 00 8a 00 8a 00     ................
     7ba:	8a 00 89 00 89 00 89 00 88 00 88 00 88 00 87 00     ................
     7ca:	87 00 86 00 86 00 86 00 85 00 85 00 85 00 84 00     ................
     7da:	84 00 84 00 83 00 83 00 83 00 82 00 82 00 82 00     ................
     7ea:	81 00 81 00 81 00 80 00 80 00 80 00 7f 00 7f 00     ................
     7fa:	7f 00 7e 00 7e 00 7e 00 7d 00 7d 00 7d 00 7c 00     ..~.~.~.}.}.}.|.
     80a:	7c 00 7c 00 7b 00 7b 00 7b 00 7a 00 7a 00 7a 00     |.|.{.{.{.z.z.z.
     81a:	7a 00 79 00 79 00 79 00 78 00 78 00 78 00 77 00     z.y.y.y.x.x.x.w.
     82a:	77 00 77 00 77 00 76 00 76 00 76 00 75 00 75 00     w.w.w.v.v.v.u.u.
     83a:	75 00 75 00 74 00 74 00 74 00 73 00 73 00 73 00     u.u.t.t.t.s.s.s.
     84a:	73 00 72 00 72 00 72 00 72 00 71 00 71 00 71 00     s.r.r.r.r.q.q.q.
     85a:	70 00 70 00 70 00 70 00 6f 00 6f 00 6f 00 6f 00     p.p.p.p.o.o.o.o.
     86a:	6e 00 6e 00 6e 00 6e 00 6d 00 6d 00 6d 00 6d 00     n.n.n.n.m.m.m.m.
     87a:	6c 00 6c 00 6c 00 6c 00 6b 00 6b 00 6b 00 6b 00     l.l.l.l.k.k.k.k.
     88a:	6a 00 6a 00 6a 00 6a 00 69 00 69 00 69 00 69 00     j.j.j.j.i.i.i.i.
     89a:	69 00 68 00 68 00 68 00 68 00 67 00 67 00 67 00     i.h.h.h.h.g.g.g.
     8aa:	67 00 66 00 66 00 66 00 66 00 66 00 65 00 65 00     g.f.f.f.f.f.e.e.
     8ba:	65 00 65 00 64 00 64 00 64 00 64 00 64 00 64 00     e.e.d.d.d.d.d.d.
     8ca:	64 00 64 00 64 00 64 00 64 00 64 00 64 00 64 00     d.d.d.d.d.d.d.d.
     8da:	64 00 64 00 64 00 64 00 64 00 64 00 64 00 64 00     d.d.d.d.d.d.d.d.
     8ea:	64 00 64 00 64 00 64 00 64 00 64 00 64 00 64 00     d.d.d.d.d.d.d.d.
     8fa:	64 00 64 00 64 00 64 00 64 00 64 00 64 00 64 00     d.d.d.d.d.d.d.d.
     90a:	64 00 64 00 64 00 64 00 64 00 64 00 64 00 64 00     d.d.d.d.d.d.d.d.
     91a:	64 00 64 00 64 00 64 00 64 00 64 00 64 00 64 00     d.d.d.d.d.d.d.d.
     92a:	64 00 64 00 64 00 64 00 64 00 64 00 64 00 64 00     d.d.d.d.d.d.d.d.
     93a:	64 00 64 00 64 00 64 00 64 00 64 00 64 00 64 00     d.d.d.d.d.d.d.d.
     94a:	64 00 64 00 64 00 64 00 64 00 64 00 64 00 64 00     d.d.d.d.d.d.d.d.
     95a:	64 00 64 00 64 00 64 00 64 00 64 00 64 00 64 00     d.d.d.d.d.d.d.d.
     96a:	64 00 64 00 64 00 64 00 64 00 64 00 64 00 64 00     d.d.d.d.d.d.d.d.
     97a:	64 00 64 00 64 00 64 00 64 00 64 00 64 00 64 00     d.d.d.d.d.d.d.d.
     98a:	64 00 64 00 64 00 64 00 64 00 64 00 64 00 64 00     d.d.d.d.d.d.d.d.
     99a:	64 00 64 00 64 00 64 00 64 00 64 00 64 00 64 00     d.d.d.d.d.d.d.d.
     9aa:	64 00 64 00 64 00 64 00 64 00 64 00 64 00 64 00     d.d.d.d.d.d.d.d.
     9ba:	64 00 64 00 64 00 64 00 64 00 64 00 64 00 64 00     d.d.d.d.d.d.d.d.
     9ca:	64 00 64 00 64 00 64 00 64 00 64 00 64 00 64 00     d.d.d.d.d.d.d.d.
     9da:	64 00 64 00 64 00 64 00 64 00 64 00 64 00 64 00     d.d.d.d.d.d.d.d.
     9ea:	64 00 64 00 64 00 64 00 64 00 64 00 64 00 64 00     d.d.d.d.d.d.d.d.

000009fa <port_to_mode_PGM>:
     9fa:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000a04 <port_to_output_PGM>:
     a04:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000a0e <port_to_input_PGM>:
     a0e:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000a18 <digital_pin_to_port_PGM>:
     a18:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     a28:	03 03 03 03                                         ....

00000a2c <digital_pin_to_bit_mask_PGM>:
     a2c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     a3c:	04 08 10 20                                         ... 

00000a40 <digital_pin_to_timer_PGM>:
     a40:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     a50:	00 00 00 00                                         ....

00000a54 <__ctors_start>:
     a54:	d4 24       	eor	r13, r4
     a56:	21 28       	or	r2, r1
     a58:	91 05       	cpc	r25, r1
     a5a:	20 0c       	add	r2, r0

00000a5c <__ctors_end>:
     a5c:	26 28       	or	r2, r6

00000a5e <__dtors_end>:
     a5e:	11 24       	eor	r1, r1
     a60:	1f be       	out	0x3f, r1	; 63
     a62:	cf ef       	ldi	r28, 0xFF	; 255
     a64:	d8 e0       	ldi	r29, 0x08	; 8
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	cd bf       	out	0x3d, r28	; 61

00000a6a <__do_copy_data>:
     a6a:	12 e0       	ldi	r17, 0x02	; 2
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b1 e0       	ldi	r27, 0x01	; 1
     a70:	e4 e9       	ldi	r30, 0x94	; 148
     a72:	ff e5       	ldi	r31, 0x5F	; 95
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <__do_copy_data+0x10>
     a76:	05 90       	lpm	r0, Z+
     a78:	0d 92       	st	X+, r0
     a7a:	a2 39       	cpi	r26, 0x92	; 146
     a7c:	b1 07       	cpc	r27, r17
     a7e:	d9 f7       	brne	.-10     	; 0xa76 <__do_copy_data+0xc>

00000a80 <__do_clear_bss>:
     a80:	15 e0       	ldi	r17, 0x05	; 5
     a82:	a2 e9       	ldi	r26, 0x92	; 146
     a84:	b2 e0       	ldi	r27, 0x02	; 2
     a86:	01 c0       	rjmp	.+2      	; 0xa8a <.do_clear_bss_start>

00000a88 <.do_clear_bss_loop>:
     a88:	1d 92       	st	X+, r1

00000a8a <.do_clear_bss_start>:
     a8a:	ad 3a       	cpi	r26, 0xAD	; 173
     a8c:	b1 07       	cpc	r27, r17
     a8e:	e1 f7       	brne	.-8      	; 0xa88 <.do_clear_bss_loop>

00000a90 <__do_global_ctors>:
     a90:	1a e0       	ldi	r17, 0x0A	; 10
     a92:	cc e5       	ldi	r28, 0x5C	; 92
     a94:	da e0       	ldi	r29, 0x0A	; 10
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__do_global_ctors+0x10>
     a98:	22 97       	sbiw	r28, 0x02	; 2
     a9a:	fe 01       	movw	r30, r28
     a9c:	0e 94 95 29 	call	0x532a	; 0x532a <__tablejump__>
     aa0:	c4 35       	cpi	r28, 0x54	; 84
     aa2:	d1 07       	cpc	r29, r17
     aa4:	c9 f7       	brne	.-14     	; 0xa98 <__do_global_ctors+0x8>
     aa6:	0e 94 02 25 	call	0x4a04	; 0x4a04 <main>
     aaa:	0c 94 bd 2f 	jmp	0x5f7a	; 0x5f7a <__do_global_dtors>

00000aae <__bad_interrupt>:
     aae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000ab2 <_ZN17AFMotorControllerC2Ev>:
#elif (MICROSTEPS == 16)
uint8_t microstepcurve[] = {0, 25, 50, 74, 98, 120, 141, 162, 180, 197, 212, 225, 236, 244, 250, 253, 255};
#endif

AFMotorController::AFMotorController(void) {
}
     ab2:	08 95       	ret

00000ab4 <_ZN17AFMotorControllerC1Ev>:
     ab4:	08 95       	ret

00000ab6 <_ZN10AF_DCMotor8setSpeedEh>:
    break;
  }
}

void AF_DCMotor::setSpeed(uint8_t speed) {
  switch (motornum) {
     ab6:	fc 01       	movw	r30, r24
     ab8:	80 81       	ld	r24, Z
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	71 f0       	breq	.+28     	; 0xada <_ZN10AF_DCMotor8setSpeedEh+0x24>
     abe:	83 30       	cpi	r24, 0x03	; 3
     ac0:	28 f0       	brcs	.+10     	; 0xacc <_ZN10AF_DCMotor8setSpeedEh+0x16>
     ac2:	83 30       	cpi	r24, 0x03	; 3
     ac4:	69 f0       	breq	.+26     	; 0xae0 <_ZN10AF_DCMotor8setSpeedEh+0x2a>
     ac6:	84 30       	cpi	r24, 0x04	; 4
     ac8:	31 f0       	breq	.+12     	; 0xad6 <_ZN10AF_DCMotor8setSpeedEh+0x20>
     aca:	08 95       	ret
     acc:	81 30       	cpi	r24, 0x01	; 1
     ace:	e9 f7       	brne	.-6      	; 0xaca <_ZN10AF_DCMotor8setSpeedEh+0x14>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
     ad0:	60 93 b3 00 	sts	0x00B3, r22
}

void AF_DCMotor::setSpeed(uint8_t speed) {
  switch (motornum) {
  case 1:
    setPWM1(speed); break;
     ad4:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
     ad6:	68 bd       	out	0x28, r22	; 40
     ad8:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
     ada:	60 93 b4 00 	sts	0x00B4, r22
void AF_DCMotor::setSpeed(uint8_t speed) {
  switch (motornum) {
  case 1:
    setPWM1(speed); break;
  case 2:
    setPWM2(speed); break;
     ade:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
     ae0:	67 bd       	out	0x27, r22	; 39
  case 1:
    setPWM1(speed); break;
  case 2:
    setPWM2(speed); break;
  case 3:
    setPWM3(speed); break;
     ae2:	08 95       	ret

00000ae4 <_ZN10AF_Stepper8setSpeedEj>:
    setPWM3(255);
    setPWM4(255);
  }
}

void AF_Stepper::setSpeed(uint16_t rpm) {
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	ec 01       	movw	r28, r24
  uint32_t tmp = 0;
  tmp = revsteps * rpm;
  usperstep = 60000000 / tmp;
     aea:	88 81       	ld	r24, Y
     aec:	99 81       	ldd	r25, Y+1	; 0x01
     aee:	68 9f       	mul	r22, r24
     af0:	90 01       	movw	r18, r0
     af2:	69 9f       	mul	r22, r25
     af4:	30 0d       	add	r19, r0
     af6:	78 9f       	mul	r23, r24
     af8:	30 0d       	add	r19, r0
     afa:	11 24       	eor	r1, r1
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	77 e8       	ldi	r23, 0x87	; 135
     b04:	83 e9       	ldi	r24, 0x93	; 147
     b06:	93 e0       	ldi	r25, 0x03	; 3
     b08:	0e 94 3a 29 	call	0x5274	; 0x5274 <__udivmodsi4>
     b0c:	2b 83       	std	Y+3, r18	; 0x03
     b0e:	3c 83       	std	Y+4, r19	; 0x04
     b10:	4d 83       	std	Y+5, r20	; 0x05
     b12:	5e 83       	std	Y+6, r21	; 0x06
  // wont compile with -O2 or -O3 - see bug http://gcc.gnu.org/bugzilla/show_bug.cgi?id=44245#c5
  //usperstep = 60000000 / ((uint32_t)revsteps * (uint32_t)rpm);
  steppingcounter = 0;
     b14:	1f 82       	std	Y+7, r1	; 0x07
     b16:	18 86       	std	Y+8, r1	; 0x08
     b18:	19 86       	std	Y+9, r1	; 0x09
     b1a:	1a 86       	std	Y+10, r1	; 0x0a
}
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	08 95       	ret

00000b22 <_GLOBAL__I_microstepcurve>:
  }

 
  MC.latch_tx();
  return currentstep;
}
     b22:	08 95       	ret

00000b24 <_ZN17AFMotorController8latch_txEv>:
  //ENABLE_PORT &= ~_BV(ENABLE); // enable the chip outputs!
  digitalWrite(MOTORENABLE, LOW);
}


void AFMotorController::latch_tx(void) {
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
  uint8_t i;

  //LATCH_PORT &= ~_BV(LATCH);
  digitalWrite(MOTORLATCH, LOW);
     b28:	8c e0       	ldi	r24, 0x0C	; 12
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>

  //SER_PORT &= ~_BV(SER);
  digitalWrite(MOTORDATA, LOW);
     b30:	88 e0       	ldi	r24, 0x08	; 8
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
     b38:	c7 e0       	ldi	r28, 0x07	; 7
     b3a:	d0 e0       	ldi	r29, 0x00	; 0
     b3c:	0d c0       	rjmp	.+26     	; 0xb58 <_ZN17AFMotorController8latch_txEv+0x34>
    //CLK_PORT &= ~_BV(CLK);
    digitalWrite(MOTORCLK, LOW);

    if (latch_state & _BV(7-i)) {
      //SER_PORT |= _BV(SER);
      digitalWrite(MOTORDATA, HIGH);
     b3e:	88 e0       	ldi	r24, 0x08	; 8
     b40:	61 e0       	ldi	r22, 0x01	; 1
     b42:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
    } else {
      //SER_PORT &= ~_BV(SER);
      digitalWrite(MOTORDATA, LOW);
    }
    //CLK_PORT |= _BV(CLK);
    digitalWrite(MOTORCLK, HIGH);
     b46:	84 e0       	ldi	r24, 0x04	; 4
     b48:	61 e0       	ldi	r22, 0x01	; 1
     b4a:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
     b4e:	21 97       	sbiw	r28, 0x01	; 1
  digitalWrite(MOTORLATCH, LOW);

  //SER_PORT &= ~_BV(SER);
  digitalWrite(MOTORDATA, LOW);

  for (i=0; i<8; i++) {
     b50:	3f ef       	ldi	r19, 0xFF	; 255
     b52:	cf 3f       	cpi	r28, 0xFF	; 255
     b54:	d3 07       	cpc	r29, r19
     b56:	a1 f0       	breq	.+40     	; 0xb80 <_ZN17AFMotorController8latch_txEv+0x5c>
    //CLK_PORT &= ~_BV(CLK);
    digitalWrite(MOTORCLK, LOW);
     b58:	84 e0       	ldi	r24, 0x04	; 4
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>

    if (latch_state & _BV(7-i)) {
     b60:	80 91 51 04 	lds	r24, 0x0451
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0c 2e       	mov	r0, r28
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <_ZN17AFMotorController8latch_txEv+0x4a>
     b6a:	95 95       	asr	r25
     b6c:	87 95       	ror	r24
     b6e:	0a 94       	dec	r0
     b70:	e2 f7       	brpl	.-8      	; 0xb6a <_ZN17AFMotorController8latch_txEv+0x46>
     b72:	80 fd       	sbrc	r24, 0
     b74:	e4 cf       	rjmp	.-56     	; 0xb3e <_ZN17AFMotorController8latch_txEv+0x1a>
      //SER_PORT |= _BV(SER);
      digitalWrite(MOTORDATA, HIGH);
    } else {
      //SER_PORT &= ~_BV(SER);
      digitalWrite(MOTORDATA, LOW);
     b76:	88 e0       	ldi	r24, 0x08	; 8
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
     b7e:	e3 cf       	rjmp	.-58     	; 0xb46 <_ZN17AFMotorController8latch_txEv+0x22>
    }
    //CLK_PORT |= _BV(CLK);
    digitalWrite(MOTORCLK, HIGH);
  }
  //LATCH_PORT |= _BV(LATCH);
  digitalWrite(MOTORLATCH, HIGH);
     b80:	8c e0       	ldi	r24, 0x0C	; 12
     b82:	61 e0       	ldi	r22, 0x01	; 1
     b84:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
}
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret

00000b8e <_ZN10AF_Stepper7onestepEhh>:
      } 
    }
  }
}

uint8_t AF_Stepper::onestep(uint8_t dir, uint8_t style) {
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	ec 01       	movw	r28, r24
  uint8_t a, b, c, d;
  uint8_t ocrb, ocra;

  ocra = ocrb = 255;

  if (steppernum == 1) {
     b9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	09 f4       	brne	.+2      	; 0xba6 <_ZN10AF_Stepper7onestepEhh+0x18>
     ba4:	71 c0       	rjmp	.+226    	; 0xc88 <_ZN10AF_Stepper7onestepEhh+0xfa>
    a = _BV(MOTOR1_A);
    b = _BV(MOTOR2_A);
    c = _BV(MOTOR1_B);
    d = _BV(MOTOR2_B);
  } else if (steppernum == 2) {
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	49 f0       	breq	.+18     	; 0xbbc <_ZN10AF_Stepper7onestepEhh+0x2e>
     baa:	80 e0       	ldi	r24, 0x00	; 0
  }

 
  MC.latch_tx();
  return currentstep;
}
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	ff 90       	pop	r15
     bb6:	ef 90       	pop	r14
     bb8:	df 90       	pop	r13
     bba:	08 95       	ret
  if (steppernum == 1) {
    a = _BV(MOTOR1_A);
    b = _BV(MOTOR2_A);
    c = _BV(MOTOR1_B);
    d = _BV(MOTOR2_B);
  } else if (steppernum == 2) {
     bbc:	2e e1       	ldi	r18, 0x1E	; 30
     bbe:	91 e2       	ldi	r25, 0x21	; 33
     bc0:	d9 2e       	mov	r13, r25
     bc2:	30 e4       	ldi	r19, 0x40	; 64
     bc4:	50 e8       	ldi	r21, 0x80	; 128
     bc6:	e1 e0       	ldi	r30, 0x01	; 1
     bc8:	f0 e2       	ldi	r31, 0x20	; 32
  } else {
    return 0;
  }

  // next determine what sort of stepping procedure we're up to
  if (style == SINGLE) {
     bca:	41 30       	cpi	r20, 0x01	; 1
     bcc:	01 f1       	breq	.+64     	; 0xc0e <_ZN10AF_Stepper7onestepEhh+0x80>
      }
      else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == DOUBLE) {
     bce:	42 30       	cpi	r20, 0x02	; 2
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <_ZN10AF_Stepper7onestepEhh+0x46>
     bd2:	95 c0       	rjmp	.+298    	; 0xcfe <_ZN10AF_Stepper7onestepEhh+0x170>
	currentstep += MICROSTEPS;
      } else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == INTERLEAVE) {
     bd4:	43 30       	cpi	r20, 0x03	; 3
     bd6:	09 f4       	brne	.+2      	; 0xbda <_ZN10AF_Stepper7onestepEhh+0x4c>
     bd8:	a2 c0       	rjmp	.+324    	; 0xd1e <_ZN10AF_Stepper7onestepEhh+0x190>
     bda:	9b 85       	ldd	r25, Y+11	; 0x0b
    } else {
       currentstep -= MICROSTEPS/2;
    }
  } 

  if (style == MICROSTEP) {
     bdc:	44 30       	cpi	r20, 0x04	; 4
     bde:	21 f5       	brne	.+72     	; 0xc28 <_ZN10AF_Stepper7onestepEhh+0x9a>
    if (dir == FORWARD) {
     be0:	61 30       	cpi	r22, 0x01	; 1
     be2:	09 f4       	brne	.+2      	; 0xbe6 <_ZN10AF_Stepper7onestepEhh+0x58>
     be4:	f3 c0       	rjmp	.+486    	; 0xdcc <_ZN10AF_Stepper7onestepEhh+0x23e>
      currentstep++;
    } else {
      // BACKWARDS
      currentstep--;
     be6:	91 50       	subi	r25, 0x01	; 1
     be8:	9b 87       	std	Y+11, r25	; 0x0b
    }

    currentstep += MICROSTEPS*4;
    currentstep %= MICROSTEPS*4;
     bea:	9f 73       	andi	r25, 0x3F	; 63
     bec:	9b 87       	std	Y+11, r25	; 0x0b

    ocra = ocrb = 0;
    if ( (currentstep >= 0) && (currentstep < MICROSTEPS)) {
     bee:	90 31       	cpi	r25, 0x10	; 16
     bf0:	08 f0       	brcs	.+2      	; 0xbf4 <_ZN10AF_Stepper7onestepEhh+0x66>
     bf2:	99 c0       	rjmp	.+306    	; 0xd26 <_ZN10AF_Stepper7onestepEhh+0x198>
      ocra = microstepcurve[MICROSTEPS - currentstep];
     bf4:	09 2f       	mov	r16, r25
     bf6:	10 e0       	ldi	r17, 0x00	; 0
     bf8:	61 e5       	ldi	r22, 0x51	; 81
     bfa:	71 e0       	ldi	r23, 0x01	; 1
     bfc:	60 1b       	sub	r22, r16
     bfe:	71 0b       	sbc	r23, r17
     c00:	db 01       	movw	r26, r22
     c02:	7c 91       	ld	r23, X
      ocrb = microstepcurve[currentstep];
     c04:	0f 5b       	subi	r16, 0xBF	; 191
     c06:	1e 4f       	sbci	r17, 0xFE	; 254
     c08:	d8 01       	movw	r26, r16
     c0a:	6c 91       	ld	r22, X
     c0c:	0f c0       	rjmp	.+30     	; 0xc2c <_ZN10AF_Stepper7onestepEhh+0x9e>
    return 0;
  }

  // next determine what sort of stepping procedure we're up to
  if (style == SINGLE) {
    if ((currentstep/(MICROSTEPS/2)) % 2) { // we're at an odd step, weird
     c0e:	9b 85       	ldd	r25, Y+11	; 0x0b
     c10:	79 2f       	mov	r23, r25
     c12:	76 95       	lsr	r23
     c14:	76 95       	lsr	r23
     c16:	76 95       	lsr	r23
     c18:	70 ff       	sbrs	r23, 0
     c1a:	9b c0       	rjmp	.+310    	; 0xd52 <_ZN10AF_Stepper7onestepEhh+0x1c4>
      if (dir == FORWARD) {
     c1c:	61 30       	cpi	r22, 0x01	; 1
     c1e:	09 f4       	brne	.+2      	; 0xc22 <_ZN10AF_Stepper7onestepEhh+0x94>
     c20:	dc c0       	rjmp	.+440    	; 0xdda <_ZN10AF_Stepper7onestepEhh+0x24c>
	currentstep += MICROSTEPS/2;
      }
      else {
	currentstep -= MICROSTEPS/2;
     c22:	98 50       	subi	r25, 0x08	; 8
     c24:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
     c26:	9b 85       	ldd	r25, Y+11	; 0x0b
     c28:	7f ef       	ldi	r23, 0xFF	; 255
     c2a:	6f ef       	ldi	r22, 0xFF	; 255
      ocrb = microstepcurve[MICROSTEPS*4 - currentstep];
    }
  }

  currentstep += MICROSTEPS*4;
  currentstep %= MICROSTEPS*4;
     c2c:	9f 73       	andi	r25, 0x3F	; 63
     c2e:	9b 87       	std	Y+11, r25	; 0x0b
  Serial.print("current step: "); Serial.println(currentstep, DEC);
  Serial.print(" pwmA = "); Serial.print(ocra, DEC); 
  Serial.print(" pwmB = "); Serial.println(ocrb, DEC); 
#endif

  if (steppernum == 1) {
     c30:	81 30       	cpi	r24, 0x01	; 1
     c32:	09 f4       	brne	.+2      	; 0xc36 <_ZN10AF_Stepper7onestepEhh+0xa8>
     c34:	5f c0       	rjmp	.+190    	; 0xcf4 <_ZN10AF_Stepper7onestepEhh+0x166>
    setPWM1(ocra);
    setPWM2(ocrb);
  } else if (steppernum == 2) {
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	09 f4       	brne	.+2      	; 0xc3c <_ZN10AF_Stepper7onestepEhh+0xae>
     c3a:	6e c0       	rjmp	.+220    	; 0xd18 <_ZN10AF_Stepper7onestepEhh+0x18a>
    setPWM4(ocrb);
  }


  // release all
  latch_state &= ~a & ~b & ~c & ~d; // all motor pins to 0
     c3c:	80 91 51 04 	lds	r24, 0x0451
     c40:	82 23       	and	r24, r18
     c42:	80 93 51 04 	sts	0x0451, r24

  //Serial.println(step, DEC);
  if (style == MICROSTEP) {
     c46:	44 30       	cpi	r20, 0x04	; 4
     c48:	91 f1       	breq	.+100    	; 0xcae <_ZN10AF_Stepper7onestepEhh+0x120>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
     c4a:	96 95       	lsr	r25
     c4c:	96 95       	lsr	r25
     c4e:	96 95       	lsr	r25
     c50:	94 30       	cpi	r25, 0x04	; 4
     c52:	09 f4       	brne	.+2      	; 0xc56 <_ZN10AF_Stepper7onestepEhh+0xc8>
     c54:	af c0       	rjmp	.+350    	; 0xdb4 <_ZN10AF_Stepper7onestepEhh+0x226>
     c56:	95 30       	cpi	r25, 0x05	; 5
     c58:	f8 f0       	brcs	.+62     	; 0xc98 <_ZN10AF_Stepper7onestepEhh+0x10a>
     c5a:	96 30       	cpi	r25, 0x06	; 6
     c5c:	09 f4       	brne	.+2      	; 0xc60 <_ZN10AF_Stepper7onestepEhh+0xd2>
     c5e:	ae c0       	rjmp	.+348    	; 0xdbc <_ZN10AF_Stepper7onestepEhh+0x22e>
     c60:	96 30       	cpi	r25, 0x06	; 6
     c62:	08 f0       	brcs	.+2      	; 0xc66 <_ZN10AF_Stepper7onestepEhh+0xd8>
     c64:	87 c0       	rjmp	.+270    	; 0xd74 <_ZN10AF_Stepper7onestepEhh+0x1e6>
      break;
    case 4:
      latch_state |= c; // energize coil 3 only
      break; 
    case 5:
      latch_state |= c | d; // energize coil 3+4
     c66:	35 2b       	or	r19, r21
     c68:	38 2b       	or	r19, r24
     c6a:	30 93 51 04 	sts	0x0451, r19
      break;
    }
  }

 
  MC.latch_tx();
     c6e:	80 e5       	ldi	r24, 0x50	; 80
     c70:	94 e0       	ldi	r25, 0x04	; 4
     c72:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN17AFMotorController8latch_txEv>
  return currentstep;
     c76:	8b 85       	ldd	r24, Y+11	; 0x0b
}
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	df 90       	pop	r13
     c86:	08 95       	ret
  uint8_t a, b, c, d;
  uint8_t ocrb, ocra;

  ocra = ocrb = 255;

  if (steppernum == 1) {
     c88:	21 ee       	ldi	r18, 0xE1	; 225
     c8a:	36 e0       	ldi	r19, 0x06	; 6
     c8c:	d3 2e       	mov	r13, r19
     c8e:	30 e1       	ldi	r19, 0x10	; 16
     c90:	58 e0       	ldi	r21, 0x08	; 8
     c92:	e2 e0       	ldi	r30, 0x02	; 2
     c94:	f4 e0       	ldi	r31, 0x04	; 4
     c96:	99 cf       	rjmp	.-206    	; 0xbca <_ZN10AF_Stepper7onestepEhh+0x3c>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
     c98:	92 30       	cpi	r25, 0x02	; 2
     c9a:	09 f4       	brne	.+2      	; 0xc9e <_ZN10AF_Stepper7onestepEhh+0x110>
     c9c:	93 c0       	rjmp	.+294    	; 0xdc4 <_ZN10AF_Stepper7onestepEhh+0x236>
     c9e:	93 30       	cpi	r25, 0x03	; 3
     ca0:	08 f4       	brcc	.+2      	; 0xca4 <_ZN10AF_Stepper7onestepEhh+0x116>
     ca2:	62 c0       	rjmp	.+196    	; 0xd68 <_ZN10AF_Stepper7onestepEhh+0x1da>
      break;
    case 2:
      latch_state |= b; // energize coil 2 only
      break;
    case 3:
      latch_state |= b | c; // energize coil 2+3
     ca4:	5e 2b       	or	r21, r30
     ca6:	58 2b       	or	r21, r24
     ca8:	50 93 51 04 	sts	0x0451, r21
      break;
     cac:	e0 cf       	rjmp	.-64     	; 0xc6e <_ZN10AF_Stepper7onestepEhh+0xe0>
  // release all
  latch_state &= ~a & ~b & ~c & ~d; // all motor pins to 0

  //Serial.println(step, DEC);
  if (style == MICROSTEP) {
    if ((currentstep >= 0) && (currentstep < MICROSTEPS))
     cae:	90 31       	cpi	r25, 0x10	; 16
     cb0:	18 f4       	brcc	.+6      	; 0xcb8 <_ZN10AF_Stepper7onestepEhh+0x12a>
      latch_state |= a | b;
     cb2:	8d 29       	or	r24, r13
     cb4:	80 93 51 04 	sts	0x0451, r24
    if ((currentstep >= MICROSTEPS) && (currentstep < MICROSTEPS*2))
     cb8:	89 2f       	mov	r24, r25
     cba:	80 51       	subi	r24, 0x10	; 16
     cbc:	80 31       	cpi	r24, 0x10	; 16
     cbe:	30 f4       	brcc	.+12     	; 0xccc <_ZN10AF_Stepper7onestepEhh+0x13e>
      latch_state |= b | c;
     cc0:	e5 2b       	or	r30, r21
     cc2:	20 91 51 04 	lds	r18, 0x0451
     cc6:	2e 2b       	or	r18, r30
     cc8:	20 93 51 04 	sts	0x0451, r18
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
     ccc:	89 2f       	mov	r24, r25
     cce:	80 52       	subi	r24, 0x20	; 32
     cd0:	80 31       	cpi	r24, 0x10	; 16
     cd2:	30 f4       	brcc	.+12     	; 0xce0 <_ZN10AF_Stepper7onestepEhh+0x152>
      latch_state |= c | d;
     cd4:	53 2b       	or	r21, r19
     cd6:	20 91 51 04 	lds	r18, 0x0451
     cda:	25 2b       	or	r18, r21
     cdc:	20 93 51 04 	sts	0x0451, r18
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
     ce0:	90 53       	subi	r25, 0x30	; 48
     ce2:	90 31       	cpi	r25, 0x10	; 16
     ce4:	20 f6       	brcc	.-120    	; 0xc6e <_ZN10AF_Stepper7onestepEhh+0xe0>
      latch_state |= d | a;
     ce6:	3f 2b       	or	r19, r31
     ce8:	90 91 51 04 	lds	r25, 0x0451
     cec:	93 2b       	or	r25, r19
     cee:	90 93 51 04 	sts	0x0451, r25
     cf2:	bd cf       	rjmp	.-134    	; 0xc6e <_ZN10AF_Stepper7onestepEhh+0xe0>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
     cf4:	70 93 b3 00 	sts	0x00B3, r23
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
     cf8:	60 93 b4 00 	sts	0x00B4, r22
     cfc:	9f cf       	rjmp	.-194    	; 0xc3c <_ZN10AF_Stepper7onestepEhh+0xae>
      else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == DOUBLE) {
    if (! (currentstep/(MICROSTEPS/2) % 2)) { // we're at an even step, weird
     cfe:	9b 85       	ldd	r25, Y+11	; 0x0b
     d00:	79 2f       	mov	r23, r25
     d02:	76 95       	lsr	r23
     d04:	76 95       	lsr	r23
     d06:	76 95       	lsr	r23
     d08:	70 fd       	sbrc	r23, 0
     d0a:	29 c0       	rjmp	.+82     	; 0xd5e <_ZN10AF_Stepper7onestepEhh+0x1d0>
      if (dir == FORWARD) {
     d0c:	61 30       	cpi	r22, 0x01	; 1
     d0e:	09 f4       	brne	.+2      	; 0xd12 <_ZN10AF_Stepper7onestepEhh+0x184>
     d10:	47 c0       	rjmp	.+142    	; 0xda0 <_ZN10AF_Stepper7onestepEhh+0x212>
    }
  } else if (style == INTERLEAVE) {
    if (dir == FORWARD) {
       currentstep += MICROSTEPS/2;
    } else {
       currentstep -= MICROSTEPS/2;
     d12:	98 50       	subi	r25, 0x08	; 8
     d14:	9b 87       	std	Y+11, r25	; 0x0b
     d16:	88 cf       	rjmp	.-240    	; 0xc28 <_ZN10AF_Stepper7onestepEhh+0x9a>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
     d18:	77 bd       	out	0x27, r23	; 39
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
     d1a:	68 bd       	out	0x28, r22	; 40
     d1c:	8f cf       	rjmp	.-226    	; 0xc3c <_ZN10AF_Stepper7onestepEhh+0xae>
      } else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == INTERLEAVE) {
    if (dir == FORWARD) {
     d1e:	61 30       	cpi	r22, 0x01	; 1
     d20:	f1 f1       	breq	.+124    	; 0xd9e <_ZN10AF_Stepper7onestepEhh+0x210>
       currentstep += MICROSTEPS/2;
    } else {
       currentstep -= MICROSTEPS/2;
     d22:	9b 85       	ldd	r25, Y+11	; 0x0b
     d24:	f6 cf       	rjmp	.-20     	; 0xd12 <_ZN10AF_Stepper7onestepEhh+0x184>

    ocra = ocrb = 0;
    if ( (currentstep >= 0) && (currentstep < MICROSTEPS)) {
      ocra = microstepcurve[MICROSTEPS - currentstep];
      ocrb = microstepcurve[currentstep];
    } else if  ( (currentstep >= MICROSTEPS) && (currentstep < MICROSTEPS*2)) {
     d26:	69 2f       	mov	r22, r25
     d28:	60 51       	subi	r22, 0x10	; 16
     d2a:	60 31       	cpi	r22, 0x10	; 16
     d2c:	50 f1       	brcs	.+84     	; 0xd82 <_ZN10AF_Stepper7onestepEhh+0x1f4>
      ocra = microstepcurve[currentstep - MICROSTEPS];
      ocrb = microstepcurve[MICROSTEPS*2 - currentstep];
    } else if  ( (currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3)) {
     d2e:	69 2f       	mov	r22, r25
     d30:	60 52       	subi	r22, 0x20	; 32
     d32:	60 31       	cpi	r22, 0x10	; 16
     d34:	08 f0       	brcs	.+2      	; 0xd38 <_ZN10AF_Stepper7onestepEhh+0x1aa>
     d36:	55 c0       	rjmp	.+170    	; 0xde2 <_ZN10AF_Stepper7onestepEhh+0x254>
      ocra = microstepcurve[MICROSTEPS*3 - currentstep];
     d38:	09 2f       	mov	r16, r25
     d3a:	10 e0       	ldi	r17, 0x00	; 0
     d3c:	61 e7       	ldi	r22, 0x71	; 113
     d3e:	71 e0       	ldi	r23, 0x01	; 1
     d40:	60 1b       	sub	r22, r16
     d42:	71 0b       	sbc	r23, r17
     d44:	db 01       	movw	r26, r22
     d46:	7c 91       	ld	r23, X
      ocrb = microstepcurve[currentstep - MICROSTEPS*2];
     d48:	0f 5d       	subi	r16, 0xDF	; 223
     d4a:	1e 4f       	sbci	r17, 0xFE	; 254
     d4c:	d8 01       	movw	r26, r16
     d4e:	6c 91       	ld	r22, X
     d50:	6d cf       	rjmp	.-294    	; 0xc2c <_ZN10AF_Stepper7onestepEhh+0x9e>
      }
      else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next even step
      if (dir == FORWARD) {
     d52:	61 30       	cpi	r22, 0x01	; 1
     d54:	f1 f1       	breq	.+124    	; 0xdd2 <_ZN10AF_Stepper7onestepEhh+0x244>
	currentstep += MICROSTEPS;
      }
      else {
	currentstep -= MICROSTEPS;
     d56:	90 51       	subi	r25, 0x10	; 16
     d58:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
     d5a:	9b 85       	ldd	r25, Y+11	; 0x0b
     d5c:	65 cf       	rjmp	.-310    	; 0xc28 <_ZN10AF_Stepper7onestepEhh+0x9a>
	currentstep += MICROSTEPS/2;
      } else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next odd step
      if (dir == FORWARD) {
     d5e:	61 30       	cpi	r22, 0x01	; 1
     d60:	11 f1       	breq	.+68     	; 0xda6 <_ZN10AF_Stepper7onestepEhh+0x218>
	currentstep += MICROSTEPS;
      } else {
	currentstep -= MICROSTEPS;
     d62:	90 51       	subi	r25, 0x10	; 16
     d64:	9b 87       	std	Y+11, r25	; 0x0b
     d66:	60 cf       	rjmp	.-320    	; 0xc28 <_ZN10AF_Stepper7onestepEhh+0x9a>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
     d68:	91 30       	cpi	r25, 0x01	; 1
     d6a:	01 f1       	breq	.+64     	; 0xdac <_ZN10AF_Stepper7onestepEhh+0x21e>
    case 0:
      latch_state |= a; // energize coil 1 only
     d6c:	8f 2b       	or	r24, r31
     d6e:	80 93 51 04 	sts	0x0451, r24
      break;
     d72:	7d cf       	rjmp	.-262    	; 0xc6e <_ZN10AF_Stepper7onestepEhh+0xe0>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
     d74:	97 30       	cpi	r25, 0x07	; 7
     d76:	d1 f7       	brne	.-12     	; 0xd6c <_ZN10AF_Stepper7onestepEhh+0x1de>
      break;
    case 6:
      latch_state |= d; // energize coil 4 only
      break;
    case 7:
      latch_state |= d | a; // energize coil 1+4
     d78:	3f 2b       	or	r19, r31
     d7a:	38 2b       	or	r19, r24
     d7c:	30 93 51 04 	sts	0x0451, r19
     d80:	76 cf       	rjmp	.-276    	; 0xc6e <_ZN10AF_Stepper7onestepEhh+0xe0>
    ocra = ocrb = 0;
    if ( (currentstep >= 0) && (currentstep < MICROSTEPS)) {
      ocra = microstepcurve[MICROSTEPS - currentstep];
      ocrb = microstepcurve[currentstep];
    } else if  ( (currentstep >= MICROSTEPS) && (currentstep < MICROSTEPS*2)) {
      ocra = microstepcurve[currentstep - MICROSTEPS];
     d82:	e9 2e       	mov	r14, r25
     d84:	ff 24       	eor	r15, r15
     d86:	b7 01       	movw	r22, r14
     d88:	6f 5c       	subi	r22, 0xCF	; 207
     d8a:	7e 4f       	sbci	r23, 0xFE	; 254
     d8c:	db 01       	movw	r26, r22
     d8e:	7c 91       	ld	r23, X
      ocrb = microstepcurve[MICROSTEPS*2 - currentstep];
     d90:	01 e6       	ldi	r16, 0x61	; 97
     d92:	11 e0       	ldi	r17, 0x01	; 1
     d94:	0e 19       	sub	r16, r14
     d96:	1f 09       	sbc	r17, r15
     d98:	d8 01       	movw	r26, r16
     d9a:	6c 91       	ld	r22, X
     d9c:	47 cf       	rjmp	.-370    	; 0xc2c <_ZN10AF_Stepper7onestepEhh+0x9e>
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == INTERLEAVE) {
    if (dir == FORWARD) {
       currentstep += MICROSTEPS/2;
     d9e:	9b 85       	ldd	r25, Y+11	; 0x0b
     da0:	98 5f       	subi	r25, 0xF8	; 248
     da2:	9b 87       	std	Y+11, r25	; 0x0b
     da4:	41 cf       	rjmp	.-382    	; 0xc28 <_ZN10AF_Stepper7onestepEhh+0x9a>
      } else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next odd step
      if (dir == FORWARD) {
	currentstep += MICROSTEPS;
     da6:	90 5f       	subi	r25, 0xF0	; 240
     da8:	9b 87       	std	Y+11, r25	; 0x0b
     daa:	3e cf       	rjmp	.-388    	; 0xc28 <_ZN10AF_Stepper7onestepEhh+0x9a>
    switch (currentstep/(MICROSTEPS/2)) {
    case 0:
      latch_state |= a; // energize coil 1 only
      break;
    case 1:
      latch_state |= a | b; // energize coil 1+2
     dac:	8d 29       	or	r24, r13
     dae:	80 93 51 04 	sts	0x0451, r24
      break;
     db2:	5d cf       	rjmp	.-326    	; 0xc6e <_ZN10AF_Stepper7onestepEhh+0xe0>
      break;
    case 3:
      latch_state |= b | c; // energize coil 2+3
      break;
    case 4:
      latch_state |= c; // energize coil 3 only
     db4:	85 2b       	or	r24, r21
     db6:	80 93 51 04 	sts	0x0451, r24
      break; 
     dba:	59 cf       	rjmp	.-334    	; 0xc6e <_ZN10AF_Stepper7onestepEhh+0xe0>
    case 5:
      latch_state |= c | d; // energize coil 3+4
      break;
    case 6:
      latch_state |= d; // energize coil 4 only
     dbc:	83 2b       	or	r24, r19
     dbe:	80 93 51 04 	sts	0x0451, r24
      break;
     dc2:	55 cf       	rjmp	.-342    	; 0xc6e <_ZN10AF_Stepper7onestepEhh+0xe0>
      break;
    case 1:
      latch_state |= a | b; // energize coil 1+2
      break;
    case 2:
      latch_state |= b; // energize coil 2 only
     dc4:	8e 2b       	or	r24, r30
     dc6:	80 93 51 04 	sts	0x0451, r24
      break;
     dca:	51 cf       	rjmp	.-350    	; 0xc6e <_ZN10AF_Stepper7onestepEhh+0xe0>
    }
  } 

  if (style == MICROSTEP) {
    if (dir == FORWARD) {
      currentstep++;
     dcc:	9f 5f       	subi	r25, 0xFF	; 255
     dce:	9b 87       	std	Y+11, r25	; 0x0b
     dd0:	0c cf       	rjmp	.-488    	; 0xbea <_ZN10AF_Stepper7onestepEhh+0x5c>
      else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next even step
      if (dir == FORWARD) {
	currentstep += MICROSTEPS;
     dd2:	90 5f       	subi	r25, 0xF0	; 240
     dd4:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
     dd6:	9b 85       	ldd	r25, Y+11	; 0x0b
     dd8:	27 cf       	rjmp	.-434    	; 0xc28 <_ZN10AF_Stepper7onestepEhh+0x9a>

  // next determine what sort of stepping procedure we're up to
  if (style == SINGLE) {
    if ((currentstep/(MICROSTEPS/2)) % 2) { // we're at an odd step, weird
      if (dir == FORWARD) {
	currentstep += MICROSTEPS/2;
     dda:	98 5f       	subi	r25, 0xF8	; 248
     ddc:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
     dde:	9b 85       	ldd	r25, Y+11	; 0x0b
     de0:	23 cf       	rjmp	.-442    	; 0xc28 <_ZN10AF_Stepper7onestepEhh+0x9a>
      ocra = microstepcurve[currentstep - MICROSTEPS];
      ocrb = microstepcurve[MICROSTEPS*2 - currentstep];
    } else if  ( (currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3)) {
      ocra = microstepcurve[MICROSTEPS*3 - currentstep];
      ocrb = microstepcurve[currentstep - MICROSTEPS*2];
    } else if  ( (currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4)) {
     de2:	69 2f       	mov	r22, r25
     de4:	60 53       	subi	r22, 0x30	; 48
     de6:	60 31       	cpi	r22, 0x10	; 16
     de8:	18 f0       	brcs	.+6      	; 0xdf0 <_ZN10AF_Stepper7onestepEhh+0x262>
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	1e cf       	rjmp	.-452    	; 0xc2c <_ZN10AF_Stepper7onestepEhh+0x9e>
      ocra = microstepcurve[currentstep - MICROSTEPS*3];
     df0:	e9 2e       	mov	r14, r25
     df2:	ff 24       	eor	r15, r15
     df4:	b7 01       	movw	r22, r14
     df6:	6f 5e       	subi	r22, 0xEF	; 239
     df8:	7e 4f       	sbci	r23, 0xFE	; 254
     dfa:	db 01       	movw	r26, r22
     dfc:	7c 91       	ld	r23, X
      ocrb = microstepcurve[MICROSTEPS*4 - currentstep];
     dfe:	01 e8       	ldi	r16, 0x81	; 129
     e00:	11 e0       	ldi	r17, 0x01	; 1
     e02:	0e 19       	sub	r16, r14
     e04:	1f 09       	sbc	r17, r15
     e06:	d8 01       	movw	r26, r16
     e08:	6c 91       	ld	r22, X
     e0a:	10 cf       	rjmp	.-480    	; 0xc2c <_ZN10AF_Stepper7onestepEhh+0x9e>

00000e0c <_ZN10AF_Stepper4stepEjhh>:
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    MC.latch_tx();
  }
}

void AF_Stepper::step(uint16_t steps, uint8_t dir,  uint8_t style) {
     e0c:	5f 92       	push	r5
     e0e:	6f 92       	push	r6
     e10:	7f 92       	push	r7
     e12:	8f 92       	push	r8
     e14:	9f 92       	push	r9
     e16:	af 92       	push	r10
     e18:	bf 92       	push	r11
     e1a:	cf 92       	push	r12
     e1c:	df 92       	push	r13
     e1e:	ef 92       	push	r14
     e20:	ff 92       	push	r15
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	ec 01       	movw	r28, r24
     e2c:	8b 01       	movw	r16, r22
     e2e:	54 2e       	mov	r5, r20
     e30:	f2 2e       	mov	r15, r18
  uint32_t uspers = usperstep;
     e32:	8b 80       	ldd	r8, Y+3	; 0x03
     e34:	9c 80       	ldd	r9, Y+4	; 0x04
     e36:	ad 80       	ldd	r10, Y+5	; 0x05
     e38:	be 80       	ldd	r11, Y+6	; 0x06
  uint8_t ret = 0;

  if (style == INTERLEAVE) {
     e3a:	23 e0       	ldi	r18, 0x03	; 3
     e3c:	f2 16       	cp	r15, r18
     e3e:	09 f4       	brne	.+2      	; 0xe42 <_ZN10AF_Stepper4stepEjhh+0x36>
     e40:	a5 c0       	rjmp	.+330    	; 0xf8c <_ZN10AF_Stepper4stepEjhh+0x180>
    uspers /= 2;
  }
 else if (style == MICROSTEP) {
     e42:	84 e0       	ldi	r24, 0x04	; 4
     e44:	f8 16       	cp	r15, r24
     e46:	09 f4       	brne	.+2      	; 0xe4a <_ZN10AF_Stepper4stepEjhh+0x3e>
     e48:	a6 c0       	rjmp	.+332    	; 0xf96 <_ZN10AF_Stepper4stepEjhh+0x18a>
#endif
  }

  while (steps--) {
    ret = onestep(dir, style);
    delay(uspers/1000); // in ms
     e4a:	c5 01       	movw	r24, r10
     e4c:	b4 01       	movw	r22, r8
     e4e:	28 ee       	ldi	r18, 0xE8	; 232
     e50:	33 e0       	ldi	r19, 0x03	; 3
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	0e 94 3a 29 	call	0x5274	; 0x5274 <__udivmodsi4>
     e5a:	72 2e       	mov	r7, r18
     e5c:	c3 2e       	mov	r12, r19
     e5e:	d4 2e       	mov	r13, r20
     e60:	e5 2e       	mov	r14, r21
    steppingcounter += (uspers % 1000);
     e62:	c5 01       	movw	r24, r10
     e64:	b4 01       	movw	r22, r8
     e66:	28 ee       	ldi	r18, 0xE8	; 232
     e68:	33 e0       	ldi	r19, 0x03	; 3
     e6a:	40 e0       	ldi	r20, 0x00	; 0
     e6c:	50 e0       	ldi	r21, 0x00	; 0
     e6e:	0e 94 3a 29 	call	0x5274	; 0x5274 <__udivmodsi4>
     e72:	4b 01       	movw	r8, r22
     e74:	5c 01       	movw	r10, r24
     e76:	66 24       	eor	r6, r6
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <_ZN10AF_Stepper4stepEjhh+0x72>
    if (steppingcounter >= 1000) {
      delay(1);
      steppingcounter -= 1000;
     e7a:	01 50       	subi	r16, 0x01	; 1
     e7c:	10 40       	sbci	r17, 0x00	; 0
#ifdef MOTORDEBUG
    Serial.print("steps = "); Serial.println(steps, DEC);
#endif
  }

  while (steps--) {
     e7e:	01 15       	cp	r16, r1
     e80:	11 05       	cpc	r17, r1
     e82:	99 f1       	breq	.+102    	; 0xeea <_ZN10AF_Stepper4stepEjhh+0xde>
    ret = onestep(dir, style);
     e84:	ce 01       	movw	r24, r28
     e86:	65 2d       	mov	r22, r5
     e88:	4f 2d       	mov	r20, r15
     e8a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <_ZN10AF_Stepper7onestepEhh>
     e8e:	68 2e       	mov	r6, r24
    delay(uspers/1000); // in ms
     e90:	67 2d       	mov	r22, r7
     e92:	7c 2d       	mov	r23, r12
     e94:	8d 2d       	mov	r24, r13
     e96:	9e 2d       	mov	r25, r14
     e98:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <delay>
    steppingcounter += (uspers % 1000);
     e9c:	8f 81       	ldd	r24, Y+7	; 0x07
     e9e:	98 85       	ldd	r25, Y+8	; 0x08
     ea0:	a9 85       	ldd	r26, Y+9	; 0x09
     ea2:	ba 85       	ldd	r27, Y+10	; 0x0a
     ea4:	88 0d       	add	r24, r8
     ea6:	99 1d       	adc	r25, r9
     ea8:	aa 1d       	adc	r26, r10
     eaa:	bb 1d       	adc	r27, r11
     eac:	8f 83       	std	Y+7, r24	; 0x07
     eae:	98 87       	std	Y+8, r25	; 0x08
     eb0:	a9 87       	std	Y+9, r26	; 0x09
     eb2:	ba 87       	std	Y+10, r27	; 0x0a
    if (steppingcounter >= 1000) {
     eb4:	88 3e       	cpi	r24, 0xE8	; 232
     eb6:	23 e0       	ldi	r18, 0x03	; 3
     eb8:	92 07       	cpc	r25, r18
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	a2 07       	cpc	r26, r18
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	b2 07       	cpc	r27, r18
     ec2:	d8 f2       	brcs	.-74     	; 0xe7a <_ZN10AF_Stepper4stepEjhh+0x6e>
      delay(1);
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <delay>
      steppingcounter -= 1000;
     ed0:	8f 81       	ldd	r24, Y+7	; 0x07
     ed2:	98 85       	ldd	r25, Y+8	; 0x08
     ed4:	a9 85       	ldd	r26, Y+9	; 0x09
     ed6:	ba 85       	ldd	r27, Y+10	; 0x0a
     ed8:	88 5e       	subi	r24, 0xE8	; 232
     eda:	93 40       	sbci	r25, 0x03	; 3
     edc:	a0 40       	sbci	r26, 0x00	; 0
     ede:	b0 40       	sbci	r27, 0x00	; 0
     ee0:	8f 83       	std	Y+7, r24	; 0x07
     ee2:	98 87       	std	Y+8, r25	; 0x08
     ee4:	a9 87       	std	Y+9, r26	; 0x09
     ee6:	ba 87       	std	Y+10, r27	; 0x0a
     ee8:	c8 cf       	rjmp	.-112    	; 0xe7a <_ZN10AF_Stepper4stepEjhh+0x6e>
    }
  }
  if (style == MICROSTEP) {
     eea:	84 e0       	ldi	r24, 0x04	; 4
     eec:	f8 16       	cp	r15, r24
     eee:	81 f0       	breq	.+32     	; 0xf10 <_ZN10AF_Stepper4stepEjhh+0x104>
	delay(1);
	steppingcounter -= 1000;
      } 
    }
  }
}
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	ff 90       	pop	r15
     efa:	ef 90       	pop	r14
     efc:	df 90       	pop	r13
     efe:	cf 90       	pop	r12
     f00:	bf 90       	pop	r11
     f02:	af 90       	pop	r10
     f04:	9f 90       	pop	r9
     f06:	8f 90       	pop	r8
     f08:	7f 90       	pop	r7
     f0a:	6f 90       	pop	r6
     f0c:	5f 90       	pop	r5
     f0e:	08 95       	ret
      delay(1);
      steppingcounter -= 1000;
    }
  }
  if (style == MICROSTEP) {
    while ((ret != 0) && (ret != MICROSTEPS)) {
     f10:	66 20       	and	r6, r6
     f12:	71 f3       	breq	.-36     	; 0xef0 <_ZN10AF_Stepper4stepEjhh+0xe4>
     f14:	20 e1       	ldi	r18, 0x10	; 16
     f16:	62 16       	cp	r6, r18
     f18:	19 f4       	brne	.+6      	; 0xf20 <_ZN10AF_Stepper4stepEjhh+0x114>
     f1a:	ea cf       	rjmp	.-44     	; 0xef0 <_ZN10AF_Stepper4stepEjhh+0xe4>
     f1c:	00 31       	cpi	r16, 0x10	; 16
     f1e:	41 f3       	breq	.-48     	; 0xef0 <_ZN10AF_Stepper4stepEjhh+0xe4>
      ret = onestep(dir, style);
     f20:	ce 01       	movw	r24, r28
     f22:	65 2d       	mov	r22, r5
     f24:	44 e0       	ldi	r20, 0x04	; 4
     f26:	0e 94 c7 05 	call	0xb8e	; 0xb8e <_ZN10AF_Stepper7onestepEhh>
     f2a:	08 2f       	mov	r16, r24
      delay(uspers/1000); // in ms
     f2c:	67 2d       	mov	r22, r7
     f2e:	7c 2d       	mov	r23, r12
     f30:	8d 2d       	mov	r24, r13
     f32:	9e 2d       	mov	r25, r14
     f34:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <delay>
      steppingcounter += (uspers % 1000);
     f38:	8f 81       	ldd	r24, Y+7	; 0x07
     f3a:	98 85       	ldd	r25, Y+8	; 0x08
     f3c:	a9 85       	ldd	r26, Y+9	; 0x09
     f3e:	ba 85       	ldd	r27, Y+10	; 0x0a
     f40:	88 0d       	add	r24, r8
     f42:	99 1d       	adc	r25, r9
     f44:	aa 1d       	adc	r26, r10
     f46:	bb 1d       	adc	r27, r11
     f48:	8f 83       	std	Y+7, r24	; 0x07
     f4a:	98 87       	std	Y+8, r25	; 0x08
     f4c:	a9 87       	std	Y+9, r26	; 0x09
     f4e:	ba 87       	std	Y+10, r27	; 0x0a
      if (steppingcounter >= 1000) {
     f50:	88 3e       	cpi	r24, 0xE8	; 232
     f52:	23 e0       	ldi	r18, 0x03	; 3
     f54:	92 07       	cpc	r25, r18
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	a2 07       	cpc	r26, r18
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	b2 07       	cpc	r27, r18
     f5e:	90 f0       	brcs	.+36     	; 0xf84 <_ZN10AF_Stepper4stepEjhh+0x178>
	delay(1);
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <delay>
	steppingcounter -= 1000;
     f6c:	8f 81       	ldd	r24, Y+7	; 0x07
     f6e:	98 85       	ldd	r25, Y+8	; 0x08
     f70:	a9 85       	ldd	r26, Y+9	; 0x09
     f72:	ba 85       	ldd	r27, Y+10	; 0x0a
     f74:	88 5e       	subi	r24, 0xE8	; 232
     f76:	93 40       	sbci	r25, 0x03	; 3
     f78:	a0 40       	sbci	r26, 0x00	; 0
     f7a:	b0 40       	sbci	r27, 0x00	; 0
     f7c:	8f 83       	std	Y+7, r24	; 0x07
     f7e:	98 87       	std	Y+8, r25	; 0x08
     f80:	a9 87       	std	Y+9, r26	; 0x09
     f82:	ba 87       	std	Y+10, r27	; 0x0a
      delay(1);
      steppingcounter -= 1000;
    }
  }
  if (style == MICROSTEP) {
    while ((ret != 0) && (ret != MICROSTEPS)) {
     f84:	00 23       	and	r16, r16
     f86:	09 f4       	brne	.+2      	; 0xf8a <_ZN10AF_Stepper4stepEjhh+0x17e>
     f88:	b3 cf       	rjmp	.-154    	; 0xef0 <_ZN10AF_Stepper4stepEjhh+0xe4>
     f8a:	c8 cf       	rjmp	.-112    	; 0xf1c <_ZN10AF_Stepper4stepEjhh+0x110>
void AF_Stepper::step(uint16_t steps, uint8_t dir,  uint8_t style) {
  uint32_t uspers = usperstep;
  uint8_t ret = 0;

  if (style == INTERLEAVE) {
    uspers /= 2;
     f8c:	b6 94       	lsr	r11
     f8e:	a7 94       	ror	r10
     f90:	97 94       	ror	r9
     f92:	87 94       	ror	r8
     f94:	5a cf       	rjmp	.-332    	; 0xe4a <_ZN10AF_Stepper4stepEjhh+0x3e>
  }
 else if (style == MICROSTEP) {
    uspers /= MICROSTEPS;
     f96:	54 e0       	ldi	r21, 0x04	; 4
     f98:	b6 94       	lsr	r11
     f9a:	a7 94       	ror	r10
     f9c:	97 94       	ror	r9
     f9e:	87 94       	ror	r8
     fa0:	5a 95       	dec	r21
     fa2:	d1 f7       	brne	.-12     	; 0xf98 <_ZN10AF_Stepper4stepEjhh+0x18c>
    steps *= MICROSTEPS;
     fa4:	02 95       	swap	r16
     fa6:	12 95       	swap	r17
     fa8:	10 7f       	andi	r17, 0xF0	; 240
     faa:	10 27       	eor	r17, r16
     fac:	00 7f       	andi	r16, 0xF0	; 240
     fae:	10 27       	eor	r17, r16
     fb0:	4c cf       	rjmp	.-360    	; 0xe4a <_ZN10AF_Stepper4stepEjhh+0x3e>

00000fb2 <_ZN10AF_Stepper7releaseEv>:
  //usperstep = 60000000 / ((uint32_t)revsteps * (uint32_t)rpm);
  steppingcounter = 0;
}

void AF_Stepper::release(void) {
  if (steppernum == 1) {
     fb2:	fc 01       	movw	r30, r24
     fb4:	82 81       	ldd	r24, Z+2	; 0x02
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	69 f0       	breq	.+26     	; 0xfd4 <_ZN10AF_Stepper7releaseEv+0x22>
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    MC.latch_tx();
  } else if (steppernum == 2) {
     fba:	82 30       	cpi	r24, 0x02	; 2
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <_ZN10AF_Stepper7releaseEv+0xe>
     fbe:	08 95       	ret
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B) &
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
     fc0:	80 91 51 04 	lds	r24, 0x0451
     fc4:	8e 71       	andi	r24, 0x1E	; 30
     fc6:	80 93 51 04 	sts	0x0451, r24
    MC.latch_tx();
     fca:	80 e5       	ldi	r24, 0x50	; 80
     fcc:	94 e0       	ldi	r25, 0x04	; 4
     fce:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN17AFMotorController8latch_txEv>
     fd2:	08 95       	ret
}

void AF_Stepper::release(void) {
  if (steppernum == 1) {
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
     fd4:	80 91 51 04 	lds	r24, 0x0451
     fd8:	81 7e       	andi	r24, 0xE1	; 225
     fda:	80 93 51 04 	sts	0x0451, r24
    MC.latch_tx();
     fde:	80 e5       	ldi	r24, 0x50	; 80
     fe0:	94 e0       	ldi	r25, 0x04	; 4
     fe2:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN17AFMotorController8latch_txEv>
     fe6:	08 95       	ret

00000fe8 <_ZN10AF_DCMotor3runEh>:
  }
}

void AF_DCMotor::run(uint8_t cmd) {
  uint8_t a, b;
  switch (motornum) {
     fe8:	fc 01       	movw	r30, r24
     fea:	80 81       	ld	r24, Z
     fec:	82 30       	cpi	r24, 0x02	; 2
     fee:	09 f4       	brne	.+2      	; 0xff2 <_ZN10AF_DCMotor3runEh+0xa>
     ff0:	6a c0       	rjmp	.+212    	; 0x10c6 <_ZN10AF_DCMotor3runEh+0xde>
     ff2:	83 30       	cpi	r24, 0x03	; 3
     ff4:	30 f0       	brcs	.+12     	; 0x1002 <_ZN10AF_DCMotor3runEh+0x1a>
     ff6:	83 30       	cpi	r24, 0x03	; 3
     ff8:	09 f4       	brne	.+2      	; 0xffc <_ZN10AF_DCMotor3runEh+0x14>
     ffa:	62 c0       	rjmp	.+196    	; 0x10c0 <_ZN10AF_DCMotor3runEh+0xd8>
     ffc:	84 30       	cpi	r24, 0x04	; 4
     ffe:	39 f1       	breq	.+78     	; 0x104e <_ZN10AF_DCMotor3runEh+0x66>
    1000:	08 95       	ret
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	e9 f7       	brne	.-6      	; 0x1000 <_ZN10AF_DCMotor3runEh+0x18>
    1006:	83 e0       	ldi	r24, 0x03	; 3
    1008:	92 e0       	ldi	r25, 0x02	; 2
    a = MOTOR4_A; b = MOTOR4_B; break;
  default:
    return;
  }
  
  switch (cmd) {
    100a:	62 30       	cpi	r22, 0x02	; 2
    100c:	21 f1       	breq	.+72     	; 0x1056 <_ZN10AF_DCMotor3runEh+0x6e>
    100e:	64 30       	cpi	r22, 0x04	; 4
    1010:	09 f4       	brne	.+2      	; 0x1014 <_ZN10AF_DCMotor3runEh+0x2c>
    1012:	3b c0       	rjmp	.+118    	; 0x108a <_ZN10AF_DCMotor3runEh+0xa2>
    1014:	61 30       	cpi	r22, 0x01	; 1
    1016:	a1 f7       	brne	.-24     	; 0x1000 <_ZN10AF_DCMotor3runEh+0x18>
  case FORWARD:
    latch_state |= _BV(a);
    latch_state &= ~_BV(b); 
    1018:	21 e0       	ldi	r18, 0x01	; 1
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	a9 01       	movw	r20, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <_ZN10AF_DCMotor3runEh+0x3c>
    1020:	44 0f       	add	r20, r20
    1022:	55 1f       	adc	r21, r21
    1024:	8a 95       	dec	r24
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <_ZN10AF_DCMotor3runEh+0x38>
    1028:	84 2f       	mov	r24, r20
    102a:	80 95       	com	r24
    102c:	a9 01       	movw	r20, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <_ZN10AF_DCMotor3runEh+0x4c>
    1030:	44 0f       	add	r20, r20
    1032:	55 1f       	adc	r21, r21
    1034:	9a 95       	dec	r25
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <_ZN10AF_DCMotor3runEh+0x48>
    1038:	20 91 51 04 	lds	r18, 0x0451
    103c:	24 2b       	or	r18, r20
    103e:	82 23       	and	r24, r18
    1040:	80 93 51 04 	sts	0x0451, r24
    MC.latch_tx();
    1044:	80 e5       	ldi	r24, 0x50	; 80
    1046:	94 e0       	ldi	r25, 0x04	; 4
    1048:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN17AFMotorController8latch_txEv>
    break;
    104c:	08 95       	ret
  case 1:
    a = MOTOR1_A; b = MOTOR1_B; break;
  case 2:
    a = MOTOR2_A; b = MOTOR2_B; break;
  case 3:
    a = MOTOR3_A; b = MOTOR3_B; break;
    104e:	86 e0       	ldi	r24, 0x06	; 6
    1050:	90 e0       	ldi	r25, 0x00	; 0
    a = MOTOR4_A; b = MOTOR4_B; break;
  default:
    return;
  }
  
  switch (cmd) {
    1052:	62 30       	cpi	r22, 0x02	; 2
    1054:	e1 f6       	brne	.-72     	; 0x100e <_ZN10AF_DCMotor3runEh+0x26>
    latch_state &= ~_BV(b); 
    MC.latch_tx();
    break;
  case BACKWARD:
    latch_state &= ~_BV(a);
    latch_state |= _BV(b); 
    1056:	21 e0       	ldi	r18, 0x01	; 1
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	a9 01       	movw	r20, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <_ZN10AF_DCMotor3runEh+0x7a>
    105e:	44 0f       	add	r20, r20
    1060:	55 1f       	adc	r21, r21
    1062:	9a 95       	dec	r25
    1064:	e2 f7       	brpl	.-8      	; 0x105e <_ZN10AF_DCMotor3runEh+0x76>
    1066:	94 2f       	mov	r25, r20
    1068:	90 95       	com	r25
    106a:	40 91 51 04 	lds	r20, 0x0451
    106e:	94 23       	and	r25, r20
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <_ZN10AF_DCMotor3runEh+0x8e>
    1072:	22 0f       	add	r18, r18
    1074:	33 1f       	adc	r19, r19
    1076:	8a 95       	dec	r24
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <_ZN10AF_DCMotor3runEh+0x8a>
    107a:	92 2b       	or	r25, r18
    107c:	90 93 51 04 	sts	0x0451, r25
    MC.latch_tx();
    1080:	80 e5       	ldi	r24, 0x50	; 80
    1082:	94 e0       	ldi	r25, 0x04	; 4
    1084:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN17AFMotorController8latch_txEv>
    break;
    1088:	08 95       	ret
  case RELEASE:
    latch_state &= ~_BV(a);
    latch_state &= ~_BV(b); 
    108a:	21 e0       	ldi	r18, 0x01	; 1
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	a9 01       	movw	r20, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <_ZN10AF_DCMotor3runEh+0xae>
    1092:	44 0f       	add	r20, r20
    1094:	55 1f       	adc	r21, r21
    1096:	9a 95       	dec	r25
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <_ZN10AF_DCMotor3runEh+0xaa>
    109a:	b9 01       	movw	r22, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <_ZN10AF_DCMotor3runEh+0xba>
    109e:	66 0f       	add	r22, r22
    10a0:	77 1f       	adc	r23, r23
    10a2:	8a 95       	dec	r24
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <_ZN10AF_DCMotor3runEh+0xb6>
    10a6:	cb 01       	movw	r24, r22
    10a8:	84 2b       	or	r24, r20
    10aa:	80 95       	com	r24
    10ac:	20 91 51 04 	lds	r18, 0x0451
    10b0:	28 23       	and	r18, r24
    10b2:	20 93 51 04 	sts	0x0451, r18
    MC.latch_tx();
    10b6:	80 e5       	ldi	r24, 0x50	; 80
    10b8:	94 e0       	ldi	r25, 0x04	; 4
    10ba:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN17AFMotorController8latch_txEv>
    10be:	08 95       	ret
  }
}

void AF_DCMotor::run(uint8_t cmd) {
  uint8_t a, b;
  switch (motornum) {
    10c0:	87 e0       	ldi	r24, 0x07	; 7
    10c2:	95 e0       	ldi	r25, 0x05	; 5
  case 1:
    a = MOTOR1_A; b = MOTOR1_B; break;
  case 2:
    a = MOTOR2_A; b = MOTOR2_B; break;
  case 3:
    a = MOTOR3_A; b = MOTOR3_B; break;
    10c4:	a2 cf       	rjmp	.-188    	; 0x100a <_ZN10AF_DCMotor3runEh+0x22>
  }
}

void AF_DCMotor::run(uint8_t cmd) {
  uint8_t a, b;
  switch (motornum) {
    10c6:	84 e0       	ldi	r24, 0x04	; 4
    10c8:	91 e0       	ldi	r25, 0x01	; 1
    10ca:	9f cf       	rjmp	.-194    	; 0x100a <_ZN10AF_DCMotor3runEh+0x22>

000010cc <_ZN17AFMotorController6enableEv>:
#endif

AFMotorController::AFMotorController(void) {
}

void AFMotorController::enable(void) {
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	ec 01       	movw	r28, r24
  LATCH_DDR |= _BV(LATCH);
  ENABLE_DDR |= _BV(ENABLE);
  CLK_DDR |= _BV(CLK);
  SER_DDR |= _BV(SER);
  */
  pinMode(MOTORLATCH, OUTPUT);
    10d2:	8c e0       	ldi	r24, 0x0C	; 12
    10d4:	61 e0       	ldi	r22, 0x01	; 1
    10d6:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
  pinMode(MOTORENABLE, OUTPUT);
    10da:	87 e0       	ldi	r24, 0x07	; 7
    10dc:	61 e0       	ldi	r22, 0x01	; 1
    10de:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
  pinMode(MOTORDATA, OUTPUT);
    10e2:	88 e0       	ldi	r24, 0x08	; 8
    10e4:	61 e0       	ldi	r22, 0x01	; 1
    10e6:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
  pinMode(MOTORCLK, OUTPUT);
    10ea:	84 e0       	ldi	r24, 0x04	; 4
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>

  latch_state = 0;
    10f2:	10 92 51 04 	sts	0x0451, r1

  latch_tx();  // "reset"
    10f6:	ce 01       	movw	r24, r28
    10f8:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN17AFMotorController8latch_txEv>

  //ENABLE_PORT &= ~_BV(ENABLE); // enable the chip outputs!
  digitalWrite(MOTORENABLE, LOW);
    10fc:	87 e0       	ldi	r24, 0x07	; 7
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
}
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	08 95       	ret

0000110a <_ZN10AF_StepperC1Ejh>:

/******************************************
               STEPPERS
******************************************/

AF_Stepper::AF_Stepper(uint16_t steps, uint8_t num) {
    110a:	ef 92       	push	r14
    110c:	ff 92       	push	r15
    110e:	1f 93       	push	r17
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	ec 01       	movw	r28, r24
    1116:	7b 01       	movw	r14, r22
    1118:	14 2f       	mov	r17, r20
  MC.enable();
    111a:	80 e5       	ldi	r24, 0x50	; 80
    111c:	94 e0       	ldi	r25, 0x04	; 4
    111e:	0e 94 66 08 	call	0x10cc	; 0x10cc <_ZN17AFMotorController6enableEv>

  revsteps = steps;
    1122:	f9 82       	std	Y+1, r15	; 0x01
    1124:	e8 82       	st	Y, r14
  steppernum = num;
    1126:	1a 83       	std	Y+2, r17	; 0x02
  currentstep = 0;
    1128:	1b 86       	std	Y+11, r1	; 0x0b

  if (steppernum == 1) {
    112a:	11 30       	cpi	r17, 0x01	; 1
    112c:	d1 f1       	breq	.+116    	; 0x11a2 <_ZN10AF_StepperC1Ejh+0x98>
    initPWM1(MOTOR12_64KHZ);
    initPWM2(MOTOR12_64KHZ);
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    112e:	12 30       	cpi	r17, 0x02	; 2
    1130:	31 f0       	breq	.+12     	; 0x113e <_ZN10AF_StepperC1Ejh+0x34>
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	ff 90       	pop	r15
    113a:	ef 90       	pop	r14
    113c:	08 95       	ret
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B) &
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    113e:	80 91 51 04 	lds	r24, 0x0451
    1142:	8e 71       	andi	r24, 0x1E	; 30
    1144:	80 93 51 04 	sts	0x0451, r24
    MC.latch_tx();
    1148:	80 e5       	ldi	r24, 0x50	; 80
    114a:	94 e0       	ldi	r25, 0x04	; 4
    114c:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN17AFMotorController8latch_txEv>

    // enable both H bridges
    pinMode(5, OUTPUT);
    1150:	85 e0       	ldi	r24, 0x05	; 5
    1152:	61 e0       	ldi	r22, 0x01	; 1
    1154:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    pinMode(6, OUTPUT);
    1158:	86 e0       	ldi	r24, 0x06	; 6
    115a:	61 e0       	ldi	r22, 0x01	; 1
    115c:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    digitalWrite(5, HIGH);
    1160:	85 e0       	ldi	r24, 0x05	; 5
    1162:	61 e0       	ldi	r22, 0x01	; 1
    1164:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
    digitalWrite(6, HIGH);
    1168:	86 e0       	ldi	r24, 0x06	; 6
    116a:	61 e0       	ldi	r22, 0x01	; 1
    116c:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    1170:	84 b5       	in	r24, 0x24	; 36
    1172:	83 68       	ori	r24, 0x83	; 131
    1174:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    1176:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    1178:	86 e0       	ldi	r24, 0x06	; 6
    117a:	61 e0       	ldi	r22, 0x01	; 1
    117c:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    1180:	84 b5       	in	r24, 0x24	; 36
    1182:	83 62       	ori	r24, 0x23	; 35
    1184:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    1186:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    1188:	85 e0       	ldi	r24, 0x05	; 5
    118a:	61 e0       	ldi	r22, 0x01	; 1
    118c:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    1190:	8f ef       	ldi	r24, 0xFF	; 255
    1192:	87 bd       	out	0x27, r24	; 39
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    1194:	88 bd       	out	0x28, r24	; 40
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
    119c:	ff 90       	pop	r15
    119e:	ef 90       	pop	r14
    11a0:	08 95       	ret
  steppernum = num;
  currentstep = 0;

  if (steppernum == 1) {
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    11a2:	80 91 51 04 	lds	r24, 0x0451
    11a6:	81 7e       	andi	r24, 0xE1	; 225
    11a8:	80 93 51 04 	sts	0x0451, r24
    MC.latch_tx();
    11ac:	80 e5       	ldi	r24, 0x50	; 80
    11ae:	94 e0       	ldi	r25, 0x04	; 4
    11b0:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN17AFMotorController8latch_txEv>
    
    // enable both H bridges
    pinMode(11, OUTPUT);
    11b4:	8b e0       	ldi	r24, 0x0B	; 11
    11b6:	61 e0       	ldi	r22, 0x01	; 1
    11b8:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    pinMode(3, OUTPUT);
    11bc:	83 e0       	ldi	r24, 0x03	; 3
    11be:	61 e0       	ldi	r22, 0x01	; 1
    11c0:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    digitalWrite(11, HIGH);
    11c4:	8b e0       	ldi	r24, 0x0B	; 11
    11c6:	61 e0       	ldi	r22, 0x01	; 1
    11c8:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
    digitalWrite(3, HIGH);
    11cc:	83 e0       	ldi	r24, 0x03	; 3
    11ce:	61 e0       	ldi	r22, 0x01	; 1
    11d0:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    11d4:	80 91 b0 00 	lds	r24, 0x00B0
    11d8:	83 68       	ori	r24, 0x83	; 131
    11da:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    11de:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    11e2:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    11e6:	8b e0       	ldi	r24, 0x0B	; 11
    11e8:	61 e0       	ldi	r22, 0x01	; 1
    11ea:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    11ee:	80 91 b0 00 	lds	r24, 0x00B0
    11f2:	83 62       	ori	r24, 0x23	; 35
    11f4:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    11f8:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    11fc:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    1200:	83 e0       	ldi	r24, 0x03	; 3
    1202:	61 e0       	ldi	r22, 0x01	; 1
    1204:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    1208:	8f ef       	ldi	r24, 0xFF	; 255
    120a:	80 93 b3 00 	sts	0x00B3, r24
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    120e:	80 93 b4 00 	sts	0x00B4, r24
    1212:	8f cf       	rjmp	.-226    	; 0x1132 <_ZN10AF_StepperC1Ejh+0x28>

00001214 <_ZN10AF_DCMotorC2Ehh>:
#else
   #error "This chip is not supported!"
#endif
}

AF_DCMotor::AF_DCMotor(uint8_t num, uint8_t freq) {
    1214:	1f 93       	push	r17
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	0f 92       	push	r0
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	fc 01       	movw	r30, r24
    1222:	14 2f       	mov	r17, r20
  motornum = num;
    1224:	60 83       	st	Z, r22
  pwmfreq = freq;
    1226:	41 83       	std	Z+1, r20	; 0x01

  MC.enable();
    1228:	80 e5       	ldi	r24, 0x50	; 80
    122a:	94 e0       	ldi	r25, 0x04	; 4
    122c:	69 83       	std	Y+1, r22	; 0x01
    122e:	0e 94 66 08 	call	0x10cc	; 0x10cc <_ZN17AFMotorController6enableEv>

  switch (num) {
    1232:	69 81       	ldd	r22, Y+1	; 0x01
    1234:	62 30       	cpi	r22, 0x02	; 2
    1236:	09 f4       	brne	.+2      	; 0x123a <_ZN10AF_DCMotorC2Ehh+0x26>
    1238:	50 c0       	rjmp	.+160    	; 0x12da <_ZN10AF_DCMotorC2Ehh+0xc6>
    123a:	63 30       	cpi	r22, 0x03	; 3
    123c:	f0 f4       	brcc	.+60     	; 0x127a <_ZN10AF_DCMotorC2Ehh+0x66>
    123e:	61 30       	cpi	r22, 0x01	; 1
    1240:	b9 f4       	brne	.+46     	; 0x1270 <_ZN10AF_DCMotorC2Ehh+0x5c>
  case 1:
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    1242:	80 91 51 04 	lds	r24, 0x0451
    1246:	83 7f       	andi	r24, 0xF3	; 243
    1248:	80 93 51 04 	sts	0x0451, r24
    MC.latch_tx();
    124c:	80 e5       	ldi	r24, 0x50	; 80
    124e:	94 e0       	ldi	r25, 0x04	; 4
    1250:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    1254:	80 91 b0 00 	lds	r24, 0x00B0
    1258:	83 68       	ori	r24, 0x83	; 131
    125a:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    125e:	17 70       	andi	r17, 0x07	; 7
    1260:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    1264:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    1268:	8b e0       	ldi	r24, 0x0B	; 11
    126a:	61 e0       	ldi	r22, 0x01	; 1
    126c:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1270:	0f 90       	pop	r0
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	1f 91       	pop	r17
    1278:	08 95       	ret
  motornum = num;
  pwmfreq = freq;

  MC.enable();

  switch (num) {
    127a:	63 30       	cpi	r22, 0x03	; 3
    127c:	c1 f0       	breq	.+48     	; 0x12ae <_ZN10AF_DCMotorC2Ehh+0x9a>
    127e:	64 30       	cpi	r22, 0x04	; 4
    1280:	b9 f7       	brne	.-18     	; 0x1270 <_ZN10AF_DCMotorC2Ehh+0x5c>
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM3(freq);
    break;
  case 4:
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    1282:	80 91 51 04 	lds	r24, 0x0451
    1286:	8e 7b       	andi	r24, 0xBE	; 190
    1288:	80 93 51 04 	sts	0x0451, r24
    MC.latch_tx();
    128c:	80 e5       	ldi	r24, 0x50	; 80
    128e:	94 e0       	ldi	r25, 0x04	; 4
    1290:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    1294:	84 b5       	in	r24, 0x24	; 36
    1296:	83 62       	ori	r24, 0x23	; 35
    1298:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    129a:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    129c:	85 e0       	ldi	r24, 0x05	; 5
    129e:	61 e0       	ldi	r22, 0x01	; 1
    12a0:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	1f 91       	pop	r17
    12ac:	08 95       	ret
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM2(freq);
    break;
  case 3:
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    12ae:	80 91 51 04 	lds	r24, 0x0451
    12b2:	8f 75       	andi	r24, 0x5F	; 95
    12b4:	80 93 51 04 	sts	0x0451, r24
    MC.latch_tx();
    12b8:	80 e5       	ldi	r24, 0x50	; 80
    12ba:	94 e0       	ldi	r25, 0x04	; 4
    12bc:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    12c0:	84 b5       	in	r24, 0x24	; 36
    12c2:	83 68       	ori	r24, 0x83	; 131
    12c4:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    12c6:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    12c8:	86 e0       	ldi	r24, 0x06	; 6
    12ca:	61 e0       	ldi	r22, 0x01	; 1
    12cc:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    12d0:	0f 90       	pop	r0
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	1f 91       	pop	r17
    12d8:	08 95       	ret
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM1(freq);
    break;
  case 2:
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    12da:	80 91 51 04 	lds	r24, 0x0451
    12de:	8d 7e       	andi	r24, 0xED	; 237
    12e0:	80 93 51 04 	sts	0x0451, r24
    MC.latch_tx();
    12e4:	80 e5       	ldi	r24, 0x50	; 80
    12e6:	94 e0       	ldi	r25, 0x04	; 4
    12e8:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    12ec:	80 91 b0 00 	lds	r24, 0x00B0
    12f0:	83 62       	ori	r24, 0x23	; 35
    12f2:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    12f6:	17 70       	andi	r17, 0x07	; 7
    12f8:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    12fc:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    1300:	83 e0       	ldi	r24, 0x03	; 3
    1302:	61 e0       	ldi	r22, 0x01	; 1
    1304:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	1f 91       	pop	r17
    1310:	08 95       	ret

00001312 <_ZN10AF_DCMotorC1Ehh>:
#else
   #error "This chip is not supported!"
#endif
}

AF_DCMotor::AF_DCMotor(uint8_t num, uint8_t freq) {
    1312:	1f 93       	push	r17
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	0f 92       	push	r0
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	fc 01       	movw	r30, r24
    1320:	14 2f       	mov	r17, r20
  motornum = num;
    1322:	60 83       	st	Z, r22
  pwmfreq = freq;
    1324:	41 83       	std	Z+1, r20	; 0x01

  MC.enable();
    1326:	80 e5       	ldi	r24, 0x50	; 80
    1328:	94 e0       	ldi	r25, 0x04	; 4
    132a:	69 83       	std	Y+1, r22	; 0x01
    132c:	0e 94 66 08 	call	0x10cc	; 0x10cc <_ZN17AFMotorController6enableEv>

  switch (num) {
    1330:	69 81       	ldd	r22, Y+1	; 0x01
    1332:	62 30       	cpi	r22, 0x02	; 2
    1334:	09 f4       	brne	.+2      	; 0x1338 <_ZN10AF_DCMotorC1Ehh+0x26>
    1336:	50 c0       	rjmp	.+160    	; 0x13d8 <_ZN10AF_DCMotorC1Ehh+0xc6>
    1338:	63 30       	cpi	r22, 0x03	; 3
    133a:	f0 f4       	brcc	.+60     	; 0x1378 <_ZN10AF_DCMotorC1Ehh+0x66>
    133c:	61 30       	cpi	r22, 0x01	; 1
    133e:	b9 f4       	brne	.+46     	; 0x136e <_ZN10AF_DCMotorC1Ehh+0x5c>
  case 1:
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    1340:	80 91 51 04 	lds	r24, 0x0451
    1344:	83 7f       	andi	r24, 0xF3	; 243
    1346:	80 93 51 04 	sts	0x0451, r24
    MC.latch_tx();
    134a:	80 e5       	ldi	r24, 0x50	; 80
    134c:	94 e0       	ldi	r25, 0x04	; 4
    134e:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    1352:	80 91 b0 00 	lds	r24, 0x00B0
    1356:	83 68       	ori	r24, 0x83	; 131
    1358:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    135c:	17 70       	andi	r17, 0x07	; 7
    135e:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    1362:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    1366:	8b e0       	ldi	r24, 0x0B	; 11
    1368:	61 e0       	ldi	r22, 0x01	; 1
    136a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    136e:	0f 90       	pop	r0
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	1f 91       	pop	r17
    1376:	08 95       	ret
  motornum = num;
  pwmfreq = freq;

  MC.enable();

  switch (num) {
    1378:	63 30       	cpi	r22, 0x03	; 3
    137a:	c1 f0       	breq	.+48     	; 0x13ac <_ZN10AF_DCMotorC1Ehh+0x9a>
    137c:	64 30       	cpi	r22, 0x04	; 4
    137e:	b9 f7       	brne	.-18     	; 0x136e <_ZN10AF_DCMotorC1Ehh+0x5c>
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM3(freq);
    break;
  case 4:
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    1380:	80 91 51 04 	lds	r24, 0x0451
    1384:	8e 7b       	andi	r24, 0xBE	; 190
    1386:	80 93 51 04 	sts	0x0451, r24
    MC.latch_tx();
    138a:	80 e5       	ldi	r24, 0x50	; 80
    138c:	94 e0       	ldi	r25, 0x04	; 4
    138e:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    1392:	84 b5       	in	r24, 0x24	; 36
    1394:	83 62       	ori	r24, 0x23	; 35
    1396:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    1398:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    139a:	85 e0       	ldi	r24, 0x05	; 5
    139c:	61 e0       	ldi	r22, 0x01	; 1
    139e:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    13a2:	0f 90       	pop	r0
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	1f 91       	pop	r17
    13aa:	08 95       	ret
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM2(freq);
    break;
  case 3:
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    13ac:	80 91 51 04 	lds	r24, 0x0451
    13b0:	8f 75       	andi	r24, 0x5F	; 95
    13b2:	80 93 51 04 	sts	0x0451, r24
    MC.latch_tx();
    13b6:	80 e5       	ldi	r24, 0x50	; 80
    13b8:	94 e0       	ldi	r25, 0x04	; 4
    13ba:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    13be:	84 b5       	in	r24, 0x24	; 36
    13c0:	83 68       	ori	r24, 0x83	; 131
    13c2:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    13c4:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    13c6:	86 e0       	ldi	r24, 0x06	; 6
    13c8:	61 e0       	ldi	r22, 0x01	; 1
    13ca:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    13ce:	0f 90       	pop	r0
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	1f 91       	pop	r17
    13d6:	08 95       	ret
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM1(freq);
    break;
  case 2:
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    13d8:	80 91 51 04 	lds	r24, 0x0451
    13dc:	8d 7e       	andi	r24, 0xED	; 237
    13de:	80 93 51 04 	sts	0x0451, r24
    MC.latch_tx();
    13e2:	80 e5       	ldi	r24, 0x50	; 80
    13e4:	94 e0       	ldi	r25, 0x04	; 4
    13e6:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    13ea:	80 91 b0 00 	lds	r24, 0x00B0
    13ee:	83 62       	ori	r24, 0x23	; 35
    13f0:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    13f4:	17 70       	andi	r17, 0x07	; 7
    13f6:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    13fa:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    13fe:	83 e0       	ldi	r24, 0x03	; 3
    1400:	61 e0       	ldi	r22, 0x01	; 1
    1402:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1406:	0f 90       	pop	r0
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	1f 91       	pop	r17
    140e:	08 95       	ret

00001410 <_ZN10AF_StepperC2Ejh>:

/******************************************
               STEPPERS
******************************************/

AF_Stepper::AF_Stepper(uint16_t steps, uint8_t num) {
    1410:	ef 92       	push	r14
    1412:	ff 92       	push	r15
    1414:	1f 93       	push	r17
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	ec 01       	movw	r28, r24
    141c:	7b 01       	movw	r14, r22
    141e:	14 2f       	mov	r17, r20
  MC.enable();
    1420:	80 e5       	ldi	r24, 0x50	; 80
    1422:	94 e0       	ldi	r25, 0x04	; 4
    1424:	0e 94 66 08 	call	0x10cc	; 0x10cc <_ZN17AFMotorController6enableEv>

  revsteps = steps;
    1428:	f9 82       	std	Y+1, r15	; 0x01
    142a:	e8 82       	st	Y, r14
  steppernum = num;
    142c:	1a 83       	std	Y+2, r17	; 0x02
  currentstep = 0;
    142e:	1b 86       	std	Y+11, r1	; 0x0b

  if (steppernum == 1) {
    1430:	11 30       	cpi	r17, 0x01	; 1
    1432:	d1 f1       	breq	.+116    	; 0x14a8 <_ZN10AF_StepperC2Ejh+0x98>
    initPWM1(MOTOR12_64KHZ);
    initPWM2(MOTOR12_64KHZ);
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    1434:	12 30       	cpi	r17, 0x02	; 2
    1436:	31 f0       	breq	.+12     	; 0x1444 <_ZN10AF_StepperC2Ejh+0x34>
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	1f 91       	pop	r17
    143e:	ff 90       	pop	r15
    1440:	ef 90       	pop	r14
    1442:	08 95       	ret
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B) &
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    1444:	80 91 51 04 	lds	r24, 0x0451
    1448:	8e 71       	andi	r24, 0x1E	; 30
    144a:	80 93 51 04 	sts	0x0451, r24
    MC.latch_tx();
    144e:	80 e5       	ldi	r24, 0x50	; 80
    1450:	94 e0       	ldi	r25, 0x04	; 4
    1452:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN17AFMotorController8latch_txEv>

    // enable both H bridges
    pinMode(5, OUTPUT);
    1456:	85 e0       	ldi	r24, 0x05	; 5
    1458:	61 e0       	ldi	r22, 0x01	; 1
    145a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    pinMode(6, OUTPUT);
    145e:	86 e0       	ldi	r24, 0x06	; 6
    1460:	61 e0       	ldi	r22, 0x01	; 1
    1462:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    digitalWrite(5, HIGH);
    1466:	85 e0       	ldi	r24, 0x05	; 5
    1468:	61 e0       	ldi	r22, 0x01	; 1
    146a:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
    digitalWrite(6, HIGH);
    146e:	86 e0       	ldi	r24, 0x06	; 6
    1470:	61 e0       	ldi	r22, 0x01	; 1
    1472:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    1476:	84 b5       	in	r24, 0x24	; 36
    1478:	83 68       	ori	r24, 0x83	; 131
    147a:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    147c:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    147e:	86 e0       	ldi	r24, 0x06	; 6
    1480:	61 e0       	ldi	r22, 0x01	; 1
    1482:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    1486:	84 b5       	in	r24, 0x24	; 36
    1488:	83 62       	ori	r24, 0x23	; 35
    148a:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    148c:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    148e:	85 e0       	ldi	r24, 0x05	; 5
    1490:	61 e0       	ldi	r22, 0x01	; 1
    1492:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    1496:	8f ef       	ldi	r24, 0xFF	; 255
    1498:	87 bd       	out	0x27, r24	; 39
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    149a:	88 bd       	out	0x28, r24	; 40
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	1f 91       	pop	r17
    14a2:	ff 90       	pop	r15
    14a4:	ef 90       	pop	r14
    14a6:	08 95       	ret
  steppernum = num;
  currentstep = 0;

  if (steppernum == 1) {
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    14a8:	80 91 51 04 	lds	r24, 0x0451
    14ac:	81 7e       	andi	r24, 0xE1	; 225
    14ae:	80 93 51 04 	sts	0x0451, r24
    MC.latch_tx();
    14b2:	80 e5       	ldi	r24, 0x50	; 80
    14b4:	94 e0       	ldi	r25, 0x04	; 4
    14b6:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN17AFMotorController8latch_txEv>
    
    // enable both H bridges
    pinMode(11, OUTPUT);
    14ba:	8b e0       	ldi	r24, 0x0B	; 11
    14bc:	61 e0       	ldi	r22, 0x01	; 1
    14be:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    pinMode(3, OUTPUT);
    14c2:	83 e0       	ldi	r24, 0x03	; 3
    14c4:	61 e0       	ldi	r22, 0x01	; 1
    14c6:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    digitalWrite(11, HIGH);
    14ca:	8b e0       	ldi	r24, 0x0B	; 11
    14cc:	61 e0       	ldi	r22, 0x01	; 1
    14ce:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
    digitalWrite(3, HIGH);
    14d2:	83 e0       	ldi	r24, 0x03	; 3
    14d4:	61 e0       	ldi	r22, 0x01	; 1
    14d6:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    14da:	80 91 b0 00 	lds	r24, 0x00B0
    14de:	83 68       	ori	r24, 0x83	; 131
    14e0:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    14e4:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    14e8:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    14ec:	8b e0       	ldi	r24, 0x0B	; 11
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    14f4:	80 91 b0 00 	lds	r24, 0x00B0
    14f8:	83 62       	ori	r24, 0x23	; 35
    14fa:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    14fe:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    1502:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    1506:	83 e0       	ldi	r24, 0x03	; 3
    1508:	61 e0       	ldi	r22, 0x01	; 1
    150a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    150e:	8f ef       	ldi	r24, 0xFF	; 255
    1510:	80 93 b3 00 	sts	0x00B3, r24
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    1514:	80 93 b4 00 	sts	0x00B4, r24
    1518:	8f cf       	rjmp	.-226    	; 0x1438 <_ZN10AF_StepperC2Ejh+0x28>

0000151a <__vector_18>:
  }
}

#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
  {
    151a:	1f 92       	push	r1
    151c:	0f 92       	push	r0
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	0f 92       	push	r0
    1522:	11 24       	eor	r1, r1
    1524:	2f 93       	push	r18
    1526:	3f 93       	push	r19
    1528:	4f 93       	push	r20
    152a:	5f 93       	push	r21
    152c:	6f 93       	push	r22
    152e:	8f 93       	push	r24
    1530:	9f 93       	push	r25
    1532:	ef 93       	push	r30
    1534:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    1536:	60 91 c6 00 	lds	r22, 0x00C6
  ring_buffer rx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *rx_buffer)
{
  int i = (unsigned int)(rx_buffer->head + 1) % RX_BUFFER_SIZE;
    153a:	20 91 d2 04 	lds	r18, 0x04D2
    153e:	30 91 d3 04 	lds	r19, 0x04D3
    1542:	c9 01       	movw	r24, r18
    1544:	01 96       	adiw	r24, 0x01	; 1
    1546:	8f 77       	andi	r24, 0x7F	; 127
    1548:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != rx_buffer->tail) {
    154a:	40 91 d4 04 	lds	r20, 0x04D4
    154e:	50 91 d5 04 	lds	r21, 0x04D5
    1552:	84 17       	cp	r24, r20
    1554:	95 07       	cpc	r25, r21
    1556:	41 f0       	breq	.+16     	; 0x1568 <__vector_18+0x4e>
    rx_buffer->buffer[rx_buffer->head] = c;
    1558:	2e 5a       	subi	r18, 0xAE	; 174
    155a:	3b 4f       	sbci	r19, 0xFB	; 251
    155c:	f9 01       	movw	r30, r18
    155e:	60 83       	st	Z, r22
    rx_buffer->head = i;
    1560:	90 93 d3 04 	sts	0x04D3, r25
    1564:	80 93 d2 04 	sts	0x04D2, r24
    unsigned char c  =  UDR;  //  atmega8535
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    1568:	ff 91       	pop	r31
    156a:	ef 91       	pop	r30
    156c:	9f 91       	pop	r25
    156e:	8f 91       	pop	r24
    1570:	6f 91       	pop	r22
    1572:	5f 91       	pop	r21
    1574:	4f 91       	pop	r20
    1576:	3f 91       	pop	r19
    1578:	2f 91       	pop	r18
    157a:	0f 90       	pop	r0
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	0f 90       	pop	r0
    1580:	1f 90       	pop	r1
    1582:	18 95       	reti

00001584 <_ZN14HardwareSerialC2EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:



// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
    1584:	8f 92       	push	r8
    1586:	af 92       	push	r10
    1588:	cf 92       	push	r12
    158a:	df 92       	push	r13
    158c:	ef 92       	push	r14
    158e:	ff 92       	push	r15
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	fc 01       	movw	r30, r24
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    159e:	86 e5       	ldi	r24, 0x56	; 86
    15a0:	91 e0       	ldi	r25, 0x01	; 1
    15a2:	91 83       	std	Z+1, r25	; 0x01
    15a4:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    15a6:	73 83       	std	Z+3, r23	; 0x03
    15a8:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
    15aa:	55 83       	std	Z+5, r21	; 0x05
    15ac:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
    15ae:	37 83       	std	Z+7, r19	; 0x07
    15b0:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
    15b2:	11 87       	std	Z+9, r17	; 0x09
    15b4:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
    15b6:	f3 86       	std	Z+11, r15	; 0x0b
    15b8:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
    15ba:	d5 86       	std	Z+13, r13	; 0x0d
    15bc:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
    15be:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
    15c0:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
    15c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c4:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
    15c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    15c8:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
    15ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    15cc:	82 8b       	std	Z+18, r24	; 0x12
}
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	ff 90       	pop	r15
    15d8:	ef 90       	pop	r14
    15da:	df 90       	pop	r13
    15dc:	cf 90       	pop	r12
    15de:	af 90       	pop	r10
    15e0:	8f 90       	pop	r8
    15e2:	08 95       	ret

000015e4 <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:



// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
    15e4:	8f 92       	push	r8
    15e6:	af 92       	push	r10
    15e8:	cf 92       	push	r12
    15ea:	df 92       	push	r13
    15ec:	ef 92       	push	r14
    15ee:	ff 92       	push	r15
    15f0:	0f 93       	push	r16
    15f2:	1f 93       	push	r17
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	fc 01       	movw	r30, r24
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    15fe:	86 e5       	ldi	r24, 0x56	; 86
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	91 83       	std	Z+1, r25	; 0x01
    1604:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    1606:	73 83       	std	Z+3, r23	; 0x03
    1608:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
    160a:	55 83       	std	Z+5, r21	; 0x05
    160c:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
    160e:	37 83       	std	Z+7, r19	; 0x07
    1610:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
    1612:	11 87       	std	Z+9, r17	; 0x09
    1614:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
    1616:	f3 86       	std	Z+11, r15	; 0x0b
    1618:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
    161a:	d5 86       	std	Z+13, r13	; 0x0d
    161c:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
    161e:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
    1620:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
    1622:	8d 85       	ldd	r24, Y+13	; 0x0d
    1624:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
    1626:	8e 85       	ldd	r24, Y+14	; 0x0e
    1628:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
    162a:	8f 85       	ldd	r24, Y+15	; 0x0f
    162c:	82 8b       	std	Z+18, r24	; 0x12
}
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	df 90       	pop	r13
    163c:	cf 90       	pop	r12
    163e:	af 90       	pop	r10
    1640:	8f 90       	pop	r8
    1642:	08 95       	ret

00001644 <_ZN14HardwareSerial5beginEl>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(long baud)
{
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	ec 01       	movw	r28, r24
    164a:	9a 01       	movw	r18, r20
    164c:	ab 01       	movw	r20, r22

#if F_CPU == 16000000UL
  // hardcoded exception for compatibility with the bootloader shipped
  // with the Duemilanove and previous boards and the firmware on the 8U2
  // on the Uno and Mega 2560.
  if (baud == 57600) {
    164e:	20 30       	cpi	r18, 0x00	; 0
    1650:	81 ee       	ldi	r24, 0xE1	; 225
    1652:	38 07       	cpc	r19, r24
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	48 07       	cpc	r20, r24
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	58 07       	cpc	r21, r24
    165c:	09 f4       	brne	.+2      	; 0x1660 <_ZN14HardwareSerial5beginEl+0x1c>
    165e:	48 c0       	rjmp	.+144    	; 0x16f0 <_ZN14HardwareSerial5beginEl+0xac>
    use_u2x = false;
  }
#endif
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    1660:	e8 85       	ldd	r30, Y+8	; 0x08
    1662:	f9 85       	ldd	r31, Y+9	; 0x09
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0a 88       	ldd	r0, Y+18	; 0x12
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <_ZN14HardwareSerial5beginEl+0x2c>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <_ZN14HardwareSerial5beginEl+0x28>
    1674:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1676:	60 e0       	ldi	r22, 0x00	; 0
    1678:	79 e0       	ldi	r23, 0x09	; 9
    167a:	8d e3       	ldi	r24, 0x3D	; 61
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e 94 3a 29 	call	0x5274	; 0x5274 <__udivmodsi4>
    1682:	21 50       	subi	r18, 0x01	; 1
    1684:	30 40       	sbci	r19, 0x00	; 0
    1686:	40 40       	sbci	r20, 0x00	; 0
    1688:	50 40       	sbci	r21, 0x00	; 0
    168a:	56 95       	lsr	r21
    168c:	47 95       	ror	r20
    168e:	37 95       	ror	r19
    1690:	27 95       	ror	r18
    1692:	83 2f       	mov	r24, r19
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1694:	ec 81       	ldd	r30, Y+4	; 0x04
    1696:	fd 81       	ldd	r31, Y+5	; 0x05
    1698:	80 83       	st	Z, r24
  *_ubrrl = baud_setting;
    169a:	ee 81       	ldd	r30, Y+6	; 0x06
    169c:	ff 81       	ldd	r31, Y+7	; 0x07
    169e:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    16a0:	ea 85       	ldd	r30, Y+10	; 0x0a
    16a2:	fb 85       	ldd	r31, Y+11	; 0x0b
    16a4:	80 81       	ld	r24, Z
    16a6:	21 e0       	ldi	r18, 0x01	; 1
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	a9 01       	movw	r20, r18
    16ac:	0e 84       	ldd	r0, Y+14	; 0x0e
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <_ZN14HardwareSerial5beginEl+0x70>
    16b0:	44 0f       	add	r20, r20
    16b2:	55 1f       	adc	r21, r21
    16b4:	0a 94       	dec	r0
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <_ZN14HardwareSerial5beginEl+0x6c>
    16b8:	84 2b       	or	r24, r20
    16ba:	80 83       	st	Z, r24
  sbi(*_ucsrb, _txen);
    16bc:	ea 85       	ldd	r30, Y+10	; 0x0a
    16be:	fb 85       	ldd	r31, Y+11	; 0x0b
    16c0:	80 81       	ld	r24, Z
    16c2:	a9 01       	movw	r20, r18
    16c4:	0f 84       	ldd	r0, Y+15	; 0x0f
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <_ZN14HardwareSerial5beginEl+0x88>
    16c8:	44 0f       	add	r20, r20
    16ca:	55 1f       	adc	r21, r21
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <_ZN14HardwareSerial5beginEl+0x84>
    16d0:	84 2b       	or	r24, r20
    16d2:	80 83       	st	Z, r24
  sbi(*_ucsrb, _rxcie);
    16d4:	ea 85       	ldd	r30, Y+10	; 0x0a
    16d6:	fb 85       	ldd	r31, Y+11	; 0x0b
    16d8:	80 81       	ld	r24, Z
    16da:	08 88       	ldd	r0, Y+16	; 0x10
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <_ZN14HardwareSerial5beginEl+0x9e>
    16de:	22 0f       	add	r18, r18
    16e0:	33 1f       	adc	r19, r19
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <_ZN14HardwareSerial5beginEl+0x9a>
    16e6:	82 2b       	or	r24, r18
    16e8:	80 83       	st	Z, r24
}
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	08 95       	ret
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    16f0:	e8 85       	ldd	r30, Y+8	; 0x08
    16f2:	f9 85       	ldd	r31, Y+9	; 0x09
    16f4:	10 82       	st	Z, r1
    16f6:	20 e1       	ldi	r18, 0x10	; 16
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	cc cf       	rjmp	.-104    	; 0x1694 <_ZN14HardwareSerial5beginEl+0x50>

000016fc <_ZN14HardwareSerial3endEv>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
}

void HardwareSerial::end()
{
    16fc:	fc 01       	movw	r30, r24
  cbi(*_ucsrb, _rxen);
    16fe:	a2 85       	ldd	r26, Z+10	; 0x0a
    1700:	b3 85       	ldd	r27, Z+11	; 0x0b
    1702:	3c 91       	ld	r19, X
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	ac 01       	movw	r20, r24
    170a:	06 84       	ldd	r0, Z+14	; 0x0e
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <_ZN14HardwareSerial3endEv+0x16>
    170e:	44 0f       	add	r20, r20
    1710:	55 1f       	adc	r21, r21
    1712:	0a 94       	dec	r0
    1714:	e2 f7       	brpl	.-8      	; 0x170e <_ZN14HardwareSerial3endEv+0x12>
    1716:	24 2f       	mov	r18, r20
    1718:	20 95       	com	r18
    171a:	23 23       	and	r18, r19
    171c:	2c 93       	st	X, r18
  cbi(*_ucsrb, _txen);
    171e:	a2 85       	ldd	r26, Z+10	; 0x0a
    1720:	b3 85       	ldd	r27, Z+11	; 0x0b
    1722:	3c 91       	ld	r19, X
    1724:	ac 01       	movw	r20, r24
    1726:	07 84       	ldd	r0, Z+15	; 0x0f
    1728:	02 c0       	rjmp	.+4      	; 0x172e <_ZN14HardwareSerial3endEv+0x32>
    172a:	44 0f       	add	r20, r20
    172c:	55 1f       	adc	r21, r21
    172e:	0a 94       	dec	r0
    1730:	e2 f7       	brpl	.-8      	; 0x172a <_ZN14HardwareSerial3endEv+0x2e>
    1732:	24 2f       	mov	r18, r20
    1734:	20 95       	com	r18
    1736:	23 23       	and	r18, r19
    1738:	2c 93       	st	X, r18
  cbi(*_ucsrb, _rxcie);  
    173a:	a2 85       	ldd	r26, Z+10	; 0x0a
    173c:	b3 85       	ldd	r27, Z+11	; 0x0b
    173e:	2c 91       	ld	r18, X
    1740:	00 88       	ldd	r0, Z+16	; 0x10
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <_ZN14HardwareSerial3endEv+0x4c>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <_ZN14HardwareSerial3endEv+0x48>
    174c:	80 95       	com	r24
    174e:	82 23       	and	r24, r18
    1750:	8c 93       	st	X, r24
}
    1752:	08 95       	ret

00001754 <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
    1754:	fc 01       	movw	r30, r24
    1756:	82 81       	ldd	r24, Z+2	; 0x02
    1758:	93 81       	ldd	r25, Z+3	; 0x03
    175a:	fc 01       	movw	r30, r24
    175c:	e0 58       	subi	r30, 0x80	; 128
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	20 81       	ld	r18, Z
    1762:	31 81       	ldd	r19, Z+1	; 0x01
    1764:	8e 57       	subi	r24, 0x7E	; 126
    1766:	9f 4f       	sbci	r25, 0xFF	; 255
    1768:	fc 01       	movw	r30, r24
    176a:	80 81       	ld	r24, Z
    176c:	91 81       	ldd	r25, Z+1	; 0x01
    176e:	28 1b       	sub	r18, r24
    1770:	39 0b       	sbc	r19, r25
    1772:	2f 77       	andi	r18, 0x7F	; 127
    1774:	30 70       	andi	r19, 0x00	; 0
}
    1776:	c9 01       	movw	r24, r18
    1778:	08 95       	ret

0000177a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    177a:	fc 01       	movw	r30, r24
    177c:	82 81       	ldd	r24, Z+2	; 0x02
    177e:	93 81       	ldd	r25, Z+3	; 0x03
    1780:	fc 01       	movw	r30, r24
    1782:	ee 57       	subi	r30, 0x7E	; 126
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	20 81       	ld	r18, Z
    1788:	31 81       	ldd	r19, Z+1	; 0x01
    178a:	fc 01       	movw	r30, r24
    178c:	e0 58       	subi	r30, 0x80	; 128
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	40 81       	ld	r20, Z
    1792:	51 81       	ldd	r21, Z+1	; 0x01
    1794:	42 17       	cp	r20, r18
    1796:	53 07       	cpc	r21, r19
    1798:	39 f0       	breq	.+14     	; 0x17a8 <_ZN14HardwareSerial4peekEv+0x2e>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    179a:	82 0f       	add	r24, r18
    179c:	93 1f       	adc	r25, r19
    179e:	fc 01       	movw	r30, r24
    17a0:	20 81       	ld	r18, Z
    17a2:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    17a4:	c9 01       	movw	r24, r18
    17a6:	08 95       	ret
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    17a8:	2f ef       	ldi	r18, 0xFF	; 255
    17aa:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    17ac:	c9 01       	movw	r24, r18
    17ae:	08 95       	ret

000017b0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    17b0:	dc 01       	movw	r26, r24
    17b2:	12 96       	adiw	r26, 0x02	; 2
    17b4:	8d 91       	ld	r24, X+
    17b6:	9c 91       	ld	r25, X
    17b8:	13 97       	sbiw	r26, 0x03	; 3
    17ba:	fc 01       	movw	r30, r24
    17bc:	ee 57       	subi	r30, 0x7E	; 126
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	40 81       	ld	r20, Z
    17c2:	51 81       	ldd	r21, Z+1	; 0x01
    17c4:	dc 01       	movw	r26, r24
    17c6:	a0 58       	subi	r26, 0x80	; 128
    17c8:	bf 4f       	sbci	r27, 0xFF	; 255
    17ca:	2d 91       	ld	r18, X+
    17cc:	3c 91       	ld	r19, X
    17ce:	11 97       	sbiw	r26, 0x01	; 1
    17d0:	24 17       	cp	r18, r20
    17d2:	35 07       	cpc	r19, r21
    17d4:	69 f0       	breq	.+26     	; 0x17f0 <_ZN14HardwareSerial4readEv+0x40>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    17d6:	84 0f       	add	r24, r20
    17d8:	95 1f       	adc	r25, r21
    17da:	dc 01       	movw	r26, r24
    17dc:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
    17de:	4f 5f       	subi	r20, 0xFF	; 255
    17e0:	5f 4f       	sbci	r21, 0xFF	; 255
    17e2:	4f 77       	andi	r20, 0x7F	; 127
    17e4:	50 70       	andi	r21, 0x00	; 0
    17e6:	51 83       	std	Z+1, r21	; 0x01
    17e8:	40 83       	st	Z, r20
    return c;
    17ea:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    17ec:	c9 01       	movw	r24, r18
    17ee:	08 95       	ret
}

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    17f0:	2f ef       	ldi	r18, 0xFF	; 255
    17f2:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
    return c;
  }
}
    17f4:	c9 01       	movw	r24, r18
    17f6:	08 95       	ret

000017f8 <_ZN14HardwareSerial5flushEv>:
  // don't reverse this or there may be problems if the RX interrupt
  // occurs after reading the value of rx_buffer_head but before writing
  // the value to rx_buffer_tail; the previous value of rx_buffer_head
  // may be written to rx_buffer_tail, making it appear as if the buffer
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
    17f8:	dc 01       	movw	r26, r24
    17fa:	12 96       	adiw	r26, 0x02	; 2
    17fc:	8d 91       	ld	r24, X+
    17fe:	9c 91       	ld	r25, X
    1800:	13 97       	sbiw	r26, 0x03	; 3
    1802:	fc 01       	movw	r30, r24
    1804:	e0 58       	subi	r30, 0x80	; 128
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	8e 57       	subi	r24, 0x7E	; 126
    180a:	9f 4f       	sbci	r25, 0xFF	; 255
    180c:	dc 01       	movw	r26, r24
    180e:	8d 91       	ld	r24, X+
    1810:	9c 91       	ld	r25, X
    1812:	11 97       	sbiw	r26, 0x01	; 1
    1814:	91 83       	std	Z+1, r25	; 0x01
    1816:	80 83       	st	Z, r24
}
    1818:	08 95       	ret

0000181a <_ZN14HardwareSerial5writeEh>:

void HardwareSerial::write(uint8_t c)
{
    181a:	fc 01       	movw	r30, r24
    181c:	a0 85       	ldd	r26, Z+8	; 0x08
    181e:	b1 85       	ldd	r27, Z+9	; 0x09
    1820:	21 89       	ldd	r18, Z+17	; 0x11
  while (!((*_ucsra) & (1 << _udre)))
    1822:	8c 91       	ld	r24, X
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	02 2e       	mov	r0, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <_ZN14HardwareSerial5writeEh+0x14>
    182a:	95 95       	asr	r25
    182c:	87 95       	ror	r24
    182e:	0a 94       	dec	r0
    1830:	e2 f7       	brpl	.-8      	; 0x182a <_ZN14HardwareSerial5writeEh+0x10>
    1832:	80 ff       	sbrs	r24, 0
    1834:	f6 cf       	rjmp	.-20     	; 0x1822 <_ZN14HardwareSerial5writeEh+0x8>
    ;

  *_udr = c;
    1836:	04 84       	ldd	r0, Z+12	; 0x0c
    1838:	f5 85       	ldd	r31, Z+13	; 0x0d
    183a:	e0 2d       	mov	r30, r0
    183c:	60 83       	st	Z, r22
}
    183e:	08 95       	ret

00001840 <_GLOBAL__I_rx_buffer>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    1840:	86 e5       	ldi	r24, 0x56	; 86
    1842:	91 e0       	ldi	r25, 0x01	; 1
    1844:	90 93 d7 04 	sts	0x04D7, r25
    1848:	80 93 d6 04 	sts	0x04D6, r24
{
  _rx_buffer = rx_buffer;
    184c:	82 e5       	ldi	r24, 0x52	; 82
    184e:	94 e0       	ldi	r25, 0x04	; 4
    1850:	90 93 d9 04 	sts	0x04D9, r25
    1854:	80 93 d8 04 	sts	0x04D8, r24
  _ubrrh = ubrrh;
    1858:	85 ec       	ldi	r24, 0xC5	; 197
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	90 93 db 04 	sts	0x04DB, r25
    1860:	80 93 da 04 	sts	0x04DA, r24
  _ubrrl = ubrrl;
    1864:	84 ec       	ldi	r24, 0xC4	; 196
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	90 93 dd 04 	sts	0x04DD, r25
    186c:	80 93 dc 04 	sts	0x04DC, r24
  _ucsra = ucsra;
    1870:	80 ec       	ldi	r24, 0xC0	; 192
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	90 93 df 04 	sts	0x04DF, r25
    1878:	80 93 de 04 	sts	0x04DE, r24
  _ucsrb = ucsrb;
    187c:	81 ec       	ldi	r24, 0xC1	; 193
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	90 93 e1 04 	sts	0x04E1, r25
    1884:	80 93 e0 04 	sts	0x04E0, r24
  _udr = udr;
    1888:	86 ec       	ldi	r24, 0xC6	; 198
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	90 93 e3 04 	sts	0x04E3, r25
    1890:	80 93 e2 04 	sts	0x04E2, r24
  _rxen = rxen;
    1894:	84 e0       	ldi	r24, 0x04	; 4
    1896:	80 93 e4 04 	sts	0x04E4, r24
  _txen = txen;
    189a:	83 e0       	ldi	r24, 0x03	; 3
    189c:	80 93 e5 04 	sts	0x04E5, r24
  _rxcie = rxcie;
    18a0:	87 e0       	ldi	r24, 0x07	; 7
    18a2:	80 93 e6 04 	sts	0x04E6, r24
  _udre = udre;
    18a6:	85 e0       	ldi	r24, 0x05	; 5
    18a8:	80 93 e7 04 	sts	0x04E7, r24
  _u2x = u2x;
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	80 93 e8 04 	sts	0x04E8, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
    18b2:	08 95       	ret

000018b4 <_ZN5Print5writeEPKc>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	ec 01       	movw	r28, r24
    18be:	8b 01       	movw	r16, r22
  while (*str)
    18c0:	fb 01       	movw	r30, r22
    18c2:	60 81       	ld	r22, Z
    18c4:	66 23       	and	r22, r22
    18c6:	69 f0       	breq	.+26     	; 0x18e2 <_ZN5Print5writeEPKc+0x2e>
    write(*str++);
    18c8:	0f 5f       	subi	r16, 0xFF	; 255
    18ca:	1f 4f       	sbci	r17, 0xFF	; 255
    18cc:	e8 81       	ld	r30, Y
    18ce:	f9 81       	ldd	r31, Y+1	; 0x01
    18d0:	01 90       	ld	r0, Z+
    18d2:	f0 81       	ld	r31, Z
    18d4:	e0 2d       	mov	r30, r0
    18d6:	ce 01       	movw	r24, r28
    18d8:	09 95       	icall
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
  while (*str)
    18da:	f8 01       	movw	r30, r16
    18dc:	60 81       	ld	r22, Z
    18de:	66 23       	and	r22, r22
    18e0:	99 f7       	brne	.-26     	; 0x18c8 <_ZN5Print5writeEPKc+0x14>
    write(*str++);
}
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	08 95       	ret

000018ec <_ZN5Print5writeEPKhj>:

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
    18ec:	ef 92       	push	r14
    18ee:	ff 92       	push	r15
    18f0:	0f 93       	push	r16
    18f2:	1f 93       	push	r17
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	ec 01       	movw	r28, r24
    18fa:	8b 01       	movw	r16, r22
    18fc:	7a 01       	movw	r14, r20
  while (size--)
    18fe:	41 15       	cp	r20, r1
    1900:	51 05       	cpc	r21, r1
    1902:	81 f0       	breq	.+32     	; 0x1924 <_ZN5Print5writeEPKhj+0x38>
    write(*buffer++);
    1904:	f8 01       	movw	r30, r16
    1906:	61 91       	ld	r22, Z+
    1908:	8f 01       	movw	r16, r30
    190a:	e8 81       	ld	r30, Y
    190c:	f9 81       	ldd	r31, Y+1	; 0x01
    190e:	01 90       	ld	r0, Z+
    1910:	f0 81       	ld	r31, Z
    1912:	e0 2d       	mov	r30, r0
    1914:	ce 01       	movw	r24, r28
    1916:	09 95       	icall
    1918:	08 94       	sec
    191a:	e1 08       	sbc	r14, r1
    191c:	f1 08       	sbc	r15, r1
}

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
  while (size--)
    191e:	e1 14       	cp	r14, r1
    1920:	f1 04       	cpc	r15, r1
    1922:	81 f7       	brne	.-32     	; 0x1904 <_ZN5Print5writeEPKhj+0x18>
    write(*buffer++);
}
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	1f 91       	pop	r17
    192a:	0f 91       	pop	r16
    192c:	ff 90       	pop	r15
    192e:	ef 90       	pop	r14
    1930:	08 95       	ret

00001932 <_ZN5Print5printEPKc>:
  }
}

void Print::print(const char str[])
{
  write(str);
    1932:	dc 01       	movw	r26, r24
    1934:	ed 91       	ld	r30, X+
    1936:	fc 91       	ld	r31, X
    1938:	02 80       	ldd	r0, Z+2	; 0x02
    193a:	f3 81       	ldd	r31, Z+3	; 0x03
    193c:	e0 2d       	mov	r30, r0
    193e:	09 95       	icall
}
    1940:	08 95       	ret

00001942 <_ZN5Print5printERK6String>:
  while (size--)
    write(*buffer++);
}

void Print::print(const String &s)
{
    1942:	cf 92       	push	r12
    1944:	df 92       	push	r13
    1946:	ef 92       	push	r14
    1948:	ff 92       	push	r15
    194a:	0f 93       	push	r16
    194c:	1f 93       	push	r17
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	7c 01       	movw	r14, r24
    1954:	8b 01       	movw	r16, r22
  for (int i = 0; i < s.length(); i++) {
    1956:	db 01       	movw	r26, r22
    1958:	14 96       	adiw	r26, 0x04	; 4
    195a:	8d 91       	ld	r24, X+
    195c:	9c 91       	ld	r25, X
    195e:	15 97       	sbiw	r26, 0x05	; 5
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	c1 f0       	breq	.+48     	; 0x1994 <_ZN5Print5printERK6String+0x52>
    1964:	60 e0       	ldi	r22, 0x00	; 0
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	c0 e0       	ldi	r28, 0x00	; 0
    196a:	d0 e0       	ldi	r29, 0x00	; 0
    write(s[i]);
    196c:	d7 01       	movw	r26, r14
    196e:	ed 91       	ld	r30, X+
    1970:	fc 91       	ld	r31, X
    1972:	c0 80       	ld	r12, Z
    1974:	d1 80       	ldd	r13, Z+1	; 0x01
    1976:	c8 01       	movw	r24, r16
    1978:	0e 94 ce 12 	call	0x259c	; 0x259c <_ZNK6StringixEj>
    197c:	68 2f       	mov	r22, r24
    197e:	c7 01       	movw	r24, r14
    1980:	f6 01       	movw	r30, r12
    1982:	09 95       	icall
    write(*buffer++);
}

void Print::print(const String &s)
{
  for (int i = 0; i < s.length(); i++) {
    1984:	21 96       	adiw	r28, 0x01	; 1
    1986:	be 01       	movw	r22, r28
    1988:	f8 01       	movw	r30, r16
    198a:	84 81       	ldd	r24, Z+4	; 0x04
    198c:	95 81       	ldd	r25, Z+5	; 0x05
    198e:	c8 17       	cp	r28, r24
    1990:	d9 07       	cpc	r29, r25
    1992:	60 f3       	brcs	.-40     	; 0x196c <_ZN5Print5printERK6String+0x2a>
    write(s[i]);
  }
}
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	1f 91       	pop	r17
    199a:	0f 91       	pop	r16
    199c:	ff 90       	pop	r15
    199e:	ef 90       	pop	r14
    19a0:	df 90       	pop	r13
    19a2:	cf 90       	pop	r12
    19a4:	08 95       	ret

000019a6 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

void Print::printNumber(unsigned long n, uint8_t base)
{
    19a6:	2f 92       	push	r2
    19a8:	3f 92       	push	r3
    19aa:	4f 92       	push	r4
    19ac:	5f 92       	push	r5
    19ae:	6f 92       	push	r6
    19b0:	7f 92       	push	r7
    19b2:	8f 92       	push	r8
    19b4:	9f 92       	push	r9
    19b6:	af 92       	push	r10
    19b8:	bf 92       	push	r11
    19ba:	cf 92       	push	r12
    19bc:	df 92       	push	r13
    19be:	ef 92       	push	r14
    19c0:	ff 92       	push	r15
    19c2:	0f 93       	push	r16
    19c4:	1f 93       	push	r17
    19c6:	df 93       	push	r29
    19c8:	cf 93       	push	r28
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	a2 97       	sbiw	r28, 0x22	; 34
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	9a a3       	std	Y+34, r25	; 0x22
    19dc:	89 a3       	std	Y+33, r24	; 0x21
    19de:	7a 01       	movw	r14, r20
    19e0:	8b 01       	movw	r16, r22
  unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
  unsigned long i = 0;

  if (n == 0) {
    19e2:	41 15       	cp	r20, r1
    19e4:	51 05       	cpc	r21, r1
    19e6:	61 05       	cpc	r22, r1
    19e8:	71 05       	cpc	r23, r1
    19ea:	09 f4       	brne	.+2      	; 0x19ee <_ZN5Print11printNumberEmh+0x48>
    19ec:	55 c0       	rjmp	.+170    	; 0x1a98 <_ZN5Print11printNumberEmh+0xf2>
    print('0');
    return;
    19ee:	62 2e       	mov	r6, r18
    19f0:	77 24       	eor	r7, r7
    19f2:	88 24       	eor	r8, r8
    19f4:	99 24       	eor	r9, r9
    19f6:	aa 24       	eor	r10, r10
    19f8:	bb 24       	eor	r11, r11
    19fa:	65 01       	movw	r12, r10
    19fc:	1e 01       	movw	r2, r28
    19fe:	08 94       	sec
    1a00:	21 1c       	adc	r2, r1
    1a02:	31 1c       	adc	r3, r1
  } 

  while (n > 0) {
    buf[i++] = n % base;
    1a04:	21 01       	movw	r4, r2
    1a06:	4a 0c       	add	r4, r10
    1a08:	5b 1c       	adc	r5, r11
    1a0a:	c8 01       	movw	r24, r16
    1a0c:	b7 01       	movw	r22, r14
    1a0e:	a4 01       	movw	r20, r8
    1a10:	93 01       	movw	r18, r6
    1a12:	0e 94 3a 29 	call	0x5274	; 0x5274 <__udivmodsi4>
    1a16:	f2 01       	movw	r30, r4
    1a18:	60 83       	st	Z, r22
    1a1a:	08 94       	sec
    1a1c:	a1 1c       	adc	r10, r1
    1a1e:	b1 1c       	adc	r11, r1
    1a20:	c1 1c       	adc	r12, r1
    1a22:	d1 1c       	adc	r13, r1
    n /= base;
    1a24:	c8 01       	movw	r24, r16
    1a26:	b7 01       	movw	r22, r14
    1a28:	a4 01       	movw	r20, r8
    1a2a:	93 01       	movw	r18, r6
    1a2c:	0e 94 3a 29 	call	0x5274	; 0x5274 <__udivmodsi4>
    1a30:	e2 2e       	mov	r14, r18
    1a32:	f3 2e       	mov	r15, r19
    1a34:	04 2f       	mov	r16, r20
    1a36:	15 2f       	mov	r17, r21
  if (n == 0) {
    print('0');
    return;
  } 

  while (n > 0) {
    1a38:	e1 14       	cp	r14, r1
    1a3a:	f1 04       	cpc	r15, r1
    1a3c:	01 05       	cpc	r16, r1
    1a3e:	11 05       	cpc	r17, r1
    1a40:	09 f7       	brne	.-62     	; 0x1a04 <_ZN5Print11printNumberEmh+0x5e>
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
    1a42:	a1 14       	cp	r10, r1
    1a44:	b1 04       	cpc	r11, r1
    1a46:	c1 04       	cpc	r12, r1
    1a48:	d1 04       	cpc	r13, r1
    1a4a:	71 f1       	breq	.+92     	; 0x1aa8 <_ZN5Print11printNumberEmh+0x102>
    1a4c:	08 94       	sec
    1a4e:	a1 08       	sbc	r10, r1
    1a50:	b1 08       	sbc	r11, r1
    1a52:	c1 08       	sbc	r12, r1
    1a54:	d1 08       	sbc	r13, r1
    1a56:	18 c0       	rjmp	.+48     	; 0x1a88 <_ZN5Print11printNumberEmh+0xe2>
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
    1a58:	40 5d       	subi	r20, 0xD0	; 208
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    1a5a:	50 e0       	ldi	r21, 0x00	; 0
    1a5c:	60 e0       	ldi	r22, 0x00	; 0
    1a5e:	70 e0       	ldi	r23, 0x00	; 0
    1a60:	89 a1       	ldd	r24, Y+33	; 0x21
    1a62:	9a a1       	ldd	r25, Y+34	; 0x22
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN5Print5printEli>
    1a6c:	08 94       	sec
    1a6e:	a1 08       	sbc	r10, r1
    1a70:	b1 08       	sbc	r11, r1
    1a72:	c1 08       	sbc	r12, r1
    1a74:	d1 08       	sbc	r13, r1
  while (n > 0) {
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
    1a76:	ff ef       	ldi	r31, 0xFF	; 255
    1a78:	af 16       	cp	r10, r31
    1a7a:	ff ef       	ldi	r31, 0xFF	; 255
    1a7c:	bf 06       	cpc	r11, r31
    1a7e:	ff ef       	ldi	r31, 0xFF	; 255
    1a80:	cf 06       	cpc	r12, r31
    1a82:	ff ef       	ldi	r31, 0xFF	; 255
    1a84:	df 06       	cpc	r13, r31
    1a86:	81 f0       	breq	.+32     	; 0x1aa8 <_ZN5Print11printNumberEmh+0x102>
    print((char) (buf[i - 1] < 10 ?
    1a88:	f1 01       	movw	r30, r2
    1a8a:	ea 0d       	add	r30, r10
    1a8c:	fb 1d       	adc	r31, r11
    1a8e:	40 81       	ld	r20, Z
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
    1a90:	4a 30       	cpi	r20, 0x0A	; 10
    1a92:	10 f3       	brcs	.-60     	; 0x1a58 <_ZN5Print11printNumberEmh+0xb2>
    1a94:	49 5c       	subi	r20, 0xC9	; 201
    1a96:	e1 cf       	rjmp	.-62     	; 0x1a5a <_ZN5Print11printNumberEmh+0xb4>
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    1a98:	40 e3       	ldi	r20, 0x30	; 48
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	60 e0       	ldi	r22, 0x00	; 0
    1a9e:	70 e0       	ldi	r23, 0x00	; 0
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN5Print5printEli>

  for (; i > 0; i--)
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}
    1aa8:	a2 96       	adiw	r28, 0x22	; 34
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	ff 90       	pop	r15
    1abe:	ef 90       	pop	r14
    1ac0:	df 90       	pop	r13
    1ac2:	cf 90       	pop	r12
    1ac4:	bf 90       	pop	r11
    1ac6:	af 90       	pop	r10
    1ac8:	9f 90       	pop	r9
    1aca:	8f 90       	pop	r8
    1acc:	7f 90       	pop	r7
    1ace:	6f 90       	pop	r6
    1ad0:	5f 90       	pop	r5
    1ad2:	4f 90       	pop	r4
    1ad4:	3f 90       	pop	r3
    1ad6:	2f 90       	pop	r2
    1ad8:	08 95       	ret

00001ada <_ZN5Print5printEmi>:
  }
}

void Print::print(unsigned long n, int base)
{
  if (base == 0) write(n);
    1ada:	21 15       	cp	r18, r1
    1adc:	31 05       	cpc	r19, r1
    1ade:	19 f0       	breq	.+6      	; 0x1ae6 <_ZN5Print5printEmi+0xc>
  else printNumber(n, base);
    1ae0:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <_ZN5Print11printNumberEmh>
    1ae4:	08 95       	ret
  }
}

void Print::print(unsigned long n, int base)
{
  if (base == 0) write(n);
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	ed 91       	ld	r30, X+
    1aea:	fc 91       	ld	r31, X
    1aec:	01 90       	ld	r0, Z+
    1aee:	f0 81       	ld	r31, Z
    1af0:	e0 2d       	mov	r30, r0
    1af2:	64 2f       	mov	r22, r20
    1af4:	09 95       	icall
    1af6:	08 95       	ret

00001af8 <_ZN5Print5printEji>:
{
  print((long) n, base);
}

void Print::print(unsigned int n, int base)
{
    1af8:	9a 01       	movw	r18, r20
  print((unsigned long) n, base);
    1afa:	ab 01       	movw	r20, r22
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <_ZN5Print5printEmi>
}
    1b04:	08 95       	ret

00001b06 <_ZN5Print5printEhi>:
{
  print((long) c, base);
}

void Print::print(unsigned char b, int base)
{
    1b06:	9a 01       	movw	r18, r20
  print((unsigned long) b, base);
    1b08:	46 2f       	mov	r20, r22
    1b0a:	50 e0       	ldi	r21, 0x00	; 0
    1b0c:	60 e0       	ldi	r22, 0x00	; 0
    1b0e:	70 e0       	ldi	r23, 0x00	; 0
    1b10:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <_ZN5Print5printEmi>
}
    1b14:	08 95       	ret

00001b16 <_ZN5Print5printEli>:
{
  print((unsigned long) n, base);
}

void Print::print(long n, int base)
{
    1b16:	ef 92       	push	r14
    1b18:	ff 92       	push	r15
    1b1a:	0f 93       	push	r16
    1b1c:	1f 93       	push	r17
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	ec 01       	movw	r28, r24
    1b24:	7a 01       	movw	r14, r20
    1b26:	8b 01       	movw	r16, r22
  if (base == 0) {
    1b28:	21 15       	cp	r18, r1
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	d9 f0       	breq	.+54     	; 0x1b64 <_ZN5Print5printEli+0x4e>
    write(n);
  } else if (base == 10) {
    1b2e:	2a 30       	cpi	r18, 0x0A	; 10
    1b30:	31 05       	cpc	r19, r1
    1b32:	49 f0       	breq	.+18     	; 0x1b46 <_ZN5Print5printEli+0x30>
      print('-');
      n = -n;
    }
    printNumber(n, 10);
  } else {
    printNumber(n, base);
    1b34:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <_ZN5Print11printNumberEmh>
  }
}
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	1f 91       	pop	r17
    1b3e:	0f 91       	pop	r16
    1b40:	ff 90       	pop	r15
    1b42:	ef 90       	pop	r14
    1b44:	08 95       	ret
void Print::print(long n, int base)
{
  if (base == 0) {
    write(n);
  } else if (base == 10) {
    if (n < 0) {
    1b46:	77 fd       	sbrc	r23, 7
    1b48:	1b c0       	rjmp	.+54     	; 0x1b80 <_ZN5Print5printEli+0x6a>
      print('-');
      n = -n;
    }
    printNumber(n, 10);
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	b8 01       	movw	r22, r16
    1b4e:	a7 01       	movw	r20, r14
    1b50:	2a e0       	ldi	r18, 0x0A	; 10
    1b52:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <_ZN5Print11printNumberEmh>
  } else {
    printNumber(n, base);
  }
}
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	1f 91       	pop	r17
    1b5c:	0f 91       	pop	r16
    1b5e:	ff 90       	pop	r15
    1b60:	ef 90       	pop	r14
    1b62:	08 95       	ret
}

void Print::print(long n, int base)
{
  if (base == 0) {
    write(n);
    1b64:	e8 81       	ld	r30, Y
    1b66:	f9 81       	ldd	r31, Y+1	; 0x01
    1b68:	01 90       	ld	r0, Z+
    1b6a:	f0 81       	ld	r31, Z
    1b6c:	e0 2d       	mov	r30, r0
    1b6e:	64 2f       	mov	r22, r20
    1b70:	09 95       	icall
    }
    printNumber(n, 10);
  } else {
    printNumber(n, base);
  }
}
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	ff 90       	pop	r15
    1b7c:	ef 90       	pop	r14
    1b7e:	08 95       	ret
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    1b80:	4d e2       	ldi	r20, 0x2D	; 45
    1b82:	50 e0       	ldi	r21, 0x00	; 0
    1b84:	60 e0       	ldi	r22, 0x00	; 0
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN5Print5printEli>
  if (base == 0) {
    write(n);
  } else if (base == 10) {
    if (n < 0) {
      print('-');
      n = -n;
    1b90:	10 95       	com	r17
    1b92:	00 95       	com	r16
    1b94:	f0 94       	com	r15
    1b96:	e0 94       	com	r14
    1b98:	e1 1c       	adc	r14, r1
    1b9a:	f1 1c       	adc	r15, r1
    1b9c:	01 1d       	adc	r16, r1
    1b9e:	11 1d       	adc	r17, r1
    1ba0:	d4 cf       	rjmp	.-88     	; 0x1b4a <_ZN5Print5printEli+0x34>

00001ba2 <_ZN5Print5printEii>:
{
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
{
    1ba2:	ef 92       	push	r14
    1ba4:	ff 92       	push	r15
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	9a 01       	movw	r18, r20
  print((long) n, base);
    1bac:	7b 01       	movw	r14, r22
    1bae:	00 27       	eor	r16, r16
    1bb0:	f7 fc       	sbrc	r15, 7
    1bb2:	00 95       	com	r16
    1bb4:	10 2f       	mov	r17, r16
    1bb6:	b8 01       	movw	r22, r16
    1bb8:	a7 01       	movw	r20, r14
    1bba:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN5Print5printEli>
}
    1bbe:	1f 91       	pop	r17
    1bc0:	0f 91       	pop	r16
    1bc2:	ff 90       	pop	r15
    1bc4:	ef 90       	pop	r14
    1bc6:	08 95       	ret

00001bc8 <_ZN5Print5printEci>:
{
  write(str);
}

void Print::print(char c, int base)
{
    1bc8:	9a 01       	movw	r18, r20
  print((long) c, base);
    1bca:	46 2f       	mov	r20, r22
    1bcc:	50 e0       	ldi	r21, 0x00	; 0
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	70 e0       	ldi	r23, 0x00	; 0
    1bd2:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN5Print5printEli>
}
    1bd6:	08 95       	ret

00001bd8 <_ZN5Print7printlnEv>:
{
  printFloat(n, digits);
}

void Print::println(void)
{
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	ec 01       	movw	r28, r24
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    1bde:	4d e0       	ldi	r20, 0x0D	; 13
    1be0:	50 e0       	ldi	r21, 0x00	; 0
    1be2:	60 e0       	ldi	r22, 0x00	; 0
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN5Print5printEli>
    1bee:	ce 01       	movw	r24, r28
    1bf0:	4a e0       	ldi	r20, 0x0A	; 10
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN5Print5printEli>

void Print::println(void)
{
  print('\r');
  print('\n');  
}
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	08 95       	ret

00001c06 <_ZN5Print7printlnEmi>:
  print(n, base);
  println();
}

void Print::println(unsigned long n, int base)
{
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	ec 01       	movw	r28, r24
  print(n, base);
    1c0c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <_ZN5Print5printEmi>
  println();
    1c10:	ce 01       	movw	r24, r28
    1c12:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN5Print7printlnEv>
}
    1c16:	df 91       	pop	r29
    1c18:	cf 91       	pop	r28
    1c1a:	08 95       	ret

00001c1c <_ZN5Print7printlnEji>:
  print(n, base);
  println();
}

void Print::println(unsigned int n, int base)
{
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	ec 01       	movw	r28, r24
    1c22:	9a 01       	movw	r18, r20
  print((long) n, base);
}

void Print::print(unsigned int n, int base)
{
  print((unsigned long) n, base);
    1c24:	ab 01       	movw	r20, r22
    1c26:	60 e0       	ldi	r22, 0x00	; 0
    1c28:	70 e0       	ldi	r23, 0x00	; 0
    1c2a:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <_ZN5Print5printEmi>
}

void Print::println(unsigned int n, int base)
{
  print(n, base);
  println();
    1c2e:	ce 01       	movw	r24, r28
    1c30:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN5Print7printlnEv>
}
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	08 95       	ret

00001c3a <_ZN5Print7printlnEhi>:
  print(c, base);
  println();
}

void Print::println(unsigned char b, int base)
{
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	ec 01       	movw	r28, r24
    1c40:	9a 01       	movw	r18, r20
  print((long) c, base);
}

void Print::print(unsigned char b, int base)
{
  print((unsigned long) b, base);
    1c42:	46 2f       	mov	r20, r22
    1c44:	50 e0       	ldi	r21, 0x00	; 0
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	70 e0       	ldi	r23, 0x00	; 0
    1c4a:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <_ZN5Print5printEmi>
}

void Print::println(unsigned char b, int base)
{
  print(b, base);
  println();
    1c4e:	ce 01       	movw	r24, r28
    1c50:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN5Print7printlnEv>
}
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	08 95       	ret

00001c5a <_ZN5Print7printlnEPKc>:
  print(s);
  println();
}

void Print::println(const char c[])
{
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	ec 01       	movw	r28, r24
  print(c);
    1c60:	0e 94 99 0c 	call	0x1932	; 0x1932 <_ZN5Print5printEPKc>
  println();
    1c64:	ce 01       	movw	r24, r28
    1c66:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN5Print7printlnEv>
}
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	08 95       	ret

00001c70 <_ZN5Print7printlnERK6String>:
  print('\r');
  print('\n');  
}

void Print::println(const String &s)
{
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	ec 01       	movw	r28, r24
  print(s);
    1c76:	0e 94 a1 0c 	call	0x1942	; 0x1942 <_ZN5Print5printERK6String>
  println();
    1c7a:	ce 01       	movw	r24, r28
    1c7c:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN5Print7printlnEv>
}
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	08 95       	ret

00001c86 <_ZN5Print7printlnEli>:
  print(n, base);
  println();
}

void Print::println(long n, int base)
{
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	ec 01       	movw	r28, r24
  print(n, base);
    1c8c:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN5Print5printEli>
  println();
    1c90:	ce 01       	movw	r24, r28
    1c92:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN5Print7printlnEv>
}
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	08 95       	ret

00001c9c <_ZN5Print7printlnEii>:
  print(b, base);
  println();
}

void Print::println(int n, int base)
{
    1c9c:	cf 93       	push	r28
    1c9e:	df 93       	push	r29
    1ca0:	ec 01       	movw	r28, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	9a 01       	movw	r18, r20
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
{
  print((long) n, base);
    1ca6:	ac 01       	movw	r20, r24
    1ca8:	66 27       	eor	r22, r22
    1caa:	57 fd       	sbrc	r21, 7
    1cac:	60 95       	com	r22
    1cae:	76 2f       	mov	r23, r22
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN5Print5printEli>
}

void Print::println(int n, int base)
{
  print(n, base);
  println();
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN5Print7printlnEv>
}
    1cbc:	df 91       	pop	r29
    1cbe:	cf 91       	pop	r28
    1cc0:	08 95       	ret

00001cc2 <_ZN5Print7printlnEci>:
  print(c);
  println();
}

void Print::println(char c, int base)
{
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	ec 01       	movw	r28, r24
    1cc8:	9a 01       	movw	r18, r20
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    1cca:	46 2f       	mov	r20, r22
    1ccc:	50 e0       	ldi	r21, 0x00	; 0
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	70 e0       	ldi	r23, 0x00	; 0
    1cd2:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN5Print5printEli>
}

void Print::println(char c, int base)
{
  print(c, base);
  println();
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN5Print7printlnEv>
}
    1cdc:	df 91       	pop	r29
    1cde:	cf 91       	pop	r28
    1ce0:	08 95       	ret

00001ce2 <_ZN5Print10printFloatEdh>:
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}

void Print::printFloat(double number, uint8_t digits) 
{ 
    1ce2:	9f 92       	push	r9
    1ce4:	af 92       	push	r10
    1ce6:	bf 92       	push	r11
    1ce8:	cf 92       	push	r12
    1cea:	df 92       	push	r13
    1cec:	ef 92       	push	r14
    1cee:	ff 92       	push	r15
    1cf0:	0f 93       	push	r16
    1cf2:	1f 93       	push	r17
    1cf4:	cf 93       	push	r28
    1cf6:	df 93       	push	r29
    1cf8:	ec 01       	movw	r28, r24
    1cfa:	6a 01       	movw	r12, r20
    1cfc:	7b 01       	movw	r14, r22
    1cfe:	12 2f       	mov	r17, r18
  // Handle negative numbers
  if (number < 0.0)
    1d00:	cb 01       	movw	r24, r22
    1d02:	ba 01       	movw	r22, r20
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	a9 01       	movw	r20, r18
    1d0a:	0e 94 87 21 	call	0x430e	; 0x430e <__ltsf2>
    1d0e:	88 23       	and	r24, r24
    1d10:	0c f4       	brge	.+2      	; 0x1d14 <_ZN5Print10printFloatEdh+0x32>
    1d12:	83 c0       	rjmp	.+262    	; 0x1e1a <_ZN5Print10printFloatEdh+0x138>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1d14:	11 23       	and	r17, r17
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <_ZN5Print10printFloatEdh+0x38>
    1d18:	8e c0       	rjmp	.+284    	; 0x1e36 <_ZN5Print10printFloatEdh+0x154>
    1d1a:	00 e0       	ldi	r16, 0x00	; 0
    1d1c:	50 e0       	ldi	r21, 0x00	; 0
    1d1e:	40 e0       	ldi	r20, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	2f e3       	ldi	r18, 0x3F	; 63
    rounding /= 10.0;
    1d24:	da 01       	movw	r26, r20
    1d26:	f9 01       	movw	r30, r18
    1d28:	6b 2f       	mov	r22, r27
    1d2a:	74 2f       	mov	r23, r20
    1d2c:	8f 2f       	mov	r24, r31
    1d2e:	92 2f       	mov	r25, r18
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e2       	ldi	r20, 0x20	; 32
    1d36:	51 e4       	ldi	r21, 0x41	; 65
    1d38:	0e 94 a9 20 	call	0x4152	; 0x4152 <__divsf3>
    1d3c:	56 2f       	mov	r21, r22
    1d3e:	47 2f       	mov	r20, r23
    1d40:	38 2f       	mov	r19, r24
    1d42:	29 2f       	mov	r18, r25
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1d44:	0f 5f       	subi	r16, 0xFF	; 255
    1d46:	01 17       	cp	r16, r17
    1d48:	68 f3       	brcs	.-38     	; 0x1d24 <_ZN5Print10printFloatEdh+0x42>
    rounding /= 10.0;
  
  number += rounding;
    1d4a:	c7 01       	movw	r24, r14
    1d4c:	b6 01       	movw	r22, r12
    1d4e:	da 01       	movw	r26, r20
    1d50:	f9 01       	movw	r30, r18
    1d52:	2b 2f       	mov	r18, r27
    1d54:	3a 2f       	mov	r19, r26
    1d56:	4f 2f       	mov	r20, r31
    1d58:	5e 2f       	mov	r21, r30
    1d5a:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__addsf3>
    1d5e:	5b 01       	movw	r10, r22
    1d60:	c8 2e       	mov	r12, r24
    1d62:	09 2f       	mov	r16, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1d64:	7b 2d       	mov	r23, r11
    1d66:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__fixunssfsi>
    1d6a:	96 2e       	mov	r9, r22
    1d6c:	f7 2e       	mov	r15, r23
    1d6e:	e8 2e       	mov	r14, r24
    1d70:	d9 2e       	mov	r13, r25
  double remainder = number - (double)int_part;
    1d72:	0e 94 67 22 	call	0x44ce	; 0x44ce <__floatunsisf>
    1d76:	9b 01       	movw	r18, r22
    1d78:	ac 01       	movw	r20, r24
    1d7a:	6a 2d       	mov	r22, r10
    1d7c:	7b 2d       	mov	r23, r11
    1d7e:	8c 2d       	mov	r24, r12
    1d80:	90 2f       	mov	r25, r16
    1d82:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <__subsf3>
    1d86:	5b 01       	movw	r10, r22
    1d88:	c8 2e       	mov	r12, r24
    1d8a:	09 2f       	mov	r16, r25
  print(int_part);
    1d8c:	ce 01       	movw	r24, r28
    1d8e:	49 2d       	mov	r20, r9
    1d90:	5f 2d       	mov	r21, r15
    1d92:	6e 2d       	mov	r22, r14
    1d94:	7d 2d       	mov	r23, r13
    1d96:	2a e0       	ldi	r18, 0x0A	; 10
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <_ZN5Print5printEmi>

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    print("."); 
    1d9e:	ce 01       	movw	r24, r28
    1da0:	66 e7       	ldi	r22, 0x76	; 118
    1da2:	71 e0       	ldi	r23, 0x01	; 1
    1da4:	0e 94 99 0c 	call	0x1932	; 0x1932 <_ZN5Print5printEPKc>

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1da8:	6a 2d       	mov	r22, r10
    1daa:	7b 2d       	mov	r23, r11
    1dac:	8c 2d       	mov	r24, r12
    1dae:	90 2f       	mov	r25, r16
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e2       	ldi	r20, 0x20	; 32
    1db6:	51 e4       	ldi	r21, 0x41	; 65
    1db8:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__mulsf3>
    1dbc:	06 2f       	mov	r16, r22
    1dbe:	b7 2e       	mov	r11, r23
    1dc0:	a8 2e       	mov	r10, r24
    1dc2:	99 2e       	mov	r9, r25
    int toPrint = int(remainder);
    1dc4:	0e 94 14 22 	call	0x4428	; 0x4428 <__fixsfsi>
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
{
  print((long) n, base);
    1dc8:	6b 01       	movw	r12, r22
    1dca:	ee 24       	eor	r14, r14
    1dcc:	d7 fc       	sbrc	r13, 7
    1dce:	e0 94       	com	r14
    1dd0:	fe 2c       	mov	r15, r14
    1dd2:	ce 01       	movw	r24, r28
    1dd4:	b7 01       	movw	r22, r14
    1dd6:	a6 01       	movw	r20, r12
    1dd8:	2a e0       	ldi	r18, 0x0A	; 10
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN5Print5printEli>
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
    1de0:	c7 01       	movw	r24, r14
    1de2:	b6 01       	movw	r22, r12
    1de4:	0e 94 b7 21 	call	0x436e	; 0x436e <__floatsisf>
    1de8:	9b 01       	movw	r18, r22
    1dea:	ac 01       	movw	r20, r24
    1dec:	60 2f       	mov	r22, r16
    1dee:	7b 2d       	mov	r23, r11
    1df0:	8a 2d       	mov	r24, r10
    1df2:	99 2d       	mov	r25, r9
    1df4:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <__subsf3>
    1df8:	5b 01       	movw	r10, r22
    1dfa:	c8 2e       	mov	r12, r24
    1dfc:	09 2f       	mov	r16, r25
    1dfe:	11 50       	subi	r17, 0x01	; 1
  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    print("."); 

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1e00:	99 f6       	brne	.-90     	; 0x1da8 <_ZN5Print10printFloatEdh+0xc6>
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
  } 
}
    1e02:	df 91       	pop	r29
    1e04:	cf 91       	pop	r28
    1e06:	1f 91       	pop	r17
    1e08:	0f 91       	pop	r16
    1e0a:	ff 90       	pop	r15
    1e0c:	ef 90       	pop	r14
    1e0e:	df 90       	pop	r13
    1e10:	cf 90       	pop	r12
    1e12:	bf 90       	pop	r11
    1e14:	af 90       	pop	r10
    1e16:	9f 90       	pop	r9
    1e18:	08 95       	ret
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	4d e2       	ldi	r20, 0x2D	; 45
    1e1e:	50 e0       	ldi	r21, 0x00	; 0
    1e20:	60 e0       	ldi	r22, 0x00	; 0
    1e22:	70 e0       	ldi	r23, 0x00	; 0
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN5Print5printEli>
{ 
  // Handle negative numbers
  if (number < 0.0)
  {
     print('-');
     number = -number;
    1e2c:	f7 fa       	bst	r15, 7
    1e2e:	f0 94       	com	r15
    1e30:	f7 f8       	bld	r15, 7
    1e32:	f0 94       	com	r15
    1e34:	6f cf       	rjmp	.-290    	; 0x1d14 <_ZN5Print10printFloatEdh+0x32>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  print(int_part);
    1e36:	c7 01       	movw	r24, r14
    1e38:	b6 01       	movw	r22, r12
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e0       	ldi	r20, 0x00	; 0
    1e40:	5f e3       	ldi	r21, 0x3F	; 63
    1e42:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__addsf3>
    1e46:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__fixunssfsi>
    1e4a:	ab 01       	movw	r20, r22
    1e4c:	bc 01       	movw	r22, r24
    1e4e:	ce 01       	movw	r24, r28
    1e50:	2a e0       	ldi	r18, 0x0A	; 10
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <_ZN5Print5printEmi>
    1e58:	d4 cf       	rjmp	.-88     	; 0x1e02 <_ZN5Print10printFloatEdh+0x120>

00001e5a <_ZN5Print5printEdi>:
  else printNumber(n, base);
}

void Print::print(double n, int digits)
{
  printFloat(n, digits);
    1e5a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <_ZN5Print10printFloatEdh>
}
    1e5e:	08 95       	ret

00001e60 <_ZN5Print7printlnEdi>:
  print(n, base);
  println();
}

void Print::println(double n, int digits)
{
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	ec 01       	movw	r28, r24
  else printNumber(n, base);
}

void Print::print(double n, int digits)
{
  printFloat(n, digits);
    1e66:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <_ZN5Print10printFloatEdh>
}

void Print::println(double n, int digits)
{
  print(n, digits);
  println();
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN5Print7printlnEv>
}
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	08 95       	ret

00001e76 <_ZN7TwoWireC2Ev>:

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
{
}
    1e76:	08 95       	ret

00001e78 <_ZN7TwoWireC1Ev>:
    1e78:	08 95       	ret

00001e7a <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	80 93 2e 05 	sts	0x052E, r24
  // set address of targeted slave
  txAddress = address;
    1e80:	60 93 0b 05 	sts	0x050B, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1e84:	10 92 2c 05 	sts	0x052C, r1
  txBufferLength = 0;
    1e88:	10 92 2d 05 	sts	0x052D, r1
}
    1e8c:	08 95       	ret

00001e8e <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	80 93 2e 05 	sts	0x052E, r24
  // set address of targeted slave
  txAddress = address;
    1e94:	60 93 0b 05 	sts	0x050B, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1e98:	10 92 2c 05 	sts	0x052C, r1
  txBufferLength = 0;
    1e9c:	10 92 2d 05 	sts	0x052D, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    1ea0:	08 95       	ret

00001ea2 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
uint8_t TwoWire::available(void)
{
    1ea2:	80 91 0a 05 	lds	r24, 0x050A
    1ea6:	90 91 09 05 	lds	r25, 0x0509
  return rxBufferLength - rxBufferIndex;
}
    1eaa:	89 1b       	sub	r24, r25
    1eac:	08 95       	ret

00001eae <_ZN7TwoWire7receiveEv>:
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    1eae:	90 91 09 05 	lds	r25, 0x0509
    1eb2:	80 91 0a 05 	lds	r24, 0x050A
    1eb6:	98 17       	cp	r25, r24
    1eb8:	48 f4       	brcc	.+18     	; 0x1ecc <_ZN7TwoWire7receiveEv+0x1e>
    value = rxBuffer[rxBufferIndex];
    1eba:	e9 2f       	mov	r30, r25
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	e7 51       	subi	r30, 0x17	; 23
    1ec0:	fb 4f       	sbci	r31, 0xFB	; 251
    1ec2:	80 81       	ld	r24, Z
    ++rxBufferIndex;
    1ec4:	9f 5f       	subi	r25, 0xFF	; 255
    1ec6:	90 93 09 05 	sts	0x0509, r25
  }

  return value;
}
    1eca:	08 95       	ret
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	08 95       	ret

00001ed0 <_ZN7TwoWire16onReceiveServiceEPhi>:
  return value;
}

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
    1ed0:	cf 93       	push	r28
    1ed2:	df 93       	push	r29
    1ed4:	9c 01       	movw	r18, r24
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    1ed6:	e0 91 31 05 	lds	r30, 0x0531
    1eda:	f0 91 32 05 	lds	r31, 0x0532
    1ede:	30 97       	sbiw	r30, 0x00	; 0
    1ee0:	11 f1       	breq	.+68     	; 0x1f26 <_ZN7TwoWire16onReceiveServiceEPhi+0x56>
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    1ee2:	90 91 09 05 	lds	r25, 0x0509
    1ee6:	80 91 0a 05 	lds	r24, 0x050A
    1eea:	98 17       	cp	r25, r24
    1eec:	e0 f0       	brcs	.+56     	; 0x1f26 <_ZN7TwoWire16onReceiveServiceEPhi+0x56>
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    1eee:	16 16       	cp	r1, r22
    1ef0:	17 06       	cpc	r1, r23
    1ef2:	9c f4       	brge	.+38     	; 0x1f1a <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
    1ef4:	a0 e0       	ldi	r26, 0x00	; 0
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	40 e0       	ldi	r20, 0x00	; 0
    1efc:	50 e0       	ldi	r21, 0x00	; 0
    rxBuffer[i] = inBytes[i];    
    1efe:	a7 51       	subi	r26, 0x17	; 23
    1f00:	bb 4f       	sbci	r27, 0xFB	; 251
    1f02:	42 0f       	add	r20, r18
    1f04:	53 1f       	adc	r21, r19
    1f06:	ea 01       	movw	r28, r20
    1f08:	48 81       	ld	r20, Y
    1f0a:	4c 93       	st	X, r20
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    1f0c:	9f 5f       	subi	r25, 0xFF	; 255
    1f0e:	49 2f       	mov	r20, r25
    1f10:	50 e0       	ldi	r21, 0x00	; 0
    1f12:	da 01       	movw	r26, r20
    1f14:	46 17       	cp	r20, r22
    1f16:	57 07       	cpc	r21, r23
    1f18:	94 f3       	brlt	.-28     	; 0x1efe <_ZN7TwoWire16onReceiveServiceEPhi+0x2e>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
    1f1a:	10 92 09 05 	sts	0x0509, r1
  rxBufferLength = numBytes;
    1f1e:	60 93 0a 05 	sts	0x050A, r22
  // alert user program
  user_onReceive(numBytes);
    1f22:	cb 01       	movw	r24, r22
    1f24:	09 95       	icall
}
    1f26:	df 91       	pop	r29
    1f28:	cf 91       	pop	r28
    1f2a:	08 95       	ret

00001f2c <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    1f2c:	e0 91 2f 05 	lds	r30, 0x052F
    1f30:	f0 91 30 05 	lds	r31, 0x0530
    1f34:	30 97       	sbiw	r30, 0x00	; 0
    1f36:	29 f0       	breq	.+10     	; 0x1f42 <_ZN7TwoWire16onRequestServiceEv+0x16>
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
    1f38:	10 92 2c 05 	sts	0x052C, r1
  txBufferLength = 0;
    1f3c:	10 92 2d 05 	sts	0x052D, r1
  // alert user program
  user_onRequest();
    1f40:	09 95       	icall
    1f42:	08 95       	ret

00001f44 <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  user_onReceive = function;
    1f44:	70 93 32 05 	sts	0x0532, r23
    1f48:	60 93 31 05 	sts	0x0531, r22
}
    1f4c:	08 95       	ret

00001f4e <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1f4e:	70 93 30 05 	sts	0x0530, r23
    1f52:	60 93 2f 05 	sts	0x052F, r22
}
    1f56:	08 95       	ret

00001f58 <_ZN7TwoWire4sendEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(uint8_t data)
{
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	0f 92       	push	r0
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    1f64:	80 91 2e 05 	lds	r24, 0x052E
    1f68:	88 23       	and	r24, r24
    1f6a:	c1 f0       	breq	.+48     	; 0x1f9c <_ZN7TwoWire4sendEh+0x44>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    1f6c:	80 91 2d 05 	lds	r24, 0x052D
    1f70:	80 32       	cpi	r24, 0x20	; 32
    1f72:	20 f0       	brcs	.+8      	; 0x1f7c <_ZN7TwoWire4sendEh+0x24>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
}
    1f74:	0f 90       	pop	r0
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
      return;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    1f7c:	80 91 2c 05 	lds	r24, 0x052C
    1f80:	e8 2f       	mov	r30, r24
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	e4 5f       	subi	r30, 0xF4	; 244
    1f86:	fa 4f       	sbci	r31, 0xFA	; 250
    1f88:	60 83       	st	Z, r22
    ++txBufferIndex;
    1f8a:	8f 5f       	subi	r24, 0xFF	; 255
    1f8c:	80 93 2c 05 	sts	0x052C, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    1f90:	80 93 2d 05 	sts	0x052D, r24
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
}
    1f94:	0f 90       	pop	r0
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret
    // update amount in buffer   
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	01 96       	adiw	r24, 0x01	; 1
    1fa0:	61 e0       	ldi	r22, 0x01	; 1
    1fa2:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <twi_transmit>
  }
}
    1fa6:	0f 90       	pop	r0
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	08 95       	ret

00001fae <_ZN7TwoWire4sendEi>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(int data)
{
  send((uint8_t)data);
    1fae:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN7TwoWire4sendEh>
}
    1fb2:	08 95       	ret

00001fb4 <_ZN7TwoWire4sendEPhh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(uint8_t* data, uint8_t quantity)
{
    1fb4:	ef 92       	push	r14
    1fb6:	ff 92       	push	r15
    1fb8:	0f 93       	push	r16
    1fba:	1f 93       	push	r17
    1fbc:	cf 93       	push	r28
    1fbe:	df 93       	push	r29
    1fc0:	ec 01       	movw	r28, r24
    1fc2:	16 2f       	mov	r17, r22
    1fc4:	04 2f       	mov	r16, r20
  if(transmitting){
    1fc6:	80 91 2e 05 	lds	r24, 0x052E
    1fca:	88 23       	and	r24, r24
    1fcc:	a9 f0       	breq	.+42     	; 0x1ff8 <_ZN7TwoWire4sendEPhh+0x44>
  // in master transmitter mode
    for(uint8_t i = 0; i < quantity; ++i){
    1fce:	44 23       	and	r20, r20
    1fd0:	61 f0       	breq	.+24     	; 0x1fea <_ZN7TwoWire4sendEPhh+0x36>
    1fd2:	e6 2e       	mov	r14, r22
    1fd4:	f7 2e       	mov	r15, r23
      send(data[i]);
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	f7 01       	movw	r30, r14
    1fda:	61 91       	ld	r22, Z+
    1fdc:	7f 01       	movw	r14, r30
    1fde:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN7TwoWire4sendEh>
// or after beginTransmission(address)
void TwoWire::send(uint8_t* data, uint8_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(uint8_t i = 0; i < quantity; ++i){
    1fe2:	8e 2d       	mov	r24, r14
    1fe4:	81 1b       	sub	r24, r17
    1fe6:	80 17       	cp	r24, r16
    1fe8:	b0 f3       	brcs	.-20     	; 0x1fd6 <_ZN7TwoWire4sendEPhh+0x22>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
  }
}
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	ff 90       	pop	r15
    1ff4:	ef 90       	pop	r14
    1ff6:	08 95       	ret
      send(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    1ff8:	86 2f       	mov	r24, r22
    1ffa:	97 2f       	mov	r25, r23
    1ffc:	64 2f       	mov	r22, r20
    1ffe:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <twi_transmit>
  }
}
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	1f 91       	pop	r17
    2008:	0f 91       	pop	r16
    200a:	ff 90       	pop	r15
    200c:	ef 90       	pop	r14
    200e:	08 95       	ret

00002010 <_ZN7TwoWire4sendEPc>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(char* data)
{
  send((uint8_t*)data, strlen(data));
    2010:	db 01       	movw	r26, r22
    2012:	0d 90       	ld	r0, X+
    2014:	00 20       	and	r0, r0
    2016:	e9 f7       	brne	.-6      	; 0x2012 <_ZN7TwoWire4sendEPc+0x2>
    2018:	ad 01       	movw	r20, r26
    201a:	41 50       	subi	r20, 0x01	; 1
    201c:	50 40       	sbci	r21, 0x00	; 0
    201e:	46 1b       	sub	r20, r22
    2020:	57 0b       	sbc	r21, r23
    2022:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <_ZN7TwoWire4sendEPhh>
}
    2026:	08 95       	ret

00002028 <_ZN7TwoWire15endTransmissionEv>:
}

uint8_t TwoWire::endTransmission(void)
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1);
    2028:	80 91 0b 05 	lds	r24, 0x050B
    202c:	6c e0       	ldi	r22, 0x0C	; 12
    202e:	75 e0       	ldi	r23, 0x05	; 5
    2030:	40 91 2d 05 	lds	r20, 0x052D
    2034:	21 e0       	ldi	r18, 0x01	; 1
    2036:	0e 94 1c 1c 	call	0x3838	; 0x3838 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    203a:	10 92 2c 05 	sts	0x052C, r1
  txBufferLength = 0;
    203e:	10 92 2d 05 	sts	0x052D, r1
  // indicate that we are done transmitting
  transmitting = 0;
    2042:	10 92 2e 05 	sts	0x052E, r1
  return ret;
}
    2046:	08 95       	ret

00002048 <_ZN7TwoWire11requestFromEhh>:
{
  begin((uint8_t)address);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
    2048:	86 2f       	mov	r24, r22
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity);
    204a:	41 32       	cpi	r20, 0x21	; 33
    204c:	08 f0       	brcs	.+2      	; 0x2050 <_ZN7TwoWire11requestFromEhh+0x8>
    204e:	40 e2       	ldi	r20, 0x20	; 32
    2050:	69 ee       	ldi	r22, 0xE9	; 233
    2052:	74 e0       	ldi	r23, 0x04	; 4
    2054:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    2058:	10 92 09 05 	sts	0x0509, r1
  rxBufferLength = read;
    205c:	80 93 0a 05 	sts	0x050A, r24

  return read;
}
    2060:	08 95       	ret

00002062 <_ZN7TwoWire11requestFromEii>:

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity);
    2062:	0e 94 24 10 	call	0x2048	; 0x2048 <_ZN7TwoWire11requestFromEhh>
}
    2066:	08 95       	ret

00002068 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    2068:	10 92 09 05 	sts	0x0509, r1
  rxBufferLength = 0;
    206c:	10 92 0a 05 	sts	0x050A, r1

  txBufferIndex = 0;
    2070:	10 92 2c 05 	sts	0x052C, r1
  txBufferLength = 0;
    2074:	10 92 2d 05 	sts	0x052D, r1

  twi_init();
    2078:	0e 94 cc 1b 	call	0x3798	; 0x3798 <twi_init>
}
    207c:	08 95       	ret

0000207e <_ZN7TwoWire5beginEh>:

void TwoWire::begin(uint8_t address)
{
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
    2082:	ec 01       	movw	r28, r24
    2084:	86 2f       	mov	r24, r22
  twi_setAddress(address);
    2086:	0e 94 df 1b 	call	0x37be	; 0x37be <twi_setAddress>
  twi_attachSlaveTxEvent(onRequestService);
    208a:	86 e9       	ldi	r24, 0x96	; 150
    208c:	9f e0       	ldi	r25, 0x0F	; 15
    208e:	0e 94 8f 1c 	call	0x391e	; 0x391e <twi_attachSlaveTxEvent>
  twi_attachSlaveRxEvent(onReceiveService);
    2092:	88 e6       	ldi	r24, 0x68	; 104
    2094:	9f e0       	ldi	r25, 0x0F	; 15
    2096:	0e 94 8a 1c 	call	0x3914	; 0x3914 <twi_attachSlaveRxEvent>
  begin();
    209a:	ce 01       	movw	r24, r28
    209c:	0e 94 34 10 	call	0x2068	; 0x2068 <_ZN7TwoWire5beginEv>
}
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	08 95       	ret

000020a6 <_ZN7TwoWire5beginEi>:

void TwoWire::begin(int address)
{
  begin((uint8_t)address);
    20a6:	0e 94 3f 10 	call	0x207e	; 0x207e <_ZN7TwoWire5beginEh>
}
    20aa:	08 95       	ret

000020ac <__vector_16>:
volatile unsigned long timer0_overflow_count = 0;
volatile unsigned long timer0_millis = 0;
static unsigned char timer0_fract = 0;

SIGNAL(TIMER0_OVF_vect)
{
    20ac:	1f 92       	push	r1
    20ae:	0f 92       	push	r0
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	0f 92       	push	r0
    20b4:	11 24       	eor	r1, r1
    20b6:	2f 93       	push	r18
    20b8:	3f 93       	push	r19
    20ba:	8f 93       	push	r24
    20bc:	9f 93       	push	r25
    20be:	af 93       	push	r26
    20c0:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    20c2:	80 91 37 05 	lds	r24, 0x0537
    20c6:	90 91 38 05 	lds	r25, 0x0538
    20ca:	a0 91 39 05 	lds	r26, 0x0539
    20ce:	b0 91 3a 05 	lds	r27, 0x053A
	unsigned char f = timer0_fract;
    20d2:	30 91 3b 05 	lds	r19, 0x053B

	m += MILLIS_INC;
    20d6:	01 96       	adiw	r24, 0x01	; 1
    20d8:	a1 1d       	adc	r26, r1
    20da:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    20dc:	23 2f       	mov	r18, r19
    20de:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    20e0:	2d 37       	cpi	r18, 0x7D	; 125
    20e2:	20 f0       	brcs	.+8      	; 0x20ec <__vector_16+0x40>
		f -= FRACT_MAX;
    20e4:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    20e6:	01 96       	adiw	r24, 0x01	; 1
    20e8:	a1 1d       	adc	r26, r1
    20ea:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    20ec:	20 93 3b 05 	sts	0x053B, r18
	timer0_millis = m;
    20f0:	80 93 37 05 	sts	0x0537, r24
    20f4:	90 93 38 05 	sts	0x0538, r25
    20f8:	a0 93 39 05 	sts	0x0539, r26
    20fc:	b0 93 3a 05 	sts	0x053A, r27
	timer0_overflow_count++;
    2100:	80 91 33 05 	lds	r24, 0x0533
    2104:	90 91 34 05 	lds	r25, 0x0534
    2108:	a0 91 35 05 	lds	r26, 0x0535
    210c:	b0 91 36 05 	lds	r27, 0x0536
    2110:	01 96       	adiw	r24, 0x01	; 1
    2112:	a1 1d       	adc	r26, r1
    2114:	b1 1d       	adc	r27, r1
    2116:	80 93 33 05 	sts	0x0533, r24
    211a:	90 93 34 05 	sts	0x0534, r25
    211e:	a0 93 35 05 	sts	0x0535, r26
    2122:	b0 93 36 05 	sts	0x0536, r27
}
    2126:	bf 91       	pop	r27
    2128:	af 91       	pop	r26
    212a:	9f 91       	pop	r25
    212c:	8f 91       	pop	r24
    212e:	3f 91       	pop	r19
    2130:	2f 91       	pop	r18
    2132:	0f 90       	pop	r0
    2134:	0f be       	out	0x3f, r0	; 63
    2136:	0f 90       	pop	r0
    2138:	1f 90       	pop	r1
    213a:	18 95       	reti

0000213c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    213c:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    213e:	f8 94       	cli
	m = timer0_millis;
    2140:	20 91 37 05 	lds	r18, 0x0537
    2144:	30 91 38 05 	lds	r19, 0x0538
    2148:	40 91 39 05 	lds	r20, 0x0539
    214c:	50 91 3a 05 	lds	r21, 0x053A
	SREG = oldSREG;
    2150:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    2152:	b9 01       	movw	r22, r18
    2154:	ca 01       	movw	r24, r20
    2156:	08 95       	ret

00002158 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2158:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    215a:	f8 94       	cli
	m = timer0_overflow_count;
    215c:	20 91 33 05 	lds	r18, 0x0533
    2160:	30 91 34 05 	lds	r19, 0x0534
    2164:	40 91 35 05 	lds	r20, 0x0535
    2168:	50 91 36 05 	lds	r21, 0x0536
#if defined(TCNT0)
	t = TCNT0;
    216c:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    216e:	a8 9b       	sbis	0x15, 0	; 21
    2170:	06 c0       	rjmp	.+12     	; 0x217e <micros+0x26>
    2172:	8f 3f       	cpi	r24, 0xFF	; 255
    2174:	21 f0       	breq	.+8      	; 0x217e <micros+0x26>
		m++;
    2176:	2f 5f       	subi	r18, 0xFF	; 255
    2178:	3f 4f       	sbci	r19, 0xFF	; 255
    217a:	4f 4f       	sbci	r20, 0xFF	; 255
    217c:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    217e:	9f bf       	out	0x3f, r25	; 63
    2180:	54 2f       	mov	r21, r20
    2182:	43 2f       	mov	r20, r19
    2184:	32 2f       	mov	r19, r18
    2186:	22 27       	eor	r18, r18
    2188:	28 0f       	add	r18, r24
    218a:	31 1d       	adc	r19, r1
    218c:	41 1d       	adc	r20, r1
    218e:	51 1d       	adc	r21, r1
    2190:	22 0f       	add	r18, r18
    2192:	33 1f       	adc	r19, r19
    2194:	44 1f       	adc	r20, r20
    2196:	55 1f       	adc	r21, r21
    2198:	22 0f       	add	r18, r18
    219a:	33 1f       	adc	r19, r19
    219c:	44 1f       	adc	r20, r20
    219e:	55 1f       	adc	r21, r21
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
    21a0:	b9 01       	movw	r22, r18
    21a2:	ca 01       	movw	r24, r20
    21a4:	08 95       	ret

000021a6 <delay>:

void delay(unsigned long ms)
{
    21a6:	ef 92       	push	r14
    21a8:	ff 92       	push	r15
    21aa:	0f 93       	push	r16
    21ac:	1f 93       	push	r17
    21ae:	cf 93       	push	r28
    21b0:	df 93       	push	r29
    21b2:	7b 01       	movw	r14, r22
    21b4:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
    21b6:	0e 94 ac 10 	call	0x2158	; 0x2158 <micros>
    21ba:	eb 01       	movw	r28, r22

	while (ms > 0) {
    21bc:	e1 14       	cp	r14, r1
    21be:	f1 04       	cpc	r15, r1
    21c0:	01 05       	cpc	r16, r1
    21c2:	11 05       	cpc	r17, r1
    21c4:	a1 f0       	breq	.+40     	; 0x21ee <delay+0x48>
		if (((uint16_t)micros() - start) >= 1000) {
    21c6:	0e 94 ac 10 	call	0x2158	; 0x2158 <micros>
    21ca:	6c 1b       	sub	r22, r28
    21cc:	7d 0b       	sbc	r23, r29
    21ce:	83 e0       	ldi	r24, 0x03	; 3
    21d0:	68 3e       	cpi	r22, 0xE8	; 232
    21d2:	78 07       	cpc	r23, r24
    21d4:	c0 f3       	brcs	.-16     	; 0x21c6 <delay+0x20>
			ms--;
    21d6:	08 94       	sec
    21d8:	e1 08       	sbc	r14, r1
    21da:	f1 08       	sbc	r15, r1
    21dc:	01 09       	sbc	r16, r1
    21de:	11 09       	sbc	r17, r1
			start += 1000;
    21e0:	c8 51       	subi	r28, 0x18	; 24
    21e2:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    21e4:	e1 14       	cp	r14, r1
    21e6:	f1 04       	cpc	r15, r1
    21e8:	01 05       	cpc	r16, r1
    21ea:	11 05       	cpc	r17, r1
    21ec:	61 f7       	brne	.-40     	; 0x21c6 <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    21ee:	df 91       	pop	r29
    21f0:	cf 91       	pop	r28
    21f2:	1f 91       	pop	r17
    21f4:	0f 91       	pop	r16
    21f6:	ff 90       	pop	r15
    21f8:	ef 90       	pop	r14
    21fa:	08 95       	ret

000021fc <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	39 f0       	breq	.+14     	; 0x220e <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    2200:	88 0f       	add	r24, r24
    2202:	99 1f       	adc	r25, r25
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    2208:	02 97       	sbiw	r24, 0x02	; 2

	// busy wait
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <delayMicroseconds+0xe>
    220e:	08 95       	ret

00002210 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2210:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2212:	84 b5       	in	r24, 0x24	; 36
    2214:	82 60       	ori	r24, 0x02	; 2
    2216:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2218:	84 b5       	in	r24, 0x24	; 36
    221a:	81 60       	ori	r24, 0x01	; 1
    221c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    221e:	85 b5       	in	r24, 0x25	; 37
    2220:	82 60       	ori	r24, 0x02	; 2
    2222:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2224:	85 b5       	in	r24, 0x25	; 37
    2226:	81 60       	ori	r24, 0x01	; 1
    2228:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    222a:	ee e6       	ldi	r30, 0x6E	; 110
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	81 60       	ori	r24, 0x01	; 1
    2232:	80 83       	st	Z, r24
	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

	TCCR1B = 0;
    2234:	e1 e8       	ldi	r30, 0x81	; 129
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	sbi(TCCR1B, CS11);
    223a:	80 81       	ld	r24, Z
    223c:	82 60       	ori	r24, 0x02	; 2
    223e:	80 83       	st	Z, r24
	sbi(TCCR1B, CS10);
    2240:	80 81       	ld	r24, Z
    2242:	81 60       	ori	r24, 0x01	; 1
    2244:	80 83       	st	Z, r24
	sbi(TCCR1, CS11);
	sbi(TCCR1, CS10);
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2246:	e0 e8       	ldi	r30, 0x80	; 128
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	81 60       	ori	r24, 0x01	; 1
    224e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2250:	e1 eb       	ldi	r30, 0xB1	; 177
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	84 60       	ori	r24, 0x04	; 4
    2258:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    225a:	e0 eb       	ldi	r30, 0xB0	; 176
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	81 60       	ori	r24, 0x01	; 1
    2262:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    2264:	ea e7       	ldi	r30, 0x7A	; 122
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	84 60       	ori	r24, 0x04	; 4
    226c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    226e:	80 81       	ld	r24, Z
    2270:	82 60       	ori	r24, 0x02	; 2
    2272:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    2274:	80 81       	ld	r24, Z
    2276:	81 60       	ori	r24, 0x01	; 1
    2278:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    227a:	80 81       	ld	r24, Z
    227c:	80 68       	ori	r24, 0x80	; 128
    227e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2280:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    2284:	08 95       	ret

00002286 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    2286:	80 93 82 01 	sts	0x0182, r24
}
    228a:	08 95       	ret

0000228c <analogRead>:
	uint8_t low, high;

#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    228c:	8e 30       	cpi	r24, 0x0E	; 14
    228e:	08 f0       	brcs	.+2      	; 0x2292 <analogRead+0x6>
    2290:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2292:	87 70       	andi	r24, 0x07	; 7
    2294:	90 91 82 01 	lds	r25, 0x0182
    2298:	92 95       	swap	r25
    229a:	99 0f       	add	r25, r25
    229c:	99 0f       	add	r25, r25
    229e:	90 7c       	andi	r25, 0xC0	; 192
    22a0:	98 2b       	or	r25, r24
    22a2:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    22a6:	80 91 7a 00 	lds	r24, 0x007A
    22aa:	80 64       	ori	r24, 0x40	; 64
    22ac:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    22b0:	80 91 7a 00 	lds	r24, 0x007A
    22b4:	86 fd       	sbrc	r24, 6
    22b6:	fc cf       	rjmp	.-8      	; 0x22b0 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    22b8:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    22bc:	30 91 79 00 	lds	r19, 0x0079
    22c0:	93 2f       	mov	r25, r19
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	28 2b       	or	r18, r24
    22c8:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    22ca:	c9 01       	movw	r24, r18
    22cc:	08 95       	ret

000022ce <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    22ce:	1f 93       	push	r17
    22d0:	cf 93       	push	r28
    22d2:	df 93       	push	r29
    22d4:	18 2f       	mov	r17, r24
    22d6:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    22d8:	61 e0       	ldi	r22, 0x01	; 1
    22da:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
	if (val == 0)
    22de:	20 97       	sbiw	r28, 0x00	; 0
    22e0:	59 f1       	breq	.+86     	; 0x2338 <analogWrite+0x6a>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
    22e2:	cf 3f       	cpi	r28, 0xFF	; 255
    22e4:	d1 05       	cpc	r29, r1
    22e6:	a1 f0       	breq	.+40     	; 0x2310 <analogWrite+0x42>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    22e8:	e1 2f       	mov	r30, r17
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	e0 5c       	subi	r30, 0xC0	; 192
    22ee:	f5 4f       	sbci	r31, 0xF5	; 245
    22f0:	84 91       	lpm	r24, Z+
    22f2:	83 30       	cpi	r24, 0x03	; 3
    22f4:	e1 f1       	breq	.+120    	; 0x236e <analogWrite+0xa0>
    22f6:	84 30       	cpi	r24, 0x04	; 4
    22f8:	98 f0       	brcs	.+38     	; 0x2320 <analogWrite+0x52>
    22fa:	86 30       	cpi	r24, 0x06	; 6
    22fc:	69 f1       	breq	.+90     	; 0x2358 <analogWrite+0x8a>
    22fe:	87 30       	cpi	r24, 0x07	; 7
    2300:	09 f4       	brne	.+2      	; 0x2304 <analogWrite+0x36>
    2302:	4f c0       	rjmp	.+158    	; 0x23a2 <analogWrite+0xd4>
    2304:	84 30       	cpi	r24, 0x04	; 4
    2306:	09 f4       	brne	.+2      	; 0x230a <analogWrite+0x3c>
    2308:	3f c0       	rjmp	.+126    	; 0x2388 <analogWrite+0xba>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    230a:	c0 38       	cpi	r28, 0x80	; 128
    230c:	d1 05       	cpc	r29, r1
    230e:	a4 f0       	brlt	.+40     	; 0x2338 <analogWrite+0x6a>
					digitalWrite(pin, LOW);
				} else {
					digitalWrite(pin, HIGH);
    2310:	81 2f       	mov	r24, r17
    2312:	61 e0       	ldi	r22, 0x01	; 1
    2314:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
				}
		}
	}
}
    2318:	df 91       	pop	r29
    231a:	cf 91       	pop	r28
    231c:	1f 91       	pop	r17
    231e:	08 95       	ret
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2320:	81 30       	cpi	r24, 0x01	; 1
    2322:	91 f0       	breq	.+36     	; 0x2348 <analogWrite+0x7a>
    2324:	82 30       	cpi	r24, 0x02	; 2
    2326:	89 f7       	brne	.-30     	; 0x230a <analogWrite+0x3c>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    2328:	84 b5       	in	r24, 0x24	; 36
    232a:	80 62       	ori	r24, 0x20	; 32
    232c:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    232e:	c8 bd       	out	0x28, r28	; 40
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	1f 91       	pop	r17
    2336:	08 95       	ret
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
					digitalWrite(pin, LOW);
    2338:	81 2f       	mov	r24, r17
    233a:	60 e0       	ldi	r22, 0x00	; 0
    233c:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2340:	df 91       	pop	r29
    2342:	cf 91       	pop	r28
    2344:	1f 91       	pop	r17
    2346:	08 95       	ret
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    2348:	84 b5       	in	r24, 0x24	; 36
    234a:	80 68       	ori	r24, 0x80	; 128
    234c:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    234e:	c7 bd       	out	0x27, r28	; 39
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2350:	df 91       	pop	r29
    2352:	cf 91       	pop	r28
    2354:	1f 91       	pop	r17
    2356:	08 95       	ret
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    2358:	80 91 b0 00 	lds	r24, 0x00B0
    235c:	80 68       	ori	r24, 0x80	; 128
    235e:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    2362:	c0 93 b3 00 	sts	0x00B3, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2366:	df 91       	pop	r29
    2368:	cf 91       	pop	r28
    236a:	1f 91       	pop	r17
    236c:	08 95       	ret
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    236e:	80 91 80 00 	lds	r24, 0x0080
    2372:	80 68       	ori	r24, 0x80	; 128
    2374:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    2378:	d0 93 89 00 	sts	0x0089, r29
    237c:	c0 93 88 00 	sts	0x0088, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2380:	df 91       	pop	r29
    2382:	cf 91       	pop	r28
    2384:	1f 91       	pop	r17
    2386:	08 95       	ret
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    2388:	80 91 80 00 	lds	r24, 0x0080
    238c:	80 62       	ori	r24, 0x20	; 32
    238e:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    2392:	d0 93 8b 00 	sts	0x008B, r29
    2396:	c0 93 8a 00 	sts	0x008A, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    239a:	df 91       	pop	r29
    239c:	cf 91       	pop	r28
    239e:	1f 91       	pop	r17
    23a0:	08 95       	ret
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    23a2:	80 91 b0 00 	lds	r24, 0x00B0
    23a6:	80 62       	ori	r24, 0x20	; 32
    23a8:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    23ac:	c0 93 b4 00 	sts	0x00B4, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	1f 91       	pop	r17
    23b6:	08 95       	ret

000023b8 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	fc 01       	movw	r30, r24
    23bc:	e4 5d       	subi	r30, 0xD4	; 212
    23be:	f5 4f       	sbci	r31, 0xF5	; 245
    23c0:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    23c2:	fc 01       	movw	r30, r24
    23c4:	e8 5e       	subi	r30, 0xE8	; 232
    23c6:	f5 4f       	sbci	r31, 0xF5	; 245
    23c8:	e4 91       	lpm	r30, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    23ca:	ee 23       	and	r30, r30
    23cc:	79 f0       	breq	.+30     	; 0x23ec <pinMode+0x34>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	ee 0f       	add	r30, r30
    23d2:	ff 1f       	adc	r31, r31
    23d4:	e6 50       	subi	r30, 0x06	; 6
    23d6:	f6 4f       	sbci	r31, 0xF6	; 246
    23d8:	a5 91       	lpm	r26, Z+
    23da:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
    23dc:	66 23       	and	r22, r22
    23de:	39 f0       	breq	.+14     	; 0x23ee <pinMode+0x36>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    23e0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    23e2:	f8 94       	cli
		*reg |= bit;
    23e4:	8c 91       	ld	r24, X
    23e6:	82 2b       	or	r24, r18
    23e8:	8c 93       	st	X, r24
		SREG = oldSREG;
    23ea:	9f bf       	out	0x3f, r25	; 63
    23ec:	08 95       	ret

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
    23ee:	9f b7       	in	r25, 0x3f	; 63
                cli();
    23f0:	f8 94       	cli
		*reg &= ~bit;
    23f2:	8c 91       	ld	r24, X
    23f4:	20 95       	com	r18
    23f6:	82 23       	and	r24, r18
    23f8:	8c 93       	st	X, r24
		SREG = oldSREG;
    23fa:	9f bf       	out	0x3f, r25	; 63
    23fc:	08 95       	ret

000023fe <_ZL10turnOffPWMh>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    23fe:	83 30       	cpi	r24, 0x03	; 3
    2400:	39 f1       	breq	.+78     	; 0x2450 <_ZL10turnOffPWMh+0x52>
    2402:	84 30       	cpi	r24, 0x04	; 4
    2404:	60 f0       	brcs	.+24     	; 0x241e <_ZL10turnOffPWMh+0x20>
    2406:	86 30       	cpi	r24, 0x06	; 6
    2408:	c9 f0       	breq	.+50     	; 0x243c <_ZL10turnOffPWMh+0x3e>
    240a:	87 30       	cpi	r24, 0x07	; 7
    240c:	69 f0       	breq	.+26     	; 0x2428 <_ZL10turnOffPWMh+0x2a>
    240e:	84 30       	cpi	r24, 0x04	; 4
    2410:	51 f4       	brne	.+20     	; 0x2426 <_ZL10turnOffPWMh+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2412:	80 91 80 00 	lds	r24, 0x0080
    2416:	8f 7d       	andi	r24, 0xDF	; 223
    2418:	80 93 80 00 	sts	0x0080, r24
    241c:	08 95       	ret
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    241e:	81 30       	cpi	r24, 0x01	; 1
    2420:	99 f0       	breq	.+38     	; 0x2448 <_ZL10turnOffPWMh+0x4a>
    2422:	82 30       	cpi	r24, 0x02	; 2
    2424:	39 f0       	breq	.+14     	; 0x2434 <_ZL10turnOffPWMh+0x36>
    2426:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2428:	80 91 b0 00 	lds	r24, 0x00B0
    242c:	8f 7d       	andi	r24, 0xDF	; 223
    242e:	80 93 b0 00 	sts	0x00B0, r24
    2432:	08 95       	ret
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2434:	84 b5       	in	r24, 0x24	; 36
    2436:	8f 7d       	andi	r24, 0xDF	; 223
    2438:	84 bd       	out	0x24, r24	; 36
    243a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    243c:	80 91 b0 00 	lds	r24, 0x00B0
    2440:	8f 77       	andi	r24, 0x7F	; 127
    2442:	80 93 b0 00 	sts	0x00B0, r24
    2446:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2448:	84 b5       	in	r24, 0x24	; 36
    244a:	8f 77       	andi	r24, 0x7F	; 127
    244c:	84 bd       	out	0x24, r24	; 36
    244e:	08 95       	ret
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2450:	80 91 80 00 	lds	r24, 0x0080
    2454:	8f 77       	andi	r24, 0x7F	; 127
    2456:	80 93 80 00 	sts	0x0080, r24
    245a:	08 95       	ret

0000245c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    245c:	0f 93       	push	r16
    245e:	1f 93       	push	r17
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	0f 92       	push	r0
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	f9 01       	movw	r30, r18
    2470:	e0 5c       	subi	r30, 0xC0	; 192
    2472:	f5 4f       	sbci	r31, 0xF5	; 245
    2474:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2476:	f9 01       	movw	r30, r18
    2478:	e4 5d       	subi	r30, 0xD4	; 212
    247a:	f5 4f       	sbci	r31, 0xF5	; 245
    247c:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
    247e:	28 5e       	subi	r18, 0xE8	; 232
    2480:	35 4f       	sbci	r19, 0xF5	; 245
    2482:	f9 01       	movw	r30, r18
    2484:	14 91       	lpm	r17, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2486:	11 23       	and	r17, r17
    2488:	91 f0       	breq	.+36     	; 0x24ae <digitalWrite+0x52>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    248a:	88 23       	and	r24, r24
    248c:	19 f5       	brne	.+70     	; 0x24d4 <digitalWrite+0x78>

	out = portOutputRegister(port);
    248e:	e1 2f       	mov	r30, r17
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	ee 0f       	add	r30, r30
    2494:	ff 1f       	adc	r31, r31
    2496:	ec 5f       	subi	r30, 0xFC	; 252
    2498:	f5 4f       	sbci	r31, 0xF5	; 245
    249a:	a5 91       	lpm	r26, Z+
    249c:	b4 91       	lpm	r27, Z+

	if (val == LOW) {
    249e:	66 23       	and	r22, r22
    24a0:	61 f0       	breq	.+24     	; 0x24ba <digitalWrite+0x5e>
		uint8_t oldSREG = SREG;
                cli();
		*out &= ~bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    24a2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    24a4:	f8 94       	cli
		*out |= bit;
    24a6:	8c 91       	ld	r24, X
    24a8:	80 2b       	or	r24, r16
    24aa:	8c 93       	st	X, r24
		SREG = oldSREG;
    24ac:	9f bf       	out	0x3f, r25	; 63
	}
}
    24ae:	0f 90       	pop	r0
    24b0:	cf 91       	pop	r28
    24b2:	df 91       	pop	r29
    24b4:	1f 91       	pop	r17
    24b6:	0f 91       	pop	r16
    24b8:	08 95       	ret
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);

	if (val == LOW) {
		uint8_t oldSREG = SREG;
    24ba:	9f b7       	in	r25, 0x3f	; 63
                cli();
    24bc:	f8 94       	cli
		*out &= ~bit;
    24be:	8c 91       	ld	r24, X
    24c0:	00 95       	com	r16
    24c2:	80 23       	and	r24, r16
    24c4:	8c 93       	st	X, r24
		SREG = oldSREG;
    24c6:	9f bf       	out	0x3f, r25	; 63
		uint8_t oldSREG = SREG;
                cli();
		*out |= bit;
		SREG = oldSREG;
	}
}
    24c8:	0f 90       	pop	r0
    24ca:	cf 91       	pop	r28
    24cc:	df 91       	pop	r29
    24ce:	1f 91       	pop	r17
    24d0:	0f 91       	pop	r16
    24d2:	08 95       	ret

	if (port == NOT_A_PIN) return;

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    24d4:	69 83       	std	Y+1, r22	; 0x01
    24d6:	0e 94 ff 11 	call	0x23fe	; 0x23fe <_ZL10turnOffPWMh>
    24da:	69 81       	ldd	r22, Y+1	; 0x01
    24dc:	d8 cf       	rjmp	.-80     	; 0x248e <digitalWrite+0x32>

000024de <digitalRead>:
		SREG = oldSREG;
	}
}

int digitalRead(uint8_t pin)
{
    24de:	0f 93       	push	r16
    24e0:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
    24e2:	28 2f       	mov	r18, r24
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	f9 01       	movw	r30, r18
    24e8:	e0 5c       	subi	r30, 0xC0	; 192
    24ea:	f5 4f       	sbci	r31, 0xF5	; 245
    24ec:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    24ee:	f9 01       	movw	r30, r18
    24f0:	e4 5d       	subi	r30, 0xD4	; 212
    24f2:	f5 4f       	sbci	r31, 0xF5	; 245
    24f4:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
    24f6:	28 5e       	subi	r18, 0xE8	; 232
    24f8:	35 4f       	sbci	r19, 0xF5	; 245
    24fa:	f9 01       	movw	r30, r18
    24fc:	14 91       	lpm	r17, Z+

	if (port == NOT_A_PIN) return LOW;
    24fe:	11 23       	and	r17, r17
    2500:	c9 f0       	breq	.+50     	; 0x2534 <digitalRead+0x56>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2502:	88 23       	and	r24, r24
    2504:	e9 f4       	brne	.+58     	; 0x2540 <digitalRead+0x62>

	if (*portInputRegister(port) & bit) return HIGH;
    2506:	e1 2f       	mov	r30, r17
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	ee 0f       	add	r30, r30
    250c:	ff 1f       	adc	r31, r31
    250e:	e2 5f       	subi	r30, 0xF2	; 242
    2510:	f5 4f       	sbci	r31, 0xF5	; 245
    2512:	a5 91       	lpm	r26, Z+
    2514:	b4 91       	lpm	r27, Z+
    2516:	8c 91       	ld	r24, X
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	80 23       	and	r24, r16
    251e:	21 f4       	brne	.+8      	; 0x2528 <digitalRead+0x4a>
	return LOW;
}
    2520:	c9 01       	movw	r24, r18
    2522:	1f 91       	pop	r17
    2524:	0f 91       	pop	r16
    2526:	08 95       	ret

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    2528:	21 e0       	ldi	r18, 0x01	; 1
    252a:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    252c:	c9 01       	movw	r24, r18
    252e:	1f 91       	pop	r17
    2530:	0f 91       	pop	r16
    2532:	08 95       	ret
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2538:	c9 01       	movw	r24, r18
    253a:	1f 91       	pop	r17
    253c:	0f 91       	pop	r16
    253e:	08 95       	ret

	if (port == NOT_A_PIN) return LOW;

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2540:	0e 94 ff 11 	call	0x23fe	; 0x23fe <_ZL10turnOffPWMh>
    2544:	e0 cf       	rjmp	.-64     	; 0x2506 <digitalRead+0x28>

00002546 <_ZNK6String6charAtEj>:
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

char String::charAt( unsigned int loc ) const
{
    2546:	dc 01       	movw	r26, r24
    2548:	ed 91       	ld	r30, X+
    254a:	fc 91       	ld	r31, X
    254c:	11 97       	sbiw	r26, 0x01	; 1
    254e:	e6 0f       	add	r30, r22
    2550:	f7 1f       	adc	r31, r23
  return operator[]( loc );
}
    2552:	80 81       	ld	r24, Z
    2554:	08 95       	ret

00002556 <_ZN6String9setCharAtEjc>:

void String::setCharAt( unsigned int loc, const char aChar ) 
{
    2556:	fc 01       	movw	r30, r24
  if(_buffer == NULL) return;
    2558:	80 81       	ld	r24, Z
    255a:	91 81       	ldd	r25, Z+1	; 0x01
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	49 f0       	breq	.+18     	; 0x2572 <_ZN6String9setCharAtEjc+0x1c>
  if(_length > loc) {
    2560:	24 81       	ldd	r18, Z+4	; 0x04
    2562:	35 81       	ldd	r19, Z+5	; 0x05
    2564:	62 17       	cp	r22, r18
    2566:	73 07       	cpc	r23, r19
    2568:	20 f4       	brcc	.+8      	; 0x2572 <_ZN6String9setCharAtEjc+0x1c>
    _buffer[loc] = aChar;
    256a:	68 0f       	add	r22, r24
    256c:	79 1f       	adc	r23, r25
    256e:	fb 01       	movw	r30, r22
    2570:	40 83       	st	Z, r20
    2572:	08 95       	ret

00002574 <_ZN6StringixEj>:
{
  return strcmp( _buffer, rhs._buffer ) >= 0;
}

char & String::operator[]( unsigned int index )
{
    2574:	fc 01       	movw	r30, r24
  static char dummy_writable_char;
  if (index >= _length || !_buffer) {
    2576:	84 81       	ldd	r24, Z+4	; 0x04
    2578:	95 81       	ldd	r25, Z+5	; 0x05
    257a:	68 17       	cp	r22, r24
    257c:	79 07       	cpc	r23, r25
    257e:	40 f4       	brcc	.+16     	; 0x2590 <_ZN6StringixEj+0x1c>
    2580:	80 81       	ld	r24, Z
    2582:	91 81       	ldd	r25, Z+1	; 0x01
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	21 f0       	breq	.+8      	; 0x2590 <_ZN6StringixEj+0x1c>
    dummy_writable_char = 0;
    return dummy_writable_char;
  }
  return _buffer[ index ];
    2588:	68 0f       	add	r22, r24
    258a:	79 1f       	adc	r23, r25
}
    258c:	cb 01       	movw	r24, r22
    258e:	08 95       	ret

char & String::operator[]( unsigned int index )
{
  static char dummy_writable_char;
  if (index >= _length || !_buffer) {
    dummy_writable_char = 0;
    2590:	10 92 3c 05 	sts	0x053C, r1
    2594:	6c e3       	ldi	r22, 0x3C	; 60
    2596:	75 e0       	ldi	r23, 0x05	; 5
    return dummy_writable_char;
  }
  return _buffer[ index ];
}
    2598:	cb 01       	movw	r24, r22
    259a:	08 95       	ret

0000259c <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
    259c:	dc 01       	movw	r26, r24
    259e:	ed 91       	ld	r30, X+
    25a0:	fc 91       	ld	r31, X
    25a2:	11 97       	sbiw	r26, 0x01	; 1
    25a4:	e6 0f       	add	r30, r22
    25a6:	f7 1f       	adc	r31, r23
  // need to check for valid index, to do later
  return _buffer[ index ];
}
    25a8:	80 81       	ld	r24, Z
    25aa:	08 95       	ret

000025ac <_ZN6String5toIntEv>:
  buf[len] = 0;
}


long String::toInt() {
  return atol(_buffer);
    25ac:	fc 01       	movw	r30, r24
    25ae:	80 81       	ld	r24, Z
    25b0:	91 81       	ldd	r25, Z+1	; 0x01
    25b2:	0e 94 c8 2b 	call	0x5790	; 0x5790 <atol>
}
    25b6:	08 95       	ret

000025b8 <_ZN6String11toCharArrayEPcj>:
  strncpy((char *)buf, _buffer, len);
  buf[len] = 0;
}

void String::toCharArray(char *buf, unsigned int bufsize)
{
    25b8:	0f 93       	push	r16
    25ba:	1f 93       	push	r17
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29
    25c0:	fc 01       	movw	r30, r24
    25c2:	eb 01       	movw	r28, r22
  if (!bufsize || !buf) return;
    25c4:	41 15       	cp	r20, r1
    25c6:	51 05       	cpc	r21, r1
    25c8:	a1 f0       	breq	.+40     	; 0x25f2 <_ZN6String11toCharArrayEPcj+0x3a>
    25ca:	61 15       	cp	r22, r1
    25cc:	71 05       	cpc	r23, r1
    25ce:	89 f0       	breq	.+34     	; 0x25f2 <_ZN6String11toCharArrayEPcj+0x3a>
  unsigned int len = bufsize - 1;
    25d0:	84 81       	ldd	r24, Z+4	; 0x04
    25d2:	95 81       	ldd	r25, Z+5	; 0x05
    25d4:	8a 01       	movw	r16, r20
    25d6:	01 50       	subi	r16, 0x01	; 1
    25d8:	10 40       	sbci	r17, 0x00	; 0
    25da:	80 17       	cp	r24, r16
    25dc:	91 07       	cpc	r25, r17
    25de:	70 f0       	brcs	.+28     	; 0x25fc <_ZN6String11toCharArrayEPcj+0x44>
  if (len > _length) len = _length;
  strncpy(buf, _buffer, len);
    25e0:	60 81       	ld	r22, Z
    25e2:	71 81       	ldd	r23, Z+1	; 0x01
    25e4:	ce 01       	movw	r24, r28
    25e6:	a8 01       	movw	r20, r16
    25e8:	0e 94 4b 2c 	call	0x5896	; 0x5896 <strncpy>
  buf[len] = 0;
    25ec:	c0 0f       	add	r28, r16
    25ee:	d1 1f       	adc	r29, r17
    25f0:	18 82       	st	Y, r1
}
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	1f 91       	pop	r17
    25f8:	0f 91       	pop	r16
    25fa:	08 95       	ret
}

void String::toCharArray(char *buf, unsigned int bufsize)
{
  if (!bufsize || !buf) return;
  unsigned int len = bufsize - 1;
    25fc:	8c 01       	movw	r16, r24
    25fe:	f0 cf       	rjmp	.-32     	; 0x25e0 <_ZN6String11toCharArrayEPcj+0x28>

00002600 <_ZN6String8getBytesEPhj>:

  return temp.substring( i, j + 1);
}

void String::getBytes(unsigned char *buf, unsigned int bufsize)
{
    2600:	0f 93       	push	r16
    2602:	1f 93       	push	r17
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
    2608:	fc 01       	movw	r30, r24
    260a:	eb 01       	movw	r28, r22
  if (!bufsize || !buf) return;
    260c:	41 15       	cp	r20, r1
    260e:	51 05       	cpc	r21, r1
    2610:	a1 f0       	breq	.+40     	; 0x263a <_ZN6String8getBytesEPhj+0x3a>
    2612:	61 15       	cp	r22, r1
    2614:	71 05       	cpc	r23, r1
    2616:	89 f0       	breq	.+34     	; 0x263a <_ZN6String8getBytesEPhj+0x3a>
  unsigned int len = bufsize - 1;
    2618:	84 81       	ldd	r24, Z+4	; 0x04
    261a:	95 81       	ldd	r25, Z+5	; 0x05
    261c:	8a 01       	movw	r16, r20
    261e:	01 50       	subi	r16, 0x01	; 1
    2620:	10 40       	sbci	r17, 0x00	; 0
    2622:	80 17       	cp	r24, r16
    2624:	91 07       	cpc	r25, r17
    2626:	70 f0       	brcs	.+28     	; 0x2644 <_ZN6String8getBytesEPhj+0x44>
  if (len > _length) len = _length;
  strncpy((char *)buf, _buffer, len);
    2628:	60 81       	ld	r22, Z
    262a:	71 81       	ldd	r23, Z+1	; 0x01
    262c:	ce 01       	movw	r24, r28
    262e:	a8 01       	movw	r20, r16
    2630:	0e 94 4b 2c 	call	0x5896	; 0x5896 <strncpy>
  buf[len] = 0;
    2634:	c0 0f       	add	r28, r16
    2636:	d1 1f       	adc	r29, r17
    2638:	18 82       	st	Y, r1
}
    263a:	df 91       	pop	r29
    263c:	cf 91       	pop	r28
    263e:	1f 91       	pop	r17
    2640:	0f 91       	pop	r16
    2642:	08 95       	ret
}

void String::getBytes(unsigned char *buf, unsigned int bufsize)
{
  if (!bufsize || !buf) return;
  unsigned int len = bufsize - 1;
    2644:	8c 01       	movw	r16, r24
    2646:	f0 cf       	rjmp	.-32     	; 0x2628 <_ZN6String8getBytesEPhj+0x28>

00002648 <_ZNK6String10startsWithERKS_j>:

  return startsWith( s2, 0 );
}

boolean String::startsWith( const String &s2, unsigned int offset ) const
{
    2648:	fc 01       	movw	r30, r24
    264a:	db 01       	movw	r26, r22
    264c:	ca 01       	movw	r24, r20
  if ( offset > _length - s2._length )
    264e:	14 96       	adiw	r26, 0x04	; 4
    2650:	4d 91       	ld	r20, X+
    2652:	5c 91       	ld	r21, X
    2654:	15 97       	sbiw	r26, 0x05	; 5
    2656:	24 81       	ldd	r18, Z+4	; 0x04
    2658:	35 81       	ldd	r19, Z+5	; 0x05
    265a:	24 1b       	sub	r18, r20
    265c:	35 0b       	sbc	r19, r21
    265e:	28 17       	cp	r18, r24
    2660:	39 07       	cpc	r19, r25
    2662:	80 f0       	brcs	.+32     	; 0x2684 <_ZNK6String10startsWithERKS_j+0x3c>
    return 0;

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
    2664:	20 81       	ld	r18, Z
    2666:	31 81       	ldd	r19, Z+1	; 0x01
    2668:	6d 91       	ld	r22, X+
    266a:	7c 91       	ld	r23, X
    266c:	82 0f       	add	r24, r18
    266e:	93 1f       	adc	r25, r19
    2670:	0e 94 3d 2c 	call	0x587a	; 0x587a <strncmp>
    2674:	9c 01       	movw	r18, r24
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	21 15       	cp	r18, r1
    267a:	31 05       	cpc	r19, r1
    267c:	09 f0       	breq	.+2      	; 0x2680 <_ZNK6String10startsWithERKS_j+0x38>
}
    267e:	08 95       	ret
boolean String::startsWith( const String &s2, unsigned int offset ) const
{
  if ( offset > _length - s2._length )
    return 0;

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
    2680:	81 e0       	ldi	r24, 0x01	; 1
}
    2682:	08 95       	ret
  return startsWith( s2, 0 );
}

boolean String::startsWith( const String &s2, unsigned int offset ) const
{
  if ( offset > _length - s2._length )
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	08 95       	ret

00002688 <_ZNK6String10startsWithERKS_>:
  return -1;
}

boolean String::startsWith( const String &s2 ) const
{
  if ( _length < s2._length )
    2688:	fc 01       	movw	r30, r24
    268a:	44 81       	ldd	r20, Z+4	; 0x04
    268c:	55 81       	ldd	r21, Z+5	; 0x05
    268e:	fb 01       	movw	r30, r22
    2690:	24 81       	ldd	r18, Z+4	; 0x04
    2692:	35 81       	ldd	r19, Z+5	; 0x05
    2694:	42 17       	cp	r20, r18
    2696:	53 07       	cpc	r21, r19
    2698:	10 f4       	brcc	.+4      	; 0x269e <_ZNK6String10startsWithERKS_+0x16>
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	08 95       	ret
    return 0;

  return startsWith( s2, 0 );
    269e:	40 e0       	ldi	r20, 0x00	; 0
    26a0:	50 e0       	ldi	r21, 0x00	; 0
    26a2:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZNK6String10startsWithERKS_j>
}
    26a6:	08 95       	ret

000026a8 <_ZNK6String11lastIndexOfEcj>:
{
  return lastIndexOf( theChar, _length - 1 );
}

int String::lastIndexOf( char ch, unsigned int fromIndex ) const
{
    26a8:	df 92       	push	r13
    26aa:	ef 92       	push	r14
    26ac:	ff 92       	push	r15
    26ae:	0f 93       	push	r16
    26b0:	1f 93       	push	r17
    26b2:	cf 93       	push	r28
    26b4:	df 93       	push	r29
    26b6:	ec 01       	movw	r28, r24
  if ( fromIndex >= _length )
    26b8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ba:	9d 81       	ldd	r25, Y+5	; 0x05
    26bc:	48 17       	cp	r20, r24
    26be:	59 07       	cpc	r21, r25
    26c0:	58 f0       	brcs	.+22     	; 0x26d8 <_ZNK6String11lastIndexOfEcj+0x30>
  char tempchar = _buffer[fromIndex + 1];
  _buffer[fromIndex + 1] = '\0';
  char* temp = strrchr( _buffer, ch );
  _buffer[fromIndex + 1] = tempchar;

  if ( temp == NULL )
    26c2:	2f ef       	ldi	r18, 0xFF	; 255
    26c4:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;

  return temp - _buffer;
}
    26c6:	c9 01       	movw	r24, r18
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	1f 91       	pop	r17
    26ce:	0f 91       	pop	r16
    26d0:	ff 90       	pop	r15
    26d2:	ef 90       	pop	r14
    26d4:	df 90       	pop	r13
    26d6:	08 95       	ret
int String::lastIndexOf( char ch, unsigned int fromIndex ) const
{
  if ( fromIndex >= _length )
    return -1;

  char tempchar = _buffer[fromIndex + 1];
    26d8:	8a 01       	movw	r16, r20
    26da:	0f 5f       	subi	r16, 0xFF	; 255
    26dc:	1f 4f       	sbci	r17, 0xFF	; 255
    26de:	e8 81       	ld	r30, Y
    26e0:	f9 81       	ldd	r31, Y+1	; 0x01
    26e2:	e0 0f       	add	r30, r16
    26e4:	f1 1f       	adc	r31, r17
    26e6:	d0 80       	ld	r13, Z
  _buffer[fromIndex + 1] = '\0';
    26e8:	10 82       	st	Z, r1
  char* temp = strrchr( _buffer, ch );
    26ea:	e8 80       	ld	r14, Y
    26ec:	f9 80       	ldd	r15, Y+1	; 0x01
    26ee:	c7 01       	movw	r24, r14
    26f0:	70 e0       	ldi	r23, 0x00	; 0
    26f2:	0e 94 5a 2c 	call	0x58b4	; 0x58b4 <strrchr>
    26f6:	9c 01       	movw	r18, r24
  _buffer[fromIndex + 1] = tempchar;
    26f8:	0e 0d       	add	r16, r14
    26fa:	1f 1d       	adc	r17, r15
    26fc:	f8 01       	movw	r30, r16
    26fe:	d0 82       	st	Z, r13

  if ( temp == NULL )
    2700:	00 97       	sbiw	r24, 0x00	; 0
    2702:	f9 f2       	breq	.-66     	; 0x26c2 <_ZNK6String11lastIndexOfEcj+0x1a>
    return -1;

  return temp - _buffer;
    2704:	88 81       	ld	r24, Y
    2706:	99 81       	ldd	r25, Y+1	; 0x01
    2708:	28 1b       	sub	r18, r24
    270a:	39 0b       	sbc	r19, r25
    270c:	dc cf       	rjmp	.-72     	; 0x26c6 <_ZNK6String11lastIndexOfEcj+0x1e>

0000270e <_ZNK6String11lastIndexOfEc>:
  return theFind - _buffer; // pointer subtraction
}

int String::lastIndexOf( char theChar ) const
{
  return lastIndexOf( theChar, _length - 1 );
    270e:	fc 01       	movw	r30, r24
    2710:	44 81       	ldd	r20, Z+4	; 0x04
    2712:	55 81       	ldd	r21, Z+5	; 0x05
    2714:	41 50       	subi	r20, 0x01	; 1
    2716:	50 40       	sbci	r21, 0x00	; 0
    2718:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZNK6String11lastIndexOfEcj>
}
    271c:	08 95       	ret

0000271e <_ZNK6String7indexOfERKS_j>:
{
  return indexOf( s2, 0 );
}

int String::indexOf( const String &s2, unsigned int fromIndex ) const
{
    271e:	cf 93       	push	r28
    2720:	df 93       	push	r29
    2722:	fc 01       	movw	r30, r24
  if ( fromIndex >= _length )
    2724:	84 81       	ldd	r24, Z+4	; 0x04
    2726:	95 81       	ldd	r25, Z+5	; 0x05
    2728:	48 17       	cp	r20, r24
    272a:	59 07       	cpc	r21, r25
    272c:	30 f0       	brcs	.+12     	; 0x273a <_ZNK6String7indexOfERKS_j+0x1c>
    return -1;

  const char *theFind = strstr( &_buffer[ fromIndex ], s2._buffer );

  if ( theFind == NULL )
    272e:	2f ef       	ldi	r18, 0xFF	; 255
    2730:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;

  return theFind - _buffer; // pointer subtraction
}
    2732:	c9 01       	movw	r24, r18
    2734:	df 91       	pop	r29
    2736:	cf 91       	pop	r28
    2738:	08 95       	ret
int String::indexOf( const String &s2, unsigned int fromIndex ) const
{
  if ( fromIndex >= _length )
    return -1;

  const char *theFind = strstr( &_buffer[ fromIndex ], s2._buffer );
    273a:	c0 81       	ld	r28, Z
    273c:	d1 81       	ldd	r29, Z+1	; 0x01
    273e:	fb 01       	movw	r30, r22
    2740:	60 81       	ld	r22, Z
    2742:	71 81       	ldd	r23, Z+1	; 0x01
    2744:	ce 01       	movw	r24, r28
    2746:	84 0f       	add	r24, r20
    2748:	95 1f       	adc	r25, r21
    274a:	0e 94 65 2c 	call	0x58ca	; 0x58ca <strstr>
    274e:	9c 01       	movw	r18, r24

  if ( theFind == NULL )
    2750:	00 97       	sbiw	r24, 0x00	; 0
    2752:	69 f3       	breq	.-38     	; 0x272e <_ZNK6String7indexOfERKS_j+0x10>
    return -1;

  return theFind - _buffer; // pointer subtraction
    2754:	2c 1b       	sub	r18, r28
    2756:	3d 0b       	sbc	r19, r29
    2758:	ec cf       	rjmp	.-40     	; 0x2732 <_ZNK6String7indexOfERKS_j+0x14>

0000275a <_ZNK6String7indexOfERKS_>:
  return temp - _buffer;
}

int String::indexOf( const String &s2 ) const
{
  return indexOf( s2, 0 );
    275a:	40 e0       	ldi	r20, 0x00	; 0
    275c:	50 e0       	ldi	r21, 0x00	; 0
    275e:	0e 94 8f 13 	call	0x271e	; 0x271e <_ZNK6String7indexOfERKS_j>
}
    2762:	08 95       	ret

00002764 <_ZNK6String7indexOfEcj>:
{
  return indexOf( temp, 0 );
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	fc 01       	movw	r30, r24
  if ( fromIndex >= _length )
    276a:	84 81       	ldd	r24, Z+4	; 0x04
    276c:	95 81       	ldd	r25, Z+5	; 0x05
    276e:	48 17       	cp	r20, r24
    2770:	59 07       	cpc	r21, r25
    2772:	30 f0       	brcs	.+12     	; 0x2780 <_ZNK6String7indexOfEcj+0x1c>
    return -1;

  const char* temp = strchr( &_buffer[fromIndex], ch );
  if ( temp == NULL )
    2774:	2f ef       	ldi	r18, 0xFF	; 255
    2776:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;

  return temp - _buffer;
}
    2778:	c9 01       	movw	r24, r18
    277a:	df 91       	pop	r29
    277c:	cf 91       	pop	r28
    277e:	08 95       	ret
int String::indexOf( char ch, unsigned int fromIndex ) const
{
  if ( fromIndex >= _length )
    return -1;

  const char* temp = strchr( &_buffer[fromIndex], ch );
    2780:	c0 81       	ld	r28, Z
    2782:	d1 81       	ldd	r29, Z+1	; 0x01
    2784:	ce 01       	movw	r24, r28
    2786:	84 0f       	add	r24, r20
    2788:	95 1f       	adc	r25, r21
    278a:	70 e0       	ldi	r23, 0x00	; 0
    278c:	0e 94 22 2c 	call	0x5844	; 0x5844 <strchr>
    2790:	9c 01       	movw	r18, r24
  if ( temp == NULL )
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	79 f3       	breq	.-34     	; 0x2774 <_ZNK6String7indexOfEcj+0x10>
    return -1;

  return temp - _buffer;
    2796:	2c 1b       	sub	r18, r28
    2798:	3d 0b       	sbc	r19, r29
    279a:	ee cf       	rjmp	.-36     	; 0x2778 <_ZNK6String7indexOfEcj+0x14>

0000279c <_ZNK6String7indexOfEc>:
  return newString;
}

int String::indexOf( char temp ) const
{
  return indexOf( temp, 0 );
    279c:	40 e0       	ldi	r20, 0x00	; 0
    279e:	50 e0       	ldi	r21, 0x00	; 0
    27a0:	0e 94 b2 13 	call	0x2764	; 0x2764 <_ZNK6String7indexOfEcj>
}
    27a4:	08 95       	ret

000027a6 <_ZNK6String6equalsERKS_>:

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
}

boolean String::equals( const String &s2 ) const
{
    27a6:	fc 01       	movw	r30, r24
    27a8:	db 01       	movw	r26, r22
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
    27aa:	24 81       	ldd	r18, Z+4	; 0x04
    27ac:	35 81       	ldd	r19, Z+5	; 0x05
    27ae:	14 96       	adiw	r26, 0x04	; 4
    27b0:	8d 91       	ld	r24, X+
    27b2:	9c 91       	ld	r25, X
    27b4:	15 97       	sbiw	r26, 0x05	; 5
    27b6:	28 17       	cp	r18, r24
    27b8:	39 07       	cpc	r19, r25
    27ba:	11 f0       	breq	.+4      	; 0x27c0 <_ZNK6String6equalsERKS_+0x1a>
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	08 95       	ret
    27c0:	6d 91       	ld	r22, X+
    27c2:	7c 91       	ld	r23, X
    27c4:	80 81       	ld	r24, Z
    27c6:	91 81       	ldd	r25, Z+1	; 0x01
    27c8:	0e 94 2d 2c 	call	0x585a	; 0x585a <strcmp>
    27cc:	9c 01       	movw	r18, r24
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	21 15       	cp	r18, r1
    27d2:	31 05       	cpc	r19, r1
    27d4:	09 f0       	breq	.+2      	; 0x27d8 <_ZNK6String6equalsERKS_+0x32>
}
    27d6:	08 95       	ret
  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
}

boolean String::equals( const String &s2 ) const
{
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
    27d8:	81 e0       	ldi	r24, 0x01	; 1
}
    27da:	08 95       	ret

000027dc <_ZNK6String8endsWithERKS_>:
  // need to check for valid index, to do later
  return _buffer[ index ];
}

boolean String::endsWith( const String &s2 ) const
{
    27dc:	fc 01       	movw	r30, r24
    27de:	db 01       	movw	r26, r22
  if ( _length < s2._length )
    27e0:	84 81       	ldd	r24, Z+4	; 0x04
    27e2:	95 81       	ldd	r25, Z+5	; 0x05
    27e4:	14 96       	adiw	r26, 0x04	; 4
    27e6:	2d 91       	ld	r18, X+
    27e8:	3c 91       	ld	r19, X
    27ea:	15 97       	sbiw	r26, 0x05	; 5
    27ec:	82 17       	cp	r24, r18
    27ee:	93 07       	cpc	r25, r19
    27f0:	90 f0       	brcs	.+36     	; 0x2816 <_ZNK6String8endsWithERKS_+0x3a>
    return 0;

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
    27f2:	82 1b       	sub	r24, r18
    27f4:	93 0b       	sbc	r25, r19
    27f6:	20 81       	ld	r18, Z
    27f8:	31 81       	ldd	r19, Z+1	; 0x01
    27fa:	6d 91       	ld	r22, X+
    27fc:	7c 91       	ld	r23, X
    27fe:	82 0f       	add	r24, r18
    2800:	93 1f       	adc	r25, r19
    2802:	0e 94 2d 2c 	call	0x585a	; 0x585a <strcmp>
    2806:	9c 01       	movw	r18, r24
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	21 15       	cp	r18, r1
    280c:	31 05       	cpc	r19, r1
    280e:	09 f0       	breq	.+2      	; 0x2812 <_ZNK6String8endsWithERKS_+0x36>
}
    2810:	08 95       	ret
boolean String::endsWith( const String &s2 ) const
{
  if ( _length < s2._length )
    return 0;

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
    2812:	81 e0       	ldi	r24, 0x01	; 1
}
    2814:	08 95       	ret
  return _buffer[ index ];
}

boolean String::endsWith( const String &s2 ) const
{
  if ( _length < s2._length )
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	08 95       	ret

0000281a <_ZNK6StringgeERKS_>:
  return strcmp( _buffer, rhs._buffer ) <= 0;
}

int String::operator>=( const String & rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) >= 0;
    281a:	fb 01       	movw	r30, r22
    281c:	60 81       	ld	r22, Z
    281e:	71 81       	ldd	r23, Z+1	; 0x01
    2820:	fc 01       	movw	r30, r24
    2822:	80 81       	ld	r24, Z
    2824:	91 81       	ldd	r25, Z+1	; 0x01
    2826:	0e 94 2d 2c 	call	0x585a	; 0x585a <strcmp>
    282a:	29 2f       	mov	r18, r25
    282c:	33 27       	eor	r19, r19
    282e:	27 fd       	sbrc	r18, 7
    2830:	30 95       	com	r19
    2832:	20 95       	com	r18
    2834:	30 95       	com	r19
    2836:	22 27       	eor	r18, r18
    2838:	33 0f       	add	r19, r19
    283a:	22 1f       	adc	r18, r18
    283c:	33 27       	eor	r19, r19
}
    283e:	c9 01       	movw	r24, r18
    2840:	08 95       	ret

00002842 <_ZNK6StringleERKS_>:
  return strcmp( _buffer, rhs._buffer ) > 0;
}

int String::operator<=( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) <= 0;
    2842:	fb 01       	movw	r30, r22
    2844:	60 81       	ld	r22, Z
    2846:	71 81       	ldd	r23, Z+1	; 0x01
    2848:	fc 01       	movw	r30, r24
    284a:	80 81       	ld	r24, Z
    284c:	91 81       	ldd	r25, Z+1	; 0x01
    284e:	0e 94 2d 2c 	call	0x585a	; 0x585a <strcmp>
    2852:	40 e0       	ldi	r20, 0x00	; 0
    2854:	50 e0       	ldi	r21, 0x00	; 0
    2856:	18 16       	cp	r1, r24
    2858:	19 06       	cpc	r1, r25
    285a:	14 f4       	brge	.+4      	; 0x2860 <_ZNK6StringleERKS_+0x1e>
}
    285c:	ca 01       	movw	r24, r20
    285e:	08 95       	ret
  return strcmp( _buffer, rhs._buffer ) > 0;
}

int String::operator<=( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) <= 0;
    2860:	41 e0       	ldi	r20, 0x01	; 1
    2862:	50 e0       	ldi	r21, 0x00	; 0
}
    2864:	ca 01       	movw	r24, r20
    2866:	08 95       	ret

00002868 <_ZNK6StringgtERKS_>:
  return strcmp( _buffer, rhs._buffer ) < 0;
}

int String::operator>( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) > 0;
    2868:	fb 01       	movw	r30, r22
    286a:	60 81       	ld	r22, Z
    286c:	71 81       	ldd	r23, Z+1	; 0x01
    286e:	fc 01       	movw	r30, r24
    2870:	80 81       	ld	r24, Z
    2872:	91 81       	ldd	r25, Z+1	; 0x01
    2874:	0e 94 2d 2c 	call	0x585a	; 0x585a <strcmp>
    2878:	40 e0       	ldi	r20, 0x00	; 0
    287a:	50 e0       	ldi	r21, 0x00	; 0
    287c:	18 16       	cp	r1, r24
    287e:	19 06       	cpc	r1, r25
    2880:	14 f4       	brge	.+4      	; 0x2886 <_ZNK6StringgtERKS_+0x1e>
    2882:	41 e0       	ldi	r20, 0x01	; 1
    2884:	50 e0       	ldi	r21, 0x00	; 0
}
    2886:	ca 01       	movw	r24, r20
    2888:	08 95       	ret

0000288a <_ZNK6StringltERKS_>:
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
}

int String::operator<( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) < 0;
    288a:	fb 01       	movw	r30, r22
    288c:	60 81       	ld	r22, Z
    288e:	71 81       	ldd	r23, Z+1	; 0x01
    2890:	fc 01       	movw	r30, r24
    2892:	80 81       	ld	r24, Z
    2894:	91 81       	ldd	r25, Z+1	; 0x01
    2896:	0e 94 2d 2c 	call	0x585a	; 0x585a <strcmp>
    289a:	29 2f       	mov	r18, r25
    289c:	33 27       	eor	r19, r19
    289e:	27 fd       	sbrc	r18, 7
    28a0:	30 95       	com	r19
    28a2:	22 27       	eor	r18, r18
    28a4:	33 0f       	add	r19, r19
    28a6:	22 1f       	adc	r18, r18
    28a8:	33 27       	eor	r19, r19
}
    28aa:	c9 01       	movw	r24, r18
    28ac:	08 95       	ret

000028ae <_ZNK6StringneERKS_>:
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
}

int String::operator!=( const String &rhs ) const
{
    28ae:	fc 01       	movw	r30, r24
    28b0:	db 01       	movw	r26, r22
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
    28b2:	24 81       	ldd	r18, Z+4	; 0x04
    28b4:	35 81       	ldd	r19, Z+5	; 0x05
    28b6:	14 96       	adiw	r26, 0x04	; 4
    28b8:	8d 91       	ld	r24, X+
    28ba:	9c 91       	ld	r25, X
    28bc:	15 97       	sbiw	r26, 0x05	; 5
    28be:	28 17       	cp	r18, r24
    28c0:	39 07       	cpc	r19, r25
    28c2:	21 f0       	breq	.+8      	; 0x28cc <_ZNK6StringneERKS_+0x1e>
    28c4:	21 e0       	ldi	r18, 0x01	; 1
    28c6:	30 e0       	ldi	r19, 0x00	; 0
}
    28c8:	c9 01       	movw	r24, r18
    28ca:	08 95       	ret
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
}

int String::operator!=( const String &rhs ) const
{
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
    28cc:	6d 91       	ld	r22, X+
    28ce:	7c 91       	ld	r23, X
    28d0:	80 81       	ld	r24, Z
    28d2:	91 81       	ldd	r25, Z+1	; 0x01
    28d4:	0e 94 2d 2c 	call	0x585a	; 0x585a <strcmp>
    28d8:	9c 01       	movw	r18, r24
    28da:	21 15       	cp	r18, r1
    28dc:	31 05       	cpc	r19, r1
    28de:	91 f7       	brne	.-28     	; 0x28c4 <_ZNK6StringneERKS_+0x16>
}
    28e0:	c9 01       	movw	r24, r18
    28e2:	08 95       	ret

000028e4 <_ZNK6StringeqERKS_>:
  return *this;
}


int String::operator==( const String &rhs ) const
{
    28e4:	fc 01       	movw	r30, r24
    28e6:	db 01       	movw	r26, r22
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
    28e8:	24 81       	ldd	r18, Z+4	; 0x04
    28ea:	35 81       	ldd	r19, Z+5	; 0x05
    28ec:	14 96       	adiw	r26, 0x04	; 4
    28ee:	8d 91       	ld	r24, X+
    28f0:	9c 91       	ld	r25, X
    28f2:	15 97       	sbiw	r26, 0x05	; 5
    28f4:	28 17       	cp	r18, r24
    28f6:	39 07       	cpc	r19, r25
    28f8:	21 f0       	breq	.+8      	; 0x2902 <_ZNK6StringeqERKS_+0x1e>
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
}
    28fe:	c9 01       	movw	r24, r18
    2900:	08 95       	ret
}


int String::operator==( const String &rhs ) const
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
    2902:	6d 91       	ld	r22, X+
    2904:	7c 91       	ld	r23, X
    2906:	80 81       	ld	r24, Z
    2908:	91 81       	ldd	r25, Z+1	; 0x01
    290a:	0e 94 2d 2c 	call	0x585a	; 0x585a <strcmp>
    290e:	9c 01       	movw	r18, r24
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	21 15       	cp	r18, r1
    2916:	31 05       	cpc	r19, r1
    2918:	19 f0       	breq	.+6      	; 0x2920 <_ZNK6StringeqERKS_+0x3c>
    291a:	9c 01       	movw	r18, r24
}
    291c:	c9 01       	movw	r24, r18
    291e:	08 95       	ret
}


int String::operator==( const String &rhs ) const
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	9c 01       	movw	r18, r24
    2926:	fa cf       	rjmp	.-12     	; 0x291c <_ZNK6StringeqERKS_+0x38>

00002928 <_ZNK6String9compareToERKS_>:
  }
}

int String::compareTo( const String &s2 ) const
{
  return strcmp( _buffer, s2._buffer );
    2928:	fb 01       	movw	r30, r22
    292a:	60 81       	ld	r22, Z
    292c:	71 81       	ldd	r23, Z+1	; 0x01
    292e:	fc 01       	movw	r30, r24
    2930:	80 81       	ld	r24, Z
    2932:	91 81       	ldd	r25, Z+1	; 0x01
    2934:	0e 94 2d 2c 	call	0x585a	; 0x585a <strcmp>
}
    2938:	08 95       	ret

0000293a <_ZN6StringpLERKS_>:
//  _buffer[ _length ] = '\0';
//  return *this;
//}

const String & String::operator+=( const String &other )
{
    293a:	ef 92       	push	r14
    293c:	ff 92       	push	r15
    293e:	0f 93       	push	r16
    2940:	1f 93       	push	r17
    2942:	cf 93       	push	r28
    2944:	df 93       	push	r29
    2946:	ec 01       	movw	r28, r24
    2948:	8b 01       	movw	r16, r22
  _length += other._length;
    294a:	fb 01       	movw	r30, r22
    294c:	64 81       	ldd	r22, Z+4	; 0x04
    294e:	75 81       	ldd	r23, Z+5	; 0x05
    2950:	8c 81       	ldd	r24, Y+4	; 0x04
    2952:	9d 81       	ldd	r25, Y+5	; 0x05
    2954:	68 0f       	add	r22, r24
    2956:	79 1f       	adc	r23, r25
    2958:	7d 83       	std	Y+5, r23	; 0x05
    295a:	6c 83       	std	Y+4, r22	; 0x04
  if ( _length > _capacity )
    295c:	8a 81       	ldd	r24, Y+2	; 0x02
    295e:	9b 81       	ldd	r25, Y+3	; 0x03
    2960:	86 17       	cp	r24, r22
    2962:	97 07       	cpc	r25, r23
    2964:	78 f4       	brcc	.+30     	; 0x2984 <_ZN6StringpLERKS_+0x4a>
  {
    char *temp = (char *)realloc(_buffer, _length + 1);
    2966:	6f 5f       	subi	r22, 0xFF	; 255
    2968:	7f 4f       	sbci	r23, 0xFF	; 255
    296a:	88 81       	ld	r24, Y
    296c:	99 81       	ldd	r25, Y+1	; 0x01
    296e:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <realloc>
    if ( temp != NULL ) {
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	b1 f0       	breq	.+44     	; 0x29a2 <_ZN6StringpLERKS_+0x68>
      _buffer = temp;
    2976:	99 83       	std	Y+1, r25	; 0x01
    2978:	88 83       	st	Y, r24
      _capacity = _length;
    297a:	2c 81       	ldd	r18, Y+4	; 0x04
    297c:	3d 81       	ldd	r19, Y+5	; 0x05
    297e:	3b 83       	std	Y+3, r19	; 0x03
    2980:	2a 83       	std	Y+2, r18	; 0x02
    2982:	02 c0       	rjmp	.+4      	; 0x2988 <_ZN6StringpLERKS_+0x4e>
    } else {
      _length -= other._length;
      return *this;
    2984:	88 81       	ld	r24, Y
    2986:	99 81       	ldd	r25, Y+1	; 0x01
    }
  }
  strcat( _buffer, other._buffer );
    2988:	f8 01       	movw	r30, r16
    298a:	60 81       	ld	r22, Z
    298c:	71 81       	ldd	r23, Z+1	; 0x01
    298e:	0e 94 17 2c 	call	0x582e	; 0x582e <strcat>
  return *this;
}
    2992:	ce 01       	movw	r24, r28
    2994:	df 91       	pop	r29
    2996:	cf 91       	pop	r28
    2998:	1f 91       	pop	r17
    299a:	0f 91       	pop	r16
    299c:	ff 90       	pop	r15
    299e:	ef 90       	pop	r14
    29a0:	08 95       	ret
    char *temp = (char *)realloc(_buffer, _length + 1);
    if ( temp != NULL ) {
      _buffer = temp;
      _capacity = _length;
    } else {
      _length -= other._length;
    29a2:	8c 81       	ldd	r24, Y+4	; 0x04
    29a4:	9d 81       	ldd	r25, Y+5	; 0x05
    29a6:	f8 01       	movw	r30, r16
    29a8:	24 81       	ldd	r18, Z+4	; 0x04
    29aa:	35 81       	ldd	r19, Z+5	; 0x05
    29ac:	82 1b       	sub	r24, r18
    29ae:	93 0b       	sbc	r25, r19
    29b0:	9d 83       	std	Y+5, r25	; 0x05
    29b2:	8c 83       	std	Y+4, r24	; 0x04
      return *this;
    29b4:	ee cf       	rjmp	.-36     	; 0x2992 <_ZN6StringpLERKS_+0x58>

000029b6 <_ZN6String6concatERKS_>:
  return strcmp( _buffer, s2._buffer );
}

const String & String::concat( const String &s2 )
{
  return (*this) += s2;
    29b6:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN6StringpLERKS_>
}
    29ba:	08 95       	ret

000029bc <_ZN6StringaSERKS_>:

const String & String::operator=( const String &rhs )
{
    29bc:	ef 92       	push	r14
    29be:	ff 92       	push	r15
    29c0:	0f 93       	push	r16
    29c2:	1f 93       	push	r17
    29c4:	cf 93       	push	r28
    29c6:	df 93       	push	r29
    29c8:	ec 01       	movw	r28, r24
    29ca:	8b 01       	movw	r16, r22
  if ( this == &rhs )
    29cc:	86 17       	cp	r24, r22
    29ce:	97 07       	cpc	r25, r23
    29d0:	99 f0       	breq	.+38     	; 0x29f8 <_ZN6StringaSERKS_+0x3c>
    return *this;

  if ( rhs._length > _length )
    29d2:	fb 01       	movw	r30, r22
    29d4:	44 81       	ldd	r20, Z+4	; 0x04
    29d6:	55 81       	ldd	r21, Z+5	; 0x05
    29d8:	8c 81       	ldd	r24, Y+4	; 0x04
    29da:	9d 81       	ldd	r25, Y+5	; 0x05
    29dc:	84 17       	cp	r24, r20
    29de:	95 07       	cpc	r25, r21
    29e0:	98 f0       	brcs	.+38     	; 0x2a08 <_ZN6StringaSERKS_+0x4c>
  {
    free(_buffer);
    getBuffer( rhs._length );
  }
  
  if ( _buffer != NULL ) {
    29e2:	88 81       	ld	r24, Y
    29e4:	99 81       	ldd	r25, Y+1	; 0x01
    29e6:	00 97       	sbiw	r24, 0x00	; 0
    29e8:	39 f0       	breq	.+14     	; 0x29f8 <_ZN6StringaSERKS_+0x3c>
    _length = rhs._length;
    29ea:	5d 83       	std	Y+5, r21	; 0x05
    29ec:	4c 83       	std	Y+4, r20	; 0x04
    strcpy( _buffer, rhs._buffer );
    29ee:	f8 01       	movw	r30, r16
    29f0:	60 81       	ld	r22, Z
    29f2:	71 81       	ldd	r23, Z+1	; 0x01
    29f4:	0e 94 36 2c 	call	0x586c	; 0x586c <strcpy>
  }
  return *this;
}
    29f8:	ce 01       	movw	r24, r28
    29fa:	df 91       	pop	r29
    29fc:	cf 91       	pop	r28
    29fe:	1f 91       	pop	r17
    2a00:	0f 91       	pop	r16
    2a02:	ff 90       	pop	r15
    2a04:	ef 90       	pop	r14
    2a06:	08 95       	ret
  if ( this == &rhs )
    return *this;

  if ( rhs._length > _length )
  {
    free(_buffer);
    2a08:	88 81       	ld	r24, Y
    2a0a:	99 81       	ldd	r25, Y+1	; 0x01
    2a0c:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <free>
    getBuffer( rhs._length );
    2a10:	f8 01       	movw	r30, r16
    2a12:	84 81       	ldd	r24, Z+4	; 0x04
    2a14:	95 81       	ldd	r25, Z+5	; 0x05
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2a16:	9b 83       	std	Y+3, r25	; 0x03
    2a18:	8a 83       	std	Y+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    2a1a:	01 96       	adiw	r24, 0x01	; 1
    2a1c:	0e 94 be 29 	call	0x537c	; 0x537c <malloc>
    2a20:	99 83       	std	Y+1, r25	; 0x01
    2a22:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2a24:	00 97       	sbiw	r24, 0x00	; 0
    2a26:	21 f0       	breq	.+8      	; 0x2a30 <_ZN6StringaSERKS_+0x74>
    2a28:	f8 01       	movw	r30, r16
    2a2a:	44 81       	ldd	r20, Z+4	; 0x04
    2a2c:	55 81       	ldd	r21, Z+5	; 0x05
    2a2e:	dd cf       	rjmp	.-70     	; 0x29ea <_ZN6StringaSERKS_+0x2e>
    2a30:	1b 82       	std	Y+3, r1	; 0x03
    2a32:	1a 82       	std	Y+2, r1	; 0x02
    2a34:	1d 82       	std	Y+5, r1	; 0x05
    2a36:	1c 82       	std	Y+4, r1	; 0x04
    2a38:	df cf       	rjmp	.-66     	; 0x29f8 <_ZN6StringaSERKS_+0x3c>

00002a3a <_ZN6StringC1Eh>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const unsigned char value )
    2a3a:	0f 93       	push	r16
    2a3c:	1f 93       	push	r17
    2a3e:	df 93       	push	r29
    2a40:	cf 93       	push	r28
    2a42:	0f 92       	push	r0
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
    2a48:	8c 01       	movw	r16, r24
{
  _length = 1;
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	d8 01       	movw	r26, r16
    2a50:	15 96       	adiw	r26, 0x05	; 5
    2a52:	9c 93       	st	X, r25
    2a54:	8e 93       	st	-X, r24
    2a56:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2a58:	13 96       	adiw	r26, 0x03	; 3
    2a5a:	9c 93       	st	X, r25
    2a5c:	8e 93       	st	-X, r24
    2a5e:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    2a60:	82 e0       	ldi	r24, 0x02	; 2
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	69 83       	std	Y+1, r22	; 0x01
    2a66:	0e 94 be 29 	call	0x537c	; 0x537c <malloc>
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	d8 01       	movw	r26, r16
    2a6e:	11 96       	adiw	r26, 0x01	; 1
    2a70:	9c 93       	st	X, r25
    2a72:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2a74:	69 81       	ldd	r22, Y+1	; 0x01
    2a76:	00 97       	sbiw	r24, 0x00	; 0
    2a78:	61 f0       	breq	.+24     	; 0x2a92 <_ZN6StringC1Eh+0x58>
  getBuffer(1);
  if ( _buffer != NULL) {
    _buffer[0] = value;
    2a7a:	60 83       	st	Z, r22
    _buffer[1] = 0;
    2a7c:	d8 01       	movw	r26, r16
    2a7e:	ed 91       	ld	r30, X+
    2a80:	fc 91       	ld	r31, X
    2a82:	11 97       	sbiw	r26, 0x01	; 1
    2a84:	11 82       	std	Z+1, r1	; 0x01
  }
}
    2a86:	0f 90       	pop	r0
    2a88:	cf 91       	pop	r28
    2a8a:	df 91       	pop	r29
    2a8c:	1f 91       	pop	r17
    2a8e:	0f 91       	pop	r16
    2a90:	08 95       	ret
    2a92:	13 96       	adiw	r26, 0x03	; 3
    2a94:	1c 92       	st	X, r1
    2a96:	1e 92       	st	-X, r1
    2a98:	12 97       	sbiw	r26, 0x02	; 2
    2a9a:	15 96       	adiw	r26, 0x05	; 5
    2a9c:	1c 92       	st	X, r1
    2a9e:	1e 92       	st	-X, r1
    2aa0:	14 97       	sbiw	r26, 0x04	; 4
    2aa2:	0f 90       	pop	r0
    2aa4:	cf 91       	pop	r28
    2aa6:	df 91       	pop	r29
    2aa8:	1f 91       	pop	r17
    2aaa:	0f 91       	pop	r16
    2aac:	08 95       	ret

00002aae <_ZN6StringC2Eh>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const unsigned char value )
    2aae:	0f 93       	push	r16
    2ab0:	1f 93       	push	r17
    2ab2:	df 93       	push	r29
    2ab4:	cf 93       	push	r28
    2ab6:	0f 92       	push	r0
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
    2abc:	8c 01       	movw	r16, r24
{
  _length = 1;
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	d8 01       	movw	r26, r16
    2ac4:	15 96       	adiw	r26, 0x05	; 5
    2ac6:	9c 93       	st	X, r25
    2ac8:	8e 93       	st	-X, r24
    2aca:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2acc:	13 96       	adiw	r26, 0x03	; 3
    2ace:	9c 93       	st	X, r25
    2ad0:	8e 93       	st	-X, r24
    2ad2:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    2ad4:	82 e0       	ldi	r24, 0x02	; 2
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	69 83       	std	Y+1, r22	; 0x01
    2ada:	0e 94 be 29 	call	0x537c	; 0x537c <malloc>
    2ade:	fc 01       	movw	r30, r24
    2ae0:	d8 01       	movw	r26, r16
    2ae2:	11 96       	adiw	r26, 0x01	; 1
    2ae4:	9c 93       	st	X, r25
    2ae6:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2ae8:	69 81       	ldd	r22, Y+1	; 0x01
    2aea:	00 97       	sbiw	r24, 0x00	; 0
    2aec:	61 f0       	breq	.+24     	; 0x2b06 <_ZN6StringC2Eh+0x58>
  getBuffer(1);
  if ( _buffer != NULL) {
    _buffer[0] = value;
    2aee:	60 83       	st	Z, r22
    _buffer[1] = 0;
    2af0:	d8 01       	movw	r26, r16
    2af2:	ed 91       	ld	r30, X+
    2af4:	fc 91       	ld	r31, X
    2af6:	11 97       	sbiw	r26, 0x01	; 1
    2af8:	11 82       	std	Z+1, r1	; 0x01
  }
}
    2afa:	0f 90       	pop	r0
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	1f 91       	pop	r17
    2b02:	0f 91       	pop	r16
    2b04:	08 95       	ret
    2b06:	13 96       	adiw	r26, 0x03	; 3
    2b08:	1c 92       	st	X, r1
    2b0a:	1e 92       	st	-X, r1
    2b0c:	12 97       	sbiw	r26, 0x02	; 2
    2b0e:	15 96       	adiw	r26, 0x05	; 5
    2b10:	1c 92       	st	X, r1
    2b12:	1e 92       	st	-X, r1
    2b14:	14 97       	sbiw	r26, 0x04	; 4
    2b16:	0f 90       	pop	r0
    2b18:	cf 91       	pop	r28
    2b1a:	df 91       	pop	r29
    2b1c:	1f 91       	pop	r17
    2b1e:	0f 91       	pop	r16
    2b20:	08 95       	ret

00002b22 <_ZN6StringC1Ec>:
  getBuffer( _length = value._length );
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
}

String::String( const char value )
    2b22:	0f 93       	push	r16
    2b24:	1f 93       	push	r17
    2b26:	df 93       	push	r29
    2b28:	cf 93       	push	r28
    2b2a:	0f 92       	push	r0
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
    2b30:	8c 01       	movw	r16, r24
{
  _length = 1;
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	d8 01       	movw	r26, r16
    2b38:	15 96       	adiw	r26, 0x05	; 5
    2b3a:	9c 93       	st	X, r25
    2b3c:	8e 93       	st	-X, r24
    2b3e:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2b40:	13 96       	adiw	r26, 0x03	; 3
    2b42:	9c 93       	st	X, r25
    2b44:	8e 93       	st	-X, r24
    2b46:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    2b48:	82 e0       	ldi	r24, 0x02	; 2
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	69 83       	std	Y+1, r22	; 0x01
    2b4e:	0e 94 be 29 	call	0x537c	; 0x537c <malloc>
    2b52:	fc 01       	movw	r30, r24
    2b54:	d8 01       	movw	r26, r16
    2b56:	11 96       	adiw	r26, 0x01	; 1
    2b58:	9c 93       	st	X, r25
    2b5a:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2b5c:	69 81       	ldd	r22, Y+1	; 0x01
    2b5e:	00 97       	sbiw	r24, 0x00	; 0
    2b60:	61 f0       	breq	.+24     	; 0x2b7a <_ZN6StringC1Ec+0x58>
  getBuffer(1);
  if ( _buffer != NULL ) {
    _buffer[0] = value;
    2b62:	60 83       	st	Z, r22
    _buffer[1] = 0;
    2b64:	d8 01       	movw	r26, r16
    2b66:	ed 91       	ld	r30, X+
    2b68:	fc 91       	ld	r31, X
    2b6a:	11 97       	sbiw	r26, 0x01	; 1
    2b6c:	11 82       	std	Z+1, r1	; 0x01
  }
}
    2b6e:	0f 90       	pop	r0
    2b70:	cf 91       	pop	r28
    2b72:	df 91       	pop	r29
    2b74:	1f 91       	pop	r17
    2b76:	0f 91       	pop	r16
    2b78:	08 95       	ret
    2b7a:	13 96       	adiw	r26, 0x03	; 3
    2b7c:	1c 92       	st	X, r1
    2b7e:	1e 92       	st	-X, r1
    2b80:	12 97       	sbiw	r26, 0x02	; 2
    2b82:	15 96       	adiw	r26, 0x05	; 5
    2b84:	1c 92       	st	X, r1
    2b86:	1e 92       	st	-X, r1
    2b88:	14 97       	sbiw	r26, 0x04	; 4
    2b8a:	0f 90       	pop	r0
    2b8c:	cf 91       	pop	r28
    2b8e:	df 91       	pop	r29
    2b90:	1f 91       	pop	r17
    2b92:	0f 91       	pop	r16
    2b94:	08 95       	ret

00002b96 <_ZN6StringC2Ec>:
  getBuffer( _length = value._length );
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
}

String::String( const char value )
    2b96:	0f 93       	push	r16
    2b98:	1f 93       	push	r17
    2b9a:	df 93       	push	r29
    2b9c:	cf 93       	push	r28
    2b9e:	0f 92       	push	r0
    2ba0:	cd b7       	in	r28, 0x3d	; 61
    2ba2:	de b7       	in	r29, 0x3e	; 62
    2ba4:	8c 01       	movw	r16, r24
{
  _length = 1;
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	d8 01       	movw	r26, r16
    2bac:	15 96       	adiw	r26, 0x05	; 5
    2bae:	9c 93       	st	X, r25
    2bb0:	8e 93       	st	-X, r24
    2bb2:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2bb4:	13 96       	adiw	r26, 0x03	; 3
    2bb6:	9c 93       	st	X, r25
    2bb8:	8e 93       	st	-X, r24
    2bba:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    2bbc:	82 e0       	ldi	r24, 0x02	; 2
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	69 83       	std	Y+1, r22	; 0x01
    2bc2:	0e 94 be 29 	call	0x537c	; 0x537c <malloc>
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	d8 01       	movw	r26, r16
    2bca:	11 96       	adiw	r26, 0x01	; 1
    2bcc:	9c 93       	st	X, r25
    2bce:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2bd0:	69 81       	ldd	r22, Y+1	; 0x01
    2bd2:	00 97       	sbiw	r24, 0x00	; 0
    2bd4:	61 f0       	breq	.+24     	; 0x2bee <_ZN6StringC2Ec+0x58>
  getBuffer(1);
  if ( _buffer != NULL ) {
    _buffer[0] = value;
    2bd6:	60 83       	st	Z, r22
    _buffer[1] = 0;
    2bd8:	d8 01       	movw	r26, r16
    2bda:	ed 91       	ld	r30, X+
    2bdc:	fc 91       	ld	r31, X
    2bde:	11 97       	sbiw	r26, 0x01	; 1
    2be0:	11 82       	std	Z+1, r1	; 0x01
  }
}
    2be2:	0f 90       	pop	r0
    2be4:	cf 91       	pop	r28
    2be6:	df 91       	pop	r29
    2be8:	1f 91       	pop	r17
    2bea:	0f 91       	pop	r16
    2bec:	08 95       	ret
    2bee:	13 96       	adiw	r26, 0x03	; 3
    2bf0:	1c 92       	st	X, r1
    2bf2:	1e 92       	st	-X, r1
    2bf4:	12 97       	sbiw	r26, 0x02	; 2
    2bf6:	15 96       	adiw	r26, 0x05	; 5
    2bf8:	1c 92       	st	X, r1
    2bfa:	1e 92       	st	-X, r1
    2bfc:	14 97       	sbiw	r26, 0x04	; 4
    2bfe:	0f 90       	pop	r0
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	1f 91       	pop	r17
    2c06:	0f 91       	pop	r16
    2c08:	08 95       	ret

00002c0a <_ZN6StringC1ERKS_>:
  getBuffer( _length = strlen( value ) );
  if ( _buffer != NULL )
    strcpy( _buffer, value );
}

String::String( const String &value )
    2c0a:	0f 93       	push	r16
    2c0c:	1f 93       	push	r17
    2c0e:	cf 93       	push	r28
    2c10:	df 93       	push	r29
    2c12:	ec 01       	movw	r28, r24
    2c14:	8b 01       	movw	r16, r22
{
  getBuffer( _length = value._length );
    2c16:	fb 01       	movw	r30, r22
    2c18:	84 81       	ldd	r24, Z+4	; 0x04
    2c1a:	95 81       	ldd	r25, Z+5	; 0x05
    2c1c:	9d 83       	std	Y+5, r25	; 0x05
    2c1e:	8c 83       	std	Y+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2c20:	9b 83       	std	Y+3, r25	; 0x03
    2c22:	8a 83       	std	Y+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    2c24:	01 96       	adiw	r24, 0x01	; 1
    2c26:	0e 94 be 29 	call	0x537c	; 0x537c <malloc>
    2c2a:	99 83       	std	Y+1, r25	; 0x01
    2c2c:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2c2e:	00 97       	sbiw	r24, 0x00	; 0
    2c30:	51 f0       	breq	.+20     	; 0x2c46 <_ZN6StringC1ERKS_+0x3c>
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
    2c32:	f8 01       	movw	r30, r16
    2c34:	60 81       	ld	r22, Z
    2c36:	71 81       	ldd	r23, Z+1	; 0x01
    2c38:	0e 94 36 2c 	call	0x586c	; 0x586c <strcpy>
}
    2c3c:	df 91       	pop	r29
    2c3e:	cf 91       	pop	r28
    2c40:	1f 91       	pop	r17
    2c42:	0f 91       	pop	r16
    2c44:	08 95       	ret
    2c46:	1b 82       	std	Y+3, r1	; 0x03
    2c48:	1a 82       	std	Y+2, r1	; 0x02
    2c4a:	1d 82       	std	Y+5, r1	; 0x05
    2c4c:	1c 82       	std	Y+4, r1	; 0x04
    2c4e:	df 91       	pop	r29
    2c50:	cf 91       	pop	r28
    2c52:	1f 91       	pop	r17
    2c54:	0f 91       	pop	r16
    2c56:	08 95       	ret

00002c58 <_ZN6StringC2ERKS_>:
  getBuffer( _length = strlen( value ) );
  if ( _buffer != NULL )
    strcpy( _buffer, value );
}

String::String( const String &value )
    2c58:	0f 93       	push	r16
    2c5a:	1f 93       	push	r17
    2c5c:	cf 93       	push	r28
    2c5e:	df 93       	push	r29
    2c60:	ec 01       	movw	r28, r24
    2c62:	8b 01       	movw	r16, r22
{
  getBuffer( _length = value._length );
    2c64:	fb 01       	movw	r30, r22
    2c66:	84 81       	ldd	r24, Z+4	; 0x04
    2c68:	95 81       	ldd	r25, Z+5	; 0x05
    2c6a:	9d 83       	std	Y+5, r25	; 0x05
    2c6c:	8c 83       	std	Y+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2c6e:	9b 83       	std	Y+3, r25	; 0x03
    2c70:	8a 83       	std	Y+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    2c72:	01 96       	adiw	r24, 0x01	; 1
    2c74:	0e 94 be 29 	call	0x537c	; 0x537c <malloc>
    2c78:	99 83       	std	Y+1, r25	; 0x01
    2c7a:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2c7c:	00 97       	sbiw	r24, 0x00	; 0
    2c7e:	51 f0       	breq	.+20     	; 0x2c94 <_ZN6StringC2ERKS_+0x3c>
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
    2c80:	f8 01       	movw	r30, r16
    2c82:	60 81       	ld	r22, Z
    2c84:	71 81       	ldd	r23, Z+1	; 0x01
    2c86:	0e 94 36 2c 	call	0x586c	; 0x586c <strcpy>
}
    2c8a:	df 91       	pop	r29
    2c8c:	cf 91       	pop	r28
    2c8e:	1f 91       	pop	r17
    2c90:	0f 91       	pop	r16
    2c92:	08 95       	ret
    2c94:	1b 82       	std	Y+3, r1	; 0x03
    2c96:	1a 82       	std	Y+2, r1	; 0x02
    2c98:	1d 82       	std	Y+5, r1	; 0x05
    2c9a:	1c 82       	std	Y+4, r1	; 0x04
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	1f 91       	pop	r17
    2ca2:	0f 91       	pop	r16
    2ca4:	08 95       	ret

00002ca6 <_ZN6StringC1Emi>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned long value, const int base )
    2ca6:	ef 92       	push	r14
    2ca8:	ff 92       	push	r15
    2caa:	0f 93       	push	r16
    2cac:	1f 93       	push	r17
    2cae:	df 93       	push	r29
    2cb0:	cf 93       	push	r28
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
    2cb6:	a1 97       	sbiw	r28, 0x21	; 33
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	f8 94       	cli
    2cbc:	de bf       	out	0x3e, r29	; 62
    2cbe:	0f be       	out	0x3f, r0	; 63
    2cc0:	cd bf       	out	0x3d, r28	; 61
    2cc2:	7c 01       	movw	r14, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ultoa(value, buf, 10);
    2cc8:	8e 01       	movw	r16, r28
    2cca:	0f 5f       	subi	r16, 0xFF	; 255
    2ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    2cce:	a8 01       	movw	r20, r16
    2cd0:	2a e0       	ldi	r18, 0x0A	; 10
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <ultoa>
  getBuffer( _length = strlen(buf) );
    2cd8:	f8 01       	movw	r30, r16
    2cda:	01 90       	ld	r0, Z+
    2cdc:	00 20       	and	r0, r0
    2cde:	e9 f7       	brne	.-6      	; 0x2cda <_ZN6StringC1Emi+0x34>
    2ce0:	cf 01       	movw	r24, r30
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	80 1b       	sub	r24, r16
    2ce6:	91 0b       	sbc	r25, r17
    2ce8:	f7 01       	movw	r30, r14
    2cea:	95 83       	std	Z+5, r25	; 0x05
    2cec:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2cee:	93 83       	std	Z+3, r25	; 0x03
    2cf0:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    2cf2:	01 96       	adiw	r24, 0x01	; 1
    2cf4:	0e 94 be 29 	call	0x537c	; 0x537c <malloc>
    2cf8:	f7 01       	movw	r30, r14
    2cfa:	91 83       	std	Z+1, r25	; 0x01
    2cfc:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2cfe:	00 97       	sbiw	r24, 0x00	; 0
    2d00:	81 f0       	breq	.+32     	; 0x2d22 <_ZN6StringC1Emi+0x7c>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    2d02:	b8 01       	movw	r22, r16
    2d04:	0e 94 36 2c 	call	0x586c	; 0x586c <strcpy>
}
    2d08:	a1 96       	adiw	r28, 0x21	; 33
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	f8 94       	cli
    2d0e:	de bf       	out	0x3e, r29	; 62
    2d10:	0f be       	out	0x3f, r0	; 63
    2d12:	cd bf       	out	0x3d, r28	; 61
    2d14:	cf 91       	pop	r28
    2d16:	df 91       	pop	r29
    2d18:	1f 91       	pop	r17
    2d1a:	0f 91       	pop	r16
    2d1c:	ff 90       	pop	r15
    2d1e:	ef 90       	pop	r14
    2d20:	08 95       	ret
    2d22:	13 82       	std	Z+3, r1	; 0x03
    2d24:	12 82       	std	Z+2, r1	; 0x02
    2d26:	15 82       	std	Z+5, r1	; 0x05
    2d28:	14 82       	std	Z+4, r1	; 0x04
    2d2a:	ee cf       	rjmp	.-36     	; 0x2d08 <_ZN6StringC1Emi+0x62>

00002d2c <_ZN6StringC2Emi>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned long value, const int base )
    2d2c:	ef 92       	push	r14
    2d2e:	ff 92       	push	r15
    2d30:	0f 93       	push	r16
    2d32:	1f 93       	push	r17
    2d34:	df 93       	push	r29
    2d36:	cf 93       	push	r28
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
    2d3c:	a1 97       	sbiw	r28, 0x21	; 33
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	f8 94       	cli
    2d42:	de bf       	out	0x3e, r29	; 62
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	cd bf       	out	0x3d, r28	; 61
    2d48:	7c 01       	movw	r14, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ultoa(value, buf, 10);
    2d4e:	8e 01       	movw	r16, r28
    2d50:	0f 5f       	subi	r16, 0xFF	; 255
    2d52:	1f 4f       	sbci	r17, 0xFF	; 255
    2d54:	a8 01       	movw	r20, r16
    2d56:	2a e0       	ldi	r18, 0x0A	; 10
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <ultoa>
  getBuffer( _length = strlen(buf) );
    2d5e:	f8 01       	movw	r30, r16
    2d60:	01 90       	ld	r0, Z+
    2d62:	00 20       	and	r0, r0
    2d64:	e9 f7       	brne	.-6      	; 0x2d60 <_ZN6StringC2Emi+0x34>
    2d66:	cf 01       	movw	r24, r30
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	80 1b       	sub	r24, r16
    2d6c:	91 0b       	sbc	r25, r17
    2d6e:	f7 01       	movw	r30, r14
    2d70:	95 83       	std	Z+5, r25	; 0x05
    2d72:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2d74:	93 83       	std	Z+3, r25	; 0x03
    2d76:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    2d78:	01 96       	adiw	r24, 0x01	; 1
    2d7a:	0e 94 be 29 	call	0x537c	; 0x537c <malloc>
    2d7e:	f7 01       	movw	r30, r14
    2d80:	91 83       	std	Z+1, r25	; 0x01
    2d82:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2d84:	00 97       	sbiw	r24, 0x00	; 0
    2d86:	81 f0       	breq	.+32     	; 0x2da8 <_ZN6StringC2Emi+0x7c>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    2d88:	b8 01       	movw	r22, r16
    2d8a:	0e 94 36 2c 	call	0x586c	; 0x586c <strcpy>
}
    2d8e:	a1 96       	adiw	r28, 0x21	; 33
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	de bf       	out	0x3e, r29	; 62
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	cd bf       	out	0x3d, r28	; 61
    2d9a:	cf 91       	pop	r28
    2d9c:	df 91       	pop	r29
    2d9e:	1f 91       	pop	r17
    2da0:	0f 91       	pop	r16
    2da2:	ff 90       	pop	r15
    2da4:	ef 90       	pop	r14
    2da6:	08 95       	ret
    2da8:	13 82       	std	Z+3, r1	; 0x03
    2daa:	12 82       	std	Z+2, r1	; 0x02
    2dac:	15 82       	std	Z+5, r1	; 0x05
    2dae:	14 82       	std	Z+4, r1	; 0x04
    2db0:	ee cf       	rjmp	.-36     	; 0x2d8e <_ZN6StringC2Emi+0x62>

00002db2 <_ZN6StringC1Eji>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned int value, const int base )
    2db2:	ef 92       	push	r14
    2db4:	ff 92       	push	r15
    2db6:	0f 93       	push	r16
    2db8:	1f 93       	push	r17
    2dba:	df 93       	push	r29
    2dbc:	cf 93       	push	r28
    2dbe:	cd b7       	in	r28, 0x3d	; 61
    2dc0:	de b7       	in	r29, 0x3e	; 62
    2dc2:	a1 97       	sbiw	r28, 0x21	; 33
    2dc4:	0f b6       	in	r0, 0x3f	; 63
    2dc6:	f8 94       	cli
    2dc8:	de bf       	out	0x3e, r29	; 62
    2dca:	0f be       	out	0x3f, r0	; 63
    2dcc:	cd bf       	out	0x3d, r28	; 61
    2dce:	7c 01       	movw	r14, r24
    2dd0:	9a 01       	movw	r18, r20
{
  char buf[33];   
  ultoa((unsigned long)value, buf, base);
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	8e 01       	movw	r16, r28
    2dd8:	0f 5f       	subi	r16, 0xFF	; 255
    2dda:	1f 4f       	sbci	r17, 0xFF	; 255
    2ddc:	a8 01       	movw	r20, r16
    2dde:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <ultoa>
  getBuffer( _length = strlen(buf) );
    2de2:	f8 01       	movw	r30, r16
    2de4:	01 90       	ld	r0, Z+
    2de6:	00 20       	and	r0, r0
    2de8:	e9 f7       	brne	.-6      	; 0x2de4 <_ZN6StringC1Eji+0x32>
    2dea:	cf 01       	movw	r24, r30
    2dec:	01 97       	sbiw	r24, 0x01	; 1
    2dee:	80 1b       	sub	r24, r16
    2df0:	91 0b       	sbc	r25, r17
    2df2:	f7 01       	movw	r30, r14
    2df4:	95 83       	std	Z+5, r25	; 0x05
    2df6:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2df8:	93 83       	std	Z+3, r25	; 0x03
    2dfa:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    2dfc:	01 96       	adiw	r24, 0x01	; 1
    2dfe:	0e 94 be 29 	call	0x537c	; 0x537c <malloc>
    2e02:	f7 01       	movw	r30, r14
    2e04:	91 83       	std	Z+1, r25	; 0x01
    2e06:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2e08:	00 97       	sbiw	r24, 0x00	; 0
    2e0a:	81 f0       	breq	.+32     	; 0x2e2c <_ZN6StringC1Eji+0x7a>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    2e0c:	b8 01       	movw	r22, r16
    2e0e:	0e 94 36 2c 	call	0x586c	; 0x586c <strcpy>
}
    2e12:	a1 96       	adiw	r28, 0x21	; 33
    2e14:	0f b6       	in	r0, 0x3f	; 63
    2e16:	f8 94       	cli
    2e18:	de bf       	out	0x3e, r29	; 62
    2e1a:	0f be       	out	0x3f, r0	; 63
    2e1c:	cd bf       	out	0x3d, r28	; 61
    2e1e:	cf 91       	pop	r28
    2e20:	df 91       	pop	r29
    2e22:	1f 91       	pop	r17
    2e24:	0f 91       	pop	r16
    2e26:	ff 90       	pop	r15
    2e28:	ef 90       	pop	r14
    2e2a:	08 95       	ret
    2e2c:	13 82       	std	Z+3, r1	; 0x03
    2e2e:	12 82       	std	Z+2, r1	; 0x02
    2e30:	15 82       	std	Z+5, r1	; 0x05
    2e32:	14 82       	std	Z+4, r1	; 0x04
    2e34:	ee cf       	rjmp	.-36     	; 0x2e12 <_ZN6StringC1Eji+0x60>

00002e36 <_ZN6StringC2Eji>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned int value, const int base )
    2e36:	ef 92       	push	r14
    2e38:	ff 92       	push	r15
    2e3a:	0f 93       	push	r16
    2e3c:	1f 93       	push	r17
    2e3e:	df 93       	push	r29
    2e40:	cf 93       	push	r28
    2e42:	cd b7       	in	r28, 0x3d	; 61
    2e44:	de b7       	in	r29, 0x3e	; 62
    2e46:	a1 97       	sbiw	r28, 0x21	; 33
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	f8 94       	cli
    2e4c:	de bf       	out	0x3e, r29	; 62
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	cd bf       	out	0x3d, r28	; 61
    2e52:	7c 01       	movw	r14, r24
    2e54:	9a 01       	movw	r18, r20
{
  char buf[33];   
  ultoa((unsigned long)value, buf, base);
    2e56:	80 e0       	ldi	r24, 0x00	; 0
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	8e 01       	movw	r16, r28
    2e5c:	0f 5f       	subi	r16, 0xFF	; 255
    2e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e60:	a8 01       	movw	r20, r16
    2e62:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <ultoa>
  getBuffer( _length = strlen(buf) );
    2e66:	f8 01       	movw	r30, r16
    2e68:	01 90       	ld	r0, Z+
    2e6a:	00 20       	and	r0, r0
    2e6c:	e9 f7       	brne	.-6      	; 0x2e68 <_ZN6StringC2Eji+0x32>
    2e6e:	cf 01       	movw	r24, r30
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	80 1b       	sub	r24, r16
    2e74:	91 0b       	sbc	r25, r17
    2e76:	f7 01       	movw	r30, r14
    2e78:	95 83       	std	Z+5, r25	; 0x05
    2e7a:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2e7c:	93 83       	std	Z+3, r25	; 0x03
    2e7e:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    2e80:	01 96       	adiw	r24, 0x01	; 1
    2e82:	0e 94 be 29 	call	0x537c	; 0x537c <malloc>
    2e86:	f7 01       	movw	r30, r14
    2e88:	91 83       	std	Z+1, r25	; 0x01
    2e8a:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2e8c:	00 97       	sbiw	r24, 0x00	; 0
    2e8e:	81 f0       	breq	.+32     	; 0x2eb0 <_ZN6StringC2Eji+0x7a>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    2e90:	b8 01       	movw	r22, r16
    2e92:	0e 94 36 2c 	call	0x586c	; 0x586c <strcpy>
}
    2e96:	a1 96       	adiw	r28, 0x21	; 33
    2e98:	0f b6       	in	r0, 0x3f	; 63
    2e9a:	f8 94       	cli
    2e9c:	de bf       	out	0x3e, r29	; 62
    2e9e:	0f be       	out	0x3f, r0	; 63
    2ea0:	cd bf       	out	0x3d, r28	; 61
    2ea2:	cf 91       	pop	r28
    2ea4:	df 91       	pop	r29
    2ea6:	1f 91       	pop	r17
    2ea8:	0f 91       	pop	r16
    2eaa:	ff 90       	pop	r15
    2eac:	ef 90       	pop	r14
    2eae:	08 95       	ret
    2eb0:	13 82       	std	Z+3, r1	; 0x03
    2eb2:	12 82       	std	Z+2, r1	; 0x02
    2eb4:	15 82       	std	Z+5, r1	; 0x05
    2eb6:	14 82       	std	Z+4, r1	; 0x04
    2eb8:	ee cf       	rjmp	.-36     	; 0x2e96 <_ZN6StringC2Eji+0x60>

00002eba <_ZN6StringC1EPKc>:
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    2eba:	0f 93       	push	r16
    2ebc:	1f 93       	push	r17
    2ebe:	cf 93       	push	r28
    2ec0:	df 93       	push	r29
    2ec2:	ec 01       	movw	r28, r24
    2ec4:	8b 01       	movw	r16, r22
{
  if ( value == NULL )
    2ec6:	61 15       	cp	r22, r1
    2ec8:	71 05       	cpc	r23, r1
    2eca:	21 f1       	breq	.+72     	; 0x2f14 <_ZN6StringC1EPKc+0x5a>
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    2ecc:	fb 01       	movw	r30, r22
    2ece:	01 90       	ld	r0, Z+
    2ed0:	00 20       	and	r0, r0
    2ed2:	e9 f7       	brne	.-6      	; 0x2ece <_ZN6StringC1EPKc+0x14>
    2ed4:	31 97       	sbiw	r30, 0x01	; 1
    2ed6:	e6 1b       	sub	r30, r22
    2ed8:	f7 0b       	sbc	r31, r23
    2eda:	cf 01       	movw	r24, r30
    2edc:	01 96       	adiw	r24, 0x01	; 1
{
  if ( value == NULL )
    value = "";
  getBuffer( _length = strlen( value ) );
    2ede:	fd 83       	std	Y+5, r31	; 0x05
    2ee0:	ec 83       	std	Y+4, r30	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2ee2:	fb 83       	std	Y+3, r31	; 0x03
    2ee4:	ea 83       	std	Y+2, r30	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    2ee6:	0e 94 be 29 	call	0x537c	; 0x537c <malloc>
    2eea:	99 83       	std	Y+1, r25	; 0x01
    2eec:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2eee:	00 97       	sbiw	r24, 0x00	; 0
    2ef0:	41 f0       	breq	.+16     	; 0x2f02 <_ZN6StringC1EPKc+0x48>
  if ( _buffer != NULL )
    strcpy( _buffer, value );
    2ef2:	b8 01       	movw	r22, r16
    2ef4:	0e 94 36 2c 	call	0x586c	; 0x586c <strcpy>
}
    2ef8:	df 91       	pop	r29
    2efa:	cf 91       	pop	r28
    2efc:	1f 91       	pop	r17
    2efe:	0f 91       	pop	r16
    2f00:	08 95       	ret
    2f02:	1b 82       	std	Y+3, r1	; 0x03
    2f04:	1a 82       	std	Y+2, r1	; 0x02
    2f06:	1d 82       	std	Y+5, r1	; 0x05
    2f08:	1c 82       	std	Y+4, r1	; 0x04
    2f0a:	df 91       	pop	r29
    2f0c:	cf 91       	pop	r28
    2f0e:	1f 91       	pop	r17
    2f10:	0f 91       	pop	r16
    2f12:	08 95       	ret
#include "WString.h"


String::String( const char *value )
{
  if ( value == NULL )
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	e0 e0       	ldi	r30, 0x00	; 0
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	03 e8       	ldi	r16, 0x83	; 131
    2f1e:	11 e0       	ldi	r17, 0x01	; 1
    2f20:	de cf       	rjmp	.-68     	; 0x2ede <_ZN6StringC1EPKc+0x24>

00002f22 <_ZNK6String11toUpperCaseEv>:
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
  return temp;
}

String String::toUpperCase() const
{
    2f22:	af 92       	push	r10
    2f24:	bf 92       	push	r11
    2f26:	cf 92       	push	r12
    2f28:	df 92       	push	r13
    2f2a:	ef 92       	push	r14
    2f2c:	ff 92       	push	r15
    2f2e:	0f 93       	push	r16
    2f30:	1f 93       	push	r17
    2f32:	cf 93       	push	r28
    2f34:	df 93       	push	r29
    2f36:	7c 01       	movw	r14, r24
    2f38:	8b 01       	movw	r16, r22
  String temp = _buffer;
    2f3a:	c8 2e       	mov	r12, r24
    2f3c:	e6 01       	movw	r28, r12
    2f3e:	6e 01       	movw	r12, r28
    2f40:	df 2c       	mov	r13, r15
    2f42:	e6 01       	movw	r28, r12
    2f44:	fb 01       	movw	r30, r22
    2f46:	60 81       	ld	r22, Z
    2f48:	71 81       	ldd	r23, Z+1	; 0x01
    2f4a:	c6 01       	movw	r24, r12
    2f4c:	0e 94 5d 17 	call	0x2eba	; 0x2eba <_ZN6StringC1EPKc>

  for ( unsigned int i = 0; i < _length; i++ )
    2f50:	f8 01       	movw	r30, r16
    2f52:	84 81       	ldd	r24, Z+4	; 0x04
    2f54:	95 81       	ldd	r25, Z+5	; 0x05
    2f56:	00 97       	sbiw	r24, 0x00	; 0
    2f58:	b1 f0       	breq	.+44     	; 0x2f86 <_ZNK6String11toUpperCaseEv+0x64>
    2f5a:	aa 24       	eor	r10, r10
    2f5c:	bb 24       	eor	r11, r11
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
    2f5e:	c8 80       	ld	r12, Y
    2f60:	d9 80       	ldd	r13, Y+1	; 0x01
    2f62:	ca 0c       	add	r12, r10
    2f64:	db 1c       	adc	r13, r11
    2f66:	f6 01       	movw	r30, r12
    2f68:	80 81       	ld	r24, Z
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <toupper>
    2f70:	f6 01       	movw	r30, r12
    2f72:	80 83       	st	Z, r24

String String::toUpperCase() const
{
  String temp = _buffer;

  for ( unsigned int i = 0; i < _length; i++ )
    2f74:	08 94       	sec
    2f76:	a1 1c       	adc	r10, r1
    2f78:	b1 1c       	adc	r11, r1
    2f7a:	f8 01       	movw	r30, r16
    2f7c:	84 81       	ldd	r24, Z+4	; 0x04
    2f7e:	95 81       	ldd	r25, Z+5	; 0x05
    2f80:	a8 16       	cp	r10, r24
    2f82:	b9 06       	cpc	r11, r25
    2f84:	60 f3       	brcs	.-40     	; 0x2f5e <_ZNK6String11toUpperCaseEv+0x3c>
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
  return temp;
}
    2f86:	c7 01       	movw	r24, r14
    2f88:	df 91       	pop	r29
    2f8a:	cf 91       	pop	r28
    2f8c:	1f 91       	pop	r17
    2f8e:	0f 91       	pop	r16
    2f90:	ff 90       	pop	r15
    2f92:	ef 90       	pop	r14
    2f94:	df 90       	pop	r13
    2f96:	cf 90       	pop	r12
    2f98:	bf 90       	pop	r11
    2f9a:	af 90       	pop	r10
    2f9c:	08 95       	ret

00002f9e <_ZNK6String11toLowerCaseEv>:
  _buffer[ right ] = temp;  //restore character
  return outPut;
}

String String::toLowerCase() const
{
    2f9e:	af 92       	push	r10
    2fa0:	bf 92       	push	r11
    2fa2:	cf 92       	push	r12
    2fa4:	df 92       	push	r13
    2fa6:	ef 92       	push	r14
    2fa8:	ff 92       	push	r15
    2faa:	0f 93       	push	r16
    2fac:	1f 93       	push	r17
    2fae:	cf 93       	push	r28
    2fb0:	df 93       	push	r29
    2fb2:	7c 01       	movw	r14, r24
    2fb4:	8b 01       	movw	r16, r22
  String temp = _buffer;
    2fb6:	c8 2e       	mov	r12, r24
    2fb8:	e6 01       	movw	r28, r12
    2fba:	6e 01       	movw	r12, r28
    2fbc:	df 2c       	mov	r13, r15
    2fbe:	e6 01       	movw	r28, r12
    2fc0:	fb 01       	movw	r30, r22
    2fc2:	60 81       	ld	r22, Z
    2fc4:	71 81       	ldd	r23, Z+1	; 0x01
    2fc6:	c6 01       	movw	r24, r12
    2fc8:	0e 94 5d 17 	call	0x2eba	; 0x2eba <_ZN6StringC1EPKc>

  for ( unsigned int i = 0; i < _length; i++ )
    2fcc:	f8 01       	movw	r30, r16
    2fce:	84 81       	ldd	r24, Z+4	; 0x04
    2fd0:	95 81       	ldd	r25, Z+5	; 0x05
    2fd2:	00 97       	sbiw	r24, 0x00	; 0
    2fd4:	b1 f0       	breq	.+44     	; 0x3002 <_ZNK6String11toLowerCaseEv+0x64>
    2fd6:	aa 24       	eor	r10, r10
    2fd8:	bb 24       	eor	r11, r11
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
    2fda:	c8 80       	ld	r12, Y
    2fdc:	d9 80       	ldd	r13, Y+1	; 0x01
    2fde:	ca 0c       	add	r12, r10
    2fe0:	db 1c       	adc	r13, r11
    2fe2:	f6 01       	movw	r30, r12
    2fe4:	80 81       	ld	r24, Z
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <tolower>
    2fec:	f6 01       	movw	r30, r12
    2fee:	80 83       	st	Z, r24

String String::toLowerCase() const
{
  String temp = _buffer;

  for ( unsigned int i = 0; i < _length; i++ )
    2ff0:	08 94       	sec
    2ff2:	a1 1c       	adc	r10, r1
    2ff4:	b1 1c       	adc	r11, r1
    2ff6:	f8 01       	movw	r30, r16
    2ff8:	84 81       	ldd	r24, Z+4	; 0x04
    2ffa:	95 81       	ldd	r25, Z+5	; 0x05
    2ffc:	a8 16       	cp	r10, r24
    2ffe:	b9 06       	cpc	r11, r25
    3000:	60 f3       	brcs	.-40     	; 0x2fda <_ZNK6String11toLowerCaseEv+0x3c>
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
  return temp;
}
    3002:	c7 01       	movw	r24, r14
    3004:	df 91       	pop	r29
    3006:	cf 91       	pop	r28
    3008:	1f 91       	pop	r17
    300a:	0f 91       	pop	r16
    300c:	ff 90       	pop	r15
    300e:	ef 90       	pop	r14
    3010:	df 90       	pop	r13
    3012:	cf 90       	pop	r12
    3014:	bf 90       	pop	r11
    3016:	af 90       	pop	r10
    3018:	08 95       	ret

0000301a <_ZNK6String16equalsIgnoreCaseERKS_>:
{
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
}

boolean String::equalsIgnoreCase( const String &s2 ) const
{
    301a:	ef 92       	push	r14
    301c:	ff 92       	push	r15
    301e:	0f 93       	push	r16
    3020:	1f 93       	push	r17
    3022:	df 93       	push	r29
    3024:	cf 93       	push	r28
    3026:	cd b7       	in	r28, 0x3d	; 61
    3028:	de b7       	in	r29, 0x3e	; 62
    302a:	2d 97       	sbiw	r28, 0x0d	; 13
    302c:	0f b6       	in	r0, 0x3f	; 63
    302e:	f8 94       	cli
    3030:	de bf       	out	0x3e, r29	; 62
    3032:	0f be       	out	0x3f, r0	; 63
    3034:	cd bf       	out	0x3d, r28	; 61
    3036:	fc 01       	movw	r30, r24
    3038:	8b 01       	movw	r16, r22
  if ( this == &s2 )
    303a:	86 17       	cp	r24, r22
    303c:	97 07       	cpc	r25, r23
    303e:	e9 f1       	breq	.+122    	; 0x30ba <_ZNK6String16equalsIgnoreCaseERKS_+0xa0>
    return true; //1;
  else if ( _length != s2._length )
    3040:	24 81       	ldd	r18, Z+4	; 0x04
    3042:	35 81       	ldd	r19, Z+5	; 0x05
    3044:	db 01       	movw	r26, r22
    3046:	14 96       	adiw	r26, 0x04	; 4
    3048:	8d 91       	ld	r24, X+
    304a:	9c 91       	ld	r25, X
    304c:	15 97       	sbiw	r26, 0x05	; 5
    304e:	28 17       	cp	r18, r24
    3050:	39 07       	cpc	r19, r25
    3052:	79 f0       	breq	.+30     	; 0x3072 <_ZNK6String16equalsIgnoreCaseERKS_+0x58>
    3054:	20 e0       	ldi	r18, 0x00	; 0
    return false; //0;

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}
    3056:	82 2f       	mov	r24, r18
    3058:	2d 96       	adiw	r28, 0x0d	; 13
    305a:	0f b6       	in	r0, 0x3f	; 63
    305c:	f8 94       	cli
    305e:	de bf       	out	0x3e, r29	; 62
    3060:	0f be       	out	0x3f, r0	; 63
    3062:	cd bf       	out	0x3d, r28	; 61
    3064:	cf 91       	pop	r28
    3066:	df 91       	pop	r29
    3068:	1f 91       	pop	r17
    306a:	0f 91       	pop	r16
    306c:	ff 90       	pop	r15
    306e:	ef 90       	pop	r14
    3070:	08 95       	ret
  if ( this == &s2 )
    return true; //1;
  else if ( _length != s2._length )
    return false; //0;

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
    3072:	ce 01       	movw	r24, r28
    3074:	01 96       	adiw	r24, 0x01	; 1
    3076:	bf 01       	movw	r22, r30
    3078:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_ZNK6String11toLowerCaseEv>
    307c:	e9 80       	ldd	r14, Y+1	; 0x01
    307e:	fa 80       	ldd	r15, Y+2	; 0x02
    3080:	ce 01       	movw	r24, r28
    3082:	07 96       	adiw	r24, 0x07	; 7
    3084:	b8 01       	movw	r22, r16
    3086:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_ZNK6String11toLowerCaseEv>
    308a:	0f 81       	ldd	r16, Y+7	; 0x07
    308c:	18 85       	ldd	r17, Y+8	; 0x08
    308e:	c7 01       	movw	r24, r14
    3090:	b8 01       	movw	r22, r16
    3092:	0e 94 2d 2c 	call	0x585a	; 0x585a <strcmp>
    3096:	20 e0       	ldi	r18, 0x00	; 0
    3098:	00 97       	sbiw	r24, 0x00	; 0
    309a:	09 f4       	brne	.+2      	; 0x309e <_ZNK6String16equalsIgnoreCaseERKS_+0x84>
    309c:	21 e0       	ldi	r18, 0x01	; 1
    String( const unsigned char );
    String( const int, const int base=10);
    String( const unsigned int, const int base=10 );
    String( const long, const int base=10 );
    String( const unsigned long, const int base=10 );
    ~String() { free(_buffer); _length = _capacity = 0;}     //added _length = _capacity = 0;
    309e:	c8 01       	movw	r24, r16
    30a0:	2d 87       	std	Y+13, r18	; 0x0d
    30a2:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <free>
    30a6:	1a 86       	std	Y+10, r1	; 0x0a
    30a8:	19 86       	std	Y+9, r1	; 0x09
    30aa:	1c 86       	std	Y+12, r1	; 0x0c
    30ac:	1b 86       	std	Y+11, r1	; 0x0b
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	9a 81       	ldd	r25, Y+2	; 0x02
    30b2:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <free>
    30b6:	2d 85       	ldd	r18, Y+13	; 0x0d
    30b8:	ce cf       	rjmp	.-100    	; 0x3056 <_ZNK6String16equalsIgnoreCaseERKS_+0x3c>
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
}

boolean String::equalsIgnoreCase( const String &s2 ) const
{
  if ( this == &s2 )
    30ba:	21 e0       	ldi	r18, 0x01	; 1
    30bc:	cc cf       	rjmp	.-104    	; 0x3056 <_ZNK6String16equalsIgnoreCaseERKS_+0x3c>

000030be <_ZNK6String9substringEjj>:
{
  return substring( left, _length );
}

String String::substring( unsigned int left, unsigned int right ) const
{
    30be:	df 92       	push	r13
    30c0:	ef 92       	push	r14
    30c2:	ff 92       	push	r15
    30c4:	0f 93       	push	r16
    30c6:	1f 93       	push	r17
    30c8:	cf 93       	push	r28
    30ca:	df 93       	push	r29
    30cc:	8c 01       	movw	r16, r24
    30ce:	eb 01       	movw	r28, r22
    30d0:	79 01       	movw	r14, r18
  if ( left > right )
    30d2:	24 17       	cp	r18, r20
    30d4:	35 07       	cpc	r19, r21
    30d6:	30 f4       	brcc	.+12     	; 0x30e4 <_ZNK6String9substringEjj+0x26>
    30d8:	34 2f       	mov	r19, r20
    30da:	25 2f       	mov	r18, r21
    30dc:	a7 01       	movw	r20, r14
    30de:	c9 01       	movw	r24, r18
    30e0:	e9 2e       	mov	r14, r25
    30e2:	f8 2e       	mov	r15, r24
    30e4:	8c 81       	ldd	r24, Y+4	; 0x04
    30e6:	9d 81       	ldd	r25, Y+5	; 0x05
    30e8:	8e 15       	cp	r24, r14
    30ea:	9f 05       	cpc	r25, r15
    30ec:	08 f4       	brcc	.+2      	; 0x30f0 <_ZNK6String9substringEjj+0x32>
    30ee:	7c 01       	movw	r14, r24
  if ( right > _length )
  {
    right = _length;
  } 

  char temp = _buffer[ right ];  // save the replaced character
    30f0:	e8 81       	ld	r30, Y
    30f2:	f9 81       	ldd	r31, Y+1	; 0x01
    30f4:	ee 0d       	add	r30, r14
    30f6:	ff 1d       	adc	r31, r15
    30f8:	d0 80       	ld	r13, Z
  _buffer[ right ] = '\0';	
    30fa:	10 82       	st	Z, r1
  String outPut = ( _buffer + left );  // pointer arithmetic
    30fc:	68 81       	ld	r22, Y
    30fe:	79 81       	ldd	r23, Y+1	; 0x01
    3100:	64 0f       	add	r22, r20
    3102:	75 1f       	adc	r23, r21
    3104:	c8 01       	movw	r24, r16
    3106:	0e 94 5d 17 	call	0x2eba	; 0x2eba <_ZN6StringC1EPKc>
  _buffer[ right ] = temp;  //restore character
    310a:	e8 81       	ld	r30, Y
    310c:	f9 81       	ldd	r31, Y+1	; 0x01
    310e:	ee 0d       	add	r30, r14
    3110:	ff 1d       	adc	r31, r15
    3112:	d0 82       	st	Z, r13
  return outPut;
}
    3114:	c8 01       	movw	r24, r16
    3116:	df 91       	pop	r29
    3118:	cf 91       	pop	r28
    311a:	1f 91       	pop	r17
    311c:	0f 91       	pop	r16
    311e:	ff 90       	pop	r15
    3120:	ef 90       	pop	r14
    3122:	df 90       	pop	r13
    3124:	08 95       	ret

00003126 <_ZNK6String9substringEj>:

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
}

String String::substring( unsigned int left ) const
{
    3126:	cf 93       	push	r28
    3128:	df 93       	push	r29
    312a:	ec 01       	movw	r28, r24
  return substring( left, _length );
    312c:	fb 01       	movw	r30, r22
    312e:	24 81       	ldd	r18, Z+4	; 0x04
    3130:	35 81       	ldd	r19, Z+5	; 0x05
    3132:	0e 94 5f 18 	call	0x30be	; 0x30be <_ZNK6String9substringEjj>
}
    3136:	ce 01       	movw	r24, r28
    3138:	df 91       	pop	r29
    313a:	cf 91       	pop	r28
    313c:	08 95       	ret

0000313e <_ZNK6String11lastIndexOfERKS_j>:
{
  return lastIndexOf( s2, _length - s2._length );
}

int String::lastIndexOf( const String &s2, unsigned int fromIndex ) const
{
    313e:	8f 92       	push	r8
    3140:	9f 92       	push	r9
    3142:	af 92       	push	r10
    3144:	bf 92       	push	r11
    3146:	cf 92       	push	r12
    3148:	df 92       	push	r13
    314a:	ef 92       	push	r14
    314c:	ff 92       	push	r15
    314e:	0f 93       	push	r16
    3150:	1f 93       	push	r17
    3152:	df 93       	push	r29
    3154:	cf 93       	push	r28
    3156:	00 d0       	rcall	.+0      	; 0x3158 <_ZNK6String11lastIndexOfERKS_j+0x1a>
    3158:	00 d0       	rcall	.+0      	; 0x315a <_ZNK6String11lastIndexOfERKS_j+0x1c>
    315a:	00 d0       	rcall	.+0      	; 0x315c <_ZNK6String11lastIndexOfERKS_j+0x1e>
    315c:	cd b7       	in	r28, 0x3d	; 61
    315e:	de b7       	in	r29, 0x3e	; 62
    3160:	6c 01       	movw	r12, r24
    3162:	7b 01       	movw	r14, r22
  // check for empty strings
  if ( s2._length == 0 || s2._length - 1 > fromIndex || fromIndex >= _length )
    3164:	db 01       	movw	r26, r22
    3166:	14 96       	adiw	r26, 0x04	; 4
    3168:	8d 91       	ld	r24, X+
    316a:	9c 91       	ld	r25, X
    316c:	15 97       	sbiw	r26, 0x05	; 5
    316e:	00 97       	sbiw	r24, 0x00	; 0
    3170:	b1 f4       	brne	.+44     	; 0x319e <_ZNK6String11lastIndexOfERKS_j+0x60>
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    3172:	0f ef       	ldi	r16, 0xFF	; 255
    3174:	1f ef       	ldi	r17, 0xFF	; 255
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    return i;
  }
  return -1;
}
    3176:	c8 01       	movw	r24, r16
    3178:	26 96       	adiw	r28, 0x06	; 6
    317a:	0f b6       	in	r0, 0x3f	; 63
    317c:	f8 94       	cli
    317e:	de bf       	out	0x3e, r29	; 62
    3180:	0f be       	out	0x3f, r0	; 63
    3182:	cd bf       	out	0x3d, r28	; 61
    3184:	cf 91       	pop	r28
    3186:	df 91       	pop	r29
    3188:	1f 91       	pop	r17
    318a:	0f 91       	pop	r16
    318c:	ff 90       	pop	r15
    318e:	ef 90       	pop	r14
    3190:	df 90       	pop	r13
    3192:	cf 90       	pop	r12
    3194:	bf 90       	pop	r11
    3196:	af 90       	pop	r10
    3198:	9f 90       	pop	r9
    319a:	8f 90       	pop	r8
    319c:	08 95       	ret
}

int String::lastIndexOf( const String &s2, unsigned int fromIndex ) const
{
  // check for empty strings
  if ( s2._length == 0 || s2._length - 1 > fromIndex || fromIndex >= _length )
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	48 17       	cp	r20, r24
    31a2:	59 07       	cpc	r21, r25
    31a4:	30 f3       	brcs	.-52     	; 0x3172 <_ZNK6String11lastIndexOfERKS_j+0x34>
    31a6:	f6 01       	movw	r30, r12
    31a8:	84 81       	ldd	r24, Z+4	; 0x04
    31aa:	95 81       	ldd	r25, Z+5	; 0x05
    31ac:	48 17       	cp	r20, r24
    31ae:	59 07       	cpc	r21, r25
    31b0:	00 f7       	brcc	.-64     	; 0x3172 <_ZNK6String11lastIndexOfERKS_j+0x34>
}

char String::operator[]( unsigned int index ) const
{
  // need to check for valid index, to do later
  return _buffer[ index ];
    31b2:	ed 91       	ld	r30, X+
    31b4:	fc 91       	ld	r31, X
    31b6:	11 97       	sbiw	r26, 0x01	; 1
    31b8:	90 80       	ld	r9, Z
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    31ba:	8a 01       	movw	r16, r20
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    31bc:	5e 01       	movw	r10, r28
    31be:	08 94       	sec
    31c0:	a1 1c       	adc	r10, r1
    31c2:	b1 1c       	adc	r11, r1
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    31c4:	02 c0       	rjmp	.+4      	; 0x31ca <_ZNK6String11lastIndexOfERKS_j+0x8c>
    31c6:	01 50       	subi	r16, 0x01	; 1
    31c8:	10 40       	sbci	r17, 0x00	; 0
    31ca:	17 fd       	sbrc	r17, 7
    31cc:	d2 cf       	rjmp	.-92     	; 0x3172 <_ZNK6String11lastIndexOfERKS_j+0x34>
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    31ce:	d6 01       	movw	r26, r12
    31d0:	ed 91       	ld	r30, X+
    31d2:	fc 91       	ld	r31, X
    31d4:	11 97       	sbiw	r26, 0x01	; 1
    31d6:	e0 0f       	add	r30, r16
    31d8:	f1 1f       	adc	r31, r17
    31da:	80 81       	ld	r24, Z
    31dc:	89 15       	cp	r24, r9
    31de:	99 f7       	brne	.-26     	; 0x31c6 <_ZNK6String11lastIndexOfERKS_j+0x88>
    31e0:	f7 01       	movw	r30, r14
    31e2:	24 81       	ldd	r18, Z+4	; 0x04
    31e4:	35 81       	ldd	r19, Z+5	; 0x05
    31e6:	20 0f       	add	r18, r16
    31e8:	31 1f       	adc	r19, r17
    31ea:	c5 01       	movw	r24, r10
    31ec:	b6 01       	movw	r22, r12
    31ee:	a8 01       	movw	r20, r16
    31f0:	0e 94 5f 18 	call	0x30be	; 0x30be <_ZNK6String9substringEjj>
    31f4:	c5 01       	movw	r24, r10
    31f6:	b7 01       	movw	r22, r14
    31f8:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <_ZNK6String6equalsERKS_>
    31fc:	88 2e       	mov	r8, r24
    31fe:	89 81       	ldd	r24, Y+1	; 0x01
    3200:	9a 81       	ldd	r25, Y+2	; 0x02
    3202:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <free>
    3206:	88 20       	and	r8, r8
    3208:	09 f0       	breq	.+2      	; 0x320c <_ZNK6String11lastIndexOfERKS_j+0xce>
    320a:	b5 cf       	rjmp	.-150    	; 0x3176 <_ZNK6String11lastIndexOfERKS_j+0x38>
    320c:	1c 82       	std	Y+4, r1	; 0x04
    320e:	1b 82       	std	Y+3, r1	; 0x03
    3210:	1e 82       	std	Y+6, r1	; 0x06
    3212:	1d 82       	std	Y+5, r1	; 0x05
    3214:	d8 cf       	rjmp	.-80     	; 0x31c6 <_ZNK6String11lastIndexOfERKS_j+0x88>

00003216 <_ZNK6String11lastIndexOfERKS_>:
  return temp - _buffer;
}

int String::lastIndexOf( const String &s2 ) const
{
  return lastIndexOf( s2, _length - s2._length );
    3216:	fc 01       	movw	r30, r24
    3218:	44 81       	ldd	r20, Z+4	; 0x04
    321a:	55 81       	ldd	r21, Z+5	; 0x05
    321c:	fb 01       	movw	r30, r22
    321e:	24 81       	ldd	r18, Z+4	; 0x04
    3220:	35 81       	ldd	r19, Z+5	; 0x05
    3222:	42 1b       	sub	r20, r18
    3224:	53 0b       	sbc	r21, r19
    3226:	0e 94 9f 18 	call	0x313e	; 0x313e <_ZNK6String11lastIndexOfERKS_j>
}
    322a:	08 95       	ret

0000322c <_ZNK6String4trimEv>:
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
  return temp;
}

String String::trim() const
{
    322c:	6f 92       	push	r6
    322e:	7f 92       	push	r7
    3230:	8f 92       	push	r8
    3232:	9f 92       	push	r9
    3234:	af 92       	push	r10
    3236:	bf 92       	push	r11
    3238:	cf 92       	push	r12
    323a:	df 92       	push	r13
    323c:	ef 92       	push	r14
    323e:	ff 92       	push	r15
    3240:	0f 93       	push	r16
    3242:	1f 93       	push	r17
    3244:	df 93       	push	r29
    3246:	cf 93       	push	r28
    3248:	00 d0       	rcall	.+0      	; 0x324a <_ZNK6String4trimEv+0x1e>
    324a:	00 d0       	rcall	.+0      	; 0x324c <_ZNK6String4trimEv+0x20>
    324c:	00 d0       	rcall	.+0      	; 0x324e <_ZNK6String4trimEv+0x22>
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
    3252:	8c 01       	movw	r16, r24
    3254:	6b 01       	movw	r12, r22
  if ( _buffer == NULL ) return *this;
    3256:	fb 01       	movw	r30, r22
    3258:	60 81       	ld	r22, Z
    325a:	71 81       	ldd	r23, Z+1	; 0x01
    325c:	61 15       	cp	r22, r1
    325e:	71 05       	cpc	r23, r1
    3260:	09 f4       	brne	.+2      	; 0x3264 <_ZNK6String4trimEv+0x38>
    3262:	63 c0       	rjmp	.+198    	; 0x332a <_ZNK6String4trimEv+0xfe>
  String temp = _buffer;
    3264:	5e 01       	movw	r10, r28
    3266:	08 94       	sec
    3268:	a1 1c       	adc	r10, r1
    326a:	b1 1c       	adc	r11, r1
    326c:	c5 01       	movw	r24, r10
    326e:	0e 94 5d 17 	call	0x2eba	; 0x2eba <_ZN6StringC1EPKc>
  unsigned int i,j;

  for ( i = 0; i < _length; i++ )
    3272:	f6 01       	movw	r30, r12
    3274:	84 80       	ldd	r8, Z+4	; 0x04
    3276:	95 80       	ldd	r9, Z+5	; 0x05
    3278:	81 14       	cp	r8, r1
    327a:	91 04       	cpc	r9, r1
    327c:	09 f4       	brne	.+2      	; 0x3280 <_ZNK6String4trimEv+0x54>
    327e:	59 c0       	rjmp	.+178    	; 0x3332 <_ZNK6String4trimEv+0x106>
    3280:	f6 01       	movw	r30, r12
    3282:	60 80       	ld	r6, Z
    3284:	71 80       	ldd	r7, Z+1	; 0x01
    3286:	ee 24       	eor	r14, r14
    3288:	ff 24       	eor	r15, r15
    328a:	06 c0       	rjmp	.+12     	; 0x3298 <_ZNK6String4trimEv+0x6c>
    328c:	08 94       	sec
    328e:	e1 1c       	adc	r14, r1
    3290:	f1 1c       	adc	r15, r1
    3292:	e8 14       	cp	r14, r8
    3294:	f9 04       	cpc	r15, r9
    3296:	48 f4       	brcc	.+18     	; 0x32aa <_ZNK6String4trimEv+0x7e>
  {
    if ( !isspace(_buffer[i]) )
    3298:	f3 01       	movw	r30, r6
    329a:	ee 0d       	add	r30, r14
    329c:	ff 1d       	adc	r31, r15
    329e:	80 81       	ld	r24, Z
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	0e 94 ef 2b 	call	0x57de	; 0x57de <isspace>
    32a6:	00 97       	sbiw	r24, 0x00	; 0
    32a8:	89 f7       	brne	.-30     	; 0x328c <_ZNK6String4trimEv+0x60>
      break;
  }

  for ( j = temp._length - 1; j > i; j-- )
    32aa:	8d 80       	ldd	r8, Y+5	; 0x05
    32ac:	9e 80       	ldd	r9, Y+6	; 0x06
    32ae:	08 94       	sec
    32b0:	81 08       	sbc	r8, r1
    32b2:	91 08       	sbc	r9, r1
    32b4:	e8 14       	cp	r14, r8
    32b6:	f9 04       	cpc	r15, r9
    32b8:	b0 f4       	brcc	.+44     	; 0x32e6 <_ZNK6String4trimEv+0xba>
    32ba:	f6 01       	movw	r30, r12
    32bc:	c0 80       	ld	r12, Z
    32be:	d1 80       	ldd	r13, Z+1	; 0x01
    32c0:	c8 0c       	add	r12, r8
    32c2:	d9 1c       	adc	r13, r9
    32c4:	09 c0       	rjmp	.+18     	; 0x32d8 <_ZNK6String4trimEv+0xac>
    32c6:	08 94       	sec
    32c8:	81 08       	sbc	r8, r1
    32ca:	91 08       	sbc	r9, r1
    32cc:	08 94       	sec
    32ce:	c1 08       	sbc	r12, r1
    32d0:	d1 08       	sbc	r13, r1
    32d2:	e8 14       	cp	r14, r8
    32d4:	f9 04       	cpc	r15, r9
    32d6:	38 f4       	brcc	.+14     	; 0x32e6 <_ZNK6String4trimEv+0xba>
  {
    if ( !isspace(_buffer[j]) )
    32d8:	f6 01       	movw	r30, r12
    32da:	80 81       	ld	r24, Z
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	0e 94 ef 2b 	call	0x57de	; 0x57de <isspace>
    32e2:	00 97       	sbiw	r24, 0x00	; 0
    32e4:	81 f7       	brne	.-32     	; 0x32c6 <_ZNK6String4trimEv+0x9a>
      break;
  }

  return temp.substring( i, j + 1);
    32e6:	94 01       	movw	r18, r8
    32e8:	2f 5f       	subi	r18, 0xFF	; 255
    32ea:	3f 4f       	sbci	r19, 0xFF	; 255
    32ec:	c8 01       	movw	r24, r16
    32ee:	b5 01       	movw	r22, r10
    32f0:	a7 01       	movw	r20, r14
    32f2:	0e 94 5f 18 	call	0x30be	; 0x30be <_ZNK6String9substringEjj>
    32f6:	89 81       	ldd	r24, Y+1	; 0x01
    32f8:	9a 81       	ldd	r25, Y+2	; 0x02
    32fa:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <free>
}
    32fe:	c8 01       	movw	r24, r16
    3300:	26 96       	adiw	r28, 0x06	; 6
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	f8 94       	cli
    3306:	de bf       	out	0x3e, r29	; 62
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	cd bf       	out	0x3d, r28	; 61
    330c:	cf 91       	pop	r28
    330e:	df 91       	pop	r29
    3310:	1f 91       	pop	r17
    3312:	0f 91       	pop	r16
    3314:	ff 90       	pop	r15
    3316:	ef 90       	pop	r14
    3318:	df 90       	pop	r13
    331a:	cf 90       	pop	r12
    331c:	bf 90       	pop	r11
    331e:	af 90       	pop	r10
    3320:	9f 90       	pop	r9
    3322:	8f 90       	pop	r8
    3324:	7f 90       	pop	r7
    3326:	6f 90       	pop	r6
    3328:	08 95       	ret
  return temp;
}

String String::trim() const
{
  if ( _buffer == NULL ) return *this;
    332a:	b6 01       	movw	r22, r12
    332c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <_ZN6StringC1ERKS_>
    3330:	e6 cf       	rjmp	.-52     	; 0x32fe <_ZNK6String4trimEv+0xd2>
  String temp = _buffer;
  unsigned int i,j;

  for ( i = 0; i < _length; i++ )
    3332:	ee 24       	eor	r14, r14
    3334:	ff 24       	eor	r15, r15
    3336:	b9 cf       	rjmp	.-142    	; 0x32aa <_ZNK6String4trimEv+0x7e>

00003338 <_ZN6String7replaceERKS_S1_>:

  return theReturn;
}

String String::replace( const String& match, const String& replace )
{
    3338:	2f 92       	push	r2
    333a:	3f 92       	push	r3
    333c:	4f 92       	push	r4
    333e:	5f 92       	push	r5
    3340:	6f 92       	push	r6
    3342:	7f 92       	push	r7
    3344:	8f 92       	push	r8
    3346:	9f 92       	push	r9
    3348:	af 92       	push	r10
    334a:	bf 92       	push	r11
    334c:	cf 92       	push	r12
    334e:	df 92       	push	r13
    3350:	ef 92       	push	r14
    3352:	ff 92       	push	r15
    3354:	0f 93       	push	r16
    3356:	1f 93       	push	r17
    3358:	df 93       	push	r29
    335a:	cf 93       	push	r28
    335c:	cd b7       	in	r28, 0x3d	; 61
    335e:	de b7       	in	r29, 0x3e	; 62
    3360:	68 97       	sbiw	r28, 0x18	; 24
    3362:	0f b6       	in	r0, 0x3f	; 63
    3364:	f8 94       	cli
    3366:	de bf       	out	0x3e, r29	; 62
    3368:	0f be       	out	0x3f, r0	; 63
    336a:	cd bf       	out	0x3d, r28	; 61
    336c:	1c 01       	movw	r2, r24
    336e:	fb 01       	movw	r30, r22
    3370:	5a 01       	movw	r10, r20
    3372:	29 01       	movw	r4, r18
  if ( _buffer == NULL ) return *this;
    3374:	60 81       	ld	r22, Z
    3376:	71 81       	ldd	r23, Z+1	; 0x01
    3378:	61 15       	cp	r22, r1
    337a:	71 05       	cpc	r23, r1
    337c:	09 f4       	brne	.+2      	; 0x3380 <_ZN6String7replaceERKS_S1_+0x48>
    337e:	7e c0       	rjmp	.+252    	; 0x347c <_ZN6String7replaceERKS_S1_+0x144>
  String temp = _buffer, newString;
    3380:	8e 01       	movw	r16, r28
    3382:	0f 5f       	subi	r16, 0xFF	; 255
    3384:	1f 4f       	sbci	r17, 0xFF	; 255
    3386:	c8 01       	movw	r24, r16
    3388:	0e 94 5d 17 	call	0x2eba	; 0x2eba <_ZN6StringC1EPKc>
    338c:	47 e0       	ldi	r20, 0x07	; 7
    338e:	c4 2e       	mov	r12, r20
    3390:	d1 2c       	mov	r13, r1
    3392:	cc 0e       	add	r12, r28
    3394:	dd 1e       	adc	r13, r29
    3396:	c6 01       	movw	r24, r12
    3398:	63 e8       	ldi	r22, 0x83	; 131
    339a:	71 e0       	ldi	r23, 0x01	; 1
    339c:	0e 94 5d 17 	call	0x2eba	; 0x2eba <_ZN6StringC1EPKc>

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
  {
    newString += temp.substring( 0, loc );
    33a0:	3d e0       	ldi	r19, 0x0D	; 13
    33a2:	83 2e       	mov	r8, r19
    33a4:	91 2c       	mov	r9, r1
    33a6:	8c 0e       	add	r8, r28
    33a8:	9d 1e       	adc	r9, r29
    newString += replace;
    temp = temp.substring( loc + match._length );
    33aa:	23 e1       	ldi	r18, 0x13	; 19
    33ac:	62 2e       	mov	r6, r18
    33ae:	71 2c       	mov	r7, r1
    33b0:	6c 0e       	add	r6, r28
    33b2:	7d 1e       	adc	r7, r29
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer, newString;

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
    33b4:	2c c0       	rjmp	.+88     	; 0x340e <_ZN6String7replaceERKS_S1_+0xd6>
  {
    newString += temp.substring( 0, loc );
    33b6:	c4 01       	movw	r24, r8
    33b8:	b8 01       	movw	r22, r16
    33ba:	40 e0       	ldi	r20, 0x00	; 0
    33bc:	50 e0       	ldi	r21, 0x00	; 0
    33be:	97 01       	movw	r18, r14
    33c0:	0e 94 5f 18 	call	0x30be	; 0x30be <_ZNK6String9substringEjj>
    33c4:	c6 01       	movw	r24, r12
    33c6:	b4 01       	movw	r22, r8
    33c8:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN6StringpLERKS_>
    33cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    33d0:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <free>
    33d4:	18 8a       	std	Y+16, r1	; 0x10
    33d6:	1f 86       	std	Y+15, r1	; 0x0f
    33d8:	1a 8a       	std	Y+18, r1	; 0x12
    33da:	19 8a       	std	Y+17, r1	; 0x11
    newString += replace;
    33dc:	c6 01       	movw	r24, r12
    33de:	b2 01       	movw	r22, r4
    33e0:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN6StringpLERKS_>
    temp = temp.substring( loc + match._length );
    33e4:	f5 01       	movw	r30, r10
    33e6:	44 81       	ldd	r20, Z+4	; 0x04
    33e8:	55 81       	ldd	r21, Z+5	; 0x05
    33ea:	4e 0d       	add	r20, r14
    33ec:	5f 1d       	adc	r21, r15
    33ee:	c3 01       	movw	r24, r6
    33f0:	b8 01       	movw	r22, r16
    33f2:	0e 94 93 18 	call	0x3126	; 0x3126 <_ZNK6String9substringEj>
    33f6:	c8 01       	movw	r24, r16
    33f8:	b3 01       	movw	r22, r6
    33fa:	0e 94 de 14 	call	0x29bc	; 0x29bc <_ZN6StringaSERKS_>
    33fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3400:	9c 89       	ldd	r25, Y+20	; 0x14
    3402:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <free>
    3406:	1e 8a       	std	Y+22, r1	; 0x16
    3408:	1d 8a       	std	Y+21, r1	; 0x15
    340a:	18 8e       	std	Y+24, r1	; 0x18
    340c:	1f 8a       	std	Y+23, r1	; 0x17
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer, newString;

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
    340e:	c8 01       	movw	r24, r16
    3410:	b5 01       	movw	r22, r10
    3412:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZNK6String7indexOfERKS_>
    3416:	7c 01       	movw	r14, r24
    3418:	ff ef       	ldi	r31, 0xFF	; 255
    341a:	8f 3f       	cpi	r24, 0xFF	; 255
    341c:	9f 07       	cpc	r25, r31
    341e:	59 f6       	brne	.-106    	; 0x33b6 <_ZN6String7replaceERKS_S1_+0x7e>
  {
    newString += temp.substring( 0, loc );
    newString += replace;
    temp = temp.substring( loc + match._length );
  }
  newString += temp;  
    3420:	c6 01       	movw	r24, r12
    3422:	b8 01       	movw	r22, r16
    3424:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN6StringpLERKS_>
  return newString;
    3428:	c1 01       	movw	r24, r2
    342a:	b6 01       	movw	r22, r12
    342c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <_ZN6StringC1ERKS_>
    3430:	8f 81       	ldd	r24, Y+7	; 0x07
    3432:	98 85       	ldd	r25, Y+8	; 0x08
    3434:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <free>
    3438:	1a 86       	std	Y+10, r1	; 0x0a
    343a:	19 86       	std	Y+9, r1	; 0x09
    343c:	1c 86       	std	Y+12, r1	; 0x0c
    343e:	1b 86       	std	Y+11, r1	; 0x0b
    3440:	89 81       	ldd	r24, Y+1	; 0x01
    3442:	9a 81       	ldd	r25, Y+2	; 0x02
    3444:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <free>
}
    3448:	c1 01       	movw	r24, r2
    344a:	68 96       	adiw	r28, 0x18	; 24
    344c:	0f b6       	in	r0, 0x3f	; 63
    344e:	f8 94       	cli
    3450:	de bf       	out	0x3e, r29	; 62
    3452:	0f be       	out	0x3f, r0	; 63
    3454:	cd bf       	out	0x3d, r28	; 61
    3456:	cf 91       	pop	r28
    3458:	df 91       	pop	r29
    345a:	1f 91       	pop	r17
    345c:	0f 91       	pop	r16
    345e:	ff 90       	pop	r15
    3460:	ef 90       	pop	r14
    3462:	df 90       	pop	r13
    3464:	cf 90       	pop	r12
    3466:	bf 90       	pop	r11
    3468:	af 90       	pop	r10
    346a:	9f 90       	pop	r9
    346c:	8f 90       	pop	r8
    346e:	7f 90       	pop	r7
    3470:	6f 90       	pop	r6
    3472:	5f 90       	pop	r5
    3474:	4f 90       	pop	r4
    3476:	3f 90       	pop	r3
    3478:	2f 90       	pop	r2
    347a:	08 95       	ret
  return theReturn;
}

String String::replace( const String& match, const String& replace )
{
  if ( _buffer == NULL ) return *this;
    347c:	bf 01       	movw	r22, r30
    347e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <_ZN6StringC1ERKS_>
    3482:	e2 cf       	rjmp	.-60     	; 0x3448 <_ZN6String7replaceERKS_S1_+0x110>

00003484 <_ZN6String7replaceEcc>:

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}

String String::replace( char findChar, char replaceChar )
{
    3484:	cf 92       	push	r12
    3486:	df 92       	push	r13
    3488:	ef 92       	push	r14
    348a:	ff 92       	push	r15
    348c:	0f 93       	push	r16
    348e:	1f 93       	push	r17
    3490:	df 93       	push	r29
    3492:	cf 93       	push	r28
    3494:	00 d0       	rcall	.+0      	; 0x3496 <_ZN6String7replaceEcc+0x12>
    3496:	00 d0       	rcall	.+0      	; 0x3498 <_ZN6String7replaceEcc+0x14>
    3498:	00 d0       	rcall	.+0      	; 0x349a <_ZN6String7replaceEcc+0x16>
    349a:	cd b7       	in	r28, 0x3d	; 61
    349c:	de b7       	in	r29, 0x3e	; 62
    349e:	8c 01       	movw	r16, r24
    34a0:	fb 01       	movw	r30, r22
    34a2:	f4 2e       	mov	r15, r20
    34a4:	e2 2e       	mov	r14, r18
  if ( _buffer == NULL ) return *this;
    34a6:	60 81       	ld	r22, Z
    34a8:	71 81       	ldd	r23, Z+1	; 0x01
    34aa:	61 15       	cp	r22, r1
    34ac:	71 05       	cpc	r23, r1
    34ae:	51 f1       	breq	.+84     	; 0x3504 <_ZN6String7replaceEcc+0x80>
  String theReturn = _buffer;
    34b0:	6e 01       	movw	r12, r28
    34b2:	08 94       	sec
    34b4:	c1 1c       	adc	r12, r1
    34b6:	d1 1c       	adc	r13, r1
    34b8:	c6 01       	movw	r24, r12
    34ba:	0e 94 5d 17 	call	0x2eba	; 0x2eba <_ZN6StringC1EPKc>
  char* temp = theReturn._buffer;
    34be:	89 81       	ldd	r24, Y+1	; 0x01
    34c0:	9a 81       	ldd	r25, Y+2	; 0x02
  while( (temp = strchr( temp, findChar )) != 0 )
    34c2:	01 c0       	rjmp	.+2      	; 0x34c6 <_ZN6String7replaceEcc+0x42>
    *temp = replaceChar;
    34c4:	e0 82       	st	Z, r14
String String::replace( char findChar, char replaceChar )
{
  if ( _buffer == NULL ) return *this;
  String theReturn = _buffer;
  char* temp = theReturn._buffer;
  while( (temp = strchr( temp, findChar )) != 0 )
    34c6:	6f 2d       	mov	r22, r15
    34c8:	70 e0       	ldi	r23, 0x00	; 0
    34ca:	0e 94 22 2c 	call	0x5844	; 0x5844 <strchr>
    34ce:	fc 01       	movw	r30, r24
    34d0:	00 97       	sbiw	r24, 0x00	; 0
    34d2:	c1 f7       	brne	.-16     	; 0x34c4 <_ZN6String7replaceEcc+0x40>
    *temp = replaceChar;

  return theReturn;
    34d4:	c8 01       	movw	r24, r16
    34d6:	b6 01       	movw	r22, r12
    34d8:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <_ZN6StringC1ERKS_>
    34dc:	89 81       	ldd	r24, Y+1	; 0x01
    34de:	9a 81       	ldd	r25, Y+2	; 0x02
    34e0:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <free>
}
    34e4:	c8 01       	movw	r24, r16
    34e6:	26 96       	adiw	r28, 0x06	; 6
    34e8:	0f b6       	in	r0, 0x3f	; 63
    34ea:	f8 94       	cli
    34ec:	de bf       	out	0x3e, r29	; 62
    34ee:	0f be       	out	0x3f, r0	; 63
    34f0:	cd bf       	out	0x3d, r28	; 61
    34f2:	cf 91       	pop	r28
    34f4:	df 91       	pop	r29
    34f6:	1f 91       	pop	r17
    34f8:	0f 91       	pop	r16
    34fa:	ff 90       	pop	r15
    34fc:	ef 90       	pop	r14
    34fe:	df 90       	pop	r13
    3500:	cf 90       	pop	r12
    3502:	08 95       	ret
  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}

String String::replace( char findChar, char replaceChar )
{
  if ( _buffer == NULL ) return *this;
    3504:	bf 01       	movw	r22, r30
    3506:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <_ZN6StringC1ERKS_>
    350a:	ec cf       	rjmp	.-40     	; 0x34e4 <_ZN6String7replaceEcc+0x60>

0000350c <_ZN6StringC2EPKc>:
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    350c:	0f 93       	push	r16
    350e:	1f 93       	push	r17
    3510:	cf 93       	push	r28
    3512:	df 93       	push	r29
    3514:	ec 01       	movw	r28, r24
    3516:	8b 01       	movw	r16, r22
{
  if ( value == NULL )
    3518:	61 15       	cp	r22, r1
    351a:	71 05       	cpc	r23, r1
    351c:	21 f1       	breq	.+72     	; 0x3566 <_ZN6StringC2EPKc+0x5a>
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    351e:	fb 01       	movw	r30, r22
    3520:	01 90       	ld	r0, Z+
    3522:	00 20       	and	r0, r0
    3524:	e9 f7       	brne	.-6      	; 0x3520 <_ZN6StringC2EPKc+0x14>
    3526:	31 97       	sbiw	r30, 0x01	; 1
    3528:	e6 1b       	sub	r30, r22
    352a:	f7 0b       	sbc	r31, r23
    352c:	cf 01       	movw	r24, r30
    352e:	01 96       	adiw	r24, 0x01	; 1
{
  if ( value == NULL )
    value = "";
  getBuffer( _length = strlen( value ) );
    3530:	fd 83       	std	Y+5, r31	; 0x05
    3532:	ec 83       	std	Y+4, r30	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3534:	fb 83       	std	Y+3, r31	; 0x03
    3536:	ea 83       	std	Y+2, r30	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3538:	0e 94 be 29 	call	0x537c	; 0x537c <malloc>
    353c:	99 83       	std	Y+1, r25	; 0x01
    353e:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3540:	00 97       	sbiw	r24, 0x00	; 0
    3542:	41 f0       	breq	.+16     	; 0x3554 <_ZN6StringC2EPKc+0x48>
  if ( _buffer != NULL )
    strcpy( _buffer, value );
    3544:	b8 01       	movw	r22, r16
    3546:	0e 94 36 2c 	call	0x586c	; 0x586c <strcpy>
}
    354a:	df 91       	pop	r29
    354c:	cf 91       	pop	r28
    354e:	1f 91       	pop	r17
    3550:	0f 91       	pop	r16
    3552:	08 95       	ret
    3554:	1b 82       	std	Y+3, r1	; 0x03
    3556:	1a 82       	std	Y+2, r1	; 0x02
    3558:	1d 82       	std	Y+5, r1	; 0x05
    355a:	1c 82       	std	Y+4, r1	; 0x04
    355c:	df 91       	pop	r29
    355e:	cf 91       	pop	r28
    3560:	1f 91       	pop	r17
    3562:	0f 91       	pop	r16
    3564:	08 95       	ret
#include "WString.h"


String::String( const char *value )
{
  if ( value == NULL )
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	e0 e0       	ldi	r30, 0x00	; 0
    356c:	f0 e0       	ldi	r31, 0x00	; 0
    356e:	03 e8       	ldi	r16, 0x83	; 131
    3570:	11 e0       	ldi	r17, 0x01	; 1
    3572:	de cf       	rjmp	.-68     	; 0x3530 <_ZN6StringC2EPKc+0x24>

00003574 <_ZN6StringC1Eli>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const long value, const int base )
    3574:	ef 92       	push	r14
    3576:	ff 92       	push	r15
    3578:	0f 93       	push	r16
    357a:	1f 93       	push	r17
    357c:	df 93       	push	r29
    357e:	cf 93       	push	r28
    3580:	cd b7       	in	r28, 0x3d	; 61
    3582:	de b7       	in	r29, 0x3e	; 62
    3584:	a1 97       	sbiw	r28, 0x21	; 33
    3586:	0f b6       	in	r0, 0x3f	; 63
    3588:	f8 94       	cli
    358a:	de bf       	out	0x3e, r29	; 62
    358c:	0f be       	out	0x3f, r0	; 63
    358e:	cd bf       	out	0x3d, r28	; 61
    3590:	7c 01       	movw	r14, r24
    3592:	cb 01       	movw	r24, r22
    3594:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ltoa(value, buf, base);
    3596:	8e 01       	movw	r16, r28
    3598:	0f 5f       	subi	r16, 0xFF	; 255
    359a:	1f 4f       	sbci	r17, 0xFF	; 255
    359c:	a8 01       	movw	r20, r16
    359e:	0e 94 a0 2c 	call	0x5940	; 0x5940 <ltoa>
  getBuffer( _length = strlen(buf) );
    35a2:	f8 01       	movw	r30, r16
    35a4:	01 90       	ld	r0, Z+
    35a6:	00 20       	and	r0, r0
    35a8:	e9 f7       	brne	.-6      	; 0x35a4 <_ZN6StringC1Eli+0x30>
    35aa:	cf 01       	movw	r24, r30
    35ac:	01 97       	sbiw	r24, 0x01	; 1
    35ae:	80 1b       	sub	r24, r16
    35b0:	91 0b       	sbc	r25, r17
    35b2:	f7 01       	movw	r30, r14
    35b4:	95 83       	std	Z+5, r25	; 0x05
    35b6:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    35b8:	93 83       	std	Z+3, r25	; 0x03
    35ba:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    35bc:	01 96       	adiw	r24, 0x01	; 1
    35be:	0e 94 be 29 	call	0x537c	; 0x537c <malloc>
    35c2:	f7 01       	movw	r30, r14
    35c4:	91 83       	std	Z+1, r25	; 0x01
    35c6:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    35c8:	00 97       	sbiw	r24, 0x00	; 0
    35ca:	81 f0       	breq	.+32     	; 0x35ec <_ZN6StringC1Eli+0x78>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    35cc:	b8 01       	movw	r22, r16
    35ce:	0e 94 36 2c 	call	0x586c	; 0x586c <strcpy>
}
    35d2:	a1 96       	adiw	r28, 0x21	; 33
    35d4:	0f b6       	in	r0, 0x3f	; 63
    35d6:	f8 94       	cli
    35d8:	de bf       	out	0x3e, r29	; 62
    35da:	0f be       	out	0x3f, r0	; 63
    35dc:	cd bf       	out	0x3d, r28	; 61
    35de:	cf 91       	pop	r28
    35e0:	df 91       	pop	r29
    35e2:	1f 91       	pop	r17
    35e4:	0f 91       	pop	r16
    35e6:	ff 90       	pop	r15
    35e8:	ef 90       	pop	r14
    35ea:	08 95       	ret
    35ec:	13 82       	std	Z+3, r1	; 0x03
    35ee:	12 82       	std	Z+2, r1	; 0x02
    35f0:	15 82       	std	Z+5, r1	; 0x05
    35f2:	14 82       	std	Z+4, r1	; 0x04
    35f4:	ee cf       	rjmp	.-36     	; 0x35d2 <_ZN6StringC1Eli+0x5e>

000035f6 <_ZN6StringC2Eli>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const long value, const int base )
    35f6:	ef 92       	push	r14
    35f8:	ff 92       	push	r15
    35fa:	0f 93       	push	r16
    35fc:	1f 93       	push	r17
    35fe:	df 93       	push	r29
    3600:	cf 93       	push	r28
    3602:	cd b7       	in	r28, 0x3d	; 61
    3604:	de b7       	in	r29, 0x3e	; 62
    3606:	a1 97       	sbiw	r28, 0x21	; 33
    3608:	0f b6       	in	r0, 0x3f	; 63
    360a:	f8 94       	cli
    360c:	de bf       	out	0x3e, r29	; 62
    360e:	0f be       	out	0x3f, r0	; 63
    3610:	cd bf       	out	0x3d, r28	; 61
    3612:	7c 01       	movw	r14, r24
    3614:	cb 01       	movw	r24, r22
    3616:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ltoa(value, buf, base);
    3618:	8e 01       	movw	r16, r28
    361a:	0f 5f       	subi	r16, 0xFF	; 255
    361c:	1f 4f       	sbci	r17, 0xFF	; 255
    361e:	a8 01       	movw	r20, r16
    3620:	0e 94 a0 2c 	call	0x5940	; 0x5940 <ltoa>
  getBuffer( _length = strlen(buf) );
    3624:	f8 01       	movw	r30, r16
    3626:	01 90       	ld	r0, Z+
    3628:	00 20       	and	r0, r0
    362a:	e9 f7       	brne	.-6      	; 0x3626 <_ZN6StringC2Eli+0x30>
    362c:	cf 01       	movw	r24, r30
    362e:	01 97       	sbiw	r24, 0x01	; 1
    3630:	80 1b       	sub	r24, r16
    3632:	91 0b       	sbc	r25, r17
    3634:	f7 01       	movw	r30, r14
    3636:	95 83       	std	Z+5, r25	; 0x05
    3638:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    363a:	93 83       	std	Z+3, r25	; 0x03
    363c:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    363e:	01 96       	adiw	r24, 0x01	; 1
    3640:	0e 94 be 29 	call	0x537c	; 0x537c <malloc>
    3644:	f7 01       	movw	r30, r14
    3646:	91 83       	std	Z+1, r25	; 0x01
    3648:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    364a:	00 97       	sbiw	r24, 0x00	; 0
    364c:	81 f0       	breq	.+32     	; 0x366e <_ZN6StringC2Eli+0x78>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    364e:	b8 01       	movw	r22, r16
    3650:	0e 94 36 2c 	call	0x586c	; 0x586c <strcpy>
}
    3654:	a1 96       	adiw	r28, 0x21	; 33
    3656:	0f b6       	in	r0, 0x3f	; 63
    3658:	f8 94       	cli
    365a:	de bf       	out	0x3e, r29	; 62
    365c:	0f be       	out	0x3f, r0	; 63
    365e:	cd bf       	out	0x3d, r28	; 61
    3660:	cf 91       	pop	r28
    3662:	df 91       	pop	r29
    3664:	1f 91       	pop	r17
    3666:	0f 91       	pop	r16
    3668:	ff 90       	pop	r15
    366a:	ef 90       	pop	r14
    366c:	08 95       	ret
    366e:	13 82       	std	Z+3, r1	; 0x03
    3670:	12 82       	std	Z+2, r1	; 0x02
    3672:	15 82       	std	Z+5, r1	; 0x05
    3674:	14 82       	std	Z+4, r1	; 0x04
    3676:	ee cf       	rjmp	.-36     	; 0x3654 <_ZN6StringC2Eli+0x5e>

00003678 <_ZN6StringC1Eii>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const int value, const int base )
    3678:	ef 92       	push	r14
    367a:	ff 92       	push	r15
    367c:	0f 93       	push	r16
    367e:	1f 93       	push	r17
    3680:	df 93       	push	r29
    3682:	cf 93       	push	r28
    3684:	cd b7       	in	r28, 0x3d	; 61
    3686:	de b7       	in	r29, 0x3e	; 62
    3688:	a1 97       	sbiw	r28, 0x21	; 33
    368a:	0f b6       	in	r0, 0x3f	; 63
    368c:	f8 94       	cli
    368e:	de bf       	out	0x3e, r29	; 62
    3690:	0f be       	out	0x3f, r0	; 63
    3692:	cd bf       	out	0x3d, r28	; 61
    3694:	7c 01       	movw	r14, r24
    3696:	cb 01       	movw	r24, r22
{
  char buf[33];   
  itoa((signed long)value, buf, base);
    3698:	8e 01       	movw	r16, r28
    369a:	0f 5f       	subi	r16, 0xFF	; 255
    369c:	1f 4f       	sbci	r17, 0xFF	; 255
    369e:	b8 01       	movw	r22, r16
    36a0:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <itoa>
  getBuffer( _length = strlen(buf) );
    36a4:	f8 01       	movw	r30, r16
    36a6:	01 90       	ld	r0, Z+
    36a8:	00 20       	and	r0, r0
    36aa:	e9 f7       	brne	.-6      	; 0x36a6 <_ZN6StringC1Eii+0x2e>
    36ac:	cf 01       	movw	r24, r30
    36ae:	01 97       	sbiw	r24, 0x01	; 1
    36b0:	80 1b       	sub	r24, r16
    36b2:	91 0b       	sbc	r25, r17
    36b4:	f7 01       	movw	r30, r14
    36b6:	95 83       	std	Z+5, r25	; 0x05
    36b8:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    36ba:	93 83       	std	Z+3, r25	; 0x03
    36bc:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    36be:	01 96       	adiw	r24, 0x01	; 1
    36c0:	0e 94 be 29 	call	0x537c	; 0x537c <malloc>
    36c4:	f7 01       	movw	r30, r14
    36c6:	91 83       	std	Z+1, r25	; 0x01
    36c8:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    36ca:	00 97       	sbiw	r24, 0x00	; 0
    36cc:	81 f0       	breq	.+32     	; 0x36ee <_ZN6StringC1Eii+0x76>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    36ce:	b8 01       	movw	r22, r16
    36d0:	0e 94 36 2c 	call	0x586c	; 0x586c <strcpy>
}
    36d4:	a1 96       	adiw	r28, 0x21	; 33
    36d6:	0f b6       	in	r0, 0x3f	; 63
    36d8:	f8 94       	cli
    36da:	de bf       	out	0x3e, r29	; 62
    36dc:	0f be       	out	0x3f, r0	; 63
    36de:	cd bf       	out	0x3d, r28	; 61
    36e0:	cf 91       	pop	r28
    36e2:	df 91       	pop	r29
    36e4:	1f 91       	pop	r17
    36e6:	0f 91       	pop	r16
    36e8:	ff 90       	pop	r15
    36ea:	ef 90       	pop	r14
    36ec:	08 95       	ret
    36ee:	13 82       	std	Z+3, r1	; 0x03
    36f0:	12 82       	std	Z+2, r1	; 0x02
    36f2:	15 82       	std	Z+5, r1	; 0x05
    36f4:	14 82       	std	Z+4, r1	; 0x04
    36f6:	ee cf       	rjmp	.-36     	; 0x36d4 <_ZN6StringC1Eii+0x5c>

000036f8 <_ZN6StringC2Eii>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const int value, const int base )
    36f8:	ef 92       	push	r14
    36fa:	ff 92       	push	r15
    36fc:	0f 93       	push	r16
    36fe:	1f 93       	push	r17
    3700:	df 93       	push	r29
    3702:	cf 93       	push	r28
    3704:	cd b7       	in	r28, 0x3d	; 61
    3706:	de b7       	in	r29, 0x3e	; 62
    3708:	a1 97       	sbiw	r28, 0x21	; 33
    370a:	0f b6       	in	r0, 0x3f	; 63
    370c:	f8 94       	cli
    370e:	de bf       	out	0x3e, r29	; 62
    3710:	0f be       	out	0x3f, r0	; 63
    3712:	cd bf       	out	0x3d, r28	; 61
    3714:	7c 01       	movw	r14, r24
    3716:	cb 01       	movw	r24, r22
{
  char buf[33];   
  itoa((signed long)value, buf, base);
    3718:	8e 01       	movw	r16, r28
    371a:	0f 5f       	subi	r16, 0xFF	; 255
    371c:	1f 4f       	sbci	r17, 0xFF	; 255
    371e:	b8 01       	movw	r22, r16
    3720:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <itoa>
  getBuffer( _length = strlen(buf) );
    3724:	f8 01       	movw	r30, r16
    3726:	01 90       	ld	r0, Z+
    3728:	00 20       	and	r0, r0
    372a:	e9 f7       	brne	.-6      	; 0x3726 <_ZN6StringC2Eii+0x2e>
    372c:	cf 01       	movw	r24, r30
    372e:	01 97       	sbiw	r24, 0x01	; 1
    3730:	80 1b       	sub	r24, r16
    3732:	91 0b       	sbc	r25, r17
    3734:	f7 01       	movw	r30, r14
    3736:	95 83       	std	Z+5, r25	; 0x05
    3738:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    373a:	93 83       	std	Z+3, r25	; 0x03
    373c:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    373e:	01 96       	adiw	r24, 0x01	; 1
    3740:	0e 94 be 29 	call	0x537c	; 0x537c <malloc>
    3744:	f7 01       	movw	r30, r14
    3746:	91 83       	std	Z+1, r25	; 0x01
    3748:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    374a:	00 97       	sbiw	r24, 0x00	; 0
    374c:	81 f0       	breq	.+32     	; 0x376e <_ZN6StringC2Eii+0x76>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    374e:	b8 01       	movw	r22, r16
    3750:	0e 94 36 2c 	call	0x586c	; 0x586c <strcpy>
}
    3754:	a1 96       	adiw	r28, 0x21	; 33
    3756:	0f b6       	in	r0, 0x3f	; 63
    3758:	f8 94       	cli
    375a:	de bf       	out	0x3e, r29	; 62
    375c:	0f be       	out	0x3f, r0	; 63
    375e:	cd bf       	out	0x3d, r28	; 61
    3760:	cf 91       	pop	r28
    3762:	df 91       	pop	r29
    3764:	1f 91       	pop	r17
    3766:	0f 91       	pop	r16
    3768:	ff 90       	pop	r15
    376a:	ef 90       	pop	r14
    376c:	08 95       	ret
    376e:	13 82       	std	Z+3, r1	; 0x03
    3770:	12 82       	std	Z+2, r1	; 0x02
    3772:	15 82       	std	Z+5, r1	; 0x05
    3774:	14 82       	std	Z+4, r1	; 0x04
    3776:	ee cf       	rjmp	.-36     	; 0x3754 <_ZN6StringC2Eii+0x5c>

00003778 <__cxa_pure_virtual>:
#include "cplusplushelper.h"
#include <stdlib.h>

void __cxa_pure_virtual(void)
{

    3778:	08 95       	ret

0000377a <__cxa_guard_acquire>:
}

int __cxa_guard_acquire(__guard *g)
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	fc 01       	movw	r30, r24
    3780:	80 81       	ld	r24, Z
    3782:	88 23       	and	r24, r24
    3784:	11 f4       	brne	.+4      	; 0x378a <__cxa_guard_acquire+0x10>
    3786:	21 e0       	ldi	r18, 0x01	; 1
    3788:	30 e0       	ldi	r19, 0x00	; 0
{
	return !*(char *)(g);
    378a:	c9 01       	movw	r24, r18
    378c:	08 95       	ret

0000378e <__cxa_guard_release>:
}
 
void __cxa_guard_release (__guard *g)
{
    378e:	21 e0       	ldi	r18, 0x01	; 1
    3790:	fc 01       	movw	r30, r24
    3792:	20 83       	st	Z, r18
	*(char *)g = 1;
    3794:	08 95       	ret

00003796 <__cxa_guard_abort>:
}
 
void __cxa_guard_abort (__guard *)
{

    3796:	08 95       	ret

00003798 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    3798:	10 92 61 05 	sts	0x0561, r1

  #if defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega328P__)
    // activate internal pull-ups for twi
    // as per note from atmega8 manual pg167
    sbi(PORTC, 4);
    379c:	44 9a       	sbi	0x08, 4	; 8
    sbi(PORTC, 5);
    379e:	45 9a       	sbi	0x08, 5	; 8
    sbi(PORTD, 0);
    sbi(PORTD, 1);
  #endif

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    37a0:	e9 eb       	ldi	r30, 0xB9	; 185
    37a2:	f0 e0       	ldi	r31, 0x00	; 0
    37a4:	80 81       	ld	r24, Z
    37a6:	8e 7f       	andi	r24, 0xFE	; 254
    37a8:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    37aa:	80 81       	ld	r24, Z
    37ac:	8d 7f       	andi	r24, 0xFD	; 253
    37ae:	80 83       	st	Z, r24
  TWBR = ((CPU_FREQ / TWI_FREQ) - 16) / 2;
    37b0:	88 e4       	ldi	r24, 0x48	; 72
    37b2:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    37b6:	85 e4       	ldi	r24, 0x45	; 69
    37b8:	80 93 bc 00 	sts	0x00BC, r24
}
    37bc:	08 95       	ret

000037be <twi_setAddress>:
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
    37be:	88 0f       	add	r24, r24
    37c0:	80 93 ba 00 	sts	0x00BA, r24
}
    37c4:	08 95       	ret

000037c6 <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    37c6:	41 32       	cpi	r20, 0x21	; 33
    37c8:	a0 f5       	brcc	.+104    	; 0x3832 <twi_readFrom+0x6c>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    37ca:	90 91 61 05 	lds	r25, 0x0561
    37ce:	99 23       	and	r25, r25
    37d0:	e1 f7       	brne	.-8      	; 0x37ca <twi_readFrom+0x4>
    continue;
  }
  twi_state = TWI_MRX;
    37d2:	91 e0       	ldi	r25, 0x01	; 1
    37d4:	90 93 61 05 	sts	0x0561, r25
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    37d8:	9f ef       	ldi	r25, 0xFF	; 255
    37da:	90 93 60 05 	sts	0x0560, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    37de:	10 92 3e 05 	sts	0x053E, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    37e2:	94 2f       	mov	r25, r20
    37e4:	91 50       	subi	r25, 0x01	; 1
    37e6:	90 93 3f 05 	sts	0x053F, r25
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
  twi_slarw |= address << 1;
    37ea:	88 0f       	add	r24, r24
    37ec:	81 60       	ori	r24, 0x01	; 1
    37ee:	80 93 3d 05 	sts	0x053D, r24

  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    37f2:	85 ee       	ldi	r24, 0xE5	; 229
    37f4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    37f8:	80 91 61 05 	lds	r24, 0x0561
    37fc:	81 30       	cpi	r24, 0x01	; 1
    37fe:	e1 f3       	breq	.-8      	; 0x37f8 <twi_readFrom+0x32>
    continue;
  }

  if (twi_masterBufferIndex < length)
    3800:	80 91 3e 05 	lds	r24, 0x053E
    3804:	84 17       	cp	r24, r20
    3806:	90 f0       	brcs	.+36     	; 0x382c <twi_readFrom+0x66>
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    3808:	44 23       	and	r20, r20
    380a:	71 f0       	breq	.+28     	; 0x3828 <twi_readFrom+0x62>
    380c:	20 e0       	ldi	r18, 0x00	; 0
    380e:	30 e0       	ldi	r19, 0x00	; 0
    data[i] = twi_masterBuffer[i];
    3810:	fb 01       	movw	r30, r22
    3812:	e2 0f       	add	r30, r18
    3814:	f3 1f       	adc	r31, r19
    3816:	d9 01       	movw	r26, r18
    3818:	a0 5c       	subi	r26, 0xC0	; 192
    381a:	ba 4f       	sbci	r27, 0xFA	; 250
    381c:	9c 91       	ld	r25, X
    381e:	90 83       	st	Z, r25
    3820:	2f 5f       	subi	r18, 0xFF	; 255
    3822:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    3824:	24 17       	cp	r18, r20
    3826:	a0 f3       	brcs	.-24     	; 0x3810 <twi_readFrom+0x4a>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    3828:	84 2f       	mov	r24, r20
    382a:	08 95       	ret
  while(TWI_MRX == twi_state){
    continue;
  }

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;
    382c:	40 91 3e 05 	lds	r20, 0x053E
    3830:	eb cf       	rjmp	.-42     	; 0x3808 <twi_readFrom+0x42>
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3832:	40 e0       	ldi	r20, 0x00	; 0
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    3834:	84 2f       	mov	r24, r20
    3836:	08 95       	ret

00003838 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait)
{
    3838:	cf 93       	push	r28
    383a:	df 93       	push	r29
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    383c:	41 32       	cpi	r20, 0x21	; 33
    383e:	08 f0       	brcs	.+2      	; 0x3842 <twi_writeTo+0xa>
    3840:	43 c0       	rjmp	.+134    	; 0x38c8 <twi_writeTo+0x90>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    3842:	90 91 61 05 	lds	r25, 0x0561
    3846:	99 23       	and	r25, r25
    3848:	e1 f7       	brne	.-8      	; 0x3842 <twi_writeTo+0xa>
    continue;
  }
  twi_state = TWI_MTX;
    384a:	92 e0       	ldi	r25, 0x02	; 2
    384c:	90 93 61 05 	sts	0x0561, r25
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    3850:	9f ef       	ldi	r25, 0xFF	; 255
    3852:	90 93 60 05 	sts	0x0560, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    3856:	10 92 3e 05 	sts	0x053E, r1
  twi_masterBufferLength = length;
    385a:	40 93 3f 05 	sts	0x053F, r20
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    385e:	44 23       	and	r20, r20
    3860:	69 f0       	breq	.+26     	; 0x387c <twi_writeTo+0x44>
    3862:	e0 e0       	ldi	r30, 0x00	; 0
    3864:	f0 e0       	ldi	r31, 0x00	; 0
    twi_masterBuffer[i] = data[i];
    3866:	df 01       	movw	r26, r30
    3868:	a0 5c       	subi	r26, 0xC0	; 192
    386a:	ba 4f       	sbci	r27, 0xFA	; 250
    386c:	eb 01       	movw	r28, r22
    386e:	ce 0f       	add	r28, r30
    3870:	df 1f       	adc	r29, r31
    3872:	98 81       	ld	r25, Y
    3874:	9c 93       	st	X, r25
    3876:	31 96       	adiw	r30, 0x01	; 1
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    3878:	e4 17       	cp	r30, r20
    387a:	a8 f3       	brcs	.-22     	; 0x3866 <twi_writeTo+0x2e>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
  twi_slarw |= address << 1;
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	88 0f       	add	r24, r24
    3880:	99 1f       	adc	r25, r25
    3882:	80 93 3d 05 	sts	0x053D, r24
  
  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    3886:	85 ee       	ldi	r24, 0xE5	; 229
    3888:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    388c:	22 23       	and	r18, r18
    388e:	81 f4       	brne	.+32     	; 0x38b0 <twi_writeTo+0x78>
    continue;
  }
  
  if (twi_error == 0xFF)
    3890:	80 91 60 05 	lds	r24, 0x0560
    3894:	8f 3f       	cpi	r24, 0xFF	; 255
    3896:	a1 f0       	breq	.+40     	; 0x38c0 <twi_writeTo+0x88>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    3898:	80 91 60 05 	lds	r24, 0x0560
    389c:	80 32       	cpi	r24, 0x20	; 32
    389e:	c1 f0       	breq	.+48     	; 0x38d0 <twi_writeTo+0x98>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    38a0:	80 91 60 05 	lds	r24, 0x0560
    38a4:	80 33       	cpi	r24, 0x30	; 48
    38a6:	b1 f0       	breq	.+44     	; 0x38d4 <twi_writeTo+0x9c>
    38a8:	84 e0       	ldi	r24, 0x04	; 4
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    38aa:	df 91       	pop	r29
    38ac:	cf 91       	pop	r28
    38ae:	08 95       	ret
  
  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    38b0:	80 91 61 05 	lds	r24, 0x0561
    38b4:	82 30       	cpi	r24, 0x02	; 2
    38b6:	e1 f3       	breq	.-8      	; 0x38b0 <twi_writeTo+0x78>
    continue;
  }
  
  if (twi_error == 0xFF)
    38b8:	80 91 60 05 	lds	r24, 0x0560
    38bc:	8f 3f       	cpi	r24, 0xFF	; 255
    38be:	61 f7       	brne	.-40     	; 0x3898 <twi_writeTo+0x60>
    38c0:	80 e0       	ldi	r24, 0x00	; 0
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    38c2:	df 91       	pop	r29
    38c4:	cf 91       	pop	r28
    38c6:	08 95       	ret
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    38c8:	81 e0       	ldi	r24, 0x01	; 1
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    38ca:	df 91       	pop	r29
    38cc:	cf 91       	pop	r28
    38ce:	08 95       	ret
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    38d0:	82 e0       	ldi	r24, 0x02	; 2
    38d2:	eb cf       	rjmp	.-42     	; 0x38aa <twi_writeTo+0x72>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    38d4:	83 e0       	ldi	r24, 0x03	; 3
    38d6:	e9 cf       	rjmp	.-46     	; 0x38aa <twi_writeTo+0x72>

000038d8 <twi_transmit>:
uint8_t twi_transmit(uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    38d8:	61 32       	cpi	r22, 0x21	; 33
    38da:	d0 f4       	brcc	.+52     	; 0x3910 <twi_transmit+0x38>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    38dc:	20 91 61 05 	lds	r18, 0x0561
    38e0:	24 30       	cpi	r18, 0x04	; 4
    38e2:	11 f0       	breq	.+4      	; 0x38e8 <twi_transmit+0x10>
    38e4:	82 e0       	ldi	r24, 0x02	; 2
    38e6:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    38e8:	60 93 86 05 	sts	0x0586, r22
  for(i = 0; i < length; ++i){
    38ec:	66 23       	and	r22, r22
    38ee:	71 f0       	breq	.+28     	; 0x390c <twi_transmit+0x34>
    38f0:	20 e0       	ldi	r18, 0x00	; 0
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    twi_txBuffer[i] = data[i];
    38f4:	f9 01       	movw	r30, r18
    38f6:	e7 57       	subi	r30, 0x77	; 119
    38f8:	fa 4f       	sbci	r31, 0xFA	; 250
    38fa:	dc 01       	movw	r26, r24
    38fc:	a2 0f       	add	r26, r18
    38fe:	b3 1f       	adc	r27, r19
    3900:	4c 91       	ld	r20, X
    3902:	40 83       	st	Z, r20
    3904:	2f 5f       	subi	r18, 0xFF	; 255
    3906:	3f 4f       	sbci	r19, 0xFF	; 255
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    3908:	26 17       	cp	r18, r22
    390a:	a0 f3       	brcs	.-24     	; 0x38f4 <twi_transmit+0x1c>
    390c:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    390e:	08 95       	ret
uint8_t twi_transmit(uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3910:	81 e0       	ldi	r24, 0x01	; 1
    3912:	08 95       	ret

00003914 <twi_attachSlaveRxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    3914:	90 93 84 05 	sts	0x0584, r25
    3918:	80 93 83 05 	sts	0x0583, r24
}
    391c:	08 95       	ret

0000391e <twi_attachSlaveTxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    391e:	90 93 88 05 	sts	0x0588, r25
    3922:	80 93 87 05 	sts	0x0587, r24
}
    3926:	08 95       	ret

00003928 <twi_reply>:
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    3928:	88 23       	and	r24, r24
    392a:	21 f4       	brne	.+8      	; 0x3934 <twi_reply+0xc>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    392c:	85 e8       	ldi	r24, 0x85	; 133
    392e:	80 93 bc 00 	sts	0x00BC, r24
    3932:	08 95       	ret
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3934:	85 ec       	ldi	r24, 0xC5	; 197
    3936:	80 93 bc 00 	sts	0x00BC, r24
    393a:	08 95       	ret

0000393c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    393c:	85 ed       	ldi	r24, 0xD5	; 213
    393e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3942:	80 91 bc 00 	lds	r24, 0x00BC
    3946:	84 fd       	sbrc	r24, 4
    3948:	fc cf       	rjmp	.-8      	; 0x3942 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    394a:	10 92 61 05 	sts	0x0561, r1
}
    394e:	08 95       	ret

00003950 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3950:	85 ec       	ldi	r24, 0xC5	; 197
    3952:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    3956:	10 92 61 05 	sts	0x0561, r1
}
    395a:	08 95       	ret

0000395c <__vector_24>:

SIGNAL(TWI_vect)
{
    395c:	1f 92       	push	r1
    395e:	0f 92       	push	r0
    3960:	0f b6       	in	r0, 0x3f	; 63
    3962:	0f 92       	push	r0
    3964:	11 24       	eor	r1, r1
    3966:	2f 93       	push	r18
    3968:	3f 93       	push	r19
    396a:	4f 93       	push	r20
    396c:	5f 93       	push	r21
    396e:	6f 93       	push	r22
    3970:	7f 93       	push	r23
    3972:	8f 93       	push	r24
    3974:	9f 93       	push	r25
    3976:	af 93       	push	r26
    3978:	bf 93       	push	r27
    397a:	ef 93       	push	r30
    397c:	ff 93       	push	r31
  switch(TW_STATUS){
    397e:	80 91 b9 00 	lds	r24, 0x00B9
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	a0 e0       	ldi	r26, 0x00	; 0
    3986:	b0 e0       	ldi	r27, 0x00	; 0
    3988:	88 7f       	andi	r24, 0xF8	; 248
    398a:	90 70       	andi	r25, 0x00	; 0
    398c:	a0 70       	andi	r26, 0x00	; 0
    398e:	b0 70       	andi	r27, 0x00	; 0
    3990:	89 3c       	cpi	r24, 0xC9	; 201
    3992:	91 05       	cpc	r25, r1
    3994:	98 f5       	brcc	.+102    	; 0x39fc <__vector_24+0xa0>
    3996:	8c 5c       	subi	r24, 0xCC	; 204
    3998:	9f 4f       	sbci	r25, 0xFF	; 255
    399a:	fc 01       	movw	r30, r24
    399c:	ee 0f       	add	r30, r30
    399e:	ff 1f       	adc	r31, r31
    39a0:	05 90       	lpm	r0, Z+
    39a2:	f4 91       	lpm	r31, Z+
    39a4:	e0 2d       	mov	r30, r0
    39a6:	09 94       	ijmp
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    39a8:	84 e0       	ldi	r24, 0x04	; 4
    39aa:	80 93 61 05 	sts	0x0561, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    39ae:	10 92 85 05 	sts	0x0585, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    39b2:	10 92 86 05 	sts	0x0586, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    39b6:	e0 91 87 05 	lds	r30, 0x0587
    39ba:	f0 91 88 05 	lds	r31, 0x0588
    39be:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    39c0:	80 91 86 05 	lds	r24, 0x0586
    39c4:	88 23       	and	r24, r24
    39c6:	29 f4       	brne	.+10     	; 0x39d2 <__vector_24+0x76>
        twi_txBufferLength = 1;
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	80 93 86 05 	sts	0x0586, r24
        twi_txBuffer[0] = 0x00;
    39ce:	10 92 89 05 	sts	0x0589, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    39d2:	80 91 85 05 	lds	r24, 0x0585
    39d6:	e8 2f       	mov	r30, r24
    39d8:	f0 e0       	ldi	r31, 0x00	; 0
    39da:	e7 57       	subi	r30, 0x77	; 119
    39dc:	fa 4f       	sbci	r31, 0xFA	; 250
    39de:	90 81       	ld	r25, Z
    39e0:	90 93 bb 00 	sts	0x00BB, r25
    39e4:	8f 5f       	subi	r24, 0xFF	; 255
    39e6:	80 93 85 05 	sts	0x0585, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    39ea:	90 91 85 05 	lds	r25, 0x0585
    39ee:	80 91 86 05 	lds	r24, 0x0586
    39f2:	98 17       	cp	r25, r24
    39f4:	c8 f4       	brcc	.+50     	; 0x3a28 <__vector_24+0xcc>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    39f6:	85 ec       	ldi	r24, 0xC5	; 197
    39f8:	80 93 bc 00 	sts	0x00BC, r24
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    39fc:	ff 91       	pop	r31
    39fe:	ef 91       	pop	r30
    3a00:	bf 91       	pop	r27
    3a02:	af 91       	pop	r26
    3a04:	9f 91       	pop	r25
    3a06:	8f 91       	pop	r24
    3a08:	7f 91       	pop	r23
    3a0a:	6f 91       	pop	r22
    3a0c:	5f 91       	pop	r21
    3a0e:	4f 91       	pop	r20
    3a10:	3f 91       	pop	r19
    3a12:	2f 91       	pop	r18
    3a14:	0f 90       	pop	r0
    3a16:	0f be       	out	0x3f, r0	; 63
    3a18:	0f 90       	pop	r0
    3a1a:	1f 90       	pop	r1
    3a1c:	18 95       	reti
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3a1e:	80 91 62 05 	lds	r24, 0x0562
    3a22:	80 32       	cpi	r24, 0x20	; 32
    3a24:	08 f4       	brcc	.+2      	; 0x3a28 <__vector_24+0xcc>
    3a26:	9c c0       	rjmp	.+312    	; 0x3b60 <__vector_24+0x204>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3a28:	85 e8       	ldi	r24, 0x85	; 133
    3a2a:	80 93 bc 00 	sts	0x00BC, r24
    3a2e:	e6 cf       	rjmp	.-52     	; 0x39fc <__vector_24+0xa0>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3a30:	80 91 3e 05 	lds	r24, 0x053E
    3a34:	90 91 bb 00 	lds	r25, 0x00BB
    3a38:	e8 2f       	mov	r30, r24
    3a3a:	f0 e0       	ldi	r31, 0x00	; 0
    3a3c:	e0 5c       	subi	r30, 0xC0	; 192
    3a3e:	fa 4f       	sbci	r31, 0xFA	; 250
    3a40:	90 83       	st	Z, r25
    3a42:	8f 5f       	subi	r24, 0xFF	; 255
    3a44:	80 93 3e 05 	sts	0x053E, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3a48:	90 91 3e 05 	lds	r25, 0x053E
    3a4c:	80 91 3f 05 	lds	r24, 0x053F
    3a50:	98 17       	cp	r25, r24
    3a52:	50 f7       	brcc	.-44     	; 0x3a28 <__vector_24+0xcc>
    3a54:	d0 cf       	rjmp	.-96     	; 0x39f6 <__vector_24+0x9a>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3a56:	80 91 3e 05 	lds	r24, 0x053E
    3a5a:	90 91 bb 00 	lds	r25, 0x00BB
    3a5e:	e8 2f       	mov	r30, r24
    3a60:	f0 e0       	ldi	r31, 0x00	; 0
    3a62:	e0 5c       	subi	r30, 0xC0	; 192
    3a64:	fa 4f       	sbci	r31, 0xFA	; 250
    3a66:	90 83       	st	Z, r25
    3a68:	8f 5f       	subi	r24, 0xFF	; 255
    3a6a:	80 93 3e 05 	sts	0x053E, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3a6e:	85 ed       	ldi	r24, 0xD5	; 213
    3a70:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3a74:	80 91 bc 00 	lds	r24, 0x00BC
    3a78:	84 fd       	sbrc	r24, 4
    3a7a:	fc cf       	rjmp	.-8      	; 0x3a74 <__vector_24+0x118>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3a7c:	10 92 61 05 	sts	0x0561, r1
    3a80:	bd cf       	rjmp	.-134    	; 0x39fc <__vector_24+0xa0>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3a82:	85 ec       	ldi	r24, 0xC5	; 197
    3a84:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3a88:	10 92 61 05 	sts	0x0561, r1
      break;
    3a8c:	b7 cf       	rjmp	.-146    	; 0x39fc <__vector_24+0xa0>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3a8e:	83 e0       	ldi	r24, 0x03	; 3
    3a90:	80 93 61 05 	sts	0x0561, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3a94:	10 92 62 05 	sts	0x0562, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3a98:	85 ec       	ldi	r24, 0xC5	; 197
    3a9a:	80 93 bc 00 	sts	0x00BC, r24
    3a9e:	ae cf       	rjmp	.-164    	; 0x39fc <__vector_24+0xa0>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3aa0:	10 92 60 05 	sts	0x0560, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3aa4:	85 ed       	ldi	r24, 0xD5	; 213
    3aa6:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3aaa:	80 91 bc 00 	lds	r24, 0x00BC
    3aae:	84 fd       	sbrc	r24, 4
    3ab0:	fc cf       	rjmp	.-8      	; 0x3aaa <__vector_24+0x14e>
    3ab2:	e4 cf       	rjmp	.-56     	; 0x3a7c <__vector_24+0x120>
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3ab4:	80 91 3d 05 	lds	r24, 0x053D
    3ab8:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3abc:	85 ec       	ldi	r24, 0xC5	; 197
    3abe:	80 93 bc 00 	sts	0x00BC, r24
    3ac2:	9c cf       	rjmp	.-200    	; 0x39fc <__vector_24+0xa0>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3ac4:	90 91 3e 05 	lds	r25, 0x053E
    3ac8:	80 91 3f 05 	lds	r24, 0x053F
    3acc:	98 17       	cp	r25, r24
    3ace:	08 f4       	brcc	.+2      	; 0x3ad2 <__vector_24+0x176>
    3ad0:	5e c0       	rjmp	.+188    	; 0x3b8e <__vector_24+0x232>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3ad2:	85 ed       	ldi	r24, 0xD5	; 213
    3ad4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3ad8:	80 91 bc 00 	lds	r24, 0x00BC
    3adc:	84 fd       	sbrc	r24, 4
    3ade:	fc cf       	rjmp	.-8      	; 0x3ad8 <__vector_24+0x17c>
    3ae0:	cd cf       	rjmp	.-102    	; 0x3a7c <__vector_24+0x120>
      }else{
        twi_stop();
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    3ae2:	80 e2       	ldi	r24, 0x20	; 32
    3ae4:	80 93 60 05 	sts	0x0560, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3ae8:	85 ed       	ldi	r24, 0xD5	; 213
    3aea:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3aee:	80 91 bc 00 	lds	r24, 0x00BC
    3af2:	84 fd       	sbrc	r24, 4
    3af4:	fc cf       	rjmp	.-8      	; 0x3aee <__vector_24+0x192>
    3af6:	c2 cf       	rjmp	.-124    	; 0x3a7c <__vector_24+0x120>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3af8:	80 91 62 05 	lds	r24, 0x0562
    3afc:	80 32       	cpi	r24, 0x20	; 32
    3afe:	08 f4       	brcc	.+2      	; 0x3b02 <__vector_24+0x1a6>
    3b00:	3f c0       	rjmp	.+126    	; 0x3b80 <__vector_24+0x224>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3b02:	85 ed       	ldi	r24, 0xD5	; 213
    3b04:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3b08:	80 91 bc 00 	lds	r24, 0x00BC
    3b0c:	84 fd       	sbrc	r24, 4
    3b0e:	fc cf       	rjmp	.-8      	; 0x3b08 <__vector_24+0x1ac>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3b10:	10 92 61 05 	sts	0x0561, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3b14:	60 91 62 05 	lds	r22, 0x0562
    3b18:	e0 91 83 05 	lds	r30, 0x0583
    3b1c:	f0 91 84 05 	lds	r31, 0x0584
    3b20:	83 e6       	ldi	r24, 0x63	; 99
    3b22:	95 e0       	ldi	r25, 0x05	; 5
    3b24:	70 e0       	ldi	r23, 0x00	; 0
    3b26:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3b28:	10 92 62 05 	sts	0x0562, r1
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3b2c:	85 ec       	ldi	r24, 0xC5	; 197
    3b2e:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    3b32:	10 92 61 05 	sts	0x0561, r1
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      break;
    3b36:	62 cf       	rjmp	.-316    	; 0x39fc <__vector_24+0xa0>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3b38:	80 e3       	ldi	r24, 0x30	; 48
    3b3a:	80 93 60 05 	sts	0x0560, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3b3e:	85 ed       	ldi	r24, 0xD5	; 213
    3b40:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3b44:	80 91 bc 00 	lds	r24, 0x00BC
    3b48:	84 fd       	sbrc	r24, 4
    3b4a:	fc cf       	rjmp	.-8      	; 0x3b44 <__vector_24+0x1e8>
    3b4c:	97 cf       	rjmp	.-210    	; 0x3a7c <__vector_24+0x120>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3b4e:	88 e3       	ldi	r24, 0x38	; 56
    3b50:	80 93 60 05 	sts	0x0560, r24
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3b54:	85 ec       	ldi	r24, 0xC5	; 197
    3b56:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    3b5a:	10 92 61 05 	sts	0x0561, r1
    3b5e:	4e cf       	rjmp	.-356    	; 0x39fc <__vector_24+0xa0>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3b60:	80 91 62 05 	lds	r24, 0x0562
    3b64:	90 91 bb 00 	lds	r25, 0x00BB
    3b68:	e8 2f       	mov	r30, r24
    3b6a:	f0 e0       	ldi	r31, 0x00	; 0
    3b6c:	ed 59       	subi	r30, 0x9D	; 157
    3b6e:	fa 4f       	sbci	r31, 0xFA	; 250
    3b70:	90 83       	st	Z, r25
    3b72:	8f 5f       	subi	r24, 0xFF	; 255
    3b74:	80 93 62 05 	sts	0x0562, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3b78:	85 ec       	ldi	r24, 0xC5	; 197
    3b7a:	80 93 bc 00 	sts	0x00BC, r24
    3b7e:	3e cf       	rjmp	.-388    	; 0x39fc <__vector_24+0xa0>
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3b80:	e0 91 62 05 	lds	r30, 0x0562
    3b84:	f0 e0       	ldi	r31, 0x00	; 0
    3b86:	ed 59       	subi	r30, 0x9D	; 157
    3b88:	fa 4f       	sbci	r31, 0xFA	; 250
    3b8a:	10 82       	st	Z, r1
    3b8c:	ba cf       	rjmp	.-140    	; 0x3b02 <__vector_24+0x1a6>
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3b8e:	80 91 3e 05 	lds	r24, 0x053E
    3b92:	e8 2f       	mov	r30, r24
    3b94:	f0 e0       	ldi	r31, 0x00	; 0
    3b96:	e0 5c       	subi	r30, 0xC0	; 192
    3b98:	fa 4f       	sbci	r31, 0xFA	; 250
    3b9a:	90 81       	ld	r25, Z
    3b9c:	90 93 bb 00 	sts	0x00BB, r25
    3ba0:	8f 5f       	subi	r24, 0xFF	; 255
    3ba2:	80 93 3e 05 	sts	0x053E, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3ba6:	85 ec       	ldi	r24, 0xC5	; 197
    3ba8:	80 93 bc 00 	sts	0x00BC, r24
    3bac:	27 cf       	rjmp	.-434    	; 0x39fc <__vector_24+0xa0>

00003bae <__fixunssfsi>:
    3bae:	ef 92       	push	r14
    3bb0:	ff 92       	push	r15
    3bb2:	0f 93       	push	r16
    3bb4:	1f 93       	push	r17
    3bb6:	7b 01       	movw	r14, r22
    3bb8:	8c 01       	movw	r16, r24
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	30 e0       	ldi	r19, 0x00	; 0
    3bbe:	40 e0       	ldi	r20, 0x00	; 0
    3bc0:	5f e4       	ldi	r21, 0x4F	; 79
    3bc2:	0e 94 57 21 	call	0x42ae	; 0x42ae <__gesf2>
    3bc6:	88 23       	and	r24, r24
    3bc8:	8c f0       	brlt	.+34     	; 0x3bec <__fixunssfsi+0x3e>
    3bca:	c8 01       	movw	r24, r16
    3bcc:	b7 01       	movw	r22, r14
    3bce:	20 e0       	ldi	r18, 0x00	; 0
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	40 e0       	ldi	r20, 0x00	; 0
    3bd4:	5f e4       	ldi	r21, 0x4F	; 79
    3bd6:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <__subsf3>
    3bda:	0e 94 14 22 	call	0x4428	; 0x4428 <__fixsfsi>
    3bde:	9b 01       	movw	r18, r22
    3be0:	ac 01       	movw	r20, r24
    3be2:	20 50       	subi	r18, 0x00	; 0
    3be4:	30 40       	sbci	r19, 0x00	; 0
    3be6:	40 40       	sbci	r20, 0x00	; 0
    3be8:	50 48       	sbci	r21, 0x80	; 128
    3bea:	06 c0       	rjmp	.+12     	; 0x3bf8 <__fixunssfsi+0x4a>
    3bec:	c8 01       	movw	r24, r16
    3bee:	b7 01       	movw	r22, r14
    3bf0:	0e 94 14 22 	call	0x4428	; 0x4428 <__fixsfsi>
    3bf4:	9b 01       	movw	r18, r22
    3bf6:	ac 01       	movw	r20, r24
    3bf8:	b9 01       	movw	r22, r18
    3bfa:	ca 01       	movw	r24, r20
    3bfc:	1f 91       	pop	r17
    3bfe:	0f 91       	pop	r16
    3c00:	ff 90       	pop	r15
    3c02:	ef 90       	pop	r14
    3c04:	08 95       	ret

00003c06 <_fpadd_parts>:
    3c06:	a0 e0       	ldi	r26, 0x00	; 0
    3c08:	b0 e0       	ldi	r27, 0x00	; 0
    3c0a:	e9 e0       	ldi	r30, 0x09	; 9
    3c0c:	fe e1       	ldi	r31, 0x1E	; 30
    3c0e:	0c 94 5e 29 	jmp	0x52bc	; 0x52bc <__prologue_saves__+0x4>
    3c12:	fc 01       	movw	r30, r24
    3c14:	2b 01       	movw	r4, r22
    3c16:	ea 01       	movw	r28, r20
    3c18:	80 81       	ld	r24, Z
    3c1a:	82 30       	cpi	r24, 0x02	; 2
    3c1c:	08 f4       	brcc	.+2      	; 0x3c20 <_fpadd_parts+0x1a>
    3c1e:	3d c1       	rjmp	.+634    	; 0x3e9a <_fpadd_parts+0x294>
    3c20:	db 01       	movw	r26, r22
    3c22:	9c 91       	ld	r25, X
    3c24:	92 30       	cpi	r25, 0x02	; 2
    3c26:	08 f4       	brcc	.+2      	; 0x3c2a <_fpadd_parts+0x24>
    3c28:	37 c1       	rjmp	.+622    	; 0x3e98 <_fpadd_parts+0x292>
    3c2a:	84 30       	cpi	r24, 0x04	; 4
    3c2c:	69 f4       	brne	.+26     	; 0x3c48 <_fpadd_parts+0x42>
    3c2e:	94 30       	cpi	r25, 0x04	; 4
    3c30:	09 f0       	breq	.+2      	; 0x3c34 <_fpadd_parts+0x2e>
    3c32:	33 c1       	rjmp	.+614    	; 0x3e9a <_fpadd_parts+0x294>
    3c34:	91 81       	ldd	r25, Z+1	; 0x01
    3c36:	11 96       	adiw	r26, 0x01	; 1
    3c38:	8c 91       	ld	r24, X
    3c3a:	11 97       	sbiw	r26, 0x01	; 1
    3c3c:	98 17       	cp	r25, r24
    3c3e:	09 f4       	brne	.+2      	; 0x3c42 <_fpadd_parts+0x3c>
    3c40:	2c c1       	rjmp	.+600    	; 0x3e9a <_fpadd_parts+0x294>
    3c42:	e4 e8       	ldi	r30, 0x84	; 132
    3c44:	f1 e0       	ldi	r31, 0x01	; 1
    3c46:	29 c1       	rjmp	.+594    	; 0x3e9a <_fpadd_parts+0x294>
    3c48:	94 30       	cpi	r25, 0x04	; 4
    3c4a:	09 f4       	brne	.+2      	; 0x3c4e <_fpadd_parts+0x48>
    3c4c:	25 c1       	rjmp	.+586    	; 0x3e98 <_fpadd_parts+0x292>
    3c4e:	92 30       	cpi	r25, 0x02	; 2
    3c50:	a9 f4       	brne	.+42     	; 0x3c7c <_fpadd_parts+0x76>
    3c52:	82 30       	cpi	r24, 0x02	; 2
    3c54:	09 f0       	breq	.+2      	; 0x3c58 <_fpadd_parts+0x52>
    3c56:	21 c1       	rjmp	.+578    	; 0x3e9a <_fpadd_parts+0x294>
    3c58:	9f 01       	movw	r18, r30
    3c5a:	88 e0       	ldi	r24, 0x08	; 8
    3c5c:	d9 01       	movw	r26, r18
    3c5e:	0d 90       	ld	r0, X+
    3c60:	9d 01       	movw	r18, r26
    3c62:	da 01       	movw	r26, r20
    3c64:	0d 92       	st	X+, r0
    3c66:	ad 01       	movw	r20, r26
    3c68:	81 50       	subi	r24, 0x01	; 1
    3c6a:	c1 f7       	brne	.-16     	; 0x3c5c <_fpadd_parts+0x56>
    3c6c:	d2 01       	movw	r26, r4
    3c6e:	11 96       	adiw	r26, 0x01	; 1
    3c70:	8c 91       	ld	r24, X
    3c72:	11 97       	sbiw	r26, 0x01	; 1
    3c74:	91 81       	ldd	r25, Z+1	; 0x01
    3c76:	89 23       	and	r24, r25
    3c78:	89 83       	std	Y+1, r24	; 0x01
    3c7a:	0c c1       	rjmp	.+536    	; 0x3e94 <_fpadd_parts+0x28e>
    3c7c:	82 30       	cpi	r24, 0x02	; 2
    3c7e:	09 f4       	brne	.+2      	; 0x3c82 <_fpadd_parts+0x7c>
    3c80:	0b c1       	rjmp	.+534    	; 0x3e98 <_fpadd_parts+0x292>
    3c82:	82 81       	ldd	r24, Z+2	; 0x02
    3c84:	93 81       	ldd	r25, Z+3	; 0x03
    3c86:	db 01       	movw	r26, r22
    3c88:	12 96       	adiw	r26, 0x02	; 2
    3c8a:	4d 91       	ld	r20, X+
    3c8c:	5c 91       	ld	r21, X
    3c8e:	13 97       	sbiw	r26, 0x03	; 3
    3c90:	e4 80       	ldd	r14, Z+4	; 0x04
    3c92:	f5 80       	ldd	r15, Z+5	; 0x05
    3c94:	06 81       	ldd	r16, Z+6	; 0x06
    3c96:	17 81       	ldd	r17, Z+7	; 0x07
    3c98:	14 96       	adiw	r26, 0x04	; 4
    3c9a:	ad 90       	ld	r10, X+
    3c9c:	bd 90       	ld	r11, X+
    3c9e:	cd 90       	ld	r12, X+
    3ca0:	dc 90       	ld	r13, X
    3ca2:	17 97       	sbiw	r26, 0x07	; 7
    3ca4:	9c 01       	movw	r18, r24
    3ca6:	24 1b       	sub	r18, r20
    3ca8:	35 0b       	sbc	r19, r21
    3caa:	b9 01       	movw	r22, r18
    3cac:	37 ff       	sbrs	r19, 7
    3cae:	04 c0       	rjmp	.+8      	; 0x3cb8 <_fpadd_parts+0xb2>
    3cb0:	66 27       	eor	r22, r22
    3cb2:	77 27       	eor	r23, r23
    3cb4:	62 1b       	sub	r22, r18
    3cb6:	73 0b       	sbc	r23, r19
    3cb8:	60 32       	cpi	r22, 0x20	; 32
    3cba:	71 05       	cpc	r23, r1
    3cbc:	0c f0       	brlt	.+2      	; 0x3cc0 <_fpadd_parts+0xba>
    3cbe:	62 c0       	rjmp	.+196    	; 0x3d84 <_fpadd_parts+0x17e>
    3cc0:	12 16       	cp	r1, r18
    3cc2:	13 06       	cpc	r1, r19
    3cc4:	6c f5       	brge	.+90     	; 0x3d20 <_fpadd_parts+0x11a>
    3cc6:	35 01       	movw	r6, r10
    3cc8:	46 01       	movw	r8, r12
    3cca:	06 2e       	mov	r0, r22
    3ccc:	04 c0       	rjmp	.+8      	; 0x3cd6 <_fpadd_parts+0xd0>
    3cce:	96 94       	lsr	r9
    3cd0:	87 94       	ror	r8
    3cd2:	77 94       	ror	r7
    3cd4:	67 94       	ror	r6
    3cd6:	0a 94       	dec	r0
    3cd8:	d2 f7       	brpl	.-12     	; 0x3cce <_fpadd_parts+0xc8>
    3cda:	21 e0       	ldi	r18, 0x01	; 1
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	40 e0       	ldi	r20, 0x00	; 0
    3ce0:	50 e0       	ldi	r21, 0x00	; 0
    3ce2:	04 c0       	rjmp	.+8      	; 0x3cec <_fpadd_parts+0xe6>
    3ce4:	22 0f       	add	r18, r18
    3ce6:	33 1f       	adc	r19, r19
    3ce8:	44 1f       	adc	r20, r20
    3cea:	55 1f       	adc	r21, r21
    3cec:	6a 95       	dec	r22
    3cee:	d2 f7       	brpl	.-12     	; 0x3ce4 <_fpadd_parts+0xde>
    3cf0:	21 50       	subi	r18, 0x01	; 1
    3cf2:	30 40       	sbci	r19, 0x00	; 0
    3cf4:	40 40       	sbci	r20, 0x00	; 0
    3cf6:	50 40       	sbci	r21, 0x00	; 0
    3cf8:	2a 21       	and	r18, r10
    3cfa:	3b 21       	and	r19, r11
    3cfc:	4c 21       	and	r20, r12
    3cfe:	5d 21       	and	r21, r13
    3d00:	21 15       	cp	r18, r1
    3d02:	31 05       	cpc	r19, r1
    3d04:	41 05       	cpc	r20, r1
    3d06:	51 05       	cpc	r21, r1
    3d08:	21 f0       	breq	.+8      	; 0x3d12 <_fpadd_parts+0x10c>
    3d0a:	21 e0       	ldi	r18, 0x01	; 1
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	40 e0       	ldi	r20, 0x00	; 0
    3d10:	50 e0       	ldi	r21, 0x00	; 0
    3d12:	59 01       	movw	r10, r18
    3d14:	6a 01       	movw	r12, r20
    3d16:	a6 28       	or	r10, r6
    3d18:	b7 28       	or	r11, r7
    3d1a:	c8 28       	or	r12, r8
    3d1c:	d9 28       	or	r13, r9
    3d1e:	3d c0       	rjmp	.+122    	; 0x3d9a <_fpadd_parts+0x194>
    3d20:	21 15       	cp	r18, r1
    3d22:	31 05       	cpc	r19, r1
    3d24:	d1 f1       	breq	.+116    	; 0x3d9a <_fpadd_parts+0x194>
    3d26:	86 0f       	add	r24, r22
    3d28:	97 1f       	adc	r25, r23
    3d2a:	37 01       	movw	r6, r14
    3d2c:	48 01       	movw	r8, r16
    3d2e:	06 2e       	mov	r0, r22
    3d30:	04 c0       	rjmp	.+8      	; 0x3d3a <_fpadd_parts+0x134>
    3d32:	96 94       	lsr	r9
    3d34:	87 94       	ror	r8
    3d36:	77 94       	ror	r7
    3d38:	67 94       	ror	r6
    3d3a:	0a 94       	dec	r0
    3d3c:	d2 f7       	brpl	.-12     	; 0x3d32 <_fpadd_parts+0x12c>
    3d3e:	21 e0       	ldi	r18, 0x01	; 1
    3d40:	30 e0       	ldi	r19, 0x00	; 0
    3d42:	40 e0       	ldi	r20, 0x00	; 0
    3d44:	50 e0       	ldi	r21, 0x00	; 0
    3d46:	04 c0       	rjmp	.+8      	; 0x3d50 <_fpadd_parts+0x14a>
    3d48:	22 0f       	add	r18, r18
    3d4a:	33 1f       	adc	r19, r19
    3d4c:	44 1f       	adc	r20, r20
    3d4e:	55 1f       	adc	r21, r21
    3d50:	6a 95       	dec	r22
    3d52:	d2 f7       	brpl	.-12     	; 0x3d48 <_fpadd_parts+0x142>
    3d54:	21 50       	subi	r18, 0x01	; 1
    3d56:	30 40       	sbci	r19, 0x00	; 0
    3d58:	40 40       	sbci	r20, 0x00	; 0
    3d5a:	50 40       	sbci	r21, 0x00	; 0
    3d5c:	2e 21       	and	r18, r14
    3d5e:	3f 21       	and	r19, r15
    3d60:	40 23       	and	r20, r16
    3d62:	51 23       	and	r21, r17
    3d64:	21 15       	cp	r18, r1
    3d66:	31 05       	cpc	r19, r1
    3d68:	41 05       	cpc	r20, r1
    3d6a:	51 05       	cpc	r21, r1
    3d6c:	21 f0       	breq	.+8      	; 0x3d76 <_fpadd_parts+0x170>
    3d6e:	21 e0       	ldi	r18, 0x01	; 1
    3d70:	30 e0       	ldi	r19, 0x00	; 0
    3d72:	40 e0       	ldi	r20, 0x00	; 0
    3d74:	50 e0       	ldi	r21, 0x00	; 0
    3d76:	79 01       	movw	r14, r18
    3d78:	8a 01       	movw	r16, r20
    3d7a:	e6 28       	or	r14, r6
    3d7c:	f7 28       	or	r15, r7
    3d7e:	08 29       	or	r16, r8
    3d80:	19 29       	or	r17, r9
    3d82:	0b c0       	rjmp	.+22     	; 0x3d9a <_fpadd_parts+0x194>
    3d84:	48 17       	cp	r20, r24
    3d86:	59 07       	cpc	r21, r25
    3d88:	2c f0       	brlt	.+10     	; 0x3d94 <_fpadd_parts+0x18e>
    3d8a:	ca 01       	movw	r24, r20
    3d8c:	ee 24       	eor	r14, r14
    3d8e:	ff 24       	eor	r15, r15
    3d90:	87 01       	movw	r16, r14
    3d92:	03 c0       	rjmp	.+6      	; 0x3d9a <_fpadd_parts+0x194>
    3d94:	aa 24       	eor	r10, r10
    3d96:	bb 24       	eor	r11, r11
    3d98:	65 01       	movw	r12, r10
    3d9a:	21 81       	ldd	r18, Z+1	; 0x01
    3d9c:	f2 01       	movw	r30, r4
    3d9e:	31 81       	ldd	r19, Z+1	; 0x01
    3da0:	23 17       	cp	r18, r19
    3da2:	09 f4       	brne	.+2      	; 0x3da6 <_fpadd_parts+0x1a0>
    3da4:	4a c0       	rjmp	.+148    	; 0x3e3a <_fpadd_parts+0x234>
    3da6:	22 23       	and	r18, r18
    3da8:	49 f0       	breq	.+18     	; 0x3dbc <_fpadd_parts+0x1b6>
    3daa:	a6 01       	movw	r20, r12
    3dac:	95 01       	movw	r18, r10
    3dae:	2e 19       	sub	r18, r14
    3db0:	3f 09       	sbc	r19, r15
    3db2:	40 0b       	sbc	r20, r16
    3db4:	51 0b       	sbc	r21, r17
    3db6:	79 01       	movw	r14, r18
    3db8:	8a 01       	movw	r16, r20
    3dba:	04 c0       	rjmp	.+8      	; 0x3dc4 <_fpadd_parts+0x1be>
    3dbc:	ea 18       	sub	r14, r10
    3dbe:	fb 08       	sbc	r15, r11
    3dc0:	0c 09       	sbc	r16, r12
    3dc2:	1d 09       	sbc	r17, r13
    3dc4:	17 fd       	sbrc	r17, 7
    3dc6:	0c c0       	rjmp	.+24     	; 0x3de0 <_fpadd_parts+0x1da>
    3dc8:	19 82       	std	Y+1, r1	; 0x01
    3dca:	9b 83       	std	Y+3, r25	; 0x03
    3dcc:	8a 83       	std	Y+2, r24	; 0x02
    3dce:	ec 82       	std	Y+4, r14	; 0x04
    3dd0:	fd 82       	std	Y+5, r15	; 0x05
    3dd2:	0e 83       	std	Y+6, r16	; 0x06
    3dd4:	1f 83       	std	Y+7, r17	; 0x07
    3dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    3dd8:	9d 81       	ldd	r25, Y+5	; 0x05
    3dda:	ae 81       	ldd	r26, Y+6	; 0x06
    3ddc:	bf 81       	ldd	r27, Y+7	; 0x07
    3dde:	1a c0       	rjmp	.+52     	; 0x3e14 <_fpadd_parts+0x20e>
    3de0:	21 e0       	ldi	r18, 0x01	; 1
    3de2:	29 83       	std	Y+1, r18	; 0x01
    3de4:	9b 83       	std	Y+3, r25	; 0x03
    3de6:	8a 83       	std	Y+2, r24	; 0x02
    3de8:	88 27       	eor	r24, r24
    3dea:	99 27       	eor	r25, r25
    3dec:	dc 01       	movw	r26, r24
    3dee:	8e 19       	sub	r24, r14
    3df0:	9f 09       	sbc	r25, r15
    3df2:	a0 0b       	sbc	r26, r16
    3df4:	b1 0b       	sbc	r27, r17
    3df6:	8c 83       	std	Y+4, r24	; 0x04
    3df8:	9d 83       	std	Y+5, r25	; 0x05
    3dfa:	ae 83       	std	Y+6, r26	; 0x06
    3dfc:	bf 83       	std	Y+7, r27	; 0x07
    3dfe:	eb cf       	rjmp	.-42     	; 0x3dd6 <_fpadd_parts+0x1d0>
    3e00:	88 0f       	add	r24, r24
    3e02:	99 1f       	adc	r25, r25
    3e04:	aa 1f       	adc	r26, r26
    3e06:	bb 1f       	adc	r27, r27
    3e08:	2a 81       	ldd	r18, Y+2	; 0x02
    3e0a:	3b 81       	ldd	r19, Y+3	; 0x03
    3e0c:	21 50       	subi	r18, 0x01	; 1
    3e0e:	30 40       	sbci	r19, 0x00	; 0
    3e10:	3b 83       	std	Y+3, r19	; 0x03
    3e12:	2a 83       	std	Y+2, r18	; 0x02
    3e14:	9c 01       	movw	r18, r24
    3e16:	ad 01       	movw	r20, r26
    3e18:	21 50       	subi	r18, 0x01	; 1
    3e1a:	30 40       	sbci	r19, 0x00	; 0
    3e1c:	40 40       	sbci	r20, 0x00	; 0
    3e1e:	50 40       	sbci	r21, 0x00	; 0
    3e20:	2f 3f       	cpi	r18, 0xFF	; 255
    3e22:	6f ef       	ldi	r22, 0xFF	; 255
    3e24:	36 07       	cpc	r19, r22
    3e26:	6f ef       	ldi	r22, 0xFF	; 255
    3e28:	46 07       	cpc	r20, r22
    3e2a:	6f e3       	ldi	r22, 0x3F	; 63
    3e2c:	56 07       	cpc	r21, r22
    3e2e:	40 f3       	brcs	.-48     	; 0x3e00 <_fpadd_parts+0x1fa>
    3e30:	8c 83       	std	Y+4, r24	; 0x04
    3e32:	9d 83       	std	Y+5, r25	; 0x05
    3e34:	ae 83       	std	Y+6, r26	; 0x06
    3e36:	bf 83       	std	Y+7, r27	; 0x07
    3e38:	0b c0       	rjmp	.+22     	; 0x3e50 <_fpadd_parts+0x24a>
    3e3a:	29 83       	std	Y+1, r18	; 0x01
    3e3c:	9b 83       	std	Y+3, r25	; 0x03
    3e3e:	8a 83       	std	Y+2, r24	; 0x02
    3e40:	ea 0c       	add	r14, r10
    3e42:	fb 1c       	adc	r15, r11
    3e44:	0c 1d       	adc	r16, r12
    3e46:	1d 1d       	adc	r17, r13
    3e48:	ec 82       	std	Y+4, r14	; 0x04
    3e4a:	fd 82       	std	Y+5, r15	; 0x05
    3e4c:	0e 83       	std	Y+6, r16	; 0x06
    3e4e:	1f 83       	std	Y+7, r17	; 0x07
    3e50:	83 e0       	ldi	r24, 0x03	; 3
    3e52:	88 83       	st	Y, r24
    3e54:	2c 81       	ldd	r18, Y+4	; 0x04
    3e56:	3d 81       	ldd	r19, Y+5	; 0x05
    3e58:	4e 81       	ldd	r20, Y+6	; 0x06
    3e5a:	5f 81       	ldd	r21, Y+7	; 0x07
    3e5c:	57 ff       	sbrs	r21, 7
    3e5e:	1a c0       	rjmp	.+52     	; 0x3e94 <_fpadd_parts+0x28e>
    3e60:	c9 01       	movw	r24, r18
    3e62:	aa 27       	eor	r26, r26
    3e64:	97 fd       	sbrc	r25, 7
    3e66:	a0 95       	com	r26
    3e68:	ba 2f       	mov	r27, r26
    3e6a:	81 70       	andi	r24, 0x01	; 1
    3e6c:	90 70       	andi	r25, 0x00	; 0
    3e6e:	a0 70       	andi	r26, 0x00	; 0
    3e70:	b0 70       	andi	r27, 0x00	; 0
    3e72:	56 95       	lsr	r21
    3e74:	47 95       	ror	r20
    3e76:	37 95       	ror	r19
    3e78:	27 95       	ror	r18
    3e7a:	82 2b       	or	r24, r18
    3e7c:	93 2b       	or	r25, r19
    3e7e:	a4 2b       	or	r26, r20
    3e80:	b5 2b       	or	r27, r21
    3e82:	8c 83       	std	Y+4, r24	; 0x04
    3e84:	9d 83       	std	Y+5, r25	; 0x05
    3e86:	ae 83       	std	Y+6, r26	; 0x06
    3e88:	bf 83       	std	Y+7, r27	; 0x07
    3e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e8e:	01 96       	adiw	r24, 0x01	; 1
    3e90:	9b 83       	std	Y+3, r25	; 0x03
    3e92:	8a 83       	std	Y+2, r24	; 0x02
    3e94:	fe 01       	movw	r30, r28
    3e96:	01 c0       	rjmp	.+2      	; 0x3e9a <_fpadd_parts+0x294>
    3e98:	f2 01       	movw	r30, r4
    3e9a:	cf 01       	movw	r24, r30
    3e9c:	cd b7       	in	r28, 0x3d	; 61
    3e9e:	de b7       	in	r29, 0x3e	; 62
    3ea0:	e0 e1       	ldi	r30, 0x10	; 16
    3ea2:	0c 94 7a 29 	jmp	0x52f4	; 0x52f4 <__epilogue_restores__+0x4>

00003ea6 <__subsf3>:
    3ea6:	a0 e2       	ldi	r26, 0x20	; 32
    3ea8:	b0 e0       	ldi	r27, 0x00	; 0
    3eaa:	e9 e5       	ldi	r30, 0x59	; 89
    3eac:	ff e1       	ldi	r31, 0x1F	; 31
    3eae:	0c 94 68 29 	jmp	0x52d0	; 0x52d0 <__prologue_saves__+0x18>
    3eb2:	69 83       	std	Y+1, r22	; 0x01
    3eb4:	7a 83       	std	Y+2, r23	; 0x02
    3eb6:	8b 83       	std	Y+3, r24	; 0x03
    3eb8:	9c 83       	std	Y+4, r25	; 0x04
    3eba:	2d 83       	std	Y+5, r18	; 0x05
    3ebc:	3e 83       	std	Y+6, r19	; 0x06
    3ebe:	4f 83       	std	Y+7, r20	; 0x07
    3ec0:	58 87       	std	Y+8, r21	; 0x08
    3ec2:	e9 e0       	ldi	r30, 0x09	; 9
    3ec4:	ee 2e       	mov	r14, r30
    3ec6:	f1 2c       	mov	r15, r1
    3ec8:	ec 0e       	add	r14, r28
    3eca:	fd 1e       	adc	r15, r29
    3ecc:	ce 01       	movw	r24, r28
    3ece:	01 96       	adiw	r24, 0x01	; 1
    3ed0:	b7 01       	movw	r22, r14
    3ed2:	0e 94 06 24 	call	0x480c	; 0x480c <__unpack_f>
    3ed6:	8e 01       	movw	r16, r28
    3ed8:	0f 5e       	subi	r16, 0xEF	; 239
    3eda:	1f 4f       	sbci	r17, 0xFF	; 255
    3edc:	ce 01       	movw	r24, r28
    3ede:	05 96       	adiw	r24, 0x05	; 5
    3ee0:	b8 01       	movw	r22, r16
    3ee2:	0e 94 06 24 	call	0x480c	; 0x480c <__unpack_f>
    3ee6:	8a 89       	ldd	r24, Y+18	; 0x12
    3ee8:	91 e0       	ldi	r25, 0x01	; 1
    3eea:	89 27       	eor	r24, r25
    3eec:	8a 8b       	std	Y+18, r24	; 0x12
    3eee:	c7 01       	movw	r24, r14
    3ef0:	b8 01       	movw	r22, r16
    3ef2:	ae 01       	movw	r20, r28
    3ef4:	47 5e       	subi	r20, 0xE7	; 231
    3ef6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ef8:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <_fpadd_parts>
    3efc:	0e 94 37 23 	call	0x466e	; 0x466e <__pack_f>
    3f00:	a0 96       	adiw	r28, 0x20	; 32
    3f02:	e6 e0       	ldi	r30, 0x06	; 6
    3f04:	0c 94 84 29 	jmp	0x5308	; 0x5308 <__epilogue_restores__+0x18>

00003f08 <__addsf3>:
    3f08:	a0 e2       	ldi	r26, 0x20	; 32
    3f0a:	b0 e0       	ldi	r27, 0x00	; 0
    3f0c:	ea e8       	ldi	r30, 0x8A	; 138
    3f0e:	ff e1       	ldi	r31, 0x1F	; 31
    3f10:	0c 94 68 29 	jmp	0x52d0	; 0x52d0 <__prologue_saves__+0x18>
    3f14:	69 83       	std	Y+1, r22	; 0x01
    3f16:	7a 83       	std	Y+2, r23	; 0x02
    3f18:	8b 83       	std	Y+3, r24	; 0x03
    3f1a:	9c 83       	std	Y+4, r25	; 0x04
    3f1c:	2d 83       	std	Y+5, r18	; 0x05
    3f1e:	3e 83       	std	Y+6, r19	; 0x06
    3f20:	4f 83       	std	Y+7, r20	; 0x07
    3f22:	58 87       	std	Y+8, r21	; 0x08
    3f24:	f9 e0       	ldi	r31, 0x09	; 9
    3f26:	ef 2e       	mov	r14, r31
    3f28:	f1 2c       	mov	r15, r1
    3f2a:	ec 0e       	add	r14, r28
    3f2c:	fd 1e       	adc	r15, r29
    3f2e:	ce 01       	movw	r24, r28
    3f30:	01 96       	adiw	r24, 0x01	; 1
    3f32:	b7 01       	movw	r22, r14
    3f34:	0e 94 06 24 	call	0x480c	; 0x480c <__unpack_f>
    3f38:	8e 01       	movw	r16, r28
    3f3a:	0f 5e       	subi	r16, 0xEF	; 239
    3f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f3e:	ce 01       	movw	r24, r28
    3f40:	05 96       	adiw	r24, 0x05	; 5
    3f42:	b8 01       	movw	r22, r16
    3f44:	0e 94 06 24 	call	0x480c	; 0x480c <__unpack_f>
    3f48:	c7 01       	movw	r24, r14
    3f4a:	b8 01       	movw	r22, r16
    3f4c:	ae 01       	movw	r20, r28
    3f4e:	47 5e       	subi	r20, 0xE7	; 231
    3f50:	5f 4f       	sbci	r21, 0xFF	; 255
    3f52:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <_fpadd_parts>
    3f56:	0e 94 37 23 	call	0x466e	; 0x466e <__pack_f>
    3f5a:	a0 96       	adiw	r28, 0x20	; 32
    3f5c:	e6 e0       	ldi	r30, 0x06	; 6
    3f5e:	0c 94 84 29 	jmp	0x5308	; 0x5308 <__epilogue_restores__+0x18>

00003f62 <__mulsf3>:
    3f62:	a0 e2       	ldi	r26, 0x20	; 32
    3f64:	b0 e0       	ldi	r27, 0x00	; 0
    3f66:	e7 eb       	ldi	r30, 0xB7	; 183
    3f68:	ff e1       	ldi	r31, 0x1F	; 31
    3f6a:	0c 94 5c 29 	jmp	0x52b8	; 0x52b8 <__prologue_saves__>
    3f6e:	69 83       	std	Y+1, r22	; 0x01
    3f70:	7a 83       	std	Y+2, r23	; 0x02
    3f72:	8b 83       	std	Y+3, r24	; 0x03
    3f74:	9c 83       	std	Y+4, r25	; 0x04
    3f76:	2d 83       	std	Y+5, r18	; 0x05
    3f78:	3e 83       	std	Y+6, r19	; 0x06
    3f7a:	4f 83       	std	Y+7, r20	; 0x07
    3f7c:	58 87       	std	Y+8, r21	; 0x08
    3f7e:	ce 01       	movw	r24, r28
    3f80:	01 96       	adiw	r24, 0x01	; 1
    3f82:	be 01       	movw	r22, r28
    3f84:	67 5f       	subi	r22, 0xF7	; 247
    3f86:	7f 4f       	sbci	r23, 0xFF	; 255
    3f88:	0e 94 06 24 	call	0x480c	; 0x480c <__unpack_f>
    3f8c:	ce 01       	movw	r24, r28
    3f8e:	05 96       	adiw	r24, 0x05	; 5
    3f90:	be 01       	movw	r22, r28
    3f92:	6f 5e       	subi	r22, 0xEF	; 239
    3f94:	7f 4f       	sbci	r23, 0xFF	; 255
    3f96:	0e 94 06 24 	call	0x480c	; 0x480c <__unpack_f>
    3f9a:	99 85       	ldd	r25, Y+9	; 0x09
    3f9c:	92 30       	cpi	r25, 0x02	; 2
    3f9e:	88 f0       	brcs	.+34     	; 0x3fc2 <__mulsf3+0x60>
    3fa0:	89 89       	ldd	r24, Y+17	; 0x11
    3fa2:	82 30       	cpi	r24, 0x02	; 2
    3fa4:	c8 f0       	brcs	.+50     	; 0x3fd8 <__mulsf3+0x76>
    3fa6:	94 30       	cpi	r25, 0x04	; 4
    3fa8:	19 f4       	brne	.+6      	; 0x3fb0 <__mulsf3+0x4e>
    3faa:	82 30       	cpi	r24, 0x02	; 2
    3fac:	51 f4       	brne	.+20     	; 0x3fc2 <__mulsf3+0x60>
    3fae:	04 c0       	rjmp	.+8      	; 0x3fb8 <__mulsf3+0x56>
    3fb0:	84 30       	cpi	r24, 0x04	; 4
    3fb2:	29 f4       	brne	.+10     	; 0x3fbe <__mulsf3+0x5c>
    3fb4:	92 30       	cpi	r25, 0x02	; 2
    3fb6:	81 f4       	brne	.+32     	; 0x3fd8 <__mulsf3+0x76>
    3fb8:	84 e8       	ldi	r24, 0x84	; 132
    3fba:	91 e0       	ldi	r25, 0x01	; 1
    3fbc:	c4 c0       	rjmp	.+392    	; 0x4146 <__mulsf3+0x1e4>
    3fbe:	92 30       	cpi	r25, 0x02	; 2
    3fc0:	49 f4       	brne	.+18     	; 0x3fd4 <__mulsf3+0x72>
    3fc2:	80 e0       	ldi	r24, 0x00	; 0
    3fc4:	2a 85       	ldd	r18, Y+10	; 0x0a
    3fc6:	9a 89       	ldd	r25, Y+18	; 0x12
    3fc8:	29 13       	cpse	r18, r25
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	8a 87       	std	Y+10, r24	; 0x0a
    3fce:	ce 01       	movw	r24, r28
    3fd0:	09 96       	adiw	r24, 0x09	; 9
    3fd2:	b9 c0       	rjmp	.+370    	; 0x4146 <__mulsf3+0x1e4>
    3fd4:	82 30       	cpi	r24, 0x02	; 2
    3fd6:	49 f4       	brne	.+18     	; 0x3fea <__mulsf3+0x88>
    3fd8:	80 e0       	ldi	r24, 0x00	; 0
    3fda:	2a 85       	ldd	r18, Y+10	; 0x0a
    3fdc:	9a 89       	ldd	r25, Y+18	; 0x12
    3fde:	29 13       	cpse	r18, r25
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	8a 8b       	std	Y+18, r24	; 0x12
    3fe4:	ce 01       	movw	r24, r28
    3fe6:	41 96       	adiw	r24, 0x11	; 17
    3fe8:	ae c0       	rjmp	.+348    	; 0x4146 <__mulsf3+0x1e4>
    3fea:	6d 84       	ldd	r6, Y+13	; 0x0d
    3fec:	7e 84       	ldd	r7, Y+14	; 0x0e
    3fee:	8f 84       	ldd	r8, Y+15	; 0x0f
    3ff0:	98 88       	ldd	r9, Y+16	; 0x10
    3ff2:	ad 88       	ldd	r10, Y+21	; 0x15
    3ff4:	be 88       	ldd	r11, Y+22	; 0x16
    3ff6:	cf 88       	ldd	r12, Y+23	; 0x17
    3ff8:	d8 8c       	ldd	r13, Y+24	; 0x18
    3ffa:	60 e0       	ldi	r22, 0x00	; 0
    3ffc:	70 e0       	ldi	r23, 0x00	; 0
    3ffe:	80 e0       	ldi	r24, 0x00	; 0
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	dc 01       	movw	r26, r24
    4004:	ee 24       	eor	r14, r14
    4006:	ff 24       	eor	r15, r15
    4008:	87 01       	movw	r16, r14
    400a:	20 e0       	ldi	r18, 0x00	; 0
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	a9 01       	movw	r20, r18
    4010:	f3 01       	movw	r30, r6
    4012:	e1 70       	andi	r30, 0x01	; 1
    4014:	f0 70       	andi	r31, 0x00	; 0
    4016:	30 97       	sbiw	r30, 0x00	; 0
    4018:	c9 f0       	breq	.+50     	; 0x404c <__mulsf3+0xea>
    401a:	2a 0d       	add	r18, r10
    401c:	3b 1d       	adc	r19, r11
    401e:	4c 1d       	adc	r20, r12
    4020:	5d 1d       	adc	r21, r13
    4022:	8e 0d       	add	r24, r14
    4024:	9f 1d       	adc	r25, r15
    4026:	a0 1f       	adc	r26, r16
    4028:	b1 1f       	adc	r27, r17
    402a:	22 24       	eor	r2, r2
    402c:	33 24       	eor	r3, r3
    402e:	21 01       	movw	r4, r2
    4030:	2a 15       	cp	r18, r10
    4032:	3b 05       	cpc	r19, r11
    4034:	4c 05       	cpc	r20, r12
    4036:	5d 05       	cpc	r21, r13
    4038:	28 f4       	brcc	.+10     	; 0x4044 <__mulsf3+0xe2>
    403a:	e1 e0       	ldi	r30, 0x01	; 1
    403c:	2e 2e       	mov	r2, r30
    403e:	31 2c       	mov	r3, r1
    4040:	41 2c       	mov	r4, r1
    4042:	51 2c       	mov	r5, r1
    4044:	82 0d       	add	r24, r2
    4046:	93 1d       	adc	r25, r3
    4048:	a4 1d       	adc	r26, r4
    404a:	b5 1d       	adc	r27, r5
    404c:	ee 0c       	add	r14, r14
    404e:	ff 1c       	adc	r15, r15
    4050:	00 1f       	adc	r16, r16
    4052:	11 1f       	adc	r17, r17
    4054:	d7 fe       	sbrs	r13, 7
    4056:	09 c0       	rjmp	.+18     	; 0x406a <__mulsf3+0x108>
    4058:	e1 e0       	ldi	r30, 0x01	; 1
    405a:	2e 2e       	mov	r2, r30
    405c:	31 2c       	mov	r3, r1
    405e:	41 2c       	mov	r4, r1
    4060:	51 2c       	mov	r5, r1
    4062:	e2 28       	or	r14, r2
    4064:	f3 28       	or	r15, r3
    4066:	04 29       	or	r16, r4
    4068:	15 29       	or	r17, r5
    406a:	6f 5f       	subi	r22, 0xFF	; 255
    406c:	7f 4f       	sbci	r23, 0xFF	; 255
    406e:	60 32       	cpi	r22, 0x20	; 32
    4070:	71 05       	cpc	r23, r1
    4072:	49 f0       	breq	.+18     	; 0x4086 <__mulsf3+0x124>
    4074:	aa 0c       	add	r10, r10
    4076:	bb 1c       	adc	r11, r11
    4078:	cc 1c       	adc	r12, r12
    407a:	dd 1c       	adc	r13, r13
    407c:	96 94       	lsr	r9
    407e:	87 94       	ror	r8
    4080:	77 94       	ror	r7
    4082:	67 94       	ror	r6
    4084:	c5 cf       	rjmp	.-118    	; 0x4010 <__mulsf3+0xae>
    4086:	6b 89       	ldd	r22, Y+19	; 0x13
    4088:	7c 89       	ldd	r23, Y+20	; 0x14
    408a:	eb 85       	ldd	r30, Y+11	; 0x0b
    408c:	fc 85       	ldd	r31, Y+12	; 0x0c
    408e:	6e 0f       	add	r22, r30
    4090:	7f 1f       	adc	r23, r31
    4092:	6e 5f       	subi	r22, 0xFE	; 254
    4094:	7f 4f       	sbci	r23, 0xFF	; 255
    4096:	7c 8f       	std	Y+28, r23	; 0x1c
    4098:	6b 8f       	std	Y+27, r22	; 0x1b
    409a:	1a 8e       	std	Y+26, r1	; 0x1a
    409c:	7a 85       	ldd	r23, Y+10	; 0x0a
    409e:	6a 89       	ldd	r22, Y+18	; 0x12
    40a0:	76 17       	cp	r23, r22
    40a2:	11 f0       	breq	.+4      	; 0x40a8 <__mulsf3+0x146>
    40a4:	61 e0       	ldi	r22, 0x01	; 1
    40a6:	6a 8f       	std	Y+26, r22	; 0x1a
    40a8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    40aa:	7c 8d       	ldd	r23, Y+28	; 0x1c
    40ac:	10 c0       	rjmp	.+32     	; 0x40ce <__mulsf3+0x16c>
    40ae:	fc 01       	movw	r30, r24
    40b0:	e1 70       	andi	r30, 0x01	; 1
    40b2:	f0 70       	andi	r31, 0x00	; 0
    40b4:	30 97       	sbiw	r30, 0x00	; 0
    40b6:	29 f0       	breq	.+10     	; 0x40c2 <__mulsf3+0x160>
    40b8:	56 95       	lsr	r21
    40ba:	47 95       	ror	r20
    40bc:	37 95       	ror	r19
    40be:	27 95       	ror	r18
    40c0:	50 68       	ori	r21, 0x80	; 128
    40c2:	b6 95       	lsr	r27
    40c4:	a7 95       	ror	r26
    40c6:	97 95       	ror	r25
    40c8:	87 95       	ror	r24
    40ca:	6f 5f       	subi	r22, 0xFF	; 255
    40cc:	7f 4f       	sbci	r23, 0xFF	; 255
    40ce:	b7 fd       	sbrc	r27, 7
    40d0:	ee cf       	rjmp	.-36     	; 0x40ae <__mulsf3+0x14c>
    40d2:	0c c0       	rjmp	.+24     	; 0x40ec <__mulsf3+0x18a>
    40d4:	88 0f       	add	r24, r24
    40d6:	99 1f       	adc	r25, r25
    40d8:	aa 1f       	adc	r26, r26
    40da:	bb 1f       	adc	r27, r27
    40dc:	57 fd       	sbrc	r21, 7
    40de:	81 60       	ori	r24, 0x01	; 1
    40e0:	22 0f       	add	r18, r18
    40e2:	33 1f       	adc	r19, r19
    40e4:	44 1f       	adc	r20, r20
    40e6:	55 1f       	adc	r21, r21
    40e8:	61 50       	subi	r22, 0x01	; 1
    40ea:	70 40       	sbci	r23, 0x00	; 0
    40ec:	80 30       	cpi	r24, 0x00	; 0
    40ee:	e0 e0       	ldi	r30, 0x00	; 0
    40f0:	9e 07       	cpc	r25, r30
    40f2:	e0 e0       	ldi	r30, 0x00	; 0
    40f4:	ae 07       	cpc	r26, r30
    40f6:	e0 e4       	ldi	r30, 0x40	; 64
    40f8:	be 07       	cpc	r27, r30
    40fa:	60 f3       	brcs	.-40     	; 0x40d4 <__mulsf3+0x172>
    40fc:	6b 8f       	std	Y+27, r22	; 0x1b
    40fe:	7c 8f       	std	Y+28, r23	; 0x1c
    4100:	6f e7       	ldi	r22, 0x7F	; 127
    4102:	e6 2e       	mov	r14, r22
    4104:	f1 2c       	mov	r15, r1
    4106:	01 2d       	mov	r16, r1
    4108:	11 2d       	mov	r17, r1
    410a:	e8 22       	and	r14, r24
    410c:	f9 22       	and	r15, r25
    410e:	0a 23       	and	r16, r26
    4110:	1b 23       	and	r17, r27
    4112:	60 e4       	ldi	r22, 0x40	; 64
    4114:	e6 16       	cp	r14, r22
    4116:	f1 04       	cpc	r15, r1
    4118:	01 05       	cpc	r16, r1
    411a:	11 05       	cpc	r17, r1
    411c:	61 f4       	brne	.+24     	; 0x4136 <__mulsf3+0x1d4>
    411e:	87 fd       	sbrc	r24, 7
    4120:	0a c0       	rjmp	.+20     	; 0x4136 <__mulsf3+0x1d4>
    4122:	21 15       	cp	r18, r1
    4124:	31 05       	cpc	r19, r1
    4126:	41 05       	cpc	r20, r1
    4128:	51 05       	cpc	r21, r1
    412a:	29 f0       	breq	.+10     	; 0x4136 <__mulsf3+0x1d4>
    412c:	80 5c       	subi	r24, 0xC0	; 192
    412e:	9f 4f       	sbci	r25, 0xFF	; 255
    4130:	af 4f       	sbci	r26, 0xFF	; 255
    4132:	bf 4f       	sbci	r27, 0xFF	; 255
    4134:	80 78       	andi	r24, 0x80	; 128
    4136:	8d 8f       	std	Y+29, r24	; 0x1d
    4138:	9e 8f       	std	Y+30, r25	; 0x1e
    413a:	af 8f       	std	Y+31, r26	; 0x1f
    413c:	b8 a3       	std	Y+32, r27	; 0x20
    413e:	83 e0       	ldi	r24, 0x03	; 3
    4140:	89 8f       	std	Y+25, r24	; 0x19
    4142:	ce 01       	movw	r24, r28
    4144:	49 96       	adiw	r24, 0x19	; 25
    4146:	0e 94 37 23 	call	0x466e	; 0x466e <__pack_f>
    414a:	a0 96       	adiw	r28, 0x20	; 32
    414c:	e2 e1       	ldi	r30, 0x12	; 18
    414e:	0c 94 78 29 	jmp	0x52f0	; 0x52f0 <__epilogue_restores__>

00004152 <__divsf3>:
    4152:	a8 e1       	ldi	r26, 0x18	; 24
    4154:	b0 e0       	ldi	r27, 0x00	; 0
    4156:	ef ea       	ldi	r30, 0xAF	; 175
    4158:	f0 e2       	ldi	r31, 0x20	; 32
    415a:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__prologue_saves__+0x10>
    415e:	69 83       	std	Y+1, r22	; 0x01
    4160:	7a 83       	std	Y+2, r23	; 0x02
    4162:	8b 83       	std	Y+3, r24	; 0x03
    4164:	9c 83       	std	Y+4, r25	; 0x04
    4166:	2d 83       	std	Y+5, r18	; 0x05
    4168:	3e 83       	std	Y+6, r19	; 0x06
    416a:	4f 83       	std	Y+7, r20	; 0x07
    416c:	58 87       	std	Y+8, r21	; 0x08
    416e:	8e 01       	movw	r16, r28
    4170:	07 5f       	subi	r16, 0xF7	; 247
    4172:	1f 4f       	sbci	r17, 0xFF	; 255
    4174:	ce 01       	movw	r24, r28
    4176:	01 96       	adiw	r24, 0x01	; 1
    4178:	b8 01       	movw	r22, r16
    417a:	0e 94 06 24 	call	0x480c	; 0x480c <__unpack_f>
    417e:	81 e1       	ldi	r24, 0x11	; 17
    4180:	e8 2e       	mov	r14, r24
    4182:	f1 2c       	mov	r15, r1
    4184:	ec 0e       	add	r14, r28
    4186:	fd 1e       	adc	r15, r29
    4188:	ce 01       	movw	r24, r28
    418a:	05 96       	adiw	r24, 0x05	; 5
    418c:	b7 01       	movw	r22, r14
    418e:	0e 94 06 24 	call	0x480c	; 0x480c <__unpack_f>
    4192:	99 85       	ldd	r25, Y+9	; 0x09
    4194:	92 30       	cpi	r25, 0x02	; 2
    4196:	08 f4       	brcc	.+2      	; 0x419a <__divsf3+0x48>
    4198:	83 c0       	rjmp	.+262    	; 0x42a0 <__divsf3+0x14e>
    419a:	89 89       	ldd	r24, Y+17	; 0x11
    419c:	82 30       	cpi	r24, 0x02	; 2
    419e:	10 f4       	brcc	.+4      	; 0x41a4 <__divsf3+0x52>
    41a0:	87 01       	movw	r16, r14
    41a2:	7e c0       	rjmp	.+252    	; 0x42a0 <__divsf3+0x14e>
    41a4:	2a 85       	ldd	r18, Y+10	; 0x0a
    41a6:	3a 89       	ldd	r19, Y+18	; 0x12
    41a8:	23 27       	eor	r18, r19
    41aa:	2a 87       	std	Y+10, r18	; 0x0a
    41ac:	94 30       	cpi	r25, 0x04	; 4
    41ae:	11 f0       	breq	.+4      	; 0x41b4 <__divsf3+0x62>
    41b0:	92 30       	cpi	r25, 0x02	; 2
    41b2:	31 f4       	brne	.+12     	; 0x41c0 <__divsf3+0x6e>
    41b4:	98 17       	cp	r25, r24
    41b6:	09 f0       	breq	.+2      	; 0x41ba <__divsf3+0x68>
    41b8:	70 c0       	rjmp	.+224    	; 0x429a <__divsf3+0x148>
    41ba:	04 e8       	ldi	r16, 0x84	; 132
    41bc:	11 e0       	ldi	r17, 0x01	; 1
    41be:	70 c0       	rjmp	.+224    	; 0x42a0 <__divsf3+0x14e>
    41c0:	84 30       	cpi	r24, 0x04	; 4
    41c2:	39 f4       	brne	.+14     	; 0x41d2 <__divsf3+0x80>
    41c4:	1d 86       	std	Y+13, r1	; 0x0d
    41c6:	1e 86       	std	Y+14, r1	; 0x0e
    41c8:	1f 86       	std	Y+15, r1	; 0x0f
    41ca:	18 8a       	std	Y+16, r1	; 0x10
    41cc:	1c 86       	std	Y+12, r1	; 0x0c
    41ce:	1b 86       	std	Y+11, r1	; 0x0b
    41d0:	67 c0       	rjmp	.+206    	; 0x42a0 <__divsf3+0x14e>
    41d2:	82 30       	cpi	r24, 0x02	; 2
    41d4:	19 f4       	brne	.+6      	; 0x41dc <__divsf3+0x8a>
    41d6:	84 e0       	ldi	r24, 0x04	; 4
    41d8:	89 87       	std	Y+9, r24	; 0x09
    41da:	62 c0       	rjmp	.+196    	; 0x42a0 <__divsf3+0x14e>
    41dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    41de:	9c 85       	ldd	r25, Y+12	; 0x0c
    41e0:	2b 89       	ldd	r18, Y+19	; 0x13
    41e2:	3c 89       	ldd	r19, Y+20	; 0x14
    41e4:	82 1b       	sub	r24, r18
    41e6:	93 0b       	sbc	r25, r19
    41e8:	9c 87       	std	Y+12, r25	; 0x0c
    41ea:	8b 87       	std	Y+11, r24	; 0x0b
    41ec:	2d 85       	ldd	r18, Y+13	; 0x0d
    41ee:	3e 85       	ldd	r19, Y+14	; 0x0e
    41f0:	4f 85       	ldd	r20, Y+15	; 0x0f
    41f2:	58 89       	ldd	r21, Y+16	; 0x10
    41f4:	ad 88       	ldd	r10, Y+21	; 0x15
    41f6:	be 88       	ldd	r11, Y+22	; 0x16
    41f8:	cf 88       	ldd	r12, Y+23	; 0x17
    41fa:	d8 8c       	ldd	r13, Y+24	; 0x18
    41fc:	2a 15       	cp	r18, r10
    41fe:	3b 05       	cpc	r19, r11
    4200:	4c 05       	cpc	r20, r12
    4202:	5d 05       	cpc	r21, r13
    4204:	38 f4       	brcc	.+14     	; 0x4214 <__divsf3+0xc2>
    4206:	22 0f       	add	r18, r18
    4208:	33 1f       	adc	r19, r19
    420a:	44 1f       	adc	r20, r20
    420c:	55 1f       	adc	r21, r21
    420e:	01 97       	sbiw	r24, 0x01	; 1
    4210:	9c 87       	std	Y+12, r25	; 0x0c
    4212:	8b 87       	std	Y+11, r24	; 0x0b
    4214:	60 e0       	ldi	r22, 0x00	; 0
    4216:	70 e0       	ldi	r23, 0x00	; 0
    4218:	e1 2c       	mov	r14, r1
    421a:	f1 2c       	mov	r15, r1
    421c:	01 2d       	mov	r16, r1
    421e:	a0 e4       	ldi	r26, 0x40	; 64
    4220:	1a 2f       	mov	r17, r26
    4222:	80 e0       	ldi	r24, 0x00	; 0
    4224:	90 e0       	ldi	r25, 0x00	; 0
    4226:	dc 01       	movw	r26, r24
    4228:	2a 15       	cp	r18, r10
    422a:	3b 05       	cpc	r19, r11
    422c:	4c 05       	cpc	r20, r12
    422e:	5d 05       	cpc	r21, r13
    4230:	40 f0       	brcs	.+16     	; 0x4242 <__divsf3+0xf0>
    4232:	8e 29       	or	r24, r14
    4234:	9f 29       	or	r25, r15
    4236:	a0 2b       	or	r26, r16
    4238:	b1 2b       	or	r27, r17
    423a:	2a 19       	sub	r18, r10
    423c:	3b 09       	sbc	r19, r11
    423e:	4c 09       	sbc	r20, r12
    4240:	5d 09       	sbc	r21, r13
    4242:	16 95       	lsr	r17
    4244:	07 95       	ror	r16
    4246:	f7 94       	ror	r15
    4248:	e7 94       	ror	r14
    424a:	22 0f       	add	r18, r18
    424c:	33 1f       	adc	r19, r19
    424e:	44 1f       	adc	r20, r20
    4250:	55 1f       	adc	r21, r21
    4252:	6f 5f       	subi	r22, 0xFF	; 255
    4254:	7f 4f       	sbci	r23, 0xFF	; 255
    4256:	6f 31       	cpi	r22, 0x1F	; 31
    4258:	71 05       	cpc	r23, r1
    425a:	31 f7       	brne	.-52     	; 0x4228 <__divsf3+0xd6>
    425c:	6f e7       	ldi	r22, 0x7F	; 127
    425e:	e6 2e       	mov	r14, r22
    4260:	f1 2c       	mov	r15, r1
    4262:	01 2d       	mov	r16, r1
    4264:	11 2d       	mov	r17, r1
    4266:	e8 22       	and	r14, r24
    4268:	f9 22       	and	r15, r25
    426a:	0a 23       	and	r16, r26
    426c:	1b 23       	and	r17, r27
    426e:	60 e4       	ldi	r22, 0x40	; 64
    4270:	e6 16       	cp	r14, r22
    4272:	f1 04       	cpc	r15, r1
    4274:	01 05       	cpc	r16, r1
    4276:	11 05       	cpc	r17, r1
    4278:	61 f4       	brne	.+24     	; 0x4292 <__divsf3+0x140>
    427a:	87 fd       	sbrc	r24, 7
    427c:	0a c0       	rjmp	.+20     	; 0x4292 <__divsf3+0x140>
    427e:	21 15       	cp	r18, r1
    4280:	31 05       	cpc	r19, r1
    4282:	41 05       	cpc	r20, r1
    4284:	51 05       	cpc	r21, r1
    4286:	29 f0       	breq	.+10     	; 0x4292 <__divsf3+0x140>
    4288:	80 5c       	subi	r24, 0xC0	; 192
    428a:	9f 4f       	sbci	r25, 0xFF	; 255
    428c:	af 4f       	sbci	r26, 0xFF	; 255
    428e:	bf 4f       	sbci	r27, 0xFF	; 255
    4290:	80 78       	andi	r24, 0x80	; 128
    4292:	8d 87       	std	Y+13, r24	; 0x0d
    4294:	9e 87       	std	Y+14, r25	; 0x0e
    4296:	af 87       	std	Y+15, r26	; 0x0f
    4298:	b8 8b       	std	Y+16, r27	; 0x10
    429a:	8e 01       	movw	r16, r28
    429c:	07 5f       	subi	r16, 0xF7	; 247
    429e:	1f 4f       	sbci	r17, 0xFF	; 255
    42a0:	c8 01       	movw	r24, r16
    42a2:	0e 94 37 23 	call	0x466e	; 0x466e <__pack_f>
    42a6:	68 96       	adiw	r28, 0x18	; 24
    42a8:	ea e0       	ldi	r30, 0x0A	; 10
    42aa:	0c 94 80 29 	jmp	0x5300	; 0x5300 <__epilogue_restores__+0x10>

000042ae <__gesf2>:
    42ae:	a8 e1       	ldi	r26, 0x18	; 24
    42b0:	b0 e0       	ldi	r27, 0x00	; 0
    42b2:	ed e5       	ldi	r30, 0x5D	; 93
    42b4:	f1 e2       	ldi	r31, 0x21	; 33
    42b6:	0c 94 68 29 	jmp	0x52d0	; 0x52d0 <__prologue_saves__+0x18>
    42ba:	69 83       	std	Y+1, r22	; 0x01
    42bc:	7a 83       	std	Y+2, r23	; 0x02
    42be:	8b 83       	std	Y+3, r24	; 0x03
    42c0:	9c 83       	std	Y+4, r25	; 0x04
    42c2:	2d 83       	std	Y+5, r18	; 0x05
    42c4:	3e 83       	std	Y+6, r19	; 0x06
    42c6:	4f 83       	std	Y+7, r20	; 0x07
    42c8:	58 87       	std	Y+8, r21	; 0x08
    42ca:	89 e0       	ldi	r24, 0x09	; 9
    42cc:	e8 2e       	mov	r14, r24
    42ce:	f1 2c       	mov	r15, r1
    42d0:	ec 0e       	add	r14, r28
    42d2:	fd 1e       	adc	r15, r29
    42d4:	ce 01       	movw	r24, r28
    42d6:	01 96       	adiw	r24, 0x01	; 1
    42d8:	b7 01       	movw	r22, r14
    42da:	0e 94 06 24 	call	0x480c	; 0x480c <__unpack_f>
    42de:	8e 01       	movw	r16, r28
    42e0:	0f 5e       	subi	r16, 0xEF	; 239
    42e2:	1f 4f       	sbci	r17, 0xFF	; 255
    42e4:	ce 01       	movw	r24, r28
    42e6:	05 96       	adiw	r24, 0x05	; 5
    42e8:	b8 01       	movw	r22, r16
    42ea:	0e 94 06 24 	call	0x480c	; 0x480c <__unpack_f>
    42ee:	89 85       	ldd	r24, Y+9	; 0x09
    42f0:	82 30       	cpi	r24, 0x02	; 2
    42f2:	40 f0       	brcs	.+16     	; 0x4304 <__gesf2+0x56>
    42f4:	89 89       	ldd	r24, Y+17	; 0x11
    42f6:	82 30       	cpi	r24, 0x02	; 2
    42f8:	28 f0       	brcs	.+10     	; 0x4304 <__gesf2+0x56>
    42fa:	c7 01       	movw	r24, r14
    42fc:	b8 01       	movw	r22, r16
    42fe:	0e 94 75 24 	call	0x48ea	; 0x48ea <__fpcmp_parts_f>
    4302:	01 c0       	rjmp	.+2      	; 0x4306 <__gesf2+0x58>
    4304:	8f ef       	ldi	r24, 0xFF	; 255
    4306:	68 96       	adiw	r28, 0x18	; 24
    4308:	e6 e0       	ldi	r30, 0x06	; 6
    430a:	0c 94 84 29 	jmp	0x5308	; 0x5308 <__epilogue_restores__+0x18>

0000430e <__ltsf2>:
    430e:	a8 e1       	ldi	r26, 0x18	; 24
    4310:	b0 e0       	ldi	r27, 0x00	; 0
    4312:	ed e8       	ldi	r30, 0x8D	; 141
    4314:	f1 e2       	ldi	r31, 0x21	; 33
    4316:	0c 94 68 29 	jmp	0x52d0	; 0x52d0 <__prologue_saves__+0x18>
    431a:	69 83       	std	Y+1, r22	; 0x01
    431c:	7a 83       	std	Y+2, r23	; 0x02
    431e:	8b 83       	std	Y+3, r24	; 0x03
    4320:	9c 83       	std	Y+4, r25	; 0x04
    4322:	2d 83       	std	Y+5, r18	; 0x05
    4324:	3e 83       	std	Y+6, r19	; 0x06
    4326:	4f 83       	std	Y+7, r20	; 0x07
    4328:	58 87       	std	Y+8, r21	; 0x08
    432a:	89 e0       	ldi	r24, 0x09	; 9
    432c:	e8 2e       	mov	r14, r24
    432e:	f1 2c       	mov	r15, r1
    4330:	ec 0e       	add	r14, r28
    4332:	fd 1e       	adc	r15, r29
    4334:	ce 01       	movw	r24, r28
    4336:	01 96       	adiw	r24, 0x01	; 1
    4338:	b7 01       	movw	r22, r14
    433a:	0e 94 06 24 	call	0x480c	; 0x480c <__unpack_f>
    433e:	8e 01       	movw	r16, r28
    4340:	0f 5e       	subi	r16, 0xEF	; 239
    4342:	1f 4f       	sbci	r17, 0xFF	; 255
    4344:	ce 01       	movw	r24, r28
    4346:	05 96       	adiw	r24, 0x05	; 5
    4348:	b8 01       	movw	r22, r16
    434a:	0e 94 06 24 	call	0x480c	; 0x480c <__unpack_f>
    434e:	89 85       	ldd	r24, Y+9	; 0x09
    4350:	82 30       	cpi	r24, 0x02	; 2
    4352:	40 f0       	brcs	.+16     	; 0x4364 <__ltsf2+0x56>
    4354:	89 89       	ldd	r24, Y+17	; 0x11
    4356:	82 30       	cpi	r24, 0x02	; 2
    4358:	28 f0       	brcs	.+10     	; 0x4364 <__ltsf2+0x56>
    435a:	c7 01       	movw	r24, r14
    435c:	b8 01       	movw	r22, r16
    435e:	0e 94 75 24 	call	0x48ea	; 0x48ea <__fpcmp_parts_f>
    4362:	01 c0       	rjmp	.+2      	; 0x4366 <__ltsf2+0x58>
    4364:	81 e0       	ldi	r24, 0x01	; 1
    4366:	68 96       	adiw	r28, 0x18	; 24
    4368:	e6 e0       	ldi	r30, 0x06	; 6
    436a:	0c 94 84 29 	jmp	0x5308	; 0x5308 <__epilogue_restores__+0x18>

0000436e <__floatsisf>:
    436e:	a8 e0       	ldi	r26, 0x08	; 8
    4370:	b0 e0       	ldi	r27, 0x00	; 0
    4372:	ed eb       	ldi	r30, 0xBD	; 189
    4374:	f1 e2       	ldi	r31, 0x21	; 33
    4376:	0c 94 66 29 	jmp	0x52cc	; 0x52cc <__prologue_saves__+0x14>
    437a:	23 e0       	ldi	r18, 0x03	; 3
    437c:	29 83       	std	Y+1, r18	; 0x01
    437e:	9b 01       	movw	r18, r22
    4380:	ac 01       	movw	r20, r24
    4382:	22 27       	eor	r18, r18
    4384:	57 fd       	sbrc	r21, 7
    4386:	23 95       	inc	r18
    4388:	33 27       	eor	r19, r19
    438a:	44 27       	eor	r20, r20
    438c:	55 27       	eor	r21, r21
    438e:	2a 83       	std	Y+2, r18	; 0x02
    4390:	61 15       	cp	r22, r1
    4392:	71 05       	cpc	r23, r1
    4394:	81 05       	cpc	r24, r1
    4396:	91 05       	cpc	r25, r1
    4398:	19 f4       	brne	.+6      	; 0x43a0 <__floatsisf+0x32>
    439a:	82 e0       	ldi	r24, 0x02	; 2
    439c:	89 83       	std	Y+1, r24	; 0x01
    439e:	3c c0       	rjmp	.+120    	; 0x4418 <__floatsisf+0xaa>
    43a0:	22 23       	and	r18, r18
    43a2:	a9 f0       	breq	.+42     	; 0x43ce <__floatsisf+0x60>
    43a4:	60 30       	cpi	r22, 0x00	; 0
    43a6:	20 e0       	ldi	r18, 0x00	; 0
    43a8:	72 07       	cpc	r23, r18
    43aa:	20 e0       	ldi	r18, 0x00	; 0
    43ac:	82 07       	cpc	r24, r18
    43ae:	20 e8       	ldi	r18, 0x80	; 128
    43b0:	92 07       	cpc	r25, r18
    43b2:	29 f4       	brne	.+10     	; 0x43be <__floatsisf+0x50>
    43b4:	60 e0       	ldi	r22, 0x00	; 0
    43b6:	70 e0       	ldi	r23, 0x00	; 0
    43b8:	80 e0       	ldi	r24, 0x00	; 0
    43ba:	9f ec       	ldi	r25, 0xCF	; 207
    43bc:	31 c0       	rjmp	.+98     	; 0x4420 <__floatsisf+0xb2>
    43be:	ee 24       	eor	r14, r14
    43c0:	ff 24       	eor	r15, r15
    43c2:	87 01       	movw	r16, r14
    43c4:	e6 1a       	sub	r14, r22
    43c6:	f7 0a       	sbc	r15, r23
    43c8:	08 0b       	sbc	r16, r24
    43ca:	19 0b       	sbc	r17, r25
    43cc:	02 c0       	rjmp	.+4      	; 0x43d2 <__floatsisf+0x64>
    43ce:	7b 01       	movw	r14, r22
    43d0:	8c 01       	movw	r16, r24
    43d2:	8e e1       	ldi	r24, 0x1E	; 30
    43d4:	c8 2e       	mov	r12, r24
    43d6:	d1 2c       	mov	r13, r1
    43d8:	dc 82       	std	Y+4, r13	; 0x04
    43da:	cb 82       	std	Y+3, r12	; 0x03
    43dc:	ed 82       	std	Y+5, r14	; 0x05
    43de:	fe 82       	std	Y+6, r15	; 0x06
    43e0:	0f 83       	std	Y+7, r16	; 0x07
    43e2:	18 87       	std	Y+8, r17	; 0x08
    43e4:	c8 01       	movw	r24, r16
    43e6:	b7 01       	movw	r22, r14
    43e8:	0e 94 df 22 	call	0x45be	; 0x45be <__clzsi2>
    43ec:	9c 01       	movw	r18, r24
    43ee:	21 50       	subi	r18, 0x01	; 1
    43f0:	30 40       	sbci	r19, 0x00	; 0
    43f2:	12 16       	cp	r1, r18
    43f4:	13 06       	cpc	r1, r19
    43f6:	84 f4       	brge	.+32     	; 0x4418 <__floatsisf+0xaa>
    43f8:	02 2e       	mov	r0, r18
    43fa:	04 c0       	rjmp	.+8      	; 0x4404 <__floatsisf+0x96>
    43fc:	ee 0c       	add	r14, r14
    43fe:	ff 1c       	adc	r15, r15
    4400:	00 1f       	adc	r16, r16
    4402:	11 1f       	adc	r17, r17
    4404:	0a 94       	dec	r0
    4406:	d2 f7       	brpl	.-12     	; 0x43fc <__floatsisf+0x8e>
    4408:	ed 82       	std	Y+5, r14	; 0x05
    440a:	fe 82       	std	Y+6, r15	; 0x06
    440c:	0f 83       	std	Y+7, r16	; 0x07
    440e:	18 87       	std	Y+8, r17	; 0x08
    4410:	c2 1a       	sub	r12, r18
    4412:	d3 0a       	sbc	r13, r19
    4414:	dc 82       	std	Y+4, r13	; 0x04
    4416:	cb 82       	std	Y+3, r12	; 0x03
    4418:	ce 01       	movw	r24, r28
    441a:	01 96       	adiw	r24, 0x01	; 1
    441c:	0e 94 37 23 	call	0x466e	; 0x466e <__pack_f>
    4420:	28 96       	adiw	r28, 0x08	; 8
    4422:	e8 e0       	ldi	r30, 0x08	; 8
    4424:	0c 94 82 29 	jmp	0x5304	; 0x5304 <__epilogue_restores__+0x14>

00004428 <__fixsfsi>:
    4428:	ac e0       	ldi	r26, 0x0C	; 12
    442a:	b0 e0       	ldi	r27, 0x00	; 0
    442c:	ea e1       	ldi	r30, 0x1A	; 26
    442e:	f2 e2       	ldi	r31, 0x22	; 34
    4430:	0c 94 6c 29 	jmp	0x52d8	; 0x52d8 <__prologue_saves__+0x20>
    4434:	69 83       	std	Y+1, r22	; 0x01
    4436:	7a 83       	std	Y+2, r23	; 0x02
    4438:	8b 83       	std	Y+3, r24	; 0x03
    443a:	9c 83       	std	Y+4, r25	; 0x04
    443c:	ce 01       	movw	r24, r28
    443e:	01 96       	adiw	r24, 0x01	; 1
    4440:	be 01       	movw	r22, r28
    4442:	6b 5f       	subi	r22, 0xFB	; 251
    4444:	7f 4f       	sbci	r23, 0xFF	; 255
    4446:	0e 94 06 24 	call	0x480c	; 0x480c <__unpack_f>
    444a:	8d 81       	ldd	r24, Y+5	; 0x05
    444c:	82 30       	cpi	r24, 0x02	; 2
    444e:	61 f1       	breq	.+88     	; 0x44a8 <__fixsfsi+0x80>
    4450:	82 30       	cpi	r24, 0x02	; 2
    4452:	50 f1       	brcs	.+84     	; 0x44a8 <__fixsfsi+0x80>
    4454:	84 30       	cpi	r24, 0x04	; 4
    4456:	21 f4       	brne	.+8      	; 0x4460 <__fixsfsi+0x38>
    4458:	8e 81       	ldd	r24, Y+6	; 0x06
    445a:	88 23       	and	r24, r24
    445c:	49 f1       	breq	.+82     	; 0x44b0 <__fixsfsi+0x88>
    445e:	2d c0       	rjmp	.+90     	; 0x44ba <__fixsfsi+0x92>
    4460:	2f 81       	ldd	r18, Y+7	; 0x07
    4462:	38 85       	ldd	r19, Y+8	; 0x08
    4464:	37 fd       	sbrc	r19, 7
    4466:	20 c0       	rjmp	.+64     	; 0x44a8 <__fixsfsi+0x80>
    4468:	6e 81       	ldd	r22, Y+6	; 0x06
    446a:	2f 31       	cpi	r18, 0x1F	; 31
    446c:	31 05       	cpc	r19, r1
    446e:	1c f0       	brlt	.+6      	; 0x4476 <__fixsfsi+0x4e>
    4470:	66 23       	and	r22, r22
    4472:	f1 f0       	breq	.+60     	; 0x44b0 <__fixsfsi+0x88>
    4474:	22 c0       	rjmp	.+68     	; 0x44ba <__fixsfsi+0x92>
    4476:	8e e1       	ldi	r24, 0x1E	; 30
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	82 1b       	sub	r24, r18
    447c:	93 0b       	sbc	r25, r19
    447e:	29 85       	ldd	r18, Y+9	; 0x09
    4480:	3a 85       	ldd	r19, Y+10	; 0x0a
    4482:	4b 85       	ldd	r20, Y+11	; 0x0b
    4484:	5c 85       	ldd	r21, Y+12	; 0x0c
    4486:	04 c0       	rjmp	.+8      	; 0x4490 <__fixsfsi+0x68>
    4488:	56 95       	lsr	r21
    448a:	47 95       	ror	r20
    448c:	37 95       	ror	r19
    448e:	27 95       	ror	r18
    4490:	8a 95       	dec	r24
    4492:	d2 f7       	brpl	.-12     	; 0x4488 <__fixsfsi+0x60>
    4494:	66 23       	and	r22, r22
    4496:	a9 f0       	breq	.+42     	; 0x44c2 <__fixsfsi+0x9a>
    4498:	50 95       	com	r21
    449a:	40 95       	com	r20
    449c:	30 95       	com	r19
    449e:	21 95       	neg	r18
    44a0:	3f 4f       	sbci	r19, 0xFF	; 255
    44a2:	4f 4f       	sbci	r20, 0xFF	; 255
    44a4:	5f 4f       	sbci	r21, 0xFF	; 255
    44a6:	0d c0       	rjmp	.+26     	; 0x44c2 <__fixsfsi+0x9a>
    44a8:	20 e0       	ldi	r18, 0x00	; 0
    44aa:	30 e0       	ldi	r19, 0x00	; 0
    44ac:	a9 01       	movw	r20, r18
    44ae:	09 c0       	rjmp	.+18     	; 0x44c2 <__fixsfsi+0x9a>
    44b0:	2f ef       	ldi	r18, 0xFF	; 255
    44b2:	3f ef       	ldi	r19, 0xFF	; 255
    44b4:	4f ef       	ldi	r20, 0xFF	; 255
    44b6:	5f e7       	ldi	r21, 0x7F	; 127
    44b8:	04 c0       	rjmp	.+8      	; 0x44c2 <__fixsfsi+0x9a>
    44ba:	20 e0       	ldi	r18, 0x00	; 0
    44bc:	30 e0       	ldi	r19, 0x00	; 0
    44be:	40 e0       	ldi	r20, 0x00	; 0
    44c0:	50 e8       	ldi	r21, 0x80	; 128
    44c2:	b9 01       	movw	r22, r18
    44c4:	ca 01       	movw	r24, r20
    44c6:	2c 96       	adiw	r28, 0x0c	; 12
    44c8:	e2 e0       	ldi	r30, 0x02	; 2
    44ca:	0c 94 88 29 	jmp	0x5310	; 0x5310 <__epilogue_restores__+0x20>

000044ce <__floatunsisf>:
    44ce:	a8 e0       	ldi	r26, 0x08	; 8
    44d0:	b0 e0       	ldi	r27, 0x00	; 0
    44d2:	ed e6       	ldi	r30, 0x6D	; 109
    44d4:	f2 e2       	ldi	r31, 0x22	; 34
    44d6:	0c 94 66 29 	jmp	0x52cc	; 0x52cc <__prologue_saves__+0x14>
    44da:	7b 01       	movw	r14, r22
    44dc:	8c 01       	movw	r16, r24
    44de:	1a 82       	std	Y+2, r1	; 0x02
    44e0:	61 15       	cp	r22, r1
    44e2:	71 05       	cpc	r23, r1
    44e4:	81 05       	cpc	r24, r1
    44e6:	91 05       	cpc	r25, r1
    44e8:	19 f4       	brne	.+6      	; 0x44f0 <__floatunsisf+0x22>
    44ea:	82 e0       	ldi	r24, 0x02	; 2
    44ec:	89 83       	std	Y+1, r24	; 0x01
    44ee:	5f c0       	rjmp	.+190    	; 0x45ae <__floatunsisf+0xe0>
    44f0:	83 e0       	ldi	r24, 0x03	; 3
    44f2:	89 83       	std	Y+1, r24	; 0x01
    44f4:	8e e1       	ldi	r24, 0x1E	; 30
    44f6:	c8 2e       	mov	r12, r24
    44f8:	d1 2c       	mov	r13, r1
    44fa:	dc 82       	std	Y+4, r13	; 0x04
    44fc:	cb 82       	std	Y+3, r12	; 0x03
    44fe:	ed 82       	std	Y+5, r14	; 0x05
    4500:	fe 82       	std	Y+6, r15	; 0x06
    4502:	0f 83       	std	Y+7, r16	; 0x07
    4504:	18 87       	std	Y+8, r17	; 0x08
    4506:	c8 01       	movw	r24, r16
    4508:	b7 01       	movw	r22, r14
    450a:	0e 94 df 22 	call	0x45be	; 0x45be <__clzsi2>
    450e:	9c 01       	movw	r18, r24
    4510:	21 50       	subi	r18, 0x01	; 1
    4512:	30 40       	sbci	r19, 0x00	; 0
    4514:	37 ff       	sbrs	r19, 7
    4516:	38 c0       	rjmp	.+112    	; 0x4588 <__floatunsisf+0xba>
    4518:	ee 27       	eor	r30, r30
    451a:	ff 27       	eor	r31, r31
    451c:	e2 1b       	sub	r30, r18
    451e:	f3 0b       	sbc	r31, r19
    4520:	40 e0       	ldi	r20, 0x00	; 0
    4522:	50 e0       	ldi	r21, 0x00	; 0
    4524:	ba 01       	movw	r22, r20
    4526:	81 e0       	ldi	r24, 0x01	; 1
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	a0 e0       	ldi	r26, 0x00	; 0
    452c:	b0 e0       	ldi	r27, 0x00	; 0
    452e:	0e 2e       	mov	r0, r30
    4530:	04 c0       	rjmp	.+8      	; 0x453a <__floatunsisf+0x6c>
    4532:	88 0f       	add	r24, r24
    4534:	99 1f       	adc	r25, r25
    4536:	aa 1f       	adc	r26, r26
    4538:	bb 1f       	adc	r27, r27
    453a:	0a 94       	dec	r0
    453c:	d2 f7       	brpl	.-12     	; 0x4532 <__floatunsisf+0x64>
    453e:	01 97       	sbiw	r24, 0x01	; 1
    4540:	a1 09       	sbc	r26, r1
    4542:	b1 09       	sbc	r27, r1
    4544:	8e 21       	and	r24, r14
    4546:	9f 21       	and	r25, r15
    4548:	a0 23       	and	r26, r16
    454a:	b1 23       	and	r27, r17
    454c:	00 97       	sbiw	r24, 0x00	; 0
    454e:	a1 05       	cpc	r26, r1
    4550:	b1 05       	cpc	r27, r1
    4552:	21 f0       	breq	.+8      	; 0x455c <__floatunsisf+0x8e>
    4554:	41 e0       	ldi	r20, 0x01	; 1
    4556:	50 e0       	ldi	r21, 0x00	; 0
    4558:	60 e0       	ldi	r22, 0x00	; 0
    455a:	70 e0       	ldi	r23, 0x00	; 0
    455c:	04 c0       	rjmp	.+8      	; 0x4566 <__floatunsisf+0x98>
    455e:	16 95       	lsr	r17
    4560:	07 95       	ror	r16
    4562:	f7 94       	ror	r15
    4564:	e7 94       	ror	r14
    4566:	ea 95       	dec	r30
    4568:	d2 f7       	brpl	.-12     	; 0x455e <__floatunsisf+0x90>
    456a:	e4 2a       	or	r14, r20
    456c:	f5 2a       	or	r15, r21
    456e:	06 2b       	or	r16, r22
    4570:	17 2b       	or	r17, r23
    4572:	ed 82       	std	Y+5, r14	; 0x05
    4574:	fe 82       	std	Y+6, r15	; 0x06
    4576:	0f 83       	std	Y+7, r16	; 0x07
    4578:	18 87       	std	Y+8, r17	; 0x08
    457a:	8e e1       	ldi	r24, 0x1E	; 30
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	82 1b       	sub	r24, r18
    4580:	93 0b       	sbc	r25, r19
    4582:	9c 83       	std	Y+4, r25	; 0x04
    4584:	8b 83       	std	Y+3, r24	; 0x03
    4586:	13 c0       	rjmp	.+38     	; 0x45ae <__floatunsisf+0xe0>
    4588:	21 15       	cp	r18, r1
    458a:	31 05       	cpc	r19, r1
    458c:	81 f0       	breq	.+32     	; 0x45ae <__floatunsisf+0xe0>
    458e:	02 2e       	mov	r0, r18
    4590:	04 c0       	rjmp	.+8      	; 0x459a <__floatunsisf+0xcc>
    4592:	ee 0c       	add	r14, r14
    4594:	ff 1c       	adc	r15, r15
    4596:	00 1f       	adc	r16, r16
    4598:	11 1f       	adc	r17, r17
    459a:	0a 94       	dec	r0
    459c:	d2 f7       	brpl	.-12     	; 0x4592 <__floatunsisf+0xc4>
    459e:	ed 82       	std	Y+5, r14	; 0x05
    45a0:	fe 82       	std	Y+6, r15	; 0x06
    45a2:	0f 83       	std	Y+7, r16	; 0x07
    45a4:	18 87       	std	Y+8, r17	; 0x08
    45a6:	c2 1a       	sub	r12, r18
    45a8:	d3 0a       	sbc	r13, r19
    45aa:	dc 82       	std	Y+4, r13	; 0x04
    45ac:	cb 82       	std	Y+3, r12	; 0x03
    45ae:	ce 01       	movw	r24, r28
    45b0:	01 96       	adiw	r24, 0x01	; 1
    45b2:	0e 94 37 23 	call	0x466e	; 0x466e <__pack_f>
    45b6:	28 96       	adiw	r28, 0x08	; 8
    45b8:	e8 e0       	ldi	r30, 0x08	; 8
    45ba:	0c 94 82 29 	jmp	0x5304	; 0x5304 <__epilogue_restores__+0x14>

000045be <__clzsi2>:
    45be:	af 92       	push	r10
    45c0:	bf 92       	push	r11
    45c2:	cf 92       	push	r12
    45c4:	df 92       	push	r13
    45c6:	ef 92       	push	r14
    45c8:	ff 92       	push	r15
    45ca:	0f 93       	push	r16
    45cc:	1f 93       	push	r17
    45ce:	7b 01       	movw	r14, r22
    45d0:	8c 01       	movw	r16, r24
    45d2:	80 e0       	ldi	r24, 0x00	; 0
    45d4:	e8 16       	cp	r14, r24
    45d6:	80 e0       	ldi	r24, 0x00	; 0
    45d8:	f8 06       	cpc	r15, r24
    45da:	81 e0       	ldi	r24, 0x01	; 1
    45dc:	08 07       	cpc	r16, r24
    45de:	80 e0       	ldi	r24, 0x00	; 0
    45e0:	18 07       	cpc	r17, r24
    45e2:	80 f4       	brcc	.+32     	; 0x4604 <__clzsi2+0x46>
    45e4:	8f ef       	ldi	r24, 0xFF	; 255
    45e6:	e8 16       	cp	r14, r24
    45e8:	f1 04       	cpc	r15, r1
    45ea:	01 05       	cpc	r16, r1
    45ec:	11 05       	cpc	r17, r1
    45ee:	31 f0       	breq	.+12     	; 0x45fc <__clzsi2+0x3e>
    45f0:	28 f0       	brcs	.+10     	; 0x45fc <__clzsi2+0x3e>
    45f2:	88 e0       	ldi	r24, 0x08	; 8
    45f4:	90 e0       	ldi	r25, 0x00	; 0
    45f6:	a0 e0       	ldi	r26, 0x00	; 0
    45f8:	b0 e0       	ldi	r27, 0x00	; 0
    45fa:	16 c0       	rjmp	.+44     	; 0x4628 <__clzsi2+0x6a>
    45fc:	80 e0       	ldi	r24, 0x00	; 0
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	dc 01       	movw	r26, r24
    4602:	12 c0       	rjmp	.+36     	; 0x4628 <__clzsi2+0x6a>
    4604:	80 e0       	ldi	r24, 0x00	; 0
    4606:	e8 16       	cp	r14, r24
    4608:	80 e0       	ldi	r24, 0x00	; 0
    460a:	f8 06       	cpc	r15, r24
    460c:	80 e0       	ldi	r24, 0x00	; 0
    460e:	08 07       	cpc	r16, r24
    4610:	81 e0       	ldi	r24, 0x01	; 1
    4612:	18 07       	cpc	r17, r24
    4614:	28 f0       	brcs	.+10     	; 0x4620 <__clzsi2+0x62>
    4616:	88 e1       	ldi	r24, 0x18	; 24
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	a0 e0       	ldi	r26, 0x00	; 0
    461c:	b0 e0       	ldi	r27, 0x00	; 0
    461e:	04 c0       	rjmp	.+8      	; 0x4628 <__clzsi2+0x6a>
    4620:	80 e1       	ldi	r24, 0x10	; 16
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	a0 e0       	ldi	r26, 0x00	; 0
    4626:	b0 e0       	ldi	r27, 0x00	; 0
    4628:	20 e2       	ldi	r18, 0x20	; 32
    462a:	30 e0       	ldi	r19, 0x00	; 0
    462c:	40 e0       	ldi	r20, 0x00	; 0
    462e:	50 e0       	ldi	r21, 0x00	; 0
    4630:	28 1b       	sub	r18, r24
    4632:	39 0b       	sbc	r19, r25
    4634:	4a 0b       	sbc	r20, r26
    4636:	5b 0b       	sbc	r21, r27
    4638:	57 01       	movw	r10, r14
    463a:	68 01       	movw	r12, r16
    463c:	04 c0       	rjmp	.+8      	; 0x4646 <__clzsi2+0x88>
    463e:	d6 94       	lsr	r13
    4640:	c7 94       	ror	r12
    4642:	b7 94       	ror	r11
    4644:	a7 94       	ror	r10
    4646:	8a 95       	dec	r24
    4648:	d2 f7       	brpl	.-12     	; 0x463e <__clzsi2+0x80>
    464a:	f5 01       	movw	r30, r10
    464c:	e4 57       	subi	r30, 0x74	; 116
    464e:	fe 4f       	sbci	r31, 0xFE	; 254
    4650:	80 81       	ld	r24, Z
    4652:	28 1b       	sub	r18, r24
    4654:	31 09       	sbc	r19, r1
    4656:	41 09       	sbc	r20, r1
    4658:	51 09       	sbc	r21, r1
    465a:	c9 01       	movw	r24, r18
    465c:	1f 91       	pop	r17
    465e:	0f 91       	pop	r16
    4660:	ff 90       	pop	r15
    4662:	ef 90       	pop	r14
    4664:	df 90       	pop	r13
    4666:	cf 90       	pop	r12
    4668:	bf 90       	pop	r11
    466a:	af 90       	pop	r10
    466c:	08 95       	ret

0000466e <__pack_f>:
    466e:	cf 92       	push	r12
    4670:	df 92       	push	r13
    4672:	ef 92       	push	r14
    4674:	ff 92       	push	r15
    4676:	0f 93       	push	r16
    4678:	1f 93       	push	r17
    467a:	fc 01       	movw	r30, r24
    467c:	24 81       	ldd	r18, Z+4	; 0x04
    467e:	35 81       	ldd	r19, Z+5	; 0x05
    4680:	46 81       	ldd	r20, Z+6	; 0x06
    4682:	57 81       	ldd	r21, Z+7	; 0x07
    4684:	01 81       	ldd	r16, Z+1	; 0x01
    4686:	80 81       	ld	r24, Z
    4688:	82 30       	cpi	r24, 0x02	; 2
    468a:	20 f4       	brcc	.+8      	; 0x4694 <__pack_f+0x26>
    468c:	40 61       	ori	r20, 0x10	; 16
    468e:	8f ef       	ldi	r24, 0xFF	; 255
    4690:	90 e0       	ldi	r25, 0x00	; 0
    4692:	a2 c0       	rjmp	.+324    	; 0x47d8 <__pack_f+0x16a>
    4694:	84 30       	cpi	r24, 0x04	; 4
    4696:	09 f4       	brne	.+2      	; 0x469a <__pack_f+0x2c>
    4698:	9a c0       	rjmp	.+308    	; 0x47ce <__pack_f+0x160>
    469a:	82 30       	cpi	r24, 0x02	; 2
    469c:	19 f4       	brne	.+6      	; 0x46a4 <__pack_f+0x36>
    469e:	80 e0       	ldi	r24, 0x00	; 0
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	97 c0       	rjmp	.+302    	; 0x47d2 <__pack_f+0x164>
    46a4:	21 15       	cp	r18, r1
    46a6:	31 05       	cpc	r19, r1
    46a8:	41 05       	cpc	r20, r1
    46aa:	51 05       	cpc	r21, r1
    46ac:	19 f4       	brne	.+6      	; 0x46b4 <__pack_f+0x46>
    46ae:	80 e0       	ldi	r24, 0x00	; 0
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	92 c0       	rjmp	.+292    	; 0x47d8 <__pack_f+0x16a>
    46b4:	82 81       	ldd	r24, Z+2	; 0x02
    46b6:	93 81       	ldd	r25, Z+3	; 0x03
    46b8:	6f ef       	ldi	r22, 0xFF	; 255
    46ba:	82 38       	cpi	r24, 0x82	; 130
    46bc:	96 07       	cpc	r25, r22
    46be:	0c f0       	brlt	.+2      	; 0x46c2 <__pack_f+0x54>
    46c0:	58 c0       	rjmp	.+176    	; 0x4772 <__pack_f+0x104>
    46c2:	62 e8       	ldi	r22, 0x82	; 130
    46c4:	7f ef       	ldi	r23, 0xFF	; 255
    46c6:	68 1b       	sub	r22, r24
    46c8:	79 0b       	sbc	r23, r25
    46ca:	6a 31       	cpi	r22, 0x1A	; 26
    46cc:	71 05       	cpc	r23, r1
    46ce:	24 f0       	brlt	.+8      	; 0x46d8 <__pack_f+0x6a>
    46d0:	20 e0       	ldi	r18, 0x00	; 0
    46d2:	30 e0       	ldi	r19, 0x00	; 0
    46d4:	a9 01       	movw	r20, r18
    46d6:	2a c0       	rjmp	.+84     	; 0x472c <__pack_f+0xbe>
    46d8:	69 01       	movw	r12, r18
    46da:	7a 01       	movw	r14, r20
    46dc:	06 2e       	mov	r0, r22
    46de:	04 c0       	rjmp	.+8      	; 0x46e8 <__pack_f+0x7a>
    46e0:	f6 94       	lsr	r15
    46e2:	e7 94       	ror	r14
    46e4:	d7 94       	ror	r13
    46e6:	c7 94       	ror	r12
    46e8:	0a 94       	dec	r0
    46ea:	d2 f7       	brpl	.-12     	; 0x46e0 <__pack_f+0x72>
    46ec:	81 e0       	ldi	r24, 0x01	; 1
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	a0 e0       	ldi	r26, 0x00	; 0
    46f2:	b0 e0       	ldi	r27, 0x00	; 0
    46f4:	04 c0       	rjmp	.+8      	; 0x46fe <__pack_f+0x90>
    46f6:	88 0f       	add	r24, r24
    46f8:	99 1f       	adc	r25, r25
    46fa:	aa 1f       	adc	r26, r26
    46fc:	bb 1f       	adc	r27, r27
    46fe:	6a 95       	dec	r22
    4700:	d2 f7       	brpl	.-12     	; 0x46f6 <__pack_f+0x88>
    4702:	01 97       	sbiw	r24, 0x01	; 1
    4704:	a1 09       	sbc	r26, r1
    4706:	b1 09       	sbc	r27, r1
    4708:	82 23       	and	r24, r18
    470a:	93 23       	and	r25, r19
    470c:	a4 23       	and	r26, r20
    470e:	b5 23       	and	r27, r21
    4710:	00 97       	sbiw	r24, 0x00	; 0
    4712:	a1 05       	cpc	r26, r1
    4714:	b1 05       	cpc	r27, r1
    4716:	21 f0       	breq	.+8      	; 0x4720 <__pack_f+0xb2>
    4718:	81 e0       	ldi	r24, 0x01	; 1
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	a0 e0       	ldi	r26, 0x00	; 0
    471e:	b0 e0       	ldi	r27, 0x00	; 0
    4720:	9c 01       	movw	r18, r24
    4722:	ad 01       	movw	r20, r26
    4724:	2c 29       	or	r18, r12
    4726:	3d 29       	or	r19, r13
    4728:	4e 29       	or	r20, r14
    472a:	5f 29       	or	r21, r15
    472c:	da 01       	movw	r26, r20
    472e:	c9 01       	movw	r24, r18
    4730:	8f 77       	andi	r24, 0x7F	; 127
    4732:	90 70       	andi	r25, 0x00	; 0
    4734:	a0 70       	andi	r26, 0x00	; 0
    4736:	b0 70       	andi	r27, 0x00	; 0
    4738:	80 34       	cpi	r24, 0x40	; 64
    473a:	91 05       	cpc	r25, r1
    473c:	a1 05       	cpc	r26, r1
    473e:	b1 05       	cpc	r27, r1
    4740:	39 f4       	brne	.+14     	; 0x4750 <__pack_f+0xe2>
    4742:	27 ff       	sbrs	r18, 7
    4744:	09 c0       	rjmp	.+18     	; 0x4758 <__pack_f+0xea>
    4746:	20 5c       	subi	r18, 0xC0	; 192
    4748:	3f 4f       	sbci	r19, 0xFF	; 255
    474a:	4f 4f       	sbci	r20, 0xFF	; 255
    474c:	5f 4f       	sbci	r21, 0xFF	; 255
    474e:	04 c0       	rjmp	.+8      	; 0x4758 <__pack_f+0xea>
    4750:	21 5c       	subi	r18, 0xC1	; 193
    4752:	3f 4f       	sbci	r19, 0xFF	; 255
    4754:	4f 4f       	sbci	r20, 0xFF	; 255
    4756:	5f 4f       	sbci	r21, 0xFF	; 255
    4758:	80 e0       	ldi	r24, 0x00	; 0
    475a:	90 e0       	ldi	r25, 0x00	; 0
    475c:	20 30       	cpi	r18, 0x00	; 0
    475e:	60 e0       	ldi	r22, 0x00	; 0
    4760:	36 07       	cpc	r19, r22
    4762:	60 e0       	ldi	r22, 0x00	; 0
    4764:	46 07       	cpc	r20, r22
    4766:	60 e4       	ldi	r22, 0x40	; 64
    4768:	56 07       	cpc	r21, r22
    476a:	48 f1       	brcs	.+82     	; 0x47be <__pack_f+0x150>
    476c:	81 e0       	ldi	r24, 0x01	; 1
    476e:	90 e0       	ldi	r25, 0x00	; 0
    4770:	26 c0       	rjmp	.+76     	; 0x47be <__pack_f+0x150>
    4772:	80 38       	cpi	r24, 0x80	; 128
    4774:	91 05       	cpc	r25, r1
    4776:	5c f5       	brge	.+86     	; 0x47ce <__pack_f+0x160>
    4778:	81 58       	subi	r24, 0x81	; 129
    477a:	9f 4f       	sbci	r25, 0xFF	; 255
    477c:	7f e7       	ldi	r23, 0x7F	; 127
    477e:	c7 2e       	mov	r12, r23
    4780:	d1 2c       	mov	r13, r1
    4782:	e1 2c       	mov	r14, r1
    4784:	f1 2c       	mov	r15, r1
    4786:	c2 22       	and	r12, r18
    4788:	d3 22       	and	r13, r19
    478a:	e4 22       	and	r14, r20
    478c:	f5 22       	and	r15, r21
    478e:	60 e4       	ldi	r22, 0x40	; 64
    4790:	c6 16       	cp	r12, r22
    4792:	d1 04       	cpc	r13, r1
    4794:	e1 04       	cpc	r14, r1
    4796:	f1 04       	cpc	r15, r1
    4798:	39 f4       	brne	.+14     	; 0x47a8 <__pack_f+0x13a>
    479a:	27 ff       	sbrs	r18, 7
    479c:	09 c0       	rjmp	.+18     	; 0x47b0 <__pack_f+0x142>
    479e:	20 5c       	subi	r18, 0xC0	; 192
    47a0:	3f 4f       	sbci	r19, 0xFF	; 255
    47a2:	4f 4f       	sbci	r20, 0xFF	; 255
    47a4:	5f 4f       	sbci	r21, 0xFF	; 255
    47a6:	04 c0       	rjmp	.+8      	; 0x47b0 <__pack_f+0x142>
    47a8:	21 5c       	subi	r18, 0xC1	; 193
    47aa:	3f 4f       	sbci	r19, 0xFF	; 255
    47ac:	4f 4f       	sbci	r20, 0xFF	; 255
    47ae:	5f 4f       	sbci	r21, 0xFF	; 255
    47b0:	57 ff       	sbrs	r21, 7
    47b2:	05 c0       	rjmp	.+10     	; 0x47be <__pack_f+0x150>
    47b4:	56 95       	lsr	r21
    47b6:	47 95       	ror	r20
    47b8:	37 95       	ror	r19
    47ba:	27 95       	ror	r18
    47bc:	01 96       	adiw	r24, 0x01	; 1
    47be:	97 e0       	ldi	r25, 0x07	; 7
    47c0:	56 95       	lsr	r21
    47c2:	47 95       	ror	r20
    47c4:	37 95       	ror	r19
    47c6:	27 95       	ror	r18
    47c8:	9a 95       	dec	r25
    47ca:	d1 f7       	brne	.-12     	; 0x47c0 <__pack_f+0x152>
    47cc:	05 c0       	rjmp	.+10     	; 0x47d8 <__pack_f+0x16a>
    47ce:	8f ef       	ldi	r24, 0xFF	; 255
    47d0:	90 e0       	ldi	r25, 0x00	; 0
    47d2:	20 e0       	ldi	r18, 0x00	; 0
    47d4:	30 e0       	ldi	r19, 0x00	; 0
    47d6:	a9 01       	movw	r20, r18
    47d8:	78 2f       	mov	r23, r24
    47da:	77 95       	ror	r23
    47dc:	77 27       	eor	r23, r23
    47de:	77 95       	ror	r23
    47e0:	14 2f       	mov	r17, r20
    47e2:	1f 77       	andi	r17, 0x7F	; 127
    47e4:	60 2f       	mov	r22, r16
    47e6:	67 95       	ror	r22
    47e8:	66 27       	eor	r22, r22
    47ea:	67 95       	ror	r22
    47ec:	86 95       	lsr	r24
    47ee:	f1 2f       	mov	r31, r17
    47f0:	f7 2b       	or	r31, r23
    47f2:	e8 2f       	mov	r30, r24
    47f4:	e6 2b       	or	r30, r22
    47f6:	62 2f       	mov	r22, r18
    47f8:	73 2f       	mov	r23, r19
    47fa:	8f 2f       	mov	r24, r31
    47fc:	9e 2f       	mov	r25, r30
    47fe:	1f 91       	pop	r17
    4800:	0f 91       	pop	r16
    4802:	ff 90       	pop	r15
    4804:	ef 90       	pop	r14
    4806:	df 90       	pop	r13
    4808:	cf 90       	pop	r12
    480a:	08 95       	ret

0000480c <__unpack_f>:
    480c:	fc 01       	movw	r30, r24
    480e:	db 01       	movw	r26, r22
    4810:	20 81       	ld	r18, Z
    4812:	31 81       	ldd	r19, Z+1	; 0x01
    4814:	82 81       	ldd	r24, Z+2	; 0x02
    4816:	48 2f       	mov	r20, r24
    4818:	4f 77       	andi	r20, 0x7F	; 127
    481a:	50 e0       	ldi	r21, 0x00	; 0
    481c:	98 2f       	mov	r25, r24
    481e:	99 1f       	adc	r25, r25
    4820:	99 27       	eor	r25, r25
    4822:	99 1f       	adc	r25, r25
    4824:	63 81       	ldd	r22, Z+3	; 0x03
    4826:	86 2f       	mov	r24, r22
    4828:	88 0f       	add	r24, r24
    482a:	89 2b       	or	r24, r25
    482c:	90 e0       	ldi	r25, 0x00	; 0
    482e:	66 1f       	adc	r22, r22
    4830:	66 27       	eor	r22, r22
    4832:	66 1f       	adc	r22, r22
    4834:	11 96       	adiw	r26, 0x01	; 1
    4836:	6c 93       	st	X, r22
    4838:	11 97       	sbiw	r26, 0x01	; 1
    483a:	00 97       	sbiw	r24, 0x00	; 0
    483c:	69 f5       	brne	.+90     	; 0x4898 <__unpack_f+0x8c>
    483e:	21 15       	cp	r18, r1
    4840:	31 05       	cpc	r19, r1
    4842:	41 05       	cpc	r20, r1
    4844:	51 05       	cpc	r21, r1
    4846:	11 f4       	brne	.+4      	; 0x484c <__unpack_f+0x40>
    4848:	82 e0       	ldi	r24, 0x02	; 2
    484a:	2f c0       	rjmp	.+94     	; 0x48aa <__unpack_f+0x9e>
    484c:	82 e8       	ldi	r24, 0x82	; 130
    484e:	9f ef       	ldi	r25, 0xFF	; 255
    4850:	13 96       	adiw	r26, 0x03	; 3
    4852:	9c 93       	st	X, r25
    4854:	8e 93       	st	-X, r24
    4856:	12 97       	sbiw	r26, 0x02	; 2
    4858:	67 e0       	ldi	r22, 0x07	; 7
    485a:	22 0f       	add	r18, r18
    485c:	33 1f       	adc	r19, r19
    485e:	44 1f       	adc	r20, r20
    4860:	55 1f       	adc	r21, r21
    4862:	6a 95       	dec	r22
    4864:	d1 f7       	brne	.-12     	; 0x485a <__unpack_f+0x4e>
    4866:	83 e0       	ldi	r24, 0x03	; 3
    4868:	8c 93       	st	X, r24
    486a:	0d c0       	rjmp	.+26     	; 0x4886 <__unpack_f+0x7a>
    486c:	22 0f       	add	r18, r18
    486e:	33 1f       	adc	r19, r19
    4870:	44 1f       	adc	r20, r20
    4872:	55 1f       	adc	r21, r21
    4874:	12 96       	adiw	r26, 0x02	; 2
    4876:	8d 91       	ld	r24, X+
    4878:	9c 91       	ld	r25, X
    487a:	13 97       	sbiw	r26, 0x03	; 3
    487c:	01 97       	sbiw	r24, 0x01	; 1
    487e:	13 96       	adiw	r26, 0x03	; 3
    4880:	9c 93       	st	X, r25
    4882:	8e 93       	st	-X, r24
    4884:	12 97       	sbiw	r26, 0x02	; 2
    4886:	20 30       	cpi	r18, 0x00	; 0
    4888:	80 e0       	ldi	r24, 0x00	; 0
    488a:	38 07       	cpc	r19, r24
    488c:	80 e0       	ldi	r24, 0x00	; 0
    488e:	48 07       	cpc	r20, r24
    4890:	80 e4       	ldi	r24, 0x40	; 64
    4892:	58 07       	cpc	r21, r24
    4894:	58 f3       	brcs	.-42     	; 0x486c <__unpack_f+0x60>
    4896:	22 c0       	rjmp	.+68     	; 0x48dc <__unpack_f+0xd0>
    4898:	8f 3f       	cpi	r24, 0xFF	; 255
    489a:	91 05       	cpc	r25, r1
    489c:	79 f4       	brne	.+30     	; 0x48bc <__unpack_f+0xb0>
    489e:	21 15       	cp	r18, r1
    48a0:	31 05       	cpc	r19, r1
    48a2:	41 05       	cpc	r20, r1
    48a4:	51 05       	cpc	r21, r1
    48a6:	19 f4       	brne	.+6      	; 0x48ae <__unpack_f+0xa2>
    48a8:	84 e0       	ldi	r24, 0x04	; 4
    48aa:	8c 93       	st	X, r24
    48ac:	08 95       	ret
    48ae:	44 ff       	sbrs	r20, 4
    48b0:	03 c0       	rjmp	.+6      	; 0x48b8 <__unpack_f+0xac>
    48b2:	81 e0       	ldi	r24, 0x01	; 1
    48b4:	8c 93       	st	X, r24
    48b6:	12 c0       	rjmp	.+36     	; 0x48dc <__unpack_f+0xd0>
    48b8:	1c 92       	st	X, r1
    48ba:	10 c0       	rjmp	.+32     	; 0x48dc <__unpack_f+0xd0>
    48bc:	8f 57       	subi	r24, 0x7F	; 127
    48be:	90 40       	sbci	r25, 0x00	; 0
    48c0:	13 96       	adiw	r26, 0x03	; 3
    48c2:	9c 93       	st	X, r25
    48c4:	8e 93       	st	-X, r24
    48c6:	12 97       	sbiw	r26, 0x02	; 2
    48c8:	83 e0       	ldi	r24, 0x03	; 3
    48ca:	8c 93       	st	X, r24
    48cc:	87 e0       	ldi	r24, 0x07	; 7
    48ce:	22 0f       	add	r18, r18
    48d0:	33 1f       	adc	r19, r19
    48d2:	44 1f       	adc	r20, r20
    48d4:	55 1f       	adc	r21, r21
    48d6:	8a 95       	dec	r24
    48d8:	d1 f7       	brne	.-12     	; 0x48ce <__unpack_f+0xc2>
    48da:	50 64       	ori	r21, 0x40	; 64
    48dc:	14 96       	adiw	r26, 0x04	; 4
    48de:	2d 93       	st	X+, r18
    48e0:	3d 93       	st	X+, r19
    48e2:	4d 93       	st	X+, r20
    48e4:	5c 93       	st	X, r21
    48e6:	17 97       	sbiw	r26, 0x07	; 7
    48e8:	08 95       	ret

000048ea <__fpcmp_parts_f>:
    48ea:	ef 92       	push	r14
    48ec:	ff 92       	push	r15
    48ee:	0f 93       	push	r16
    48f0:	1f 93       	push	r17
    48f2:	fc 01       	movw	r30, r24
    48f4:	db 01       	movw	r26, r22
    48f6:	80 81       	ld	r24, Z
    48f8:	82 30       	cpi	r24, 0x02	; 2
    48fa:	08 f4       	brcc	.+2      	; 0x48fe <__fpcmp_parts_f+0x14>
    48fc:	47 c0       	rjmp	.+142    	; 0x498c <__fpcmp_parts_f+0xa2>
    48fe:	9c 91       	ld	r25, X
    4900:	92 30       	cpi	r25, 0x02	; 2
    4902:	08 f4       	brcc	.+2      	; 0x4906 <__fpcmp_parts_f+0x1c>
    4904:	43 c0       	rjmp	.+134    	; 0x498c <__fpcmp_parts_f+0xa2>
    4906:	84 30       	cpi	r24, 0x04	; 4
    4908:	51 f4       	brne	.+20     	; 0x491e <__fpcmp_parts_f+0x34>
    490a:	81 81       	ldd	r24, Z+1	; 0x01
    490c:	94 30       	cpi	r25, 0x04	; 4
    490e:	a1 f5       	brne	.+104    	; 0x4978 <__fpcmp_parts_f+0x8e>
    4910:	11 96       	adiw	r26, 0x01	; 1
    4912:	2c 91       	ld	r18, X
    4914:	11 97       	sbiw	r26, 0x01	; 1
    4916:	30 e0       	ldi	r19, 0x00	; 0
    4918:	28 1b       	sub	r18, r24
    491a:	31 09       	sbc	r19, r1
    491c:	3f c0       	rjmp	.+126    	; 0x499c <__fpcmp_parts_f+0xb2>
    491e:	94 30       	cpi	r25, 0x04	; 4
    4920:	21 f0       	breq	.+8      	; 0x492a <__fpcmp_parts_f+0x40>
    4922:	82 30       	cpi	r24, 0x02	; 2
    4924:	31 f4       	brne	.+12     	; 0x4932 <__fpcmp_parts_f+0x48>
    4926:	92 30       	cpi	r25, 0x02	; 2
    4928:	b9 f1       	breq	.+110    	; 0x4998 <__fpcmp_parts_f+0xae>
    492a:	11 96       	adiw	r26, 0x01	; 1
    492c:	8c 91       	ld	r24, X
    492e:	11 97       	sbiw	r26, 0x01	; 1
    4930:	2b c0       	rjmp	.+86     	; 0x4988 <__fpcmp_parts_f+0x9e>
    4932:	81 81       	ldd	r24, Z+1	; 0x01
    4934:	92 30       	cpi	r25, 0x02	; 2
    4936:	01 f1       	breq	.+64     	; 0x4978 <__fpcmp_parts_f+0x8e>
    4938:	11 96       	adiw	r26, 0x01	; 1
    493a:	9c 91       	ld	r25, X
    493c:	11 97       	sbiw	r26, 0x01	; 1
    493e:	89 17       	cp	r24, r25
    4940:	d9 f4       	brne	.+54     	; 0x4978 <__fpcmp_parts_f+0x8e>
    4942:	42 81       	ldd	r20, Z+2	; 0x02
    4944:	53 81       	ldd	r21, Z+3	; 0x03
    4946:	12 96       	adiw	r26, 0x02	; 2
    4948:	2d 91       	ld	r18, X+
    494a:	3c 91       	ld	r19, X
    494c:	13 97       	sbiw	r26, 0x03	; 3
    494e:	24 17       	cp	r18, r20
    4950:	35 07       	cpc	r19, r21
    4952:	94 f0       	brlt	.+36     	; 0x4978 <__fpcmp_parts_f+0x8e>
    4954:	42 17       	cp	r20, r18
    4956:	53 07       	cpc	r21, r19
    4958:	bc f0       	brlt	.+46     	; 0x4988 <__fpcmp_parts_f+0x9e>
    495a:	e4 80       	ldd	r14, Z+4	; 0x04
    495c:	f5 80       	ldd	r15, Z+5	; 0x05
    495e:	06 81       	ldd	r16, Z+6	; 0x06
    4960:	17 81       	ldd	r17, Z+7	; 0x07
    4962:	14 96       	adiw	r26, 0x04	; 4
    4964:	2d 91       	ld	r18, X+
    4966:	3d 91       	ld	r19, X+
    4968:	4d 91       	ld	r20, X+
    496a:	5c 91       	ld	r21, X
    496c:	17 97       	sbiw	r26, 0x07	; 7
    496e:	2e 15       	cp	r18, r14
    4970:	3f 05       	cpc	r19, r15
    4972:	40 07       	cpc	r20, r16
    4974:	51 07       	cpc	r21, r17
    4976:	18 f4       	brcc	.+6      	; 0x497e <__fpcmp_parts_f+0x94>
    4978:	88 23       	and	r24, r24
    497a:	41 f0       	breq	.+16     	; 0x498c <__fpcmp_parts_f+0xa2>
    497c:	0a c0       	rjmp	.+20     	; 0x4992 <__fpcmp_parts_f+0xa8>
    497e:	e2 16       	cp	r14, r18
    4980:	f3 06       	cpc	r15, r19
    4982:	04 07       	cpc	r16, r20
    4984:	15 07       	cpc	r17, r21
    4986:	40 f4       	brcc	.+16     	; 0x4998 <__fpcmp_parts_f+0xae>
    4988:	88 23       	and	r24, r24
    498a:	19 f0       	breq	.+6      	; 0x4992 <__fpcmp_parts_f+0xa8>
    498c:	21 e0       	ldi	r18, 0x01	; 1
    498e:	30 e0       	ldi	r19, 0x00	; 0
    4990:	05 c0       	rjmp	.+10     	; 0x499c <__fpcmp_parts_f+0xb2>
    4992:	2f ef       	ldi	r18, 0xFF	; 255
    4994:	3f ef       	ldi	r19, 0xFF	; 255
    4996:	02 c0       	rjmp	.+4      	; 0x499c <__fpcmp_parts_f+0xb2>
    4998:	20 e0       	ldi	r18, 0x00	; 0
    499a:	30 e0       	ldi	r19, 0x00	; 0
    499c:	c9 01       	movw	r24, r18
    499e:	1f 91       	pop	r17
    49a0:	0f 91       	pop	r16
    49a2:	ff 90       	pop	r15
    49a4:	ef 90       	pop	r14
    49a6:	08 95       	ret

000049a8 <_GLOBAL__I_compass>:

#include "main.h"

// Need to test on hardware
HMC6352compass compass;
    49a8:	82 e9       	ldi	r24, 0x92	; 146
    49aa:	92 e0       	ldi	r25, 0x02	; 2
    49ac:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <_ZN14HMC6352compassC1Ev>
     * Takes the gain for each term, P, I, D and assignes 1 to any non-parameterized terms.
     *
     * @ingroup PID-API
     */
	PID(T p=1, T i=1, T d=1){
		_target = 0;
    49b0:	10 92 97 02 	sts	0x0297, r1
    49b4:	10 92 96 02 	sts	0x0296, r1
		_last_target = 0;
    49b8:	10 92 99 02 	sts	0x0299, r1
    49bc:	10 92 98 02 	sts	0x0298, r1
		_pid_gain.pgain = p;
    49c0:	81 e0       	ldi	r24, 0x01	; 1
    49c2:	90 e0       	ldi	r25, 0x00	; 0
    49c4:	90 93 a9 02 	sts	0x02A9, r25
    49c8:	80 93 a8 02 	sts	0x02A8, r24
		_pid_gain.igain = i;
    49cc:	90 93 ab 02 	sts	0x02AB, r25
    49d0:	80 93 aa 02 	sts	0x02AA, r24
		_pid_gain.dgain = d;
    49d4:	90 93 ad 02 	sts	0x02AD, r25
    49d8:	80 93 ac 02 	sts	0x02AC, r24
PID <uint16_t>pid;

// Used elsewhere - should be working
EEPROMClass EEPROM;
// Objects for the left and right motors.  PWM frequency is 64kHz
AF_DCMotor motor_l(3, MOTOR12_64KHZ);
    49dc:	8f ea       	ldi	r24, 0xAF	; 175
    49de:	92 e0       	ldi	r25, 0x02	; 2
    49e0:	63 e0       	ldi	r22, 0x03	; 3
    49e2:	41 e0       	ldi	r20, 0x01	; 1
    49e4:	0e 94 89 09 	call	0x1312	; 0x1312 <_ZN10AF_DCMotorC1Ehh>
AF_DCMotor motor_r(4, MOTOR12_64KHZ);
    49e8:	81 eb       	ldi	r24, 0xB1	; 177
    49ea:	92 e0       	ldi	r25, 0x02	; 2
    49ec:	64 e0       	ldi	r22, 0x04	; 4
    49ee:	41 e0       	ldi	r20, 0x01	; 1
    49f0:	0e 94 89 09 	call	0x1312	; 0x1312 <_ZN10AF_DCMotorC1Ehh>
// 0.9 degrees/step stepper motor (100 steps = 180 degrees)
AF_Stepper motor_s(200, 1);
    49f4:	83 eb       	ldi	r24, 0xB3	; 179
    49f6:	92 e0       	ldi	r25, 0x02	; 2
    49f8:	68 ec       	ldi	r22, 0xC8	; 200
    49fa:	70 e0       	ldi	r23, 0x00	; 0
    49fc:	41 e0       	ldi	r20, 0x01	; 1
    49fe:	0e 94 85 08 	call	0x110a	; 0x110a <_ZN10AF_StepperC1Ejh>
		// call the program
		//loop();
	}
        
	return 0;
}
    4a02:	08 95       	ret

00004a04 <main>:
//int minWidth=3;

int main(void)
{
    // Must be called to configure delay code within Arduino IDE architecture
	init();
    4a04:	0e 94 08 11 	call	0x2210	; 0x2210 <init>
	// Calibrate the compass if needs be.
	//compass.enterCalibration();
		
	scanEnvironment(room_map);
    4a08:	8f eb       	ldi	r24, 0xBF	; 191
    4a0a:	92 e0       	ldi	r25, 0x02	; 2
    4a0c:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <_Z15scanEnvironmentPj>

	// CODE FROM IRONRAD
	//setup();
	// Setup the IO test led
	pinMode(ONBOARD_LED_PIN, OUTPUT);      // sets the digital pin as output
    4a10:	8d e0       	ldi	r24, 0x0D	; 13
    4a12:	61 e0       	ldi	r22, 0x01	; 1
    4a14:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
	//Serial.begin(57600);

	// enter the main processing loop
	while(1){
		digitalWrite(ONBOARD_LED_PIN, HIGH);   // sets the LED on
    4a18:	8d e0       	ldi	r24, 0x0D	; 13
    4a1a:	61 e0       	ldi	r22, 0x01	; 1
    4a1c:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
  		delay(1000);                  // waits for a second
    4a20:	68 ee       	ldi	r22, 0xE8	; 232
    4a22:	73 e0       	ldi	r23, 0x03	; 3
    4a24:	80 e0       	ldi	r24, 0x00	; 0
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <delay>
  		digitalWrite(ONBOARD_LED_PIN, LOW);    // sets the LED off
    4a2c:	8d e0       	ldi	r24, 0x0D	; 13
    4a2e:	60 e0       	ldi	r22, 0x00	; 0
    4a30:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
  		delay(1000);
    4a34:	68 ee       	ldi	r22, 0xE8	; 232
    4a36:	73 e0       	ldi	r23, 0x03	; 3
    4a38:	80 e0       	ldi	r24, 0x00	; 0
    4a3a:	90 e0       	ldi	r25, 0x00	; 0
    4a3c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <delay>
		Serial.println("We are here again!");
    4a40:	86 ed       	ldi	r24, 0xD6	; 214
    4a42:	94 e0       	ldi	r25, 0x04	; 4
    4a44:	60 e0       	ldi	r22, 0x00	; 0
    4a46:	71 e0       	ldi	r23, 0x01	; 1
    4a48:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <_ZN5Print7printlnEPKc>
    4a4c:	e5 cf       	rjmp	.-54     	; 0x4a18 <main+0x14>

00004a4e <_ZN14HMC6352compass14getLastHeadingEv>:
	// return the heading
	return return_value;
}

uint16_t HMC6352compass::getLastHeading()
{
    4a4e:	fc 01       	movw	r30, r24
	return _last_heading;
}
    4a50:	82 81       	ldd	r24, Z+2	; 0x02
    4a52:	93 81       	ldd	r25, Z+3	; 0x03
    4a54:	08 95       	ret

00004a56 <_ZN14HMC6352compass16enterCalibrationEv>:

void HMC6352compass::enterCalibration()
{
    4a56:	ef 92       	push	r14
    4a58:	ff 92       	push	r15
    4a5a:	0f 93       	push	r16
    4a5c:	1f 93       	push	r17
    4a5e:	cf 93       	push	r28
    4a60:	df 93       	push	r29
    4a62:	ec 01       	movw	r28, r24
	// send the calibration command (write)
	_wire.beginTransmission(_address & 0xfe);
    4a64:	8c 01       	movw	r16, r24
    4a66:	69 81       	ldd	r22, Y+1	; 0x01
    4a68:	70 e0       	ldi	r23, 0x00	; 0
    4a6a:	6e 7f       	andi	r22, 0xFE	; 254
    4a6c:	70 70       	andi	r23, 0x00	; 0
    4a6e:	7e 01       	movw	r14, r28
    4a70:	9f 2d       	mov	r25, r15
    4a72:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEi>
	// The "Calibrate" command
	_wire.send('C');
    4a76:	ce 01       	movw	r24, r28
    4a78:	63 e4       	ldi	r22, 0x43	; 67
    4a7a:	70 e0       	ldi	r23, 0x00	; 0
    4a7c:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <_ZN7TwoWire4sendEi>
	// A bus stop state
  	_wire.endTransmission();
    4a80:	ce 01       	movw	r24, r28
    4a82:	0e 94 14 10 	call	0x2028	; 0x2028 <_ZN7TwoWire15endTransmissionEv>
    4a86:	ee 24       	eor	r14, r14
    4a88:	ff 24       	eor	r15, r15

	// start the calibrate loop - toggle the status LED
	for (int i=0; i<20; i++){
		digitalWrite(ONBOARD_LED_PIN, HIGH);
    4a8a:	8d e0       	ldi	r24, 0x0D	; 13
    4a8c:	61 e0       	ldi	r22, 0x01	; 1
    4a8e:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
		delay(500);
    4a92:	64 ef       	ldi	r22, 0xF4	; 244
    4a94:	71 e0       	ldi	r23, 0x01	; 1
    4a96:	80 e0       	ldi	r24, 0x00	; 0
    4a98:	90 e0       	ldi	r25, 0x00	; 0
    4a9a:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <delay>
		digitalWrite(ONBOARD_LED_PIN, LOW);
    4a9e:	8d e0       	ldi	r24, 0x0D	; 13
    4aa0:	60 e0       	ldi	r22, 0x00	; 0
    4aa2:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
		delay(500);
    4aa6:	64 ef       	ldi	r22, 0xF4	; 244
    4aa8:	71 e0       	ldi	r23, 0x01	; 1
    4aaa:	80 e0       	ldi	r24, 0x00	; 0
    4aac:	90 e0       	ldi	r25, 0x00	; 0
    4aae:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <delay>
	_wire.send('C');
	// A bus stop state
  	_wire.endTransmission();

	// start the calibrate loop - toggle the status LED
	for (int i=0; i<20; i++){
    4ab2:	08 94       	sec
    4ab4:	e1 1c       	adc	r14, r1
    4ab6:	f1 1c       	adc	r15, r1
    4ab8:	24 e1       	ldi	r18, 0x14	; 20
    4aba:	e2 16       	cp	r14, r18
    4abc:	f1 04       	cpc	r15, r1
    4abe:	29 f7       	brne	.-54     	; 0x4a8a <_ZN14HMC6352compass16enterCalibrationEv+0x34>
		digitalWrite(ONBOARD_LED_PIN, LOW);
		delay(500);
	}

	// send the calibration command (write)
	_wire.beginTransmission(_address & 0xfe);
    4ac0:	69 81       	ldd	r22, Y+1	; 0x01
    4ac2:	70 e0       	ldi	r23, 0x00	; 0
    4ac4:	6e 7f       	andi	r22, 0xFE	; 254
    4ac6:	70 70       	andi	r23, 0x00	; 0
    4ac8:	c8 01       	movw	r24, r16
    4aca:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEi>
	// The "Exit" command
	_wire.send('E');
    4ace:	c8 01       	movw	r24, r16
    4ad0:	65 e4       	ldi	r22, 0x45	; 69
    4ad2:	70 e0       	ldi	r23, 0x00	; 0
    4ad4:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <_ZN7TwoWire4sendEi>
	// A bus stop state
  	_wire.endTransmission();
    4ad8:	c8 01       	movw	r24, r16
    4ada:	0e 94 14 10 	call	0x2028	; 0x2028 <_ZN7TwoWire15endTransmissionEv>
	// make sure the LED is off
	digitalWrite(ONBOARD_LED_PIN, LOW);
    4ade:	8d e0       	ldi	r24, 0x0D	; 13
    4ae0:	60 e0       	ldi	r22, 0x00	; 0
    4ae2:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
}
    4ae6:	df 91       	pop	r29
    4ae8:	cf 91       	pop	r28
    4aea:	1f 91       	pop	r17
    4aec:	0f 91       	pop	r16
    4aee:	ff 90       	pop	r15
    4af0:	ef 90       	pop	r14
    4af2:	08 95       	ret

00004af4 <_ZN14HMC6352compass10getHeadingEv>:
	// Turn the LED off when this routine is complete
	digitalWrite(ONBOARD_LED_PIN, LOW); 
}

uint16_t HMC6352compass::getHeading()
{
    4af4:	ef 92       	push	r14
    4af6:	ff 92       	push	r15
    4af8:	0f 93       	push	r16
    4afa:	1f 93       	push	r17
    4afc:	cf 93       	push	r28
    4afe:	df 93       	push	r29
    4b00:	ec 01       	movw	r28, r24
	uint16_t return_value;
	// Turn the LED on
	digitalWrite(ONBOARD_LED_PIN, HIGH);
    4b02:	8d e0       	ldi	r24, 0x0D	; 13
    4b04:	61 e0       	ldi	r22, 0x01	; 1
    4b06:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
	// Start the read process
	_wire.beginTransmission(_address);
    4b0a:	8e 01       	movw	r16, r28
    4b0c:	ce 01       	movw	r24, r28
    4b0e:	69 81       	ldd	r22, Y+1	; 0x01
    4b10:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <_ZN7TwoWire17beginTransmissionEh>
	// The "Get Data" command
	_wire.send('A');
    4b14:	ce 01       	movw	r24, r28
    4b16:	61 e4       	ldi	r22, 0x41	; 65
    4b18:	70 e0       	ldi	r23, 0x00	; 0
    4b1a:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <_ZN7TwoWire4sendEi>
	// A bus stop state
  	_wire.endTransmission();
    4b1e:	ce 01       	movw	r24, r28
    4b20:	0e 94 14 10 	call	0x2028	; 0x2028 <_ZN7TwoWire15endTransmissionEv>
	// wait for the device to calculate (should be at least 6000uS)
	delay(6);
    4b24:	66 e0       	ldi	r22, 0x06	; 6
    4b26:	70 e0       	ldi	r23, 0x00	; 0
    4b28:	80 e0       	ldi	r24, 0x00	; 0
    4b2a:	90 e0       	ldi	r25, 0x00	; 0
    4b2c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <delay>
	// get the data from the compass
	_wire.requestFrom(_address, 2);
    4b30:	69 81       	ldd	r22, Y+1	; 0x01
    4b32:	ce 01       	movw	r24, r28
    4b34:	70 e0       	ldi	r23, 0x00	; 0
    4b36:	42 e0       	ldi	r20, 0x02	; 2
    4b38:	50 e0       	ldi	r21, 0x00	; 0
    4b3a:	0e 94 31 10 	call	0x2062	; 0x2062 <_ZN7TwoWire11requestFromEii>
	// wait until something is available
	while(!_wire.available());
    4b3e:	c8 01       	movw	r24, r16
    4b40:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <_ZN7TwoWire9availableEv>
    4b44:	88 23       	and	r24, r24
    4b46:	d9 f3       	breq	.-10     	; 0x4b3e <_ZN14HMC6352compass10getHeadingEv+0x4a>
	// justify the result
	return_value = (_wire.receive() << 8);
    4b48:	c8 01       	movw	r24, r16
    4b4a:	0e 94 57 0f 	call	0x1eae	; 0x1eae <_ZN7TwoWire7receiveEv>
    4b4e:	f8 2e       	mov	r15, r24
	// wait for the next byte
	while(!_wire.available());
    4b50:	c8 01       	movw	r24, r16
    4b52:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <_ZN7TwoWire9availableEv>
    4b56:	88 23       	and	r24, r24
    4b58:	d9 f3       	breq	.-10     	; 0x4b50 <_ZN14HMC6352compass10getHeadingEv+0x5c>
	// mask the new read with the last read
	return_value |= _wire.receive();
    4b5a:	c8 01       	movw	r24, r16
    4b5c:	0e 94 57 0f 	call	0x1eae	; 0x1eae <_ZN7TwoWire7receiveEv>
	// get the data from the compass
	_wire.requestFrom(_address, 2);
	// wait until something is available
	while(!_wire.available());
	// justify the result
	return_value = (_wire.receive() << 8);
    4b60:	3f 2d       	mov	r19, r15
    4b62:	20 e0       	ldi	r18, 0x00	; 0
	// wait for the next byte
	while(!_wire.available());
	// mask the new read with the last read
	return_value |= _wire.receive();
    4b64:	08 2f       	mov	r16, r24
    4b66:	10 e0       	ldi	r17, 0x00	; 0
    4b68:	02 2b       	or	r16, r18
    4b6a:	13 2b       	or	r17, r19
	// store the last heading
	_last_heading = return_value;
    4b6c:	1b 83       	std	Y+3, r17	; 0x03
    4b6e:	0a 83       	std	Y+2, r16	; 0x02
	// Turn the LED off
	digitalWrite(ONBOARD_LED_PIN, LOW);
    4b70:	8d e0       	ldi	r24, 0x0D	; 13
    4b72:	60 e0       	ldi	r22, 0x00	; 0
    4b74:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
	// return the heading
	return return_value;
}
    4b78:	c8 01       	movw	r24, r16
    4b7a:	df 91       	pop	r29
    4b7c:	cf 91       	pop	r28
    4b7e:	1f 91       	pop	r17
    4b80:	0f 91       	pop	r16
    4b82:	ff 90       	pop	r15
    4b84:	ef 90       	pop	r14
    4b86:	08 95       	ret

00004b88 <_ZN14HMC6352compassC1Ev>:

#include "compass.h"

HMC6352compass::HMC6352compass()
    4b88:	ef 92       	push	r14
    4b8a:	ff 92       	push	r15
    4b8c:	cf 93       	push	r28
    4b8e:	df 93       	push	r29
    4b90:	ec 01       	movw	r28, r24
    4b92:	7e 01       	movw	r14, r28
    4b94:	9f 2d       	mov	r25, r15
    4b96:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <_ZN7TwoWireC1Ev>
{
	// define the read address (data sheet specifies 0x43) TWI does a << 1 so 0x21 = 0x43
	 _address = 0x21;
    4b9a:	81 e2       	ldi	r24, 0x21	; 33
    4b9c:	89 83       	std	Y+1, r24	; 0x01
	// use the LED onboard as an indicator that we are doing something
	pinMode(ONBOARD_LED_PIN, OUTPUT);
    4b9e:	8d e0       	ldi	r24, 0x0D	; 13
    4ba0:	61 e0       	ldi	r22, 0x01	; 1
    4ba2:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
	digitalWrite(ONBOARD_LED_PIN, HIGH); 
    4ba6:	8d e0       	ldi	r24, 0x0D	; 13
    4ba8:	61 e0       	ldi	r22, 0x01	; 1
    4baa:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
	// start the I2C peripheral as a master
	_wire.begin();
    4bae:	ce 01       	movw	r24, r28
    4bb0:	0e 94 34 10 	call	0x2068	; 0x2068 <_ZN7TwoWire5beginEv>
	// Turn the LED off when this routine is complete
	digitalWrite(ONBOARD_LED_PIN, LOW); 
    4bb4:	8d e0       	ldi	r24, 0x0D	; 13
    4bb6:	60 e0       	ldi	r22, 0x00	; 0
    4bb8:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
}
    4bbc:	df 91       	pop	r29
    4bbe:	cf 91       	pop	r28
    4bc0:	ff 90       	pop	r15
    4bc2:	ef 90       	pop	r14
    4bc4:	08 95       	ret

00004bc6 <_ZN14HMC6352compassC2Ev>:

#include "compass.h"

HMC6352compass::HMC6352compass()
    4bc6:	ef 92       	push	r14
    4bc8:	ff 92       	push	r15
    4bca:	cf 93       	push	r28
    4bcc:	df 93       	push	r29
    4bce:	ec 01       	movw	r28, r24
    4bd0:	7e 01       	movw	r14, r28
    4bd2:	9f 2d       	mov	r25, r15
    4bd4:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <_ZN7TwoWireC1Ev>
{
	// define the read address (data sheet specifies 0x43) TWI does a << 1 so 0x21 = 0x43
	 _address = 0x21;
    4bd8:	81 e2       	ldi	r24, 0x21	; 33
    4bda:	89 83       	std	Y+1, r24	; 0x01
	// use the LED onboard as an indicator that we are doing something
	pinMode(ONBOARD_LED_PIN, OUTPUT);
    4bdc:	8d e0       	ldi	r24, 0x0D	; 13
    4bde:	61 e0       	ldi	r22, 0x01	; 1
    4be0:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <pinMode>
	digitalWrite(ONBOARD_LED_PIN, HIGH); 
    4be4:	8d e0       	ldi	r24, 0x0D	; 13
    4be6:	61 e0       	ldi	r22, 0x01	; 1
    4be8:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
	// start the I2C peripheral as a master
	_wire.begin();
    4bec:	ce 01       	movw	r24, r28
    4bee:	0e 94 34 10 	call	0x2068	; 0x2068 <_ZN7TwoWire5beginEv>
	// Turn the LED off when this routine is complete
	digitalWrite(ONBOARD_LED_PIN, LOW); 
    4bf2:	8d e0       	ldi	r24, 0x0D	; 13
    4bf4:	60 e0       	ldi	r22, 0x00	; 0
    4bf6:	0e 94 2e 12 	call	0x245c	; 0x245c <digitalWrite>
}
    4bfa:	df 91       	pop	r29
    4bfc:	cf 91       	pop	r28
    4bfe:	ff 90       	pop	r15
    4c00:	ef 90       	pop	r14
    4c02:	08 95       	ret

00004c04 <_Z11analyzeRoomPj>:
		}
	}

	// return the heading in degrees to the most detectable object
	return return_value;
}
    4c04:	8f ef       	ldi	r24, 0xFF	; 255
    4c06:	9f ef       	ldi	r25, 0xFF	; 255
    4c08:	08 95       	ret

00004c0a <_Z7readADCj>:

// ISSUES WITH SOME OF THE CODE HERE
int16_t readADC(uint16_t pin)
{
    4c0a:	ef 92       	push	r14
    4c0c:	ff 92       	push	r15
    4c0e:	0f 93       	push	r16
    4c10:	1f 93       	push	r17
    4c12:	cf 93       	push	r28
    4c14:	df 93       	push	r29
    4c16:	f8 2e       	mov	r15, r24
    4c18:	00 e0       	ldi	r16, 0x00	; 0
    4c1a:	10 e0       	ldi	r17, 0x00	; 0
    4c1c:	c0 e0       	ldi	r28, 0x00	; 0
    4c1e:	d0 e0       	ldi	r29, 0x00	; 0
	// now make it the average
	//threshold /= threshold_amount;
	
	// and for the real calculation
	for (uint8_t i=1; i<=sample_amout; i++){
    	x_i = analogRead(pin);
    4c20:	8f 2d       	mov	r24, r15
    4c22:	0e 94 46 11 	call	0x228c	; 0x228c <analogRead>
	// return the heading in degrees to the most detectable object
	return return_value;
}

// ISSUES WITH SOME OF THE CODE HERE
int16_t readADC(uint16_t pin)
    4c26:	0f 5f       	subi	r16, 0xFF	; 255
    4c28:	1f 4f       	sbci	r17, 0xFF	; 255
    	x_i = analogRead(pin);
		// Check if the reading is within the accepted bounds
		//if ( (x_i < (threshold+25)) && (x_i > (threshold-25)) ){
			// rapid calculation method - http://en.wikipedia.org/wiki/Standard_deviation
			// accumulate the result
			A_1 = A_0 + (( x_i - A_0 ) / i);
    4c2a:	8c 1b       	sub	r24, r28
    4c2c:	9d 0b       	sbc	r25, r29
    4c2e:	b8 01       	movw	r22, r16
    4c30:	0e 94 27 29 	call	0x524e	; 0x524e <__divmodhi4>
    4c34:	c6 0f       	add	r28, r22
    4c36:	d7 1f       	adc	r29, r23
  	
	// now make it the average
	//threshold /= threshold_amount;
	
	// and for the real calculation
	for (uint8_t i=1; i<=sample_amout; i++){
    4c38:	04 36       	cpi	r16, 0x64	; 100
    4c3a:	11 05       	cpc	r17, r1
    4c3c:	89 f7       	brne	.-30     	; 0x4c20 <_Z7readADCj+0x16>
		//}
	}

	// cast and return the result
	return A_1;
}
    4c3e:	ce 01       	movw	r24, r28
    4c40:	df 91       	pop	r29
    4c42:	cf 91       	pop	r28
    4c44:	1f 91       	pop	r17
    4c46:	0f 91       	pop	r16
    4c48:	ff 90       	pop	r15
    4c4a:	ef 90       	pop	r14
    4c4c:	08 95       	ret

00004c4e <_Z15scanEnvironmentPj>:
	motor_l.setSpeed(STRAIGHT_DUTY_CYCLE);
  	motor_r.setSpeed(STRAIGHT_DUTY_CYCLE);
}

void scanEnvironment(uint16_t* map)
{	
    4c4e:	ef 92       	push	r14
    4c50:	ff 92       	push	r15
    4c52:	0f 93       	push	r16
    4c54:	1f 93       	push	r17
    4c56:	cf 93       	push	r28
    4c58:	df 93       	push	r29
    4c5a:	f8 2e       	mov	r15, r24
    4c5c:	09 2f       	mov	r16, r25
	// setup the a/d peripheral
	analogReference(EXTERNAL);
    4c5e:	80 e0       	ldi	r24, 0x00	; 0
    4c60:	0e 94 43 11 	call	0x2286	; 0x2286 <analogReference>
	debug.enable();
    4c64:	8f e4       	ldi	r24, 0x4F	; 79
    4c66:	94 e0       	ldi	r25, 0x04	; 4
    4c68:	0e 94 41 28 	call	0x5082	; 0x5082 <_ZN15Cmissionconsole6enableEv>
    4c6c:	11 e0       	ldi	r17, 0x01	; 1

	// From center - adjust to 180 degrees in a direction
	for(uint8_t cnt=1; cnt<=30; cnt++){
		// move the scan platform
		motor_s.onestep(FORWARD, SINGLE);
    4c6e:	83 eb       	ldi	r24, 0xB3	; 179
    4c70:	92 e0       	ldi	r25, 0x02	; 2
    4c72:	61 e0       	ldi	r22, 0x01	; 1
    4c74:	41 e0       	ldi	r20, 0x01	; 1
    4c76:	0e 94 c7 05 	call	0xb8e	; 0xb8e <_ZN10AF_Stepper7onestepEhh>
		delay(10);
    4c7a:	6a e0       	ldi	r22, 0x0A	; 10
    4c7c:	70 e0       	ldi	r23, 0x00	; 0
    4c7e:	80 e0       	ldi	r24, 0x00	; 0
    4c80:	90 e0       	ldi	r25, 0x00	; 0
    4c82:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <delay>
	// setup the a/d peripheral
	analogReference(EXTERNAL);
	debug.enable();

	// From center - adjust to 180 degrees in a direction
	for(uint8_t cnt=1; cnt<=30; cnt++){
    4c86:	1f 5f       	subi	r17, 0xFF	; 255
    4c88:	1f 31       	cpi	r17, 0x1F	; 31
    4c8a:	89 f7       	brne	.-30     	; 0x4c6e <_Z15scanEnvironmentPj+0x20>
    4c8c:	ef 2c       	mov	r14, r15
    4c8e:	e7 01       	movw	r28, r14
    4c90:	7e 01       	movw	r14, r28
    4c92:	f0 2e       	mov	r15, r16
    4c94:	e7 01       	movw	r28, r14
    4c96:	11 e0       	ldi	r17, 0x01	; 1
	}
	
	// now we can move back and start storing sensor data
	for(uint8_t cnt=1; cnt<=60; cnt++){
		// Take a measurement and store the result
		map[cnt-1] = pgm_read_word(&long_range_data[readADC(LONG_RANGE_IR_PIN)]);
    4c98:	83 e0       	ldi	r24, 0x03	; 3
    4c9a:	90 e0       	ldi	r25, 0x00	; 0
    4c9c:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <_Z7readADCj>
    4ca0:	fc 01       	movw	r30, r24
    4ca2:	ee 0f       	add	r30, r30
    4ca4:	ff 1f       	adc	r31, r31
    4ca6:	e6 50       	subi	r30, 0x06	; 6
    4ca8:	fe 4f       	sbci	r31, 0xFE	; 254
    4caa:	65 91       	lpm	r22, Z+
    4cac:	74 91       	lpm	r23, Z+
    4cae:	79 83       	std	Y+1, r23	; 0x01
    4cb0:	68 83       	st	Y, r22
		debug.adValue(map[cnt-1]);
    4cb2:	8f e4       	ldi	r24, 0x4F	; 79
    4cb4:	94 e0       	ldi	r25, 0x04	; 4
    4cb6:	0e 94 d5 28 	call	0x51aa	; 0x51aa <_ZN15Cmissionconsole7adValueEj>
		debug.longRangeIR(map[cnt-1]);
    4cba:	69 91       	ld	r22, Y+
    4cbc:	79 91       	ld	r23, Y+
    4cbe:	8f e4       	ldi	r24, 0x4F	; 79
    4cc0:	94 e0       	ldi	r25, 0x04	; 4
    4cc2:	0e 94 97 28 	call	0x512e	; 0x512e <_ZN15Cmissionconsole11longRangeIREj>
		// move the motor and do it again
		motor_s.onestep(BACKWARD, SINGLE);
    4cc6:	83 eb       	ldi	r24, 0xB3	; 179
    4cc8:	92 e0       	ldi	r25, 0x02	; 2
    4cca:	62 e0       	ldi	r22, 0x02	; 2
    4ccc:	41 e0       	ldi	r20, 0x01	; 1
    4cce:	0e 94 c7 05 	call	0xb8e	; 0xb8e <_ZN10AF_Stepper7onestepEhh>
		delay(100);
    4cd2:	64 e6       	ldi	r22, 0x64	; 100
    4cd4:	70 e0       	ldi	r23, 0x00	; 0
    4cd6:	80 e0       	ldi	r24, 0x00	; 0
    4cd8:	90 e0       	ldi	r25, 0x00	; 0
    4cda:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <delay>
		motor_s.onestep(FORWARD, SINGLE);
		delay(10);
	}
	
	// now we can move back and start storing sensor data
	for(uint8_t cnt=1; cnt<=60; cnt++){
    4cde:	1f 5f       	subi	r17, 0xFF	; 255
    4ce0:	1d 33       	cpi	r17, 0x3D	; 61
    4ce2:	d1 f6       	brne	.-76     	; 0x4c98 <_Z15scanEnvironmentPj+0x4a>
    4ce4:	11 e0       	ldi	r17, 0x01	; 1
	}

	// Return the scan platform to the home position
	for(uint8_t cnt=1; cnt<=30; cnt++){
		// move the scan platform
		motor_s.onestep(FORWARD, SINGLE);
    4ce6:	83 eb       	ldi	r24, 0xB3	; 179
    4ce8:	92 e0       	ldi	r25, 0x02	; 2
    4cea:	61 e0       	ldi	r22, 0x01	; 1
    4cec:	41 e0       	ldi	r20, 0x01	; 1
    4cee:	0e 94 c7 05 	call	0xb8e	; 0xb8e <_ZN10AF_Stepper7onestepEhh>
		delay(10);
    4cf2:	6a e0       	ldi	r22, 0x0A	; 10
    4cf4:	70 e0       	ldi	r23, 0x00	; 0
    4cf6:	80 e0       	ldi	r24, 0x00	; 0
    4cf8:	90 e0       	ldi	r25, 0x00	; 0
    4cfa:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <delay>
		motor_s.onestep(BACKWARD, SINGLE);
		delay(100);
	}

	// Return the scan platform to the home position
	for(uint8_t cnt=1; cnt<=30; cnt++){
    4cfe:	1f 5f       	subi	r17, 0xFF	; 255
    4d00:	1f 31       	cpi	r17, 0x1F	; 31
    4d02:	89 f7       	brne	.-30     	; 0x4ce6 <_Z15scanEnvironmentPj+0x98>
		// move the scan platform
		motor_s.onestep(FORWARD, SINGLE);
		delay(10);
	}

}
    4d04:	df 91       	pop	r29
    4d06:	cf 91       	pop	r28
    4d08:	1f 91       	pop	r17
    4d0a:	0f 91       	pop	r16
    4d0c:	ff 90       	pop	r15
    4d0e:	ef 90       	pop	r14
    4d10:	08 95       	ret

00004d12 <_Z10goStraightjj>:
extern AF_Stepper motor_s;

Cmissionconsole debug;

void goStraight(uint16_t time, uint16_t itterations)
{
    4d12:	2f 92       	push	r2
    4d14:	3f 92       	push	r3
    4d16:	4f 92       	push	r4
    4d18:	5f 92       	push	r5
    4d1a:	6f 92       	push	r6
    4d1c:	7f 92       	push	r7
    4d1e:	8f 92       	push	r8
    4d20:	9f 92       	push	r9
    4d22:	af 92       	push	r10
    4d24:	bf 92       	push	r11
    4d26:	cf 92       	push	r12
    4d28:	df 92       	push	r13
    4d2a:	ef 92       	push	r14
    4d2c:	ff 92       	push	r15
    4d2e:	0f 93       	push	r16
    4d30:	1f 93       	push	r17
    4d32:	df 93       	push	r29
    4d34:	cf 93       	push	r28
    4d36:	00 d0       	rcall	.+0      	; 0x4d38 <_Z10goStraightjj+0x26>
    4d38:	00 d0       	rcall	.+0      	; 0x4d3a <_Z10goStraightjj+0x28>
    4d3a:	cd b7       	in	r28, 0x3d	; 61
    4d3c:	de b7       	in	r29, 0x3e	; 62
    4d3e:	7c 01       	movw	r14, r24
    4d40:	7a 83       	std	Y+2, r23	; 0x02
    4d42:	69 83       	std	Y+1, r22	; 0x01
	// find out the millis() start time
	uint16_t last_millis = millis();
    4d44:	0e 94 9e 10 	call	0x213c	; 0x213c <millis>
    4d48:	7c 83       	std	Y+4, r23	; 0x04
    4d4a:	6b 83       	std	Y+3, r22	; 0x03
	// set the pid setpoint with the direction of the compass
	pid.setTarget(compass.getHeading());
    4d4c:	82 e9       	ldi	r24, 0x92	; 146
    4d4e:	92 e0       	ldi	r25, 0x02	; 2
    4d50:	0e 94 7a 25 	call	0x4af4	; 0x4af4 <_ZN14HMC6352compass10getHeadingEv>
    /**
     * @param T input - the desired setting for the device (templated to the same type as the object)
     *
     * @ingroup PID-API
     */
	void setTarget(T input)		{ _target = input; }
    4d54:	90 93 97 02 	sts	0x0297, r25
    4d58:	80 93 96 02 	sts	0x0296, r24
	
	// set up the motors and get them moving straight
	motor_l.setSpeed(STRAIGHT_DUTY_CYCLE);
    4d5c:	8f ea       	ldi	r24, 0xAF	; 175
    4d5e:	92 e0       	ldi	r25, 0x02	; 2
    4d60:	6d e7       	ldi	r22, 0x7D	; 125
    4d62:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZN10AF_DCMotor8setSpeedEh>
  	motor_r.setSpeed(STRAIGHT_DUTY_CYCLE);
    4d66:	81 eb       	ldi	r24, 0xB1	; 177
    4d68:	92 e0       	ldi	r25, 0x02	; 2
    4d6a:	6d e7       	ldi	r22, 0x7D	; 125
    4d6c:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZN10AF_DCMotor8setSpeedEh>
  	motor_l.run(FORWARD);
    4d70:	8f ea       	ldi	r24, 0xAF	; 175
    4d72:	92 e0       	ldi	r25, 0x02	; 2
    4d74:	61 e0       	ldi	r22, 0x01	; 1
    4d76:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN10AF_DCMotor3runEh>
  	motor_r.run(FORWARD);
    4d7a:	81 eb       	ldi	r24, 0xB1	; 177
    4d7c:	92 e0       	ldi	r25, 0x02	; 2
    4d7e:	61 e0       	ldi	r22, 0x01	; 1
    4d80:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN10AF_DCMotor3runEh>
    4d84:	00 e0       	ldi	r16, 0x00	; 0
    4d86:	10 e0       	ldi	r17, 0x00	; 0
				// get the error from the PID module - 180 degrees the the max desired error
				uint16_t error = pid.getError(compass.getHeading(), 1800);
				// update the motors based on the error - converting degree_of_error
				// to duty_cycle for correction
				motor_r.setSpeed( constrain((STRAIGHT_DUTY_CYCLE) + error, MIN_DUTY_CYCLE, MAX_DUTY_CYCLE) );
				motor_l.setSpeed( constrain((STRAIGHT_DUTY_CYCLE) - error, MIN_DUTY_CYCLE, MAX_DUTY_CYCLE) );
    4d88:	5d e7       	ldi	r21, 0x7D	; 125
    4d8a:	25 2e       	mov	r2, r21
    4d8c:	31 2c       	mov	r3, r1
    4d8e:	fc c0       	rjmp	.+504    	; 0x4f88 <_Z10goStraightjj+0x276>
		while( time != 0){	
			// hold the program while waiting for an update interval
			// allow serial communication and other processing to occur
			while ((millis() - last_millis) <= PID_UPDATE_INTERVAL){
				// use the free running millis() as a timer
				if (millis() < last_millis){
    4d90:	0e 94 9e 10 	call	0x213c	; 0x213c <millis>
    4d94:	6a 15       	cp	r22, r10
    4d96:	7b 05       	cpc	r23, r11
    4d98:	8c 05       	cpc	r24, r12
    4d9a:	9d 05       	cpc	r25, r13
    4d9c:	10 f4       	brcc	.+4      	; 0x4da2 <_Z10goStraightjj+0x90>
    4d9e:	1c 82       	std	Y+4, r1	; 0x04
    4da0:	1b 82       	std	Y+3, r1	; 0x03
	for (uint16_t cnt=0 ; cnt <= itterations; cnt++){
		// time per itteration set by caller
		while( time != 0){	
			// hold the program while waiting for an update interval
			// allow serial communication and other processing to occur
			while ((millis() - last_millis) <= PID_UPDATE_INTERVAL){
    4da2:	0e 94 9e 10 	call	0x213c	; 0x213c <millis>
    4da6:	2b 81       	ldd	r18, Y+3	; 0x03
    4da8:	3c 81       	ldd	r19, Y+4	; 0x04
    4daa:	59 01       	movw	r10, r18
    4dac:	cc 24       	eor	r12, r12
    4dae:	dd 24       	eor	r13, r13
    4db0:	6a 19       	sub	r22, r10
    4db2:	7b 09       	sbc	r23, r11
    4db4:	8c 09       	sbc	r24, r12
    4db6:	9d 09       	sbc	r25, r13
    4db8:	6b 30       	cpi	r22, 0x0B	; 11
    4dba:	71 05       	cpc	r23, r1
    4dbc:	81 05       	cpc	r24, r1
    4dbe:	91 05       	cpc	r25, r1
    4dc0:	38 f3       	brcs	.-50     	; 0x4d90 <_Z10goStraightjj+0x7e>
				// processing can occur here - better than a wait statement
				//-->  <--
			}

			// update the motors based on the callers request(time)
			if ((millis() -last_millis) > PID_UPDATE_INTERVAL){
    4dc2:	0e 94 9e 10 	call	0x213c	; 0x213c <millis>
    4dc6:	6a 19       	sub	r22, r10
    4dc8:	7b 09       	sbc	r23, r11
    4dca:	8c 09       	sbc	r24, r12
    4dcc:	9d 09       	sbc	r25, r13
    4dce:	6b 30       	cpi	r22, 0x0B	; 11
    4dd0:	71 05       	cpc	r23, r1
    4dd2:	81 05       	cpc	r24, r1
    4dd4:	91 05       	cpc	r25, r1
    4dd6:	08 f4       	brcc	.+2      	; 0x4dda <_Z10goStraightjj+0xc8>
    4dd8:	d4 c0       	rjmp	.+424    	; 0x4f82 <_Z10goStraightjj+0x270>
				// update the last_millis count
				last_millis += PID_UPDATE_INTERVAL;
				// get the error from the PID module - 180 degrees the the max desired error
				uint16_t error = pid.getError(compass.getHeading(), 1800);
    4dda:	82 e9       	ldi	r24, 0x92	; 146
    4ddc:	92 e0       	ldi	r25, 0x02	; 2
    4dde:	0e 94 7a 25 	call	0x4af4	; 0x4af4 <_ZN14HMC6352compass10getHeadingEv>
	 *
     * @ingroup PID-API
     */
	T getError(T input, T max_error = 0){
		// get the current error
		T current_error = _target - input;
    4de2:	20 91 96 02 	lds	r18, 0x0296
    4de6:	30 91 97 02 	lds	r19, 0x0297
    4dea:	28 1b       	sub	r18, r24
    4dec:	39 0b       	sbc	r19, r25
		// look out for max error (if implemented)
		if (current_error > max_error)
    4dee:	47 e0       	ldi	r20, 0x07	; 7
    4df0:	29 30       	cpi	r18, 0x09	; 9
    4df2:	34 07       	cpc	r19, r20
    4df4:	28 f0       	brcs	.+10     	; 0x4e00 <_Z10goStraightjj+0xee>
			current_error -= (max_error * 2);
    4df6:	40 ef       	ldi	r20, 0xF0	; 240
    4df8:	a4 2e       	mov	r10, r20
    4dfa:	41 ef       	ldi	r20, 0xF1	; 241
    4dfc:	b4 2e       	mov	r11, r20
    4dfe:	04 c0       	rjmp	.+8      	; 0x4e08 <_Z10goStraightjj+0xf6>
		else if (current_error < -max_error)
			current_error += (max_error * 2);
    4e00:	90 e1       	ldi	r25, 0x10	; 16
    4e02:	a9 2e       	mov	r10, r25
    4e04:	9e e0       	ldi	r25, 0x0E	; 14
    4e06:	b9 2e       	mov	r11, r25
    4e08:	a2 0e       	add	r10, r18
    4e0a:	b3 1e       	adc	r11, r19
		
		// Create the pTerm - present error
		_pid_term.pterm = _pid_gain.pgain * current_error;
    4e0c:	80 91 a8 02 	lds	r24, 0x02A8
    4e10:	90 91 a9 02 	lds	r25, 0x02A9
    4e14:	a8 9e       	mul	r10, r24
    4e16:	b0 01       	movw	r22, r0
    4e18:	a9 9e       	mul	r10, r25
    4e1a:	70 0d       	add	r23, r0
    4e1c:	b8 9e       	mul	r11, r24
    4e1e:	70 0d       	add	r23, r0
    4e20:	11 24       	eor	r1, r1
    4e22:	80 e0       	ldi	r24, 0x00	; 0
    4e24:	90 e0       	ldi	r25, 0x00	; 0
    4e26:	0e 94 67 22 	call	0x44ce	; 0x44ce <__floatunsisf>
    4e2a:	60 93 9c 02 	sts	0x029C, r22
    4e2e:	70 93 9d 02 	sts	0x029D, r23
    4e32:	80 93 9e 02 	sts	0x029E, r24
    4e36:	90 93 9f 02 	sts	0x029F, r25
		// Create the iTerm - accumulated error
		_istate += current_error;
    4e3a:	20 91 9a 02 	lds	r18, 0x029A
    4e3e:	30 91 9b 02 	lds	r19, 0x029B
    4e42:	2a 0d       	add	r18, r10
    4e44:	3b 1d       	adc	r19, r11
    4e46:	30 93 9b 02 	sts	0x029B, r19
    4e4a:	20 93 9a 02 	sts	0x029A, r18
		// create windup protection
		T windup_protection = static_cast<T>(WINDUP_GUARD_GAIN) / _pid_gain.igain;
    4e4e:	60 91 aa 02 	lds	r22, 0x02AA
    4e52:	70 91 ab 02 	lds	r23, 0x02AB
    4e56:	84 e6       	ldi	r24, 0x64	; 100
    4e58:	90 e0       	ldi	r25, 0x00	; 0
    4e5a:	0e 94 13 29 	call	0x5226	; 0x5226 <__udivmodhi4>
		//protects against excessive positive and negative error
		if(_istate > windup_protection)
    4e5e:	62 17       	cp	r22, r18
    4e60:	73 07       	cpc	r23, r19
    4e62:	28 f4       	brcc	.+10     	; 0x4e6e <_Z10goStraightjj+0x15c>
			_istate = windup_protection;
    4e64:	70 93 9b 02 	sts	0x029B, r23
    4e68:	60 93 9a 02 	sts	0x029A, r22
    4e6c:	0b c0       	rjmp	.+22     	; 0x4e84 <_Z10goStraightjj+0x172>
		else if(_istate < -windup_protection)
    4e6e:	44 27       	eor	r20, r20
    4e70:	55 27       	eor	r21, r21
    4e72:	46 1b       	sub	r20, r22
    4e74:	57 0b       	sbc	r21, r23
    4e76:	24 17       	cp	r18, r20
    4e78:	35 07       	cpc	r19, r21
    4e7a:	20 f4       	brcc	.+8      	; 0x4e84 <_Z10goStraightjj+0x172>
			_istate = -windup_protection;
    4e7c:	50 93 9b 02 	sts	0x029B, r21
    4e80:	40 93 9a 02 	sts	0x029A, r20

		// Update the iTerm
		_pid_term.iterm = _istate * _pid_gain.igain;
    4e84:	20 91 aa 02 	lds	r18, 0x02AA
    4e88:	30 91 ab 02 	lds	r19, 0x02AB
    4e8c:	80 91 9a 02 	lds	r24, 0x029A
    4e90:	90 91 9b 02 	lds	r25, 0x029B
    4e94:	28 9f       	mul	r18, r24
    4e96:	b0 01       	movw	r22, r0
    4e98:	29 9f       	mul	r18, r25
    4e9a:	70 0d       	add	r23, r0
    4e9c:	38 9f       	mul	r19, r24
    4e9e:	70 0d       	add	r23, r0
    4ea0:	11 24       	eor	r1, r1
    4ea2:	80 e0       	ldi	r24, 0x00	; 0
    4ea4:	90 e0       	ldi	r25, 0x00	; 0
    4ea6:	0e 94 67 22 	call	0x44ce	; 0x44ce <__floatunsisf>
    4eaa:	5b 01       	movw	r10, r22
    4eac:	6c 01       	movw	r12, r24
    4eae:	60 93 a0 02 	sts	0x02A0, r22
    4eb2:	70 93 a1 02 	sts	0x02A1, r23
    4eb6:	80 93 a2 02 	sts	0x02A2, r24
    4eba:	90 93 a3 02 	sts	0x02A3, r25
		// Update the dTerm - The projected change
		_pid_term.dterm = (_pid_gain.dgain * (_target - _last_target));
    4ebe:	80 90 96 02 	lds	r8, 0x0296
    4ec2:	90 90 97 02 	lds	r9, 0x0297
    4ec6:	20 91 98 02 	lds	r18, 0x0298
    4eca:	30 91 99 02 	lds	r19, 0x0299
    4ece:	c4 01       	movw	r24, r8
    4ed0:	82 1b       	sub	r24, r18
    4ed2:	93 0b       	sbc	r25, r19
    4ed4:	9c 01       	movw	r18, r24
    4ed6:	80 91 ac 02 	lds	r24, 0x02AC
    4eda:	90 91 ad 02 	lds	r25, 0x02AD
    4ede:	28 9f       	mul	r18, r24
    4ee0:	b0 01       	movw	r22, r0
    4ee2:	29 9f       	mul	r18, r25
    4ee4:	70 0d       	add	r23, r0
    4ee6:	38 9f       	mul	r19, r24
    4ee8:	70 0d       	add	r23, r0
    4eea:	11 24       	eor	r1, r1
    4eec:	80 e0       	ldi	r24, 0x00	; 0
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	0e 94 67 22 	call	0x44ce	; 0x44ce <__floatunsisf>
    4ef4:	2b 01       	movw	r4, r22
    4ef6:	3c 01       	movw	r6, r24
    4ef8:	60 93 a4 02 	sts	0x02A4, r22
    4efc:	70 93 a5 02 	sts	0x02A5, r23
    4f00:	80 93 a6 02 	sts	0x02A6, r24
    4f04:	90 93 a7 02 	sts	0x02A7, r25
		// store the current target as the last target
		_last_target = _target;
    4f08:	90 92 99 02 	sts	0x0299, r9
    4f0c:	80 92 98 02 	sts	0x0298, r8

		// return the feedback
		return _pid_term.pterm + _pid_term.iterm - _pid_term.dterm;
    4f10:	c6 01       	movw	r24, r12
    4f12:	b5 01       	movw	r22, r10
    4f14:	20 91 9c 02 	lds	r18, 0x029C
    4f18:	30 91 9d 02 	lds	r19, 0x029D
    4f1c:	40 91 9e 02 	lds	r20, 0x029E
    4f20:	50 91 9f 02 	lds	r21, 0x029F
    4f24:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__addsf3>
    4f28:	a3 01       	movw	r20, r6
    4f2a:	92 01       	movw	r18, r4
    4f2c:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <__subsf3>
    4f30:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__fixunssfsi>
    4f34:	5b 01       	movw	r10, r22
				// update the motors based on the error - converting degree_of_error
				// to duty_cycle for correction
				motor_r.setSpeed( constrain((STRAIGHT_DUTY_CYCLE) + error, MIN_DUTY_CYCLE, MAX_DUTY_CYCLE) );
    4f36:	63 58       	subi	r22, 0x83	; 131
    4f38:	7f 4f       	sbci	r23, 0xFF	; 255
    4f3a:	62 33       	cpi	r22, 0x32	; 50
    4f3c:	71 05       	cpc	r23, r1
    4f3e:	10 f4       	brcc	.+4      	; 0x4f44 <_Z10goStraightjj+0x232>
    4f40:	62 e3       	ldi	r22, 0x32	; 50
    4f42:	05 c0       	rjmp	.+10     	; 0x4f4e <_Z10goStraightjj+0x23c>
    4f44:	69 3c       	cpi	r22, 0xC9	; 201
    4f46:	71 05       	cpc	r23, r1
    4f48:	10 f0       	brcs	.+4      	; 0x4f4e <_Z10goStraightjj+0x23c>
    4f4a:	68 ec       	ldi	r22, 0xC8	; 200
    4f4c:	70 e0       	ldi	r23, 0x00	; 0
    4f4e:	81 eb       	ldi	r24, 0xB1	; 177
    4f50:	92 e0       	ldi	r25, 0x02	; 2
    4f52:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZN10AF_DCMotor8setSpeedEh>
				motor_l.setSpeed( constrain((STRAIGHT_DUTY_CYCLE) - error, MIN_DUTY_CYCLE, MAX_DUTY_CYCLE) );
    4f56:	b1 01       	movw	r22, r2
    4f58:	6a 19       	sub	r22, r10
    4f5a:	7b 09       	sbc	r23, r11
    4f5c:	62 33       	cpi	r22, 0x32	; 50
    4f5e:	71 05       	cpc	r23, r1
    4f60:	10 f4       	brcc	.+4      	; 0x4f66 <_Z10goStraightjj+0x254>
    4f62:	62 e3       	ldi	r22, 0x32	; 50
    4f64:	05 c0       	rjmp	.+10     	; 0x4f70 <_Z10goStraightjj+0x25e>
    4f66:	69 3c       	cpi	r22, 0xC9	; 201
    4f68:	71 05       	cpc	r23, r1
    4f6a:	10 f0       	brcs	.+4      	; 0x4f70 <_Z10goStraightjj+0x25e>
    4f6c:	68 ec       	ldi	r22, 0xC8	; 200
    4f6e:	70 e0       	ldi	r23, 0x00	; 0
			}

			// update the motors based on the callers request(time)
			if ((millis() -last_millis) > PID_UPDATE_INTERVAL){
				// update the last_millis count
				last_millis += PID_UPDATE_INTERVAL;
    4f70:	eb 81       	ldd	r30, Y+3	; 0x03
    4f72:	fc 81       	ldd	r31, Y+4	; 0x04
    4f74:	3a 96       	adiw	r30, 0x0a	; 10
    4f76:	fc 83       	std	Y+4, r31	; 0x04
    4f78:	eb 83       	std	Y+3, r30	; 0x03
				// get the error from the PID module - 180 degrees the the max desired error
				uint16_t error = pid.getError(compass.getHeading(), 1800);
				// update the motors based on the error - converting degree_of_error
				// to duty_cycle for correction
				motor_r.setSpeed( constrain((STRAIGHT_DUTY_CYCLE) + error, MIN_DUTY_CYCLE, MAX_DUTY_CYCLE) );
				motor_l.setSpeed( constrain((STRAIGHT_DUTY_CYCLE) - error, MIN_DUTY_CYCLE, MAX_DUTY_CYCLE) );
    4f7a:	8f ea       	ldi	r24, 0xAF	; 175
    4f7c:	92 e0       	ldi	r25, 0x02	; 2
    4f7e:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZN10AF_DCMotor8setSpeedEh>
			}
		
			// decrement the amount of time that the caller asked for per itteration
			time--;
    4f82:	08 94       	sec
    4f84:	e1 08       	sbc	r14, r1
    4f86:	f1 08       	sbc	r15, r1
  	motor_r.run(FORWARD);

	// loop the amount of passes requested by the caller (itterations)
	for (uint16_t cnt=0 ; cnt <= itterations; cnt++){
		// time per itteration set by caller
		while( time != 0){	
    4f88:	e1 14       	cp	r14, r1
    4f8a:	f1 04       	cpc	r15, r1
    4f8c:	09 f0       	breq	.+2      	; 0x4f90 <_Z10goStraightjj+0x27e>
    4f8e:	09 cf       	rjmp	.-494    	; 0x4da2 <_Z10goStraightjj+0x90>
		
			// decrement the amount of time that the caller asked for per itteration
			time--;
		}
		// change the direction of the rover by 180 degrees (must be signed number for logic to work)
		int16_t update_target = pid.getTarget() - 1800;
    4f90:	20 91 96 02 	lds	r18, 0x0296
    4f94:	30 91 97 02 	lds	r19, 0x0297
    4f98:	c9 01       	movw	r24, r18
    4f9a:	88 50       	subi	r24, 0x08	; 8
    4f9c:	97 40       	sbci	r25, 0x07	; 7
		//heading is limited from 0 to 3599
  		if(update_target >= 3600){
    4f9e:	fe e0       	ldi	r31, 0x0E	; 14
    4fa0:	80 31       	cpi	r24, 0x10	; 16
    4fa2:	9f 07       	cpc	r25, r31
    4fa4:	24 f0       	brlt	.+8      	; 0x4fae <_Z10goStraightjj+0x29c>
			//example: if 'update_target' is 3659 degrees, the program corrects it to 59 degrees
			update_target -= 3600;
    4fa6:	c9 01       	movw	r24, r18
    4fa8:	88 51       	subi	r24, 0x18	; 24
    4faa:	95 41       	sbci	r25, 0x15	; 21
    4fac:	05 c0       	rjmp	.+10     	; 0x4fb8 <_Z10goStraightjj+0x2a6>
		}
  		else if(update_target < 0){
    4fae:	97 ff       	sbrs	r25, 7
    4fb0:	03 c0       	rjmp	.+6      	; 0x4fb8 <_Z10goStraightjj+0x2a6>
			//example: if 'update_target' is -20 degress, the program corrects it to 3580 degrees
			update_target += 3599;
    4fb2:	c9 01       	movw	r24, r18
    4fb4:	89 5f       	subi	r24, 0xF9	; 249
    4fb6:	98 4f       	sbci	r25, 0xF8	; 248
    /**
     * @param T input - the desired setting for the device (templated to the same type as the object)
     *
     * @ingroup PID-API
     */
	void setTarget(T input)		{ _target = input; }
    4fb8:	90 93 97 02 	sts	0x0297, r25
    4fbc:	80 93 96 02 	sts	0x0296, r24
  	motor_r.setSpeed(STRAIGHT_DUTY_CYCLE);
  	motor_l.run(FORWARD);
  	motor_r.run(FORWARD);

	// loop the amount of passes requested by the caller (itterations)
	for (uint16_t cnt=0 ; cnt <= itterations; cnt++){
    4fc0:	0f 5f       	subi	r16, 0xFF	; 255
    4fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    4fc4:	29 81       	ldd	r18, Y+1	; 0x01
    4fc6:	3a 81       	ldd	r19, Y+2	; 0x02
    4fc8:	20 17       	cp	r18, r16
    4fca:	31 07       	cpc	r19, r17
    4fcc:	08 f7       	brcc	.-62     	; 0x4f90 <_Z10goStraightjj+0x27e>
		// Update the PID module setpoint
		pid.setTarget(update_target);
	}

	// Stop the motors - we should be either near the home position or at a distance x far from the starting point
	motor_l.run(RELEASE);
    4fce:	8f ea       	ldi	r24, 0xAF	; 175
    4fd0:	92 e0       	ldi	r25, 0x02	; 2
    4fd2:	64 e0       	ldi	r22, 0x04	; 4
    4fd4:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN10AF_DCMotor3runEh>
	motor_r.run(RELEASE);
    4fd8:	81 eb       	ldi	r24, 0xB1	; 177
    4fda:	92 e0       	ldi	r25, 0x02	; 2
    4fdc:	64 e0       	ldi	r22, 0x04	; 4
    4fde:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN10AF_DCMotor3runEh>
	// set the duty cycle staight for the next use
	motor_l.setSpeed(STRAIGHT_DUTY_CYCLE);
    4fe2:	8f ea       	ldi	r24, 0xAF	; 175
    4fe4:	92 e0       	ldi	r25, 0x02	; 2
    4fe6:	6d e7       	ldi	r22, 0x7D	; 125
    4fe8:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZN10AF_DCMotor8setSpeedEh>
  	motor_r.setSpeed(STRAIGHT_DUTY_CYCLE);
    4fec:	81 eb       	ldi	r24, 0xB1	; 177
    4fee:	92 e0       	ldi	r25, 0x02	; 2
    4ff0:	6d e7       	ldi	r22, 0x7D	; 125
    4ff2:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZN10AF_DCMotor8setSpeedEh>
}
    4ff6:	0f 90       	pop	r0
    4ff8:	0f 90       	pop	r0
    4ffa:	0f 90       	pop	r0
    4ffc:	0f 90       	pop	r0
    4ffe:	cf 91       	pop	r28
    5000:	df 91       	pop	r29
    5002:	1f 91       	pop	r17
    5004:	0f 91       	pop	r16
    5006:	ff 90       	pop	r15
    5008:	ef 90       	pop	r14
    500a:	df 90       	pop	r13
    500c:	cf 90       	pop	r12
    500e:	bf 90       	pop	r11
    5010:	af 90       	pop	r10
    5012:	9f 90       	pop	r9
    5014:	8f 90       	pop	r8
    5016:	7f 90       	pop	r7
    5018:	6f 90       	pop	r6
    501a:	5f 90       	pop	r5
    501c:	4f 90       	pop	r4
    501e:	3f 90       	pop	r3
    5020:	2f 90       	pop	r2
    5022:	08 95       	ret

00005024 <T.10>:
		//}
	}

	// cast and return the result
	return A_1;
}
    5024:	81 30       	cpi	r24, 0x01	; 1
    5026:	91 05       	cpc	r25, r1
    5028:	29 f4       	brne	.+10     	; 0x5034 <T.10+0x10>
extern HMC6352compass compass;
extern AF_DCMotor motor_l;
extern AF_DCMotor motor_r;
extern AF_Stepper motor_s;

Cmissionconsole debug;
    502a:	8f e4       	ldi	r24, 0x4F	; 79
    502c:	94 e0       	ldi	r25, 0x04	; 4
    502e:	0e 94 35 28 	call	0x506a	; 0x506a <_ZN15CmissionconsoleC1Ev>
    5032:	08 95       	ret
    5034:	00 97       	sbiw	r24, 0x00	; 0
    5036:	21 f4       	brne	.+8      	; 0x5040 <T.10+0x1c>
    5038:	8f e4       	ldi	r24, 0x4F	; 79
    503a:	94 e0       	ldi	r25, 0x04	; 4
    503c:	0e 94 40 28 	call	0x5080	; 0x5080 <_ZN15CmissionconsoleD1Ev>
    5040:	08 95       	ret

00005042 <_GLOBAL__I_debug>:
		//}
	}

	// cast and return the result
	return A_1;
}
    5042:	81 e0       	ldi	r24, 0x01	; 1
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	0e 94 12 28 	call	0x5024	; 0x5024 <T.10>
    504a:	08 95       	ret

0000504c <_GLOBAL__D_debug>:
    504c:	80 e0       	ldi	r24, 0x00	; 0
    504e:	90 e0       	ldi	r25, 0x00	; 0
    5050:	0e 94 12 28 	call	0x5024	; 0x5024 <T.10>
    5054:	08 95       	ret

00005056 <_ZN15CmissionconsoleC2Ev>:
#include "MissionConsole.h"

Cmissionconsole::Cmissionconsole()
{
	// set the baud rate
	UBRR0 = REG_BAUD_VAL;
    5056:	80 e1       	ldi	r24, 0x10	; 16
    5058:	90 e0       	ldi	r25, 0x00	; 0
    505a:	90 93 c5 00 	sts	0x00C5, r25
    505e:	80 93 c4 00 	sts	0x00C4, r24
	// set the data to 8-bits
	UCSR0C = 6;
    5062:	86 e0       	ldi	r24, 0x06	; 6
    5064:	80 93 c2 00 	sts	0x00C2, r24
}
    5068:	08 95       	ret

0000506a <_ZN15CmissionconsoleC1Ev>:
#include "MissionConsole.h"

Cmissionconsole::Cmissionconsole()
{
	// set the baud rate
	UBRR0 = REG_BAUD_VAL;
    506a:	80 e1       	ldi	r24, 0x10	; 16
    506c:	90 e0       	ldi	r25, 0x00	; 0
    506e:	90 93 c5 00 	sts	0x00C5, r25
    5072:	80 93 c4 00 	sts	0x00C4, r24
	// set the data to 8-bits
	UCSR0C = 6;
    5076:	86 e0       	ldi	r24, 0x06	; 6
    5078:	80 93 c2 00 	sts	0x00C2, r24
}
    507c:	08 95       	ret

0000507e <_ZN15CmissionconsoleD2Ev>:

Cmissionconsole::~Cmissionconsole()
{

}
    507e:	08 95       	ret

00005080 <_ZN15CmissionconsoleD1Ev>:
    5080:	08 95       	ret

00005082 <_ZN15Cmissionconsole6enableEv>:

void Cmissionconsole::enable()
{
	// enable interrupts??  definately TX AND RX enable
	UCSR0B |= 0x18;
    5082:	e1 ec       	ldi	r30, 0xC1	; 193
    5084:	f0 e0       	ldi	r31, 0x00	; 0
    5086:	80 81       	ld	r24, Z
    5088:	88 61       	ori	r24, 0x18	; 24
    508a:	80 83       	st	Z, r24
}
    508c:	08 95       	ret

0000508e <_ZN15Cmissionconsole7disableEv>:

void Cmissionconsole::disable()
{
	// disable the UART tx and rx
	UCSR0B = 0;
    508e:	10 92 c1 00 	sts	0x00C1, r1
}
    5092:	08 95       	ret

00005094 <_ZN15Cmissionconsole5writeEh>:

void Cmissionconsole::write(uint8_t in)
{
	//UDR0 = in;
}
    5094:	08 95       	ret

00005096 <_ZN15Cmissionconsole5writeEPc>:

void Cmissionconsole::write(char* in)
{
	// keep going until all chars are sent
	while (*in != 0x00){
    5096:	08 c0       	rjmp	.+16     	; 0x50a8 <_ZN15Cmissionconsole5writeEPc+0x12>
		// wait until the last byte has been transfered
		while ( !( UCSR0A & (1<<5)) );
    5098:	90 91 c0 00 	lds	r25, 0x00C0
    509c:	95 ff       	sbrs	r25, 5
    509e:	fc cf       	rjmp	.-8      	; 0x5098 <_ZN15Cmissionconsole5writeEPc+0x2>
		// load the transmit buffer
		UDR0 = *in;
    50a0:	80 93 c6 00 	sts	0x00C6, r24
		// increment the packet pointer
		in++;
    50a4:	6f 5f       	subi	r22, 0xFF	; 255
    50a6:	7f 4f       	sbci	r23, 0xFF	; 255
}

void Cmissionconsole::write(char* in)
{
	// keep going until all chars are sent
	while (*in != 0x00){
    50a8:	fb 01       	movw	r30, r22
    50aa:	80 81       	ld	r24, Z
    50ac:	88 23       	and	r24, r24
    50ae:	a1 f7       	brne	.-24     	; 0x5098 <_ZN15Cmissionconsole5writeEPc+0x2>
		// load the transmit buffer
		UDR0 = *in;
		// increment the packet pointer
		in++;
	}
}
    50b0:	08 95       	ret

000050b2 <_ZN15Cmissionconsole13mediumRangeIREj>:
	// release the data on the heap
	free(tmp_base);
}

void Cmissionconsole::mediumRangeIR(uint16_t in)
{
    50b2:	0f 93       	push	r16
    50b4:	1f 93       	push	r17
    50b6:	cf 93       	push	r28
    50b8:	df 93       	push	r29
    50ba:	eb 01       	movw	r28, r22
	char* tmp = (char*)calloc(64, sizeof(char));
    50bc:	80 e4       	ldi	r24, 0x40	; 64
    50be:	90 e0       	ldi	r25, 0x00	; 0
    50c0:	61 e0       	ldi	r22, 0x01	; 1
    50c2:	70 e0       	ldi	r23, 0x00	; 0
    50c4:	0e 94 99 29 	call	0x5332	; 0x5332 <calloc>
    50c8:	8c 01       	movw	r16, r24
	char* tmp_base = tmp;
	// no room on the heap
	if (tmp == NULL){
    50ca:	00 97       	sbiw	r24, 0x00	; 0
    50cc:	59 f1       	breq	.+86     	; 0x5124 <_ZN15Cmissionconsole13mediumRangeIREj+0x72>
		return;
	}
	// build the a/d conversion packet
	sprintf(tmp, "<m.r.i.r. - %d>\n", in);
    50ce:	00 d0       	rcall	.+0      	; 0x50d0 <_ZN15Cmissionconsole13mediumRangeIREj+0x1e>
    50d0:	00 d0       	rcall	.+0      	; 0x50d2 <_ZN15Cmissionconsole13mediumRangeIREj+0x20>
    50d2:	00 d0       	rcall	.+0      	; 0x50d4 <_ZN15Cmissionconsole13mediumRangeIREj+0x22>
    50d4:	ed b7       	in	r30, 0x3d	; 61
    50d6:	fe b7       	in	r31, 0x3e	; 62
    50d8:	31 96       	adiw	r30, 0x01	; 1
    50da:	ad b7       	in	r26, 0x3d	; 61
    50dc:	be b7       	in	r27, 0x3e	; 62
    50de:	12 96       	adiw	r26, 0x02	; 2
    50e0:	9c 93       	st	X, r25
    50e2:	8e 93       	st	-X, r24
    50e4:	11 97       	sbiw	r26, 0x01	; 1
    50e6:	83 e1       	ldi	r24, 0x13	; 19
    50e8:	91 e0       	ldi	r25, 0x01	; 1
    50ea:	93 83       	std	Z+3, r25	; 0x03
    50ec:	82 83       	std	Z+2, r24	; 0x02
    50ee:	d5 83       	std	Z+5, r29	; 0x05
    50f0:	c4 83       	std	Z+4, r28	; 0x04
    50f2:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <sprintf>
    50f6:	f8 01       	movw	r30, r16
    50f8:	8d b7       	in	r24, 0x3d	; 61
    50fa:	9e b7       	in	r25, 0x3e	; 62
    50fc:	06 96       	adiw	r24, 0x06	; 6
    50fe:	0f b6       	in	r0, 0x3f	; 63
    5100:	f8 94       	cli
    5102:	9e bf       	out	0x3e, r25	; 62
    5104:	0f be       	out	0x3f, r0	; 63
    5106:	8d bf       	out	0x3d, r24	; 61
    5108:	07 c0       	rjmp	.+14     	; 0x5118 <_ZN15Cmissionconsole13mediumRangeIREj+0x66>
void Cmissionconsole::write(char* in)
{
	// keep going until all chars are sent
	while (*in != 0x00){
		// wait until the last byte has been transfered
		while ( !( UCSR0A & (1<<5)) );
    510a:	90 91 c0 00 	lds	r25, 0x00C0
    510e:	95 ff       	sbrs	r25, 5
    5110:	fc cf       	rjmp	.-8      	; 0x510a <_ZN15Cmissionconsole13mediumRangeIREj+0x58>
		// load the transmit buffer
		UDR0 = *in;
    5112:	80 93 c6 00 	sts	0x00C6, r24
		// increment the packet pointer
		in++;
    5116:	31 96       	adiw	r30, 0x01	; 1
}

void Cmissionconsole::write(char* in)
{
	// keep going until all chars are sent
	while (*in != 0x00){
    5118:	80 81       	ld	r24, Z
    511a:	88 23       	and	r24, r24
    511c:	b1 f7       	brne	.-20     	; 0x510a <_ZN15Cmissionconsole13mediumRangeIREj+0x58>
	// build the a/d conversion packet
	sprintf(tmp, "<m.r.i.r. - %d>\n", in);
	// send it to the communication channel
	write(tmp);
	// release the data on the heap
	free(tmp_base);
    511e:	c8 01       	movw	r24, r16
    5120:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <free>
}
    5124:	df 91       	pop	r29
    5126:	cf 91       	pop	r28
    5128:	1f 91       	pop	r17
    512a:	0f 91       	pop	r16
    512c:	08 95       	ret

0000512e <_ZN15Cmissionconsole11longRangeIREj>:
	// release the data on the heap
	free(tmp_base);
}

void Cmissionconsole::longRangeIR(uint16_t in)
{
    512e:	0f 93       	push	r16
    5130:	1f 93       	push	r17
    5132:	cf 93       	push	r28
    5134:	df 93       	push	r29
    5136:	eb 01       	movw	r28, r22
	char* tmp = (char*)calloc(64, sizeof(char));
    5138:	80 e4       	ldi	r24, 0x40	; 64
    513a:	90 e0       	ldi	r25, 0x00	; 0
    513c:	61 e0       	ldi	r22, 0x01	; 1
    513e:	70 e0       	ldi	r23, 0x00	; 0
    5140:	0e 94 99 29 	call	0x5332	; 0x5332 <calloc>
    5144:	8c 01       	movw	r16, r24
	char* tmp_base = tmp;
	// no room on the heap
	if (tmp == NULL){
    5146:	00 97       	sbiw	r24, 0x00	; 0
    5148:	59 f1       	breq	.+86     	; 0x51a0 <_ZN15Cmissionconsole11longRangeIREj+0x72>
		return;
	}
	// build the a/d conversion packet
	sprintf(tmp, "<l.r.i.r. - %d>\n", in);
    514a:	00 d0       	rcall	.+0      	; 0x514c <_ZN15Cmissionconsole11longRangeIREj+0x1e>
    514c:	00 d0       	rcall	.+0      	; 0x514e <_ZN15Cmissionconsole11longRangeIREj+0x20>
    514e:	00 d0       	rcall	.+0      	; 0x5150 <_ZN15Cmissionconsole11longRangeIREj+0x22>
    5150:	ed b7       	in	r30, 0x3d	; 61
    5152:	fe b7       	in	r31, 0x3e	; 62
    5154:	31 96       	adiw	r30, 0x01	; 1
    5156:	ad b7       	in	r26, 0x3d	; 61
    5158:	be b7       	in	r27, 0x3e	; 62
    515a:	12 96       	adiw	r26, 0x02	; 2
    515c:	9c 93       	st	X, r25
    515e:	8e 93       	st	-X, r24
    5160:	11 97       	sbiw	r26, 0x01	; 1
    5162:	84 e2       	ldi	r24, 0x24	; 36
    5164:	91 e0       	ldi	r25, 0x01	; 1
    5166:	93 83       	std	Z+3, r25	; 0x03
    5168:	82 83       	std	Z+2, r24	; 0x02
    516a:	d5 83       	std	Z+5, r29	; 0x05
    516c:	c4 83       	std	Z+4, r28	; 0x04
    516e:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <sprintf>
    5172:	f8 01       	movw	r30, r16
    5174:	8d b7       	in	r24, 0x3d	; 61
    5176:	9e b7       	in	r25, 0x3e	; 62
    5178:	06 96       	adiw	r24, 0x06	; 6
    517a:	0f b6       	in	r0, 0x3f	; 63
    517c:	f8 94       	cli
    517e:	9e bf       	out	0x3e, r25	; 62
    5180:	0f be       	out	0x3f, r0	; 63
    5182:	8d bf       	out	0x3d, r24	; 61
    5184:	07 c0       	rjmp	.+14     	; 0x5194 <_ZN15Cmissionconsole11longRangeIREj+0x66>
void Cmissionconsole::write(char* in)
{
	// keep going until all chars are sent
	while (*in != 0x00){
		// wait until the last byte has been transfered
		while ( !( UCSR0A & (1<<5)) );
    5186:	90 91 c0 00 	lds	r25, 0x00C0
    518a:	95 ff       	sbrs	r25, 5
    518c:	fc cf       	rjmp	.-8      	; 0x5186 <_ZN15Cmissionconsole11longRangeIREj+0x58>
		// load the transmit buffer
		UDR0 = *in;
    518e:	80 93 c6 00 	sts	0x00C6, r24
		// increment the packet pointer
		in++;
    5192:	31 96       	adiw	r30, 0x01	; 1
}

void Cmissionconsole::write(char* in)
{
	// keep going until all chars are sent
	while (*in != 0x00){
    5194:	80 81       	ld	r24, Z
    5196:	88 23       	and	r24, r24
    5198:	b1 f7       	brne	.-20     	; 0x5186 <_ZN15Cmissionconsole11longRangeIREj+0x58>
	// build the a/d conversion packet
	sprintf(tmp, "<l.r.i.r. - %d>\n", in);
	// send it to the communication channel
	write(tmp);
	// release the data on the heap
	free(tmp_base);
    519a:	c8 01       	movw	r24, r16
    519c:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <free>
}
    51a0:	df 91       	pop	r29
    51a2:	cf 91       	pop	r28
    51a4:	1f 91       	pop	r17
    51a6:	0f 91       	pop	r16
    51a8:	08 95       	ret

000051aa <_ZN15Cmissionconsole7adValueEj>:
		in++;
	}
}

void Cmissionconsole::adValue(uint16_t in)
{
    51aa:	0f 93       	push	r16
    51ac:	1f 93       	push	r17
    51ae:	cf 93       	push	r28
    51b0:	df 93       	push	r29
    51b2:	eb 01       	movw	r28, r22
	char* tmp = (char*)calloc(64, sizeof(char));
    51b4:	80 e4       	ldi	r24, 0x40	; 64
    51b6:	90 e0       	ldi	r25, 0x00	; 0
    51b8:	61 e0       	ldi	r22, 0x01	; 1
    51ba:	70 e0       	ldi	r23, 0x00	; 0
    51bc:	0e 94 99 29 	call	0x5332	; 0x5332 <calloc>
    51c0:	8c 01       	movw	r16, r24
	char* tmp_base = tmp;
	// no room on the heap
	if (tmp == NULL){
    51c2:	00 97       	sbiw	r24, 0x00	; 0
    51c4:	59 f1       	breq	.+86     	; 0x521c <_ZN15Cmissionconsole7adValueEj+0x72>
		return;
	}
	// build the a/d conversion packet
	sprintf(tmp, "<a/d - %d>\n", in);
    51c6:	00 d0       	rcall	.+0      	; 0x51c8 <_ZN15Cmissionconsole7adValueEj+0x1e>
    51c8:	00 d0       	rcall	.+0      	; 0x51ca <_ZN15Cmissionconsole7adValueEj+0x20>
    51ca:	00 d0       	rcall	.+0      	; 0x51cc <_ZN15Cmissionconsole7adValueEj+0x22>
    51cc:	ed b7       	in	r30, 0x3d	; 61
    51ce:	fe b7       	in	r31, 0x3e	; 62
    51d0:	31 96       	adiw	r30, 0x01	; 1
    51d2:	ad b7       	in	r26, 0x3d	; 61
    51d4:	be b7       	in	r27, 0x3e	; 62
    51d6:	12 96       	adiw	r26, 0x02	; 2
    51d8:	9c 93       	st	X, r25
    51da:	8e 93       	st	-X, r24
    51dc:	11 97       	sbiw	r26, 0x01	; 1
    51de:	85 e3       	ldi	r24, 0x35	; 53
    51e0:	91 e0       	ldi	r25, 0x01	; 1
    51e2:	93 83       	std	Z+3, r25	; 0x03
    51e4:	82 83       	std	Z+2, r24	; 0x02
    51e6:	d5 83       	std	Z+5, r29	; 0x05
    51e8:	c4 83       	std	Z+4, r28	; 0x04
    51ea:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <sprintf>
    51ee:	f8 01       	movw	r30, r16
    51f0:	8d b7       	in	r24, 0x3d	; 61
    51f2:	9e b7       	in	r25, 0x3e	; 62
    51f4:	06 96       	adiw	r24, 0x06	; 6
    51f6:	0f b6       	in	r0, 0x3f	; 63
    51f8:	f8 94       	cli
    51fa:	9e bf       	out	0x3e, r25	; 62
    51fc:	0f be       	out	0x3f, r0	; 63
    51fe:	8d bf       	out	0x3d, r24	; 61
    5200:	07 c0       	rjmp	.+14     	; 0x5210 <_ZN15Cmissionconsole7adValueEj+0x66>
void Cmissionconsole::write(char* in)
{
	// keep going until all chars are sent
	while (*in != 0x00){
		// wait until the last byte has been transfered
		while ( !( UCSR0A & (1<<5)) );
    5202:	90 91 c0 00 	lds	r25, 0x00C0
    5206:	95 ff       	sbrs	r25, 5
    5208:	fc cf       	rjmp	.-8      	; 0x5202 <_ZN15Cmissionconsole7adValueEj+0x58>
		// load the transmit buffer
		UDR0 = *in;
    520a:	80 93 c6 00 	sts	0x00C6, r24
		// increment the packet pointer
		in++;
    520e:	31 96       	adiw	r30, 0x01	; 1
}

void Cmissionconsole::write(char* in)
{
	// keep going until all chars are sent
	while (*in != 0x00){
    5210:	80 81       	ld	r24, Z
    5212:	88 23       	and	r24, r24
    5214:	b1 f7       	brne	.-20     	; 0x5202 <_ZN15Cmissionconsole7adValueEj+0x58>
	// build the a/d conversion packet
	sprintf(tmp, "<a/d - %d>\n", in);
	// send it to the communication channel
	write(tmp);
	// release the data on the heap
	free(tmp_base);
    5216:	c8 01       	movw	r24, r16
    5218:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <free>
}
    521c:	df 91       	pop	r29
    521e:	cf 91       	pop	r28
    5220:	1f 91       	pop	r17
    5222:	0f 91       	pop	r16
    5224:	08 95       	ret

00005226 <__udivmodhi4>:
    5226:	aa 1b       	sub	r26, r26
    5228:	bb 1b       	sub	r27, r27
    522a:	51 e1       	ldi	r21, 0x11	; 17
    522c:	07 c0       	rjmp	.+14     	; 0x523c <__udivmodhi4_ep>

0000522e <__udivmodhi4_loop>:
    522e:	aa 1f       	adc	r26, r26
    5230:	bb 1f       	adc	r27, r27
    5232:	a6 17       	cp	r26, r22
    5234:	b7 07       	cpc	r27, r23
    5236:	10 f0       	brcs	.+4      	; 0x523c <__udivmodhi4_ep>
    5238:	a6 1b       	sub	r26, r22
    523a:	b7 0b       	sbc	r27, r23

0000523c <__udivmodhi4_ep>:
    523c:	88 1f       	adc	r24, r24
    523e:	99 1f       	adc	r25, r25
    5240:	5a 95       	dec	r21
    5242:	a9 f7       	brne	.-22     	; 0x522e <__udivmodhi4_loop>
    5244:	80 95       	com	r24
    5246:	90 95       	com	r25
    5248:	bc 01       	movw	r22, r24
    524a:	cd 01       	movw	r24, r26
    524c:	08 95       	ret

0000524e <__divmodhi4>:
    524e:	97 fb       	bst	r25, 7
    5250:	09 2e       	mov	r0, r25
    5252:	07 26       	eor	r0, r23
    5254:	0a d0       	rcall	.+20     	; 0x526a <__divmodhi4_neg1>
    5256:	77 fd       	sbrc	r23, 7
    5258:	04 d0       	rcall	.+8      	; 0x5262 <__divmodhi4_neg2>
    525a:	e5 df       	rcall	.-54     	; 0x5226 <__udivmodhi4>
    525c:	06 d0       	rcall	.+12     	; 0x526a <__divmodhi4_neg1>
    525e:	00 20       	and	r0, r0
    5260:	1a f4       	brpl	.+6      	; 0x5268 <__divmodhi4_exit>

00005262 <__divmodhi4_neg2>:
    5262:	70 95       	com	r23
    5264:	61 95       	neg	r22
    5266:	7f 4f       	sbci	r23, 0xFF	; 255

00005268 <__divmodhi4_exit>:
    5268:	08 95       	ret

0000526a <__divmodhi4_neg1>:
    526a:	f6 f7       	brtc	.-4      	; 0x5268 <__divmodhi4_exit>
    526c:	90 95       	com	r25
    526e:	81 95       	neg	r24
    5270:	9f 4f       	sbci	r25, 0xFF	; 255
    5272:	08 95       	ret

00005274 <__udivmodsi4>:
    5274:	a1 e2       	ldi	r26, 0x21	; 33
    5276:	1a 2e       	mov	r1, r26
    5278:	aa 1b       	sub	r26, r26
    527a:	bb 1b       	sub	r27, r27
    527c:	fd 01       	movw	r30, r26
    527e:	0d c0       	rjmp	.+26     	; 0x529a <__udivmodsi4_ep>

00005280 <__udivmodsi4_loop>:
    5280:	aa 1f       	adc	r26, r26
    5282:	bb 1f       	adc	r27, r27
    5284:	ee 1f       	adc	r30, r30
    5286:	ff 1f       	adc	r31, r31
    5288:	a2 17       	cp	r26, r18
    528a:	b3 07       	cpc	r27, r19
    528c:	e4 07       	cpc	r30, r20
    528e:	f5 07       	cpc	r31, r21
    5290:	20 f0       	brcs	.+8      	; 0x529a <__udivmodsi4_ep>
    5292:	a2 1b       	sub	r26, r18
    5294:	b3 0b       	sbc	r27, r19
    5296:	e4 0b       	sbc	r30, r20
    5298:	f5 0b       	sbc	r31, r21

0000529a <__udivmodsi4_ep>:
    529a:	66 1f       	adc	r22, r22
    529c:	77 1f       	adc	r23, r23
    529e:	88 1f       	adc	r24, r24
    52a0:	99 1f       	adc	r25, r25
    52a2:	1a 94       	dec	r1
    52a4:	69 f7       	brne	.-38     	; 0x5280 <__udivmodsi4_loop>
    52a6:	60 95       	com	r22
    52a8:	70 95       	com	r23
    52aa:	80 95       	com	r24
    52ac:	90 95       	com	r25
    52ae:	9b 01       	movw	r18, r22
    52b0:	ac 01       	movw	r20, r24
    52b2:	bd 01       	movw	r22, r26
    52b4:	cf 01       	movw	r24, r30
    52b6:	08 95       	ret

000052b8 <__prologue_saves__>:
    52b8:	2f 92       	push	r2
    52ba:	3f 92       	push	r3
    52bc:	4f 92       	push	r4
    52be:	5f 92       	push	r5
    52c0:	6f 92       	push	r6
    52c2:	7f 92       	push	r7
    52c4:	8f 92       	push	r8
    52c6:	9f 92       	push	r9
    52c8:	af 92       	push	r10
    52ca:	bf 92       	push	r11
    52cc:	cf 92       	push	r12
    52ce:	df 92       	push	r13
    52d0:	ef 92       	push	r14
    52d2:	ff 92       	push	r15
    52d4:	0f 93       	push	r16
    52d6:	1f 93       	push	r17
    52d8:	cf 93       	push	r28
    52da:	df 93       	push	r29
    52dc:	cd b7       	in	r28, 0x3d	; 61
    52de:	de b7       	in	r29, 0x3e	; 62
    52e0:	ca 1b       	sub	r28, r26
    52e2:	db 0b       	sbc	r29, r27
    52e4:	0f b6       	in	r0, 0x3f	; 63
    52e6:	f8 94       	cli
    52e8:	de bf       	out	0x3e, r29	; 62
    52ea:	0f be       	out	0x3f, r0	; 63
    52ec:	cd bf       	out	0x3d, r28	; 61
    52ee:	09 94       	ijmp

000052f0 <__epilogue_restores__>:
    52f0:	2a 88       	ldd	r2, Y+18	; 0x12
    52f2:	39 88       	ldd	r3, Y+17	; 0x11
    52f4:	48 88       	ldd	r4, Y+16	; 0x10
    52f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    52f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    52fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    52fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    52fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    5300:	aa 84       	ldd	r10, Y+10	; 0x0a
    5302:	b9 84       	ldd	r11, Y+9	; 0x09
    5304:	c8 84       	ldd	r12, Y+8	; 0x08
    5306:	df 80       	ldd	r13, Y+7	; 0x07
    5308:	ee 80       	ldd	r14, Y+6	; 0x06
    530a:	fd 80       	ldd	r15, Y+5	; 0x05
    530c:	0c 81       	ldd	r16, Y+4	; 0x04
    530e:	1b 81       	ldd	r17, Y+3	; 0x03
    5310:	aa 81       	ldd	r26, Y+2	; 0x02
    5312:	b9 81       	ldd	r27, Y+1	; 0x01
    5314:	ce 0f       	add	r28, r30
    5316:	d1 1d       	adc	r29, r1
    5318:	0f b6       	in	r0, 0x3f	; 63
    531a:	f8 94       	cli
    531c:	de bf       	out	0x3e, r29	; 62
    531e:	0f be       	out	0x3f, r0	; 63
    5320:	cd bf       	out	0x3d, r28	; 61
    5322:	ed 01       	movw	r28, r26
    5324:	08 95       	ret

00005326 <__tablejump2__>:
    5326:	ee 0f       	add	r30, r30
    5328:	ff 1f       	adc	r31, r31

0000532a <__tablejump__>:
    532a:	05 90       	lpm	r0, Z+
    532c:	f4 91       	lpm	r31, Z+
    532e:	e0 2d       	mov	r30, r0
    5330:	09 94       	ijmp

00005332 <calloc>:
    5332:	ef 92       	push	r14
    5334:	ff 92       	push	r15
    5336:	0f 93       	push	r16
    5338:	1f 93       	push	r17
    533a:	cf 93       	push	r28
    533c:	df 93       	push	r29
    533e:	68 9f       	mul	r22, r24
    5340:	80 01       	movw	r16, r0
    5342:	69 9f       	mul	r22, r25
    5344:	10 0d       	add	r17, r0
    5346:	78 9f       	mul	r23, r24
    5348:	10 0d       	add	r17, r0
    534a:	11 24       	eor	r1, r1
    534c:	c8 01       	movw	r24, r16
    534e:	0e 94 be 29 	call	0x537c	; 0x537c <malloc>
    5352:	e8 2e       	mov	r14, r24
    5354:	e7 01       	movw	r28, r14
    5356:	7e 01       	movw	r14, r28
    5358:	f9 2e       	mov	r15, r25
    535a:	e7 01       	movw	r28, r14
    535c:	e1 14       	cp	r14, r1
    535e:	f1 04       	cpc	r15, r1
    5360:	31 f0       	breq	.+12     	; 0x536e <calloc+0x3c>
    5362:	8e 2d       	mov	r24, r14
    5364:	60 e0       	ldi	r22, 0x00	; 0
    5366:	70 e0       	ldi	r23, 0x00	; 0
    5368:	a8 01       	movw	r20, r16
    536a:	0e 94 10 2c 	call	0x5820	; 0x5820 <memset>
    536e:	7e 01       	movw	r14, r28
    5370:	ce 01       	movw	r24, r28
    5372:	cd b7       	in	r28, 0x3d	; 61
    5374:	de b7       	in	r29, 0x3e	; 62
    5376:	e6 e0       	ldi	r30, 0x06	; 6
    5378:	0c 94 84 29 	jmp	0x5308	; 0x5308 <__epilogue_restores__+0x18>

0000537c <malloc>:
    537c:	ef 92       	push	r14
    537e:	ff 92       	push	r15
    5380:	0f 93       	push	r16
    5382:	1f 93       	push	r17
    5384:	cf 93       	push	r28
    5386:	df 93       	push	r29
    5388:	82 30       	cpi	r24, 0x02	; 2
    538a:	91 05       	cpc	r25, r1
    538c:	10 f4       	brcc	.+4      	; 0x5392 <malloc+0x16>
    538e:	82 e0       	ldi	r24, 0x02	; 2
    5390:	90 e0       	ldi	r25, 0x00	; 0
    5392:	c0 91 ab 05 	lds	r28, 0x05AB
    5396:	d0 91 ac 05 	lds	r29, 0x05AC
    539a:	20 e0       	ldi	r18, 0x00	; 0
    539c:	30 e0       	ldi	r19, 0x00	; 0
    539e:	40 e0       	ldi	r20, 0x00	; 0
    53a0:	50 e0       	ldi	r21, 0x00	; 0
    53a2:	29 c0       	rjmp	.+82     	; 0x53f6 <malloc+0x7a>
    53a4:	68 81       	ld	r22, Y
    53a6:	79 81       	ldd	r23, Y+1	; 0x01
    53a8:	68 17       	cp	r22, r24
    53aa:	79 07       	cpc	r23, r25
    53ac:	d8 f0       	brcs	.+54     	; 0x53e4 <malloc+0x68>
    53ae:	68 17       	cp	r22, r24
    53b0:	79 07       	cpc	r23, r25
    53b2:	79 f4       	brne	.+30     	; 0x53d2 <malloc+0x56>
    53b4:	8a 81       	ldd	r24, Y+2	; 0x02
    53b6:	9b 81       	ldd	r25, Y+3	; 0x03
    53b8:	21 15       	cp	r18, r1
    53ba:	31 05       	cpc	r19, r1
    53bc:	21 f0       	breq	.+8      	; 0x53c6 <malloc+0x4a>
    53be:	f9 01       	movw	r30, r18
    53c0:	93 83       	std	Z+3, r25	; 0x03
    53c2:	82 83       	std	Z+2, r24	; 0x02
    53c4:	04 c0       	rjmp	.+8      	; 0x53ce <malloc+0x52>
    53c6:	90 93 ac 05 	sts	0x05AC, r25
    53ca:	80 93 ab 05 	sts	0x05AB, r24
    53ce:	de 01       	movw	r26, r28
    53d0:	2a c0       	rjmp	.+84     	; 0x5426 <malloc+0xaa>
    53d2:	41 15       	cp	r20, r1
    53d4:	51 05       	cpc	r21, r1
    53d6:	19 f0       	breq	.+6      	; 0x53de <malloc+0x62>
    53d8:	64 17       	cp	r22, r20
    53da:	75 07       	cpc	r23, r21
    53dc:	18 f4       	brcc	.+6      	; 0x53e4 <malloc+0x68>
    53de:	fe 01       	movw	r30, r28
    53e0:	ab 01       	movw	r20, r22
    53e2:	d9 01       	movw	r26, r18
    53e4:	9e 01       	movw	r18, r28
    53e6:	7a 81       	ldd	r23, Y+2	; 0x02
    53e8:	6b 81       	ldd	r22, Y+3	; 0x03
    53ea:	e7 2e       	mov	r14, r23
    53ec:	e7 01       	movw	r28, r14
    53ee:	7e 01       	movw	r14, r28
    53f0:	06 2f       	mov	r16, r22
    53f2:	f6 2e       	mov	r15, r22
    53f4:	e7 01       	movw	r28, r14
    53f6:	20 97       	sbiw	r28, 0x00	; 0
    53f8:	a9 f6       	brne	.-86     	; 0x53a4 <malloc+0x28>
    53fa:	41 15       	cp	r20, r1
    53fc:	51 05       	cpc	r21, r1
    53fe:	f9 f0       	breq	.+62     	; 0x543e <malloc+0xc2>
    5400:	48 1b       	sub	r20, r24
    5402:	59 0b       	sbc	r21, r25
    5404:	44 30       	cpi	r20, 0x04	; 4
    5406:	51 05       	cpc	r21, r1
    5408:	80 f4       	brcc	.+32     	; 0x542a <malloc+0xae>
    540a:	82 81       	ldd	r24, Z+2	; 0x02
    540c:	93 81       	ldd	r25, Z+3	; 0x03
    540e:	10 97       	sbiw	r26, 0x00	; 0
    5410:	29 f0       	breq	.+10     	; 0x541c <malloc+0xa0>
    5412:	13 96       	adiw	r26, 0x03	; 3
    5414:	9c 93       	st	X, r25
    5416:	8e 93       	st	-X, r24
    5418:	12 97       	sbiw	r26, 0x02	; 2
    541a:	04 c0       	rjmp	.+8      	; 0x5424 <malloc+0xa8>
    541c:	90 93 ac 05 	sts	0x05AC, r25
    5420:	80 93 ab 05 	sts	0x05AB, r24
    5424:	df 01       	movw	r26, r30
    5426:	12 96       	adiw	r26, 0x02	; 2
    5428:	45 c0       	rjmp	.+138    	; 0x54b4 <malloc+0x138>
    542a:	df 01       	movw	r26, r30
    542c:	a4 0f       	add	r26, r20
    542e:	b5 1f       	adc	r27, r21
    5430:	8d 93       	st	X+, r24
    5432:	9d 93       	st	X+, r25
    5434:	42 50       	subi	r20, 0x02	; 2
    5436:	50 40       	sbci	r21, 0x00	; 0
    5438:	51 83       	std	Z+1, r21	; 0x01
    543a:	40 83       	st	Z, r20
    543c:	3b c0       	rjmp	.+118    	; 0x54b4 <malloc+0x138>
    543e:	20 91 a9 05 	lds	r18, 0x05A9
    5442:	30 91 aa 05 	lds	r19, 0x05AA
    5446:	21 15       	cp	r18, r1
    5448:	31 05       	cpc	r19, r1
    544a:	41 f4       	brne	.+16     	; 0x545c <malloc+0xe0>
    544c:	20 91 8e 02 	lds	r18, 0x028E
    5450:	30 91 8f 02 	lds	r19, 0x028F
    5454:	30 93 aa 05 	sts	0x05AA, r19
    5458:	20 93 a9 05 	sts	0x05A9, r18
    545c:	20 91 90 02 	lds	r18, 0x0290
    5460:	30 91 91 02 	lds	r19, 0x0291
    5464:	21 15       	cp	r18, r1
    5466:	31 05       	cpc	r19, r1
    5468:	41 f4       	brne	.+16     	; 0x547a <malloc+0xfe>
    546a:	2d b7       	in	r18, 0x3d	; 61
    546c:	3e b7       	in	r19, 0x3e	; 62
    546e:	40 91 8c 02 	lds	r20, 0x028C
    5472:	50 91 8d 02 	lds	r21, 0x028D
    5476:	24 1b       	sub	r18, r20
    5478:	35 0b       	sbc	r19, r21
    547a:	a0 91 a9 05 	lds	r26, 0x05A9
    547e:	b0 91 aa 05 	lds	r27, 0x05AA
    5482:	a2 17       	cp	r26, r18
    5484:	b3 07       	cpc	r27, r19
    5486:	a0 f4       	brcc	.+40     	; 0x54b0 <malloc+0x134>
    5488:	2a 1b       	sub	r18, r26
    548a:	3b 0b       	sbc	r19, r27
    548c:	28 17       	cp	r18, r24
    548e:	39 07       	cpc	r19, r25
    5490:	78 f0       	brcs	.+30     	; 0x54b0 <malloc+0x134>
    5492:	ac 01       	movw	r20, r24
    5494:	4e 5f       	subi	r20, 0xFE	; 254
    5496:	5f 4f       	sbci	r21, 0xFF	; 255
    5498:	24 17       	cp	r18, r20
    549a:	35 07       	cpc	r19, r21
    549c:	48 f0       	brcs	.+18     	; 0x54b0 <malloc+0x134>
    549e:	4a 0f       	add	r20, r26
    54a0:	5b 1f       	adc	r21, r27
    54a2:	50 93 aa 05 	sts	0x05AA, r21
    54a6:	40 93 a9 05 	sts	0x05A9, r20
    54aa:	8d 93       	st	X+, r24
    54ac:	9d 93       	st	X+, r25
    54ae:	02 c0       	rjmp	.+4      	; 0x54b4 <malloc+0x138>
    54b0:	a0 e0       	ldi	r26, 0x00	; 0
    54b2:	b0 e0       	ldi	r27, 0x00	; 0
    54b4:	cd 01       	movw	r24, r26
    54b6:	cd b7       	in	r28, 0x3d	; 61
    54b8:	de b7       	in	r29, 0x3e	; 62
    54ba:	e6 e0       	ldi	r30, 0x06	; 6
    54bc:	0c 94 84 29 	jmp	0x5308	; 0x5308 <__epilogue_restores__+0x18>

000054c0 <free>:
    54c0:	cf 93       	push	r28
    54c2:	df 93       	push	r29
    54c4:	00 97       	sbiw	r24, 0x00	; 0
    54c6:	09 f4       	brne	.+2      	; 0x54ca <free+0xa>
    54c8:	8f c0       	rjmp	.+286    	; 0x55e8 <free+0x128>
    54ca:	fc 01       	movw	r30, r24
    54cc:	32 97       	sbiw	r30, 0x02	; 2
    54ce:	13 82       	std	Z+3, r1	; 0x03
    54d0:	12 82       	std	Z+2, r1	; 0x02
    54d2:	60 91 ab 05 	lds	r22, 0x05AB
    54d6:	70 91 ac 05 	lds	r23, 0x05AC
    54da:	61 15       	cp	r22, r1
    54dc:	71 05       	cpc	r23, r1
    54de:	81 f4       	brne	.+32     	; 0x5500 <free+0x40>
    54e0:	20 81       	ld	r18, Z
    54e2:	31 81       	ldd	r19, Z+1	; 0x01
    54e4:	28 0f       	add	r18, r24
    54e6:	39 1f       	adc	r19, r25
    54e8:	80 91 a9 05 	lds	r24, 0x05A9
    54ec:	90 91 aa 05 	lds	r25, 0x05AA
    54f0:	82 17       	cp	r24, r18
    54f2:	93 07       	cpc	r25, r19
    54f4:	61 f5       	brne	.+88     	; 0x554e <free+0x8e>
    54f6:	f0 93 aa 05 	sts	0x05AA, r31
    54fa:	e0 93 a9 05 	sts	0x05A9, r30
    54fe:	74 c0       	rjmp	.+232    	; 0x55e8 <free+0x128>
    5500:	eb 01       	movw	r28, r22
    5502:	80 e0       	ldi	r24, 0x00	; 0
    5504:	90 e0       	ldi	r25, 0x00	; 0
    5506:	ce 17       	cp	r28, r30
    5508:	df 07       	cpc	r29, r31
    550a:	40 f4       	brcc	.+16     	; 0x551c <free+0x5c>
    550c:	2a 81       	ldd	r18, Y+2	; 0x02
    550e:	3b 81       	ldd	r19, Y+3	; 0x03
    5510:	ce 01       	movw	r24, r28
    5512:	21 15       	cp	r18, r1
    5514:	31 05       	cpc	r19, r1
    5516:	01 f1       	breq	.+64     	; 0x5558 <free+0x98>
    5518:	e9 01       	movw	r28, r18
    551a:	f5 cf       	rjmp	.-22     	; 0x5506 <free+0x46>
    551c:	d3 83       	std	Z+3, r29	; 0x03
    551e:	c2 83       	std	Z+2, r28	; 0x02
    5520:	df 01       	movw	r26, r30
    5522:	4d 91       	ld	r20, X+
    5524:	5d 91       	ld	r21, X+
    5526:	9d 01       	movw	r18, r26
    5528:	24 0f       	add	r18, r20
    552a:	35 1f       	adc	r19, r21
    552c:	c2 17       	cp	r28, r18
    552e:	d3 07       	cpc	r29, r19
    5530:	61 f4       	brne	.+24     	; 0x554a <free+0x8a>
    5532:	28 81       	ld	r18, Y
    5534:	39 81       	ldd	r19, Y+1	; 0x01
    5536:	24 0f       	add	r18, r20
    5538:	35 1f       	adc	r19, r21
    553a:	2e 5f       	subi	r18, 0xFE	; 254
    553c:	3f 4f       	sbci	r19, 0xFF	; 255
    553e:	31 83       	std	Z+1, r19	; 0x01
    5540:	20 83       	st	Z, r18
    5542:	2a 81       	ldd	r18, Y+2	; 0x02
    5544:	3b 81       	ldd	r19, Y+3	; 0x03
    5546:	33 83       	std	Z+3, r19	; 0x03
    5548:	22 83       	std	Z+2, r18	; 0x02
    554a:	00 97       	sbiw	r24, 0x00	; 0
    554c:	29 f4       	brne	.+10     	; 0x5558 <free+0x98>
    554e:	f0 93 ac 05 	sts	0x05AC, r31
    5552:	e0 93 ab 05 	sts	0x05AB, r30
    5556:	48 c0       	rjmp	.+144    	; 0x55e8 <free+0x128>
    5558:	dc 01       	movw	r26, r24
    555a:	13 96       	adiw	r26, 0x03	; 3
    555c:	fc 93       	st	X, r31
    555e:	ee 93       	st	-X, r30
    5560:	12 97       	sbiw	r26, 0x02	; 2
    5562:	ec 01       	movw	r28, r24
    5564:	49 91       	ld	r20, Y+
    5566:	59 91       	ld	r21, Y+
    5568:	c4 0f       	add	r28, r20
    556a:	d5 1f       	adc	r29, r21
    556c:	ec 17       	cp	r30, r28
    556e:	fd 07       	cpc	r31, r29
    5570:	79 f4       	brne	.+30     	; 0x5590 <free+0xd0>
    5572:	20 81       	ld	r18, Z
    5574:	31 81       	ldd	r19, Z+1	; 0x01
    5576:	24 0f       	add	r18, r20
    5578:	35 1f       	adc	r19, r21
    557a:	2e 5f       	subi	r18, 0xFE	; 254
    557c:	3f 4f       	sbci	r19, 0xFF	; 255
    557e:	11 96       	adiw	r26, 0x01	; 1
    5580:	3c 93       	st	X, r19
    5582:	2e 93       	st	-X, r18
    5584:	22 81       	ldd	r18, Z+2	; 0x02
    5586:	33 81       	ldd	r19, Z+3	; 0x03
    5588:	13 96       	adiw	r26, 0x03	; 3
    558a:	3c 93       	st	X, r19
    558c:	2e 93       	st	-X, r18
    558e:	12 97       	sbiw	r26, 0x02	; 2
    5590:	e0 e0       	ldi	r30, 0x00	; 0
    5592:	f0 e0       	ldi	r31, 0x00	; 0
    5594:	db 01       	movw	r26, r22
    5596:	12 96       	adiw	r26, 0x02	; 2
    5598:	8d 91       	ld	r24, X+
    559a:	9c 91       	ld	r25, X
    559c:	13 97       	sbiw	r26, 0x03	; 3
    559e:	00 97       	sbiw	r24, 0x00	; 0
    55a0:	21 f0       	breq	.+8      	; 0x55aa <free+0xea>
    55a2:	e6 2f       	mov	r30, r22
    55a4:	f7 2f       	mov	r31, r23
    55a6:	bc 01       	movw	r22, r24
    55a8:	f5 cf       	rjmp	.-22     	; 0x5594 <free+0xd4>
    55aa:	9b 01       	movw	r18, r22
    55ac:	2e 5f       	subi	r18, 0xFE	; 254
    55ae:	3f 4f       	sbci	r19, 0xFF	; 255
    55b0:	db 01       	movw	r26, r22
    55b2:	8d 91       	ld	r24, X+
    55b4:	9c 91       	ld	r25, X
    55b6:	11 97       	sbiw	r26, 0x01	; 1
    55b8:	82 0f       	add	r24, r18
    55ba:	93 1f       	adc	r25, r19
    55bc:	40 91 a9 05 	lds	r20, 0x05A9
    55c0:	50 91 aa 05 	lds	r21, 0x05AA
    55c4:	48 17       	cp	r20, r24
    55c6:	59 07       	cpc	r21, r25
    55c8:	79 f4       	brne	.+30     	; 0x55e8 <free+0x128>
    55ca:	30 97       	sbiw	r30, 0x00	; 0
    55cc:	29 f4       	brne	.+10     	; 0x55d8 <free+0x118>
    55ce:	10 92 ac 05 	sts	0x05AC, r1
    55d2:	10 92 ab 05 	sts	0x05AB, r1
    55d6:	02 c0       	rjmp	.+4      	; 0x55dc <free+0x11c>
    55d8:	13 82       	std	Z+3, r1	; 0x03
    55da:	12 82       	std	Z+2, r1	; 0x02
    55dc:	22 50       	subi	r18, 0x02	; 2
    55de:	30 40       	sbci	r19, 0x00	; 0
    55e0:	30 93 aa 05 	sts	0x05AA, r19
    55e4:	20 93 a9 05 	sts	0x05A9, r18
    55e8:	df 91       	pop	r29
    55ea:	cf 91       	pop	r28
    55ec:	08 95       	ret

000055ee <realloc>:
    55ee:	a0 e0       	ldi	r26, 0x00	; 0
    55f0:	b0 e0       	ldi	r27, 0x00	; 0
    55f2:	ed ef       	ldi	r30, 0xFD	; 253
    55f4:	fa e2       	ldi	r31, 0x2A	; 42
    55f6:	0c 94 60 29 	jmp	0x52c0	; 0x52c0 <__prologue_saves__+0x8>
    55fa:	ec 01       	movw	r28, r24
    55fc:	cb 01       	movw	r24, r22
    55fe:	20 97       	sbiw	r28, 0x00	; 0
    5600:	41 f4       	brne	.+16     	; 0x5612 <realloc+0x24>
    5602:	0e 94 be 29 	call	0x537c	; 0x537c <malloc>
    5606:	e8 2e       	mov	r14, r24
    5608:	e7 01       	movw	r28, r14
    560a:	7e 01       	movw	r14, r28
    560c:	f9 2e       	mov	r15, r25
    560e:	e7 01       	movw	r28, r14
    5610:	b9 c0       	rjmp	.+370    	; 0x5784 <realloc+0x196>
    5612:	be ef       	ldi	r27, 0xFE	; 254
    5614:	eb 2e       	mov	r14, r27
    5616:	bf ef       	ldi	r27, 0xFF	; 255
    5618:	fb 2e       	mov	r15, r27
    561a:	ec 0e       	add	r14, r28
    561c:	fd 1e       	adc	r15, r29
    561e:	ae 01       	movw	r20, r28
    5620:	46 0f       	add	r20, r22
    5622:	57 1f       	adc	r21, r23
    5624:	4e 15       	cp	r20, r14
    5626:	5f 05       	cpc	r21, r15
    5628:	08 f4       	brcc	.+2      	; 0x562c <realloc+0x3e>
    562a:	aa c0       	rjmp	.+340    	; 0x5780 <realloc+0x192>
    562c:	d7 01       	movw	r26, r14
    562e:	2d 91       	ld	r18, X+
    5630:	3c 91       	ld	r19, X
    5632:	11 97       	sbiw	r26, 0x01	; 1
    5634:	26 17       	cp	r18, r22
    5636:	37 07       	cpc	r19, r23
    5638:	c0 f0       	brcs	.+48     	; 0x566a <realloc+0x7c>
    563a:	25 30       	cpi	r18, 0x05	; 5
    563c:	31 05       	cpc	r19, r1
    563e:	08 f4       	brcc	.+2      	; 0x5642 <realloc+0x54>
    5640:	a1 c0       	rjmp	.+322    	; 0x5784 <realloc+0x196>
    5642:	b9 01       	movw	r22, r18
    5644:	64 50       	subi	r22, 0x04	; 4
    5646:	70 40       	sbci	r23, 0x00	; 0
    5648:	68 17       	cp	r22, r24
    564a:	79 07       	cpc	r23, r25
    564c:	08 f4       	brcc	.+2      	; 0x5650 <realloc+0x62>
    564e:	9a c0       	rjmp	.+308    	; 0x5784 <realloc+0x196>
    5650:	22 50       	subi	r18, 0x02	; 2
    5652:	30 40       	sbci	r19, 0x00	; 0
    5654:	28 1b       	sub	r18, r24
    5656:	39 0b       	sbc	r19, r25
    5658:	fa 01       	movw	r30, r20
    565a:	21 93       	st	Z+, r18
    565c:	31 93       	st	Z+, r19
    565e:	8d 93       	st	X+, r24
    5660:	9c 93       	st	X, r25
    5662:	cf 01       	movw	r24, r30
    5664:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <free>
    5668:	8d c0       	rjmp	.+282    	; 0x5784 <realloc+0x196>
    566a:	6b 01       	movw	r12, r22
    566c:	c2 1a       	sub	r12, r18
    566e:	d3 0a       	sbc	r13, r19
    5670:	5e 01       	movw	r10, r28
    5672:	a2 0e       	add	r10, r18
    5674:	b3 1e       	adc	r11, r19
    5676:	e0 91 ab 05 	lds	r30, 0x05AB
    567a:	f0 91 ac 05 	lds	r31, 0x05AC
    567e:	66 24       	eor	r6, r6
    5680:	77 24       	eor	r7, r7
    5682:	00 e0       	ldi	r16, 0x00	; 0
    5684:	10 e0       	ldi	r17, 0x00	; 0
    5686:	45 c0       	rjmp	.+138    	; 0x5712 <realloc+0x124>
    5688:	ea 15       	cp	r30, r10
    568a:	fb 05       	cpc	r31, r11
    568c:	b9 f5       	brne	.+110    	; 0x56fc <realloc+0x10e>
    568e:	60 81       	ld	r22, Z
    5690:	71 81       	ldd	r23, Z+1	; 0x01
    5692:	a2 e0       	ldi	r26, 0x02	; 2
    5694:	8a 2e       	mov	r8, r26
    5696:	91 2c       	mov	r9, r1
    5698:	86 0e       	add	r8, r22
    569a:	97 1e       	adc	r9, r23
    569c:	8c 14       	cp	r8, r12
    569e:	9d 04       	cpc	r9, r13
    56a0:	68 f1       	brcs	.+90     	; 0x56fc <realloc+0x10e>
    56a2:	8b 01       	movw	r16, r22
    56a4:	0c 19       	sub	r16, r12
    56a6:	1d 09       	sbc	r17, r13
    56a8:	0e 5f       	subi	r16, 0xFE	; 254
    56aa:	1f 4f       	sbci	r17, 0xFF	; 255
    56ac:	b2 80       	ldd	r11, Z+2	; 0x02
    56ae:	a3 80       	ldd	r10, Z+3	; 0x03
    56b0:	05 30       	cpi	r16, 0x05	; 5
    56b2:	11 05       	cpc	r17, r1
    56b4:	60 f0       	brcs	.+24     	; 0x56ce <realloc+0xe0>
    56b6:	fa 01       	movw	r30, r20
    56b8:	b2 82       	std	Z+2, r11	; 0x02
    56ba:	a3 82       	std	Z+3, r10	; 0x03
    56bc:	6c 19       	sub	r22, r12
    56be:	7d 09       	sbc	r23, r13
    56c0:	71 83       	std	Z+1, r23	; 0x01
    56c2:	60 83       	st	Z, r22
    56c4:	d7 01       	movw	r26, r14
    56c6:	11 96       	adiw	r26, 0x01	; 1
    56c8:	9c 93       	st	X, r25
    56ca:	8e 93       	st	-X, r24
    56cc:	09 c0       	rjmp	.+18     	; 0x56e0 <realloc+0xf2>
    56ce:	2e 5f       	subi	r18, 0xFE	; 254
    56d0:	3f 4f       	sbci	r19, 0xFF	; 255
    56d2:	26 0f       	add	r18, r22
    56d4:	37 1f       	adc	r19, r23
    56d6:	f7 01       	movw	r30, r14
    56d8:	31 83       	std	Z+1, r19	; 0x01
    56da:	20 83       	st	Z, r18
    56dc:	eb 2d       	mov	r30, r11
    56de:	fa 2d       	mov	r31, r10
    56e0:	61 14       	cp	r6, r1
    56e2:	71 04       	cpc	r7, r1
    56e4:	31 f0       	breq	.+12     	; 0x56f2 <realloc+0x104>
    56e6:	d3 01       	movw	r26, r6
    56e8:	13 96       	adiw	r26, 0x03	; 3
    56ea:	fc 93       	st	X, r31
    56ec:	ee 93       	st	-X, r30
    56ee:	12 97       	sbiw	r26, 0x02	; 2
    56f0:	49 c0       	rjmp	.+146    	; 0x5784 <realloc+0x196>
    56f2:	f0 93 ac 05 	sts	0x05AC, r31
    56f6:	e0 93 ab 05 	sts	0x05AB, r30
    56fa:	44 c0       	rjmp	.+136    	; 0x5784 <realloc+0x196>
    56fc:	60 81       	ld	r22, Z
    56fe:	71 81       	ldd	r23, Z+1	; 0x01
    5700:	06 17       	cp	r16, r22
    5702:	17 07       	cpc	r17, r23
    5704:	08 f4       	brcc	.+2      	; 0x5708 <realloc+0x11a>
    5706:	8b 01       	movw	r16, r22
    5708:	3f 01       	movw	r6, r30
    570a:	72 81       	ldd	r23, Z+2	; 0x02
    570c:	63 81       	ldd	r22, Z+3	; 0x03
    570e:	e7 2f       	mov	r30, r23
    5710:	f6 2f       	mov	r31, r22
    5712:	30 97       	sbiw	r30, 0x00	; 0
    5714:	09 f0       	breq	.+2      	; 0x5718 <realloc+0x12a>
    5716:	b8 cf       	rjmp	.-144    	; 0x5688 <realloc+0x9a>
    5718:	20 91 a9 05 	lds	r18, 0x05A9
    571c:	30 91 aa 05 	lds	r19, 0x05AA
    5720:	2a 15       	cp	r18, r10
    5722:	3b 05       	cpc	r19, r11
    5724:	e9 f4       	brne	.+58     	; 0x5760 <realloc+0x172>
    5726:	08 17       	cp	r16, r24
    5728:	19 07       	cpc	r17, r25
    572a:	d0 f4       	brcc	.+52     	; 0x5760 <realloc+0x172>
    572c:	20 91 90 02 	lds	r18, 0x0290
    5730:	30 91 91 02 	lds	r19, 0x0291
    5734:	21 15       	cp	r18, r1
    5736:	31 05       	cpc	r19, r1
    5738:	41 f4       	brne	.+16     	; 0x574a <realloc+0x15c>
    573a:	2d b7       	in	r18, 0x3d	; 61
    573c:	3e b7       	in	r19, 0x3e	; 62
    573e:	60 91 8c 02 	lds	r22, 0x028C
    5742:	70 91 8d 02 	lds	r23, 0x028D
    5746:	26 1b       	sub	r18, r22
    5748:	37 0b       	sbc	r19, r23
    574a:	42 17       	cp	r20, r18
    574c:	53 07       	cpc	r21, r19
    574e:	c0 f4       	brcc	.+48     	; 0x5780 <realloc+0x192>
    5750:	50 93 aa 05 	sts	0x05AA, r21
    5754:	40 93 a9 05 	sts	0x05A9, r20
    5758:	f7 01       	movw	r30, r14
    575a:	91 83       	std	Z+1, r25	; 0x01
    575c:	80 83       	st	Z, r24
    575e:	12 c0       	rjmp	.+36     	; 0x5784 <realloc+0x196>
    5760:	0e 94 be 29 	call	0x537c	; 0x537c <malloc>
    5764:	8c 01       	movw	r16, r24
    5766:	00 97       	sbiw	r24, 0x00	; 0
    5768:	59 f0       	breq	.+22     	; 0x5780 <realloc+0x192>
    576a:	d7 01       	movw	r26, r14
    576c:	4d 91       	ld	r20, X+
    576e:	5c 91       	ld	r21, X
    5770:	be 01       	movw	r22, r28
    5772:	0e 94 07 2c 	call	0x580e	; 0x580e <memcpy>
    5776:	ce 01       	movw	r24, r28
    5778:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <free>
    577c:	e8 01       	movw	r28, r16
    577e:	02 c0       	rjmp	.+4      	; 0x5784 <realloc+0x196>
    5780:	c0 e0       	ldi	r28, 0x00	; 0
    5782:	d0 e0       	ldi	r29, 0x00	; 0
    5784:	ce 01       	movw	r24, r28
    5786:	cd b7       	in	r28, 0x3d	; 61
    5788:	de b7       	in	r29, 0x3e	; 62
    578a:	ee e0       	ldi	r30, 0x0E	; 14
    578c:	0c 94 7c 29 	jmp	0x52f8	; 0x52f8 <__epilogue_restores__+0x8>

00005790 <atol>:
    5790:	1f 93       	push	r17
    5792:	fc 01       	movw	r30, r24
    5794:	99 27       	eor	r25, r25
    5796:	88 27       	eor	r24, r24
    5798:	bc 01       	movw	r22, r24
    579a:	e8 94       	clt
    579c:	11 91       	ld	r17, Z+
    579e:	10 32       	cpi	r17, 0x20	; 32
    57a0:	e9 f3       	breq	.-6      	; 0x579c <atol+0xc>
    57a2:	19 30       	cpi	r17, 0x09	; 9
    57a4:	10 f0       	brcs	.+4      	; 0x57aa <atol+0x1a>
    57a6:	1e 30       	cpi	r17, 0x0E	; 14
    57a8:	c8 f3       	brcs	.-14     	; 0x579c <atol+0xc>
    57aa:	1b 32       	cpi	r17, 0x2B	; 43
    57ac:	51 f0       	breq	.+20     	; 0x57c2 <atol+0x32>
    57ae:	1d 32       	cpi	r17, 0x2D	; 45
    57b0:	49 f4       	brne	.+18     	; 0x57c4 <atol+0x34>
    57b2:	68 94       	set
    57b4:	06 c0       	rjmp	.+12     	; 0x57c2 <atol+0x32>
    57b6:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <__mulsi_const_10>
    57ba:	61 0f       	add	r22, r17
    57bc:	71 1d       	adc	r23, r1
    57be:	81 1d       	adc	r24, r1
    57c0:	91 1d       	adc	r25, r1
    57c2:	11 91       	ld	r17, Z+
    57c4:	10 53       	subi	r17, 0x30	; 48
    57c6:	1a 30       	cpi	r17, 0x0A	; 10
    57c8:	b0 f3       	brcs	.-20     	; 0x57b6 <atol+0x26>
    57ca:	3e f4       	brtc	.+14     	; 0x57da <atol+0x4a>
    57cc:	90 95       	com	r25
    57ce:	80 95       	com	r24
    57d0:	70 95       	com	r23
    57d2:	61 95       	neg	r22
    57d4:	7f 4f       	sbci	r23, 0xFF	; 255
    57d6:	8f 4f       	sbci	r24, 0xFF	; 255
    57d8:	9f 4f       	sbci	r25, 0xFF	; 255
    57da:	1f 91       	pop	r17
    57dc:	08 95       	ret

000057de <isspace>:
    57de:	91 11       	cpse	r25, r1
    57e0:	19 c3       	rjmp	.+1586   	; 0x5e14 <__ctype_isfalse>
    57e2:	80 32       	cpi	r24, 0x20	; 32
    57e4:	19 f0       	breq	.+6      	; 0x57ec <isspace+0xe>
    57e6:	89 50       	subi	r24, 0x09	; 9
    57e8:	85 50       	subi	r24, 0x05	; 5
    57ea:	d0 f7       	brcc	.-12     	; 0x57e0 <isspace+0x2>
    57ec:	08 95       	ret

000057ee <tolower>:
    57ee:	91 11       	cpse	r25, r1
    57f0:	08 95       	ret
    57f2:	81 54       	subi	r24, 0x41	; 65
    57f4:	8a 51       	subi	r24, 0x1A	; 26
    57f6:	08 f4       	brcc	.+2      	; 0x57fa <tolower+0xc>
    57f8:	80 5e       	subi	r24, 0xE0	; 224
    57fa:	85 5a       	subi	r24, 0xA5	; 165
    57fc:	08 95       	ret

000057fe <toupper>:
    57fe:	91 11       	cpse	r25, r1
    5800:	08 95       	ret
    5802:	81 56       	subi	r24, 0x61	; 97
    5804:	8a 51       	subi	r24, 0x1A	; 26
    5806:	08 f4       	brcc	.+2      	; 0x580a <toupper+0xc>
    5808:	80 52       	subi	r24, 0x20	; 32
    580a:	85 58       	subi	r24, 0x85	; 133
    580c:	08 95       	ret

0000580e <memcpy>:
    580e:	fb 01       	movw	r30, r22
    5810:	dc 01       	movw	r26, r24
    5812:	02 c0       	rjmp	.+4      	; 0x5818 <memcpy+0xa>
    5814:	01 90       	ld	r0, Z+
    5816:	0d 92       	st	X+, r0
    5818:	41 50       	subi	r20, 0x01	; 1
    581a:	50 40       	sbci	r21, 0x00	; 0
    581c:	d8 f7       	brcc	.-10     	; 0x5814 <memcpy+0x6>
    581e:	08 95       	ret

00005820 <memset>:
    5820:	dc 01       	movw	r26, r24
    5822:	01 c0       	rjmp	.+2      	; 0x5826 <memset+0x6>
    5824:	6d 93       	st	X+, r22
    5826:	41 50       	subi	r20, 0x01	; 1
    5828:	50 40       	sbci	r21, 0x00	; 0
    582a:	e0 f7       	brcc	.-8      	; 0x5824 <memset+0x4>
    582c:	08 95       	ret

0000582e <strcat>:
    582e:	fb 01       	movw	r30, r22
    5830:	dc 01       	movw	r26, r24
    5832:	0d 90       	ld	r0, X+
    5834:	00 20       	and	r0, r0
    5836:	e9 f7       	brne	.-6      	; 0x5832 <strcat+0x4>
    5838:	11 97       	sbiw	r26, 0x01	; 1
    583a:	01 90       	ld	r0, Z+
    583c:	0d 92       	st	X+, r0
    583e:	00 20       	and	r0, r0
    5840:	e1 f7       	brne	.-8      	; 0x583a <strcat+0xc>
    5842:	08 95       	ret

00005844 <strchr>:
    5844:	fc 01       	movw	r30, r24
    5846:	81 91       	ld	r24, Z+
    5848:	86 17       	cp	r24, r22
    584a:	21 f0       	breq	.+8      	; 0x5854 <strchr+0x10>
    584c:	88 23       	and	r24, r24
    584e:	d9 f7       	brne	.-10     	; 0x5846 <strchr+0x2>
    5850:	99 27       	eor	r25, r25
    5852:	08 95       	ret
    5854:	31 97       	sbiw	r30, 0x01	; 1
    5856:	cf 01       	movw	r24, r30
    5858:	08 95       	ret

0000585a <strcmp>:
    585a:	fb 01       	movw	r30, r22
    585c:	dc 01       	movw	r26, r24
    585e:	8d 91       	ld	r24, X+
    5860:	01 90       	ld	r0, Z+
    5862:	80 19       	sub	r24, r0
    5864:	01 10       	cpse	r0, r1
    5866:	d9 f3       	breq	.-10     	; 0x585e <strcmp+0x4>
    5868:	99 0b       	sbc	r25, r25
    586a:	08 95       	ret

0000586c <strcpy>:
    586c:	fb 01       	movw	r30, r22
    586e:	dc 01       	movw	r26, r24
    5870:	01 90       	ld	r0, Z+
    5872:	0d 92       	st	X+, r0
    5874:	00 20       	and	r0, r0
    5876:	e1 f7       	brne	.-8      	; 0x5870 <strcpy+0x4>
    5878:	08 95       	ret

0000587a <strncmp>:
    587a:	fb 01       	movw	r30, r22
    587c:	dc 01       	movw	r26, r24
    587e:	41 50       	subi	r20, 0x01	; 1
    5880:	50 40       	sbci	r21, 0x00	; 0
    5882:	30 f0       	brcs	.+12     	; 0x5890 <strncmp+0x16>
    5884:	8d 91       	ld	r24, X+
    5886:	01 90       	ld	r0, Z+
    5888:	80 19       	sub	r24, r0
    588a:	19 f4       	brne	.+6      	; 0x5892 <strncmp+0x18>
    588c:	00 20       	and	r0, r0
    588e:	b9 f7       	brne	.-18     	; 0x587e <strncmp+0x4>
    5890:	88 1b       	sub	r24, r24
    5892:	99 0b       	sbc	r25, r25
    5894:	08 95       	ret

00005896 <strncpy>:
    5896:	fb 01       	movw	r30, r22
    5898:	dc 01       	movw	r26, r24
    589a:	41 50       	subi	r20, 0x01	; 1
    589c:	50 40       	sbci	r21, 0x00	; 0
    589e:	48 f0       	brcs	.+18     	; 0x58b2 <strncpy+0x1c>
    58a0:	01 90       	ld	r0, Z+
    58a2:	0d 92       	st	X+, r0
    58a4:	00 20       	and	r0, r0
    58a6:	c9 f7       	brne	.-14     	; 0x589a <strncpy+0x4>
    58a8:	01 c0       	rjmp	.+2      	; 0x58ac <strncpy+0x16>
    58aa:	1d 92       	st	X+, r1
    58ac:	41 50       	subi	r20, 0x01	; 1
    58ae:	50 40       	sbci	r21, 0x00	; 0
    58b0:	e0 f7       	brcc	.-8      	; 0x58aa <strncpy+0x14>
    58b2:	08 95       	ret

000058b4 <strrchr>:
    58b4:	fc 01       	movw	r30, r24
    58b6:	81 e0       	ldi	r24, 0x01	; 1
    58b8:	90 e0       	ldi	r25, 0x00	; 0
    58ba:	01 90       	ld	r0, Z+
    58bc:	06 16       	cp	r0, r22
    58be:	09 f4       	brne	.+2      	; 0x58c2 <strrchr+0xe>
    58c0:	cf 01       	movw	r24, r30
    58c2:	00 20       	and	r0, r0
    58c4:	d1 f7       	brne	.-12     	; 0x58ba <strrchr+0x6>
    58c6:	01 97       	sbiw	r24, 0x01	; 1
    58c8:	08 95       	ret

000058ca <strstr>:
    58ca:	fb 01       	movw	r30, r22
    58cc:	51 91       	ld	r21, Z+
    58ce:	55 23       	and	r21, r21
    58d0:	a9 f0       	breq	.+42     	; 0x58fc <strstr+0x32>
    58d2:	bf 01       	movw	r22, r30
    58d4:	dc 01       	movw	r26, r24
    58d6:	4d 91       	ld	r20, X+
    58d8:	45 17       	cp	r20, r21
    58da:	41 11       	cpse	r20, r1
    58dc:	e1 f7       	brne	.-8      	; 0x58d6 <strstr+0xc>
    58de:	59 f4       	brne	.+22     	; 0x58f6 <strstr+0x2c>
    58e0:	cd 01       	movw	r24, r26
    58e2:	01 90       	ld	r0, Z+
    58e4:	00 20       	and	r0, r0
    58e6:	49 f0       	breq	.+18     	; 0x58fa <strstr+0x30>
    58e8:	4d 91       	ld	r20, X+
    58ea:	40 15       	cp	r20, r0
    58ec:	41 11       	cpse	r20, r1
    58ee:	c9 f3       	breq	.-14     	; 0x58e2 <strstr+0x18>
    58f0:	fb 01       	movw	r30, r22
    58f2:	41 11       	cpse	r20, r1
    58f4:	ef cf       	rjmp	.-34     	; 0x58d4 <strstr+0xa>
    58f6:	81 e0       	ldi	r24, 0x01	; 1
    58f8:	90 e0       	ldi	r25, 0x00	; 0
    58fa:	01 97       	sbiw	r24, 0x01	; 1
    58fc:	08 95       	ret

000058fe <itoa>:
    58fe:	fb 01       	movw	r30, r22
    5900:	9f 01       	movw	r18, r30
    5902:	e8 94       	clt
    5904:	42 30       	cpi	r20, 0x02	; 2
    5906:	c4 f0       	brlt	.+48     	; 0x5938 <itoa+0x3a>
    5908:	45 32       	cpi	r20, 0x25	; 37
    590a:	b4 f4       	brge	.+44     	; 0x5938 <itoa+0x3a>
    590c:	4a 30       	cpi	r20, 0x0A	; 10
    590e:	29 f4       	brne	.+10     	; 0x591a <itoa+0x1c>
    5910:	97 fb       	bst	r25, 7
    5912:	1e f4       	brtc	.+6      	; 0x591a <itoa+0x1c>
    5914:	90 95       	com	r25
    5916:	81 95       	neg	r24
    5918:	9f 4f       	sbci	r25, 0xFF	; 255
    591a:	64 2f       	mov	r22, r20
    591c:	77 27       	eor	r23, r23
    591e:	0e 94 13 29 	call	0x5226	; 0x5226 <__udivmodhi4>
    5922:	80 5d       	subi	r24, 0xD0	; 208
    5924:	8a 33       	cpi	r24, 0x3A	; 58
    5926:	0c f0       	brlt	.+2      	; 0x592a <itoa+0x2c>
    5928:	89 5d       	subi	r24, 0xD9	; 217
    592a:	81 93       	st	Z+, r24
    592c:	cb 01       	movw	r24, r22
    592e:	00 97       	sbiw	r24, 0x00	; 0
    5930:	a1 f7       	brne	.-24     	; 0x591a <itoa+0x1c>
    5932:	16 f4       	brtc	.+4      	; 0x5938 <itoa+0x3a>
    5934:	5d e2       	ldi	r21, 0x2D	; 45
    5936:	51 93       	st	Z+, r21
    5938:	10 82       	st	Z, r1
    593a:	c9 01       	movw	r24, r18
    593c:	0c 94 23 2f 	jmp	0x5e46	; 0x5e46 <strrev>

00005940 <ltoa>:
    5940:	fa 01       	movw	r30, r20
    5942:	cf 93       	push	r28
    5944:	ff 93       	push	r31
    5946:	ef 93       	push	r30
    5948:	22 30       	cpi	r18, 0x02	; 2
    594a:	44 f1       	brlt	.+80     	; 0x599c <ltoa+0x5c>
    594c:	25 32       	cpi	r18, 0x25	; 37
    594e:	34 f5       	brge	.+76     	; 0x599c <ltoa+0x5c>
    5950:	c2 2f       	mov	r28, r18
    5952:	e8 94       	clt
    5954:	ca 30       	cpi	r28, 0x0A	; 10
    5956:	49 f4       	brne	.+18     	; 0x596a <ltoa+0x2a>
    5958:	97 fb       	bst	r25, 7
    595a:	3e f4       	brtc	.+14     	; 0x596a <ltoa+0x2a>
    595c:	90 95       	com	r25
    595e:	80 95       	com	r24
    5960:	70 95       	com	r23
    5962:	61 95       	neg	r22
    5964:	7f 4f       	sbci	r23, 0xFF	; 255
    5966:	8f 4f       	sbci	r24, 0xFF	; 255
    5968:	9f 4f       	sbci	r25, 0xFF	; 255
    596a:	2c 2f       	mov	r18, r28
    596c:	33 27       	eor	r19, r19
    596e:	44 27       	eor	r20, r20
    5970:	55 27       	eor	r21, r21
    5972:	ff 93       	push	r31
    5974:	ef 93       	push	r30
    5976:	0e 94 3a 29 	call	0x5274	; 0x5274 <__udivmodsi4>
    597a:	ef 91       	pop	r30
    597c:	ff 91       	pop	r31
    597e:	60 5d       	subi	r22, 0xD0	; 208
    5980:	6a 33       	cpi	r22, 0x3A	; 58
    5982:	0c f0       	brlt	.+2      	; 0x5986 <ltoa+0x46>
    5984:	69 5d       	subi	r22, 0xD9	; 217
    5986:	61 93       	st	Z+, r22
    5988:	b9 01       	movw	r22, r18
    598a:	ca 01       	movw	r24, r20
    598c:	60 50       	subi	r22, 0x00	; 0
    598e:	70 40       	sbci	r23, 0x00	; 0
    5990:	80 40       	sbci	r24, 0x00	; 0
    5992:	90 40       	sbci	r25, 0x00	; 0
    5994:	51 f7       	brne	.-44     	; 0x596a <ltoa+0x2a>
    5996:	16 f4       	brtc	.+4      	; 0x599c <ltoa+0x5c>
    5998:	cd e2       	ldi	r28, 0x2D	; 45
    599a:	c1 93       	st	Z+, r28
    599c:	10 82       	st	Z, r1
    599e:	8f 91       	pop	r24
    59a0:	9f 91       	pop	r25
    59a2:	cf 91       	pop	r28
    59a4:	0c 94 23 2f 	jmp	0x5e46	; 0x5e46 <strrev>

000059a8 <__mulsi_const_10>:
    59a8:	59 2f       	mov	r21, r25
    59aa:	48 2f       	mov	r20, r24
    59ac:	37 2f       	mov	r19, r23
    59ae:	26 2f       	mov	r18, r22
    59b0:	66 0f       	add	r22, r22
    59b2:	77 1f       	adc	r23, r23
    59b4:	88 1f       	adc	r24, r24
    59b6:	99 1f       	adc	r25, r25
    59b8:	66 0f       	add	r22, r22
    59ba:	77 1f       	adc	r23, r23
    59bc:	88 1f       	adc	r24, r24
    59be:	99 1f       	adc	r25, r25
    59c0:	62 0f       	add	r22, r18
    59c2:	73 1f       	adc	r23, r19
    59c4:	84 1f       	adc	r24, r20
    59c6:	95 1f       	adc	r25, r21
    59c8:	66 0f       	add	r22, r22
    59ca:	77 1f       	adc	r23, r23
    59cc:	88 1f       	adc	r24, r24
    59ce:	99 1f       	adc	r25, r25
    59d0:	08 95       	ret

000059d2 <ultoa>:
    59d2:	fa 01       	movw	r30, r20
    59d4:	cf 93       	push	r28
    59d6:	ff 93       	push	r31
    59d8:	ef 93       	push	r30
    59da:	22 30       	cpi	r18, 0x02	; 2
    59dc:	cc f0       	brlt	.+50     	; 0x5a10 <ultoa+0x3e>
    59de:	25 32       	cpi	r18, 0x25	; 37
    59e0:	bc f4       	brge	.+46     	; 0x5a10 <ultoa+0x3e>
    59e2:	c2 2f       	mov	r28, r18
    59e4:	2c 2f       	mov	r18, r28
    59e6:	33 27       	eor	r19, r19
    59e8:	44 27       	eor	r20, r20
    59ea:	55 27       	eor	r21, r21
    59ec:	ff 93       	push	r31
    59ee:	ef 93       	push	r30
    59f0:	0e 94 3a 29 	call	0x5274	; 0x5274 <__udivmodsi4>
    59f4:	ef 91       	pop	r30
    59f6:	ff 91       	pop	r31
    59f8:	60 5d       	subi	r22, 0xD0	; 208
    59fa:	6a 33       	cpi	r22, 0x3A	; 58
    59fc:	0c f0       	brlt	.+2      	; 0x5a00 <ultoa+0x2e>
    59fe:	69 5d       	subi	r22, 0xD9	; 217
    5a00:	61 93       	st	Z+, r22
    5a02:	b9 01       	movw	r22, r18
    5a04:	ca 01       	movw	r24, r20
    5a06:	60 50       	subi	r22, 0x00	; 0
    5a08:	70 40       	sbci	r23, 0x00	; 0
    5a0a:	80 40       	sbci	r24, 0x00	; 0
    5a0c:	90 40       	sbci	r25, 0x00	; 0
    5a0e:	51 f7       	brne	.-44     	; 0x59e4 <ultoa+0x12>
    5a10:	10 82       	st	Z, r1
    5a12:	8f 91       	pop	r24
    5a14:	9f 91       	pop	r25
    5a16:	cf 91       	pop	r28
    5a18:	0c 94 23 2f 	jmp	0x5e46	; 0x5e46 <strrev>

00005a1c <sprintf>:
    5a1c:	ae e0       	ldi	r26, 0x0E	; 14
    5a1e:	b0 e0       	ldi	r27, 0x00	; 0
    5a20:	e4 e1       	ldi	r30, 0x14	; 20
    5a22:	fd e2       	ldi	r31, 0x2D	; 45
    5a24:	0c 94 6a 29 	jmp	0x52d4	; 0x52d4 <__prologue_saves__+0x1c>
    5a28:	0d 89       	ldd	r16, Y+21	; 0x15
    5a2a:	1e 89       	ldd	r17, Y+22	; 0x16
    5a2c:	86 e0       	ldi	r24, 0x06	; 6
    5a2e:	8c 83       	std	Y+4, r24	; 0x04
    5a30:	1a 83       	std	Y+2, r17	; 0x02
    5a32:	09 83       	std	Y+1, r16	; 0x01
    5a34:	8f ef       	ldi	r24, 0xFF	; 255
    5a36:	9f e7       	ldi	r25, 0x7F	; 127
    5a38:	9e 83       	std	Y+6, r25	; 0x06
    5a3a:	8d 83       	std	Y+5, r24	; 0x05
    5a3c:	9e 01       	movw	r18, r28
    5a3e:	27 5e       	subi	r18, 0xE7	; 231
    5a40:	3f 4f       	sbci	r19, 0xFF	; 255
    5a42:	ce 01       	movw	r24, r28
    5a44:	01 96       	adiw	r24, 0x01	; 1
    5a46:	6f 89       	ldd	r22, Y+23	; 0x17
    5a48:	78 8d       	ldd	r23, Y+24	; 0x18
    5a4a:	a9 01       	movw	r20, r18
    5a4c:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <vfprintf>
    5a50:	ef 81       	ldd	r30, Y+7	; 0x07
    5a52:	f8 85       	ldd	r31, Y+8	; 0x08
    5a54:	e0 0f       	add	r30, r16
    5a56:	f1 1f       	adc	r31, r17
    5a58:	10 82       	st	Z, r1
    5a5a:	2e 96       	adiw	r28, 0x0e	; 14
    5a5c:	e4 e0       	ldi	r30, 0x04	; 4
    5a5e:	0c 94 86 29 	jmp	0x530c	; 0x530c <__epilogue_restores__+0x1c>

00005a62 <vfprintf>:
    5a62:	ac e0       	ldi	r26, 0x0C	; 12
    5a64:	b0 e0       	ldi	r27, 0x00	; 0
    5a66:	e7 e3       	ldi	r30, 0x37	; 55
    5a68:	fd e2       	ldi	r31, 0x2D	; 45
    5a6a:	0c 94 5d 29 	jmp	0x52ba	; 0x52ba <__prologue_saves__+0x2>
    5a6e:	6c 01       	movw	r12, r24
    5a70:	2b 01       	movw	r4, r22
    5a72:	8a 01       	movw	r16, r20
    5a74:	fc 01       	movw	r30, r24
    5a76:	17 82       	std	Z+7, r1	; 0x07
    5a78:	16 82       	std	Z+6, r1	; 0x06
    5a7a:	83 81       	ldd	r24, Z+3	; 0x03
    5a7c:	81 fd       	sbrc	r24, 1
    5a7e:	03 c0       	rjmp	.+6      	; 0x5a86 <vfprintf+0x24>
    5a80:	2f ef       	ldi	r18, 0xFF	; 255
    5a82:	3f ef       	ldi	r19, 0xFF	; 255
    5a84:	c2 c1       	rjmp	.+900    	; 0x5e0a <vfprintf+0x3a8>
    5a86:	4e 01       	movw	r8, r28
    5a88:	08 94       	sec
    5a8a:	81 1c       	adc	r8, r1
    5a8c:	91 1c       	adc	r9, r1
    5a8e:	6f e3       	ldi	r22, 0x3F	; 63
    5a90:	36 2e       	mov	r3, r22
    5a92:	f6 01       	movw	r30, r12
    5a94:	93 81       	ldd	r25, Z+3	; 0x03
    5a96:	f2 01       	movw	r30, r4
    5a98:	93 fd       	sbrc	r25, 3
    5a9a:	85 91       	lpm	r24, Z+
    5a9c:	93 ff       	sbrs	r25, 3
    5a9e:	81 91       	ld	r24, Z+
    5aa0:	2f 01       	movw	r4, r30
    5aa2:	88 23       	and	r24, r24
    5aa4:	09 f4       	brne	.+2      	; 0x5aa8 <vfprintf+0x46>
    5aa6:	ae c1       	rjmp	.+860    	; 0x5e04 <vfprintf+0x3a2>
    5aa8:	85 32       	cpi	r24, 0x25	; 37
    5aaa:	39 f4       	brne	.+14     	; 0x5aba <vfprintf+0x58>
    5aac:	93 fd       	sbrc	r25, 3
    5aae:	85 91       	lpm	r24, Z+
    5ab0:	93 ff       	sbrs	r25, 3
    5ab2:	81 91       	ld	r24, Z+
    5ab4:	2f 01       	movw	r4, r30
    5ab6:	85 32       	cpi	r24, 0x25	; 37
    5ab8:	29 f4       	brne	.+10     	; 0x5ac4 <vfprintf+0x62>
    5aba:	90 e0       	ldi	r25, 0x00	; 0
    5abc:	b6 01       	movw	r22, r12
    5abe:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <fputc>
    5ac2:	e7 cf       	rjmp	.-50     	; 0x5a92 <vfprintf+0x30>
    5ac4:	ee 24       	eor	r14, r14
    5ac6:	ff 24       	eor	r15, r15
    5ac8:	20 e0       	ldi	r18, 0x00	; 0
    5aca:	20 32       	cpi	r18, 0x20	; 32
    5acc:	b0 f4       	brcc	.+44     	; 0x5afa <vfprintf+0x98>
    5ace:	8b 32       	cpi	r24, 0x2B	; 43
    5ad0:	69 f0       	breq	.+26     	; 0x5aec <vfprintf+0x8a>
    5ad2:	8c 32       	cpi	r24, 0x2C	; 44
    5ad4:	28 f4       	brcc	.+10     	; 0x5ae0 <vfprintf+0x7e>
    5ad6:	80 32       	cpi	r24, 0x20	; 32
    5ad8:	51 f0       	breq	.+20     	; 0x5aee <vfprintf+0x8c>
    5ada:	83 32       	cpi	r24, 0x23	; 35
    5adc:	71 f4       	brne	.+28     	; 0x5afa <vfprintf+0x98>
    5ade:	0b c0       	rjmp	.+22     	; 0x5af6 <vfprintf+0x94>
    5ae0:	8d 32       	cpi	r24, 0x2D	; 45
    5ae2:	39 f0       	breq	.+14     	; 0x5af2 <vfprintf+0x90>
    5ae4:	80 33       	cpi	r24, 0x30	; 48
    5ae6:	49 f4       	brne	.+18     	; 0x5afa <vfprintf+0x98>
    5ae8:	21 60       	ori	r18, 0x01	; 1
    5aea:	2c c0       	rjmp	.+88     	; 0x5b44 <vfprintf+0xe2>
    5aec:	22 60       	ori	r18, 0x02	; 2
    5aee:	24 60       	ori	r18, 0x04	; 4
    5af0:	29 c0       	rjmp	.+82     	; 0x5b44 <vfprintf+0xe2>
    5af2:	28 60       	ori	r18, 0x08	; 8
    5af4:	27 c0       	rjmp	.+78     	; 0x5b44 <vfprintf+0xe2>
    5af6:	20 61       	ori	r18, 0x10	; 16
    5af8:	25 c0       	rjmp	.+74     	; 0x5b44 <vfprintf+0xe2>
    5afa:	27 fd       	sbrc	r18, 7
    5afc:	2c c0       	rjmp	.+88     	; 0x5b56 <vfprintf+0xf4>
    5afe:	38 2f       	mov	r19, r24
    5b00:	30 53       	subi	r19, 0x30	; 48
    5b02:	3a 30       	cpi	r19, 0x0A	; 10
    5b04:	98 f4       	brcc	.+38     	; 0x5b2c <vfprintf+0xca>
    5b06:	26 ff       	sbrs	r18, 6
    5b08:	08 c0       	rjmp	.+16     	; 0x5b1a <vfprintf+0xb8>
    5b0a:	8e 2d       	mov	r24, r14
    5b0c:	88 0f       	add	r24, r24
    5b0e:	e8 2e       	mov	r14, r24
    5b10:	ee 0c       	add	r14, r14
    5b12:	ee 0c       	add	r14, r14
    5b14:	e8 0e       	add	r14, r24
    5b16:	e3 0e       	add	r14, r19
    5b18:	15 c0       	rjmp	.+42     	; 0x5b44 <vfprintf+0xe2>
    5b1a:	8f 2d       	mov	r24, r15
    5b1c:	88 0f       	add	r24, r24
    5b1e:	f8 2e       	mov	r15, r24
    5b20:	ff 0c       	add	r15, r15
    5b22:	ff 0c       	add	r15, r15
    5b24:	f8 0e       	add	r15, r24
    5b26:	f3 0e       	add	r15, r19
    5b28:	20 62       	ori	r18, 0x20	; 32
    5b2a:	0c c0       	rjmp	.+24     	; 0x5b44 <vfprintf+0xe2>
    5b2c:	8e 32       	cpi	r24, 0x2E	; 46
    5b2e:	21 f4       	brne	.+8      	; 0x5b38 <vfprintf+0xd6>
    5b30:	26 fd       	sbrc	r18, 6
    5b32:	68 c1       	rjmp	.+720    	; 0x5e04 <vfprintf+0x3a2>
    5b34:	20 64       	ori	r18, 0x40	; 64
    5b36:	06 c0       	rjmp	.+12     	; 0x5b44 <vfprintf+0xe2>
    5b38:	8c 36       	cpi	r24, 0x6C	; 108
    5b3a:	11 f4       	brne	.+4      	; 0x5b40 <vfprintf+0xde>
    5b3c:	20 68       	ori	r18, 0x80	; 128
    5b3e:	02 c0       	rjmp	.+4      	; 0x5b44 <vfprintf+0xe2>
    5b40:	88 36       	cpi	r24, 0x68	; 104
    5b42:	49 f4       	brne	.+18     	; 0x5b56 <vfprintf+0xf4>
    5b44:	f2 01       	movw	r30, r4
    5b46:	93 fd       	sbrc	r25, 3
    5b48:	85 91       	lpm	r24, Z+
    5b4a:	93 ff       	sbrs	r25, 3
    5b4c:	81 91       	ld	r24, Z+
    5b4e:	2f 01       	movw	r4, r30
    5b50:	88 23       	and	r24, r24
    5b52:	09 f0       	breq	.+2      	; 0x5b56 <vfprintf+0xf4>
    5b54:	ba cf       	rjmp	.-140    	; 0x5aca <vfprintf+0x68>
    5b56:	98 2f       	mov	r25, r24
    5b58:	95 54       	subi	r25, 0x45	; 69
    5b5a:	93 30       	cpi	r25, 0x03	; 3
    5b5c:	18 f0       	brcs	.+6      	; 0x5b64 <vfprintf+0x102>
    5b5e:	90 52       	subi	r25, 0x20	; 32
    5b60:	93 30       	cpi	r25, 0x03	; 3
    5b62:	20 f4       	brcc	.+8      	; 0x5b6c <vfprintf+0x10a>
    5b64:	0c 5f       	subi	r16, 0xFC	; 252
    5b66:	1f 4f       	sbci	r17, 0xFF	; 255
    5b68:	39 82       	std	Y+1, r3	; 0x01
    5b6a:	0d c0       	rjmp	.+26     	; 0x5b86 <vfprintf+0x124>
    5b6c:	83 36       	cpi	r24, 0x63	; 99
    5b6e:	31 f0       	breq	.+12     	; 0x5b7c <vfprintf+0x11a>
    5b70:	83 37       	cpi	r24, 0x73	; 115
    5b72:	71 f0       	breq	.+28     	; 0x5b90 <vfprintf+0x12e>
    5b74:	83 35       	cpi	r24, 0x53	; 83
    5b76:	09 f0       	breq	.+2      	; 0x5b7a <vfprintf+0x118>
    5b78:	58 c0       	rjmp	.+176    	; 0x5c2a <vfprintf+0x1c8>
    5b7a:	1e c0       	rjmp	.+60     	; 0x5bb8 <vfprintf+0x156>
    5b7c:	f8 01       	movw	r30, r16
    5b7e:	80 81       	ld	r24, Z
    5b80:	89 83       	std	Y+1, r24	; 0x01
    5b82:	0e 5f       	subi	r16, 0xFE	; 254
    5b84:	1f 4f       	sbci	r17, 0xFF	; 255
    5b86:	54 01       	movw	r10, r8
    5b88:	51 e0       	ldi	r21, 0x01	; 1
    5b8a:	65 2e       	mov	r6, r21
    5b8c:	71 2c       	mov	r7, r1
    5b8e:	12 c0       	rjmp	.+36     	; 0x5bb4 <vfprintf+0x152>
    5b90:	f8 01       	movw	r30, r16
    5b92:	a0 80       	ld	r10, Z
    5b94:	b1 80       	ldd	r11, Z+1	; 0x01
    5b96:	26 fd       	sbrc	r18, 6
    5b98:	03 c0       	rjmp	.+6      	; 0x5ba0 <vfprintf+0x13e>
    5b9a:	6f ef       	ldi	r22, 0xFF	; 255
    5b9c:	7f ef       	ldi	r23, 0xFF	; 255
    5b9e:	02 c0       	rjmp	.+4      	; 0x5ba4 <vfprintf+0x142>
    5ba0:	6e 2d       	mov	r22, r14
    5ba2:	70 e0       	ldi	r23, 0x00	; 0
    5ba4:	0e 5f       	subi	r16, 0xFE	; 254
    5ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    5ba8:	c5 01       	movw	r24, r10
    5baa:	2c 87       	std	Y+12, r18	; 0x0c
    5bac:	0e 94 18 2f 	call	0x5e30	; 0x5e30 <strnlen>
    5bb0:	3c 01       	movw	r6, r24
    5bb2:	2c 85       	ldd	r18, Y+12	; 0x0c
    5bb4:	2f 77       	andi	r18, 0x7F	; 127
    5bb6:	13 c0       	rjmp	.+38     	; 0x5bde <vfprintf+0x17c>
    5bb8:	f8 01       	movw	r30, r16
    5bba:	a0 80       	ld	r10, Z
    5bbc:	b1 80       	ldd	r11, Z+1	; 0x01
    5bbe:	26 fd       	sbrc	r18, 6
    5bc0:	03 c0       	rjmp	.+6      	; 0x5bc8 <vfprintf+0x166>
    5bc2:	6f ef       	ldi	r22, 0xFF	; 255
    5bc4:	7f ef       	ldi	r23, 0xFF	; 255
    5bc6:	02 c0       	rjmp	.+4      	; 0x5bcc <vfprintf+0x16a>
    5bc8:	6e 2d       	mov	r22, r14
    5bca:	70 e0       	ldi	r23, 0x00	; 0
    5bcc:	0e 5f       	subi	r16, 0xFE	; 254
    5bce:	1f 4f       	sbci	r17, 0xFF	; 255
    5bd0:	c5 01       	movw	r24, r10
    5bd2:	2c 87       	std	Y+12, r18	; 0x0c
    5bd4:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <strnlen_P>
    5bd8:	3c 01       	movw	r6, r24
    5bda:	2c 85       	ldd	r18, Y+12	; 0x0c
    5bdc:	20 68       	ori	r18, 0x80	; 128
    5bde:	23 ff       	sbrs	r18, 3
    5be0:	09 c0       	rjmp	.+18     	; 0x5bf4 <vfprintf+0x192>
    5be2:	1f c0       	rjmp	.+62     	; 0x5c22 <vfprintf+0x1c0>
    5be4:	80 e2       	ldi	r24, 0x20	; 32
    5be6:	90 e0       	ldi	r25, 0x00	; 0
    5be8:	b6 01       	movw	r22, r12
    5bea:	2c 87       	std	Y+12, r18	; 0x0c
    5bec:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <fputc>
    5bf0:	fa 94       	dec	r15
    5bf2:	2c 85       	ldd	r18, Y+12	; 0x0c
    5bf4:	8f 2d       	mov	r24, r15
    5bf6:	90 e0       	ldi	r25, 0x00	; 0
    5bf8:	68 16       	cp	r6, r24
    5bfa:	79 06       	cpc	r7, r25
    5bfc:	98 f3       	brcs	.-26     	; 0x5be4 <vfprintf+0x182>
    5bfe:	11 c0       	rjmp	.+34     	; 0x5c22 <vfprintf+0x1c0>
    5c00:	f5 01       	movw	r30, r10
    5c02:	27 fd       	sbrc	r18, 7
    5c04:	85 91       	lpm	r24, Z+
    5c06:	27 ff       	sbrs	r18, 7
    5c08:	81 91       	ld	r24, Z+
    5c0a:	5f 01       	movw	r10, r30
    5c0c:	90 e0       	ldi	r25, 0x00	; 0
    5c0e:	b6 01       	movw	r22, r12
    5c10:	2c 87       	std	Y+12, r18	; 0x0c
    5c12:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <fputc>
    5c16:	2c 85       	ldd	r18, Y+12	; 0x0c
    5c18:	f1 10       	cpse	r15, r1
    5c1a:	fa 94       	dec	r15
    5c1c:	08 94       	sec
    5c1e:	61 08       	sbc	r6, r1
    5c20:	71 08       	sbc	r7, r1
    5c22:	61 14       	cp	r6, r1
    5c24:	71 04       	cpc	r7, r1
    5c26:	61 f7       	brne	.-40     	; 0x5c00 <vfprintf+0x19e>
    5c28:	ea c0       	rjmp	.+468    	; 0x5dfe <vfprintf+0x39c>
    5c2a:	84 36       	cpi	r24, 0x64	; 100
    5c2c:	11 f0       	breq	.+4      	; 0x5c32 <vfprintf+0x1d0>
    5c2e:	89 36       	cpi	r24, 0x69	; 105
    5c30:	51 f5       	brne	.+84     	; 0x5c86 <vfprintf+0x224>
    5c32:	27 ff       	sbrs	r18, 7
    5c34:	08 c0       	rjmp	.+16     	; 0x5c46 <vfprintf+0x1e4>
    5c36:	f8 01       	movw	r30, r16
    5c38:	60 81       	ld	r22, Z
    5c3a:	71 81       	ldd	r23, Z+1	; 0x01
    5c3c:	82 81       	ldd	r24, Z+2	; 0x02
    5c3e:	93 81       	ldd	r25, Z+3	; 0x03
    5c40:	0c 5f       	subi	r16, 0xFC	; 252
    5c42:	1f 4f       	sbci	r17, 0xFF	; 255
    5c44:	0a c0       	rjmp	.+20     	; 0x5c5a <vfprintf+0x1f8>
    5c46:	f8 01       	movw	r30, r16
    5c48:	40 81       	ld	r20, Z
    5c4a:	51 81       	ldd	r21, Z+1	; 0x01
    5c4c:	ba 01       	movw	r22, r20
    5c4e:	88 27       	eor	r24, r24
    5c50:	77 fd       	sbrc	r23, 7
    5c52:	80 95       	com	r24
    5c54:	98 2f       	mov	r25, r24
    5c56:	0e 5f       	subi	r16, 0xFE	; 254
    5c58:	1f 4f       	sbci	r17, 0xFF	; 255
    5c5a:	4f e6       	ldi	r20, 0x6F	; 111
    5c5c:	b4 2e       	mov	r11, r20
    5c5e:	b2 22       	and	r11, r18
    5c60:	97 ff       	sbrs	r25, 7
    5c62:	09 c0       	rjmp	.+18     	; 0x5c76 <vfprintf+0x214>
    5c64:	90 95       	com	r25
    5c66:	80 95       	com	r24
    5c68:	70 95       	com	r23
    5c6a:	61 95       	neg	r22
    5c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    5c6e:	8f 4f       	sbci	r24, 0xFF	; 255
    5c70:	9f 4f       	sbci	r25, 0xFF	; 255
    5c72:	f0 e8       	ldi	r31, 0x80	; 128
    5c74:	bf 2a       	or	r11, r31
    5c76:	a4 01       	movw	r20, r8
    5c78:	2a e0       	ldi	r18, 0x0A	; 10
    5c7a:	30 e0       	ldi	r19, 0x00	; 0
    5c7c:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <__ultoa_invert>
    5c80:	78 2e       	mov	r7, r24
    5c82:	78 18       	sub	r7, r8
    5c84:	43 c0       	rjmp	.+134    	; 0x5d0c <vfprintf+0x2aa>
    5c86:	85 37       	cpi	r24, 0x75	; 117
    5c88:	31 f4       	brne	.+12     	; 0x5c96 <vfprintf+0x234>
    5c8a:	3f ee       	ldi	r19, 0xEF	; 239
    5c8c:	b3 2e       	mov	r11, r19
    5c8e:	b2 22       	and	r11, r18
    5c90:	2a e0       	ldi	r18, 0x0A	; 10
    5c92:	30 e0       	ldi	r19, 0x00	; 0
    5c94:	23 c0       	rjmp	.+70     	; 0x5cdc <vfprintf+0x27a>
    5c96:	99 ef       	ldi	r25, 0xF9	; 249
    5c98:	b9 2e       	mov	r11, r25
    5c9a:	b2 22       	and	r11, r18
    5c9c:	8f 36       	cpi	r24, 0x6F	; 111
    5c9e:	61 f0       	breq	.+24     	; 0x5cb8 <vfprintf+0x256>
    5ca0:	80 37       	cpi	r24, 0x70	; 112
    5ca2:	20 f4       	brcc	.+8      	; 0x5cac <vfprintf+0x24a>
    5ca4:	88 35       	cpi	r24, 0x58	; 88
    5ca6:	09 f0       	breq	.+2      	; 0x5caa <vfprintf+0x248>
    5ca8:	ad c0       	rjmp	.+346    	; 0x5e04 <vfprintf+0x3a2>
    5caa:	12 c0       	rjmp	.+36     	; 0x5cd0 <vfprintf+0x26e>
    5cac:	80 37       	cpi	r24, 0x70	; 112
    5cae:	39 f0       	breq	.+14     	; 0x5cbe <vfprintf+0x25c>
    5cb0:	88 37       	cpi	r24, 0x78	; 120
    5cb2:	09 f0       	breq	.+2      	; 0x5cb6 <vfprintf+0x254>
    5cb4:	a7 c0       	rjmp	.+334    	; 0x5e04 <vfprintf+0x3a2>
    5cb6:	05 c0       	rjmp	.+10     	; 0x5cc2 <vfprintf+0x260>
    5cb8:	28 e0       	ldi	r18, 0x08	; 8
    5cba:	30 e0       	ldi	r19, 0x00	; 0
    5cbc:	0f c0       	rjmp	.+30     	; 0x5cdc <vfprintf+0x27a>
    5cbe:	20 e1       	ldi	r18, 0x10	; 16
    5cc0:	b2 2a       	or	r11, r18
    5cc2:	b4 fe       	sbrs	r11, 4
    5cc4:	02 c0       	rjmp	.+4      	; 0x5cca <vfprintf+0x268>
    5cc6:	84 e0       	ldi	r24, 0x04	; 4
    5cc8:	b8 2a       	or	r11, r24
    5cca:	20 e1       	ldi	r18, 0x10	; 16
    5ccc:	30 e0       	ldi	r19, 0x00	; 0
    5cce:	06 c0       	rjmp	.+12     	; 0x5cdc <vfprintf+0x27a>
    5cd0:	b4 fe       	sbrs	r11, 4
    5cd2:	02 c0       	rjmp	.+4      	; 0x5cd8 <vfprintf+0x276>
    5cd4:	e6 e0       	ldi	r30, 0x06	; 6
    5cd6:	be 2a       	or	r11, r30
    5cd8:	20 e1       	ldi	r18, 0x10	; 16
    5cda:	32 e0       	ldi	r19, 0x02	; 2
    5cdc:	b7 fe       	sbrs	r11, 7
    5cde:	08 c0       	rjmp	.+16     	; 0x5cf0 <vfprintf+0x28e>
    5ce0:	f8 01       	movw	r30, r16
    5ce2:	60 81       	ld	r22, Z
    5ce4:	71 81       	ldd	r23, Z+1	; 0x01
    5ce6:	82 81       	ldd	r24, Z+2	; 0x02
    5ce8:	93 81       	ldd	r25, Z+3	; 0x03
    5cea:	0c 5f       	subi	r16, 0xFC	; 252
    5cec:	1f 4f       	sbci	r17, 0xFF	; 255
    5cee:	07 c0       	rjmp	.+14     	; 0x5cfe <vfprintf+0x29c>
    5cf0:	f8 01       	movw	r30, r16
    5cf2:	60 81       	ld	r22, Z
    5cf4:	71 81       	ldd	r23, Z+1	; 0x01
    5cf6:	80 e0       	ldi	r24, 0x00	; 0
    5cf8:	90 e0       	ldi	r25, 0x00	; 0
    5cfa:	0e 5f       	subi	r16, 0xFE	; 254
    5cfc:	1f 4f       	sbci	r17, 0xFF	; 255
    5cfe:	a4 01       	movw	r20, r8
    5d00:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <__ultoa_invert>
    5d04:	78 2e       	mov	r7, r24
    5d06:	78 18       	sub	r7, r8
    5d08:	ff e7       	ldi	r31, 0x7F	; 127
    5d0a:	bf 22       	and	r11, r31
    5d0c:	b6 fe       	sbrs	r11, 6
    5d0e:	0b c0       	rjmp	.+22     	; 0x5d26 <vfprintf+0x2c4>
    5d10:	2e ef       	ldi	r18, 0xFE	; 254
    5d12:	b2 22       	and	r11, r18
    5d14:	7e 14       	cp	r7, r14
    5d16:	38 f4       	brcc	.+14     	; 0x5d26 <vfprintf+0x2c4>
    5d18:	b4 fe       	sbrs	r11, 4
    5d1a:	07 c0       	rjmp	.+14     	; 0x5d2a <vfprintf+0x2c8>
    5d1c:	b2 fc       	sbrc	r11, 2
    5d1e:	05 c0       	rjmp	.+10     	; 0x5d2a <vfprintf+0x2c8>
    5d20:	8f ee       	ldi	r24, 0xEF	; 239
    5d22:	b8 22       	and	r11, r24
    5d24:	02 c0       	rjmp	.+4      	; 0x5d2a <vfprintf+0x2c8>
    5d26:	a7 2c       	mov	r10, r7
    5d28:	01 c0       	rjmp	.+2      	; 0x5d2c <vfprintf+0x2ca>
    5d2a:	ae 2c       	mov	r10, r14
    5d2c:	8b 2d       	mov	r24, r11
    5d2e:	b4 fe       	sbrs	r11, 4
    5d30:	0d c0       	rjmp	.+26     	; 0x5d4c <vfprintf+0x2ea>
    5d32:	fe 01       	movw	r30, r28
    5d34:	e7 0d       	add	r30, r7
    5d36:	f1 1d       	adc	r31, r1
    5d38:	90 81       	ld	r25, Z
    5d3a:	90 33       	cpi	r25, 0x30	; 48
    5d3c:	19 f4       	brne	.+6      	; 0x5d44 <vfprintf+0x2e2>
    5d3e:	e9 ee       	ldi	r30, 0xE9	; 233
    5d40:	be 22       	and	r11, r30
    5d42:	07 c0       	rjmp	.+14     	; 0x5d52 <vfprintf+0x2f0>
    5d44:	a3 94       	inc	r10
    5d46:	b2 fe       	sbrs	r11, 2
    5d48:	04 c0       	rjmp	.+8      	; 0x5d52 <vfprintf+0x2f0>
    5d4a:	02 c0       	rjmp	.+4      	; 0x5d50 <vfprintf+0x2ee>
    5d4c:	86 78       	andi	r24, 0x86	; 134
    5d4e:	09 f0       	breq	.+2      	; 0x5d52 <vfprintf+0x2f0>
    5d50:	a3 94       	inc	r10
    5d52:	6b 2c       	mov	r6, r11
    5d54:	b3 fc       	sbrc	r11, 3
    5d56:	14 c0       	rjmp	.+40     	; 0x5d80 <vfprintf+0x31e>
    5d58:	b0 fe       	sbrs	r11, 0
    5d5a:	0f c0       	rjmp	.+30     	; 0x5d7a <vfprintf+0x318>
    5d5c:	af 14       	cp	r10, r15
    5d5e:	10 f0       	brcs	.+4      	; 0x5d64 <vfprintf+0x302>
    5d60:	e7 2c       	mov	r14, r7
    5d62:	0b c0       	rjmp	.+22     	; 0x5d7a <vfprintf+0x318>
    5d64:	e7 2c       	mov	r14, r7
    5d66:	ef 0c       	add	r14, r15
    5d68:	ea 18       	sub	r14, r10
    5d6a:	af 2c       	mov	r10, r15
    5d6c:	06 c0       	rjmp	.+12     	; 0x5d7a <vfprintf+0x318>
    5d6e:	80 e2       	ldi	r24, 0x20	; 32
    5d70:	90 e0       	ldi	r25, 0x00	; 0
    5d72:	b6 01       	movw	r22, r12
    5d74:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <fputc>
    5d78:	a3 94       	inc	r10
    5d7a:	af 14       	cp	r10, r15
    5d7c:	c0 f3       	brcs	.-16     	; 0x5d6e <vfprintf+0x30c>
    5d7e:	04 c0       	rjmp	.+8      	; 0x5d88 <vfprintf+0x326>
    5d80:	af 14       	cp	r10, r15
    5d82:	10 f4       	brcc	.+4      	; 0x5d88 <vfprintf+0x326>
    5d84:	fa 18       	sub	r15, r10
    5d86:	01 c0       	rjmp	.+2      	; 0x5d8a <vfprintf+0x328>
    5d88:	ff 24       	eor	r15, r15
    5d8a:	64 fe       	sbrs	r6, 4
    5d8c:	0f c0       	rjmp	.+30     	; 0x5dac <vfprintf+0x34a>
    5d8e:	80 e3       	ldi	r24, 0x30	; 48
    5d90:	90 e0       	ldi	r25, 0x00	; 0
    5d92:	b6 01       	movw	r22, r12
    5d94:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <fputc>
    5d98:	62 fe       	sbrs	r6, 2
    5d9a:	1d c0       	rjmp	.+58     	; 0x5dd6 <vfprintf+0x374>
    5d9c:	61 fc       	sbrc	r6, 1
    5d9e:	03 c0       	rjmp	.+6      	; 0x5da6 <vfprintf+0x344>
    5da0:	88 e7       	ldi	r24, 0x78	; 120
    5da2:	90 e0       	ldi	r25, 0x00	; 0
    5da4:	0e c0       	rjmp	.+28     	; 0x5dc2 <vfprintf+0x360>
    5da6:	88 e5       	ldi	r24, 0x58	; 88
    5da8:	90 e0       	ldi	r25, 0x00	; 0
    5daa:	0b c0       	rjmp	.+22     	; 0x5dc2 <vfprintf+0x360>
    5dac:	86 2d       	mov	r24, r6
    5dae:	86 78       	andi	r24, 0x86	; 134
    5db0:	91 f0       	breq	.+36     	; 0x5dd6 <vfprintf+0x374>
    5db2:	61 fe       	sbrs	r6, 1
    5db4:	02 c0       	rjmp	.+4      	; 0x5dba <vfprintf+0x358>
    5db6:	8b e2       	ldi	r24, 0x2B	; 43
    5db8:	01 c0       	rjmp	.+2      	; 0x5dbc <vfprintf+0x35a>
    5dba:	80 e2       	ldi	r24, 0x20	; 32
    5dbc:	b7 fc       	sbrc	r11, 7
    5dbe:	8d e2       	ldi	r24, 0x2D	; 45
    5dc0:	90 e0       	ldi	r25, 0x00	; 0
    5dc2:	b6 01       	movw	r22, r12
    5dc4:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <fputc>
    5dc8:	06 c0       	rjmp	.+12     	; 0x5dd6 <vfprintf+0x374>
    5dca:	80 e3       	ldi	r24, 0x30	; 48
    5dcc:	90 e0       	ldi	r25, 0x00	; 0
    5dce:	b6 01       	movw	r22, r12
    5dd0:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <fputc>
    5dd4:	ea 94       	dec	r14
    5dd6:	7e 14       	cp	r7, r14
    5dd8:	c0 f3       	brcs	.-16     	; 0x5dca <vfprintf+0x368>
    5dda:	7a 94       	dec	r7
    5ddc:	f4 01       	movw	r30, r8
    5dde:	e7 0d       	add	r30, r7
    5de0:	f1 1d       	adc	r31, r1
    5de2:	80 81       	ld	r24, Z
    5de4:	90 e0       	ldi	r25, 0x00	; 0
    5de6:	b6 01       	movw	r22, r12
    5de8:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <fputc>
    5dec:	77 20       	and	r7, r7
    5dee:	a9 f7       	brne	.-22     	; 0x5dda <vfprintf+0x378>
    5df0:	06 c0       	rjmp	.+12     	; 0x5dfe <vfprintf+0x39c>
    5df2:	80 e2       	ldi	r24, 0x20	; 32
    5df4:	90 e0       	ldi	r25, 0x00	; 0
    5df6:	b6 01       	movw	r22, r12
    5df8:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <fputc>
    5dfc:	fa 94       	dec	r15
    5dfe:	ff 20       	and	r15, r15
    5e00:	c1 f7       	brne	.-16     	; 0x5df2 <vfprintf+0x390>
    5e02:	47 ce       	rjmp	.-882    	; 0x5a92 <vfprintf+0x30>
    5e04:	f6 01       	movw	r30, r12
    5e06:	26 81       	ldd	r18, Z+6	; 0x06
    5e08:	37 81       	ldd	r19, Z+7	; 0x07
    5e0a:	c9 01       	movw	r24, r18
    5e0c:	2c 96       	adiw	r28, 0x0c	; 12
    5e0e:	e1 e1       	ldi	r30, 0x11	; 17
    5e10:	0c 94 79 29 	jmp	0x52f2	; 0x52f2 <__epilogue_restores__+0x2>

00005e14 <__ctype_isfalse>:
    5e14:	99 27       	eor	r25, r25
    5e16:	88 27       	eor	r24, r24

00005e18 <__ctype_istrue>:
    5e18:	08 95       	ret

00005e1a <strnlen_P>:
    5e1a:	fc 01       	movw	r30, r24
    5e1c:	05 90       	lpm	r0, Z+
    5e1e:	61 50       	subi	r22, 0x01	; 1
    5e20:	70 40       	sbci	r23, 0x00	; 0
    5e22:	01 10       	cpse	r0, r1
    5e24:	d8 f7       	brcc	.-10     	; 0x5e1c <strnlen_P+0x2>
    5e26:	80 95       	com	r24
    5e28:	90 95       	com	r25
    5e2a:	8e 0f       	add	r24, r30
    5e2c:	9f 1f       	adc	r25, r31
    5e2e:	08 95       	ret

00005e30 <strnlen>:
    5e30:	fc 01       	movw	r30, r24
    5e32:	61 50       	subi	r22, 0x01	; 1
    5e34:	70 40       	sbci	r23, 0x00	; 0
    5e36:	01 90       	ld	r0, Z+
    5e38:	01 10       	cpse	r0, r1
    5e3a:	d8 f7       	brcc	.-10     	; 0x5e32 <strnlen+0x2>
    5e3c:	80 95       	com	r24
    5e3e:	90 95       	com	r25
    5e40:	8e 0f       	add	r24, r30
    5e42:	9f 1f       	adc	r25, r31
    5e44:	08 95       	ret

00005e46 <strrev>:
    5e46:	dc 01       	movw	r26, r24
    5e48:	fc 01       	movw	r30, r24
    5e4a:	67 2f       	mov	r22, r23
    5e4c:	71 91       	ld	r23, Z+
    5e4e:	77 23       	and	r23, r23
    5e50:	e1 f7       	brne	.-8      	; 0x5e4a <strrev+0x4>
    5e52:	32 97       	sbiw	r30, 0x02	; 2
    5e54:	04 c0       	rjmp	.+8      	; 0x5e5e <strrev+0x18>
    5e56:	7c 91       	ld	r23, X
    5e58:	6d 93       	st	X+, r22
    5e5a:	70 83       	st	Z, r23
    5e5c:	62 91       	ld	r22, -Z
    5e5e:	ae 17       	cp	r26, r30
    5e60:	bf 07       	cpc	r27, r31
    5e62:	c8 f3       	brcs	.-14     	; 0x5e56 <strrev+0x10>
    5e64:	08 95       	ret

00005e66 <fputc>:
    5e66:	0f 93       	push	r16
    5e68:	1f 93       	push	r17
    5e6a:	cf 93       	push	r28
    5e6c:	df 93       	push	r29
    5e6e:	8c 01       	movw	r16, r24
    5e70:	eb 01       	movw	r28, r22
    5e72:	8b 81       	ldd	r24, Y+3	; 0x03
    5e74:	81 ff       	sbrs	r24, 1
    5e76:	1b c0       	rjmp	.+54     	; 0x5eae <fputc+0x48>
    5e78:	82 ff       	sbrs	r24, 2
    5e7a:	0d c0       	rjmp	.+26     	; 0x5e96 <fputc+0x30>
    5e7c:	2e 81       	ldd	r18, Y+6	; 0x06
    5e7e:	3f 81       	ldd	r19, Y+7	; 0x07
    5e80:	8c 81       	ldd	r24, Y+4	; 0x04
    5e82:	9d 81       	ldd	r25, Y+5	; 0x05
    5e84:	28 17       	cp	r18, r24
    5e86:	39 07       	cpc	r19, r25
    5e88:	64 f4       	brge	.+24     	; 0x5ea2 <fputc+0x3c>
    5e8a:	e8 81       	ld	r30, Y
    5e8c:	f9 81       	ldd	r31, Y+1	; 0x01
    5e8e:	01 93       	st	Z+, r16
    5e90:	f9 83       	std	Y+1, r31	; 0x01
    5e92:	e8 83       	st	Y, r30
    5e94:	06 c0       	rjmp	.+12     	; 0x5ea2 <fputc+0x3c>
    5e96:	e8 85       	ldd	r30, Y+8	; 0x08
    5e98:	f9 85       	ldd	r31, Y+9	; 0x09
    5e9a:	80 2f       	mov	r24, r16
    5e9c:	09 95       	icall
    5e9e:	00 97       	sbiw	r24, 0x00	; 0
    5ea0:	31 f4       	brne	.+12     	; 0x5eae <fputc+0x48>
    5ea2:	8e 81       	ldd	r24, Y+6	; 0x06
    5ea4:	9f 81       	ldd	r25, Y+7	; 0x07
    5ea6:	01 96       	adiw	r24, 0x01	; 1
    5ea8:	9f 83       	std	Y+7, r25	; 0x07
    5eaa:	8e 83       	std	Y+6, r24	; 0x06
    5eac:	02 c0       	rjmp	.+4      	; 0x5eb2 <fputc+0x4c>
    5eae:	0f ef       	ldi	r16, 0xFF	; 255
    5eb0:	1f ef       	ldi	r17, 0xFF	; 255
    5eb2:	c8 01       	movw	r24, r16
    5eb4:	df 91       	pop	r29
    5eb6:	cf 91       	pop	r28
    5eb8:	1f 91       	pop	r17
    5eba:	0f 91       	pop	r16
    5ebc:	08 95       	ret

00005ebe <__ultoa_invert>:
    5ebe:	fa 01       	movw	r30, r20
    5ec0:	aa 27       	eor	r26, r26
    5ec2:	28 30       	cpi	r18, 0x08	; 8
    5ec4:	51 f1       	breq	.+84     	; 0x5f1a <__ultoa_invert+0x5c>
    5ec6:	20 31       	cpi	r18, 0x10	; 16
    5ec8:	81 f1       	breq	.+96     	; 0x5f2a <__ultoa_invert+0x6c>
    5eca:	e8 94       	clt
    5ecc:	6f 93       	push	r22
    5ece:	6e 7f       	andi	r22, 0xFE	; 254
    5ed0:	6e 5f       	subi	r22, 0xFE	; 254
    5ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    5ed4:	8f 4f       	sbci	r24, 0xFF	; 255
    5ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ed8:	af 4f       	sbci	r26, 0xFF	; 255
    5eda:	b1 e0       	ldi	r27, 0x01	; 1
    5edc:	3e d0       	rcall	.+124    	; 0x5f5a <__ultoa_invert+0x9c>
    5ede:	b4 e0       	ldi	r27, 0x04	; 4
    5ee0:	3c d0       	rcall	.+120    	; 0x5f5a <__ultoa_invert+0x9c>
    5ee2:	67 0f       	add	r22, r23
    5ee4:	78 1f       	adc	r23, r24
    5ee6:	89 1f       	adc	r24, r25
    5ee8:	9a 1f       	adc	r25, r26
    5eea:	a1 1d       	adc	r26, r1
    5eec:	68 0f       	add	r22, r24
    5eee:	79 1f       	adc	r23, r25
    5ef0:	8a 1f       	adc	r24, r26
    5ef2:	91 1d       	adc	r25, r1
    5ef4:	a1 1d       	adc	r26, r1
    5ef6:	6a 0f       	add	r22, r26
    5ef8:	71 1d       	adc	r23, r1
    5efa:	81 1d       	adc	r24, r1
    5efc:	91 1d       	adc	r25, r1
    5efe:	a1 1d       	adc	r26, r1
    5f00:	20 d0       	rcall	.+64     	; 0x5f42 <__ultoa_invert+0x84>
    5f02:	09 f4       	brne	.+2      	; 0x5f06 <__ultoa_invert+0x48>
    5f04:	68 94       	set
    5f06:	3f 91       	pop	r19
    5f08:	2a e0       	ldi	r18, 0x0A	; 10
    5f0a:	26 9f       	mul	r18, r22
    5f0c:	11 24       	eor	r1, r1
    5f0e:	30 19       	sub	r19, r0
    5f10:	30 5d       	subi	r19, 0xD0	; 208
    5f12:	31 93       	st	Z+, r19
    5f14:	de f6       	brtc	.-74     	; 0x5ecc <__ultoa_invert+0xe>
    5f16:	cf 01       	movw	r24, r30
    5f18:	08 95       	ret
    5f1a:	46 2f       	mov	r20, r22
    5f1c:	47 70       	andi	r20, 0x07	; 7
    5f1e:	40 5d       	subi	r20, 0xD0	; 208
    5f20:	41 93       	st	Z+, r20
    5f22:	b3 e0       	ldi	r27, 0x03	; 3
    5f24:	0f d0       	rcall	.+30     	; 0x5f44 <__ultoa_invert+0x86>
    5f26:	c9 f7       	brne	.-14     	; 0x5f1a <__ultoa_invert+0x5c>
    5f28:	f6 cf       	rjmp	.-20     	; 0x5f16 <__ultoa_invert+0x58>
    5f2a:	46 2f       	mov	r20, r22
    5f2c:	4f 70       	andi	r20, 0x0F	; 15
    5f2e:	40 5d       	subi	r20, 0xD0	; 208
    5f30:	4a 33       	cpi	r20, 0x3A	; 58
    5f32:	18 f0       	brcs	.+6      	; 0x5f3a <__ultoa_invert+0x7c>
    5f34:	49 5d       	subi	r20, 0xD9	; 217
    5f36:	31 fd       	sbrc	r19, 1
    5f38:	40 52       	subi	r20, 0x20	; 32
    5f3a:	41 93       	st	Z+, r20
    5f3c:	02 d0       	rcall	.+4      	; 0x5f42 <__ultoa_invert+0x84>
    5f3e:	a9 f7       	brne	.-22     	; 0x5f2a <__ultoa_invert+0x6c>
    5f40:	ea cf       	rjmp	.-44     	; 0x5f16 <__ultoa_invert+0x58>
    5f42:	b4 e0       	ldi	r27, 0x04	; 4
    5f44:	a6 95       	lsr	r26
    5f46:	97 95       	ror	r25
    5f48:	87 95       	ror	r24
    5f4a:	77 95       	ror	r23
    5f4c:	67 95       	ror	r22
    5f4e:	ba 95       	dec	r27
    5f50:	c9 f7       	brne	.-14     	; 0x5f44 <__ultoa_invert+0x86>
    5f52:	00 97       	sbiw	r24, 0x00	; 0
    5f54:	61 05       	cpc	r22, r1
    5f56:	71 05       	cpc	r23, r1
    5f58:	08 95       	ret
    5f5a:	9b 01       	movw	r18, r22
    5f5c:	ac 01       	movw	r20, r24
    5f5e:	0a 2e       	mov	r0, r26
    5f60:	06 94       	lsr	r0
    5f62:	57 95       	ror	r21
    5f64:	47 95       	ror	r20
    5f66:	37 95       	ror	r19
    5f68:	27 95       	ror	r18
    5f6a:	ba 95       	dec	r27
    5f6c:	c9 f7       	brne	.-14     	; 0x5f60 <__ultoa_invert+0xa2>
    5f6e:	62 0f       	add	r22, r18
    5f70:	73 1f       	adc	r23, r19
    5f72:	84 1f       	adc	r24, r20
    5f74:	95 1f       	adc	r25, r21
    5f76:	a0 1d       	adc	r26, r0
    5f78:	08 95       	ret

00005f7a <__do_global_dtors>:
    5f7a:	1a e0       	ldi	r17, 0x0A	; 10
    5f7c:	cc e5       	ldi	r28, 0x5C	; 92
    5f7e:	da e0       	ldi	r29, 0x0A	; 10
    5f80:	04 c0       	rjmp	.+8      	; 0x5f8a <__do_global_dtors+0x10>
    5f82:	fe 01       	movw	r30, r28
    5f84:	0e 94 95 29 	call	0x532a	; 0x532a <__tablejump__>
    5f88:	22 96       	adiw	r28, 0x02	; 2
    5f8a:	ce 35       	cpi	r28, 0x5E	; 94
    5f8c:	d1 07       	cpc	r29, r17
    5f8e:	c9 f7       	brne	.-14     	; 0x5f82 <__do_global_dtors+0x8>
    5f90:	f8 94       	cli

00005f92 <__stop_program>:
    5f92:	ff cf       	rjmp	.-2      	; 0x5f92 <__stop_program>
