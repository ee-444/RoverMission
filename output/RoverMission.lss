
RoverMission.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001da  00800100  00006146  000061da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006146  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004c3  008002da  008002da  000063b4  2**0
                  ALLOC
  3 .stab         00003b58  00000000  00000000  000063b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ff3  00000000  00000000  00009f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003a8  00000000  00000000  0000aeff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000120f  00000000  00000000  0000b2a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000854b  00000000  00000000  0000c4b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002cba  00000000  00000000  00014a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005834  00000000  00000000  000176bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c90  00000000  00000000  0001cef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001ae4  00000000  00000000  0001db80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004f1d  00000000  00000000  0001f664  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000578  00000000  00000000  00024581  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 16 02 	jmp	0x42c	; 0x42c <__dtors_end>
       4:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
       8:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
       c:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      10:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      14:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      18:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      1c:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      20:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      24:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      28:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      2c:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      30:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      34:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      38:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      3c:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      40:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__vector_16>
      44:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      48:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__vector_18>
      4c:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      50:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      54:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      58:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      5c:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      60:	0c 94 c2 1f 	jmp	0x3f84	; 0x3f84 <__vector_24>
      64:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      68:	64 20       	and	r6, r4
      6a:	12 20       	and	r1, r2
      6c:	12 20       	and	r1, r2
      6e:	12 20       	and	r1, r2
      70:	12 20       	and	r1, r2
      72:	12 20       	and	r1, r2
      74:	12 20       	and	r1, r2
      76:	12 20       	and	r1, r2
      78:	6e 20       	and	r6, r14
      7a:	12 20       	and	r1, r2
      7c:	12 20       	and	r1, r2
      7e:	12 20       	and	r1, r2
      80:	12 20       	and	r1, r2
      82:	12 20       	and	r1, r2
      84:	12 20       	and	r1, r2
      86:	12 20       	and	r1, r2
      88:	6e 20       	and	r6, r14
      8a:	12 20       	and	r1, r2
      8c:	12 20       	and	r1, r2
      8e:	12 20       	and	r1, r2
      90:	12 20       	and	r1, r2
      92:	12 20       	and	r1, r2
      94:	12 20       	and	r1, r2
      96:	12 20       	and	r1, r2
      98:	76 20       	and	r7, r6
      9a:	12 20       	and	r1, r2
      9c:	12 20       	and	r1, r2
      9e:	12 20       	and	r1, r2
      a0:	12 20       	and	r1, r2
      a2:	12 20       	and	r1, r2
      a4:	12 20       	and	r1, r2
      a6:	12 20       	and	r1, r2
      a8:	85 20       	and	r8, r5
      aa:	12 20       	and	r1, r2
      ac:	12 20       	and	r1, r2
      ae:	12 20       	and	r1, r2
      b0:	12 20       	and	r1, r2
      b2:	12 20       	and	r1, r2
      b4:	12 20       	and	r1, r2
      b6:	12 20       	and	r1, r2
      b8:	76 20       	and	r7, r6
      ba:	12 20       	and	r1, r2
      bc:	12 20       	and	r1, r2
      be:	12 20       	and	r1, r2
      c0:	12 20       	and	r1, r2
      c2:	12 20       	and	r1, r2
      c4:	12 20       	and	r1, r2
      c6:	12 20       	and	r1, r2
      c8:	b0 20       	and	r11, r0
      ca:	12 20       	and	r1, r2
      cc:	12 20       	and	r1, r2
      ce:	12 20       	and	r1, r2
      d0:	12 20       	and	r1, r2
      d2:	12 20       	and	r1, r2
      d4:	12 20       	and	r1, r2
      d6:	12 20       	and	r1, r2
      d8:	bb 20       	and	r11, r11
      da:	12 20       	and	r1, r2
      dc:	12 20       	and	r1, r2
      de:	12 20       	and	r1, r2
      e0:	12 20       	and	r1, r2
      e2:	12 20       	and	r1, r2
      e4:	12 20       	and	r1, r2
      e6:	12 20       	and	r1, r2
      e8:	38 20       	and	r3, r8
      ea:	12 20       	and	r1, r2
      ec:	12 20       	and	r1, r2
      ee:	12 20       	and	r1, r2
      f0:	12 20       	and	r1, r2
      f2:	12 20       	and	r1, r2
      f4:	12 20       	and	r1, r2
      f6:	12 20       	and	r1, r2
      f8:	4b 20       	and	r4, r11
      fa:	12 20       	and	r1, r2
      fc:	12 20       	and	r1, r2
      fe:	12 20       	and	r1, r2
     100:	12 20       	and	r1, r2
     102:	12 20       	and	r1, r2
     104:	12 20       	and	r1, r2
     106:	12 20       	and	r1, r2
     108:	2c 20       	and	r2, r12
     10a:	12 20       	and	r1, r2
     10c:	12 20       	and	r1, r2
     10e:	12 20       	and	r1, r2
     110:	12 20       	and	r1, r2
     112:	12 20       	and	r1, r2
     114:	12 20       	and	r1, r2
     116:	12 20       	and	r1, r2
     118:	3f 20       	and	r3, r15
     11a:	12 20       	and	r1, r2
     11c:	12 20       	and	r1, r2
     11e:	12 20       	and	r1, r2
     120:	12 20       	and	r1, r2
     122:	12 20       	and	r1, r2
     124:	12 20       	and	r1, r2
     126:	12 20       	and	r1, r2
     128:	5b 20       	and	r5, r11
     12a:	12 20       	and	r1, r2
     12c:	12 20       	and	r1, r2
     12e:	12 20       	and	r1, r2
     130:	12 20       	and	r1, r2
     132:	12 20       	and	r1, r2
     134:	12 20       	and	r1, r2
     136:	12 20       	and	r1, r2
     138:	5b 20       	and	r5, r11
     13a:	12 20       	and	r1, r2
     13c:	12 20       	and	r1, r2
     13e:	12 20       	and	r1, r2
     140:	12 20       	and	r1, r2
     142:	12 20       	and	r1, r2
     144:	12 20       	and	r1, r2
     146:	12 20       	and	r1, r2
     148:	5b 20       	and	r5, r11
     14a:	12 20       	and	r1, r2
     14c:	12 20       	and	r1, r2
     14e:	12 20       	and	r1, r2
     150:	12 20       	and	r1, r2
     152:	12 20       	and	r1, r2
     154:	12 20       	and	r1, r2
     156:	12 20       	and	r1, r2
     158:	5b 20       	and	r5, r11
     15a:	12 20       	and	r1, r2
     15c:	12 20       	and	r1, r2
     15e:	12 20       	and	r1, r2
     160:	12 20       	and	r1, r2
     162:	12 20       	and	r1, r2
     164:	12 20       	and	r1, r2
     166:	12 20       	and	r1, r2
     168:	23 20       	and	r2, r3
     16a:	12 20       	and	r1, r2
     16c:	12 20       	and	r1, r2
     16e:	12 20       	and	r1, r2
     170:	12 20       	and	r1, r2
     172:	12 20       	and	r1, r2
     174:	12 20       	and	r1, r2
     176:	12 20       	and	r1, r2
     178:	28 20       	and	r2, r8
     17a:	12 20       	and	r1, r2
     17c:	12 20       	and	r1, r2
     17e:	12 20       	and	r1, r2
     180:	12 20       	and	r1, r2
     182:	12 20       	and	r1, r2
     184:	12 20       	and	r1, r2
     186:	12 20       	and	r1, r2
     188:	23 20       	and	r2, r3
     18a:	12 20       	and	r1, r2
     18c:	12 20       	and	r1, r2
     18e:	12 20       	and	r1, r2
     190:	12 20       	and	r1, r2
     192:	12 20       	and	r1, r2
     194:	12 20       	and	r1, r2
     196:	12 20       	and	r1, r2
     198:	28 20       	and	r2, r8
     19a:	12 20       	and	r1, r2
     19c:	12 20       	and	r1, r2
     19e:	12 20       	and	r1, r2
     1a0:	12 20       	and	r1, r2
     1a2:	12 20       	and	r1, r2
     1a4:	12 20       	and	r1, r2
     1a6:	12 20       	and	r1, r2
     1a8:	90 20       	and	r9, r0
     1aa:	12 20       	and	r1, r2
     1ac:	12 20       	and	r1, r2
     1ae:	12 20       	and	r1, r2
     1b0:	12 20       	and	r1, r2
     1b2:	12 20       	and	r1, r2
     1b4:	12 20       	and	r1, r2
     1b6:	12 20       	and	r1, r2
     1b8:	e8 1f       	adc	r30, r24
     1ba:	12 20       	and	r1, r2
     1bc:	12 20       	and	r1, r2
     1be:	12 20       	and	r1, r2
     1c0:	12 20       	and	r1, r2
     1c2:	12 20       	and	r1, r2
     1c4:	12 20       	and	r1, r2
     1c6:	12 20       	and	r1, r2
     1c8:	e8 1f       	adc	r30, r24
     1ca:	12 20       	and	r1, r2
     1cc:	12 20       	and	r1, r2
     1ce:	12 20       	and	r1, r2
     1d0:	12 20       	and	r1, r2
     1d2:	12 20       	and	r1, r2
     1d4:	12 20       	and	r1, r2
     1d6:	12 20       	and	r1, r2
     1d8:	fd 1f       	adc	r31, r29
     1da:	12 20       	and	r1, r2
     1dc:	12 20       	and	r1, r2
     1de:	12 20       	and	r1, r2
     1e0:	12 20       	and	r1, r2
     1e2:	12 20       	and	r1, r2
     1e4:	12 20       	and	r1, r2
     1e6:	12 20       	and	r1, r2
     1e8:	55 20       	and	r5, r5
     1ea:	12 20       	and	r1, r2
     1ec:	12 20       	and	r1, r2
     1ee:	12 20       	and	r1, r2
     1f0:	12 20       	and	r1, r2
     1f2:	12 20       	and	r1, r2
     1f4:	12 20       	and	r1, r2
     1f6:	12 20       	and	r1, r2
     1f8:	55 20       	and	r5, r5
     1fa:	07 2c       	mov	r0, r7
     1fc:	7a a5       	ldd	r23, Y+42	; 0x2a
     1fe:	ba 6c       	ori	r27, 0xCA	; 202
     200:	c5 90       	lpm	r12, Z+
     202:	da 3b       	cpi	r29, 0xBA	; 186
     204:	93 65       	ori	r25, 0x53	; 83
     206:	fc 8b       	std	Y+20, r31	; 0x14
     208:	bc 53       	subi	r27, 0x3C	; 60
     20a:	f8 10       	cpse	r15, r8
     20c:	fd 3c       	cpi	r31, 0xCD	; 205
     20e:	56 92       	.word	0x9256	; ????
     210:	83 4d       	sbci	r24, 0xD3	; 211
     212:	bd 87       	std	Y+13, r27	; 0x0d
     214:	9d 3a       	cpi	r25, 0xAD	; 173
     216:	b6 3d       	cpi	r27, 0xD6	; 214
     218:	cb c9       	rjmp	.-3178   	; 0xfffff5b0 <__eeprom_end+0xff7ef5b0>
     21a:	bf 5b       	subi	r27, 0xBF	; 191
     21c:	be 73       	andi	r27, 0x3E	; 62
     21e:	da 0f       	add	r29, r26
     220:	c9 3f       	cpi	r28, 0xF9	; 249
     222:	05 a8       	ldd	r0, Z+53	; 0x35
     224:	4c cd       	rjmp	.-1384   	; 0xfffffcbe <__eeprom_end+0xff7efcbe>
     226:	b2 d4       	rcall	.+2404   	; 0xb8c <_Z10irDistanceh+0x6a>
     228:	4e b9       	out	0x0e, r20	; 14
     22a:	38 36       	cpi	r19, 0x68	; 104
     22c:	a9 02       	muls	r26, r25
     22e:	0c 50       	subi	r16, 0x0C	; 12
     230:	b9 91       	ld	r27, Y+
     232:	86 88       	ldd	r8, Z+22	; 0x16
     234:	08 3c       	cpi	r16, 0xC8	; 200
     236:	a6 aa       	std	Z+54, r10	; 0x36
     238:	aa 2a       	or	r10, r26
     23a:	be 00       	.word	0x00be	; ????
     23c:	00 00       	nop
     23e:	80 3f       	cpi	r24, 0xF0	; 240

00000240 <_ZL15long_range_data>:
     240:	e6 db d9 d7 d5 d3 d2 d0 ce cd cb c9 c8 c6 c5 c3     ................
     250:	c2 c0 bf be bc bb b9 b8 b7 b6 b4 b3 b2 b1 af ae     ................
     260:	ad ac ab aa a8 a7 a6 a5 a4 a3 a2 a1 a0 9f 9e 9d     ................
     270:	9c 9b 9a 99 98 98 97 96 95 94 93 92 92 91 90 8f     ................
     280:	8e 8d 8d 8c 8b 8a 8a 89 88 88 87 86 85 85 84 83     ................
     290:	83 82 81 81 80 7f 7f 7e 7e 7d 7c 7c 7b 7b 7a 79     .......~~}||{{zy
     2a0:	79 78 78 77 77 76 76 75 74 74 73 73 72 72 71 71     yxxwwvvuttssrrqq
     2b0:	70 70 6f 6f 6e 6e 6d 6d 6d 6c 6c 6b 6b 6a 6a 69     ppoonnmmmllkkjji
     2c0:	69 69 68 68 67 67 66 66 66 65 65 64 64 64 63 63     iihhggfffeedddcc
     2d0:	63 62 62 61 61 61 60 60 60 5f 5f 5f 5e 5e 5d 5d     cbbaaa```___^^]]
     2e0:	5d 5c 5c 5c 5b 5b 5b 5b 5a 5a 5a 59 59 59 58 58     ]\\\[[[[ZZZYYYXX
     2f0:	58 57 57 57 57 56 56 56 55 55 55 55 54 54 54 53     XWWWWVVVUUUUTTTS
     300:	53 53 53 52 52 52 52 51 51 51 51 50 50 50 50 4f     SSSRRRRQQQQPPPPO
     310:	4f 4f 4f 4e 4e 4e 4e 4d 4d 4d 4d 4c 4c 4c 4c 4c     OOONNNNMMMMLLLLL
     320:	4b 4b 4b 4b 4a 4a 4a 4a 4a 49 49 49 49 49 48 48     KKKKJJJJJIIIIIHH
     330:	48 48 48 47 47 47 47 47 46 46 46 46 46 45 45 45     HHHGGGGGFFFFFEEE
     340:	45 45 44 44 44 44 44 44 43 43 43 43 43 43 42 42     EEDDDDDDCCCCCCBB
     350:	42 42 42 41 41 41 41 41 41 41 40 40 40 40 40 40     BBBAAAAAAA@@@@@@
     360:	3f 3f 3f 3f 3f 3f 3e 3e 3e 3e 3e 3e 3e 3d 3d 3d     ??????>>>>>>>===
     370:	3d 3d 3d 3d 3c 3c 3c 3c 3c 3c 3c 3b 3b 3b 3b 3b     ====<<<<<<<;;;;;
     380:	3b 3b 3a 3a 3a 3a 3a 3a 3a 3a 39 39 39 39 39 39     ;;::::::::999999
     390:	39 39 38 38 38 38 38 38 38 38 37 37 37 37 37 37     9988888888777777
     3a0:	37 37 36 36 36 36 36 36 36 36 36 35 35 35 35 35     7766666666655555
     3b0:	35 35 35 35 34 34 34 34 34 34 34 34 34 34 33 33     5555444444444433
     3c0:	33 33 33 33 33 33 33 32 32                          333333322

000003c9 <port_to_mode_PGM>:
     3c9:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000003d3 <port_to_output_PGM>:
     3d3:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000003dd <port_to_input_PGM>:
     3dd:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000003e7 <digital_pin_to_port_PGM>:
     3e7:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     3f7:	03 03 03 03                                         ....

000003fb <digital_pin_to_bit_mask_PGM>:
     3fb:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     40b:	04 08 10 20                                         ... 

0000040f <digital_pin_to_timer_PGM>:
     40f:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     41f:	00 00 00 00 00                                      .....

00000424 <__ctors_start>:
     424:	d8 03       	fmulsu	r21, r16
     426:	a5 08       	sbc	r10, r5
     428:	34 0f       	add	r19, r20

0000042a <__ctors_end>:
     42a:	dd 03       	fmulsu	r21, r21

0000042c <__dtors_end>:
     42c:	11 24       	eor	r1, r1
     42e:	1f be       	out	0x3f, r1	; 63
     430:	cf ef       	ldi	r28, 0xFF	; 255
     432:	d8 e0       	ldi	r29, 0x08	; 8
     434:	de bf       	out	0x3e, r29	; 62
     436:	cd bf       	out	0x3d, r28	; 61

00000438 <__do_copy_data>:
     438:	12 e0       	ldi	r17, 0x02	; 2
     43a:	a0 e0       	ldi	r26, 0x00	; 0
     43c:	b1 e0       	ldi	r27, 0x01	; 1
     43e:	e6 e4       	ldi	r30, 0x46	; 70
     440:	f1 e6       	ldi	r31, 0x61	; 97
     442:	02 c0       	rjmp	.+4      	; 0x448 <__do_copy_data+0x10>
     444:	05 90       	lpm	r0, Z+
     446:	0d 92       	st	X+, r0
     448:	aa 3d       	cpi	r26, 0xDA	; 218
     44a:	b1 07       	cpc	r27, r17
     44c:	d9 f7       	brne	.-10     	; 0x444 <__do_copy_data+0xc>

0000044e <__do_clear_bss>:
     44e:	17 e0       	ldi	r17, 0x07	; 7
     450:	aa ed       	ldi	r26, 0xDA	; 218
     452:	b2 e0       	ldi	r27, 0x02	; 2
     454:	01 c0       	rjmp	.+2      	; 0x458 <.do_clear_bss_start>

00000456 <.do_clear_bss_loop>:
     456:	1d 92       	st	X+, r1

00000458 <.do_clear_bss_start>:
     458:	ad 39       	cpi	r26, 0x9D	; 157
     45a:	b1 07       	cpc	r27, r17
     45c:	e1 f7       	brne	.-8      	; 0x456 <.do_clear_bss_loop>

0000045e <__do_global_ctors>:
     45e:	14 e0       	ldi	r17, 0x04	; 4
     460:	ca e2       	ldi	r28, 0x2A	; 42
     462:	d4 e0       	ldi	r29, 0x04	; 4
     464:	04 c0       	rjmp	.+8      	; 0x46e <__do_global_ctors+0x10>
     466:	22 97       	sbiw	r28, 0x02	; 2
     468:	fe 01       	movw	r30, r28
     46a:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <__tablejump__>
     46e:	c4 32       	cpi	r28, 0x24	; 36
     470:	d1 07       	cpc	r29, r17
     472:	c9 f7       	brne	.-14     	; 0x466 <__do_global_ctors+0x8>
     474:	0e 94 0e 03 	call	0x61c	; 0x61c <main>
     478:	0c 94 96 30 	jmp	0x612c	; 0x612c <__do_global_dtors>

0000047c <__bad_interrupt>:
     47c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000480 <_Z19plaqueDistanceAnglePjS_hRjS0_>:
     480:	2f 92       	push	r2
     482:	3f 92       	push	r3
     484:	4f 92       	push	r4
     486:	5f 92       	push	r5
     488:	6f 92       	push	r6
     48a:	7f 92       	push	r7
     48c:	8f 92       	push	r8
     48e:	9f 92       	push	r9
     490:	af 92       	push	r10
     492:	bf 92       	push	r11
     494:	cf 92       	push	r12
     496:	df 92       	push	r13
     498:	ef 92       	push	r14
     49a:	ff 92       	push	r15
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	df 93       	push	r29
     4a2:	cf 93       	push	r28
     4a4:	00 d0       	rcall	.+0      	; 0x4a6 <_Z19plaqueDistanceAnglePjS_hRjS0_+0x26>
     4a6:	00 d0       	rcall	.+0      	; 0x4a8 <_Z19plaqueDistanceAnglePjS_hRjS0_+0x28>
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	3a 83       	std	Y+2, r19	; 0x02
     4ae:	29 83       	std	Y+1, r18	; 0x01
     4b0:	18 01       	movw	r2, r16
     4b2:	42 30       	cpi	r20, 0x02	; 2
     4b4:	08 f4       	brcc	.+2      	; 0x4b8 <_Z19plaqueDistanceAnglePjS_hRjS0_+0x38>
     4b6:	42 e0       	ldi	r20, 0x02	; 2
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	9a 01       	movw	r18, r20
     4bc:	21 50       	subi	r18, 0x01	; 1
     4be:	30 40       	sbci	r19, 0x00	; 0
     4c0:	22 0f       	add	r18, r18
     4c2:	33 1f       	adc	r19, r19
     4c4:	8c 01       	movw	r16, r24
     4c6:	02 0f       	add	r16, r18
     4c8:	13 1f       	adc	r17, r19
     4ca:	f8 01       	movw	r30, r16
     4cc:	c0 80       	ld	r12, Z
     4ce:	d1 80       	ldd	r13, Z+1	; 0x01
     4d0:	fa 01       	movw	r30, r20
     4d2:	32 97       	sbiw	r30, 0x02	; 2
     4d4:	ee 0f       	add	r30, r30
     4d6:	ff 1f       	adc	r31, r31
     4d8:	e8 0f       	add	r30, r24
     4da:	f9 1f       	adc	r31, r25
     4dc:	fc 83       	std	Y+4, r31	; 0x04
     4de:	eb 83       	std	Y+3, r30	; 0x03
     4e0:	e0 80       	ld	r14, Z
     4e2:	f1 80       	ldd	r15, Z+1	; 0x01
     4e4:	62 0f       	add	r22, r18
     4e6:	73 1f       	adc	r23, r19
     4e8:	fb 01       	movw	r30, r22
     4ea:	60 81       	ld	r22, Z
     4ec:	71 81       	ldd	r23, Z+1	; 0x01
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__floatunsisf>
     4f6:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <cos>
     4fa:	4b 01       	movw	r8, r22
     4fc:	5c 01       	movw	r10, r24
     4fe:	ee 9c       	mul	r14, r14
     500:	b0 01       	movw	r22, r0
     502:	ef 9c       	mul	r14, r15
     504:	70 0d       	add	r23, r0
     506:	fe 9c       	mul	r15, r14
     508:	70 0d       	add	r23, r0
     50a:	11 24       	eor	r1, r1
     50c:	cc 9c       	mul	r12, r12
     50e:	c0 01       	movw	r24, r0
     510:	cd 9c       	mul	r12, r13
     512:	90 0d       	add	r25, r0
     514:	dc 9c       	mul	r13, r12
     516:	90 0d       	add	r25, r0
     518:	11 24       	eor	r1, r1
     51a:	68 0f       	add	r22, r24
     51c:	79 1f       	adc	r23, r25
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__floatunsisf>
     526:	2b 01       	movw	r4, r22
     528:	3c 01       	movw	r6, r24
     52a:	ce 9c       	mul	r12, r14
     52c:	b0 01       	movw	r22, r0
     52e:	cf 9c       	mul	r12, r15
     530:	70 0d       	add	r23, r0
     532:	de 9c       	mul	r13, r14
     534:	70 0d       	add	r23, r0
     536:	11 24       	eor	r1, r1
     538:	66 0f       	add	r22, r22
     53a:	77 1f       	adc	r23, r23
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__floatunsisf>
     544:	a5 01       	movw	r20, r10
     546:	94 01       	movw	r18, r8
     548:	0e 94 c5 22 	call	0x458a	; 0x458a <__mulsf3>
     54c:	9b 01       	movw	r18, r22
     54e:	ac 01       	movw	r20, r24
     550:	c3 01       	movw	r24, r6
     552:	b2 01       	movw	r22, r4
     554:	0e 94 67 22 	call	0x44ce	; 0x44ce <__subsf3>
     558:	0e 94 0e 2a 	call	0x541c	; 0x541c <sqrt>
     55c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <__fixunssfsi>
     560:	ab 01       	movw	r20, r22
     562:	e9 81       	ldd	r30, Y+1	; 0x01
     564:	fa 81       	ldd	r31, Y+2	; 0x02
     566:	71 83       	std	Z+1, r23	; 0x01
     568:	60 83       	st	Z, r22
     56a:	eb 81       	ldd	r30, Y+3	; 0x03
     56c:	fc 81       	ldd	r31, Y+4	; 0x04
     56e:	20 81       	ld	r18, Z
     570:	31 81       	ldd	r19, Z+1	; 0x01
     572:	f8 01       	movw	r30, r16
     574:	60 81       	ld	r22, Z
     576:	71 81       	ldd	r23, Z+1	; 0x01
     578:	22 9f       	mul	r18, r18
     57a:	c0 01       	movw	r24, r0
     57c:	23 9f       	mul	r18, r19
     57e:	90 0d       	add	r25, r0
     580:	32 9f       	mul	r19, r18
     582:	90 0d       	add	r25, r0
     584:	11 24       	eor	r1, r1
     586:	44 9f       	mul	r20, r20
     588:	f0 01       	movw	r30, r0
     58a:	45 9f       	mul	r20, r21
     58c:	f0 0d       	add	r31, r0
     58e:	54 9f       	mul	r21, r20
     590:	f0 0d       	add	r31, r0
     592:	11 24       	eor	r1, r1
     594:	8e 0f       	add	r24, r30
     596:	9f 1f       	adc	r25, r31
     598:	66 9f       	mul	r22, r22
     59a:	f0 01       	movw	r30, r0
     59c:	67 9f       	mul	r22, r23
     59e:	f0 0d       	add	r31, r0
     5a0:	76 9f       	mul	r23, r22
     5a2:	f0 0d       	add	r31, r0
     5a4:	11 24       	eor	r1, r1
     5a6:	44 0f       	add	r20, r20
     5a8:	55 1f       	adc	r21, r21
     5aa:	42 9f       	mul	r20, r18
     5ac:	b0 01       	movw	r22, r0
     5ae:	43 9f       	mul	r20, r19
     5b0:	70 0d       	add	r23, r0
     5b2:	52 9f       	mul	r21, r18
     5b4:	70 0d       	add	r23, r0
     5b6:	11 24       	eor	r1, r1
     5b8:	8e 1b       	sub	r24, r30
     5ba:	9f 0b       	sbc	r25, r31
     5bc:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <__udivmodhi4>
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__floatunsisf>
     5c8:	0e 94 6e 28 	call	0x50dc	; 0x50dc <acos>
     5cc:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <__fixunssfsi>
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__floatunsisf>
     5d8:	20 ee       	ldi	r18, 0xE0	; 224
     5da:	3e e2       	ldi	r19, 0x2E	; 46
     5dc:	45 e6       	ldi	r20, 0x65	; 101
     5de:	52 e4       	ldi	r21, 0x42	; 66
     5e0:	0e 94 c5 22 	call	0x458a	; 0x458a <__mulsf3>
     5e4:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <__fixunssfsi>
     5e8:	f1 01       	movw	r30, r2
     5ea:	71 83       	std	Z+1, r23	; 0x01
     5ec:	60 83       	st	Z, r22
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	cf 91       	pop	r28
     5f8:	df 91       	pop	r29
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	cf 90       	pop	r12
     606:	bf 90       	pop	r11
     608:	af 90       	pop	r10
     60a:	9f 90       	pop	r9
     60c:	8f 90       	pop	r8
     60e:	7f 90       	pop	r7
     610:	6f 90       	pop	r6
     612:	5f 90       	pop	r5
     614:	4f 90       	pop	r4
     616:	3f 90       	pop	r3
     618:	2f 90       	pop	r2
     61a:	08 95       	ret

0000061c <main>:
     61c:	cf 92       	push	r12
     61e:	df 92       	push	r13
     620:	ef 92       	push	r14
     622:	ff 92       	push	r15
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	df 93       	push	r29
     62a:	cf 93       	push	r28
     62c:	00 d0       	rcall	.+0      	; 0x62e <main+0x12>
     62e:	00 d0       	rcall	.+0      	; 0x630 <main+0x14>
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
     634:	0e 94 1c 14 	call	0x2838	; 0x2838 <init>
     638:	86 ec       	ldi	r24, 0xC6	; 198
     63a:	96 e0       	ldi	r25, 0x06	; 6
     63c:	40 e0       	ldi	r20, 0x00	; 0
     63e:	51 ee       	ldi	r21, 0xE1	; 225
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <_ZN14HardwareSerial5beginEl>
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	0e 94 57 14 	call	0x28ae	; 0x28ae <analogReference>
     64e:	13 e0       	ldi	r17, 0x03	; 3
     650:	e1 2e       	mov	r14, r17
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	82 e4       	ldi	r24, 0x42	; 66
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	68 e4       	ldi	r22, 0x48	; 72
     65e:	71 e0       	ldi	r23, 0x01	; 1
     660:	42 e0       	ldi	r20, 0x02	; 2
     662:	6e 01       	movw	r12, r28
     664:	08 94       	sec
     666:	c1 1c       	adc	r12, r1
     668:	d1 1c       	adc	r13, r1
     66a:	96 01       	movw	r18, r12
     66c:	87 01       	movw	r16, r14
     66e:	0e 94 40 02 	call	0x480	; 0x480 <_Z19plaqueDistanceAnglePjS_hRjS0_>
     672:	69 81       	ldd	r22, Y+1	; 0x01
     674:	7a 81       	ldd	r23, Y+2	; 0x02
     676:	86 ec       	ldi	r24, 0xC6	; 198
     678:	96 e0       	ldi	r25, 0x06	; 6
     67a:	4a e0       	ldi	r20, 0x0A	; 10
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	0e 94 90 10 	call	0x2120	; 0x2120 <_ZN5Print5printEji>
     682:	86 ec       	ldi	r24, 0xC6	; 198
     684:	96 e0       	ldi	r25, 0x06	; 6
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	71 e0       	ldi	r23, 0x01	; 1
     68a:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print7printlnEPKc>
     68e:	6b 81       	ldd	r22, Y+3	; 0x03
     690:	7c 81       	ldd	r23, Y+4	; 0x04
     692:	86 ec       	ldi	r24, 0xC6	; 198
     694:	96 e0       	ldi	r25, 0x06	; 6
     696:	4a e0       	ldi	r20, 0x0A	; 10
     698:	50 e0       	ldi	r21, 0x00	; 0
     69a:	0e 94 90 10 	call	0x2120	; 0x2120 <_ZN5Print5printEji>
     69e:	86 ec       	ldi	r24, 0xC6	; 198
     6a0:	96 e0       	ldi	r25, 0x06	; 6
     6a2:	60 e1       	ldi	r22, 0x10	; 16
     6a4:	71 e0       	ldi	r23, 0x01	; 1
     6a6:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print7printlnEPKc>
     6aa:	8e e4       	ldi	r24, 0x4E	; 78
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	64 e5       	ldi	r22, 0x54	; 84
     6b0:	71 e0       	ldi	r23, 0x01	; 1
     6b2:	43 e0       	ldi	r20, 0x03	; 3
     6b4:	96 01       	movw	r18, r12
     6b6:	0e 94 40 02 	call	0x480	; 0x480 <_Z19plaqueDistanceAnglePjS_hRjS0_>
     6ba:	69 81       	ldd	r22, Y+1	; 0x01
     6bc:	7a 81       	ldd	r23, Y+2	; 0x02
     6be:	86 ec       	ldi	r24, 0xC6	; 198
     6c0:	96 e0       	ldi	r25, 0x06	; 6
     6c2:	4a e0       	ldi	r20, 0x0A	; 10
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	0e 94 90 10 	call	0x2120	; 0x2120 <_ZN5Print5printEji>
     6ca:	86 ec       	ldi	r24, 0xC6	; 198
     6cc:	96 e0       	ldi	r25, 0x06	; 6
     6ce:	61 e2       	ldi	r22, 0x21	; 33
     6d0:	71 e0       	ldi	r23, 0x01	; 1
     6d2:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print7printlnEPKc>
     6d6:	6b 81       	ldd	r22, Y+3	; 0x03
     6d8:	7c 81       	ldd	r23, Y+4	; 0x04
     6da:	86 ec       	ldi	r24, 0xC6	; 198
     6dc:	96 e0       	ldi	r25, 0x06	; 6
     6de:	4a e0       	ldi	r20, 0x0A	; 10
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	0e 94 90 10 	call	0x2120	; 0x2120 <_ZN5Print5printEji>
     6e6:	86 ec       	ldi	r24, 0xC6	; 198
     6e8:	96 e0       	ldi	r25, 0x06	; 6
     6ea:	61 e3       	ldi	r22, 0x31	; 49
     6ec:	71 e0       	ldi	r23, 0x01	; 1
     6ee:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print7printlnEPKc>
     6f2:	ff cf       	rjmp	.-2      	; 0x6f2 <main+0xd6>

000006f4 <T.7>:
     6f4:	81 30       	cpi	r24, 0x01	; 1
     6f6:	91 05       	cpc	r25, r1
     6f8:	09 f0       	breq	.+2      	; 0x6fc <T.7+0x8>
     6fa:	53 c0       	rjmp	.+166    	; 0x7a2 <T.7+0xae>
     6fc:	8a ed       	ldi	r24, 0xDA	; 218
     6fe:	92 e0       	ldi	r25, 0x02	; 2
     700:	0e 94 7f 04 	call	0x8fe	; 0x8fe <_ZN14HMC6352compassC1Ev>
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	dc 01       	movw	r26, r24
     70a:	80 93 de 02 	sts	0x02DE, r24
     70e:	90 93 df 02 	sts	0x02DF, r25
     712:	a0 93 e0 02 	sts	0x02E0, r26
     716:	b0 93 e1 02 	sts	0x02E1, r27
     71a:	80 93 e2 02 	sts	0x02E2, r24
     71e:	90 93 e3 02 	sts	0x02E3, r25
     722:	a0 93 e4 02 	sts	0x02E4, r26
     726:	b0 93 e5 02 	sts	0x02E5, r27
     72a:	86 e6       	ldi	r24, 0x66	; 102
     72c:	96 e6       	ldi	r25, 0x66	; 102
     72e:	a6 e6       	ldi	r26, 0x66	; 102
     730:	bf e3       	ldi	r27, 0x3F	; 63
     732:	80 93 f6 02 	sts	0x02F6, r24
     736:	90 93 f7 02 	sts	0x02F7, r25
     73a:	a0 93 f8 02 	sts	0x02F8, r26
     73e:	b0 93 f9 02 	sts	0x02F9, r27
     742:	8a e0       	ldi	r24, 0x0A	; 10
     744:	97 ed       	ldi	r25, 0xD7	; 215
     746:	a3 e2       	ldi	r26, 0x23	; 35
     748:	bc e3       	ldi	r27, 0x3C	; 60
     74a:	80 93 fa 02 	sts	0x02FA, r24
     74e:	90 93 fb 02 	sts	0x02FB, r25
     752:	a0 93 fc 02 	sts	0x02FC, r26
     756:	b0 93 fd 02 	sts	0x02FD, r27
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	a0 e8       	ldi	r26, 0x80	; 128
     760:	bf e3       	ldi	r27, 0x3F	; 63
     762:	80 93 fe 02 	sts	0x02FE, r24
     766:	90 93 ff 02 	sts	0x02FF, r25
     76a:	a0 93 00 03 	sts	0x0300, r26
     76e:	b0 93 01 03 	sts	0x0301, r27
     772:	83 e0       	ldi	r24, 0x03	; 3
     774:	93 e0       	ldi	r25, 0x03	; 3
     776:	63 e0       	ldi	r22, 0x03	; 3
     778:	41 e0       	ldi	r20, 0x01	; 1
     77a:	0e 94 9d 0c 	call	0x193a	; 0x193a <_ZN10AF_DCMotorC1Ehh>
     77e:	85 e0       	ldi	r24, 0x05	; 5
     780:	93 e0       	ldi	r25, 0x03	; 3
     782:	64 e0       	ldi	r22, 0x04	; 4
     784:	41 e0       	ldi	r20, 0x01	; 1
     786:	0e 94 9d 0c 	call	0x193a	; 0x193a <_ZN10AF_DCMotorC1Ehh>
     78a:	87 e0       	ldi	r24, 0x07	; 7
     78c:	93 e0       	ldi	r25, 0x03	; 3
     78e:	68 ec       	ldi	r22, 0xC8	; 200
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	41 e0       	ldi	r20, 0x01	; 1
     794:	0e 94 99 0b 	call	0x1732	; 0x1732 <_ZN10AF_StepperC1Ejh>
     798:	8d e3       	ldi	r24, 0x3D	; 61
     79a:	96 e0       	ldi	r25, 0x06	; 6
     79c:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN15CmissionconsoleC1Ev>
     7a0:	08 95       	ret
     7a2:	00 97       	sbiw	r24, 0x00	; 0
     7a4:	21 f4       	brne	.+8      	; 0x7ae <T.7+0xba>
     7a6:	8d e3       	ldi	r24, 0x3D	; 61
     7a8:	96 e0       	ldi	r25, 0x06	; 6
     7aa:	0e 94 a4 07 	call	0xf48	; 0xf48 <_ZN15CmissionconsoleD1Ev>
     7ae:	08 95       	ret

000007b0 <_GLOBAL__I_compass>:
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <T.7>
     7b8:	08 95       	ret

000007ba <_GLOBAL__D_compass>:
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <T.7>
     7c2:	08 95       	ret

000007c4 <_ZN14HMC6352compass14getLastHeadingEv>:
     7c4:	fc 01       	movw	r30, r24
     7c6:	82 81       	ldd	r24, Z+2	; 0x02
     7c8:	93 81       	ldd	r25, Z+3	; 0x03
     7ca:	08 95       	ret

000007cc <_ZN14HMC6352compass16enterCalibrationEv>:
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	ec 01       	movw	r28, r24
     7da:	8c 01       	movw	r16, r24
     7dc:	69 81       	ldd	r22, Y+1	; 0x01
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	6e 7f       	andi	r22, 0xFE	; 254
     7e2:	70 70       	andi	r23, 0x00	; 0
     7e4:	7e 01       	movw	r14, r28
     7e6:	9f 2d       	mov	r25, r15
     7e8:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <_ZN7TwoWire17beginTransmissionEi>
     7ec:	ce 01       	movw	r24, r28
     7ee:	63 e4       	ldi	r22, 0x43	; 67
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <_ZN7TwoWire4sendEi>
     7f6:	ce 01       	movw	r24, r28
     7f8:	0e 94 28 13 	call	0x2650	; 0x2650 <_ZN7TwoWire15endTransmissionEv>
     7fc:	ee 24       	eor	r14, r14
     7fe:	ff 24       	eor	r15, r15
     800:	8d e0       	ldi	r24, 0x0D	; 13
     802:	61 e0       	ldi	r22, 0x01	; 1
     804:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
     808:	64 ef       	ldi	r22, 0xF4	; 244
     80a:	71 e0       	ldi	r23, 0x01	; 1
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 e7 13 	call	0x27ce	; 0x27ce <delay>
     814:	8d e0       	ldi	r24, 0x0D	; 13
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
     81c:	64 ef       	ldi	r22, 0xF4	; 244
     81e:	71 e0       	ldi	r23, 0x01	; 1
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 e7 13 	call	0x27ce	; 0x27ce <delay>
     828:	08 94       	sec
     82a:	e1 1c       	adc	r14, r1
     82c:	f1 1c       	adc	r15, r1
     82e:	24 e1       	ldi	r18, 0x14	; 20
     830:	e2 16       	cp	r14, r18
     832:	f1 04       	cpc	r15, r1
     834:	29 f7       	brne	.-54     	; 0x800 <_ZN14HMC6352compass16enterCalibrationEv+0x34>
     836:	69 81       	ldd	r22, Y+1	; 0x01
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	6e 7f       	andi	r22, 0xFE	; 254
     83c:	70 70       	andi	r23, 0x00	; 0
     83e:	c8 01       	movw	r24, r16
     840:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <_ZN7TwoWire17beginTransmissionEi>
     844:	c8 01       	movw	r24, r16
     846:	65 e4       	ldi	r22, 0x45	; 69
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <_ZN7TwoWire4sendEi>
     84e:	c8 01       	movw	r24, r16
     850:	0e 94 28 13 	call	0x2650	; 0x2650 <_ZN7TwoWire15endTransmissionEv>
     854:	8d e0       	ldi	r24, 0x0D	; 13
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	08 95       	ret

0000086a <_ZN14HMC6352compass10getHeadingEv>:
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	ec 01       	movw	r28, r24
     878:	8d e0       	ldi	r24, 0x0D	; 13
     87a:	61 e0       	ldi	r22, 0x01	; 1
     87c:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
     880:	8e 01       	movw	r16, r28
     882:	ce 01       	movw	r24, r28
     884:	69 81       	ldd	r22, Y+1	; 0x01
     886:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN7TwoWire17beginTransmissionEh>
     88a:	ce 01       	movw	r24, r28
     88c:	61 e4       	ldi	r22, 0x41	; 65
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <_ZN7TwoWire4sendEi>
     894:	ce 01       	movw	r24, r28
     896:	0e 94 28 13 	call	0x2650	; 0x2650 <_ZN7TwoWire15endTransmissionEv>
     89a:	66 e0       	ldi	r22, 0x06	; 6
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 e7 13 	call	0x27ce	; 0x27ce <delay>
     8a6:	69 81       	ldd	r22, Y+1	; 0x01
     8a8:	ce 01       	movw	r24, r28
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	42 e0       	ldi	r20, 0x02	; 2
     8ae:	50 e0       	ldi	r21, 0x00	; 0
     8b0:	0e 94 45 13 	call	0x268a	; 0x268a <_ZN7TwoWire11requestFromEii>
     8b4:	c8 01       	movw	r24, r16
     8b6:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN7TwoWire9availableEv>
     8ba:	88 23       	and	r24, r24
     8bc:	d9 f3       	breq	.-10     	; 0x8b4 <_ZN14HMC6352compass10getHeadingEv+0x4a>
     8be:	c8 01       	movw	r24, r16
     8c0:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <_ZN7TwoWire7receiveEv>
     8c4:	f8 2e       	mov	r15, r24
     8c6:	c8 01       	movw	r24, r16
     8c8:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN7TwoWire9availableEv>
     8cc:	88 23       	and	r24, r24
     8ce:	d9 f3       	breq	.-10     	; 0x8c6 <_ZN14HMC6352compass10getHeadingEv+0x5c>
     8d0:	c8 01       	movw	r24, r16
     8d2:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <_ZN7TwoWire7receiveEv>
     8d6:	3f 2d       	mov	r19, r15
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	08 2f       	mov	r16, r24
     8dc:	10 e0       	ldi	r17, 0x00	; 0
     8de:	02 2b       	or	r16, r18
     8e0:	13 2b       	or	r17, r19
     8e2:	1b 83       	std	Y+3, r17	; 0x03
     8e4:	0a 83       	std	Y+2, r16	; 0x02
     8e6:	8d e0       	ldi	r24, 0x0D	; 13
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
     8ee:	c8 01       	movw	r24, r16
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	ff 90       	pop	r15
     8fa:	ef 90       	pop	r14
     8fc:	08 95       	ret

000008fe <_ZN14HMC6352compassC1Ev>:
     8fe:	ef 92       	push	r14
     900:	ff 92       	push	r15
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
     908:	7e 01       	movw	r14, r28
     90a:	9f 2d       	mov	r25, r15
     90c:	0e 94 50 12 	call	0x24a0	; 0x24a0 <_ZN7TwoWireC1Ev>
     910:	81 e2       	ldi	r24, 0x21	; 33
     912:	89 83       	std	Y+1, r24	; 0x01
     914:	8d e0       	ldi	r24, 0x0D	; 13
     916:	61 e0       	ldi	r22, 0x01	; 1
     918:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
     91c:	8d e0       	ldi	r24, 0x0D	; 13
     91e:	61 e0       	ldi	r22, 0x01	; 1
     920:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
     924:	ce 01       	movw	r24, r28
     926:	0e 94 48 13 	call	0x2690	; 0x2690 <_ZN7TwoWire5beginEv>
     92a:	8d e0       	ldi	r24, 0x0D	; 13
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	ff 90       	pop	r15
     938:	ef 90       	pop	r14
     93a:	08 95       	ret

0000093c <_ZN14HMC6352compassC2Ev>:
     93c:	ef 92       	push	r14
     93e:	ff 92       	push	r15
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	ec 01       	movw	r28, r24
     946:	7e 01       	movw	r14, r28
     948:	9f 2d       	mov	r25, r15
     94a:	0e 94 50 12 	call	0x24a0	; 0x24a0 <_ZN7TwoWireC1Ev>
     94e:	81 e2       	ldi	r24, 0x21	; 33
     950:	89 83       	std	Y+1, r24	; 0x01
     952:	8d e0       	ldi	r24, 0x0D	; 13
     954:	61 e0       	ldi	r22, 0x01	; 1
     956:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
     95a:	8d e0       	ldi	r24, 0x0D	; 13
     95c:	61 e0       	ldi	r22, 0x01	; 1
     95e:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
     962:	ce 01       	movw	r24, r28
     964:	0e 94 48 13 	call	0x2690	; 0x2690 <_ZN7TwoWire5beginEv>
     968:	8d e0       	ldi	r24, 0x0D	; 13
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <_Z11analyzeRoomPjS_S_>:
     97a:	cf 92       	push	r12
     97c:	df 92       	push	r13
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	8a 01       	movw	r16, r20
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	f8 01       	movw	r30, r16
     992:	e2 0f       	add	r30, r18
     994:	f3 1f       	adc	r31, r19
     996:	11 82       	std	Z+1, r1	; 0x01
     998:	10 82       	st	Z, r1
     99a:	2e 5f       	subi	r18, 0xFE	; 254
     99c:	3f 4f       	sbci	r19, 0xFF	; 255
     99e:	2a 30       	cpi	r18, 0x0A	; 10
     9a0:	31 05       	cpc	r19, r1
     9a2:	b1 f7       	brne	.-20     	; 0x990 <_Z11analyzeRoomPjS_S_+0x16>
     9a4:	cc 24       	eor	r12, r12
     9a6:	dd 24       	eor	r13, r13
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	e0 e0       	ldi	r30, 0x00	; 0
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	50 e0       	ldi	r21, 0x00	; 0
     9b2:	ec 01       	movw	r28, r24
     9b4:	c2 0f       	add	r28, r18
     9b6:	d3 1f       	adc	r29, r19
     9b8:	7b 01       	movw	r14, r22
     9ba:	e2 0e       	add	r14, r18
     9bc:	f3 1e       	adc	r15, r19
     9be:	09 90       	ld	r0, Y+
     9c0:	d8 81       	ld	r29, Y
     9c2:	c0 2d       	mov	r28, r0
     9c4:	d7 01       	movw	r26, r14
     9c6:	ed 90       	ld	r14, X+
     9c8:	fc 90       	ld	r15, X
     9ca:	11 97       	sbiw	r26, 0x01	; 1
     9cc:	ce 19       	sub	r28, r14
     9ce:	df 09       	sbc	r29, r15
     9d0:	c5 36       	cpi	r28, 0x65	; 101
     9d2:	d1 05       	cpc	r29, r1
     9d4:	10 f4       	brcc	.+4      	; 0x9da <_Z11analyzeRoomPjS_S_+0x60>
     9d6:	50 e0       	ldi	r21, 0x00	; 0
     9d8:	0e c0       	rjmp	.+28     	; 0x9f6 <_Z11analyzeRoomPjS_S_+0x7c>
     9da:	54 30       	cpi	r21, 0x04	; 4
     9dc:	58 f0       	brcs	.+22     	; 0x9f4 <_Z11analyzeRoomPjS_S_+0x7a>
     9de:	ef 01       	movw	r28, r30
     9e0:	cc 0f       	add	r28, r28
     9e2:	dd 1f       	adc	r29, r29
     9e4:	c0 0f       	add	r28, r16
     9e6:	d1 1f       	adc	r29, r17
     9e8:	d9 82       	std	Y+1, r13	; 0x01
     9ea:	c8 82       	st	Y, r12
     9ec:	31 96       	adiw	r30, 0x01	; 1
     9ee:	e5 30       	cpi	r30, 0x05	; 5
     9f0:	f1 05       	cpc	r31, r1
     9f2:	59 f0       	breq	.+22     	; 0xa0a <_Z11analyzeRoomPjS_S_+0x90>
     9f4:	5f 5f       	subi	r21, 0xFF	; 255
     9f6:	2e 5f       	subi	r18, 0xFE	; 254
     9f8:	3f 4f       	sbci	r19, 0xFF	; 255
     9fa:	a2 e1       	ldi	r26, 0x12	; 18
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	ca 0e       	add	r12, r26
     a00:	db 1e       	adc	r13, r27
     a02:	b1 e0       	ldi	r27, 0x01	; 1
     a04:	20 39       	cpi	r18, 0x90	; 144
     a06:	3b 07       	cpc	r19, r27
     a08:	a1 f6       	brne	.-88     	; 0x9b2 <_Z11analyzeRoomPjS_S_+0x38>
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	df 90       	pop	r13
     a18:	cf 90       	pop	r12
     a1a:	08 95       	ret

00000a1c <_Z18adjustScanPlatformhh>:
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	88 3c       	cpi	r24, 0xC8	; 200
     a22:	08 f0       	brcs	.+2      	; 0xa26 <_Z18adjustScanPlatformhh+0xa>
     a24:	57 c0       	rjmp	.+174    	; 0xad4 <_Z18adjustScanPlatformhh+0xb8>
     a26:	61 30       	cpi	r22, 0x01	; 1
     a28:	09 f0       	breq	.+2      	; 0xa2c <_Z18adjustScanPlatformhh+0x10>
     a2a:	54 c0       	rjmp	.+168    	; 0xad4 <_Z18adjustScanPlatformhh+0xb8>
     a2c:	20 91 3e 06 	lds	r18, 0x063E
     a30:	30 91 3f 06 	lds	r19, 0x063F
     a34:	c8 2f       	mov	r28, r24
     a36:	d0 e0       	ldi	r29, 0x00	; 0
     a38:	2c 17       	cp	r18, r28
     a3a:	3d 07       	cpc	r19, r29
     a3c:	dc f0       	brlt	.+54     	; 0xa74 <_Z18adjustScanPlatformhh+0x58>
     a3e:	22 c0       	rjmp	.+68     	; 0xa84 <_Z18adjustScanPlatformhh+0x68>
     a40:	87 e0       	ldi	r24, 0x07	; 7
     a42:	93 e0       	ldi	r25, 0x03	; 3
     a44:	61 e0       	ldi	r22, 0x01	; 1
     a46:	41 e0       	ldi	r20, 0x01	; 1
     a48:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_ZN10AF_Stepper7onestepEhh>
     a4c:	60 91 3e 06 	lds	r22, 0x063E
     a50:	70 91 3f 06 	lds	r23, 0x063F
     a54:	6f 5f       	subi	r22, 0xFF	; 255
     a56:	7f 4f       	sbci	r23, 0xFF	; 255
     a58:	70 93 3f 06 	sts	0x063F, r23
     a5c:	60 93 3e 06 	sts	0x063E, r22
     a60:	8d e3       	ldi	r24, 0x3D	; 61
     a62:	96 e0       	ldi	r25, 0x06	; 6
     a64:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_ZN15Cmissionconsole13mediumRangeIREj>
     a68:	6a e0       	ldi	r22, 0x0A	; 10
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 e7 13 	call	0x27ce	; 0x27ce <delay>
     a74:	80 91 3e 06 	lds	r24, 0x063E
     a78:	90 91 3f 06 	lds	r25, 0x063F
     a7c:	8c 17       	cp	r24, r28
     a7e:	9d 07       	cpc	r25, r29
     a80:	f9 f6       	brne	.-66     	; 0xa40 <_Z18adjustScanPlatformhh+0x24>
     a82:	28 c0       	rjmp	.+80     	; 0xad4 <_Z18adjustScanPlatformhh+0xb8>
     a84:	c2 17       	cp	r28, r18
     a86:	d3 07       	cpc	r29, r19
     a88:	f4 f0       	brlt	.+60     	; 0xac6 <_Z18adjustScanPlatformhh+0xaa>
     a8a:	24 c0       	rjmp	.+72     	; 0xad4 <_Z18adjustScanPlatformhh+0xb8>
     a8c:	87 e0       	ldi	r24, 0x07	; 7
     a8e:	93 e0       	ldi	r25, 0x03	; 3
     a90:	62 e0       	ldi	r22, 0x02	; 2
     a92:	41 e0       	ldi	r20, 0x01	; 1
     a94:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_ZN10AF_Stepper7onestepEhh>
     a98:	80 91 3e 06 	lds	r24, 0x063E
     a9c:	90 91 3f 06 	lds	r25, 0x063F
     aa0:	01 97       	sbiw	r24, 0x01	; 1
     aa2:	90 93 3f 06 	sts	0x063F, r25
     aa6:	80 93 3e 06 	sts	0x063E, r24
     aaa:	6a e0       	ldi	r22, 0x0A	; 10
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 e7 13 	call	0x27ce	; 0x27ce <delay>
     ab6:	60 91 3e 06 	lds	r22, 0x063E
     aba:	70 91 3f 06 	lds	r23, 0x063F
     abe:	8d e3       	ldi	r24, 0x3D	; 61
     ac0:	96 e0       	ldi	r25, 0x06	; 6
     ac2:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_ZN15Cmissionconsole13mediumRangeIREj>
     ac6:	80 91 3e 06 	lds	r24, 0x063E
     aca:	90 91 3f 06 	lds	r25, 0x063F
     ace:	8c 17       	cp	r24, r28
     ad0:	9d 07       	cpc	r25, r29
     ad2:	e1 f6       	brne	.-72     	; 0xa8c <_Z18adjustScanPlatformhh+0x70>
     ad4:	80 91 3e 06 	lds	r24, 0x063E
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	08 95       	ret

00000ade <_Z7readADCj>:
     ade:	ef 92       	push	r14
     ae0:	ff 92       	push	r15
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	f8 2e       	mov	r15, r24
     aec:	00 e0       	ldi	r16, 0x00	; 0
     aee:	10 e0       	ldi	r17, 0x00	; 0
     af0:	c0 e0       	ldi	r28, 0x00	; 0
     af2:	d0 e0       	ldi	r29, 0x00	; 0
     af4:	8f 2d       	mov	r24, r15
     af6:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <analogRead>
     afa:	0f 5f       	subi	r16, 0xFF	; 255
     afc:	1f 4f       	sbci	r17, 0xFF	; 255
     afe:	8c 1b       	sub	r24, r28
     b00:	9d 0b       	sbc	r25, r29
     b02:	b8 01       	movw	r22, r16
     b04:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <__divmodhi4>
     b08:	c6 0f       	add	r28, r22
     b0a:	d7 1f       	adc	r29, r23
     b0c:	04 36       	cpi	r16, 0x64	; 100
     b0e:	11 05       	cpc	r17, r1
     b10:	89 f7       	brne	.-30     	; 0xaf4 <_Z7readADCj+0x16>
     b12:	ce 01       	movw	r24, r28
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	08 95       	ret

00000b22 <_Z10irDistanceh>:
     b22:	1f 93       	push	r17
     b24:	18 2f       	mov	r17, r24
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 6f 05 	call	0xade	; 0xade <_Z7readADCj>
     b2c:	11 23       	and	r17, r17
     b2e:	61 f1       	breq	.+88     	; 0xb88 <_Z10irDistanceh+0x66>
     b30:	9c 01       	movw	r18, r24
     b32:	12 30       	cpi	r17, 0x02	; 2
     b34:	91 f4       	brne	.+36     	; 0xb5a <_Z10irDistanceh+0x38>
     b36:	83 e0       	ldi	r24, 0x03	; 3
     b38:	26 33       	cpi	r18, 0x36	; 54
     b3a:	38 07       	cpc	r19, r24
     b3c:	18 f0       	brcs	.+6      	; 0xb44 <_Z10irDistanceh+0x22>
     b3e:	26 e9       	ldi	r18, 0x96	; 150
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	24 c0       	rjmp	.+72     	; 0xb8c <_Z10irDistanceh+0x6a>
     b44:	21 39       	cpi	r18, 0x91	; 145
     b46:	31 05       	cpc	r19, r1
     b48:	18 f4       	brcc	.+6      	; 0xb50 <_Z10irDistanceh+0x2e>
     b4a:	24 e1       	ldi	r18, 0x14	; 20
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	1e c0       	rjmp	.+60     	; 0xb8c <_Z10irDistanceh+0x6a>
     b50:	21 55       	subi	r18, 0x51	; 81
     b52:	3e 4f       	sbci	r19, 0xFE	; 254
     b54:	f9 01       	movw	r30, r18
     b56:	24 91       	lpm	r18, Z+
     b58:	13 c0       	rjmp	.+38     	; 0xb80 <_Z10irDistanceh+0x5e>
     b5a:	13 30       	cpi	r17, 0x03	; 3
     b5c:	a9 f4       	brne	.+42     	; 0xb88 <_Z10irDistanceh+0x66>
     b5e:	f2 e0       	ldi	r31, 0x02	; 2
     b60:	8b 32       	cpi	r24, 0x2B	; 43
     b62:	9f 07       	cpc	r25, r31
     b64:	18 f0       	brcs	.+6      	; 0xb6c <_Z10irDistanceh+0x4a>
     b66:	24 e6       	ldi	r18, 0x64	; 100
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	10 c0       	rjmp	.+32     	; 0xb8c <_Z10irDistanceh+0x6a>
     b6c:	83 3a       	cpi	r24, 0xA3	; 163
     b6e:	91 05       	cpc	r25, r1
     b70:	18 f4       	brcc	.+6      	; 0xb78 <_Z10irDistanceh+0x56>
     b72:	2c ec       	ldi	r18, 0xCC	; 204
     b74:	31 e0       	ldi	r19, 0x01	; 1
     b76:	0a c0       	rjmp	.+20     	; 0xb8c <_Z10irDistanceh+0x6a>
     b78:	23 56       	subi	r18, 0x63	; 99
     b7a:	3e 4f       	sbci	r19, 0xFE	; 254
     b7c:	f9 01       	movw	r30, r18
     b7e:	24 91       	lpm	r18, Z+
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	22 0f       	add	r18, r18
     b84:	33 1f       	adc	r19, r19
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <_Z10irDistanceh+0x6a>
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	c9 01       	movw	r24, r18
     b8e:	1f 91       	pop	r17
     b90:	08 95       	ret

00000b92 <_Z15scanEnvironmentPjj>:
     b92:	cf 92       	push	r12
     b94:	df 92       	push	r13
     b96:	ef 92       	push	r14
     b98:	ff 92       	push	r15
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	7c 01       	movw	r14, r24
     ba2:	eb 01       	movw	r28, r22
     ba4:	10 e0       	ldi	r17, 0x00	; 0
     ba6:	19 c0       	rjmp	.+50     	; 0xbda <_Z15scanEnvironmentPjj+0x48>
     ba8:	83 e0       	ldi	r24, 0x03	; 3
     baa:	0e 94 91 05 	call	0xb22	; 0xb22 <_Z10irDistanceh>
     bae:	f6 01       	movw	r30, r12
     bb0:	ee 0f       	add	r30, r30
     bb2:	ff 1f       	adc	r31, r31
     bb4:	ee 0d       	add	r30, r14
     bb6:	ff 1d       	adc	r31, r15
     bb8:	91 83       	std	Z+1, r25	; 0x01
     bba:	80 83       	st	Z, r24
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_Z18adjustScanPlatformhh>
     bc4:	8f 5f       	subi	r24, 0xFF	; 255
     bc6:	61 e0       	ldi	r22, 0x01	; 1
     bc8:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_Z18adjustScanPlatformhh>
     bcc:	64 e6       	ldi	r22, 0x64	; 100
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 e7 13 	call	0x27ce	; 0x27ce <delay>
     bd8:	1f 5f       	subi	r17, 0xFF	; 255
     bda:	c1 2e       	mov	r12, r17
     bdc:	dd 24       	eor	r13, r13
     bde:	cc 16       	cp	r12, r28
     be0:	dd 06       	cpc	r13, r29
     be2:	10 f3       	brcs	.-60     	; 0xba8 <_Z15scanEnvironmentPjj+0x16>
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_Z18adjustScanPlatformhh>
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	1f 91       	pop	r17
     bf2:	ff 90       	pop	r15
     bf4:	ef 90       	pop	r14
     bf6:	df 90       	pop	r13
     bf8:	cf 90       	pop	r12
     bfa:	08 95       	ret

00000bfc <_Z10turnToFacej>:
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	ec 01       	movw	r28, r24
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <_Z10turnToFacej+0x10>
     c08:	c0 51       	subi	r28, 0x10	; 16
     c0a:	de 40       	sbci	r29, 0x0E	; 14
     c0c:	2e e0       	ldi	r18, 0x0E	; 14
     c0e:	c0 31       	cpi	r28, 0x10	; 16
     c10:	d2 07       	cpc	r29, r18
     c12:	d0 f7       	brcc	.-12     	; 0xc08 <_Z10turnToFacej+0xc>
     c14:	85 e0       	ldi	r24, 0x05	; 5
     c16:	93 e0       	ldi	r25, 0x03	; 3
     c18:	66 e9       	ldi	r22, 0x96	; 150
     c1a:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN10AF_DCMotor8setSpeedEh>
     c1e:	83 e0       	ldi	r24, 0x03	; 3
     c20:	93 e0       	ldi	r25, 0x03	; 3
     c22:	66 e9       	ldi	r22, 0x96	; 150
     c24:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN10AF_DCMotor8setSpeedEh>
     c28:	85 e0       	ldi	r24, 0x05	; 5
     c2a:	93 e0       	ldi	r25, 0x03	; 3
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN10AF_DCMotor3runEh>
     c32:	83 e0       	ldi	r24, 0x03	; 3
     c34:	93 e0       	ldi	r25, 0x03	; 3
     c36:	62 e0       	ldi	r22, 0x02	; 2
     c38:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN10AF_DCMotor3runEh>
     c3c:	8a ed       	ldi	r24, 0xDA	; 218
     c3e:	92 e0       	ldi	r25, 0x02	; 2
     c40:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN14HMC6352compass10getHeadingEv>
     c44:	8c 01       	movw	r16, r24
     c46:	0c c0       	rjmp	.+24     	; 0xc60 <_Z10turnToFacej+0x64>
     c48:	8a ed       	ldi	r24, 0xDA	; 218
     c4a:	92 e0       	ldi	r25, 0x02	; 2
     c4c:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN14HMC6352compass10getHeadingEv>
     c50:	8c 01       	movw	r16, r24
     c52:	86 ec       	ldi	r24, 0xC6	; 198
     c54:	96 e0       	ldi	r25, 0x06	; 6
     c56:	b8 01       	movw	r22, r16
     c58:	4a e0       	ldi	r20, 0x0A	; 10
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_ZN5Print7printlnEii>
     c60:	c0 17       	cp	r28, r16
     c62:	d1 07       	cpc	r29, r17
     c64:	31 f0       	breq	.+12     	; 0xc72 <_Z10turnToFacej+0x76>
     c66:	9e 01       	movw	r18, r28
     c68:	20 1b       	sub	r18, r16
     c6a:	31 0b       	sbc	r19, r17
     c6c:	23 33       	cpi	r18, 0x33	; 51
     c6e:	31 05       	cpc	r19, r1
     c70:	58 f7       	brcc	.-42     	; 0xc48 <_Z10turnToFacej+0x4c>
     c72:	83 e0       	ldi	r24, 0x03	; 3
     c74:	93 e0       	ldi	r25, 0x03	; 3
     c76:	64 e0       	ldi	r22, 0x04	; 4
     c78:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN10AF_DCMotor3runEh>
     c7c:	85 e0       	ldi	r24, 0x05	; 5
     c7e:	93 e0       	ldi	r25, 0x03	; 3
     c80:	64 e0       	ldi	r22, 0x04	; 4
     c82:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN10AF_DCMotor3runEh>
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	08 95       	ret

00000c90 <_Z10goStraightj>:
     c90:	4f 92       	push	r4
     c92:	5f 92       	push	r5
     c94:	6f 92       	push	r6
     c96:	7f 92       	push	r7
     c98:	8f 92       	push	r8
     c9a:	9f 92       	push	r9
     c9c:	af 92       	push	r10
     c9e:	bf 92       	push	r11
     ca0:	cf 92       	push	r12
     ca2:	df 92       	push	r13
     ca4:	ef 92       	push	r14
     ca6:	ff 92       	push	r15
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	8c 01       	movw	r16, r24
     cb2:	0e 94 b2 13 	call	0x2764	; 0x2764 <millis>
     cb6:	eb 01       	movw	r28, r22
     cb8:	8a ed       	ldi	r24, 0xDA	; 218
     cba:	92 e0       	ldi	r25, 0x02	; 2
     cbc:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN14HMC6352compass10getHeadingEv>
     cc0:	90 93 df 02 	sts	0x02DF, r25
     cc4:	80 93 de 02 	sts	0x02DE, r24
     cc8:	c8 01       	movw	r24, r16
     cca:	6a e0       	ldi	r22, 0x0A	; 10
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <__udivmodhi4>
     cd2:	06 2f       	mov	r16, r22
     cd4:	17 2f       	mov	r17, r23
     cd6:	83 e0       	ldi	r24, 0x03	; 3
     cd8:	93 e0       	ldi	r25, 0x03	; 3
     cda:	6d e7       	ldi	r22, 0x7D	; 125
     cdc:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN10AF_DCMotor8setSpeedEh>
     ce0:	85 e0       	ldi	r24, 0x05	; 5
     ce2:	93 e0       	ldi	r25, 0x03	; 3
     ce4:	6d e7       	ldi	r22, 0x7D	; 125
     ce6:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN10AF_DCMotor8setSpeedEh>
     cea:	83 e0       	ldi	r24, 0x03	; 3
     cec:	93 e0       	ldi	r25, 0x03	; 3
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN10AF_DCMotor3runEh>
     cf4:	85 e0       	ldi	r24, 0x05	; 5
     cf6:	93 e0       	ldi	r25, 0x03	; 3
     cf8:	61 e0       	ldi	r22, 0x01	; 1
     cfa:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN10AF_DCMotor3runEh>
     cfe:	fd e7       	ldi	r31, 0x7D	; 125
     d00:	4f 2e       	mov	r4, r31
     d02:	51 2c       	mov	r5, r1
     d04:	f5 c0       	rjmp	.+490    	; 0xef0 <_Z10goStraightj+0x260>
     d06:	0e 94 b2 13 	call	0x2764	; 0x2764 <millis>
     d0a:	6c 15       	cp	r22, r12
     d0c:	7d 05       	cpc	r23, r13
     d0e:	8e 05       	cpc	r24, r14
     d10:	9f 05       	cpc	r25, r15
     d12:	10 f4       	brcc	.+4      	; 0xd18 <_Z10goStraightj+0x88>
     d14:	c0 e0       	ldi	r28, 0x00	; 0
     d16:	d0 e0       	ldi	r29, 0x00	; 0
     d18:	0e 94 b2 13 	call	0x2764	; 0x2764 <millis>
     d1c:	6e 01       	movw	r12, r28
     d1e:	ee 24       	eor	r14, r14
     d20:	ff 24       	eor	r15, r15
     d22:	6c 19       	sub	r22, r12
     d24:	7d 09       	sbc	r23, r13
     d26:	8e 09       	sbc	r24, r14
     d28:	9f 09       	sbc	r25, r15
     d2a:	6b 30       	cpi	r22, 0x0B	; 11
     d2c:	71 05       	cpc	r23, r1
     d2e:	81 05       	cpc	r24, r1
     d30:	91 05       	cpc	r25, r1
     d32:	48 f3       	brcs	.-46     	; 0xd06 <_Z10goStraightj+0x76>
     d34:	0e 94 b2 13 	call	0x2764	; 0x2764 <millis>
     d38:	6c 19       	sub	r22, r12
     d3a:	7d 09       	sbc	r23, r13
     d3c:	8e 09       	sbc	r24, r14
     d3e:	9f 09       	sbc	r25, r15
     d40:	6b 30       	cpi	r22, 0x0B	; 11
     d42:	71 05       	cpc	r23, r1
     d44:	81 05       	cpc	r24, r1
     d46:	91 05       	cpc	r25, r1
     d48:	08 f4       	brcc	.+2      	; 0xd4c <_Z10goStraightj+0xbc>
     d4a:	d0 c0       	rjmp	.+416    	; 0xeec <_Z10goStraightj+0x25c>
     d4c:	8a ed       	ldi	r24, 0xDA	; 218
     d4e:	92 e0       	ldi	r25, 0x02	; 2
     d50:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN14HMC6352compass10getHeadingEv>
     d54:	20 91 de 02 	lds	r18, 0x02DE
     d58:	30 91 df 02 	lds	r19, 0x02DF
     d5c:	28 1b       	sub	r18, r24
     d5e:	39 0b       	sbc	r19, r25
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	29 30       	cpi	r18, 0x09	; 9
     d64:	38 07       	cpc	r19, r24
     d66:	28 f0       	brcs	.+10     	; 0xd72 <_Z10goStraightj+0xe2>
     d68:	e0 ef       	ldi	r30, 0xF0	; 240
     d6a:	ce 2e       	mov	r12, r30
     d6c:	e1 ef       	ldi	r30, 0xF1	; 241
     d6e:	de 2e       	mov	r13, r30
     d70:	04 c0       	rjmp	.+8      	; 0xd7a <_Z10goStraightj+0xea>
     d72:	70 e1       	ldi	r23, 0x10	; 16
     d74:	c7 2e       	mov	r12, r23
     d76:	7e e0       	ldi	r23, 0x0E	; 14
     d78:	d7 2e       	mov	r13, r23
     d7a:	c2 0e       	add	r12, r18
     d7c:	d3 1e       	adc	r13, r19
     d7e:	80 91 f0 02 	lds	r24, 0x02F0
     d82:	90 91 f1 02 	lds	r25, 0x02F1
     d86:	c8 9e       	mul	r12, r24
     d88:	b0 01       	movw	r22, r0
     d8a:	c9 9e       	mul	r12, r25
     d8c:	70 0d       	add	r23, r0
     d8e:	d8 9e       	mul	r13, r24
     d90:	70 0d       	add	r23, r0
     d92:	11 24       	eor	r1, r1
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__floatunsisf>
     d9c:	60 93 e4 02 	sts	0x02E4, r22
     da0:	70 93 e5 02 	sts	0x02E5, r23
     da4:	80 93 e6 02 	sts	0x02E6, r24
     da8:	90 93 e7 02 	sts	0x02E7, r25
     dac:	20 91 e2 02 	lds	r18, 0x02E2
     db0:	30 91 e3 02 	lds	r19, 0x02E3
     db4:	2c 0d       	add	r18, r12
     db6:	3d 1d       	adc	r19, r13
     db8:	30 93 e3 02 	sts	0x02E3, r19
     dbc:	20 93 e2 02 	sts	0x02E2, r18
     dc0:	60 91 f2 02 	lds	r22, 0x02F2
     dc4:	70 91 f3 02 	lds	r23, 0x02F3
     dc8:	84 e6       	ldi	r24, 0x64	; 100
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <__udivmodhi4>
     dd0:	62 17       	cp	r22, r18
     dd2:	73 07       	cpc	r23, r19
     dd4:	28 f4       	brcc	.+10     	; 0xde0 <_Z10goStraightj+0x150>
     dd6:	70 93 e3 02 	sts	0x02E3, r23
     dda:	60 93 e2 02 	sts	0x02E2, r22
     dde:	0b c0       	rjmp	.+22     	; 0xdf6 <_Z10goStraightj+0x166>
     de0:	44 27       	eor	r20, r20
     de2:	55 27       	eor	r21, r21
     de4:	46 1b       	sub	r20, r22
     de6:	57 0b       	sbc	r21, r23
     de8:	24 17       	cp	r18, r20
     dea:	35 07       	cpc	r19, r21
     dec:	20 f4       	brcc	.+8      	; 0xdf6 <_Z10goStraightj+0x166>
     dee:	50 93 e3 02 	sts	0x02E3, r21
     df2:	40 93 e2 02 	sts	0x02E2, r20
     df6:	20 91 f2 02 	lds	r18, 0x02F2
     dfa:	30 91 f3 02 	lds	r19, 0x02F3
     dfe:	80 91 e2 02 	lds	r24, 0x02E2
     e02:	90 91 e3 02 	lds	r25, 0x02E3
     e06:	28 9f       	mul	r18, r24
     e08:	b0 01       	movw	r22, r0
     e0a:	29 9f       	mul	r18, r25
     e0c:	70 0d       	add	r23, r0
     e0e:	38 9f       	mul	r19, r24
     e10:	70 0d       	add	r23, r0
     e12:	11 24       	eor	r1, r1
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__floatunsisf>
     e1c:	4b 01       	movw	r8, r22
     e1e:	5c 01       	movw	r10, r24
     e20:	60 93 e8 02 	sts	0x02E8, r22
     e24:	70 93 e9 02 	sts	0x02E9, r23
     e28:	80 93 ea 02 	sts	0x02EA, r24
     e2c:	90 93 eb 02 	sts	0x02EB, r25
     e30:	60 90 de 02 	lds	r6, 0x02DE
     e34:	70 90 df 02 	lds	r7, 0x02DF
     e38:	20 91 e0 02 	lds	r18, 0x02E0
     e3c:	30 91 e1 02 	lds	r19, 0x02E1
     e40:	c3 01       	movw	r24, r6
     e42:	82 1b       	sub	r24, r18
     e44:	93 0b       	sbc	r25, r19
     e46:	9c 01       	movw	r18, r24
     e48:	80 91 f4 02 	lds	r24, 0x02F4
     e4c:	90 91 f5 02 	lds	r25, 0x02F5
     e50:	28 9f       	mul	r18, r24
     e52:	b0 01       	movw	r22, r0
     e54:	29 9f       	mul	r18, r25
     e56:	70 0d       	add	r23, r0
     e58:	38 9f       	mul	r19, r24
     e5a:	70 0d       	add	r23, r0
     e5c:	11 24       	eor	r1, r1
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__floatunsisf>
     e66:	6b 01       	movw	r12, r22
     e68:	7c 01       	movw	r14, r24
     e6a:	60 93 ec 02 	sts	0x02EC, r22
     e6e:	70 93 ed 02 	sts	0x02ED, r23
     e72:	80 93 ee 02 	sts	0x02EE, r24
     e76:	90 93 ef 02 	sts	0x02EF, r25
     e7a:	70 92 e1 02 	sts	0x02E1, r7
     e7e:	60 92 e0 02 	sts	0x02E0, r6
     e82:	c5 01       	movw	r24, r10
     e84:	b4 01       	movw	r22, r8
     e86:	20 91 e4 02 	lds	r18, 0x02E4
     e8a:	30 91 e5 02 	lds	r19, 0x02E5
     e8e:	40 91 e6 02 	lds	r20, 0x02E6
     e92:	50 91 e7 02 	lds	r21, 0x02E7
     e96:	0e 94 98 22 	call	0x4530	; 0x4530 <__addsf3>
     e9a:	a7 01       	movw	r20, r14
     e9c:	96 01       	movw	r18, r12
     e9e:	0e 94 67 22 	call	0x44ce	; 0x44ce <__subsf3>
     ea2:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <__fixunssfsi>
     ea6:	6b 01       	movw	r12, r22
     ea8:	63 58       	subi	r22, 0x83	; 131
     eaa:	7f 4f       	sbci	r23, 0xFF	; 255
     eac:	62 33       	cpi	r22, 0x32	; 50
     eae:	71 05       	cpc	r23, r1
     eb0:	10 f4       	brcc	.+4      	; 0xeb6 <_Z10goStraightj+0x226>
     eb2:	62 e3       	ldi	r22, 0x32	; 50
     eb4:	05 c0       	rjmp	.+10     	; 0xec0 <_Z10goStraightj+0x230>
     eb6:	69 3c       	cpi	r22, 0xC9	; 201
     eb8:	71 05       	cpc	r23, r1
     eba:	10 f0       	brcs	.+4      	; 0xec0 <_Z10goStraightj+0x230>
     ebc:	68 ec       	ldi	r22, 0xC8	; 200
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	85 e0       	ldi	r24, 0x05	; 5
     ec2:	93 e0       	ldi	r25, 0x03	; 3
     ec4:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN10AF_DCMotor8setSpeedEh>
     ec8:	b2 01       	movw	r22, r4
     eca:	6c 19       	sub	r22, r12
     ecc:	7d 09       	sbc	r23, r13
     ece:	62 33       	cpi	r22, 0x32	; 50
     ed0:	71 05       	cpc	r23, r1
     ed2:	10 f4       	brcc	.+4      	; 0xed8 <_Z10goStraightj+0x248>
     ed4:	62 e3       	ldi	r22, 0x32	; 50
     ed6:	05 c0       	rjmp	.+10     	; 0xee2 <_Z10goStraightj+0x252>
     ed8:	69 3c       	cpi	r22, 0xC9	; 201
     eda:	71 05       	cpc	r23, r1
     edc:	10 f0       	brcs	.+4      	; 0xee2 <_Z10goStraightj+0x252>
     ede:	68 ec       	ldi	r22, 0xC8	; 200
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	2a 96       	adiw	r28, 0x0a	; 10
     ee4:	83 e0       	ldi	r24, 0x03	; 3
     ee6:	93 e0       	ldi	r25, 0x03	; 3
     ee8:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN10AF_DCMotor8setSpeedEh>
     eec:	01 50       	subi	r16, 0x01	; 1
     eee:	10 40       	sbci	r17, 0x00	; 0
     ef0:	01 15       	cp	r16, r1
     ef2:	11 05       	cpc	r17, r1
     ef4:	09 f0       	breq	.+2      	; 0xef8 <_Z10goStraightj+0x268>
     ef6:	10 cf       	rjmp	.-480    	; 0xd18 <_Z10goStraightj+0x88>
     ef8:	83 e0       	ldi	r24, 0x03	; 3
     efa:	93 e0       	ldi	r25, 0x03	; 3
     efc:	64 e0       	ldi	r22, 0x04	; 4
     efe:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN10AF_DCMotor3runEh>
     f02:	85 e0       	ldi	r24, 0x05	; 5
     f04:	93 e0       	ldi	r25, 0x03	; 3
     f06:	64 e0       	ldi	r22, 0x04	; 4
     f08:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN10AF_DCMotor3runEh>
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	93 e0       	ldi	r25, 0x03	; 3
     f10:	6d e7       	ldi	r22, 0x7D	; 125
     f12:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN10AF_DCMotor8setSpeedEh>
     f16:	85 e0       	ldi	r24, 0x05	; 5
     f18:	93 e0       	ldi	r25, 0x03	; 3
     f1a:	6d e7       	ldi	r22, 0x7D	; 125
     f1c:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN10AF_DCMotor8setSpeedEh>
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	ff 90       	pop	r15
     f2a:	ef 90       	pop	r14
     f2c:	df 90       	pop	r13
     f2e:	cf 90       	pop	r12
     f30:	bf 90       	pop	r11
     f32:	af 90       	pop	r10
     f34:	9f 90       	pop	r9
     f36:	8f 90       	pop	r8
     f38:	7f 90       	pop	r7
     f3a:	6f 90       	pop	r6
     f3c:	5f 90       	pop	r5
     f3e:	4f 90       	pop	r4
     f40:	08 95       	ret

00000f42 <_ZN15CmissionconsoleC2Ev>:
     f42:	08 95       	ret

00000f44 <_ZN15CmissionconsoleC1Ev>:
     f44:	08 95       	ret

00000f46 <_ZN15CmissionconsoleD2Ev>:
     f46:	08 95       	ret

00000f48 <_ZN15CmissionconsoleD1Ev>:
     f48:	08 95       	ret

00000f4a <_ZN15Cmissionconsole6enableEv>:
     f4a:	08 95       	ret

00000f4c <_ZN15Cmissionconsole7disableEv>:
     f4c:	08 95       	ret

00000f4e <_ZN15Cmissionconsole5writeEh>:
     f4e:	08 95       	ret

00000f50 <_ZN15Cmissionconsole5writeEPc>:
     f50:	86 ec       	ldi	r24, 0xC6	; 198
     f52:	96 e0       	ldi	r25, 0x06	; 6
     f54:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print7printlnEPKc>
     f58:	08 95       	ret

00000f5a <_ZN15Cmissionconsole13mediumRangeIREj>:
     f5a:	ef 92       	push	r14
     f5c:	ff 92       	push	r15
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	8b 01       	movw	r16, r22
     f68:	80 e4       	ldi	r24, 0x40	; 64
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	61 e0       	ldi	r22, 0x01	; 1
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <calloc>
     f74:	e8 2e       	mov	r14, r24
     f76:	e7 01       	movw	r28, r14
     f78:	7e 01       	movw	r14, r28
     f7a:	f9 2e       	mov	r15, r25
     f7c:	e1 14       	cp	r14, r1
     f7e:	f1 04       	cpc	r15, r1
     f80:	29 f1       	breq	.+74     	; 0xfcc <_ZN15Cmissionconsole13mediumRangeIREj+0x72>
     f82:	00 d0       	rcall	.+0      	; 0xf84 <_ZN15Cmissionconsole13mediumRangeIREj+0x2a>
     f84:	00 d0       	rcall	.+0      	; 0xf86 <_ZN15Cmissionconsole13mediumRangeIREj+0x2c>
     f86:	00 d0       	rcall	.+0      	; 0xf88 <_ZN15Cmissionconsole13mediumRangeIREj+0x2e>
     f88:	ed b7       	in	r30, 0x3d	; 61
     f8a:	fe b7       	in	r31, 0x3e	; 62
     f8c:	31 96       	adiw	r30, 0x01	; 1
     f8e:	ad b7       	in	r26, 0x3d	; 61
     f90:	be b7       	in	r27, 0x3e	; 62
     f92:	12 96       	adiw	r26, 0x02	; 2
     f94:	fc 92       	st	X, r15
     f96:	ee 92       	st	-X, r14
     f98:	11 97       	sbiw	r26, 0x01	; 1
     f9a:	8a e5       	ldi	r24, 0x5A	; 90
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	93 83       	std	Z+3, r25	; 0x03
     fa0:	82 83       	std	Z+2, r24	; 0x02
     fa2:	15 83       	std	Z+5, r17	; 0x05
     fa4:	04 83       	std	Z+4, r16	; 0x04
     fa6:	0e 94 e7 2d 	call	0x5bce	; 0x5bce <sprintf>
     faa:	2d b7       	in	r18, 0x3d	; 61
     fac:	3e b7       	in	r19, 0x3e	; 62
     fae:	2a 5f       	subi	r18, 0xFA	; 250
     fb0:	3f 4f       	sbci	r19, 0xFF	; 255
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	3e bf       	out	0x3e, r19	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	2d bf       	out	0x3d, r18	; 61
     fbc:	86 ec       	ldi	r24, 0xC6	; 198
     fbe:	96 e0       	ldi	r25, 0x06	; 6
     fc0:	b7 01       	movw	r22, r14
     fc2:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print7printlnEPKc>
     fc6:	c7 01       	movw	r24, r14
     fc8:	0e 94 39 2b 	call	0x5672	; 0x5672 <free>
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	1f 91       	pop	r17
     fd2:	0f 91       	pop	r16
     fd4:	ff 90       	pop	r15
     fd6:	ef 90       	pop	r14
     fd8:	08 95       	ret

00000fda <_ZN15Cmissionconsole11longRangeIREj>:
     fda:	ef 92       	push	r14
     fdc:	ff 92       	push	r15
     fde:	0f 93       	push	r16
     fe0:	1f 93       	push	r17
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	8b 01       	movw	r16, r22
     fe8:	80 e4       	ldi	r24, 0x40	; 64
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	61 e0       	ldi	r22, 0x01	; 1
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <calloc>
     ff4:	e8 2e       	mov	r14, r24
     ff6:	e7 01       	movw	r28, r14
     ff8:	7e 01       	movw	r14, r28
     ffa:	f9 2e       	mov	r15, r25
     ffc:	e1 14       	cp	r14, r1
     ffe:	f1 04       	cpc	r15, r1
    1000:	29 f1       	breq	.+74     	; 0x104c <_ZN15Cmissionconsole11longRangeIREj+0x72>
    1002:	00 d0       	rcall	.+0      	; 0x1004 <_ZN15Cmissionconsole11longRangeIREj+0x2a>
    1004:	00 d0       	rcall	.+0      	; 0x1006 <_ZN15Cmissionconsole11longRangeIREj+0x2c>
    1006:	00 d0       	rcall	.+0      	; 0x1008 <_ZN15Cmissionconsole11longRangeIREj+0x2e>
    1008:	ed b7       	in	r30, 0x3d	; 61
    100a:	fe b7       	in	r31, 0x3e	; 62
    100c:	31 96       	adiw	r30, 0x01	; 1
    100e:	ad b7       	in	r26, 0x3d	; 61
    1010:	be b7       	in	r27, 0x3e	; 62
    1012:	12 96       	adiw	r26, 0x02	; 2
    1014:	fc 92       	st	X, r15
    1016:	ee 92       	st	-X, r14
    1018:	11 97       	sbiw	r26, 0x01	; 1
    101a:	8b e6       	ldi	r24, 0x6B	; 107
    101c:	91 e0       	ldi	r25, 0x01	; 1
    101e:	93 83       	std	Z+3, r25	; 0x03
    1020:	82 83       	std	Z+2, r24	; 0x02
    1022:	15 83       	std	Z+5, r17	; 0x05
    1024:	04 83       	std	Z+4, r16	; 0x04
    1026:	0e 94 e7 2d 	call	0x5bce	; 0x5bce <sprintf>
    102a:	2d b7       	in	r18, 0x3d	; 61
    102c:	3e b7       	in	r19, 0x3e	; 62
    102e:	2a 5f       	subi	r18, 0xFA	; 250
    1030:	3f 4f       	sbci	r19, 0xFF	; 255
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	3e bf       	out	0x3e, r19	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	2d bf       	out	0x3d, r18	; 61
    103c:	86 ec       	ldi	r24, 0xC6	; 198
    103e:	96 e0       	ldi	r25, 0x06	; 6
    1040:	b7 01       	movw	r22, r14
    1042:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print7printlnEPKc>
    1046:	c7 01       	movw	r24, r14
    1048:	0e 94 39 2b 	call	0x5672	; 0x5672 <free>
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	1f 91       	pop	r17
    1052:	0f 91       	pop	r16
    1054:	ff 90       	pop	r15
    1056:	ef 90       	pop	r14
    1058:	08 95       	ret

0000105a <_ZN15Cmissionconsole7adValueEj>:
    105a:	ef 92       	push	r14
    105c:	ff 92       	push	r15
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	8b 01       	movw	r16, r22
    1068:	80 e4       	ldi	r24, 0x40	; 64
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	61 e0       	ldi	r22, 0x01	; 1
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <calloc>
    1074:	e8 2e       	mov	r14, r24
    1076:	e7 01       	movw	r28, r14
    1078:	7e 01       	movw	r14, r28
    107a:	f9 2e       	mov	r15, r25
    107c:	e1 14       	cp	r14, r1
    107e:	f1 04       	cpc	r15, r1
    1080:	29 f1       	breq	.+74     	; 0x10cc <_ZN15Cmissionconsole7adValueEj+0x72>
    1082:	00 d0       	rcall	.+0      	; 0x1084 <_ZN15Cmissionconsole7adValueEj+0x2a>
    1084:	00 d0       	rcall	.+0      	; 0x1086 <_ZN15Cmissionconsole7adValueEj+0x2c>
    1086:	00 d0       	rcall	.+0      	; 0x1088 <_ZN15Cmissionconsole7adValueEj+0x2e>
    1088:	ed b7       	in	r30, 0x3d	; 61
    108a:	fe b7       	in	r31, 0x3e	; 62
    108c:	31 96       	adiw	r30, 0x01	; 1
    108e:	ad b7       	in	r26, 0x3d	; 61
    1090:	be b7       	in	r27, 0x3e	; 62
    1092:	12 96       	adiw	r26, 0x02	; 2
    1094:	fc 92       	st	X, r15
    1096:	ee 92       	st	-X, r14
    1098:	11 97       	sbiw	r26, 0x01	; 1
    109a:	8c e7       	ldi	r24, 0x7C	; 124
    109c:	91 e0       	ldi	r25, 0x01	; 1
    109e:	93 83       	std	Z+3, r25	; 0x03
    10a0:	82 83       	std	Z+2, r24	; 0x02
    10a2:	15 83       	std	Z+5, r17	; 0x05
    10a4:	04 83       	std	Z+4, r16	; 0x04
    10a6:	0e 94 e7 2d 	call	0x5bce	; 0x5bce <sprintf>
    10aa:	2d b7       	in	r18, 0x3d	; 61
    10ac:	3e b7       	in	r19, 0x3e	; 62
    10ae:	2a 5f       	subi	r18, 0xFA	; 250
    10b0:	3f 4f       	sbci	r19, 0xFF	; 255
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	3e bf       	out	0x3e, r19	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	2d bf       	out	0x3d, r18	; 61
    10bc:	86 ec       	ldi	r24, 0xC6	; 198
    10be:	96 e0       	ldi	r25, 0x06	; 6
    10c0:	b7 01       	movw	r22, r14
    10c2:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print7printlnEPKc>
    10c6:	c7 01       	movw	r24, r14
    10c8:	0e 94 39 2b 	call	0x5672	; 0x5672 <free>
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	ef 90       	pop	r14
    10d8:	08 95       	ret

000010da <_ZN17AFMotorControllerC2Ev>:
#elif (MICROSTEPS == 16)
uint8_t microstepcurve[] = {0, 25, 50, 74, 98, 120, 141, 162, 180, 197, 212, 225, 236, 244, 250, 253, 255};
#endif

AFMotorController::AFMotorController(void) {
}
    10da:	08 95       	ret

000010dc <_ZN17AFMotorControllerC1Ev>:
    10dc:	08 95       	ret

000010de <_ZN10AF_DCMotor8setSpeedEh>:
    break;
  }
}

void AF_DCMotor::setSpeed(uint8_t speed) {
  switch (motornum) {
    10de:	fc 01       	movw	r30, r24
    10e0:	80 81       	ld	r24, Z
    10e2:	82 30       	cpi	r24, 0x02	; 2
    10e4:	71 f0       	breq	.+28     	; 0x1102 <_ZN10AF_DCMotor8setSpeedEh+0x24>
    10e6:	83 30       	cpi	r24, 0x03	; 3
    10e8:	28 f0       	brcs	.+10     	; 0x10f4 <_ZN10AF_DCMotor8setSpeedEh+0x16>
    10ea:	83 30       	cpi	r24, 0x03	; 3
    10ec:	69 f0       	breq	.+26     	; 0x1108 <_ZN10AF_DCMotor8setSpeedEh+0x2a>
    10ee:	84 30       	cpi	r24, 0x04	; 4
    10f0:	31 f0       	breq	.+12     	; 0x10fe <_ZN10AF_DCMotor8setSpeedEh+0x20>
    10f2:	08 95       	ret
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	e9 f7       	brne	.-6      	; 0x10f2 <_ZN10AF_DCMotor8setSpeedEh+0x14>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    10f8:	60 93 b3 00 	sts	0x00B3, r22
}

void AF_DCMotor::setSpeed(uint8_t speed) {
  switch (motornum) {
  case 1:
    setPWM1(speed); break;
    10fc:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    10fe:	68 bd       	out	0x28, r22	; 40
    1100:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    1102:	60 93 b4 00 	sts	0x00B4, r22
void AF_DCMotor::setSpeed(uint8_t speed) {
  switch (motornum) {
  case 1:
    setPWM1(speed); break;
  case 2:
    setPWM2(speed); break;
    1106:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    1108:	67 bd       	out	0x27, r22	; 39
  case 1:
    setPWM1(speed); break;
  case 2:
    setPWM2(speed); break;
  case 3:
    setPWM3(speed); break;
    110a:	08 95       	ret

0000110c <_ZN10AF_Stepper8setSpeedEj>:
    setPWM3(255);
    setPWM4(255);
  }
}

void AF_Stepper::setSpeed(uint16_t rpm) {
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	ec 01       	movw	r28, r24
  uint32_t tmp = 0;
  tmp = revsteps * rpm;
  usperstep = 60000000 / tmp;
    1112:	88 81       	ld	r24, Y
    1114:	99 81       	ldd	r25, Y+1	; 0x01
    1116:	68 9f       	mul	r22, r24
    1118:	90 01       	movw	r18, r0
    111a:	69 9f       	mul	r22, r25
    111c:	30 0d       	add	r19, r0
    111e:	78 9f       	mul	r23, r24
    1120:	30 0d       	add	r19, r0
    1122:	11 24       	eor	r1, r1
    1124:	40 e0       	ldi	r20, 0x00	; 0
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	77 e8       	ldi	r23, 0x87	; 135
    112c:	83 e9       	ldi	r24, 0x93	; 147
    112e:	93 e0       	ldi	r25, 0x03	; 3
    1130:	0e 94 0f 28 	call	0x501e	; 0x501e <__udivmodsi4>
    1134:	2b 83       	std	Y+3, r18	; 0x03
    1136:	3c 83       	std	Y+4, r19	; 0x04
    1138:	4d 83       	std	Y+5, r20	; 0x05
    113a:	5e 83       	std	Y+6, r21	; 0x06
  // wont compile with -O2 or -O3 - see bug http://gcc.gnu.org/bugzilla/show_bug.cgi?id=44245#c5
  //usperstep = 60000000 / ((uint32_t)revsteps * (uint32_t)rpm);
  steppingcounter = 0;
    113c:	1f 82       	std	Y+7, r1	; 0x07
    113e:	18 86       	std	Y+8, r1	; 0x08
    1140:	19 86       	std	Y+9, r1	; 0x09
    1142:	1a 86       	std	Y+10, r1	; 0x0a
}
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	08 95       	ret

0000114a <_GLOBAL__I_microstepcurve>:
  }

 
  MC.latch_tx();
  return currentstep;
}
    114a:	08 95       	ret

0000114c <_ZN17AFMotorController8latch_txEv>:
  //ENABLE_PORT &= ~_BV(ENABLE); // enable the chip outputs!
  digitalWrite(MOTORENABLE, LOW);
}


void AFMotorController::latch_tx(void) {
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
  uint8_t i;

  //LATCH_PORT &= ~_BV(LATCH);
  digitalWrite(MOTORLATCH, LOW);
    1150:	8c e0       	ldi	r24, 0x0C	; 12
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>

  //SER_PORT &= ~_BV(SER);
  digitalWrite(MOTORDATA, LOW);
    1158:	88 e0       	ldi	r24, 0x08	; 8
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
    1160:	c7 e0       	ldi	r28, 0x07	; 7
    1162:	d0 e0       	ldi	r29, 0x00	; 0
    1164:	0d c0       	rjmp	.+26     	; 0x1180 <_ZN17AFMotorController8latch_txEv+0x34>
    //CLK_PORT &= ~_BV(CLK);
    digitalWrite(MOTORCLK, LOW);

    if (latch_state & _BV(7-i)) {
      //SER_PORT |= _BV(SER);
      digitalWrite(MOTORDATA, HIGH);
    1166:	88 e0       	ldi	r24, 0x08	; 8
    1168:	61 e0       	ldi	r22, 0x01	; 1
    116a:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
    } else {
      //SER_PORT &= ~_BV(SER);
      digitalWrite(MOTORDATA, LOW);
    }
    //CLK_PORT |= _BV(CLK);
    digitalWrite(MOTORCLK, HIGH);
    116e:	84 e0       	ldi	r24, 0x04	; 4
    1170:	61 e0       	ldi	r22, 0x01	; 1
    1172:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
    1176:	21 97       	sbiw	r28, 0x01	; 1
  digitalWrite(MOTORLATCH, LOW);

  //SER_PORT &= ~_BV(SER);
  digitalWrite(MOTORDATA, LOW);

  for (i=0; i<8; i++) {
    1178:	3f ef       	ldi	r19, 0xFF	; 255
    117a:	cf 3f       	cpi	r28, 0xFF	; 255
    117c:	d3 07       	cpc	r29, r19
    117e:	a1 f0       	breq	.+40     	; 0x11a8 <_ZN17AFMotorController8latch_txEv+0x5c>
    //CLK_PORT &= ~_BV(CLK);
    digitalWrite(MOTORCLK, LOW);
    1180:	84 e0       	ldi	r24, 0x04	; 4
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>

    if (latch_state & _BV(7-i)) {
    1188:	80 91 41 06 	lds	r24, 0x0641
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0c 2e       	mov	r0, r28
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <_ZN17AFMotorController8latch_txEv+0x4a>
    1192:	95 95       	asr	r25
    1194:	87 95       	ror	r24
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <_ZN17AFMotorController8latch_txEv+0x46>
    119a:	80 fd       	sbrc	r24, 0
    119c:	e4 cf       	rjmp	.-56     	; 0x1166 <_ZN17AFMotorController8latch_txEv+0x1a>
      //SER_PORT |= _BV(SER);
      digitalWrite(MOTORDATA, HIGH);
    } else {
      //SER_PORT &= ~_BV(SER);
      digitalWrite(MOTORDATA, LOW);
    119e:	88 e0       	ldi	r24, 0x08	; 8
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
    11a6:	e3 cf       	rjmp	.-58     	; 0x116e <_ZN17AFMotorController8latch_txEv+0x22>
    }
    //CLK_PORT |= _BV(CLK);
    digitalWrite(MOTORCLK, HIGH);
  }
  //LATCH_PORT |= _BV(LATCH);
  digitalWrite(MOTORLATCH, HIGH);
    11a8:	8c e0       	ldi	r24, 0x0C	; 12
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
}
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	08 95       	ret

000011b6 <_ZN10AF_Stepper7onestepEhh>:
      } 
    }
  }
}

uint8_t AF_Stepper::onestep(uint8_t dir, uint8_t style) {
    11b6:	df 92       	push	r13
    11b8:	ef 92       	push	r14
    11ba:	ff 92       	push	r15
    11bc:	0f 93       	push	r16
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	ec 01       	movw	r28, r24
  uint8_t a, b, c, d;
  uint8_t ocrb, ocra;

  ocra = ocrb = 255;

  if (steppernum == 1) {
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	09 f4       	brne	.+2      	; 0x11ce <_ZN10AF_Stepper7onestepEhh+0x18>
    11cc:	71 c0       	rjmp	.+226    	; 0x12b0 <_ZN10AF_Stepper7onestepEhh+0xfa>
    a = _BV(MOTOR1_A);
    b = _BV(MOTOR2_A);
    c = _BV(MOTOR1_B);
    d = _BV(MOTOR2_B);
  } else if (steppernum == 2) {
    11ce:	82 30       	cpi	r24, 0x02	; 2
    11d0:	49 f0       	breq	.+18     	; 0x11e4 <_ZN10AF_Stepper7onestepEhh+0x2e>
    11d2:	80 e0       	ldi	r24, 0x00	; 0
  }

 
  MC.latch_tx();
  return currentstep;
}
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	1f 91       	pop	r17
    11da:	0f 91       	pop	r16
    11dc:	ff 90       	pop	r15
    11de:	ef 90       	pop	r14
    11e0:	df 90       	pop	r13
    11e2:	08 95       	ret
  if (steppernum == 1) {
    a = _BV(MOTOR1_A);
    b = _BV(MOTOR2_A);
    c = _BV(MOTOR1_B);
    d = _BV(MOTOR2_B);
  } else if (steppernum == 2) {
    11e4:	2e e1       	ldi	r18, 0x1E	; 30
    11e6:	91 e2       	ldi	r25, 0x21	; 33
    11e8:	d9 2e       	mov	r13, r25
    11ea:	30 e4       	ldi	r19, 0x40	; 64
    11ec:	50 e8       	ldi	r21, 0x80	; 128
    11ee:	e1 e0       	ldi	r30, 0x01	; 1
    11f0:	f0 e2       	ldi	r31, 0x20	; 32
  } else {
    return 0;
  }

  // next determine what sort of stepping procedure we're up to
  if (style == SINGLE) {
    11f2:	41 30       	cpi	r20, 0x01	; 1
    11f4:	01 f1       	breq	.+64     	; 0x1236 <_ZN10AF_Stepper7onestepEhh+0x80>
      }
      else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == DOUBLE) {
    11f6:	42 30       	cpi	r20, 0x02	; 2
    11f8:	09 f4       	brne	.+2      	; 0x11fc <_ZN10AF_Stepper7onestepEhh+0x46>
    11fa:	95 c0       	rjmp	.+298    	; 0x1326 <_ZN10AF_Stepper7onestepEhh+0x170>
	currentstep += MICROSTEPS;
      } else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == INTERLEAVE) {
    11fc:	43 30       	cpi	r20, 0x03	; 3
    11fe:	09 f4       	brne	.+2      	; 0x1202 <_ZN10AF_Stepper7onestepEhh+0x4c>
    1200:	a2 c0       	rjmp	.+324    	; 0x1346 <_ZN10AF_Stepper7onestepEhh+0x190>
    1202:	9b 85       	ldd	r25, Y+11	; 0x0b
    } else {
       currentstep -= MICROSTEPS/2;
    }
  } 

  if (style == MICROSTEP) {
    1204:	44 30       	cpi	r20, 0x04	; 4
    1206:	21 f5       	brne	.+72     	; 0x1250 <_ZN10AF_Stepper7onestepEhh+0x9a>
    if (dir == FORWARD) {
    1208:	61 30       	cpi	r22, 0x01	; 1
    120a:	09 f4       	brne	.+2      	; 0x120e <_ZN10AF_Stepper7onestepEhh+0x58>
    120c:	f3 c0       	rjmp	.+486    	; 0x13f4 <_ZN10AF_Stepper7onestepEhh+0x23e>
      currentstep++;
    } else {
      // BACKWARDS
      currentstep--;
    120e:	91 50       	subi	r25, 0x01	; 1
    1210:	9b 87       	std	Y+11, r25	; 0x0b
    }

    currentstep += MICROSTEPS*4;
    currentstep %= MICROSTEPS*4;
    1212:	9f 73       	andi	r25, 0x3F	; 63
    1214:	9b 87       	std	Y+11, r25	; 0x0b

    ocra = ocrb = 0;
    if ( (currentstep >= 0) && (currentstep < MICROSTEPS)) {
    1216:	90 31       	cpi	r25, 0x10	; 16
    1218:	08 f0       	brcs	.+2      	; 0x121c <_ZN10AF_Stepper7onestepEhh+0x66>
    121a:	99 c0       	rjmp	.+306    	; 0x134e <_ZN10AF_Stepper7onestepEhh+0x198>
      ocra = microstepcurve[MICROSTEPS - currentstep];
    121c:	09 2f       	mov	r16, r25
    121e:	10 e0       	ldi	r17, 0x00	; 0
    1220:	68 e9       	ldi	r22, 0x98	; 152
    1222:	71 e0       	ldi	r23, 0x01	; 1
    1224:	60 1b       	sub	r22, r16
    1226:	71 0b       	sbc	r23, r17
    1228:	db 01       	movw	r26, r22
    122a:	7c 91       	ld	r23, X
      ocrb = microstepcurve[currentstep];
    122c:	08 57       	subi	r16, 0x78	; 120
    122e:	1e 4f       	sbci	r17, 0xFE	; 254
    1230:	d8 01       	movw	r26, r16
    1232:	6c 91       	ld	r22, X
    1234:	0f c0       	rjmp	.+30     	; 0x1254 <_ZN10AF_Stepper7onestepEhh+0x9e>
    return 0;
  }

  // next determine what sort of stepping procedure we're up to
  if (style == SINGLE) {
    if ((currentstep/(MICROSTEPS/2)) % 2) { // we're at an odd step, weird
    1236:	9b 85       	ldd	r25, Y+11	; 0x0b
    1238:	79 2f       	mov	r23, r25
    123a:	76 95       	lsr	r23
    123c:	76 95       	lsr	r23
    123e:	76 95       	lsr	r23
    1240:	70 ff       	sbrs	r23, 0
    1242:	9b c0       	rjmp	.+310    	; 0x137a <_ZN10AF_Stepper7onestepEhh+0x1c4>
      if (dir == FORWARD) {
    1244:	61 30       	cpi	r22, 0x01	; 1
    1246:	09 f4       	brne	.+2      	; 0x124a <_ZN10AF_Stepper7onestepEhh+0x94>
    1248:	dc c0       	rjmp	.+440    	; 0x1402 <_ZN10AF_Stepper7onestepEhh+0x24c>
	currentstep += MICROSTEPS/2;
      }
      else {
	currentstep -= MICROSTEPS/2;
    124a:	98 50       	subi	r25, 0x08	; 8
    124c:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
    124e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1250:	7f ef       	ldi	r23, 0xFF	; 255
    1252:	6f ef       	ldi	r22, 0xFF	; 255
      ocrb = microstepcurve[MICROSTEPS*4 - currentstep];
    }
  }

  currentstep += MICROSTEPS*4;
  currentstep %= MICROSTEPS*4;
    1254:	9f 73       	andi	r25, 0x3F	; 63
    1256:	9b 87       	std	Y+11, r25	; 0x0b
  Serial.print("current step: "); Serial.println(currentstep, DEC);
  Serial.print(" pwmA = "); Serial.print(ocra, DEC); 
  Serial.print(" pwmB = "); Serial.println(ocrb, DEC); 
#endif

  if (steppernum == 1) {
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	09 f4       	brne	.+2      	; 0x125e <_ZN10AF_Stepper7onestepEhh+0xa8>
    125c:	5f c0       	rjmp	.+190    	; 0x131c <_ZN10AF_Stepper7onestepEhh+0x166>
    setPWM1(ocra);
    setPWM2(ocrb);
  } else if (steppernum == 2) {
    125e:	82 30       	cpi	r24, 0x02	; 2
    1260:	09 f4       	brne	.+2      	; 0x1264 <_ZN10AF_Stepper7onestepEhh+0xae>
    1262:	6e c0       	rjmp	.+220    	; 0x1340 <_ZN10AF_Stepper7onestepEhh+0x18a>
    setPWM4(ocrb);
  }


  // release all
  latch_state &= ~a & ~b & ~c & ~d; // all motor pins to 0
    1264:	80 91 41 06 	lds	r24, 0x0641
    1268:	82 23       	and	r24, r18
    126a:	80 93 41 06 	sts	0x0641, r24

  //Serial.println(step, DEC);
  if (style == MICROSTEP) {
    126e:	44 30       	cpi	r20, 0x04	; 4
    1270:	91 f1       	breq	.+100    	; 0x12d6 <_ZN10AF_Stepper7onestepEhh+0x120>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
    1272:	96 95       	lsr	r25
    1274:	96 95       	lsr	r25
    1276:	96 95       	lsr	r25
    1278:	94 30       	cpi	r25, 0x04	; 4
    127a:	09 f4       	brne	.+2      	; 0x127e <_ZN10AF_Stepper7onestepEhh+0xc8>
    127c:	af c0       	rjmp	.+350    	; 0x13dc <_ZN10AF_Stepper7onestepEhh+0x226>
    127e:	95 30       	cpi	r25, 0x05	; 5
    1280:	f8 f0       	brcs	.+62     	; 0x12c0 <_ZN10AF_Stepper7onestepEhh+0x10a>
    1282:	96 30       	cpi	r25, 0x06	; 6
    1284:	09 f4       	brne	.+2      	; 0x1288 <_ZN10AF_Stepper7onestepEhh+0xd2>
    1286:	ae c0       	rjmp	.+348    	; 0x13e4 <_ZN10AF_Stepper7onestepEhh+0x22e>
    1288:	96 30       	cpi	r25, 0x06	; 6
    128a:	08 f0       	brcs	.+2      	; 0x128e <_ZN10AF_Stepper7onestepEhh+0xd8>
    128c:	87 c0       	rjmp	.+270    	; 0x139c <_ZN10AF_Stepper7onestepEhh+0x1e6>
      break;
    case 4:
      latch_state |= c; // energize coil 3 only
      break; 
    case 5:
      latch_state |= c | d; // energize coil 3+4
    128e:	35 2b       	or	r19, r21
    1290:	38 2b       	or	r19, r24
    1292:	30 93 41 06 	sts	0x0641, r19
      break;
    }
  }

 
  MC.latch_tx();
    1296:	80 e4       	ldi	r24, 0x40	; 64
    1298:	96 e0       	ldi	r25, 0x06	; 6
    129a:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN17AFMotorController8latch_txEv>
  return currentstep;
    129e:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	ff 90       	pop	r15
    12aa:	ef 90       	pop	r14
    12ac:	df 90       	pop	r13
    12ae:	08 95       	ret
  uint8_t a, b, c, d;
  uint8_t ocrb, ocra;

  ocra = ocrb = 255;

  if (steppernum == 1) {
    12b0:	21 ee       	ldi	r18, 0xE1	; 225
    12b2:	36 e0       	ldi	r19, 0x06	; 6
    12b4:	d3 2e       	mov	r13, r19
    12b6:	30 e1       	ldi	r19, 0x10	; 16
    12b8:	58 e0       	ldi	r21, 0x08	; 8
    12ba:	e2 e0       	ldi	r30, 0x02	; 2
    12bc:	f4 e0       	ldi	r31, 0x04	; 4
    12be:	99 cf       	rjmp	.-206    	; 0x11f2 <_ZN10AF_Stepper7onestepEhh+0x3c>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
    12c0:	92 30       	cpi	r25, 0x02	; 2
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <_ZN10AF_Stepper7onestepEhh+0x110>
    12c4:	93 c0       	rjmp	.+294    	; 0x13ec <_ZN10AF_Stepper7onestepEhh+0x236>
    12c6:	93 30       	cpi	r25, 0x03	; 3
    12c8:	08 f4       	brcc	.+2      	; 0x12cc <_ZN10AF_Stepper7onestepEhh+0x116>
    12ca:	62 c0       	rjmp	.+196    	; 0x1390 <_ZN10AF_Stepper7onestepEhh+0x1da>
      break;
    case 2:
      latch_state |= b; // energize coil 2 only
      break;
    case 3:
      latch_state |= b | c; // energize coil 2+3
    12cc:	5e 2b       	or	r21, r30
    12ce:	58 2b       	or	r21, r24
    12d0:	50 93 41 06 	sts	0x0641, r21
      break;
    12d4:	e0 cf       	rjmp	.-64     	; 0x1296 <_ZN10AF_Stepper7onestepEhh+0xe0>
  // release all
  latch_state &= ~a & ~b & ~c & ~d; // all motor pins to 0

  //Serial.println(step, DEC);
  if (style == MICROSTEP) {
    if ((currentstep >= 0) && (currentstep < MICROSTEPS))
    12d6:	90 31       	cpi	r25, 0x10	; 16
    12d8:	18 f4       	brcc	.+6      	; 0x12e0 <_ZN10AF_Stepper7onestepEhh+0x12a>
      latch_state |= a | b;
    12da:	8d 29       	or	r24, r13
    12dc:	80 93 41 06 	sts	0x0641, r24
    if ((currentstep >= MICROSTEPS) && (currentstep < MICROSTEPS*2))
    12e0:	89 2f       	mov	r24, r25
    12e2:	80 51       	subi	r24, 0x10	; 16
    12e4:	80 31       	cpi	r24, 0x10	; 16
    12e6:	30 f4       	brcc	.+12     	; 0x12f4 <_ZN10AF_Stepper7onestepEhh+0x13e>
      latch_state |= b | c;
    12e8:	e5 2b       	or	r30, r21
    12ea:	20 91 41 06 	lds	r18, 0x0641
    12ee:	2e 2b       	or	r18, r30
    12f0:	20 93 41 06 	sts	0x0641, r18
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
    12f4:	89 2f       	mov	r24, r25
    12f6:	80 52       	subi	r24, 0x20	; 32
    12f8:	80 31       	cpi	r24, 0x10	; 16
    12fa:	30 f4       	brcc	.+12     	; 0x1308 <_ZN10AF_Stepper7onestepEhh+0x152>
      latch_state |= c | d;
    12fc:	53 2b       	or	r21, r19
    12fe:	20 91 41 06 	lds	r18, 0x0641
    1302:	25 2b       	or	r18, r21
    1304:	20 93 41 06 	sts	0x0641, r18
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
    1308:	90 53       	subi	r25, 0x30	; 48
    130a:	90 31       	cpi	r25, 0x10	; 16
    130c:	20 f6       	brcc	.-120    	; 0x1296 <_ZN10AF_Stepper7onestepEhh+0xe0>
      latch_state |= d | a;
    130e:	3f 2b       	or	r19, r31
    1310:	90 91 41 06 	lds	r25, 0x0641
    1314:	93 2b       	or	r25, r19
    1316:	90 93 41 06 	sts	0x0641, r25
    131a:	bd cf       	rjmp	.-134    	; 0x1296 <_ZN10AF_Stepper7onestepEhh+0xe0>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    131c:	70 93 b3 00 	sts	0x00B3, r23
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    1320:	60 93 b4 00 	sts	0x00B4, r22
    1324:	9f cf       	rjmp	.-194    	; 0x1264 <_ZN10AF_Stepper7onestepEhh+0xae>
      else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == DOUBLE) {
    if (! (currentstep/(MICROSTEPS/2) % 2)) { // we're at an even step, weird
    1326:	9b 85       	ldd	r25, Y+11	; 0x0b
    1328:	79 2f       	mov	r23, r25
    132a:	76 95       	lsr	r23
    132c:	76 95       	lsr	r23
    132e:	76 95       	lsr	r23
    1330:	70 fd       	sbrc	r23, 0
    1332:	29 c0       	rjmp	.+82     	; 0x1386 <_ZN10AF_Stepper7onestepEhh+0x1d0>
      if (dir == FORWARD) {
    1334:	61 30       	cpi	r22, 0x01	; 1
    1336:	09 f4       	brne	.+2      	; 0x133a <_ZN10AF_Stepper7onestepEhh+0x184>
    1338:	47 c0       	rjmp	.+142    	; 0x13c8 <_ZN10AF_Stepper7onestepEhh+0x212>
    }
  } else if (style == INTERLEAVE) {
    if (dir == FORWARD) {
       currentstep += MICROSTEPS/2;
    } else {
       currentstep -= MICROSTEPS/2;
    133a:	98 50       	subi	r25, 0x08	; 8
    133c:	9b 87       	std	Y+11, r25	; 0x0b
    133e:	88 cf       	rjmp	.-240    	; 0x1250 <_ZN10AF_Stepper7onestepEhh+0x9a>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    1340:	77 bd       	out	0x27, r23	; 39
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    1342:	68 bd       	out	0x28, r22	; 40
    1344:	8f cf       	rjmp	.-226    	; 0x1264 <_ZN10AF_Stepper7onestepEhh+0xae>
      } else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == INTERLEAVE) {
    if (dir == FORWARD) {
    1346:	61 30       	cpi	r22, 0x01	; 1
    1348:	f1 f1       	breq	.+124    	; 0x13c6 <_ZN10AF_Stepper7onestepEhh+0x210>
       currentstep += MICROSTEPS/2;
    } else {
       currentstep -= MICROSTEPS/2;
    134a:	9b 85       	ldd	r25, Y+11	; 0x0b
    134c:	f6 cf       	rjmp	.-20     	; 0x133a <_ZN10AF_Stepper7onestepEhh+0x184>

    ocra = ocrb = 0;
    if ( (currentstep >= 0) && (currentstep < MICROSTEPS)) {
      ocra = microstepcurve[MICROSTEPS - currentstep];
      ocrb = microstepcurve[currentstep];
    } else if  ( (currentstep >= MICROSTEPS) && (currentstep < MICROSTEPS*2)) {
    134e:	69 2f       	mov	r22, r25
    1350:	60 51       	subi	r22, 0x10	; 16
    1352:	60 31       	cpi	r22, 0x10	; 16
    1354:	50 f1       	brcs	.+84     	; 0x13aa <_ZN10AF_Stepper7onestepEhh+0x1f4>
      ocra = microstepcurve[currentstep - MICROSTEPS];
      ocrb = microstepcurve[MICROSTEPS*2 - currentstep];
    } else if  ( (currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3)) {
    1356:	69 2f       	mov	r22, r25
    1358:	60 52       	subi	r22, 0x20	; 32
    135a:	60 31       	cpi	r22, 0x10	; 16
    135c:	08 f0       	brcs	.+2      	; 0x1360 <_ZN10AF_Stepper7onestepEhh+0x1aa>
    135e:	55 c0       	rjmp	.+170    	; 0x140a <_ZN10AF_Stepper7onestepEhh+0x254>
      ocra = microstepcurve[MICROSTEPS*3 - currentstep];
    1360:	09 2f       	mov	r16, r25
    1362:	10 e0       	ldi	r17, 0x00	; 0
    1364:	68 eb       	ldi	r22, 0xB8	; 184
    1366:	71 e0       	ldi	r23, 0x01	; 1
    1368:	60 1b       	sub	r22, r16
    136a:	71 0b       	sbc	r23, r17
    136c:	db 01       	movw	r26, r22
    136e:	7c 91       	ld	r23, X
      ocrb = microstepcurve[currentstep - MICROSTEPS*2];
    1370:	08 59       	subi	r16, 0x98	; 152
    1372:	1e 4f       	sbci	r17, 0xFE	; 254
    1374:	d8 01       	movw	r26, r16
    1376:	6c 91       	ld	r22, X
    1378:	6d cf       	rjmp	.-294    	; 0x1254 <_ZN10AF_Stepper7onestepEhh+0x9e>
      }
      else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next even step
      if (dir == FORWARD) {
    137a:	61 30       	cpi	r22, 0x01	; 1
    137c:	f1 f1       	breq	.+124    	; 0x13fa <_ZN10AF_Stepper7onestepEhh+0x244>
	currentstep += MICROSTEPS;
      }
      else {
	currentstep -= MICROSTEPS;
    137e:	90 51       	subi	r25, 0x10	; 16
    1380:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
    1382:	9b 85       	ldd	r25, Y+11	; 0x0b
    1384:	65 cf       	rjmp	.-310    	; 0x1250 <_ZN10AF_Stepper7onestepEhh+0x9a>
	currentstep += MICROSTEPS/2;
      } else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next odd step
      if (dir == FORWARD) {
    1386:	61 30       	cpi	r22, 0x01	; 1
    1388:	11 f1       	breq	.+68     	; 0x13ce <_ZN10AF_Stepper7onestepEhh+0x218>
	currentstep += MICROSTEPS;
      } else {
	currentstep -= MICROSTEPS;
    138a:	90 51       	subi	r25, 0x10	; 16
    138c:	9b 87       	std	Y+11, r25	; 0x0b
    138e:	60 cf       	rjmp	.-320    	; 0x1250 <_ZN10AF_Stepper7onestepEhh+0x9a>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
    1390:	91 30       	cpi	r25, 0x01	; 1
    1392:	01 f1       	breq	.+64     	; 0x13d4 <_ZN10AF_Stepper7onestepEhh+0x21e>
    case 0:
      latch_state |= a; // energize coil 1 only
    1394:	8f 2b       	or	r24, r31
    1396:	80 93 41 06 	sts	0x0641, r24
      break;
    139a:	7d cf       	rjmp	.-262    	; 0x1296 <_ZN10AF_Stepper7onestepEhh+0xe0>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
    139c:	97 30       	cpi	r25, 0x07	; 7
    139e:	d1 f7       	brne	.-12     	; 0x1394 <_ZN10AF_Stepper7onestepEhh+0x1de>
      break;
    case 6:
      latch_state |= d; // energize coil 4 only
      break;
    case 7:
      latch_state |= d | a; // energize coil 1+4
    13a0:	3f 2b       	or	r19, r31
    13a2:	38 2b       	or	r19, r24
    13a4:	30 93 41 06 	sts	0x0641, r19
    13a8:	76 cf       	rjmp	.-276    	; 0x1296 <_ZN10AF_Stepper7onestepEhh+0xe0>
    ocra = ocrb = 0;
    if ( (currentstep >= 0) && (currentstep < MICROSTEPS)) {
      ocra = microstepcurve[MICROSTEPS - currentstep];
      ocrb = microstepcurve[currentstep];
    } else if  ( (currentstep >= MICROSTEPS) && (currentstep < MICROSTEPS*2)) {
      ocra = microstepcurve[currentstep - MICROSTEPS];
    13aa:	e9 2e       	mov	r14, r25
    13ac:	ff 24       	eor	r15, r15
    13ae:	b7 01       	movw	r22, r14
    13b0:	68 58       	subi	r22, 0x88	; 136
    13b2:	7e 4f       	sbci	r23, 0xFE	; 254
    13b4:	db 01       	movw	r26, r22
    13b6:	7c 91       	ld	r23, X
      ocrb = microstepcurve[MICROSTEPS*2 - currentstep];
    13b8:	08 ea       	ldi	r16, 0xA8	; 168
    13ba:	11 e0       	ldi	r17, 0x01	; 1
    13bc:	0e 19       	sub	r16, r14
    13be:	1f 09       	sbc	r17, r15
    13c0:	d8 01       	movw	r26, r16
    13c2:	6c 91       	ld	r22, X
    13c4:	47 cf       	rjmp	.-370    	; 0x1254 <_ZN10AF_Stepper7onestepEhh+0x9e>
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == INTERLEAVE) {
    if (dir == FORWARD) {
       currentstep += MICROSTEPS/2;
    13c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    13c8:	98 5f       	subi	r25, 0xF8	; 248
    13ca:	9b 87       	std	Y+11, r25	; 0x0b
    13cc:	41 cf       	rjmp	.-382    	; 0x1250 <_ZN10AF_Stepper7onestepEhh+0x9a>
      } else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next odd step
      if (dir == FORWARD) {
	currentstep += MICROSTEPS;
    13ce:	90 5f       	subi	r25, 0xF0	; 240
    13d0:	9b 87       	std	Y+11, r25	; 0x0b
    13d2:	3e cf       	rjmp	.-388    	; 0x1250 <_ZN10AF_Stepper7onestepEhh+0x9a>
    switch (currentstep/(MICROSTEPS/2)) {
    case 0:
      latch_state |= a; // energize coil 1 only
      break;
    case 1:
      latch_state |= a | b; // energize coil 1+2
    13d4:	8d 29       	or	r24, r13
    13d6:	80 93 41 06 	sts	0x0641, r24
      break;
    13da:	5d cf       	rjmp	.-326    	; 0x1296 <_ZN10AF_Stepper7onestepEhh+0xe0>
      break;
    case 3:
      latch_state |= b | c; // energize coil 2+3
      break;
    case 4:
      latch_state |= c; // energize coil 3 only
    13dc:	85 2b       	or	r24, r21
    13de:	80 93 41 06 	sts	0x0641, r24
      break; 
    13e2:	59 cf       	rjmp	.-334    	; 0x1296 <_ZN10AF_Stepper7onestepEhh+0xe0>
    case 5:
      latch_state |= c | d; // energize coil 3+4
      break;
    case 6:
      latch_state |= d; // energize coil 4 only
    13e4:	83 2b       	or	r24, r19
    13e6:	80 93 41 06 	sts	0x0641, r24
      break;
    13ea:	55 cf       	rjmp	.-342    	; 0x1296 <_ZN10AF_Stepper7onestepEhh+0xe0>
      break;
    case 1:
      latch_state |= a | b; // energize coil 1+2
      break;
    case 2:
      latch_state |= b; // energize coil 2 only
    13ec:	8e 2b       	or	r24, r30
    13ee:	80 93 41 06 	sts	0x0641, r24
      break;
    13f2:	51 cf       	rjmp	.-350    	; 0x1296 <_ZN10AF_Stepper7onestepEhh+0xe0>
    }
  } 

  if (style == MICROSTEP) {
    if (dir == FORWARD) {
      currentstep++;
    13f4:	9f 5f       	subi	r25, 0xFF	; 255
    13f6:	9b 87       	std	Y+11, r25	; 0x0b
    13f8:	0c cf       	rjmp	.-488    	; 0x1212 <_ZN10AF_Stepper7onestepEhh+0x5c>
      else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next even step
      if (dir == FORWARD) {
	currentstep += MICROSTEPS;
    13fa:	90 5f       	subi	r25, 0xF0	; 240
    13fc:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
    13fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1400:	27 cf       	rjmp	.-434    	; 0x1250 <_ZN10AF_Stepper7onestepEhh+0x9a>

  // next determine what sort of stepping procedure we're up to
  if (style == SINGLE) {
    if ((currentstep/(MICROSTEPS/2)) % 2) { // we're at an odd step, weird
      if (dir == FORWARD) {
	currentstep += MICROSTEPS/2;
    1402:	98 5f       	subi	r25, 0xF8	; 248
    1404:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
    1406:	9b 85       	ldd	r25, Y+11	; 0x0b
    1408:	23 cf       	rjmp	.-442    	; 0x1250 <_ZN10AF_Stepper7onestepEhh+0x9a>
      ocra = microstepcurve[currentstep - MICROSTEPS];
      ocrb = microstepcurve[MICROSTEPS*2 - currentstep];
    } else if  ( (currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3)) {
      ocra = microstepcurve[MICROSTEPS*3 - currentstep];
      ocrb = microstepcurve[currentstep - MICROSTEPS*2];
    } else if  ( (currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4)) {
    140a:	69 2f       	mov	r22, r25
    140c:	60 53       	subi	r22, 0x30	; 48
    140e:	60 31       	cpi	r22, 0x10	; 16
    1410:	18 f0       	brcs	.+6      	; 0x1418 <_ZN10AF_Stepper7onestepEhh+0x262>
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	1e cf       	rjmp	.-452    	; 0x1254 <_ZN10AF_Stepper7onestepEhh+0x9e>
      ocra = microstepcurve[currentstep - MICROSTEPS*3];
    1418:	e9 2e       	mov	r14, r25
    141a:	ff 24       	eor	r15, r15
    141c:	b7 01       	movw	r22, r14
    141e:	68 5a       	subi	r22, 0xA8	; 168
    1420:	7e 4f       	sbci	r23, 0xFE	; 254
    1422:	db 01       	movw	r26, r22
    1424:	7c 91       	ld	r23, X
      ocrb = microstepcurve[MICROSTEPS*4 - currentstep];
    1426:	08 ec       	ldi	r16, 0xC8	; 200
    1428:	11 e0       	ldi	r17, 0x01	; 1
    142a:	0e 19       	sub	r16, r14
    142c:	1f 09       	sbc	r17, r15
    142e:	d8 01       	movw	r26, r16
    1430:	6c 91       	ld	r22, X
    1432:	10 cf       	rjmp	.-480    	; 0x1254 <_ZN10AF_Stepper7onestepEhh+0x9e>

00001434 <_ZN10AF_Stepper4stepEjhh>:
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    MC.latch_tx();
  }
}

void AF_Stepper::step(uint16_t steps, uint8_t dir,  uint8_t style) {
    1434:	5f 92       	push	r5
    1436:	6f 92       	push	r6
    1438:	7f 92       	push	r7
    143a:	8f 92       	push	r8
    143c:	9f 92       	push	r9
    143e:	af 92       	push	r10
    1440:	bf 92       	push	r11
    1442:	cf 92       	push	r12
    1444:	df 92       	push	r13
    1446:	ef 92       	push	r14
    1448:	ff 92       	push	r15
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	ec 01       	movw	r28, r24
    1454:	8b 01       	movw	r16, r22
    1456:	54 2e       	mov	r5, r20
    1458:	f2 2e       	mov	r15, r18
  uint32_t uspers = usperstep;
    145a:	8b 80       	ldd	r8, Y+3	; 0x03
    145c:	9c 80       	ldd	r9, Y+4	; 0x04
    145e:	ad 80       	ldd	r10, Y+5	; 0x05
    1460:	be 80       	ldd	r11, Y+6	; 0x06
  uint8_t ret = 0;

  if (style == INTERLEAVE) {
    1462:	23 e0       	ldi	r18, 0x03	; 3
    1464:	f2 16       	cp	r15, r18
    1466:	09 f4       	brne	.+2      	; 0x146a <_ZN10AF_Stepper4stepEjhh+0x36>
    1468:	a5 c0       	rjmp	.+330    	; 0x15b4 <_ZN10AF_Stepper4stepEjhh+0x180>
    uspers /= 2;
  }
 else if (style == MICROSTEP) {
    146a:	84 e0       	ldi	r24, 0x04	; 4
    146c:	f8 16       	cp	r15, r24
    146e:	09 f4       	brne	.+2      	; 0x1472 <_ZN10AF_Stepper4stepEjhh+0x3e>
    1470:	a6 c0       	rjmp	.+332    	; 0x15be <_ZN10AF_Stepper4stepEjhh+0x18a>
#endif
  }

  while (steps--) {
    ret = onestep(dir, style);
    delay(uspers/1000); // in ms
    1472:	c5 01       	movw	r24, r10
    1474:	b4 01       	movw	r22, r8
    1476:	28 ee       	ldi	r18, 0xE8	; 232
    1478:	33 e0       	ldi	r19, 0x03	; 3
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	0e 94 0f 28 	call	0x501e	; 0x501e <__udivmodsi4>
    1482:	72 2e       	mov	r7, r18
    1484:	c3 2e       	mov	r12, r19
    1486:	d4 2e       	mov	r13, r20
    1488:	e5 2e       	mov	r14, r21
    steppingcounter += (uspers % 1000);
    148a:	c5 01       	movw	r24, r10
    148c:	b4 01       	movw	r22, r8
    148e:	28 ee       	ldi	r18, 0xE8	; 232
    1490:	33 e0       	ldi	r19, 0x03	; 3
    1492:	40 e0       	ldi	r20, 0x00	; 0
    1494:	50 e0       	ldi	r21, 0x00	; 0
    1496:	0e 94 0f 28 	call	0x501e	; 0x501e <__udivmodsi4>
    149a:	4b 01       	movw	r8, r22
    149c:	5c 01       	movw	r10, r24
    149e:	66 24       	eor	r6, r6
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <_ZN10AF_Stepper4stepEjhh+0x72>
    if (steppingcounter >= 1000) {
      delay(1);
      steppingcounter -= 1000;
    14a2:	01 50       	subi	r16, 0x01	; 1
    14a4:	10 40       	sbci	r17, 0x00	; 0
#ifdef MOTORDEBUG
    Serial.print("steps = "); Serial.println(steps, DEC);
#endif
  }

  while (steps--) {
    14a6:	01 15       	cp	r16, r1
    14a8:	11 05       	cpc	r17, r1
    14aa:	99 f1       	breq	.+102    	; 0x1512 <_ZN10AF_Stepper4stepEjhh+0xde>
    ret = onestep(dir, style);
    14ac:	ce 01       	movw	r24, r28
    14ae:	65 2d       	mov	r22, r5
    14b0:	4f 2d       	mov	r20, r15
    14b2:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_ZN10AF_Stepper7onestepEhh>
    14b6:	68 2e       	mov	r6, r24
    delay(uspers/1000); // in ms
    14b8:	67 2d       	mov	r22, r7
    14ba:	7c 2d       	mov	r23, r12
    14bc:	8d 2d       	mov	r24, r13
    14be:	9e 2d       	mov	r25, r14
    14c0:	0e 94 e7 13 	call	0x27ce	; 0x27ce <delay>
    steppingcounter += (uspers % 1000);
    14c4:	8f 81       	ldd	r24, Y+7	; 0x07
    14c6:	98 85       	ldd	r25, Y+8	; 0x08
    14c8:	a9 85       	ldd	r26, Y+9	; 0x09
    14ca:	ba 85       	ldd	r27, Y+10	; 0x0a
    14cc:	88 0d       	add	r24, r8
    14ce:	99 1d       	adc	r25, r9
    14d0:	aa 1d       	adc	r26, r10
    14d2:	bb 1d       	adc	r27, r11
    14d4:	8f 83       	std	Y+7, r24	; 0x07
    14d6:	98 87       	std	Y+8, r25	; 0x08
    14d8:	a9 87       	std	Y+9, r26	; 0x09
    14da:	ba 87       	std	Y+10, r27	; 0x0a
    if (steppingcounter >= 1000) {
    14dc:	88 3e       	cpi	r24, 0xE8	; 232
    14de:	23 e0       	ldi	r18, 0x03	; 3
    14e0:	92 07       	cpc	r25, r18
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	a2 07       	cpc	r26, r18
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	b2 07       	cpc	r27, r18
    14ea:	d8 f2       	brcs	.-74     	; 0x14a2 <_ZN10AF_Stepper4stepEjhh+0x6e>
      delay(1);
    14ec:	61 e0       	ldi	r22, 0x01	; 1
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 e7 13 	call	0x27ce	; 0x27ce <delay>
      steppingcounter -= 1000;
    14f8:	8f 81       	ldd	r24, Y+7	; 0x07
    14fa:	98 85       	ldd	r25, Y+8	; 0x08
    14fc:	a9 85       	ldd	r26, Y+9	; 0x09
    14fe:	ba 85       	ldd	r27, Y+10	; 0x0a
    1500:	88 5e       	subi	r24, 0xE8	; 232
    1502:	93 40       	sbci	r25, 0x03	; 3
    1504:	a0 40       	sbci	r26, 0x00	; 0
    1506:	b0 40       	sbci	r27, 0x00	; 0
    1508:	8f 83       	std	Y+7, r24	; 0x07
    150a:	98 87       	std	Y+8, r25	; 0x08
    150c:	a9 87       	std	Y+9, r26	; 0x09
    150e:	ba 87       	std	Y+10, r27	; 0x0a
    1510:	c8 cf       	rjmp	.-112    	; 0x14a2 <_ZN10AF_Stepper4stepEjhh+0x6e>
    }
  }
  if (style == MICROSTEP) {
    1512:	84 e0       	ldi	r24, 0x04	; 4
    1514:	f8 16       	cp	r15, r24
    1516:	81 f0       	breq	.+32     	; 0x1538 <_ZN10AF_Stepper4stepEjhh+0x104>
	delay(1);
	steppingcounter -= 1000;
      } 
    }
  }
}
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	ff 90       	pop	r15
    1522:	ef 90       	pop	r14
    1524:	df 90       	pop	r13
    1526:	cf 90       	pop	r12
    1528:	bf 90       	pop	r11
    152a:	af 90       	pop	r10
    152c:	9f 90       	pop	r9
    152e:	8f 90       	pop	r8
    1530:	7f 90       	pop	r7
    1532:	6f 90       	pop	r6
    1534:	5f 90       	pop	r5
    1536:	08 95       	ret
      delay(1);
      steppingcounter -= 1000;
    }
  }
  if (style == MICROSTEP) {
    while ((ret != 0) && (ret != MICROSTEPS)) {
    1538:	66 20       	and	r6, r6
    153a:	71 f3       	breq	.-36     	; 0x1518 <_ZN10AF_Stepper4stepEjhh+0xe4>
    153c:	20 e1       	ldi	r18, 0x10	; 16
    153e:	62 16       	cp	r6, r18
    1540:	19 f4       	brne	.+6      	; 0x1548 <_ZN10AF_Stepper4stepEjhh+0x114>
    1542:	ea cf       	rjmp	.-44     	; 0x1518 <_ZN10AF_Stepper4stepEjhh+0xe4>
    1544:	00 31       	cpi	r16, 0x10	; 16
    1546:	41 f3       	breq	.-48     	; 0x1518 <_ZN10AF_Stepper4stepEjhh+0xe4>
      ret = onestep(dir, style);
    1548:	ce 01       	movw	r24, r28
    154a:	65 2d       	mov	r22, r5
    154c:	44 e0       	ldi	r20, 0x04	; 4
    154e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_ZN10AF_Stepper7onestepEhh>
    1552:	08 2f       	mov	r16, r24
      delay(uspers/1000); // in ms
    1554:	67 2d       	mov	r22, r7
    1556:	7c 2d       	mov	r23, r12
    1558:	8d 2d       	mov	r24, r13
    155a:	9e 2d       	mov	r25, r14
    155c:	0e 94 e7 13 	call	0x27ce	; 0x27ce <delay>
      steppingcounter += (uspers % 1000);
    1560:	8f 81       	ldd	r24, Y+7	; 0x07
    1562:	98 85       	ldd	r25, Y+8	; 0x08
    1564:	a9 85       	ldd	r26, Y+9	; 0x09
    1566:	ba 85       	ldd	r27, Y+10	; 0x0a
    1568:	88 0d       	add	r24, r8
    156a:	99 1d       	adc	r25, r9
    156c:	aa 1d       	adc	r26, r10
    156e:	bb 1d       	adc	r27, r11
    1570:	8f 83       	std	Y+7, r24	; 0x07
    1572:	98 87       	std	Y+8, r25	; 0x08
    1574:	a9 87       	std	Y+9, r26	; 0x09
    1576:	ba 87       	std	Y+10, r27	; 0x0a
      if (steppingcounter >= 1000) {
    1578:	88 3e       	cpi	r24, 0xE8	; 232
    157a:	23 e0       	ldi	r18, 0x03	; 3
    157c:	92 07       	cpc	r25, r18
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	a2 07       	cpc	r26, r18
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	b2 07       	cpc	r27, r18
    1586:	90 f0       	brcs	.+36     	; 0x15ac <_ZN10AF_Stepper4stepEjhh+0x178>
	delay(1);
    1588:	61 e0       	ldi	r22, 0x01	; 1
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 e7 13 	call	0x27ce	; 0x27ce <delay>
	steppingcounter -= 1000;
    1594:	8f 81       	ldd	r24, Y+7	; 0x07
    1596:	98 85       	ldd	r25, Y+8	; 0x08
    1598:	a9 85       	ldd	r26, Y+9	; 0x09
    159a:	ba 85       	ldd	r27, Y+10	; 0x0a
    159c:	88 5e       	subi	r24, 0xE8	; 232
    159e:	93 40       	sbci	r25, 0x03	; 3
    15a0:	a0 40       	sbci	r26, 0x00	; 0
    15a2:	b0 40       	sbci	r27, 0x00	; 0
    15a4:	8f 83       	std	Y+7, r24	; 0x07
    15a6:	98 87       	std	Y+8, r25	; 0x08
    15a8:	a9 87       	std	Y+9, r26	; 0x09
    15aa:	ba 87       	std	Y+10, r27	; 0x0a
      delay(1);
      steppingcounter -= 1000;
    }
  }
  if (style == MICROSTEP) {
    while ((ret != 0) && (ret != MICROSTEPS)) {
    15ac:	00 23       	and	r16, r16
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <_ZN10AF_Stepper4stepEjhh+0x17e>
    15b0:	b3 cf       	rjmp	.-154    	; 0x1518 <_ZN10AF_Stepper4stepEjhh+0xe4>
    15b2:	c8 cf       	rjmp	.-112    	; 0x1544 <_ZN10AF_Stepper4stepEjhh+0x110>
void AF_Stepper::step(uint16_t steps, uint8_t dir,  uint8_t style) {
  uint32_t uspers = usperstep;
  uint8_t ret = 0;

  if (style == INTERLEAVE) {
    uspers /= 2;
    15b4:	b6 94       	lsr	r11
    15b6:	a7 94       	ror	r10
    15b8:	97 94       	ror	r9
    15ba:	87 94       	ror	r8
    15bc:	5a cf       	rjmp	.-332    	; 0x1472 <_ZN10AF_Stepper4stepEjhh+0x3e>
  }
 else if (style == MICROSTEP) {
    uspers /= MICROSTEPS;
    15be:	54 e0       	ldi	r21, 0x04	; 4
    15c0:	b6 94       	lsr	r11
    15c2:	a7 94       	ror	r10
    15c4:	97 94       	ror	r9
    15c6:	87 94       	ror	r8
    15c8:	5a 95       	dec	r21
    15ca:	d1 f7       	brne	.-12     	; 0x15c0 <_ZN10AF_Stepper4stepEjhh+0x18c>
    steps *= MICROSTEPS;
    15cc:	02 95       	swap	r16
    15ce:	12 95       	swap	r17
    15d0:	10 7f       	andi	r17, 0xF0	; 240
    15d2:	10 27       	eor	r17, r16
    15d4:	00 7f       	andi	r16, 0xF0	; 240
    15d6:	10 27       	eor	r17, r16
    15d8:	4c cf       	rjmp	.-360    	; 0x1472 <_ZN10AF_Stepper4stepEjhh+0x3e>

000015da <_ZN10AF_Stepper7releaseEv>:
  //usperstep = 60000000 / ((uint32_t)revsteps * (uint32_t)rpm);
  steppingcounter = 0;
}

void AF_Stepper::release(void) {
  if (steppernum == 1) {
    15da:	fc 01       	movw	r30, r24
    15dc:	82 81       	ldd	r24, Z+2	; 0x02
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	69 f0       	breq	.+26     	; 0x15fc <_ZN10AF_Stepper7releaseEv+0x22>
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    MC.latch_tx();
  } else if (steppernum == 2) {
    15e2:	82 30       	cpi	r24, 0x02	; 2
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <_ZN10AF_Stepper7releaseEv+0xe>
    15e6:	08 95       	ret
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B) &
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    15e8:	80 91 41 06 	lds	r24, 0x0641
    15ec:	8e 71       	andi	r24, 0x1E	; 30
    15ee:	80 93 41 06 	sts	0x0641, r24
    MC.latch_tx();
    15f2:	80 e4       	ldi	r24, 0x40	; 64
    15f4:	96 e0       	ldi	r25, 0x06	; 6
    15f6:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN17AFMotorController8latch_txEv>
    15fa:	08 95       	ret
}

void AF_Stepper::release(void) {
  if (steppernum == 1) {
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    15fc:	80 91 41 06 	lds	r24, 0x0641
    1600:	81 7e       	andi	r24, 0xE1	; 225
    1602:	80 93 41 06 	sts	0x0641, r24
    MC.latch_tx();
    1606:	80 e4       	ldi	r24, 0x40	; 64
    1608:	96 e0       	ldi	r25, 0x06	; 6
    160a:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN17AFMotorController8latch_txEv>
    160e:	08 95       	ret

00001610 <_ZN10AF_DCMotor3runEh>:
  }
}

void AF_DCMotor::run(uint8_t cmd) {
  uint8_t a, b;
  switch (motornum) {
    1610:	fc 01       	movw	r30, r24
    1612:	80 81       	ld	r24, Z
    1614:	82 30       	cpi	r24, 0x02	; 2
    1616:	09 f4       	brne	.+2      	; 0x161a <_ZN10AF_DCMotor3runEh+0xa>
    1618:	6a c0       	rjmp	.+212    	; 0x16ee <_ZN10AF_DCMotor3runEh+0xde>
    161a:	83 30       	cpi	r24, 0x03	; 3
    161c:	30 f0       	brcs	.+12     	; 0x162a <_ZN10AF_DCMotor3runEh+0x1a>
    161e:	83 30       	cpi	r24, 0x03	; 3
    1620:	09 f4       	brne	.+2      	; 0x1624 <_ZN10AF_DCMotor3runEh+0x14>
    1622:	62 c0       	rjmp	.+196    	; 0x16e8 <_ZN10AF_DCMotor3runEh+0xd8>
    1624:	84 30       	cpi	r24, 0x04	; 4
    1626:	39 f1       	breq	.+78     	; 0x1676 <_ZN10AF_DCMotor3runEh+0x66>
    1628:	08 95       	ret
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	e9 f7       	brne	.-6      	; 0x1628 <_ZN10AF_DCMotor3runEh+0x18>
    162e:	83 e0       	ldi	r24, 0x03	; 3
    1630:	92 e0       	ldi	r25, 0x02	; 2
    a = MOTOR4_A; b = MOTOR4_B; break;
  default:
    return;
  }
  
  switch (cmd) {
    1632:	62 30       	cpi	r22, 0x02	; 2
    1634:	21 f1       	breq	.+72     	; 0x167e <_ZN10AF_DCMotor3runEh+0x6e>
    1636:	64 30       	cpi	r22, 0x04	; 4
    1638:	09 f4       	brne	.+2      	; 0x163c <_ZN10AF_DCMotor3runEh+0x2c>
    163a:	3b c0       	rjmp	.+118    	; 0x16b2 <_ZN10AF_DCMotor3runEh+0xa2>
    163c:	61 30       	cpi	r22, 0x01	; 1
    163e:	a1 f7       	brne	.-24     	; 0x1628 <_ZN10AF_DCMotor3runEh+0x18>
  case FORWARD:
    latch_state |= _BV(a);
    latch_state &= ~_BV(b); 
    1640:	21 e0       	ldi	r18, 0x01	; 1
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	a9 01       	movw	r20, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <_ZN10AF_DCMotor3runEh+0x3c>
    1648:	44 0f       	add	r20, r20
    164a:	55 1f       	adc	r21, r21
    164c:	8a 95       	dec	r24
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <_ZN10AF_DCMotor3runEh+0x38>
    1650:	84 2f       	mov	r24, r20
    1652:	80 95       	com	r24
    1654:	a9 01       	movw	r20, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <_ZN10AF_DCMotor3runEh+0x4c>
    1658:	44 0f       	add	r20, r20
    165a:	55 1f       	adc	r21, r21
    165c:	9a 95       	dec	r25
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <_ZN10AF_DCMotor3runEh+0x48>
    1660:	20 91 41 06 	lds	r18, 0x0641
    1664:	24 2b       	or	r18, r20
    1666:	82 23       	and	r24, r18
    1668:	80 93 41 06 	sts	0x0641, r24
    MC.latch_tx();
    166c:	80 e4       	ldi	r24, 0x40	; 64
    166e:	96 e0       	ldi	r25, 0x06	; 6
    1670:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN17AFMotorController8latch_txEv>
    break;
    1674:	08 95       	ret
  case 1:
    a = MOTOR1_A; b = MOTOR1_B; break;
  case 2:
    a = MOTOR2_A; b = MOTOR2_B; break;
  case 3:
    a = MOTOR3_A; b = MOTOR3_B; break;
    1676:	86 e0       	ldi	r24, 0x06	; 6
    1678:	90 e0       	ldi	r25, 0x00	; 0
    a = MOTOR4_A; b = MOTOR4_B; break;
  default:
    return;
  }
  
  switch (cmd) {
    167a:	62 30       	cpi	r22, 0x02	; 2
    167c:	e1 f6       	brne	.-72     	; 0x1636 <_ZN10AF_DCMotor3runEh+0x26>
    latch_state &= ~_BV(b); 
    MC.latch_tx();
    break;
  case BACKWARD:
    latch_state &= ~_BV(a);
    latch_state |= _BV(b); 
    167e:	21 e0       	ldi	r18, 0x01	; 1
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	a9 01       	movw	r20, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <_ZN10AF_DCMotor3runEh+0x7a>
    1686:	44 0f       	add	r20, r20
    1688:	55 1f       	adc	r21, r21
    168a:	9a 95       	dec	r25
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <_ZN10AF_DCMotor3runEh+0x76>
    168e:	94 2f       	mov	r25, r20
    1690:	90 95       	com	r25
    1692:	40 91 41 06 	lds	r20, 0x0641
    1696:	94 23       	and	r25, r20
    1698:	02 c0       	rjmp	.+4      	; 0x169e <_ZN10AF_DCMotor3runEh+0x8e>
    169a:	22 0f       	add	r18, r18
    169c:	33 1f       	adc	r19, r19
    169e:	8a 95       	dec	r24
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <_ZN10AF_DCMotor3runEh+0x8a>
    16a2:	92 2b       	or	r25, r18
    16a4:	90 93 41 06 	sts	0x0641, r25
    MC.latch_tx();
    16a8:	80 e4       	ldi	r24, 0x40	; 64
    16aa:	96 e0       	ldi	r25, 0x06	; 6
    16ac:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN17AFMotorController8latch_txEv>
    break;
    16b0:	08 95       	ret
  case RELEASE:
    latch_state &= ~_BV(a);
    latch_state &= ~_BV(b); 
    16b2:	21 e0       	ldi	r18, 0x01	; 1
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	a9 01       	movw	r20, r18
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <_ZN10AF_DCMotor3runEh+0xae>
    16ba:	44 0f       	add	r20, r20
    16bc:	55 1f       	adc	r21, r21
    16be:	9a 95       	dec	r25
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <_ZN10AF_DCMotor3runEh+0xaa>
    16c2:	b9 01       	movw	r22, r18
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <_ZN10AF_DCMotor3runEh+0xba>
    16c6:	66 0f       	add	r22, r22
    16c8:	77 1f       	adc	r23, r23
    16ca:	8a 95       	dec	r24
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <_ZN10AF_DCMotor3runEh+0xb6>
    16ce:	cb 01       	movw	r24, r22
    16d0:	84 2b       	or	r24, r20
    16d2:	80 95       	com	r24
    16d4:	20 91 41 06 	lds	r18, 0x0641
    16d8:	28 23       	and	r18, r24
    16da:	20 93 41 06 	sts	0x0641, r18
    MC.latch_tx();
    16de:	80 e4       	ldi	r24, 0x40	; 64
    16e0:	96 e0       	ldi	r25, 0x06	; 6
    16e2:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN17AFMotorController8latch_txEv>
    16e6:	08 95       	ret
  }
}

void AF_DCMotor::run(uint8_t cmd) {
  uint8_t a, b;
  switch (motornum) {
    16e8:	87 e0       	ldi	r24, 0x07	; 7
    16ea:	95 e0       	ldi	r25, 0x05	; 5
  case 1:
    a = MOTOR1_A; b = MOTOR1_B; break;
  case 2:
    a = MOTOR2_A; b = MOTOR2_B; break;
  case 3:
    a = MOTOR3_A; b = MOTOR3_B; break;
    16ec:	a2 cf       	rjmp	.-188    	; 0x1632 <_ZN10AF_DCMotor3runEh+0x22>
  }
}

void AF_DCMotor::run(uint8_t cmd) {
  uint8_t a, b;
  switch (motornum) {
    16ee:	84 e0       	ldi	r24, 0x04	; 4
    16f0:	91 e0       	ldi	r25, 0x01	; 1
    16f2:	9f cf       	rjmp	.-194    	; 0x1632 <_ZN10AF_DCMotor3runEh+0x22>

000016f4 <_ZN17AFMotorController6enableEv>:
#endif

AFMotorController::AFMotorController(void) {
}

void AFMotorController::enable(void) {
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	ec 01       	movw	r28, r24
  LATCH_DDR |= _BV(LATCH);
  ENABLE_DDR |= _BV(ENABLE);
  CLK_DDR |= _BV(CLK);
  SER_DDR |= _BV(SER);
  */
  pinMode(MOTORLATCH, OUTPUT);
    16fa:	8c e0       	ldi	r24, 0x0C	; 12
    16fc:	61 e0       	ldi	r22, 0x01	; 1
    16fe:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
  pinMode(MOTORENABLE, OUTPUT);
    1702:	87 e0       	ldi	r24, 0x07	; 7
    1704:	61 e0       	ldi	r22, 0x01	; 1
    1706:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
  pinMode(MOTORDATA, OUTPUT);
    170a:	88 e0       	ldi	r24, 0x08	; 8
    170c:	61 e0       	ldi	r22, 0x01	; 1
    170e:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
  pinMode(MOTORCLK, OUTPUT);
    1712:	84 e0       	ldi	r24, 0x04	; 4
    1714:	61 e0       	ldi	r22, 0x01	; 1
    1716:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>

  latch_state = 0;
    171a:	10 92 41 06 	sts	0x0641, r1

  latch_tx();  // "reset"
    171e:	ce 01       	movw	r24, r28
    1720:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN17AFMotorController8latch_txEv>

  //ENABLE_PORT &= ~_BV(ENABLE); // enable the chip outputs!
  digitalWrite(MOTORENABLE, LOW);
    1724:	87 e0       	ldi	r24, 0x07	; 7
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
}
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	08 95       	ret

00001732 <_ZN10AF_StepperC1Ejh>:

/******************************************
               STEPPERS
******************************************/

AF_Stepper::AF_Stepper(uint16_t steps, uint8_t num) {
    1732:	ef 92       	push	r14
    1734:	ff 92       	push	r15
    1736:	1f 93       	push	r17
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	ec 01       	movw	r28, r24
    173e:	7b 01       	movw	r14, r22
    1740:	14 2f       	mov	r17, r20
  MC.enable();
    1742:	80 e4       	ldi	r24, 0x40	; 64
    1744:	96 e0       	ldi	r25, 0x06	; 6
    1746:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <_ZN17AFMotorController6enableEv>

  revsteps = steps;
    174a:	f9 82       	std	Y+1, r15	; 0x01
    174c:	e8 82       	st	Y, r14
  steppernum = num;
    174e:	1a 83       	std	Y+2, r17	; 0x02
  currentstep = 0;
    1750:	1b 86       	std	Y+11, r1	; 0x0b

  if (steppernum == 1) {
    1752:	11 30       	cpi	r17, 0x01	; 1
    1754:	d1 f1       	breq	.+116    	; 0x17ca <_ZN10AF_StepperC1Ejh+0x98>
    initPWM1(MOTOR12_64KHZ);
    initPWM2(MOTOR12_64KHZ);
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    1756:	12 30       	cpi	r17, 0x02	; 2
    1758:	31 f0       	breq	.+12     	; 0x1766 <_ZN10AF_StepperC1Ejh+0x34>
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	ff 90       	pop	r15
    1762:	ef 90       	pop	r14
    1764:	08 95       	ret
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B) &
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    1766:	80 91 41 06 	lds	r24, 0x0641
    176a:	8e 71       	andi	r24, 0x1E	; 30
    176c:	80 93 41 06 	sts	0x0641, r24
    MC.latch_tx();
    1770:	80 e4       	ldi	r24, 0x40	; 64
    1772:	96 e0       	ldi	r25, 0x06	; 6
    1774:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN17AFMotorController8latch_txEv>

    // enable both H bridges
    pinMode(5, OUTPUT);
    1778:	85 e0       	ldi	r24, 0x05	; 5
    177a:	61 e0       	ldi	r22, 0x01	; 1
    177c:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    pinMode(6, OUTPUT);
    1780:	86 e0       	ldi	r24, 0x06	; 6
    1782:	61 e0       	ldi	r22, 0x01	; 1
    1784:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    digitalWrite(5, HIGH);
    1788:	85 e0       	ldi	r24, 0x05	; 5
    178a:	61 e0       	ldi	r22, 0x01	; 1
    178c:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
    digitalWrite(6, HIGH);
    1790:	86 e0       	ldi	r24, 0x06	; 6
    1792:	61 e0       	ldi	r22, 0x01	; 1
    1794:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    1798:	84 b5       	in	r24, 0x24	; 36
    179a:	83 68       	ori	r24, 0x83	; 131
    179c:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    179e:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    17a0:	86 e0       	ldi	r24, 0x06	; 6
    17a2:	61 e0       	ldi	r22, 0x01	; 1
    17a4:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    17a8:	84 b5       	in	r24, 0x24	; 36
    17aa:	83 62       	ori	r24, 0x23	; 35
    17ac:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    17ae:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    17b0:	85 e0       	ldi	r24, 0x05	; 5
    17b2:	61 e0       	ldi	r22, 0x01	; 1
    17b4:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    17b8:	8f ef       	ldi	r24, 0xFF	; 255
    17ba:	87 bd       	out	0x27, r24	; 39
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    17bc:	88 bd       	out	0x28, r24	; 40
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
    17c2:	1f 91       	pop	r17
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	08 95       	ret
  steppernum = num;
  currentstep = 0;

  if (steppernum == 1) {
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    17ca:	80 91 41 06 	lds	r24, 0x0641
    17ce:	81 7e       	andi	r24, 0xE1	; 225
    17d0:	80 93 41 06 	sts	0x0641, r24
    MC.latch_tx();
    17d4:	80 e4       	ldi	r24, 0x40	; 64
    17d6:	96 e0       	ldi	r25, 0x06	; 6
    17d8:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN17AFMotorController8latch_txEv>
    
    // enable both H bridges
    pinMode(11, OUTPUT);
    17dc:	8b e0       	ldi	r24, 0x0B	; 11
    17de:	61 e0       	ldi	r22, 0x01	; 1
    17e0:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    pinMode(3, OUTPUT);
    17e4:	83 e0       	ldi	r24, 0x03	; 3
    17e6:	61 e0       	ldi	r22, 0x01	; 1
    17e8:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    digitalWrite(11, HIGH);
    17ec:	8b e0       	ldi	r24, 0x0B	; 11
    17ee:	61 e0       	ldi	r22, 0x01	; 1
    17f0:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
    digitalWrite(3, HIGH);
    17f4:	83 e0       	ldi	r24, 0x03	; 3
    17f6:	61 e0       	ldi	r22, 0x01	; 1
    17f8:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    17fc:	80 91 b0 00 	lds	r24, 0x00B0
    1800:	83 68       	ori	r24, 0x83	; 131
    1802:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1806:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    180a:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    180e:	8b e0       	ldi	r24, 0x0B	; 11
    1810:	61 e0       	ldi	r22, 0x01	; 1
    1812:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    1816:	80 91 b0 00 	lds	r24, 0x00B0
    181a:	83 62       	ori	r24, 0x23	; 35
    181c:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1820:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    1824:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    1828:	83 e0       	ldi	r24, 0x03	; 3
    182a:	61 e0       	ldi	r22, 0x01	; 1
    182c:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    1830:	8f ef       	ldi	r24, 0xFF	; 255
    1832:	80 93 b3 00 	sts	0x00B3, r24
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    1836:	80 93 b4 00 	sts	0x00B4, r24
    183a:	8f cf       	rjmp	.-226    	; 0x175a <_ZN10AF_StepperC1Ejh+0x28>

0000183c <_ZN10AF_DCMotorC2Ehh>:
#else
   #error "This chip is not supported!"
#endif
}

AF_DCMotor::AF_DCMotor(uint8_t num, uint8_t freq) {
    183c:	1f 93       	push	r17
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	0f 92       	push	r0
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	fc 01       	movw	r30, r24
    184a:	14 2f       	mov	r17, r20
  motornum = num;
    184c:	60 83       	st	Z, r22
  pwmfreq = freq;
    184e:	41 83       	std	Z+1, r20	; 0x01

  MC.enable();
    1850:	80 e4       	ldi	r24, 0x40	; 64
    1852:	96 e0       	ldi	r25, 0x06	; 6
    1854:	69 83       	std	Y+1, r22	; 0x01
    1856:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <_ZN17AFMotorController6enableEv>

  switch (num) {
    185a:	69 81       	ldd	r22, Y+1	; 0x01
    185c:	62 30       	cpi	r22, 0x02	; 2
    185e:	09 f4       	brne	.+2      	; 0x1862 <_ZN10AF_DCMotorC2Ehh+0x26>
    1860:	50 c0       	rjmp	.+160    	; 0x1902 <_ZN10AF_DCMotorC2Ehh+0xc6>
    1862:	63 30       	cpi	r22, 0x03	; 3
    1864:	f0 f4       	brcc	.+60     	; 0x18a2 <_ZN10AF_DCMotorC2Ehh+0x66>
    1866:	61 30       	cpi	r22, 0x01	; 1
    1868:	b9 f4       	brne	.+46     	; 0x1898 <_ZN10AF_DCMotorC2Ehh+0x5c>
  case 1:
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    186a:	80 91 41 06 	lds	r24, 0x0641
    186e:	83 7f       	andi	r24, 0xF3	; 243
    1870:	80 93 41 06 	sts	0x0641, r24
    MC.latch_tx();
    1874:	80 e4       	ldi	r24, 0x40	; 64
    1876:	96 e0       	ldi	r25, 0x06	; 6
    1878:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    187c:	80 91 b0 00 	lds	r24, 0x00B0
    1880:	83 68       	ori	r24, 0x83	; 131
    1882:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1886:	17 70       	andi	r17, 0x07	; 7
    1888:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    188c:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    1890:	8b e0       	ldi	r24, 0x0B	; 11
    1892:	61 e0       	ldi	r22, 0x01	; 1
    1894:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	1f 91       	pop	r17
    18a0:	08 95       	ret
  motornum = num;
  pwmfreq = freq;

  MC.enable();

  switch (num) {
    18a2:	63 30       	cpi	r22, 0x03	; 3
    18a4:	c1 f0       	breq	.+48     	; 0x18d6 <_ZN10AF_DCMotorC2Ehh+0x9a>
    18a6:	64 30       	cpi	r22, 0x04	; 4
    18a8:	b9 f7       	brne	.-18     	; 0x1898 <_ZN10AF_DCMotorC2Ehh+0x5c>
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM3(freq);
    break;
  case 4:
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    18aa:	80 91 41 06 	lds	r24, 0x0641
    18ae:	8e 7b       	andi	r24, 0xBE	; 190
    18b0:	80 93 41 06 	sts	0x0641, r24
    MC.latch_tx();
    18b4:	80 e4       	ldi	r24, 0x40	; 64
    18b6:	96 e0       	ldi	r25, 0x06	; 6
    18b8:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    18bc:	84 b5       	in	r24, 0x24	; 36
    18be:	83 62       	ori	r24, 0x23	; 35
    18c0:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    18c2:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    18c4:	85 e0       	ldi	r24, 0x05	; 5
    18c6:	61 e0       	ldi	r22, 0x01	; 1
    18c8:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    18cc:	0f 90       	pop	r0
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	1f 91       	pop	r17
    18d4:	08 95       	ret
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM2(freq);
    break;
  case 3:
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    18d6:	80 91 41 06 	lds	r24, 0x0641
    18da:	8f 75       	andi	r24, 0x5F	; 95
    18dc:	80 93 41 06 	sts	0x0641, r24
    MC.latch_tx();
    18e0:	80 e4       	ldi	r24, 0x40	; 64
    18e2:	96 e0       	ldi	r25, 0x06	; 6
    18e4:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    18e8:	84 b5       	in	r24, 0x24	; 36
    18ea:	83 68       	ori	r24, 0x83	; 131
    18ec:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    18ee:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    18f0:	86 e0       	ldi	r24, 0x06	; 6
    18f2:	61 e0       	ldi	r22, 0x01	; 1
    18f4:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    18f8:	0f 90       	pop	r0
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	1f 91       	pop	r17
    1900:	08 95       	ret
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM1(freq);
    break;
  case 2:
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    1902:	80 91 41 06 	lds	r24, 0x0641
    1906:	8d 7e       	andi	r24, 0xED	; 237
    1908:	80 93 41 06 	sts	0x0641, r24
    MC.latch_tx();
    190c:	80 e4       	ldi	r24, 0x40	; 64
    190e:	96 e0       	ldi	r25, 0x06	; 6
    1910:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    1914:	80 91 b0 00 	lds	r24, 0x00B0
    1918:	83 62       	ori	r24, 0x23	; 35
    191a:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    191e:	17 70       	andi	r17, 0x07	; 7
    1920:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    1924:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    1928:	83 e0       	ldi	r24, 0x03	; 3
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1930:	0f 90       	pop	r0
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	1f 91       	pop	r17
    1938:	08 95       	ret

0000193a <_ZN10AF_DCMotorC1Ehh>:
#else
   #error "This chip is not supported!"
#endif
}

AF_DCMotor::AF_DCMotor(uint8_t num, uint8_t freq) {
    193a:	1f 93       	push	r17
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	0f 92       	push	r0
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	fc 01       	movw	r30, r24
    1948:	14 2f       	mov	r17, r20
  motornum = num;
    194a:	60 83       	st	Z, r22
  pwmfreq = freq;
    194c:	41 83       	std	Z+1, r20	; 0x01

  MC.enable();
    194e:	80 e4       	ldi	r24, 0x40	; 64
    1950:	96 e0       	ldi	r25, 0x06	; 6
    1952:	69 83       	std	Y+1, r22	; 0x01
    1954:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <_ZN17AFMotorController6enableEv>

  switch (num) {
    1958:	69 81       	ldd	r22, Y+1	; 0x01
    195a:	62 30       	cpi	r22, 0x02	; 2
    195c:	09 f4       	brne	.+2      	; 0x1960 <_ZN10AF_DCMotorC1Ehh+0x26>
    195e:	50 c0       	rjmp	.+160    	; 0x1a00 <_ZN10AF_DCMotorC1Ehh+0xc6>
    1960:	63 30       	cpi	r22, 0x03	; 3
    1962:	f0 f4       	brcc	.+60     	; 0x19a0 <_ZN10AF_DCMotorC1Ehh+0x66>
    1964:	61 30       	cpi	r22, 0x01	; 1
    1966:	b9 f4       	brne	.+46     	; 0x1996 <_ZN10AF_DCMotorC1Ehh+0x5c>
  case 1:
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    1968:	80 91 41 06 	lds	r24, 0x0641
    196c:	83 7f       	andi	r24, 0xF3	; 243
    196e:	80 93 41 06 	sts	0x0641, r24
    MC.latch_tx();
    1972:	80 e4       	ldi	r24, 0x40	; 64
    1974:	96 e0       	ldi	r25, 0x06	; 6
    1976:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    197a:	80 91 b0 00 	lds	r24, 0x00B0
    197e:	83 68       	ori	r24, 0x83	; 131
    1980:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1984:	17 70       	andi	r17, 0x07	; 7
    1986:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    198a:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    198e:	8b e0       	ldi	r24, 0x0B	; 11
    1990:	61 e0       	ldi	r22, 0x01	; 1
    1992:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1996:	0f 90       	pop	r0
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	1f 91       	pop	r17
    199e:	08 95       	ret
  motornum = num;
  pwmfreq = freq;

  MC.enable();

  switch (num) {
    19a0:	63 30       	cpi	r22, 0x03	; 3
    19a2:	c1 f0       	breq	.+48     	; 0x19d4 <_ZN10AF_DCMotorC1Ehh+0x9a>
    19a4:	64 30       	cpi	r22, 0x04	; 4
    19a6:	b9 f7       	brne	.-18     	; 0x1996 <_ZN10AF_DCMotorC1Ehh+0x5c>
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM3(freq);
    break;
  case 4:
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    19a8:	80 91 41 06 	lds	r24, 0x0641
    19ac:	8e 7b       	andi	r24, 0xBE	; 190
    19ae:	80 93 41 06 	sts	0x0641, r24
    MC.latch_tx();
    19b2:	80 e4       	ldi	r24, 0x40	; 64
    19b4:	96 e0       	ldi	r25, 0x06	; 6
    19b6:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    19ba:	84 b5       	in	r24, 0x24	; 36
    19bc:	83 62       	ori	r24, 0x23	; 35
    19be:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    19c0:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    19c2:	85 e0       	ldi	r24, 0x05	; 5
    19c4:	61 e0       	ldi	r22, 0x01	; 1
    19c6:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    19ca:	0f 90       	pop	r0
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	1f 91       	pop	r17
    19d2:	08 95       	ret
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM2(freq);
    break;
  case 3:
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    19d4:	80 91 41 06 	lds	r24, 0x0641
    19d8:	8f 75       	andi	r24, 0x5F	; 95
    19da:	80 93 41 06 	sts	0x0641, r24
    MC.latch_tx();
    19de:	80 e4       	ldi	r24, 0x40	; 64
    19e0:	96 e0       	ldi	r25, 0x06	; 6
    19e2:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    19e6:	84 b5       	in	r24, 0x24	; 36
    19e8:	83 68       	ori	r24, 0x83	; 131
    19ea:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    19ec:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    19ee:	86 e0       	ldi	r24, 0x06	; 6
    19f0:	61 e0       	ldi	r22, 0x01	; 1
    19f2:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    19f6:	0f 90       	pop	r0
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	1f 91       	pop	r17
    19fe:	08 95       	ret
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM1(freq);
    break;
  case 2:
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    1a00:	80 91 41 06 	lds	r24, 0x0641
    1a04:	8d 7e       	andi	r24, 0xED	; 237
    1a06:	80 93 41 06 	sts	0x0641, r24
    MC.latch_tx();
    1a0a:	80 e4       	ldi	r24, 0x40	; 64
    1a0c:	96 e0       	ldi	r25, 0x06	; 6
    1a0e:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    1a12:	80 91 b0 00 	lds	r24, 0x00B0
    1a16:	83 62       	ori	r24, 0x23	; 35
    1a18:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1a1c:	17 70       	andi	r17, 0x07	; 7
    1a1e:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    1a22:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    1a26:	83 e0       	ldi	r24, 0x03	; 3
    1a28:	61 e0       	ldi	r22, 0x01	; 1
    1a2a:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    1a2e:	0f 90       	pop	r0
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	1f 91       	pop	r17
    1a36:	08 95       	ret

00001a38 <_ZN10AF_StepperC2Ejh>:

/******************************************
               STEPPERS
******************************************/

AF_Stepper::AF_Stepper(uint16_t steps, uint8_t num) {
    1a38:	ef 92       	push	r14
    1a3a:	ff 92       	push	r15
    1a3c:	1f 93       	push	r17
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	ec 01       	movw	r28, r24
    1a44:	7b 01       	movw	r14, r22
    1a46:	14 2f       	mov	r17, r20
  MC.enable();
    1a48:	80 e4       	ldi	r24, 0x40	; 64
    1a4a:	96 e0       	ldi	r25, 0x06	; 6
    1a4c:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <_ZN17AFMotorController6enableEv>

  revsteps = steps;
    1a50:	f9 82       	std	Y+1, r15	; 0x01
    1a52:	e8 82       	st	Y, r14
  steppernum = num;
    1a54:	1a 83       	std	Y+2, r17	; 0x02
  currentstep = 0;
    1a56:	1b 86       	std	Y+11, r1	; 0x0b

  if (steppernum == 1) {
    1a58:	11 30       	cpi	r17, 0x01	; 1
    1a5a:	d1 f1       	breq	.+116    	; 0x1ad0 <_ZN10AF_StepperC2Ejh+0x98>
    initPWM1(MOTOR12_64KHZ);
    initPWM2(MOTOR12_64KHZ);
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    1a5c:	12 30       	cpi	r17, 0x02	; 2
    1a5e:	31 f0       	breq	.+12     	; 0x1a6c <_ZN10AF_StepperC2Ejh+0x34>
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	1f 91       	pop	r17
    1a66:	ff 90       	pop	r15
    1a68:	ef 90       	pop	r14
    1a6a:	08 95       	ret
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B) &
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    1a6c:	80 91 41 06 	lds	r24, 0x0641
    1a70:	8e 71       	andi	r24, 0x1E	; 30
    1a72:	80 93 41 06 	sts	0x0641, r24
    MC.latch_tx();
    1a76:	80 e4       	ldi	r24, 0x40	; 64
    1a78:	96 e0       	ldi	r25, 0x06	; 6
    1a7a:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN17AFMotorController8latch_txEv>

    // enable both H bridges
    pinMode(5, OUTPUT);
    1a7e:	85 e0       	ldi	r24, 0x05	; 5
    1a80:	61 e0       	ldi	r22, 0x01	; 1
    1a82:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    pinMode(6, OUTPUT);
    1a86:	86 e0       	ldi	r24, 0x06	; 6
    1a88:	61 e0       	ldi	r22, 0x01	; 1
    1a8a:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    digitalWrite(5, HIGH);
    1a8e:	85 e0       	ldi	r24, 0x05	; 5
    1a90:	61 e0       	ldi	r22, 0x01	; 1
    1a92:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
    digitalWrite(6, HIGH);
    1a96:	86 e0       	ldi	r24, 0x06	; 6
    1a98:	61 e0       	ldi	r22, 0x01	; 1
    1a9a:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    1a9e:	84 b5       	in	r24, 0x24	; 36
    1aa0:	83 68       	ori	r24, 0x83	; 131
    1aa2:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    1aa4:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    1aa6:	86 e0       	ldi	r24, 0x06	; 6
    1aa8:	61 e0       	ldi	r22, 0x01	; 1
    1aaa:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    1aae:	84 b5       	in	r24, 0x24	; 36
    1ab0:	83 62       	ori	r24, 0x23	; 35
    1ab2:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    1ab4:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    1ab6:	85 e0       	ldi	r24, 0x05	; 5
    1ab8:	61 e0       	ldi	r22, 0x01	; 1
    1aba:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    1abe:	8f ef       	ldi	r24, 0xFF	; 255
    1ac0:	87 bd       	out	0x27, r24	; 39
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    1ac2:	88 bd       	out	0x28, r24	; 40
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	ff 90       	pop	r15
    1acc:	ef 90       	pop	r14
    1ace:	08 95       	ret
  steppernum = num;
  currentstep = 0;

  if (steppernum == 1) {
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    1ad0:	80 91 41 06 	lds	r24, 0x0641
    1ad4:	81 7e       	andi	r24, 0xE1	; 225
    1ad6:	80 93 41 06 	sts	0x0641, r24
    MC.latch_tx();
    1ada:	80 e4       	ldi	r24, 0x40	; 64
    1adc:	96 e0       	ldi	r25, 0x06	; 6
    1ade:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN17AFMotorController8latch_txEv>
    
    // enable both H bridges
    pinMode(11, OUTPUT);
    1ae2:	8b e0       	ldi	r24, 0x0B	; 11
    1ae4:	61 e0       	ldi	r22, 0x01	; 1
    1ae6:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    pinMode(3, OUTPUT);
    1aea:	83 e0       	ldi	r24, 0x03	; 3
    1aec:	61 e0       	ldi	r22, 0x01	; 1
    1aee:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    digitalWrite(11, HIGH);
    1af2:	8b e0       	ldi	r24, 0x0B	; 11
    1af4:	61 e0       	ldi	r22, 0x01	; 1
    1af6:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
    digitalWrite(3, HIGH);
    1afa:	83 e0       	ldi	r24, 0x03	; 3
    1afc:	61 e0       	ldi	r22, 0x01	; 1
    1afe:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    1b02:	80 91 b0 00 	lds	r24, 0x00B0
    1b06:	83 68       	ori	r24, 0x83	; 131
    1b08:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1b0c:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    1b10:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    1b14:	8b e0       	ldi	r24, 0x0B	; 11
    1b16:	61 e0       	ldi	r22, 0x01	; 1
    1b18:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    1b1c:	80 91 b0 00 	lds	r24, 0x00B0
    1b20:	83 62       	ori	r24, 0x23	; 35
    1b22:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    1b26:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    1b2a:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    1b2e:	83 e0       	ldi	r24, 0x03	; 3
    1b30:	61 e0       	ldi	r22, 0x01	; 1
    1b32:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    1b36:	8f ef       	ldi	r24, 0xFF	; 255
    1b38:	80 93 b3 00 	sts	0x00B3, r24
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    1b3c:	80 93 b4 00 	sts	0x00B4, r24
    1b40:	8f cf       	rjmp	.-226    	; 0x1a60 <_ZN10AF_StepperC2Ejh+0x28>

00001b42 <__vector_18>:
  }
}

#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
  {
    1b42:	1f 92       	push	r1
    1b44:	0f 92       	push	r0
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	0f 92       	push	r0
    1b4a:	11 24       	eor	r1, r1
    1b4c:	2f 93       	push	r18
    1b4e:	3f 93       	push	r19
    1b50:	4f 93       	push	r20
    1b52:	5f 93       	push	r21
    1b54:	6f 93       	push	r22
    1b56:	8f 93       	push	r24
    1b58:	9f 93       	push	r25
    1b5a:	ef 93       	push	r30
    1b5c:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    1b5e:	60 91 c6 00 	lds	r22, 0x00C6
  ring_buffer rx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *rx_buffer)
{
  int i = (unsigned int)(rx_buffer->head + 1) % RX_BUFFER_SIZE;
    1b62:	20 91 c2 06 	lds	r18, 0x06C2
    1b66:	30 91 c3 06 	lds	r19, 0x06C3
    1b6a:	c9 01       	movw	r24, r18
    1b6c:	01 96       	adiw	r24, 0x01	; 1
    1b6e:	8f 77       	andi	r24, 0x7F	; 127
    1b70:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != rx_buffer->tail) {
    1b72:	40 91 c4 06 	lds	r20, 0x06C4
    1b76:	50 91 c5 06 	lds	r21, 0x06C5
    1b7a:	84 17       	cp	r24, r20
    1b7c:	95 07       	cpc	r25, r21
    1b7e:	41 f0       	breq	.+16     	; 0x1b90 <__vector_18+0x4e>
    rx_buffer->buffer[rx_buffer->head] = c;
    1b80:	2e 5b       	subi	r18, 0xBE	; 190
    1b82:	39 4f       	sbci	r19, 0xF9	; 249
    1b84:	f9 01       	movw	r30, r18
    1b86:	60 83       	st	Z, r22
    rx_buffer->head = i;
    1b88:	90 93 c3 06 	sts	0x06C3, r25
    1b8c:	80 93 c2 06 	sts	0x06C2, r24
    unsigned char c  =  UDR;  //  atmega8535
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    1b90:	ff 91       	pop	r31
    1b92:	ef 91       	pop	r30
    1b94:	9f 91       	pop	r25
    1b96:	8f 91       	pop	r24
    1b98:	6f 91       	pop	r22
    1b9a:	5f 91       	pop	r21
    1b9c:	4f 91       	pop	r20
    1b9e:	3f 91       	pop	r19
    1ba0:	2f 91       	pop	r18
    1ba2:	0f 90       	pop	r0
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	0f 90       	pop	r0
    1ba8:	1f 90       	pop	r1
    1baa:	18 95       	reti

00001bac <_ZN14HardwareSerialC2EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:



// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
    1bac:	8f 92       	push	r8
    1bae:	af 92       	push	r10
    1bb0:	cf 92       	push	r12
    1bb2:	df 92       	push	r13
    1bb4:	ef 92       	push	r14
    1bb6:	ff 92       	push	r15
    1bb8:	0f 93       	push	r16
    1bba:	1f 93       	push	r17
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	fc 01       	movw	r30, r24
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    1bc6:	8d e9       	ldi	r24, 0x9D	; 157
    1bc8:	91 e0       	ldi	r25, 0x01	; 1
    1bca:	91 83       	std	Z+1, r25	; 0x01
    1bcc:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    1bce:	73 83       	std	Z+3, r23	; 0x03
    1bd0:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
    1bd2:	55 83       	std	Z+5, r21	; 0x05
    1bd4:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
    1bd6:	37 83       	std	Z+7, r19	; 0x07
    1bd8:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
    1bda:	11 87       	std	Z+9, r17	; 0x09
    1bdc:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
    1bde:	f3 86       	std	Z+11, r15	; 0x0b
    1be0:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
    1be2:	d5 86       	std	Z+13, r13	; 0x0d
    1be4:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
    1be6:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
    1be8:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
    1bea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bec:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
    1bee:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bf0:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
    1bf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf4:	82 8b       	std	Z+18, r24	; 0x12
}
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	df 90       	pop	r13
    1c04:	cf 90       	pop	r12
    1c06:	af 90       	pop	r10
    1c08:	8f 90       	pop	r8
    1c0a:	08 95       	ret

00001c0c <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:



// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
    1c0c:	8f 92       	push	r8
    1c0e:	af 92       	push	r10
    1c10:	cf 92       	push	r12
    1c12:	df 92       	push	r13
    1c14:	ef 92       	push	r14
    1c16:	ff 92       	push	r15
    1c18:	0f 93       	push	r16
    1c1a:	1f 93       	push	r17
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	fc 01       	movw	r30, r24
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    1c26:	8d e9       	ldi	r24, 0x9D	; 157
    1c28:	91 e0       	ldi	r25, 0x01	; 1
    1c2a:	91 83       	std	Z+1, r25	; 0x01
    1c2c:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    1c2e:	73 83       	std	Z+3, r23	; 0x03
    1c30:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
    1c32:	55 83       	std	Z+5, r21	; 0x05
    1c34:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
    1c36:	37 83       	std	Z+7, r19	; 0x07
    1c38:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
    1c3a:	11 87       	std	Z+9, r17	; 0x09
    1c3c:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
    1c3e:	f3 86       	std	Z+11, r15	; 0x0b
    1c40:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
    1c42:	d5 86       	std	Z+13, r13	; 0x0d
    1c44:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
    1c46:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
    1c48:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
    1c4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4c:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
    1c4e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c50:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
    1c52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c54:	82 8b       	std	Z+18, r24	; 0x12
}
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	ff 90       	pop	r15
    1c60:	ef 90       	pop	r14
    1c62:	df 90       	pop	r13
    1c64:	cf 90       	pop	r12
    1c66:	af 90       	pop	r10
    1c68:	8f 90       	pop	r8
    1c6a:	08 95       	ret

00001c6c <_ZN14HardwareSerial5beginEl>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(long baud)
{
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
    1c70:	ec 01       	movw	r28, r24
    1c72:	9a 01       	movw	r18, r20
    1c74:	ab 01       	movw	r20, r22

#if F_CPU == 16000000UL
  // hardcoded exception for compatibility with the bootloader shipped
  // with the Duemilanove and previous boards and the firmware on the 8U2
  // on the Uno and Mega 2560.
  if (baud == 57600) {
    1c76:	20 30       	cpi	r18, 0x00	; 0
    1c78:	81 ee       	ldi	r24, 0xE1	; 225
    1c7a:	38 07       	cpc	r19, r24
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	48 07       	cpc	r20, r24
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	58 07       	cpc	r21, r24
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <_ZN14HardwareSerial5beginEl+0x1c>
    1c86:	48 c0       	rjmp	.+144    	; 0x1d18 <_ZN14HardwareSerial5beginEl+0xac>
    use_u2x = false;
  }
#endif
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    1c88:	e8 85       	ldd	r30, Y+8	; 0x08
    1c8a:	f9 85       	ldd	r31, Y+9	; 0x09
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	0a 88       	ldd	r0, Y+18	; 0x12
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <_ZN14HardwareSerial5beginEl+0x2c>
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	0a 94       	dec	r0
    1c9a:	e2 f7       	brpl	.-8      	; 0x1c94 <_ZN14HardwareSerial5beginEl+0x28>
    1c9c:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1c9e:	60 e0       	ldi	r22, 0x00	; 0
    1ca0:	79 e0       	ldi	r23, 0x09	; 9
    1ca2:	8d e3       	ldi	r24, 0x3D	; 61
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	0e 94 0f 28 	call	0x501e	; 0x501e <__udivmodsi4>
    1caa:	21 50       	subi	r18, 0x01	; 1
    1cac:	30 40       	sbci	r19, 0x00	; 0
    1cae:	40 40       	sbci	r20, 0x00	; 0
    1cb0:	50 40       	sbci	r21, 0x00	; 0
    1cb2:	56 95       	lsr	r21
    1cb4:	47 95       	ror	r20
    1cb6:	37 95       	ror	r19
    1cb8:	27 95       	ror	r18
    1cba:	83 2f       	mov	r24, r19
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1cbc:	ec 81       	ldd	r30, Y+4	; 0x04
    1cbe:	fd 81       	ldd	r31, Y+5	; 0x05
    1cc0:	80 83       	st	Z, r24
  *_ubrrl = baud_setting;
    1cc2:	ee 81       	ldd	r30, Y+6	; 0x06
    1cc4:	ff 81       	ldd	r31, Y+7	; 0x07
    1cc6:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    1cc8:	ea 85       	ldd	r30, Y+10	; 0x0a
    1cca:	fb 85       	ldd	r31, Y+11	; 0x0b
    1ccc:	80 81       	ld	r24, Z
    1cce:	21 e0       	ldi	r18, 0x01	; 1
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	a9 01       	movw	r20, r18
    1cd4:	0e 84       	ldd	r0, Y+14	; 0x0e
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <_ZN14HardwareSerial5beginEl+0x70>
    1cd8:	44 0f       	add	r20, r20
    1cda:	55 1f       	adc	r21, r21
    1cdc:	0a 94       	dec	r0
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <_ZN14HardwareSerial5beginEl+0x6c>
    1ce0:	84 2b       	or	r24, r20
    1ce2:	80 83       	st	Z, r24
  sbi(*_ucsrb, _txen);
    1ce4:	ea 85       	ldd	r30, Y+10	; 0x0a
    1ce6:	fb 85       	ldd	r31, Y+11	; 0x0b
    1ce8:	80 81       	ld	r24, Z
    1cea:	a9 01       	movw	r20, r18
    1cec:	0f 84       	ldd	r0, Y+15	; 0x0f
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <_ZN14HardwareSerial5beginEl+0x88>
    1cf0:	44 0f       	add	r20, r20
    1cf2:	55 1f       	adc	r21, r21
    1cf4:	0a 94       	dec	r0
    1cf6:	e2 f7       	brpl	.-8      	; 0x1cf0 <_ZN14HardwareSerial5beginEl+0x84>
    1cf8:	84 2b       	or	r24, r20
    1cfa:	80 83       	st	Z, r24
  sbi(*_ucsrb, _rxcie);
    1cfc:	ea 85       	ldd	r30, Y+10	; 0x0a
    1cfe:	fb 85       	ldd	r31, Y+11	; 0x0b
    1d00:	80 81       	ld	r24, Z
    1d02:	08 88       	ldd	r0, Y+16	; 0x10
    1d04:	02 c0       	rjmp	.+4      	; 0x1d0a <_ZN14HardwareSerial5beginEl+0x9e>
    1d06:	22 0f       	add	r18, r18
    1d08:	33 1f       	adc	r19, r19
    1d0a:	0a 94       	dec	r0
    1d0c:	e2 f7       	brpl	.-8      	; 0x1d06 <_ZN14HardwareSerial5beginEl+0x9a>
    1d0e:	82 2b       	or	r24, r18
    1d10:	80 83       	st	Z, r24
}
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	08 95       	ret
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    1d18:	e8 85       	ldd	r30, Y+8	; 0x08
    1d1a:	f9 85       	ldd	r31, Y+9	; 0x09
    1d1c:	10 82       	st	Z, r1
    1d1e:	20 e1       	ldi	r18, 0x10	; 16
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	cc cf       	rjmp	.-104    	; 0x1cbc <_ZN14HardwareSerial5beginEl+0x50>

00001d24 <_ZN14HardwareSerial3endEv>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
}

void HardwareSerial::end()
{
    1d24:	fc 01       	movw	r30, r24
  cbi(*_ucsrb, _rxen);
    1d26:	a2 85       	ldd	r26, Z+10	; 0x0a
    1d28:	b3 85       	ldd	r27, Z+11	; 0x0b
    1d2a:	3c 91       	ld	r19, X
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	ac 01       	movw	r20, r24
    1d32:	06 84       	ldd	r0, Z+14	; 0x0e
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <_ZN14HardwareSerial3endEv+0x16>
    1d36:	44 0f       	add	r20, r20
    1d38:	55 1f       	adc	r21, r21
    1d3a:	0a 94       	dec	r0
    1d3c:	e2 f7       	brpl	.-8      	; 0x1d36 <_ZN14HardwareSerial3endEv+0x12>
    1d3e:	24 2f       	mov	r18, r20
    1d40:	20 95       	com	r18
    1d42:	23 23       	and	r18, r19
    1d44:	2c 93       	st	X, r18
  cbi(*_ucsrb, _txen);
    1d46:	a2 85       	ldd	r26, Z+10	; 0x0a
    1d48:	b3 85       	ldd	r27, Z+11	; 0x0b
    1d4a:	3c 91       	ld	r19, X
    1d4c:	ac 01       	movw	r20, r24
    1d4e:	07 84       	ldd	r0, Z+15	; 0x0f
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <_ZN14HardwareSerial3endEv+0x32>
    1d52:	44 0f       	add	r20, r20
    1d54:	55 1f       	adc	r21, r21
    1d56:	0a 94       	dec	r0
    1d58:	e2 f7       	brpl	.-8      	; 0x1d52 <_ZN14HardwareSerial3endEv+0x2e>
    1d5a:	24 2f       	mov	r18, r20
    1d5c:	20 95       	com	r18
    1d5e:	23 23       	and	r18, r19
    1d60:	2c 93       	st	X, r18
  cbi(*_ucsrb, _rxcie);  
    1d62:	a2 85       	ldd	r26, Z+10	; 0x0a
    1d64:	b3 85       	ldd	r27, Z+11	; 0x0b
    1d66:	2c 91       	ld	r18, X
    1d68:	00 88       	ldd	r0, Z+16	; 0x10
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <_ZN14HardwareSerial3endEv+0x4c>
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	0a 94       	dec	r0
    1d72:	e2 f7       	brpl	.-8      	; 0x1d6c <_ZN14HardwareSerial3endEv+0x48>
    1d74:	80 95       	com	r24
    1d76:	82 23       	and	r24, r18
    1d78:	8c 93       	st	X, r24
}
    1d7a:	08 95       	ret

00001d7c <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	82 81       	ldd	r24, Z+2	; 0x02
    1d80:	93 81       	ldd	r25, Z+3	; 0x03
    1d82:	fc 01       	movw	r30, r24
    1d84:	e0 58       	subi	r30, 0x80	; 128
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	20 81       	ld	r18, Z
    1d8a:	31 81       	ldd	r19, Z+1	; 0x01
    1d8c:	8e 57       	subi	r24, 0x7E	; 126
    1d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d90:	fc 01       	movw	r30, r24
    1d92:	80 81       	ld	r24, Z
    1d94:	91 81       	ldd	r25, Z+1	; 0x01
    1d96:	28 1b       	sub	r18, r24
    1d98:	39 0b       	sbc	r19, r25
    1d9a:	2f 77       	andi	r18, 0x7F	; 127
    1d9c:	30 70       	andi	r19, 0x00	; 0
}
    1d9e:	c9 01       	movw	r24, r18
    1da0:	08 95       	ret

00001da2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    1da2:	fc 01       	movw	r30, r24
    1da4:	82 81       	ldd	r24, Z+2	; 0x02
    1da6:	93 81       	ldd	r25, Z+3	; 0x03
    1da8:	fc 01       	movw	r30, r24
    1daa:	ee 57       	subi	r30, 0x7E	; 126
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	20 81       	ld	r18, Z
    1db0:	31 81       	ldd	r19, Z+1	; 0x01
    1db2:	fc 01       	movw	r30, r24
    1db4:	e0 58       	subi	r30, 0x80	; 128
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	40 81       	ld	r20, Z
    1dba:	51 81       	ldd	r21, Z+1	; 0x01
    1dbc:	42 17       	cp	r20, r18
    1dbe:	53 07       	cpc	r21, r19
    1dc0:	39 f0       	breq	.+14     	; 0x1dd0 <_ZN14HardwareSerial4peekEv+0x2e>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    1dc2:	82 0f       	add	r24, r18
    1dc4:	93 1f       	adc	r25, r19
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	20 81       	ld	r18, Z
    1dca:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1dcc:	c9 01       	movw	r24, r18
    1dce:	08 95       	ret
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    1dd0:	2f ef       	ldi	r18, 0xFF	; 255
    1dd2:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    1dd4:	c9 01       	movw	r24, r18
    1dd6:	08 95       	ret

00001dd8 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    1dd8:	dc 01       	movw	r26, r24
    1dda:	12 96       	adiw	r26, 0x02	; 2
    1ddc:	8d 91       	ld	r24, X+
    1dde:	9c 91       	ld	r25, X
    1de0:	13 97       	sbiw	r26, 0x03	; 3
    1de2:	fc 01       	movw	r30, r24
    1de4:	ee 57       	subi	r30, 0x7E	; 126
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	40 81       	ld	r20, Z
    1dea:	51 81       	ldd	r21, Z+1	; 0x01
    1dec:	dc 01       	movw	r26, r24
    1dee:	a0 58       	subi	r26, 0x80	; 128
    1df0:	bf 4f       	sbci	r27, 0xFF	; 255
    1df2:	2d 91       	ld	r18, X+
    1df4:	3c 91       	ld	r19, X
    1df6:	11 97       	sbiw	r26, 0x01	; 1
    1df8:	24 17       	cp	r18, r20
    1dfa:	35 07       	cpc	r19, r21
    1dfc:	69 f0       	breq	.+26     	; 0x1e18 <_ZN14HardwareSerial4readEv+0x40>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1dfe:	84 0f       	add	r24, r20
    1e00:	95 1f       	adc	r25, r21
    1e02:	dc 01       	movw	r26, r24
    1e04:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
    1e06:	4f 5f       	subi	r20, 0xFF	; 255
    1e08:	5f 4f       	sbci	r21, 0xFF	; 255
    1e0a:	4f 77       	andi	r20, 0x7F	; 127
    1e0c:	50 70       	andi	r21, 0x00	; 0
    1e0e:	51 83       	std	Z+1, r21	; 0x01
    1e10:	40 83       	st	Z, r20
    return c;
    1e12:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1e14:	c9 01       	movw	r24, r18
    1e16:	08 95       	ret
}

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    1e18:	2f ef       	ldi	r18, 0xFF	; 255
    1e1a:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
    return c;
  }
}
    1e1c:	c9 01       	movw	r24, r18
    1e1e:	08 95       	ret

00001e20 <_ZN14HardwareSerial5flushEv>:
  // don't reverse this or there may be problems if the RX interrupt
  // occurs after reading the value of rx_buffer_head but before writing
  // the value to rx_buffer_tail; the previous value of rx_buffer_head
  // may be written to rx_buffer_tail, making it appear as if the buffer
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
    1e20:	dc 01       	movw	r26, r24
    1e22:	12 96       	adiw	r26, 0x02	; 2
    1e24:	8d 91       	ld	r24, X+
    1e26:	9c 91       	ld	r25, X
    1e28:	13 97       	sbiw	r26, 0x03	; 3
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	e0 58       	subi	r30, 0x80	; 128
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	8e 57       	subi	r24, 0x7E	; 126
    1e32:	9f 4f       	sbci	r25, 0xFF	; 255
    1e34:	dc 01       	movw	r26, r24
    1e36:	8d 91       	ld	r24, X+
    1e38:	9c 91       	ld	r25, X
    1e3a:	11 97       	sbiw	r26, 0x01	; 1
    1e3c:	91 83       	std	Z+1, r25	; 0x01
    1e3e:	80 83       	st	Z, r24
}
    1e40:	08 95       	ret

00001e42 <_ZN14HardwareSerial5writeEh>:

void HardwareSerial::write(uint8_t c)
{
    1e42:	fc 01       	movw	r30, r24
    1e44:	a0 85       	ldd	r26, Z+8	; 0x08
    1e46:	b1 85       	ldd	r27, Z+9	; 0x09
    1e48:	21 89       	ldd	r18, Z+17	; 0x11
  while (!((*_ucsra) & (1 << _udre)))
    1e4a:	8c 91       	ld	r24, X
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	02 2e       	mov	r0, r18
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <_ZN14HardwareSerial5writeEh+0x14>
    1e52:	95 95       	asr	r25
    1e54:	87 95       	ror	r24
    1e56:	0a 94       	dec	r0
    1e58:	e2 f7       	brpl	.-8      	; 0x1e52 <_ZN14HardwareSerial5writeEh+0x10>
    1e5a:	80 ff       	sbrs	r24, 0
    1e5c:	f6 cf       	rjmp	.-20     	; 0x1e4a <_ZN14HardwareSerial5writeEh+0x8>
    ;

  *_udr = c;
    1e5e:	04 84       	ldd	r0, Z+12	; 0x0c
    1e60:	f5 85       	ldd	r31, Z+13	; 0x0d
    1e62:	e0 2d       	mov	r30, r0
    1e64:	60 83       	st	Z, r22
}
    1e66:	08 95       	ret

00001e68 <_GLOBAL__I_rx_buffer>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    1e68:	8d e9       	ldi	r24, 0x9D	; 157
    1e6a:	91 e0       	ldi	r25, 0x01	; 1
    1e6c:	90 93 c7 06 	sts	0x06C7, r25
    1e70:	80 93 c6 06 	sts	0x06C6, r24
{
  _rx_buffer = rx_buffer;
    1e74:	82 e4       	ldi	r24, 0x42	; 66
    1e76:	96 e0       	ldi	r25, 0x06	; 6
    1e78:	90 93 c9 06 	sts	0x06C9, r25
    1e7c:	80 93 c8 06 	sts	0x06C8, r24
  _ubrrh = ubrrh;
    1e80:	85 ec       	ldi	r24, 0xC5	; 197
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	90 93 cb 06 	sts	0x06CB, r25
    1e88:	80 93 ca 06 	sts	0x06CA, r24
  _ubrrl = ubrrl;
    1e8c:	84 ec       	ldi	r24, 0xC4	; 196
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	90 93 cd 06 	sts	0x06CD, r25
    1e94:	80 93 cc 06 	sts	0x06CC, r24
  _ucsra = ucsra;
    1e98:	80 ec       	ldi	r24, 0xC0	; 192
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	90 93 cf 06 	sts	0x06CF, r25
    1ea0:	80 93 ce 06 	sts	0x06CE, r24
  _ucsrb = ucsrb;
    1ea4:	81 ec       	ldi	r24, 0xC1	; 193
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	90 93 d1 06 	sts	0x06D1, r25
    1eac:	80 93 d0 06 	sts	0x06D0, r24
  _udr = udr;
    1eb0:	86 ec       	ldi	r24, 0xC6	; 198
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	90 93 d3 06 	sts	0x06D3, r25
    1eb8:	80 93 d2 06 	sts	0x06D2, r24
  _rxen = rxen;
    1ebc:	84 e0       	ldi	r24, 0x04	; 4
    1ebe:	80 93 d4 06 	sts	0x06D4, r24
  _txen = txen;
    1ec2:	83 e0       	ldi	r24, 0x03	; 3
    1ec4:	80 93 d5 06 	sts	0x06D5, r24
  _rxcie = rxcie;
    1ec8:	87 e0       	ldi	r24, 0x07	; 7
    1eca:	80 93 d6 06 	sts	0x06D6, r24
  _udre = udre;
    1ece:	85 e0       	ldi	r24, 0x05	; 5
    1ed0:	80 93 d7 06 	sts	0x06D7, r24
  _u2x = u2x;
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	80 93 d8 06 	sts	0x06D8, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
    1eda:	08 95       	ret

00001edc <_ZN5Print5writeEPKc>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
    1edc:	0f 93       	push	r16
    1ede:	1f 93       	push	r17
    1ee0:	cf 93       	push	r28
    1ee2:	df 93       	push	r29
    1ee4:	ec 01       	movw	r28, r24
    1ee6:	8b 01       	movw	r16, r22
  while (*str)
    1ee8:	fb 01       	movw	r30, r22
    1eea:	60 81       	ld	r22, Z
    1eec:	66 23       	and	r22, r22
    1eee:	69 f0       	breq	.+26     	; 0x1f0a <_ZN5Print5writeEPKc+0x2e>
    write(*str++);
    1ef0:	0f 5f       	subi	r16, 0xFF	; 255
    1ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef4:	e8 81       	ld	r30, Y
    1ef6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ef8:	01 90       	ld	r0, Z+
    1efa:	f0 81       	ld	r31, Z
    1efc:	e0 2d       	mov	r30, r0
    1efe:	ce 01       	movw	r24, r28
    1f00:	09 95       	icall
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
  while (*str)
    1f02:	f8 01       	movw	r30, r16
    1f04:	60 81       	ld	r22, Z
    1f06:	66 23       	and	r22, r22
    1f08:	99 f7       	brne	.-26     	; 0x1ef0 <_ZN5Print5writeEPKc+0x14>
    write(*str++);
}
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	1f 91       	pop	r17
    1f10:	0f 91       	pop	r16
    1f12:	08 95       	ret

00001f14 <_ZN5Print5writeEPKhj>:

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
    1f14:	ef 92       	push	r14
    1f16:	ff 92       	push	r15
    1f18:	0f 93       	push	r16
    1f1a:	1f 93       	push	r17
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	ec 01       	movw	r28, r24
    1f22:	8b 01       	movw	r16, r22
    1f24:	7a 01       	movw	r14, r20
  while (size--)
    1f26:	41 15       	cp	r20, r1
    1f28:	51 05       	cpc	r21, r1
    1f2a:	81 f0       	breq	.+32     	; 0x1f4c <_ZN5Print5writeEPKhj+0x38>
    write(*buffer++);
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	61 91       	ld	r22, Z+
    1f30:	8f 01       	movw	r16, r30
    1f32:	e8 81       	ld	r30, Y
    1f34:	f9 81       	ldd	r31, Y+1	; 0x01
    1f36:	01 90       	ld	r0, Z+
    1f38:	f0 81       	ld	r31, Z
    1f3a:	e0 2d       	mov	r30, r0
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	09 95       	icall
    1f40:	08 94       	sec
    1f42:	e1 08       	sbc	r14, r1
    1f44:	f1 08       	sbc	r15, r1
}

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
  while (size--)
    1f46:	e1 14       	cp	r14, r1
    1f48:	f1 04       	cpc	r15, r1
    1f4a:	81 f7       	brne	.-32     	; 0x1f2c <_ZN5Print5writeEPKhj+0x18>
    write(*buffer++);
}
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	1f 91       	pop	r17
    1f52:	0f 91       	pop	r16
    1f54:	ff 90       	pop	r15
    1f56:	ef 90       	pop	r14
    1f58:	08 95       	ret

00001f5a <_ZN5Print5printEPKc>:
  }
}

void Print::print(const char str[])
{
  write(str);
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	ed 91       	ld	r30, X+
    1f5e:	fc 91       	ld	r31, X
    1f60:	02 80       	ldd	r0, Z+2	; 0x02
    1f62:	f3 81       	ldd	r31, Z+3	; 0x03
    1f64:	e0 2d       	mov	r30, r0
    1f66:	09 95       	icall
}
    1f68:	08 95       	ret

00001f6a <_ZN5Print5printERK6String>:
  while (size--)
    write(*buffer++);
}

void Print::print(const String &s)
{
    1f6a:	cf 92       	push	r12
    1f6c:	df 92       	push	r13
    1f6e:	ef 92       	push	r14
    1f70:	ff 92       	push	r15
    1f72:	0f 93       	push	r16
    1f74:	1f 93       	push	r17
    1f76:	cf 93       	push	r28
    1f78:	df 93       	push	r29
    1f7a:	7c 01       	movw	r14, r24
    1f7c:	8b 01       	movw	r16, r22
  for (int i = 0; i < s.length(); i++) {
    1f7e:	db 01       	movw	r26, r22
    1f80:	14 96       	adiw	r26, 0x04	; 4
    1f82:	8d 91       	ld	r24, X+
    1f84:	9c 91       	ld	r25, X
    1f86:	15 97       	sbiw	r26, 0x05	; 5
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	c1 f0       	breq	.+48     	; 0x1fbc <_ZN5Print5printERK6String+0x52>
    1f8c:	60 e0       	ldi	r22, 0x00	; 0
    1f8e:	70 e0       	ldi	r23, 0x00	; 0
    1f90:	c0 e0       	ldi	r28, 0x00	; 0
    1f92:	d0 e0       	ldi	r29, 0x00	; 0
    write(s[i]);
    1f94:	d7 01       	movw	r26, r14
    1f96:	ed 91       	ld	r30, X+
    1f98:	fc 91       	ld	r31, X
    1f9a:	c0 80       	ld	r12, Z
    1f9c:	d1 80       	ldd	r13, Z+1	; 0x01
    1f9e:	c8 01       	movw	r24, r16
    1fa0:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <_ZNK6StringixEj>
    1fa4:	68 2f       	mov	r22, r24
    1fa6:	c7 01       	movw	r24, r14
    1fa8:	f6 01       	movw	r30, r12
    1faa:	09 95       	icall
    write(*buffer++);
}

void Print::print(const String &s)
{
  for (int i = 0; i < s.length(); i++) {
    1fac:	21 96       	adiw	r28, 0x01	; 1
    1fae:	be 01       	movw	r22, r28
    1fb0:	f8 01       	movw	r30, r16
    1fb2:	84 81       	ldd	r24, Z+4	; 0x04
    1fb4:	95 81       	ldd	r25, Z+5	; 0x05
    1fb6:	c8 17       	cp	r28, r24
    1fb8:	d9 07       	cpc	r29, r25
    1fba:	60 f3       	brcs	.-40     	; 0x1f94 <_ZN5Print5printERK6String+0x2a>
    write(s[i]);
  }
}
    1fbc:	df 91       	pop	r29
    1fbe:	cf 91       	pop	r28
    1fc0:	1f 91       	pop	r17
    1fc2:	0f 91       	pop	r16
    1fc4:	ff 90       	pop	r15
    1fc6:	ef 90       	pop	r14
    1fc8:	df 90       	pop	r13
    1fca:	cf 90       	pop	r12
    1fcc:	08 95       	ret

00001fce <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

void Print::printNumber(unsigned long n, uint8_t base)
{
    1fce:	2f 92       	push	r2
    1fd0:	3f 92       	push	r3
    1fd2:	4f 92       	push	r4
    1fd4:	5f 92       	push	r5
    1fd6:	6f 92       	push	r6
    1fd8:	7f 92       	push	r7
    1fda:	8f 92       	push	r8
    1fdc:	9f 92       	push	r9
    1fde:	af 92       	push	r10
    1fe0:	bf 92       	push	r11
    1fe2:	cf 92       	push	r12
    1fe4:	df 92       	push	r13
    1fe6:	ef 92       	push	r14
    1fe8:	ff 92       	push	r15
    1fea:	0f 93       	push	r16
    1fec:	1f 93       	push	r17
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	a2 97       	sbiw	r28, 0x22	; 34
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	9a a3       	std	Y+34, r25	; 0x22
    2004:	89 a3       	std	Y+33, r24	; 0x21
    2006:	7a 01       	movw	r14, r20
    2008:	8b 01       	movw	r16, r22
  unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
  unsigned long i = 0;

  if (n == 0) {
    200a:	41 15       	cp	r20, r1
    200c:	51 05       	cpc	r21, r1
    200e:	61 05       	cpc	r22, r1
    2010:	71 05       	cpc	r23, r1
    2012:	09 f4       	brne	.+2      	; 0x2016 <_ZN5Print11printNumberEmh+0x48>
    2014:	55 c0       	rjmp	.+170    	; 0x20c0 <_ZN5Print11printNumberEmh+0xf2>
    print('0');
    return;
    2016:	62 2e       	mov	r6, r18
    2018:	77 24       	eor	r7, r7
    201a:	88 24       	eor	r8, r8
    201c:	99 24       	eor	r9, r9
    201e:	aa 24       	eor	r10, r10
    2020:	bb 24       	eor	r11, r11
    2022:	65 01       	movw	r12, r10
    2024:	1e 01       	movw	r2, r28
    2026:	08 94       	sec
    2028:	21 1c       	adc	r2, r1
    202a:	31 1c       	adc	r3, r1
  } 

  while (n > 0) {
    buf[i++] = n % base;
    202c:	21 01       	movw	r4, r2
    202e:	4a 0c       	add	r4, r10
    2030:	5b 1c       	adc	r5, r11
    2032:	c8 01       	movw	r24, r16
    2034:	b7 01       	movw	r22, r14
    2036:	a4 01       	movw	r20, r8
    2038:	93 01       	movw	r18, r6
    203a:	0e 94 0f 28 	call	0x501e	; 0x501e <__udivmodsi4>
    203e:	f2 01       	movw	r30, r4
    2040:	60 83       	st	Z, r22
    2042:	08 94       	sec
    2044:	a1 1c       	adc	r10, r1
    2046:	b1 1c       	adc	r11, r1
    2048:	c1 1c       	adc	r12, r1
    204a:	d1 1c       	adc	r13, r1
    n /= base;
    204c:	c8 01       	movw	r24, r16
    204e:	b7 01       	movw	r22, r14
    2050:	a4 01       	movw	r20, r8
    2052:	93 01       	movw	r18, r6
    2054:	0e 94 0f 28 	call	0x501e	; 0x501e <__udivmodsi4>
    2058:	e2 2e       	mov	r14, r18
    205a:	f3 2e       	mov	r15, r19
    205c:	04 2f       	mov	r16, r20
    205e:	15 2f       	mov	r17, r21
  if (n == 0) {
    print('0');
    return;
  } 

  while (n > 0) {
    2060:	e1 14       	cp	r14, r1
    2062:	f1 04       	cpc	r15, r1
    2064:	01 05       	cpc	r16, r1
    2066:	11 05       	cpc	r17, r1
    2068:	09 f7       	brne	.-62     	; 0x202c <_ZN5Print11printNumberEmh+0x5e>
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
    206a:	a1 14       	cp	r10, r1
    206c:	b1 04       	cpc	r11, r1
    206e:	c1 04       	cpc	r12, r1
    2070:	d1 04       	cpc	r13, r1
    2072:	71 f1       	breq	.+92     	; 0x20d0 <_ZN5Print11printNumberEmh+0x102>
    2074:	08 94       	sec
    2076:	a1 08       	sbc	r10, r1
    2078:	b1 08       	sbc	r11, r1
    207a:	c1 08       	sbc	r12, r1
    207c:	d1 08       	sbc	r13, r1
    207e:	18 c0       	rjmp	.+48     	; 0x20b0 <_ZN5Print11printNumberEmh+0xe2>
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
    2080:	40 5d       	subi	r20, 0xD0	; 208
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    2082:	50 e0       	ldi	r21, 0x00	; 0
    2084:	60 e0       	ldi	r22, 0x00	; 0
    2086:	70 e0       	ldi	r23, 0x00	; 0
    2088:	89 a1       	ldd	r24, Y+33	; 0x21
    208a:	9a a1       	ldd	r25, Y+34	; 0x22
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	0e 94 9f 10 	call	0x213e	; 0x213e <_ZN5Print5printEli>
    2094:	08 94       	sec
    2096:	a1 08       	sbc	r10, r1
    2098:	b1 08       	sbc	r11, r1
    209a:	c1 08       	sbc	r12, r1
    209c:	d1 08       	sbc	r13, r1
  while (n > 0) {
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
    209e:	ff ef       	ldi	r31, 0xFF	; 255
    20a0:	af 16       	cp	r10, r31
    20a2:	ff ef       	ldi	r31, 0xFF	; 255
    20a4:	bf 06       	cpc	r11, r31
    20a6:	ff ef       	ldi	r31, 0xFF	; 255
    20a8:	cf 06       	cpc	r12, r31
    20aa:	ff ef       	ldi	r31, 0xFF	; 255
    20ac:	df 06       	cpc	r13, r31
    20ae:	81 f0       	breq	.+32     	; 0x20d0 <_ZN5Print11printNumberEmh+0x102>
    print((char) (buf[i - 1] < 10 ?
    20b0:	f1 01       	movw	r30, r2
    20b2:	ea 0d       	add	r30, r10
    20b4:	fb 1d       	adc	r31, r11
    20b6:	40 81       	ld	r20, Z
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
    20b8:	4a 30       	cpi	r20, 0x0A	; 10
    20ba:	10 f3       	brcs	.-60     	; 0x2080 <_ZN5Print11printNumberEmh+0xb2>
    20bc:	49 5c       	subi	r20, 0xC9	; 201
    20be:	e1 cf       	rjmp	.-62     	; 0x2082 <_ZN5Print11printNumberEmh+0xb4>
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    20c0:	40 e3       	ldi	r20, 0x30	; 48
    20c2:	50 e0       	ldi	r21, 0x00	; 0
    20c4:	60 e0       	ldi	r22, 0x00	; 0
    20c6:	70 e0       	ldi	r23, 0x00	; 0
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	0e 94 9f 10 	call	0x213e	; 0x213e <_ZN5Print5printEli>

  for (; i > 0; i--)
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}
    20d0:	a2 96       	adiw	r28, 0x22	; 34
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	1f 91       	pop	r17
    20e2:	0f 91       	pop	r16
    20e4:	ff 90       	pop	r15
    20e6:	ef 90       	pop	r14
    20e8:	df 90       	pop	r13
    20ea:	cf 90       	pop	r12
    20ec:	bf 90       	pop	r11
    20ee:	af 90       	pop	r10
    20f0:	9f 90       	pop	r9
    20f2:	8f 90       	pop	r8
    20f4:	7f 90       	pop	r7
    20f6:	6f 90       	pop	r6
    20f8:	5f 90       	pop	r5
    20fa:	4f 90       	pop	r4
    20fc:	3f 90       	pop	r3
    20fe:	2f 90       	pop	r2
    2100:	08 95       	ret

00002102 <_ZN5Print5printEmi>:
  }
}

void Print::print(unsigned long n, int base)
{
  if (base == 0) write(n);
    2102:	21 15       	cp	r18, r1
    2104:	31 05       	cpc	r19, r1
    2106:	19 f0       	breq	.+6      	; 0x210e <_ZN5Print5printEmi+0xc>
  else printNumber(n, base);
    2108:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <_ZN5Print11printNumberEmh>
    210c:	08 95       	ret
  }
}

void Print::print(unsigned long n, int base)
{
  if (base == 0) write(n);
    210e:	dc 01       	movw	r26, r24
    2110:	ed 91       	ld	r30, X+
    2112:	fc 91       	ld	r31, X
    2114:	01 90       	ld	r0, Z+
    2116:	f0 81       	ld	r31, Z
    2118:	e0 2d       	mov	r30, r0
    211a:	64 2f       	mov	r22, r20
    211c:	09 95       	icall
    211e:	08 95       	ret

00002120 <_ZN5Print5printEji>:
{
  print((long) n, base);
}

void Print::print(unsigned int n, int base)
{
    2120:	9a 01       	movw	r18, r20
  print((unsigned long) n, base);
    2122:	ab 01       	movw	r20, r22
    2124:	60 e0       	ldi	r22, 0x00	; 0
    2126:	70 e0       	ldi	r23, 0x00	; 0
    2128:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEmi>
}
    212c:	08 95       	ret

0000212e <_ZN5Print5printEhi>:
{
  print((long) c, base);
}

void Print::print(unsigned char b, int base)
{
    212e:	9a 01       	movw	r18, r20
  print((unsigned long) b, base);
    2130:	46 2f       	mov	r20, r22
    2132:	50 e0       	ldi	r21, 0x00	; 0
    2134:	60 e0       	ldi	r22, 0x00	; 0
    2136:	70 e0       	ldi	r23, 0x00	; 0
    2138:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEmi>
}
    213c:	08 95       	ret

0000213e <_ZN5Print5printEli>:
{
  print((unsigned long) n, base);
}

void Print::print(long n, int base)
{
    213e:	ef 92       	push	r14
    2140:	ff 92       	push	r15
    2142:	0f 93       	push	r16
    2144:	1f 93       	push	r17
    2146:	cf 93       	push	r28
    2148:	df 93       	push	r29
    214a:	ec 01       	movw	r28, r24
    214c:	7a 01       	movw	r14, r20
    214e:	8b 01       	movw	r16, r22
  if (base == 0) {
    2150:	21 15       	cp	r18, r1
    2152:	31 05       	cpc	r19, r1
    2154:	d9 f0       	breq	.+54     	; 0x218c <_ZN5Print5printEli+0x4e>
    write(n);
  } else if (base == 10) {
    2156:	2a 30       	cpi	r18, 0x0A	; 10
    2158:	31 05       	cpc	r19, r1
    215a:	49 f0       	breq	.+18     	; 0x216e <_ZN5Print5printEli+0x30>
      print('-');
      n = -n;
    }
    printNumber(n, 10);
  } else {
    printNumber(n, base);
    215c:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <_ZN5Print11printNumberEmh>
  }
}
    2160:	df 91       	pop	r29
    2162:	cf 91       	pop	r28
    2164:	1f 91       	pop	r17
    2166:	0f 91       	pop	r16
    2168:	ff 90       	pop	r15
    216a:	ef 90       	pop	r14
    216c:	08 95       	ret
void Print::print(long n, int base)
{
  if (base == 0) {
    write(n);
  } else if (base == 10) {
    if (n < 0) {
    216e:	77 fd       	sbrc	r23, 7
    2170:	1b c0       	rjmp	.+54     	; 0x21a8 <_ZN5Print5printEli+0x6a>
      print('-');
      n = -n;
    }
    printNumber(n, 10);
    2172:	ce 01       	movw	r24, r28
    2174:	b8 01       	movw	r22, r16
    2176:	a7 01       	movw	r20, r14
    2178:	2a e0       	ldi	r18, 0x0A	; 10
    217a:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <_ZN5Print11printNumberEmh>
  } else {
    printNumber(n, base);
  }
}
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	1f 91       	pop	r17
    2184:	0f 91       	pop	r16
    2186:	ff 90       	pop	r15
    2188:	ef 90       	pop	r14
    218a:	08 95       	ret
}

void Print::print(long n, int base)
{
  if (base == 0) {
    write(n);
    218c:	e8 81       	ld	r30, Y
    218e:	f9 81       	ldd	r31, Y+1	; 0x01
    2190:	01 90       	ld	r0, Z+
    2192:	f0 81       	ld	r31, Z
    2194:	e0 2d       	mov	r30, r0
    2196:	64 2f       	mov	r22, r20
    2198:	09 95       	icall
    }
    printNumber(n, 10);
  } else {
    printNumber(n, base);
  }
}
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	1f 91       	pop	r17
    21a0:	0f 91       	pop	r16
    21a2:	ff 90       	pop	r15
    21a4:	ef 90       	pop	r14
    21a6:	08 95       	ret
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    21a8:	4d e2       	ldi	r20, 0x2D	; 45
    21aa:	50 e0       	ldi	r21, 0x00	; 0
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	70 e0       	ldi	r23, 0x00	; 0
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	0e 94 9f 10 	call	0x213e	; 0x213e <_ZN5Print5printEli>
  if (base == 0) {
    write(n);
  } else if (base == 10) {
    if (n < 0) {
      print('-');
      n = -n;
    21b8:	10 95       	com	r17
    21ba:	00 95       	com	r16
    21bc:	f0 94       	com	r15
    21be:	e0 94       	com	r14
    21c0:	e1 1c       	adc	r14, r1
    21c2:	f1 1c       	adc	r15, r1
    21c4:	01 1d       	adc	r16, r1
    21c6:	11 1d       	adc	r17, r1
    21c8:	d4 cf       	rjmp	.-88     	; 0x2172 <_ZN5Print5printEli+0x34>

000021ca <_ZN5Print5printEii>:
{
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
{
    21ca:	ef 92       	push	r14
    21cc:	ff 92       	push	r15
    21ce:	0f 93       	push	r16
    21d0:	1f 93       	push	r17
    21d2:	9a 01       	movw	r18, r20
  print((long) n, base);
    21d4:	7b 01       	movw	r14, r22
    21d6:	00 27       	eor	r16, r16
    21d8:	f7 fc       	sbrc	r15, 7
    21da:	00 95       	com	r16
    21dc:	10 2f       	mov	r17, r16
    21de:	b8 01       	movw	r22, r16
    21e0:	a7 01       	movw	r20, r14
    21e2:	0e 94 9f 10 	call	0x213e	; 0x213e <_ZN5Print5printEli>
}
    21e6:	1f 91       	pop	r17
    21e8:	0f 91       	pop	r16
    21ea:	ff 90       	pop	r15
    21ec:	ef 90       	pop	r14
    21ee:	08 95       	ret

000021f0 <_ZN5Print5printEci>:
{
  write(str);
}

void Print::print(char c, int base)
{
    21f0:	9a 01       	movw	r18, r20
  print((long) c, base);
    21f2:	46 2f       	mov	r20, r22
    21f4:	50 e0       	ldi	r21, 0x00	; 0
    21f6:	60 e0       	ldi	r22, 0x00	; 0
    21f8:	70 e0       	ldi	r23, 0x00	; 0
    21fa:	0e 94 9f 10 	call	0x213e	; 0x213e <_ZN5Print5printEli>
}
    21fe:	08 95       	ret

00002200 <_ZN5Print7printlnEv>:
{
  printFloat(n, digits);
}

void Print::println(void)
{
    2200:	cf 93       	push	r28
    2202:	df 93       	push	r29
    2204:	ec 01       	movw	r28, r24
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    2206:	4d e0       	ldi	r20, 0x0D	; 13
    2208:	50 e0       	ldi	r21, 0x00	; 0
    220a:	60 e0       	ldi	r22, 0x00	; 0
    220c:	70 e0       	ldi	r23, 0x00	; 0
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	0e 94 9f 10 	call	0x213e	; 0x213e <_ZN5Print5printEli>
    2216:	ce 01       	movw	r24, r28
    2218:	4a e0       	ldi	r20, 0x0A	; 10
    221a:	50 e0       	ldi	r21, 0x00	; 0
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	70 e0       	ldi	r23, 0x00	; 0
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	0e 94 9f 10 	call	0x213e	; 0x213e <_ZN5Print5printEli>

void Print::println(void)
{
  print('\r');
  print('\n');  
}
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	08 95       	ret

0000222e <_ZN5Print7printlnEmi>:
  print(n, base);
  println();
}

void Print::println(unsigned long n, int base)
{
    222e:	cf 93       	push	r28
    2230:	df 93       	push	r29
    2232:	ec 01       	movw	r28, r24
  print(n, base);
    2234:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEmi>
  println();
    2238:	ce 01       	movw	r24, r28
    223a:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN5Print7printlnEv>
}
    223e:	df 91       	pop	r29
    2240:	cf 91       	pop	r28
    2242:	08 95       	ret

00002244 <_ZN5Print7printlnEji>:
  print(n, base);
  println();
}

void Print::println(unsigned int n, int base)
{
    2244:	cf 93       	push	r28
    2246:	df 93       	push	r29
    2248:	ec 01       	movw	r28, r24
    224a:	9a 01       	movw	r18, r20
  print((long) n, base);
}

void Print::print(unsigned int n, int base)
{
  print((unsigned long) n, base);
    224c:	ab 01       	movw	r20, r22
    224e:	60 e0       	ldi	r22, 0x00	; 0
    2250:	70 e0       	ldi	r23, 0x00	; 0
    2252:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEmi>
}

void Print::println(unsigned int n, int base)
{
  print(n, base);
  println();
    2256:	ce 01       	movw	r24, r28
    2258:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN5Print7printlnEv>
}
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	08 95       	ret

00002262 <_ZN5Print7printlnEhi>:
  print(c, base);
  println();
}

void Print::println(unsigned char b, int base)
{
    2262:	cf 93       	push	r28
    2264:	df 93       	push	r29
    2266:	ec 01       	movw	r28, r24
    2268:	9a 01       	movw	r18, r20
  print((long) c, base);
}

void Print::print(unsigned char b, int base)
{
  print((unsigned long) b, base);
    226a:	46 2f       	mov	r20, r22
    226c:	50 e0       	ldi	r21, 0x00	; 0
    226e:	60 e0       	ldi	r22, 0x00	; 0
    2270:	70 e0       	ldi	r23, 0x00	; 0
    2272:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEmi>
}

void Print::println(unsigned char b, int base)
{
  print(b, base);
  println();
    2276:	ce 01       	movw	r24, r28
    2278:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN5Print7printlnEv>
}
    227c:	df 91       	pop	r29
    227e:	cf 91       	pop	r28
    2280:	08 95       	ret

00002282 <_ZN5Print7printlnEPKc>:
  print(s);
  println();
}

void Print::println(const char c[])
{
    2282:	cf 93       	push	r28
    2284:	df 93       	push	r29
    2286:	ec 01       	movw	r28, r24
  print(c);
    2288:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <_ZN5Print5printEPKc>
  println();
    228c:	ce 01       	movw	r24, r28
    228e:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN5Print7printlnEv>
}
    2292:	df 91       	pop	r29
    2294:	cf 91       	pop	r28
    2296:	08 95       	ret

00002298 <_ZN5Print7printlnERK6String>:
  print('\r');
  print('\n');  
}

void Print::println(const String &s)
{
    2298:	cf 93       	push	r28
    229a:	df 93       	push	r29
    229c:	ec 01       	movw	r28, r24
  print(s);
    229e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <_ZN5Print5printERK6String>
  println();
    22a2:	ce 01       	movw	r24, r28
    22a4:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN5Print7printlnEv>
}
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	08 95       	ret

000022ae <_ZN5Print7printlnEli>:
  print(n, base);
  println();
}

void Print::println(long n, int base)
{
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29
    22b2:	ec 01       	movw	r28, r24
  print(n, base);
    22b4:	0e 94 9f 10 	call	0x213e	; 0x213e <_ZN5Print5printEli>
  println();
    22b8:	ce 01       	movw	r24, r28
    22ba:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN5Print7printlnEv>
}
    22be:	df 91       	pop	r29
    22c0:	cf 91       	pop	r28
    22c2:	08 95       	ret

000022c4 <_ZN5Print7printlnEii>:
  print(b, base);
  println();
}

void Print::println(int n, int base)
{
    22c4:	cf 93       	push	r28
    22c6:	df 93       	push	r29
    22c8:	ec 01       	movw	r28, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	9a 01       	movw	r18, r20
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
{
  print((long) n, base);
    22ce:	ac 01       	movw	r20, r24
    22d0:	66 27       	eor	r22, r22
    22d2:	57 fd       	sbrc	r21, 7
    22d4:	60 95       	com	r22
    22d6:	76 2f       	mov	r23, r22
    22d8:	ce 01       	movw	r24, r28
    22da:	0e 94 9f 10 	call	0x213e	; 0x213e <_ZN5Print5printEli>
}

void Print::println(int n, int base)
{
  print(n, base);
  println();
    22de:	ce 01       	movw	r24, r28
    22e0:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN5Print7printlnEv>
}
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	08 95       	ret

000022ea <_ZN5Print7printlnEci>:
  print(c);
  println();
}

void Print::println(char c, int base)
{
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	ec 01       	movw	r28, r24
    22f0:	9a 01       	movw	r18, r20
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    22f2:	46 2f       	mov	r20, r22
    22f4:	50 e0       	ldi	r21, 0x00	; 0
    22f6:	60 e0       	ldi	r22, 0x00	; 0
    22f8:	70 e0       	ldi	r23, 0x00	; 0
    22fa:	0e 94 9f 10 	call	0x213e	; 0x213e <_ZN5Print5printEli>
}

void Print::println(char c, int base)
{
  print(c, base);
  println();
    22fe:	ce 01       	movw	r24, r28
    2300:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN5Print7printlnEv>
}
    2304:	df 91       	pop	r29
    2306:	cf 91       	pop	r28
    2308:	08 95       	ret

0000230a <_ZN5Print10printFloatEdh>:
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}

void Print::printFloat(double number, uint8_t digits) 
{ 
    230a:	9f 92       	push	r9
    230c:	af 92       	push	r10
    230e:	bf 92       	push	r11
    2310:	cf 92       	push	r12
    2312:	df 92       	push	r13
    2314:	ef 92       	push	r14
    2316:	ff 92       	push	r15
    2318:	0f 93       	push	r16
    231a:	1f 93       	push	r17
    231c:	cf 93       	push	r28
    231e:	df 93       	push	r29
    2320:	ec 01       	movw	r28, r24
    2322:	6a 01       	movw	r12, r20
    2324:	7b 01       	movw	r14, r22
    2326:	12 2f       	mov	r17, r18
  // Handle negative numbers
  if (number < 0.0)
    2328:	cb 01       	movw	r24, r22
    232a:	ba 01       	movw	r22, r20
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	a9 01       	movw	r20, r18
    2332:	0e 94 9b 24 	call	0x4936	; 0x4936 <__ltsf2>
    2336:	88 23       	and	r24, r24
    2338:	0c f4       	brge	.+2      	; 0x233c <_ZN5Print10printFloatEdh+0x32>
    233a:	83 c0       	rjmp	.+262    	; 0x2442 <_ZN5Print10printFloatEdh+0x138>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    233c:	11 23       	and	r17, r17
    233e:	09 f4       	brne	.+2      	; 0x2342 <_ZN5Print10printFloatEdh+0x38>
    2340:	8e c0       	rjmp	.+284    	; 0x245e <_ZN5Print10printFloatEdh+0x154>
    2342:	00 e0       	ldi	r16, 0x00	; 0
    2344:	50 e0       	ldi	r21, 0x00	; 0
    2346:	40 e0       	ldi	r20, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	2f e3       	ldi	r18, 0x3F	; 63
    rounding /= 10.0;
    234c:	da 01       	movw	r26, r20
    234e:	f9 01       	movw	r30, r18
    2350:	6b 2f       	mov	r22, r27
    2352:	74 2f       	mov	r23, r20
    2354:	8f 2f       	mov	r24, r31
    2356:	92 2f       	mov	r25, r18
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	40 e2       	ldi	r20, 0x20	; 32
    235e:	51 e4       	ldi	r21, 0x41	; 65
    2360:	0e 94 bd 23 	call	0x477a	; 0x477a <__divsf3>
    2364:	56 2f       	mov	r21, r22
    2366:	47 2f       	mov	r20, r23
    2368:	38 2f       	mov	r19, r24
    236a:	29 2f       	mov	r18, r25
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    236c:	0f 5f       	subi	r16, 0xFF	; 255
    236e:	01 17       	cp	r16, r17
    2370:	68 f3       	brcs	.-38     	; 0x234c <_ZN5Print10printFloatEdh+0x42>
    rounding /= 10.0;
  
  number += rounding;
    2372:	c7 01       	movw	r24, r14
    2374:	b6 01       	movw	r22, r12
    2376:	da 01       	movw	r26, r20
    2378:	f9 01       	movw	r30, r18
    237a:	2b 2f       	mov	r18, r27
    237c:	3a 2f       	mov	r19, r26
    237e:	4f 2f       	mov	r20, r31
    2380:	5e 2f       	mov	r21, r30
    2382:	0e 94 98 22 	call	0x4530	; 0x4530 <__addsf3>
    2386:	5b 01       	movw	r10, r22
    2388:	c8 2e       	mov	r12, r24
    238a:	09 2f       	mov	r16, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    238c:	7b 2d       	mov	r23, r11
    238e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <__fixunssfsi>
    2392:	96 2e       	mov	r9, r22
    2394:	f7 2e       	mov	r15, r23
    2396:	e8 2e       	mov	r14, r24
    2398:	d9 2e       	mov	r13, r25
  double remainder = number - (double)int_part;
    239a:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__floatunsisf>
    239e:	9b 01       	movw	r18, r22
    23a0:	ac 01       	movw	r20, r24
    23a2:	6a 2d       	mov	r22, r10
    23a4:	7b 2d       	mov	r23, r11
    23a6:	8c 2d       	mov	r24, r12
    23a8:	90 2f       	mov	r25, r16
    23aa:	0e 94 67 22 	call	0x44ce	; 0x44ce <__subsf3>
    23ae:	5b 01       	movw	r10, r22
    23b0:	c8 2e       	mov	r12, r24
    23b2:	09 2f       	mov	r16, r25
  print(int_part);
    23b4:	ce 01       	movw	r24, r28
    23b6:	49 2d       	mov	r20, r9
    23b8:	5f 2d       	mov	r21, r15
    23ba:	6e 2d       	mov	r22, r14
    23bc:	7d 2d       	mov	r23, r13
    23be:	2a e0       	ldi	r18, 0x0A	; 10
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEmi>

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    print("."); 
    23c6:	ce 01       	movw	r24, r28
    23c8:	6d eb       	ldi	r22, 0xBD	; 189
    23ca:	71 e0       	ldi	r23, 0x01	; 1
    23cc:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <_ZN5Print5printEPKc>

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    23d0:	6a 2d       	mov	r22, r10
    23d2:	7b 2d       	mov	r23, r11
    23d4:	8c 2d       	mov	r24, r12
    23d6:	90 2f       	mov	r25, r16
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e2       	ldi	r20, 0x20	; 32
    23de:	51 e4       	ldi	r21, 0x41	; 65
    23e0:	0e 94 c5 22 	call	0x458a	; 0x458a <__mulsf3>
    23e4:	06 2f       	mov	r16, r22
    23e6:	b7 2e       	mov	r11, r23
    23e8:	a8 2e       	mov	r10, r24
    23ea:	99 2e       	mov	r9, r25
    int toPrint = int(remainder);
    23ec:	0e 94 28 25 	call	0x4a50	; 0x4a50 <__fixsfsi>
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
{
  print((long) n, base);
    23f0:	6b 01       	movw	r12, r22
    23f2:	ee 24       	eor	r14, r14
    23f4:	d7 fc       	sbrc	r13, 7
    23f6:	e0 94       	com	r14
    23f8:	fe 2c       	mov	r15, r14
    23fa:	ce 01       	movw	r24, r28
    23fc:	b7 01       	movw	r22, r14
    23fe:	a6 01       	movw	r20, r12
    2400:	2a e0       	ldi	r18, 0x0A	; 10
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	0e 94 9f 10 	call	0x213e	; 0x213e <_ZN5Print5printEli>
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
    2408:	c7 01       	movw	r24, r14
    240a:	b6 01       	movw	r22, r12
    240c:	0e 94 cb 24 	call	0x4996	; 0x4996 <__floatsisf>
    2410:	9b 01       	movw	r18, r22
    2412:	ac 01       	movw	r20, r24
    2414:	60 2f       	mov	r22, r16
    2416:	7b 2d       	mov	r23, r11
    2418:	8a 2d       	mov	r24, r10
    241a:	99 2d       	mov	r25, r9
    241c:	0e 94 67 22 	call	0x44ce	; 0x44ce <__subsf3>
    2420:	5b 01       	movw	r10, r22
    2422:	c8 2e       	mov	r12, r24
    2424:	09 2f       	mov	r16, r25
    2426:	11 50       	subi	r17, 0x01	; 1
  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    print("."); 

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2428:	99 f6       	brne	.-90     	; 0x23d0 <_ZN5Print10printFloatEdh+0xc6>
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
  } 
}
    242a:	df 91       	pop	r29
    242c:	cf 91       	pop	r28
    242e:	1f 91       	pop	r17
    2430:	0f 91       	pop	r16
    2432:	ff 90       	pop	r15
    2434:	ef 90       	pop	r14
    2436:	df 90       	pop	r13
    2438:	cf 90       	pop	r12
    243a:	bf 90       	pop	r11
    243c:	af 90       	pop	r10
    243e:	9f 90       	pop	r9
    2440:	08 95       	ret
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    2442:	ce 01       	movw	r24, r28
    2444:	4d e2       	ldi	r20, 0x2D	; 45
    2446:	50 e0       	ldi	r21, 0x00	; 0
    2448:	60 e0       	ldi	r22, 0x00	; 0
    244a:	70 e0       	ldi	r23, 0x00	; 0
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	0e 94 9f 10 	call	0x213e	; 0x213e <_ZN5Print5printEli>
{ 
  // Handle negative numbers
  if (number < 0.0)
  {
     print('-');
     number = -number;
    2454:	f7 fa       	bst	r15, 7
    2456:	f0 94       	com	r15
    2458:	f7 f8       	bld	r15, 7
    245a:	f0 94       	com	r15
    245c:	6f cf       	rjmp	.-290    	; 0x233c <_ZN5Print10printFloatEdh+0x32>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  print(int_part);
    245e:	c7 01       	movw	r24, r14
    2460:	b6 01       	movw	r22, r12
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	40 e0       	ldi	r20, 0x00	; 0
    2468:	5f e3       	ldi	r21, 0x3F	; 63
    246a:	0e 94 98 22 	call	0x4530	; 0x4530 <__addsf3>
    246e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <__fixunssfsi>
    2472:	ab 01       	movw	r20, r22
    2474:	bc 01       	movw	r22, r24
    2476:	ce 01       	movw	r24, r28
    2478:	2a e0       	ldi	r18, 0x0A	; 10
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN5Print5printEmi>
    2480:	d4 cf       	rjmp	.-88     	; 0x242a <_ZN5Print10printFloatEdh+0x120>

00002482 <_ZN5Print5printEdi>:
  else printNumber(n, base);
}

void Print::print(double n, int digits)
{
  printFloat(n, digits);
    2482:	0e 94 85 11 	call	0x230a	; 0x230a <_ZN5Print10printFloatEdh>
}
    2486:	08 95       	ret

00002488 <_ZN5Print7printlnEdi>:
  print(n, base);
  println();
}

void Print::println(double n, int digits)
{
    2488:	cf 93       	push	r28
    248a:	df 93       	push	r29
    248c:	ec 01       	movw	r28, r24
  else printNumber(n, base);
}

void Print::print(double n, int digits)
{
  printFloat(n, digits);
    248e:	0e 94 85 11 	call	0x230a	; 0x230a <_ZN5Print10printFloatEdh>
}

void Print::println(double n, int digits)
{
  print(n, digits);
  println();
    2492:	ce 01       	movw	r24, r28
    2494:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN5Print7printlnEv>
}
    2498:	df 91       	pop	r29
    249a:	cf 91       	pop	r28
    249c:	08 95       	ret

0000249e <_ZN7TwoWireC2Ev>:

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
{
}
    249e:	08 95       	ret

000024a0 <_ZN7TwoWireC1Ev>:
    24a0:	08 95       	ret

000024a2 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	80 93 1e 07 	sts	0x071E, r24
  // set address of targeted slave
  txAddress = address;
    24a8:	60 93 fb 06 	sts	0x06FB, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    24ac:	10 92 1c 07 	sts	0x071C, r1
  txBufferLength = 0;
    24b0:	10 92 1d 07 	sts	0x071D, r1
}
    24b4:	08 95       	ret

000024b6 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	80 93 1e 07 	sts	0x071E, r24
  // set address of targeted slave
  txAddress = address;
    24bc:	60 93 fb 06 	sts	0x06FB, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    24c0:	10 92 1c 07 	sts	0x071C, r1
  txBufferLength = 0;
    24c4:	10 92 1d 07 	sts	0x071D, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    24c8:	08 95       	ret

000024ca <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
uint8_t TwoWire::available(void)
{
    24ca:	80 91 fa 06 	lds	r24, 0x06FA
    24ce:	90 91 f9 06 	lds	r25, 0x06F9
  return rxBufferLength - rxBufferIndex;
}
    24d2:	89 1b       	sub	r24, r25
    24d4:	08 95       	ret

000024d6 <_ZN7TwoWire7receiveEv>:
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    24d6:	90 91 f9 06 	lds	r25, 0x06F9
    24da:	80 91 fa 06 	lds	r24, 0x06FA
    24de:	98 17       	cp	r25, r24
    24e0:	48 f4       	brcc	.+18     	; 0x24f4 <_ZN7TwoWire7receiveEv+0x1e>
    value = rxBuffer[rxBufferIndex];
    24e2:	e9 2f       	mov	r30, r25
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	e7 52       	subi	r30, 0x27	; 39
    24e8:	f9 4f       	sbci	r31, 0xF9	; 249
    24ea:	80 81       	ld	r24, Z
    ++rxBufferIndex;
    24ec:	9f 5f       	subi	r25, 0xFF	; 255
    24ee:	90 93 f9 06 	sts	0x06F9, r25
  }

  return value;
}
    24f2:	08 95       	ret
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	08 95       	ret

000024f8 <_ZN7TwoWire16onReceiveServiceEPhi>:
  return value;
}

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
    24f8:	cf 93       	push	r28
    24fa:	df 93       	push	r29
    24fc:	9c 01       	movw	r18, r24
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    24fe:	e0 91 21 07 	lds	r30, 0x0721
    2502:	f0 91 22 07 	lds	r31, 0x0722
    2506:	30 97       	sbiw	r30, 0x00	; 0
    2508:	11 f1       	breq	.+68     	; 0x254e <_ZN7TwoWire16onReceiveServiceEPhi+0x56>
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    250a:	90 91 f9 06 	lds	r25, 0x06F9
    250e:	80 91 fa 06 	lds	r24, 0x06FA
    2512:	98 17       	cp	r25, r24
    2514:	e0 f0       	brcs	.+56     	; 0x254e <_ZN7TwoWire16onReceiveServiceEPhi+0x56>
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2516:	16 16       	cp	r1, r22
    2518:	17 06       	cpc	r1, r23
    251a:	9c f4       	brge	.+38     	; 0x2542 <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
    251c:	a0 e0       	ldi	r26, 0x00	; 0
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	40 e0       	ldi	r20, 0x00	; 0
    2524:	50 e0       	ldi	r21, 0x00	; 0
    rxBuffer[i] = inBytes[i];    
    2526:	a7 52       	subi	r26, 0x27	; 39
    2528:	b9 4f       	sbci	r27, 0xF9	; 249
    252a:	42 0f       	add	r20, r18
    252c:	53 1f       	adc	r21, r19
    252e:	ea 01       	movw	r28, r20
    2530:	48 81       	ld	r20, Y
    2532:	4c 93       	st	X, r20
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2534:	9f 5f       	subi	r25, 0xFF	; 255
    2536:	49 2f       	mov	r20, r25
    2538:	50 e0       	ldi	r21, 0x00	; 0
    253a:	da 01       	movw	r26, r20
    253c:	46 17       	cp	r20, r22
    253e:	57 07       	cpc	r21, r23
    2540:	94 f3       	brlt	.-28     	; 0x2526 <_ZN7TwoWire16onReceiveServiceEPhi+0x2e>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
    2542:	10 92 f9 06 	sts	0x06F9, r1
  rxBufferLength = numBytes;
    2546:	60 93 fa 06 	sts	0x06FA, r22
  // alert user program
  user_onReceive(numBytes);
    254a:	cb 01       	movw	r24, r22
    254c:	09 95       	icall
}
    254e:	df 91       	pop	r29
    2550:	cf 91       	pop	r28
    2552:	08 95       	ret

00002554 <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    2554:	e0 91 1f 07 	lds	r30, 0x071F
    2558:	f0 91 20 07 	lds	r31, 0x0720
    255c:	30 97       	sbiw	r30, 0x00	; 0
    255e:	29 f0       	breq	.+10     	; 0x256a <_ZN7TwoWire16onRequestServiceEv+0x16>
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
    2560:	10 92 1c 07 	sts	0x071C, r1
  txBufferLength = 0;
    2564:	10 92 1d 07 	sts	0x071D, r1
  // alert user program
  user_onRequest();
    2568:	09 95       	icall
    256a:	08 95       	ret

0000256c <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  user_onReceive = function;
    256c:	70 93 22 07 	sts	0x0722, r23
    2570:	60 93 21 07 	sts	0x0721, r22
}
    2574:	08 95       	ret

00002576 <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2576:	70 93 20 07 	sts	0x0720, r23
    257a:	60 93 1f 07 	sts	0x071F, r22
}
    257e:	08 95       	ret

00002580 <_ZN7TwoWire4sendEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(uint8_t data)
{
    2580:	df 93       	push	r29
    2582:	cf 93       	push	r28
    2584:	0f 92       	push	r0
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
    258a:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    258c:	80 91 1e 07 	lds	r24, 0x071E
    2590:	88 23       	and	r24, r24
    2592:	c1 f0       	breq	.+48     	; 0x25c4 <_ZN7TwoWire4sendEh+0x44>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    2594:	80 91 1d 07 	lds	r24, 0x071D
    2598:	80 32       	cpi	r24, 0x20	; 32
    259a:	20 f0       	brcs	.+8      	; 0x25a4 <_ZN7TwoWire4sendEh+0x24>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
}
    259c:	0f 90       	pop	r0
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	08 95       	ret
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
      return;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    25a4:	80 91 1c 07 	lds	r24, 0x071C
    25a8:	e8 2f       	mov	r30, r24
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	e4 50       	subi	r30, 0x04	; 4
    25ae:	f9 4f       	sbci	r31, 0xF9	; 249
    25b0:	60 83       	st	Z, r22
    ++txBufferIndex;
    25b2:	8f 5f       	subi	r24, 0xFF	; 255
    25b4:	80 93 1c 07 	sts	0x071C, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    25b8:	80 93 1d 07 	sts	0x071D, r24
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
}
    25bc:	0f 90       	pop	r0
    25be:	cf 91       	pop	r28
    25c0:	df 91       	pop	r29
    25c2:	08 95       	ret
    // update amount in buffer   
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    25c4:	ce 01       	movw	r24, r28
    25c6:	01 96       	adiw	r24, 0x01	; 1
    25c8:	61 e0       	ldi	r22, 0x01	; 1
    25ca:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <twi_transmit>
  }
}
    25ce:	0f 90       	pop	r0
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <_ZN7TwoWire4sendEi>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(int data)
{
  send((uint8_t)data);
    25d6:	0e 94 c0 12 	call	0x2580	; 0x2580 <_ZN7TwoWire4sendEh>
}
    25da:	08 95       	ret

000025dc <_ZN7TwoWire4sendEPhh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(uint8_t* data, uint8_t quantity)
{
    25dc:	ef 92       	push	r14
    25de:	ff 92       	push	r15
    25e0:	0f 93       	push	r16
    25e2:	1f 93       	push	r17
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
    25e8:	ec 01       	movw	r28, r24
    25ea:	16 2f       	mov	r17, r22
    25ec:	04 2f       	mov	r16, r20
  if(transmitting){
    25ee:	80 91 1e 07 	lds	r24, 0x071E
    25f2:	88 23       	and	r24, r24
    25f4:	a9 f0       	breq	.+42     	; 0x2620 <_ZN7TwoWire4sendEPhh+0x44>
  // in master transmitter mode
    for(uint8_t i = 0; i < quantity; ++i){
    25f6:	44 23       	and	r20, r20
    25f8:	61 f0       	breq	.+24     	; 0x2612 <_ZN7TwoWire4sendEPhh+0x36>
    25fa:	e6 2e       	mov	r14, r22
    25fc:	f7 2e       	mov	r15, r23
      send(data[i]);
    25fe:	ce 01       	movw	r24, r28
    2600:	f7 01       	movw	r30, r14
    2602:	61 91       	ld	r22, Z+
    2604:	7f 01       	movw	r14, r30
    2606:	0e 94 c0 12 	call	0x2580	; 0x2580 <_ZN7TwoWire4sendEh>
// or after beginTransmission(address)
void TwoWire::send(uint8_t* data, uint8_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(uint8_t i = 0; i < quantity; ++i){
    260a:	8e 2d       	mov	r24, r14
    260c:	81 1b       	sub	r24, r17
    260e:	80 17       	cp	r24, r16
    2610:	b0 f3       	brcs	.-20     	; 0x25fe <_ZN7TwoWire4sendEPhh+0x22>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
  }
}
    2612:	df 91       	pop	r29
    2614:	cf 91       	pop	r28
    2616:	1f 91       	pop	r17
    2618:	0f 91       	pop	r16
    261a:	ff 90       	pop	r15
    261c:	ef 90       	pop	r14
    261e:	08 95       	ret
      send(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    2620:	86 2f       	mov	r24, r22
    2622:	97 2f       	mov	r25, r23
    2624:	64 2f       	mov	r22, r20
    2626:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <twi_transmit>
  }
}
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	1f 91       	pop	r17
    2630:	0f 91       	pop	r16
    2632:	ff 90       	pop	r15
    2634:	ef 90       	pop	r14
    2636:	08 95       	ret

00002638 <_ZN7TwoWire4sendEPc>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(char* data)
{
  send((uint8_t*)data, strlen(data));
    2638:	db 01       	movw	r26, r22
    263a:	0d 90       	ld	r0, X+
    263c:	00 20       	and	r0, r0
    263e:	e9 f7       	brne	.-6      	; 0x263a <_ZN7TwoWire4sendEPc+0x2>
    2640:	ad 01       	movw	r20, r26
    2642:	41 50       	subi	r20, 0x01	; 1
    2644:	50 40       	sbci	r21, 0x00	; 0
    2646:	46 1b       	sub	r20, r22
    2648:	57 0b       	sbc	r21, r23
    264a:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_ZN7TwoWire4sendEPhh>
}
    264e:	08 95       	ret

00002650 <_ZN7TwoWire15endTransmissionEv>:
}

uint8_t TwoWire::endTransmission(void)
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1);
    2650:	80 91 fb 06 	lds	r24, 0x06FB
    2654:	6c ef       	ldi	r22, 0xFC	; 252
    2656:	76 e0       	ldi	r23, 0x06	; 6
    2658:	40 91 1d 07 	lds	r20, 0x071D
    265c:	21 e0       	ldi	r18, 0x01	; 1
    265e:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2662:	10 92 1c 07 	sts	0x071C, r1
  txBufferLength = 0;
    2666:	10 92 1d 07 	sts	0x071D, r1
  // indicate that we are done transmitting
  transmitting = 0;
    266a:	10 92 1e 07 	sts	0x071E, r1
  return ret;
}
    266e:	08 95       	ret

00002670 <_ZN7TwoWire11requestFromEhh>:
{
  begin((uint8_t)address);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
    2670:	86 2f       	mov	r24, r22
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity);
    2672:	41 32       	cpi	r20, 0x21	; 33
    2674:	08 f0       	brcs	.+2      	; 0x2678 <_ZN7TwoWire11requestFromEhh+0x8>
    2676:	40 e2       	ldi	r20, 0x20	; 32
    2678:	69 ed       	ldi	r22, 0xD9	; 217
    267a:	76 e0       	ldi	r23, 0x06	; 6
    267c:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    2680:	10 92 f9 06 	sts	0x06F9, r1
  rxBufferLength = read;
    2684:	80 93 fa 06 	sts	0x06FA, r24

  return read;
}
    2688:	08 95       	ret

0000268a <_ZN7TwoWire11requestFromEii>:

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity);
    268a:	0e 94 38 13 	call	0x2670	; 0x2670 <_ZN7TwoWire11requestFromEhh>
}
    268e:	08 95       	ret

00002690 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    2690:	10 92 f9 06 	sts	0x06F9, r1
  rxBufferLength = 0;
    2694:	10 92 fa 06 	sts	0x06FA, r1

  txBufferIndex = 0;
    2698:	10 92 1c 07 	sts	0x071C, r1
  txBufferLength = 0;
    269c:	10 92 1d 07 	sts	0x071D, r1

  twi_init();
    26a0:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <twi_init>
}
    26a4:	08 95       	ret

000026a6 <_ZN7TwoWire5beginEh>:

void TwoWire::begin(uint8_t address)
{
    26a6:	cf 93       	push	r28
    26a8:	df 93       	push	r29
    26aa:	ec 01       	movw	r28, r24
    26ac:	86 2f       	mov	r24, r22
  twi_setAddress(address);
    26ae:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <twi_setAddress>
  twi_attachSlaveTxEvent(onRequestService);
    26b2:	8a ea       	ldi	r24, 0xAA	; 170
    26b4:	92 e1       	ldi	r25, 0x12	; 18
    26b6:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <twi_attachSlaveTxEvent>
  twi_attachSlaveRxEvent(onReceiveService);
    26ba:	8c e7       	ldi	r24, 0x7C	; 124
    26bc:	92 e1       	ldi	r25, 0x12	; 18
    26be:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <twi_attachSlaveRxEvent>
  begin();
    26c2:	ce 01       	movw	r24, r28
    26c4:	0e 94 48 13 	call	0x2690	; 0x2690 <_ZN7TwoWire5beginEv>
}
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	08 95       	ret

000026ce <_ZN7TwoWire5beginEi>:

void TwoWire::begin(int address)
{
  begin((uint8_t)address);
    26ce:	0e 94 53 13 	call	0x26a6	; 0x26a6 <_ZN7TwoWire5beginEh>
}
    26d2:	08 95       	ret

000026d4 <__vector_16>:
volatile unsigned long timer0_overflow_count = 0;
volatile unsigned long timer0_millis = 0;
static unsigned char timer0_fract = 0;

SIGNAL(TIMER0_OVF_vect)
{
    26d4:	1f 92       	push	r1
    26d6:	0f 92       	push	r0
    26d8:	0f b6       	in	r0, 0x3f	; 63
    26da:	0f 92       	push	r0
    26dc:	11 24       	eor	r1, r1
    26de:	2f 93       	push	r18
    26e0:	3f 93       	push	r19
    26e2:	8f 93       	push	r24
    26e4:	9f 93       	push	r25
    26e6:	af 93       	push	r26
    26e8:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    26ea:	80 91 27 07 	lds	r24, 0x0727
    26ee:	90 91 28 07 	lds	r25, 0x0728
    26f2:	a0 91 29 07 	lds	r26, 0x0729
    26f6:	b0 91 2a 07 	lds	r27, 0x072A
	unsigned char f = timer0_fract;
    26fa:	30 91 2b 07 	lds	r19, 0x072B

	m += MILLIS_INC;
    26fe:	01 96       	adiw	r24, 0x01	; 1
    2700:	a1 1d       	adc	r26, r1
    2702:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    2704:	23 2f       	mov	r18, r19
    2706:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    2708:	2d 37       	cpi	r18, 0x7D	; 125
    270a:	20 f0       	brcs	.+8      	; 0x2714 <__vector_16+0x40>
		f -= FRACT_MAX;
    270c:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    270e:	01 96       	adiw	r24, 0x01	; 1
    2710:	a1 1d       	adc	r26, r1
    2712:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2714:	20 93 2b 07 	sts	0x072B, r18
	timer0_millis = m;
    2718:	80 93 27 07 	sts	0x0727, r24
    271c:	90 93 28 07 	sts	0x0728, r25
    2720:	a0 93 29 07 	sts	0x0729, r26
    2724:	b0 93 2a 07 	sts	0x072A, r27
	timer0_overflow_count++;
    2728:	80 91 23 07 	lds	r24, 0x0723
    272c:	90 91 24 07 	lds	r25, 0x0724
    2730:	a0 91 25 07 	lds	r26, 0x0725
    2734:	b0 91 26 07 	lds	r27, 0x0726
    2738:	01 96       	adiw	r24, 0x01	; 1
    273a:	a1 1d       	adc	r26, r1
    273c:	b1 1d       	adc	r27, r1
    273e:	80 93 23 07 	sts	0x0723, r24
    2742:	90 93 24 07 	sts	0x0724, r25
    2746:	a0 93 25 07 	sts	0x0725, r26
    274a:	b0 93 26 07 	sts	0x0726, r27
}
    274e:	bf 91       	pop	r27
    2750:	af 91       	pop	r26
    2752:	9f 91       	pop	r25
    2754:	8f 91       	pop	r24
    2756:	3f 91       	pop	r19
    2758:	2f 91       	pop	r18
    275a:	0f 90       	pop	r0
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	0f 90       	pop	r0
    2760:	1f 90       	pop	r1
    2762:	18 95       	reti

00002764 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2764:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2766:	f8 94       	cli
	m = timer0_millis;
    2768:	20 91 27 07 	lds	r18, 0x0727
    276c:	30 91 28 07 	lds	r19, 0x0728
    2770:	40 91 29 07 	lds	r20, 0x0729
    2774:	50 91 2a 07 	lds	r21, 0x072A
	SREG = oldSREG;
    2778:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    277a:	b9 01       	movw	r22, r18
    277c:	ca 01       	movw	r24, r20
    277e:	08 95       	ret

00002780 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2780:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    2782:	f8 94       	cli
	m = timer0_overflow_count;
    2784:	20 91 23 07 	lds	r18, 0x0723
    2788:	30 91 24 07 	lds	r19, 0x0724
    278c:	40 91 25 07 	lds	r20, 0x0725
    2790:	50 91 26 07 	lds	r21, 0x0726
#if defined(TCNT0)
	t = TCNT0;
    2794:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2796:	a8 9b       	sbis	0x15, 0	; 21
    2798:	06 c0       	rjmp	.+12     	; 0x27a6 <micros+0x26>
    279a:	8f 3f       	cpi	r24, 0xFF	; 255
    279c:	21 f0       	breq	.+8      	; 0x27a6 <micros+0x26>
		m++;
    279e:	2f 5f       	subi	r18, 0xFF	; 255
    27a0:	3f 4f       	sbci	r19, 0xFF	; 255
    27a2:	4f 4f       	sbci	r20, 0xFF	; 255
    27a4:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    27a6:	9f bf       	out	0x3f, r25	; 63
    27a8:	54 2f       	mov	r21, r20
    27aa:	43 2f       	mov	r20, r19
    27ac:	32 2f       	mov	r19, r18
    27ae:	22 27       	eor	r18, r18
    27b0:	28 0f       	add	r18, r24
    27b2:	31 1d       	adc	r19, r1
    27b4:	41 1d       	adc	r20, r1
    27b6:	51 1d       	adc	r21, r1
    27b8:	22 0f       	add	r18, r18
    27ba:	33 1f       	adc	r19, r19
    27bc:	44 1f       	adc	r20, r20
    27be:	55 1f       	adc	r21, r21
    27c0:	22 0f       	add	r18, r18
    27c2:	33 1f       	adc	r19, r19
    27c4:	44 1f       	adc	r20, r20
    27c6:	55 1f       	adc	r21, r21
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
    27c8:	b9 01       	movw	r22, r18
    27ca:	ca 01       	movw	r24, r20
    27cc:	08 95       	ret

000027ce <delay>:

void delay(unsigned long ms)
{
    27ce:	ef 92       	push	r14
    27d0:	ff 92       	push	r15
    27d2:	0f 93       	push	r16
    27d4:	1f 93       	push	r17
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	7b 01       	movw	r14, r22
    27dc:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
    27de:	0e 94 c0 13 	call	0x2780	; 0x2780 <micros>
    27e2:	eb 01       	movw	r28, r22

	while (ms > 0) {
    27e4:	e1 14       	cp	r14, r1
    27e6:	f1 04       	cpc	r15, r1
    27e8:	01 05       	cpc	r16, r1
    27ea:	11 05       	cpc	r17, r1
    27ec:	a1 f0       	breq	.+40     	; 0x2816 <delay+0x48>
		if (((uint16_t)micros() - start) >= 1000) {
    27ee:	0e 94 c0 13 	call	0x2780	; 0x2780 <micros>
    27f2:	6c 1b       	sub	r22, r28
    27f4:	7d 0b       	sbc	r23, r29
    27f6:	83 e0       	ldi	r24, 0x03	; 3
    27f8:	68 3e       	cpi	r22, 0xE8	; 232
    27fa:	78 07       	cpc	r23, r24
    27fc:	c0 f3       	brcs	.-16     	; 0x27ee <delay+0x20>
			ms--;
    27fe:	08 94       	sec
    2800:	e1 08       	sbc	r14, r1
    2802:	f1 08       	sbc	r15, r1
    2804:	01 09       	sbc	r16, r1
    2806:	11 09       	sbc	r17, r1
			start += 1000;
    2808:	c8 51       	subi	r28, 0x18	; 24
    280a:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    280c:	e1 14       	cp	r14, r1
    280e:	f1 04       	cpc	r15, r1
    2810:	01 05       	cpc	r16, r1
    2812:	11 05       	cpc	r17, r1
    2814:	61 f7       	brne	.-40     	; 0x27ee <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2816:	df 91       	pop	r29
    2818:	cf 91       	pop	r28
    281a:	1f 91       	pop	r17
    281c:	0f 91       	pop	r16
    281e:	ff 90       	pop	r15
    2820:	ef 90       	pop	r14
    2822:	08 95       	ret

00002824 <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	39 f0       	breq	.+14     	; 0x2836 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    2828:	88 0f       	add	r24, r24
    282a:	99 1f       	adc	r25, r25
    282c:	88 0f       	add	r24, r24
    282e:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    2830:	02 97       	sbiw	r24, 0x02	; 2

	// busy wait
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	f1 f7       	brne	.-4      	; 0x2832 <delayMicroseconds+0xe>
    2836:	08 95       	ret

00002838 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2838:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    283a:	84 b5       	in	r24, 0x24	; 36
    283c:	82 60       	ori	r24, 0x02	; 2
    283e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2840:	84 b5       	in	r24, 0x24	; 36
    2842:	81 60       	ori	r24, 0x01	; 1
    2844:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2846:	85 b5       	in	r24, 0x25	; 37
    2848:	82 60       	ori	r24, 0x02	; 2
    284a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    284c:	85 b5       	in	r24, 0x25	; 37
    284e:	81 60       	ori	r24, 0x01	; 1
    2850:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2852:	ee e6       	ldi	r30, 0x6E	; 110
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	81 60       	ori	r24, 0x01	; 1
    285a:	80 83       	st	Z, r24
	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

	TCCR1B = 0;
    285c:	e1 e8       	ldi	r30, 0x81	; 129
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	sbi(TCCR1B, CS11);
    2862:	80 81       	ld	r24, Z
    2864:	82 60       	ori	r24, 0x02	; 2
    2866:	80 83       	st	Z, r24
	sbi(TCCR1B, CS10);
    2868:	80 81       	ld	r24, Z
    286a:	81 60       	ori	r24, 0x01	; 1
    286c:	80 83       	st	Z, r24
	sbi(TCCR1, CS11);
	sbi(TCCR1, CS10);
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    286e:	e0 e8       	ldi	r30, 0x80	; 128
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	81 60       	ori	r24, 0x01	; 1
    2876:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2878:	e1 eb       	ldi	r30, 0xB1	; 177
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	84 60       	ori	r24, 0x04	; 4
    2880:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2882:	e0 eb       	ldi	r30, 0xB0	; 176
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	81 60       	ori	r24, 0x01	; 1
    288a:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    288c:	ea e7       	ldi	r30, 0x7A	; 122
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	80 81       	ld	r24, Z
    2892:	84 60       	ori	r24, 0x04	; 4
    2894:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2896:	80 81       	ld	r24, Z
    2898:	82 60       	ori	r24, 0x02	; 2
    289a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    289c:	80 81       	ld	r24, Z
    289e:	81 60       	ori	r24, 0x01	; 1
    28a0:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    28a2:	80 81       	ld	r24, Z
    28a4:	80 68       	ori	r24, 0x80	; 128
    28a6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    28a8:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    28ac:	08 95       	ret

000028ae <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    28ae:	80 93 c9 01 	sts	0x01C9, r24
}
    28b2:	08 95       	ret

000028b4 <analogRead>:
	uint8_t low, high;

#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    28b4:	8e 30       	cpi	r24, 0x0E	; 14
    28b6:	08 f0       	brcs	.+2      	; 0x28ba <analogRead+0x6>
    28b8:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    28ba:	87 70       	andi	r24, 0x07	; 7
    28bc:	90 91 c9 01 	lds	r25, 0x01C9
    28c0:	92 95       	swap	r25
    28c2:	99 0f       	add	r25, r25
    28c4:	99 0f       	add	r25, r25
    28c6:	90 7c       	andi	r25, 0xC0	; 192
    28c8:	98 2b       	or	r25, r24
    28ca:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    28ce:	80 91 7a 00 	lds	r24, 0x007A
    28d2:	80 64       	ori	r24, 0x40	; 64
    28d4:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    28d8:	80 91 7a 00 	lds	r24, 0x007A
    28dc:	86 fd       	sbrc	r24, 6
    28de:	fc cf       	rjmp	.-8      	; 0x28d8 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    28e0:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    28e4:	30 91 79 00 	lds	r19, 0x0079
    28e8:	93 2f       	mov	r25, r19
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	28 2b       	or	r18, r24
    28f0:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    28f2:	c9 01       	movw	r24, r18
    28f4:	08 95       	ret

000028f6 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    28f6:	1f 93       	push	r17
    28f8:	cf 93       	push	r28
    28fa:	df 93       	push	r29
    28fc:	18 2f       	mov	r17, r24
    28fe:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    2900:	61 e0       	ldi	r22, 0x01	; 1
    2902:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
	if (val == 0)
    2906:	20 97       	sbiw	r28, 0x00	; 0
    2908:	59 f1       	breq	.+86     	; 0x2960 <analogWrite+0x6a>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
    290a:	cf 3f       	cpi	r28, 0xFF	; 255
    290c:	d1 05       	cpc	r29, r1
    290e:	a1 f0       	breq	.+40     	; 0x2938 <analogWrite+0x42>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2910:	e1 2f       	mov	r30, r17
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	e1 5f       	subi	r30, 0xF1	; 241
    2916:	fb 4f       	sbci	r31, 0xFB	; 251
    2918:	84 91       	lpm	r24, Z+
    291a:	83 30       	cpi	r24, 0x03	; 3
    291c:	e1 f1       	breq	.+120    	; 0x2996 <analogWrite+0xa0>
    291e:	84 30       	cpi	r24, 0x04	; 4
    2920:	98 f0       	brcs	.+38     	; 0x2948 <analogWrite+0x52>
    2922:	86 30       	cpi	r24, 0x06	; 6
    2924:	69 f1       	breq	.+90     	; 0x2980 <analogWrite+0x8a>
    2926:	87 30       	cpi	r24, 0x07	; 7
    2928:	09 f4       	brne	.+2      	; 0x292c <analogWrite+0x36>
    292a:	4f c0       	rjmp	.+158    	; 0x29ca <analogWrite+0xd4>
    292c:	84 30       	cpi	r24, 0x04	; 4
    292e:	09 f4       	brne	.+2      	; 0x2932 <analogWrite+0x3c>
    2930:	3f c0       	rjmp	.+126    	; 0x29b0 <analogWrite+0xba>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    2932:	c0 38       	cpi	r28, 0x80	; 128
    2934:	d1 05       	cpc	r29, r1
    2936:	a4 f0       	brlt	.+40     	; 0x2960 <analogWrite+0x6a>
					digitalWrite(pin, LOW);
				} else {
					digitalWrite(pin, HIGH);
    2938:	81 2f       	mov	r24, r17
    293a:	61 e0       	ldi	r22, 0x01	; 1
    293c:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
				}
		}
	}
}
    2940:	df 91       	pop	r29
    2942:	cf 91       	pop	r28
    2944:	1f 91       	pop	r17
    2946:	08 95       	ret
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2948:	81 30       	cpi	r24, 0x01	; 1
    294a:	91 f0       	breq	.+36     	; 0x2970 <analogWrite+0x7a>
    294c:	82 30       	cpi	r24, 0x02	; 2
    294e:	89 f7       	brne	.-30     	; 0x2932 <analogWrite+0x3c>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    2950:	84 b5       	in	r24, 0x24	; 36
    2952:	80 62       	ori	r24, 0x20	; 32
    2954:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    2956:	c8 bd       	out	0x28, r28	; 40
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	1f 91       	pop	r17
    295e:	08 95       	ret
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
					digitalWrite(pin, LOW);
    2960:	81 2f       	mov	r24, r17
    2962:	60 e0       	ldi	r22, 0x00	; 0
    2964:	0e 94 42 15 	call	0x2a84	; 0x2a84 <digitalWrite>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2968:	df 91       	pop	r29
    296a:	cf 91       	pop	r28
    296c:	1f 91       	pop	r17
    296e:	08 95       	ret
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    2970:	84 b5       	in	r24, 0x24	; 36
    2972:	80 68       	ori	r24, 0x80	; 128
    2974:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    2976:	c7 bd       	out	0x27, r28	; 39
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2978:	df 91       	pop	r29
    297a:	cf 91       	pop	r28
    297c:	1f 91       	pop	r17
    297e:	08 95       	ret
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    2980:	80 91 b0 00 	lds	r24, 0x00B0
    2984:	80 68       	ori	r24, 0x80	; 128
    2986:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    298a:	c0 93 b3 00 	sts	0x00B3, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	1f 91       	pop	r17
    2994:	08 95       	ret
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    2996:	80 91 80 00 	lds	r24, 0x0080
    299a:	80 68       	ori	r24, 0x80	; 128
    299c:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    29a0:	d0 93 89 00 	sts	0x0089, r29
    29a4:	c0 93 88 00 	sts	0x0088, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    29a8:	df 91       	pop	r29
    29aa:	cf 91       	pop	r28
    29ac:	1f 91       	pop	r17
    29ae:	08 95       	ret
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    29b0:	80 91 80 00 	lds	r24, 0x0080
    29b4:	80 62       	ori	r24, 0x20	; 32
    29b6:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    29ba:	d0 93 8b 00 	sts	0x008B, r29
    29be:	c0 93 8a 00 	sts	0x008A, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    29c2:	df 91       	pop	r29
    29c4:	cf 91       	pop	r28
    29c6:	1f 91       	pop	r17
    29c8:	08 95       	ret
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    29ca:	80 91 b0 00 	lds	r24, 0x00B0
    29ce:	80 62       	ori	r24, 0x20	; 32
    29d0:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    29d4:	c0 93 b4 00 	sts	0x00B4, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    29d8:	df 91       	pop	r29
    29da:	cf 91       	pop	r28
    29dc:	1f 91       	pop	r17
    29de:	08 95       	ret

000029e0 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	fc 01       	movw	r30, r24
    29e4:	e5 50       	subi	r30, 0x05	; 5
    29e6:	fc 4f       	sbci	r31, 0xFC	; 252
    29e8:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    29ea:	fc 01       	movw	r30, r24
    29ec:	e9 51       	subi	r30, 0x19	; 25
    29ee:	fc 4f       	sbci	r31, 0xFC	; 252
    29f0:	e4 91       	lpm	r30, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    29f2:	ee 23       	and	r30, r30
    29f4:	79 f0       	breq	.+30     	; 0x2a14 <pinMode+0x34>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	ee 0f       	add	r30, r30
    29fa:	ff 1f       	adc	r31, r31
    29fc:	e7 53       	subi	r30, 0x37	; 55
    29fe:	fc 4f       	sbci	r31, 0xFC	; 252
    2a00:	a5 91       	lpm	r26, Z+
    2a02:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
    2a04:	66 23       	and	r22, r22
    2a06:	39 f0       	breq	.+14     	; 0x2a16 <pinMode+0x36>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    2a08:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2a0a:	f8 94       	cli
		*reg |= bit;
    2a0c:	8c 91       	ld	r24, X
    2a0e:	82 2b       	or	r24, r18
    2a10:	8c 93       	st	X, r24
		SREG = oldSREG;
    2a12:	9f bf       	out	0x3f, r25	; 63
    2a14:	08 95       	ret

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
    2a16:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2a18:	f8 94       	cli
		*reg &= ~bit;
    2a1a:	8c 91       	ld	r24, X
    2a1c:	20 95       	com	r18
    2a1e:	82 23       	and	r24, r18
    2a20:	8c 93       	st	X, r24
		SREG = oldSREG;
    2a22:	9f bf       	out	0x3f, r25	; 63
    2a24:	08 95       	ret

00002a26 <_ZL10turnOffPWMh>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2a26:	83 30       	cpi	r24, 0x03	; 3
    2a28:	39 f1       	breq	.+78     	; 0x2a78 <_ZL10turnOffPWMh+0x52>
    2a2a:	84 30       	cpi	r24, 0x04	; 4
    2a2c:	60 f0       	brcs	.+24     	; 0x2a46 <_ZL10turnOffPWMh+0x20>
    2a2e:	86 30       	cpi	r24, 0x06	; 6
    2a30:	c9 f0       	breq	.+50     	; 0x2a64 <_ZL10turnOffPWMh+0x3e>
    2a32:	87 30       	cpi	r24, 0x07	; 7
    2a34:	69 f0       	breq	.+26     	; 0x2a50 <_ZL10turnOffPWMh+0x2a>
    2a36:	84 30       	cpi	r24, 0x04	; 4
    2a38:	51 f4       	brne	.+20     	; 0x2a4e <_ZL10turnOffPWMh+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2a3a:	80 91 80 00 	lds	r24, 0x0080
    2a3e:	8f 7d       	andi	r24, 0xDF	; 223
    2a40:	80 93 80 00 	sts	0x0080, r24
    2a44:	08 95       	ret
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2a46:	81 30       	cpi	r24, 0x01	; 1
    2a48:	99 f0       	breq	.+38     	; 0x2a70 <_ZL10turnOffPWMh+0x4a>
    2a4a:	82 30       	cpi	r24, 0x02	; 2
    2a4c:	39 f0       	breq	.+14     	; 0x2a5c <_ZL10turnOffPWMh+0x36>
    2a4e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2a50:	80 91 b0 00 	lds	r24, 0x00B0
    2a54:	8f 7d       	andi	r24, 0xDF	; 223
    2a56:	80 93 b0 00 	sts	0x00B0, r24
    2a5a:	08 95       	ret
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2a5c:	84 b5       	in	r24, 0x24	; 36
    2a5e:	8f 7d       	andi	r24, 0xDF	; 223
    2a60:	84 bd       	out	0x24, r24	; 36
    2a62:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2a64:	80 91 b0 00 	lds	r24, 0x00B0
    2a68:	8f 77       	andi	r24, 0x7F	; 127
    2a6a:	80 93 b0 00 	sts	0x00B0, r24
    2a6e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2a70:	84 b5       	in	r24, 0x24	; 36
    2a72:	8f 77       	andi	r24, 0x7F	; 127
    2a74:	84 bd       	out	0x24, r24	; 36
    2a76:	08 95       	ret
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2a78:	80 91 80 00 	lds	r24, 0x0080
    2a7c:	8f 77       	andi	r24, 0x7F	; 127
    2a7e:	80 93 80 00 	sts	0x0080, r24
    2a82:	08 95       	ret

00002a84 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2a84:	0f 93       	push	r16
    2a86:	1f 93       	push	r17
    2a88:	df 93       	push	r29
    2a8a:	cf 93       	push	r28
    2a8c:	0f 92       	push	r0
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    2a92:	28 2f       	mov	r18, r24
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	f9 01       	movw	r30, r18
    2a98:	e1 5f       	subi	r30, 0xF1	; 241
    2a9a:	fb 4f       	sbci	r31, 0xFB	; 251
    2a9c:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2a9e:	f9 01       	movw	r30, r18
    2aa0:	e5 50       	subi	r30, 0x05	; 5
    2aa2:	fc 4f       	sbci	r31, 0xFC	; 252
    2aa4:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
    2aa6:	29 51       	subi	r18, 0x19	; 25
    2aa8:	3c 4f       	sbci	r19, 0xFC	; 252
    2aaa:	f9 01       	movw	r30, r18
    2aac:	14 91       	lpm	r17, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2aae:	11 23       	and	r17, r17
    2ab0:	91 f0       	breq	.+36     	; 0x2ad6 <digitalWrite+0x52>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2ab2:	88 23       	and	r24, r24
    2ab4:	19 f5       	brne	.+70     	; 0x2afc <digitalWrite+0x78>

	out = portOutputRegister(port);
    2ab6:	e1 2f       	mov	r30, r17
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	ee 0f       	add	r30, r30
    2abc:	ff 1f       	adc	r31, r31
    2abe:	ed 52       	subi	r30, 0x2D	; 45
    2ac0:	fc 4f       	sbci	r31, 0xFC	; 252
    2ac2:	a5 91       	lpm	r26, Z+
    2ac4:	b4 91       	lpm	r27, Z+

	if (val == LOW) {
    2ac6:	66 23       	and	r22, r22
    2ac8:	61 f0       	breq	.+24     	; 0x2ae2 <digitalWrite+0x5e>
		uint8_t oldSREG = SREG;
                cli();
		*out &= ~bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    2aca:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2acc:	f8 94       	cli
		*out |= bit;
    2ace:	8c 91       	ld	r24, X
    2ad0:	80 2b       	or	r24, r16
    2ad2:	8c 93       	st	X, r24
		SREG = oldSREG;
    2ad4:	9f bf       	out	0x3f, r25	; 63
	}
}
    2ad6:	0f 90       	pop	r0
    2ad8:	cf 91       	pop	r28
    2ada:	df 91       	pop	r29
    2adc:	1f 91       	pop	r17
    2ade:	0f 91       	pop	r16
    2ae0:	08 95       	ret
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);

	if (val == LOW) {
		uint8_t oldSREG = SREG;
    2ae2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2ae4:	f8 94       	cli
		*out &= ~bit;
    2ae6:	8c 91       	ld	r24, X
    2ae8:	00 95       	com	r16
    2aea:	80 23       	and	r24, r16
    2aec:	8c 93       	st	X, r24
		SREG = oldSREG;
    2aee:	9f bf       	out	0x3f, r25	; 63
		uint8_t oldSREG = SREG;
                cli();
		*out |= bit;
		SREG = oldSREG;
	}
}
    2af0:	0f 90       	pop	r0
    2af2:	cf 91       	pop	r28
    2af4:	df 91       	pop	r29
    2af6:	1f 91       	pop	r17
    2af8:	0f 91       	pop	r16
    2afa:	08 95       	ret

	if (port == NOT_A_PIN) return;

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2afc:	69 83       	std	Y+1, r22	; 0x01
    2afe:	0e 94 13 15 	call	0x2a26	; 0x2a26 <_ZL10turnOffPWMh>
    2b02:	69 81       	ldd	r22, Y+1	; 0x01
    2b04:	d8 cf       	rjmp	.-80     	; 0x2ab6 <digitalWrite+0x32>

00002b06 <digitalRead>:
		SREG = oldSREG;
	}
}

int digitalRead(uint8_t pin)
{
    2b06:	0f 93       	push	r16
    2b08:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
    2b0a:	28 2f       	mov	r18, r24
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	f9 01       	movw	r30, r18
    2b10:	e1 5f       	subi	r30, 0xF1	; 241
    2b12:	fb 4f       	sbci	r31, 0xFB	; 251
    2b14:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2b16:	f9 01       	movw	r30, r18
    2b18:	e5 50       	subi	r30, 0x05	; 5
    2b1a:	fc 4f       	sbci	r31, 0xFC	; 252
    2b1c:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
    2b1e:	29 51       	subi	r18, 0x19	; 25
    2b20:	3c 4f       	sbci	r19, 0xFC	; 252
    2b22:	f9 01       	movw	r30, r18
    2b24:	14 91       	lpm	r17, Z+

	if (port == NOT_A_PIN) return LOW;
    2b26:	11 23       	and	r17, r17
    2b28:	c9 f0       	breq	.+50     	; 0x2b5c <digitalRead+0x56>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2b2a:	88 23       	and	r24, r24
    2b2c:	e9 f4       	brne	.+58     	; 0x2b68 <digitalRead+0x62>

	if (*portInputRegister(port) & bit) return HIGH;
    2b2e:	e1 2f       	mov	r30, r17
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	ee 0f       	add	r30, r30
    2b34:	ff 1f       	adc	r31, r31
    2b36:	e3 52       	subi	r30, 0x23	; 35
    2b38:	fc 4f       	sbci	r31, 0xFC	; 252
    2b3a:	a5 91       	lpm	r26, Z+
    2b3c:	b4 91       	lpm	r27, Z+
    2b3e:	8c 91       	ld	r24, X
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	80 23       	and	r24, r16
    2b46:	21 f4       	brne	.+8      	; 0x2b50 <digitalRead+0x4a>
	return LOW;
}
    2b48:	c9 01       	movw	r24, r18
    2b4a:	1f 91       	pop	r17
    2b4c:	0f 91       	pop	r16
    2b4e:	08 95       	ret

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    2b50:	21 e0       	ldi	r18, 0x01	; 1
    2b52:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    2b54:	c9 01       	movw	r24, r18
    2b56:	1f 91       	pop	r17
    2b58:	0f 91       	pop	r16
    2b5a:	08 95       	ret
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2b60:	c9 01       	movw	r24, r18
    2b62:	1f 91       	pop	r17
    2b64:	0f 91       	pop	r16
    2b66:	08 95       	ret

	if (port == NOT_A_PIN) return LOW;

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2b68:	0e 94 13 15 	call	0x2a26	; 0x2a26 <_ZL10turnOffPWMh>
    2b6c:	e0 cf       	rjmp	.-64     	; 0x2b2e <digitalRead+0x28>

00002b6e <_ZNK6String6charAtEj>:
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

char String::charAt( unsigned int loc ) const
{
    2b6e:	dc 01       	movw	r26, r24
    2b70:	ed 91       	ld	r30, X+
    2b72:	fc 91       	ld	r31, X
    2b74:	11 97       	sbiw	r26, 0x01	; 1
    2b76:	e6 0f       	add	r30, r22
    2b78:	f7 1f       	adc	r31, r23
  return operator[]( loc );
}
    2b7a:	80 81       	ld	r24, Z
    2b7c:	08 95       	ret

00002b7e <_ZN6String9setCharAtEjc>:

void String::setCharAt( unsigned int loc, const char aChar ) 
{
    2b7e:	fc 01       	movw	r30, r24
  if(_buffer == NULL) return;
    2b80:	80 81       	ld	r24, Z
    2b82:	91 81       	ldd	r25, Z+1	; 0x01
    2b84:	00 97       	sbiw	r24, 0x00	; 0
    2b86:	49 f0       	breq	.+18     	; 0x2b9a <_ZN6String9setCharAtEjc+0x1c>
  if(_length > loc) {
    2b88:	24 81       	ldd	r18, Z+4	; 0x04
    2b8a:	35 81       	ldd	r19, Z+5	; 0x05
    2b8c:	62 17       	cp	r22, r18
    2b8e:	73 07       	cpc	r23, r19
    2b90:	20 f4       	brcc	.+8      	; 0x2b9a <_ZN6String9setCharAtEjc+0x1c>
    _buffer[loc] = aChar;
    2b92:	68 0f       	add	r22, r24
    2b94:	79 1f       	adc	r23, r25
    2b96:	fb 01       	movw	r30, r22
    2b98:	40 83       	st	Z, r20
    2b9a:	08 95       	ret

00002b9c <_ZN6StringixEj>:
{
  return strcmp( _buffer, rhs._buffer ) >= 0;
}

char & String::operator[]( unsigned int index )
{
    2b9c:	fc 01       	movw	r30, r24
  static char dummy_writable_char;
  if (index >= _length || !_buffer) {
    2b9e:	84 81       	ldd	r24, Z+4	; 0x04
    2ba0:	95 81       	ldd	r25, Z+5	; 0x05
    2ba2:	68 17       	cp	r22, r24
    2ba4:	79 07       	cpc	r23, r25
    2ba6:	40 f4       	brcc	.+16     	; 0x2bb8 <_ZN6StringixEj+0x1c>
    2ba8:	80 81       	ld	r24, Z
    2baa:	91 81       	ldd	r25, Z+1	; 0x01
    2bac:	00 97       	sbiw	r24, 0x00	; 0
    2bae:	21 f0       	breq	.+8      	; 0x2bb8 <_ZN6StringixEj+0x1c>
    dummy_writable_char = 0;
    return dummy_writable_char;
  }
  return _buffer[ index ];
    2bb0:	68 0f       	add	r22, r24
    2bb2:	79 1f       	adc	r23, r25
}
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	08 95       	ret

char & String::operator[]( unsigned int index )
{
  static char dummy_writable_char;
  if (index >= _length || !_buffer) {
    dummy_writable_char = 0;
    2bb8:	10 92 2c 07 	sts	0x072C, r1
    2bbc:	6c e2       	ldi	r22, 0x2C	; 44
    2bbe:	77 e0       	ldi	r23, 0x07	; 7
    return dummy_writable_char;
  }
  return _buffer[ index ];
}
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	08 95       	ret

00002bc4 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	ed 91       	ld	r30, X+
    2bc8:	fc 91       	ld	r31, X
    2bca:	11 97       	sbiw	r26, 0x01	; 1
    2bcc:	e6 0f       	add	r30, r22
    2bce:	f7 1f       	adc	r31, r23
  // need to check for valid index, to do later
  return _buffer[ index ];
}
    2bd0:	80 81       	ld	r24, Z
    2bd2:	08 95       	ret

00002bd4 <_ZN6String5toIntEv>:
  buf[len] = 0;
}


long String::toInt() {
  return atol(_buffer);
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	80 81       	ld	r24, Z
    2bd8:	91 81       	ldd	r25, Z+1	; 0x01
    2bda:	0e 94 a1 2c 	call	0x5942	; 0x5942 <atol>
}
    2bde:	08 95       	ret

00002be0 <_ZN6String11toCharArrayEPcj>:
  strncpy((char *)buf, _buffer, len);
  buf[len] = 0;
}

void String::toCharArray(char *buf, unsigned int bufsize)
{
    2be0:	0f 93       	push	r16
    2be2:	1f 93       	push	r17
    2be4:	cf 93       	push	r28
    2be6:	df 93       	push	r29
    2be8:	fc 01       	movw	r30, r24
    2bea:	eb 01       	movw	r28, r22
  if (!bufsize || !buf) return;
    2bec:	41 15       	cp	r20, r1
    2bee:	51 05       	cpc	r21, r1
    2bf0:	a1 f0       	breq	.+40     	; 0x2c1a <_ZN6String11toCharArrayEPcj+0x3a>
    2bf2:	61 15       	cp	r22, r1
    2bf4:	71 05       	cpc	r23, r1
    2bf6:	89 f0       	breq	.+34     	; 0x2c1a <_ZN6String11toCharArrayEPcj+0x3a>
  unsigned int len = bufsize - 1;
    2bf8:	84 81       	ldd	r24, Z+4	; 0x04
    2bfa:	95 81       	ldd	r25, Z+5	; 0x05
    2bfc:	8a 01       	movw	r16, r20
    2bfe:	01 50       	subi	r16, 0x01	; 1
    2c00:	10 40       	sbci	r17, 0x00	; 0
    2c02:	80 17       	cp	r24, r16
    2c04:	91 07       	cpc	r25, r17
    2c06:	70 f0       	brcs	.+28     	; 0x2c24 <_ZN6String11toCharArrayEPcj+0x44>
  if (len > _length) len = _length;
  strncpy(buf, _buffer, len);
    2c08:	60 81       	ld	r22, Z
    2c0a:	71 81       	ldd	r23, Z+1	; 0x01
    2c0c:	ce 01       	movw	r24, r28
    2c0e:	a8 01       	movw	r20, r16
    2c10:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <strncpy>
  buf[len] = 0;
    2c14:	c0 0f       	add	r28, r16
    2c16:	d1 1f       	adc	r29, r17
    2c18:	18 82       	st	Y, r1
}
    2c1a:	df 91       	pop	r29
    2c1c:	cf 91       	pop	r28
    2c1e:	1f 91       	pop	r17
    2c20:	0f 91       	pop	r16
    2c22:	08 95       	ret
}

void String::toCharArray(char *buf, unsigned int bufsize)
{
  if (!bufsize || !buf) return;
  unsigned int len = bufsize - 1;
    2c24:	8c 01       	movw	r16, r24
    2c26:	f0 cf       	rjmp	.-32     	; 0x2c08 <_ZN6String11toCharArrayEPcj+0x28>

00002c28 <_ZN6String8getBytesEPhj>:

  return temp.substring( i, j + 1);
}

void String::getBytes(unsigned char *buf, unsigned int bufsize)
{
    2c28:	0f 93       	push	r16
    2c2a:	1f 93       	push	r17
    2c2c:	cf 93       	push	r28
    2c2e:	df 93       	push	r29
    2c30:	fc 01       	movw	r30, r24
    2c32:	eb 01       	movw	r28, r22
  if (!bufsize || !buf) return;
    2c34:	41 15       	cp	r20, r1
    2c36:	51 05       	cpc	r21, r1
    2c38:	a1 f0       	breq	.+40     	; 0x2c62 <_ZN6String8getBytesEPhj+0x3a>
    2c3a:	61 15       	cp	r22, r1
    2c3c:	71 05       	cpc	r23, r1
    2c3e:	89 f0       	breq	.+34     	; 0x2c62 <_ZN6String8getBytesEPhj+0x3a>
  unsigned int len = bufsize - 1;
    2c40:	84 81       	ldd	r24, Z+4	; 0x04
    2c42:	95 81       	ldd	r25, Z+5	; 0x05
    2c44:	8a 01       	movw	r16, r20
    2c46:	01 50       	subi	r16, 0x01	; 1
    2c48:	10 40       	sbci	r17, 0x00	; 0
    2c4a:	80 17       	cp	r24, r16
    2c4c:	91 07       	cpc	r25, r17
    2c4e:	70 f0       	brcs	.+28     	; 0x2c6c <_ZN6String8getBytesEPhj+0x44>
  if (len > _length) len = _length;
  strncpy((char *)buf, _buffer, len);
    2c50:	60 81       	ld	r22, Z
    2c52:	71 81       	ldd	r23, Z+1	; 0x01
    2c54:	ce 01       	movw	r24, r28
    2c56:	a8 01       	movw	r20, r16
    2c58:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <strncpy>
  buf[len] = 0;
    2c5c:	c0 0f       	add	r28, r16
    2c5e:	d1 1f       	adc	r29, r17
    2c60:	18 82       	st	Y, r1
}
    2c62:	df 91       	pop	r29
    2c64:	cf 91       	pop	r28
    2c66:	1f 91       	pop	r17
    2c68:	0f 91       	pop	r16
    2c6a:	08 95       	ret
}

void String::getBytes(unsigned char *buf, unsigned int bufsize)
{
  if (!bufsize || !buf) return;
  unsigned int len = bufsize - 1;
    2c6c:	8c 01       	movw	r16, r24
    2c6e:	f0 cf       	rjmp	.-32     	; 0x2c50 <_ZN6String8getBytesEPhj+0x28>

00002c70 <_ZNK6String10startsWithERKS_j>:

  return startsWith( s2, 0 );
}

boolean String::startsWith( const String &s2, unsigned int offset ) const
{
    2c70:	fc 01       	movw	r30, r24
    2c72:	db 01       	movw	r26, r22
    2c74:	ca 01       	movw	r24, r20
  if ( offset > _length - s2._length )
    2c76:	14 96       	adiw	r26, 0x04	; 4
    2c78:	4d 91       	ld	r20, X+
    2c7a:	5c 91       	ld	r21, X
    2c7c:	15 97       	sbiw	r26, 0x05	; 5
    2c7e:	24 81       	ldd	r18, Z+4	; 0x04
    2c80:	35 81       	ldd	r19, Z+5	; 0x05
    2c82:	24 1b       	sub	r18, r20
    2c84:	35 0b       	sbc	r19, r21
    2c86:	28 17       	cp	r18, r24
    2c88:	39 07       	cpc	r19, r25
    2c8a:	80 f0       	brcs	.+32     	; 0x2cac <_ZNK6String10startsWithERKS_j+0x3c>
    return 0;

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
    2c8c:	20 81       	ld	r18, Z
    2c8e:	31 81       	ldd	r19, Z+1	; 0x01
    2c90:	6d 91       	ld	r22, X+
    2c92:	7c 91       	ld	r23, X
    2c94:	82 0f       	add	r24, r18
    2c96:	93 1f       	adc	r25, r19
    2c98:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <strncmp>
    2c9c:	9c 01       	movw	r18, r24
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	21 15       	cp	r18, r1
    2ca2:	31 05       	cpc	r19, r1
    2ca4:	09 f0       	breq	.+2      	; 0x2ca8 <_ZNK6String10startsWithERKS_j+0x38>
}
    2ca6:	08 95       	ret
boolean String::startsWith( const String &s2, unsigned int offset ) const
{
  if ( offset > _length - s2._length )
    return 0;

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
}
    2caa:	08 95       	ret
  return startsWith( s2, 0 );
}

boolean String::startsWith( const String &s2, unsigned int offset ) const
{
  if ( offset > _length - s2._length )
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	08 95       	ret

00002cb0 <_ZNK6String10startsWithERKS_>:
  return -1;
}

boolean String::startsWith( const String &s2 ) const
{
  if ( _length < s2._length )
    2cb0:	fc 01       	movw	r30, r24
    2cb2:	44 81       	ldd	r20, Z+4	; 0x04
    2cb4:	55 81       	ldd	r21, Z+5	; 0x05
    2cb6:	fb 01       	movw	r30, r22
    2cb8:	24 81       	ldd	r18, Z+4	; 0x04
    2cba:	35 81       	ldd	r19, Z+5	; 0x05
    2cbc:	42 17       	cp	r20, r18
    2cbe:	53 07       	cpc	r21, r19
    2cc0:	10 f4       	brcc	.+4      	; 0x2cc6 <_ZNK6String10startsWithERKS_+0x16>
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	08 95       	ret
    return 0;

  return startsWith( s2, 0 );
    2cc6:	40 e0       	ldi	r20, 0x00	; 0
    2cc8:	50 e0       	ldi	r21, 0x00	; 0
    2cca:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZNK6String10startsWithERKS_j>
}
    2cce:	08 95       	ret

00002cd0 <_ZNK6String11lastIndexOfEcj>:
{
  return lastIndexOf( theChar, _length - 1 );
}

int String::lastIndexOf( char ch, unsigned int fromIndex ) const
{
    2cd0:	df 92       	push	r13
    2cd2:	ef 92       	push	r14
    2cd4:	ff 92       	push	r15
    2cd6:	0f 93       	push	r16
    2cd8:	1f 93       	push	r17
    2cda:	cf 93       	push	r28
    2cdc:	df 93       	push	r29
    2cde:	ec 01       	movw	r28, r24
  if ( fromIndex >= _length )
    2ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce4:	48 17       	cp	r20, r24
    2ce6:	59 07       	cpc	r21, r25
    2ce8:	58 f0       	brcs	.+22     	; 0x2d00 <_ZNK6String11lastIndexOfEcj+0x30>
  char tempchar = _buffer[fromIndex + 1];
  _buffer[fromIndex + 1] = '\0';
  char* temp = strrchr( _buffer, ch );
  _buffer[fromIndex + 1] = tempchar;

  if ( temp == NULL )
    2cea:	2f ef       	ldi	r18, 0xFF	; 255
    2cec:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;

  return temp - _buffer;
}
    2cee:	c9 01       	movw	r24, r18
    2cf0:	df 91       	pop	r29
    2cf2:	cf 91       	pop	r28
    2cf4:	1f 91       	pop	r17
    2cf6:	0f 91       	pop	r16
    2cf8:	ff 90       	pop	r15
    2cfa:	ef 90       	pop	r14
    2cfc:	df 90       	pop	r13
    2cfe:	08 95       	ret
int String::lastIndexOf( char ch, unsigned int fromIndex ) const
{
  if ( fromIndex >= _length )
    return -1;

  char tempchar = _buffer[fromIndex + 1];
    2d00:	8a 01       	movw	r16, r20
    2d02:	0f 5f       	subi	r16, 0xFF	; 255
    2d04:	1f 4f       	sbci	r17, 0xFF	; 255
    2d06:	e8 81       	ld	r30, Y
    2d08:	f9 81       	ldd	r31, Y+1	; 0x01
    2d0a:	e0 0f       	add	r30, r16
    2d0c:	f1 1f       	adc	r31, r17
    2d0e:	d0 80       	ld	r13, Z
  _buffer[fromIndex + 1] = '\0';
    2d10:	10 82       	st	Z, r1
  char* temp = strrchr( _buffer, ch );
    2d12:	e8 80       	ld	r14, Y
    2d14:	f9 80       	ldd	r15, Y+1	; 0x01
    2d16:	c7 01       	movw	r24, r14
    2d18:	70 e0       	ldi	r23, 0x00	; 0
    2d1a:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <strrchr>
    2d1e:	9c 01       	movw	r18, r24
  _buffer[fromIndex + 1] = tempchar;
    2d20:	0e 0d       	add	r16, r14
    2d22:	1f 1d       	adc	r17, r15
    2d24:	f8 01       	movw	r30, r16
    2d26:	d0 82       	st	Z, r13

  if ( temp == NULL )
    2d28:	00 97       	sbiw	r24, 0x00	; 0
    2d2a:	f9 f2       	breq	.-66     	; 0x2cea <_ZNK6String11lastIndexOfEcj+0x1a>
    return -1;

  return temp - _buffer;
    2d2c:	88 81       	ld	r24, Y
    2d2e:	99 81       	ldd	r25, Y+1	; 0x01
    2d30:	28 1b       	sub	r18, r24
    2d32:	39 0b       	sbc	r19, r25
    2d34:	dc cf       	rjmp	.-72     	; 0x2cee <_ZNK6String11lastIndexOfEcj+0x1e>

00002d36 <_ZNK6String11lastIndexOfEc>:
  return theFind - _buffer; // pointer subtraction
}

int String::lastIndexOf( char theChar ) const
{
  return lastIndexOf( theChar, _length - 1 );
    2d36:	fc 01       	movw	r30, r24
    2d38:	44 81       	ldd	r20, Z+4	; 0x04
    2d3a:	55 81       	ldd	r21, Z+5	; 0x05
    2d3c:	41 50       	subi	r20, 0x01	; 1
    2d3e:	50 40       	sbci	r21, 0x00	; 0
    2d40:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <_ZNK6String11lastIndexOfEcj>
}
    2d44:	08 95       	ret

00002d46 <_ZNK6String7indexOfERKS_j>:
{
  return indexOf( s2, 0 );
}

int String::indexOf( const String &s2, unsigned int fromIndex ) const
{
    2d46:	cf 93       	push	r28
    2d48:	df 93       	push	r29
    2d4a:	fc 01       	movw	r30, r24
  if ( fromIndex >= _length )
    2d4c:	84 81       	ldd	r24, Z+4	; 0x04
    2d4e:	95 81       	ldd	r25, Z+5	; 0x05
    2d50:	48 17       	cp	r20, r24
    2d52:	59 07       	cpc	r21, r25
    2d54:	30 f0       	brcs	.+12     	; 0x2d62 <_ZNK6String7indexOfERKS_j+0x1c>
    return -1;

  const char *theFind = strstr( &_buffer[ fromIndex ], s2._buffer );

  if ( theFind == NULL )
    2d56:	2f ef       	ldi	r18, 0xFF	; 255
    2d58:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;

  return theFind - _buffer; // pointer subtraction
}
    2d5a:	c9 01       	movw	r24, r18
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	08 95       	ret
int String::indexOf( const String &s2, unsigned int fromIndex ) const
{
  if ( fromIndex >= _length )
    return -1;

  const char *theFind = strstr( &_buffer[ fromIndex ], s2._buffer );
    2d62:	c0 81       	ld	r28, Z
    2d64:	d1 81       	ldd	r29, Z+1	; 0x01
    2d66:	fb 01       	movw	r30, r22
    2d68:	60 81       	ld	r22, Z
    2d6a:	71 81       	ldd	r23, Z+1	; 0x01
    2d6c:	ce 01       	movw	r24, r28
    2d6e:	84 0f       	add	r24, r20
    2d70:	95 1f       	adc	r25, r21
    2d72:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <strstr>
    2d76:	9c 01       	movw	r18, r24

  if ( theFind == NULL )
    2d78:	00 97       	sbiw	r24, 0x00	; 0
    2d7a:	69 f3       	breq	.-38     	; 0x2d56 <_ZNK6String7indexOfERKS_j+0x10>
    return -1;

  return theFind - _buffer; // pointer subtraction
    2d7c:	2c 1b       	sub	r18, r28
    2d7e:	3d 0b       	sbc	r19, r29
    2d80:	ec cf       	rjmp	.-40     	; 0x2d5a <_ZNK6String7indexOfERKS_j+0x14>

00002d82 <_ZNK6String7indexOfERKS_>:
  return temp - _buffer;
}

int String::indexOf( const String &s2 ) const
{
  return indexOf( s2, 0 );
    2d82:	40 e0       	ldi	r20, 0x00	; 0
    2d84:	50 e0       	ldi	r21, 0x00	; 0
    2d86:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <_ZNK6String7indexOfERKS_j>
}
    2d8a:	08 95       	ret

00002d8c <_ZNK6String7indexOfEcj>:
{
  return indexOf( temp, 0 );
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    2d8c:	cf 93       	push	r28
    2d8e:	df 93       	push	r29
    2d90:	fc 01       	movw	r30, r24
  if ( fromIndex >= _length )
    2d92:	84 81       	ldd	r24, Z+4	; 0x04
    2d94:	95 81       	ldd	r25, Z+5	; 0x05
    2d96:	48 17       	cp	r20, r24
    2d98:	59 07       	cpc	r21, r25
    2d9a:	30 f0       	brcs	.+12     	; 0x2da8 <_ZNK6String7indexOfEcj+0x1c>
    return -1;

  const char* temp = strchr( &_buffer[fromIndex], ch );
  if ( temp == NULL )
    2d9c:	2f ef       	ldi	r18, 0xFF	; 255
    2d9e:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;

  return temp - _buffer;
}
    2da0:	c9 01       	movw	r24, r18
    2da2:	df 91       	pop	r29
    2da4:	cf 91       	pop	r28
    2da6:	08 95       	ret
int String::indexOf( char ch, unsigned int fromIndex ) const
{
  if ( fromIndex >= _length )
    return -1;

  const char* temp = strchr( &_buffer[fromIndex], ch );
    2da8:	c0 81       	ld	r28, Z
    2daa:	d1 81       	ldd	r29, Z+1	; 0x01
    2dac:	ce 01       	movw	r24, r28
    2dae:	84 0f       	add	r24, r20
    2db0:	95 1f       	adc	r25, r21
    2db2:	70 e0       	ldi	r23, 0x00	; 0
    2db4:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <strchr>
    2db8:	9c 01       	movw	r18, r24
  if ( temp == NULL )
    2dba:	00 97       	sbiw	r24, 0x00	; 0
    2dbc:	79 f3       	breq	.-34     	; 0x2d9c <_ZNK6String7indexOfEcj+0x10>
    return -1;

  return temp - _buffer;
    2dbe:	2c 1b       	sub	r18, r28
    2dc0:	3d 0b       	sbc	r19, r29
    2dc2:	ee cf       	rjmp	.-36     	; 0x2da0 <_ZNK6String7indexOfEcj+0x14>

00002dc4 <_ZNK6String7indexOfEc>:
  return newString;
}

int String::indexOf( char temp ) const
{
  return indexOf( temp, 0 );
    2dc4:	40 e0       	ldi	r20, 0x00	; 0
    2dc6:	50 e0       	ldi	r21, 0x00	; 0
    2dc8:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <_ZNK6String7indexOfEcj>
}
    2dcc:	08 95       	ret

00002dce <_ZNK6String6equalsERKS_>:

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
}

boolean String::equals( const String &s2 ) const
{
    2dce:	fc 01       	movw	r30, r24
    2dd0:	db 01       	movw	r26, r22
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
    2dd2:	24 81       	ldd	r18, Z+4	; 0x04
    2dd4:	35 81       	ldd	r19, Z+5	; 0x05
    2dd6:	14 96       	adiw	r26, 0x04	; 4
    2dd8:	8d 91       	ld	r24, X+
    2dda:	9c 91       	ld	r25, X
    2ddc:	15 97       	sbiw	r26, 0x05	; 5
    2dde:	28 17       	cp	r18, r24
    2de0:	39 07       	cpc	r19, r25
    2de2:	11 f0       	breq	.+4      	; 0x2de8 <_ZNK6String6equalsERKS_+0x1a>
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	08 95       	ret
    2de8:	6d 91       	ld	r22, X+
    2dea:	7c 91       	ld	r23, X
    2dec:	80 81       	ld	r24, Z
    2dee:	91 81       	ldd	r25, Z+1	; 0x01
    2df0:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <strcmp>
    2df4:	9c 01       	movw	r18, r24
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	21 15       	cp	r18, r1
    2dfa:	31 05       	cpc	r19, r1
    2dfc:	09 f0       	breq	.+2      	; 0x2e00 <_ZNK6String6equalsERKS_+0x32>
}
    2dfe:	08 95       	ret
  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
}

boolean String::equals( const String &s2 ) const
{
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
    2e00:	81 e0       	ldi	r24, 0x01	; 1
}
    2e02:	08 95       	ret

00002e04 <_ZNK6String8endsWithERKS_>:
  // need to check for valid index, to do later
  return _buffer[ index ];
}

boolean String::endsWith( const String &s2 ) const
{
    2e04:	fc 01       	movw	r30, r24
    2e06:	db 01       	movw	r26, r22
  if ( _length < s2._length )
    2e08:	84 81       	ldd	r24, Z+4	; 0x04
    2e0a:	95 81       	ldd	r25, Z+5	; 0x05
    2e0c:	14 96       	adiw	r26, 0x04	; 4
    2e0e:	2d 91       	ld	r18, X+
    2e10:	3c 91       	ld	r19, X
    2e12:	15 97       	sbiw	r26, 0x05	; 5
    2e14:	82 17       	cp	r24, r18
    2e16:	93 07       	cpc	r25, r19
    2e18:	90 f0       	brcs	.+36     	; 0x2e3e <_ZNK6String8endsWithERKS_+0x3a>
    return 0;

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
    2e1a:	82 1b       	sub	r24, r18
    2e1c:	93 0b       	sbc	r25, r19
    2e1e:	20 81       	ld	r18, Z
    2e20:	31 81       	ldd	r19, Z+1	; 0x01
    2e22:	6d 91       	ld	r22, X+
    2e24:	7c 91       	ld	r23, X
    2e26:	82 0f       	add	r24, r18
    2e28:	93 1f       	adc	r25, r19
    2e2a:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <strcmp>
    2e2e:	9c 01       	movw	r18, r24
    2e30:	80 e0       	ldi	r24, 0x00	; 0
    2e32:	21 15       	cp	r18, r1
    2e34:	31 05       	cpc	r19, r1
    2e36:	09 f0       	breq	.+2      	; 0x2e3a <_ZNK6String8endsWithERKS_+0x36>
}
    2e38:	08 95       	ret
boolean String::endsWith( const String &s2 ) const
{
  if ( _length < s2._length )
    return 0;

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
}
    2e3c:	08 95       	ret
  return _buffer[ index ];
}

boolean String::endsWith( const String &s2 ) const
{
  if ( _length < s2._length )
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	08 95       	ret

00002e42 <_ZNK6StringgeERKS_>:
  return strcmp( _buffer, rhs._buffer ) <= 0;
}

int String::operator>=( const String & rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) >= 0;
    2e42:	fb 01       	movw	r30, r22
    2e44:	60 81       	ld	r22, Z
    2e46:	71 81       	ldd	r23, Z+1	; 0x01
    2e48:	fc 01       	movw	r30, r24
    2e4a:	80 81       	ld	r24, Z
    2e4c:	91 81       	ldd	r25, Z+1	; 0x01
    2e4e:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <strcmp>
    2e52:	29 2f       	mov	r18, r25
    2e54:	33 27       	eor	r19, r19
    2e56:	27 fd       	sbrc	r18, 7
    2e58:	30 95       	com	r19
    2e5a:	20 95       	com	r18
    2e5c:	30 95       	com	r19
    2e5e:	22 27       	eor	r18, r18
    2e60:	33 0f       	add	r19, r19
    2e62:	22 1f       	adc	r18, r18
    2e64:	33 27       	eor	r19, r19
}
    2e66:	c9 01       	movw	r24, r18
    2e68:	08 95       	ret

00002e6a <_ZNK6StringleERKS_>:
  return strcmp( _buffer, rhs._buffer ) > 0;
}

int String::operator<=( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) <= 0;
    2e6a:	fb 01       	movw	r30, r22
    2e6c:	60 81       	ld	r22, Z
    2e6e:	71 81       	ldd	r23, Z+1	; 0x01
    2e70:	fc 01       	movw	r30, r24
    2e72:	80 81       	ld	r24, Z
    2e74:	91 81       	ldd	r25, Z+1	; 0x01
    2e76:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <strcmp>
    2e7a:	40 e0       	ldi	r20, 0x00	; 0
    2e7c:	50 e0       	ldi	r21, 0x00	; 0
    2e7e:	18 16       	cp	r1, r24
    2e80:	19 06       	cpc	r1, r25
    2e82:	14 f4       	brge	.+4      	; 0x2e88 <_ZNK6StringleERKS_+0x1e>
}
    2e84:	ca 01       	movw	r24, r20
    2e86:	08 95       	ret
  return strcmp( _buffer, rhs._buffer ) > 0;
}

int String::operator<=( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) <= 0;
    2e88:	41 e0       	ldi	r20, 0x01	; 1
    2e8a:	50 e0       	ldi	r21, 0x00	; 0
}
    2e8c:	ca 01       	movw	r24, r20
    2e8e:	08 95       	ret

00002e90 <_ZNK6StringgtERKS_>:
  return strcmp( _buffer, rhs._buffer ) < 0;
}

int String::operator>( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) > 0;
    2e90:	fb 01       	movw	r30, r22
    2e92:	60 81       	ld	r22, Z
    2e94:	71 81       	ldd	r23, Z+1	; 0x01
    2e96:	fc 01       	movw	r30, r24
    2e98:	80 81       	ld	r24, Z
    2e9a:	91 81       	ldd	r25, Z+1	; 0x01
    2e9c:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <strcmp>
    2ea0:	40 e0       	ldi	r20, 0x00	; 0
    2ea2:	50 e0       	ldi	r21, 0x00	; 0
    2ea4:	18 16       	cp	r1, r24
    2ea6:	19 06       	cpc	r1, r25
    2ea8:	14 f4       	brge	.+4      	; 0x2eae <_ZNK6StringgtERKS_+0x1e>
    2eaa:	41 e0       	ldi	r20, 0x01	; 1
    2eac:	50 e0       	ldi	r21, 0x00	; 0
}
    2eae:	ca 01       	movw	r24, r20
    2eb0:	08 95       	ret

00002eb2 <_ZNK6StringltERKS_>:
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
}

int String::operator<( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) < 0;
    2eb2:	fb 01       	movw	r30, r22
    2eb4:	60 81       	ld	r22, Z
    2eb6:	71 81       	ldd	r23, Z+1	; 0x01
    2eb8:	fc 01       	movw	r30, r24
    2eba:	80 81       	ld	r24, Z
    2ebc:	91 81       	ldd	r25, Z+1	; 0x01
    2ebe:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <strcmp>
    2ec2:	29 2f       	mov	r18, r25
    2ec4:	33 27       	eor	r19, r19
    2ec6:	27 fd       	sbrc	r18, 7
    2ec8:	30 95       	com	r19
    2eca:	22 27       	eor	r18, r18
    2ecc:	33 0f       	add	r19, r19
    2ece:	22 1f       	adc	r18, r18
    2ed0:	33 27       	eor	r19, r19
}
    2ed2:	c9 01       	movw	r24, r18
    2ed4:	08 95       	ret

00002ed6 <_ZNK6StringneERKS_>:
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
}

int String::operator!=( const String &rhs ) const
{
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	db 01       	movw	r26, r22
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
    2eda:	24 81       	ldd	r18, Z+4	; 0x04
    2edc:	35 81       	ldd	r19, Z+5	; 0x05
    2ede:	14 96       	adiw	r26, 0x04	; 4
    2ee0:	8d 91       	ld	r24, X+
    2ee2:	9c 91       	ld	r25, X
    2ee4:	15 97       	sbiw	r26, 0x05	; 5
    2ee6:	28 17       	cp	r18, r24
    2ee8:	39 07       	cpc	r19, r25
    2eea:	21 f0       	breq	.+8      	; 0x2ef4 <_ZNK6StringneERKS_+0x1e>
    2eec:	21 e0       	ldi	r18, 0x01	; 1
    2eee:	30 e0       	ldi	r19, 0x00	; 0
}
    2ef0:	c9 01       	movw	r24, r18
    2ef2:	08 95       	ret
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
}

int String::operator!=( const String &rhs ) const
{
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
    2ef4:	6d 91       	ld	r22, X+
    2ef6:	7c 91       	ld	r23, X
    2ef8:	80 81       	ld	r24, Z
    2efa:	91 81       	ldd	r25, Z+1	; 0x01
    2efc:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <strcmp>
    2f00:	9c 01       	movw	r18, r24
    2f02:	21 15       	cp	r18, r1
    2f04:	31 05       	cpc	r19, r1
    2f06:	91 f7       	brne	.-28     	; 0x2eec <_ZNK6StringneERKS_+0x16>
}
    2f08:	c9 01       	movw	r24, r18
    2f0a:	08 95       	ret

00002f0c <_ZNK6StringeqERKS_>:
  return *this;
}


int String::operator==( const String &rhs ) const
{
    2f0c:	fc 01       	movw	r30, r24
    2f0e:	db 01       	movw	r26, r22
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
    2f10:	24 81       	ldd	r18, Z+4	; 0x04
    2f12:	35 81       	ldd	r19, Z+5	; 0x05
    2f14:	14 96       	adiw	r26, 0x04	; 4
    2f16:	8d 91       	ld	r24, X+
    2f18:	9c 91       	ld	r25, X
    2f1a:	15 97       	sbiw	r26, 0x05	; 5
    2f1c:	28 17       	cp	r18, r24
    2f1e:	39 07       	cpc	r19, r25
    2f20:	21 f0       	breq	.+8      	; 0x2f2a <_ZNK6StringeqERKS_+0x1e>
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
}
    2f26:	c9 01       	movw	r24, r18
    2f28:	08 95       	ret
}


int String::operator==( const String &rhs ) const
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
    2f2a:	6d 91       	ld	r22, X+
    2f2c:	7c 91       	ld	r23, X
    2f2e:	80 81       	ld	r24, Z
    2f30:	91 81       	ldd	r25, Z+1	; 0x01
    2f32:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <strcmp>
    2f36:	9c 01       	movw	r18, r24
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	21 15       	cp	r18, r1
    2f3e:	31 05       	cpc	r19, r1
    2f40:	19 f0       	breq	.+6      	; 0x2f48 <_ZNK6StringeqERKS_+0x3c>
    2f42:	9c 01       	movw	r18, r24
}
    2f44:	c9 01       	movw	r24, r18
    2f46:	08 95       	ret
}


int String::operator==( const String &rhs ) const
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	9c 01       	movw	r18, r24
    2f4e:	fa cf       	rjmp	.-12     	; 0x2f44 <_ZNK6StringeqERKS_+0x38>

00002f50 <_ZNK6String9compareToERKS_>:
  }
}

int String::compareTo( const String &s2 ) const
{
  return strcmp( _buffer, s2._buffer );
    2f50:	fb 01       	movw	r30, r22
    2f52:	60 81       	ld	r22, Z
    2f54:	71 81       	ldd	r23, Z+1	; 0x01
    2f56:	fc 01       	movw	r30, r24
    2f58:	80 81       	ld	r24, Z
    2f5a:	91 81       	ldd	r25, Z+1	; 0x01
    2f5c:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <strcmp>
}
    2f60:	08 95       	ret

00002f62 <_ZN6StringpLERKS_>:
//  _buffer[ _length ] = '\0';
//  return *this;
//}

const String & String::operator+=( const String &other )
{
    2f62:	ef 92       	push	r14
    2f64:	ff 92       	push	r15
    2f66:	0f 93       	push	r16
    2f68:	1f 93       	push	r17
    2f6a:	cf 93       	push	r28
    2f6c:	df 93       	push	r29
    2f6e:	ec 01       	movw	r28, r24
    2f70:	8b 01       	movw	r16, r22
  _length += other._length;
    2f72:	fb 01       	movw	r30, r22
    2f74:	64 81       	ldd	r22, Z+4	; 0x04
    2f76:	75 81       	ldd	r23, Z+5	; 0x05
    2f78:	8c 81       	ldd	r24, Y+4	; 0x04
    2f7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f7c:	68 0f       	add	r22, r24
    2f7e:	79 1f       	adc	r23, r25
    2f80:	7d 83       	std	Y+5, r23	; 0x05
    2f82:	6c 83       	std	Y+4, r22	; 0x04
  if ( _length > _capacity )
    2f84:	8a 81       	ldd	r24, Y+2	; 0x02
    2f86:	9b 81       	ldd	r25, Y+3	; 0x03
    2f88:	86 17       	cp	r24, r22
    2f8a:	97 07       	cpc	r25, r23
    2f8c:	78 f4       	brcc	.+30     	; 0x2fac <_ZN6StringpLERKS_+0x4a>
  {
    char *temp = (char *)realloc(_buffer, _length + 1);
    2f8e:	6f 5f       	subi	r22, 0xFF	; 255
    2f90:	7f 4f       	sbci	r23, 0xFF	; 255
    2f92:	88 81       	ld	r24, Y
    2f94:	99 81       	ldd	r25, Y+1	; 0x01
    2f96:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <realloc>
    if ( temp != NULL ) {
    2f9a:	00 97       	sbiw	r24, 0x00	; 0
    2f9c:	b1 f0       	breq	.+44     	; 0x2fca <_ZN6StringpLERKS_+0x68>
      _buffer = temp;
    2f9e:	99 83       	std	Y+1, r25	; 0x01
    2fa0:	88 83       	st	Y, r24
      _capacity = _length;
    2fa2:	2c 81       	ldd	r18, Y+4	; 0x04
    2fa4:	3d 81       	ldd	r19, Y+5	; 0x05
    2fa6:	3b 83       	std	Y+3, r19	; 0x03
    2fa8:	2a 83       	std	Y+2, r18	; 0x02
    2faa:	02 c0       	rjmp	.+4      	; 0x2fb0 <_ZN6StringpLERKS_+0x4e>
    } else {
      _length -= other._length;
      return *this;
    2fac:	88 81       	ld	r24, Y
    2fae:	99 81       	ldd	r25, Y+1	; 0x01
    }
  }
  strcat( _buffer, other._buffer );
    2fb0:	f8 01       	movw	r30, r16
    2fb2:	60 81       	ld	r22, Z
    2fb4:	71 81       	ldd	r23, Z+1	; 0x01
    2fb6:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <strcat>
  return *this;
}
    2fba:	ce 01       	movw	r24, r28
    2fbc:	df 91       	pop	r29
    2fbe:	cf 91       	pop	r28
    2fc0:	1f 91       	pop	r17
    2fc2:	0f 91       	pop	r16
    2fc4:	ff 90       	pop	r15
    2fc6:	ef 90       	pop	r14
    2fc8:	08 95       	ret
    char *temp = (char *)realloc(_buffer, _length + 1);
    if ( temp != NULL ) {
      _buffer = temp;
      _capacity = _length;
    } else {
      _length -= other._length;
    2fca:	8c 81       	ldd	r24, Y+4	; 0x04
    2fcc:	9d 81       	ldd	r25, Y+5	; 0x05
    2fce:	f8 01       	movw	r30, r16
    2fd0:	24 81       	ldd	r18, Z+4	; 0x04
    2fd2:	35 81       	ldd	r19, Z+5	; 0x05
    2fd4:	82 1b       	sub	r24, r18
    2fd6:	93 0b       	sbc	r25, r19
    2fd8:	9d 83       	std	Y+5, r25	; 0x05
    2fda:	8c 83       	std	Y+4, r24	; 0x04
      return *this;
    2fdc:	ee cf       	rjmp	.-36     	; 0x2fba <_ZN6StringpLERKS_+0x58>

00002fde <_ZN6String6concatERKS_>:
  return strcmp( _buffer, s2._buffer );
}

const String & String::concat( const String &s2 )
{
  return (*this) += s2;
    2fde:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <_ZN6StringpLERKS_>
}
    2fe2:	08 95       	ret

00002fe4 <_ZN6StringaSERKS_>:

const String & String::operator=( const String &rhs )
{
    2fe4:	ef 92       	push	r14
    2fe6:	ff 92       	push	r15
    2fe8:	0f 93       	push	r16
    2fea:	1f 93       	push	r17
    2fec:	cf 93       	push	r28
    2fee:	df 93       	push	r29
    2ff0:	ec 01       	movw	r28, r24
    2ff2:	8b 01       	movw	r16, r22
  if ( this == &rhs )
    2ff4:	86 17       	cp	r24, r22
    2ff6:	97 07       	cpc	r25, r23
    2ff8:	99 f0       	breq	.+38     	; 0x3020 <_ZN6StringaSERKS_+0x3c>
    return *this;

  if ( rhs._length > _length )
    2ffa:	fb 01       	movw	r30, r22
    2ffc:	44 81       	ldd	r20, Z+4	; 0x04
    2ffe:	55 81       	ldd	r21, Z+5	; 0x05
    3000:	8c 81       	ldd	r24, Y+4	; 0x04
    3002:	9d 81       	ldd	r25, Y+5	; 0x05
    3004:	84 17       	cp	r24, r20
    3006:	95 07       	cpc	r25, r21
    3008:	98 f0       	brcs	.+38     	; 0x3030 <_ZN6StringaSERKS_+0x4c>
  {
    free(_buffer);
    getBuffer( rhs._length );
  }
  
  if ( _buffer != NULL ) {
    300a:	88 81       	ld	r24, Y
    300c:	99 81       	ldd	r25, Y+1	; 0x01
    300e:	00 97       	sbiw	r24, 0x00	; 0
    3010:	39 f0       	breq	.+14     	; 0x3020 <_ZN6StringaSERKS_+0x3c>
    _length = rhs._length;
    3012:	5d 83       	std	Y+5, r21	; 0x05
    3014:	4c 83       	std	Y+4, r20	; 0x04
    strcpy( _buffer, rhs._buffer );
    3016:	f8 01       	movw	r30, r16
    3018:	60 81       	ld	r22, Z
    301a:	71 81       	ldd	r23, Z+1	; 0x01
    301c:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <strcpy>
  }
  return *this;
}
    3020:	ce 01       	movw	r24, r28
    3022:	df 91       	pop	r29
    3024:	cf 91       	pop	r28
    3026:	1f 91       	pop	r17
    3028:	0f 91       	pop	r16
    302a:	ff 90       	pop	r15
    302c:	ef 90       	pop	r14
    302e:	08 95       	ret
  if ( this == &rhs )
    return *this;

  if ( rhs._length > _length )
  {
    free(_buffer);
    3030:	88 81       	ld	r24, Y
    3032:	99 81       	ldd	r25, Y+1	; 0x01
    3034:	0e 94 39 2b 	call	0x5672	; 0x5672 <free>
    getBuffer( rhs._length );
    3038:	f8 01       	movw	r30, r16
    303a:	84 81       	ldd	r24, Z+4	; 0x04
    303c:	95 81       	ldd	r25, Z+5	; 0x05
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    303e:	9b 83       	std	Y+3, r25	; 0x03
    3040:	8a 83       	std	Y+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3042:	01 96       	adiw	r24, 0x01	; 1
    3044:	0e 94 97 2a 	call	0x552e	; 0x552e <malloc>
    3048:	99 83       	std	Y+1, r25	; 0x01
    304a:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    304c:	00 97       	sbiw	r24, 0x00	; 0
    304e:	21 f0       	breq	.+8      	; 0x3058 <_ZN6StringaSERKS_+0x74>
    3050:	f8 01       	movw	r30, r16
    3052:	44 81       	ldd	r20, Z+4	; 0x04
    3054:	55 81       	ldd	r21, Z+5	; 0x05
    3056:	dd cf       	rjmp	.-70     	; 0x3012 <_ZN6StringaSERKS_+0x2e>
    3058:	1b 82       	std	Y+3, r1	; 0x03
    305a:	1a 82       	std	Y+2, r1	; 0x02
    305c:	1d 82       	std	Y+5, r1	; 0x05
    305e:	1c 82       	std	Y+4, r1	; 0x04
    3060:	df cf       	rjmp	.-66     	; 0x3020 <_ZN6StringaSERKS_+0x3c>

00003062 <_ZN6StringC1Eh>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const unsigned char value )
    3062:	0f 93       	push	r16
    3064:	1f 93       	push	r17
    3066:	df 93       	push	r29
    3068:	cf 93       	push	r28
    306a:	0f 92       	push	r0
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
    3070:	8c 01       	movw	r16, r24
{
  _length = 1;
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	d8 01       	movw	r26, r16
    3078:	15 96       	adiw	r26, 0x05	; 5
    307a:	9c 93       	st	X, r25
    307c:	8e 93       	st	-X, r24
    307e:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3080:	13 96       	adiw	r26, 0x03	; 3
    3082:	9c 93       	st	X, r25
    3084:	8e 93       	st	-X, r24
    3086:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    3088:	82 e0       	ldi	r24, 0x02	; 2
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	69 83       	std	Y+1, r22	; 0x01
    308e:	0e 94 97 2a 	call	0x552e	; 0x552e <malloc>
    3092:	fc 01       	movw	r30, r24
    3094:	d8 01       	movw	r26, r16
    3096:	11 96       	adiw	r26, 0x01	; 1
    3098:	9c 93       	st	X, r25
    309a:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    309c:	69 81       	ldd	r22, Y+1	; 0x01
    309e:	00 97       	sbiw	r24, 0x00	; 0
    30a0:	61 f0       	breq	.+24     	; 0x30ba <_ZN6StringC1Eh+0x58>
  getBuffer(1);
  if ( _buffer != NULL) {
    _buffer[0] = value;
    30a2:	60 83       	st	Z, r22
    _buffer[1] = 0;
    30a4:	d8 01       	movw	r26, r16
    30a6:	ed 91       	ld	r30, X+
    30a8:	fc 91       	ld	r31, X
    30aa:	11 97       	sbiw	r26, 0x01	; 1
    30ac:	11 82       	std	Z+1, r1	; 0x01
  }
}
    30ae:	0f 90       	pop	r0
    30b0:	cf 91       	pop	r28
    30b2:	df 91       	pop	r29
    30b4:	1f 91       	pop	r17
    30b6:	0f 91       	pop	r16
    30b8:	08 95       	ret
    30ba:	13 96       	adiw	r26, 0x03	; 3
    30bc:	1c 92       	st	X, r1
    30be:	1e 92       	st	-X, r1
    30c0:	12 97       	sbiw	r26, 0x02	; 2
    30c2:	15 96       	adiw	r26, 0x05	; 5
    30c4:	1c 92       	st	X, r1
    30c6:	1e 92       	st	-X, r1
    30c8:	14 97       	sbiw	r26, 0x04	; 4
    30ca:	0f 90       	pop	r0
    30cc:	cf 91       	pop	r28
    30ce:	df 91       	pop	r29
    30d0:	1f 91       	pop	r17
    30d2:	0f 91       	pop	r16
    30d4:	08 95       	ret

000030d6 <_ZN6StringC2Eh>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const unsigned char value )
    30d6:	0f 93       	push	r16
    30d8:	1f 93       	push	r17
    30da:	df 93       	push	r29
    30dc:	cf 93       	push	r28
    30de:	0f 92       	push	r0
    30e0:	cd b7       	in	r28, 0x3d	; 61
    30e2:	de b7       	in	r29, 0x3e	; 62
    30e4:	8c 01       	movw	r16, r24
{
  _length = 1;
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	d8 01       	movw	r26, r16
    30ec:	15 96       	adiw	r26, 0x05	; 5
    30ee:	9c 93       	st	X, r25
    30f0:	8e 93       	st	-X, r24
    30f2:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    30f4:	13 96       	adiw	r26, 0x03	; 3
    30f6:	9c 93       	st	X, r25
    30f8:	8e 93       	st	-X, r24
    30fa:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    30fc:	82 e0       	ldi	r24, 0x02	; 2
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	69 83       	std	Y+1, r22	; 0x01
    3102:	0e 94 97 2a 	call	0x552e	; 0x552e <malloc>
    3106:	fc 01       	movw	r30, r24
    3108:	d8 01       	movw	r26, r16
    310a:	11 96       	adiw	r26, 0x01	; 1
    310c:	9c 93       	st	X, r25
    310e:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3110:	69 81       	ldd	r22, Y+1	; 0x01
    3112:	00 97       	sbiw	r24, 0x00	; 0
    3114:	61 f0       	breq	.+24     	; 0x312e <_ZN6StringC2Eh+0x58>
  getBuffer(1);
  if ( _buffer != NULL) {
    _buffer[0] = value;
    3116:	60 83       	st	Z, r22
    _buffer[1] = 0;
    3118:	d8 01       	movw	r26, r16
    311a:	ed 91       	ld	r30, X+
    311c:	fc 91       	ld	r31, X
    311e:	11 97       	sbiw	r26, 0x01	; 1
    3120:	11 82       	std	Z+1, r1	; 0x01
  }
}
    3122:	0f 90       	pop	r0
    3124:	cf 91       	pop	r28
    3126:	df 91       	pop	r29
    3128:	1f 91       	pop	r17
    312a:	0f 91       	pop	r16
    312c:	08 95       	ret
    312e:	13 96       	adiw	r26, 0x03	; 3
    3130:	1c 92       	st	X, r1
    3132:	1e 92       	st	-X, r1
    3134:	12 97       	sbiw	r26, 0x02	; 2
    3136:	15 96       	adiw	r26, 0x05	; 5
    3138:	1c 92       	st	X, r1
    313a:	1e 92       	st	-X, r1
    313c:	14 97       	sbiw	r26, 0x04	; 4
    313e:	0f 90       	pop	r0
    3140:	cf 91       	pop	r28
    3142:	df 91       	pop	r29
    3144:	1f 91       	pop	r17
    3146:	0f 91       	pop	r16
    3148:	08 95       	ret

0000314a <_ZN6StringC1Ec>:
  getBuffer( _length = value._length );
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
}

String::String( const char value )
    314a:	0f 93       	push	r16
    314c:	1f 93       	push	r17
    314e:	df 93       	push	r29
    3150:	cf 93       	push	r28
    3152:	0f 92       	push	r0
    3154:	cd b7       	in	r28, 0x3d	; 61
    3156:	de b7       	in	r29, 0x3e	; 62
    3158:	8c 01       	movw	r16, r24
{
  _length = 1;
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	d8 01       	movw	r26, r16
    3160:	15 96       	adiw	r26, 0x05	; 5
    3162:	9c 93       	st	X, r25
    3164:	8e 93       	st	-X, r24
    3166:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3168:	13 96       	adiw	r26, 0x03	; 3
    316a:	9c 93       	st	X, r25
    316c:	8e 93       	st	-X, r24
    316e:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    3170:	82 e0       	ldi	r24, 0x02	; 2
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	69 83       	std	Y+1, r22	; 0x01
    3176:	0e 94 97 2a 	call	0x552e	; 0x552e <malloc>
    317a:	fc 01       	movw	r30, r24
    317c:	d8 01       	movw	r26, r16
    317e:	11 96       	adiw	r26, 0x01	; 1
    3180:	9c 93       	st	X, r25
    3182:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3184:	69 81       	ldd	r22, Y+1	; 0x01
    3186:	00 97       	sbiw	r24, 0x00	; 0
    3188:	61 f0       	breq	.+24     	; 0x31a2 <_ZN6StringC1Ec+0x58>
  getBuffer(1);
  if ( _buffer != NULL ) {
    _buffer[0] = value;
    318a:	60 83       	st	Z, r22
    _buffer[1] = 0;
    318c:	d8 01       	movw	r26, r16
    318e:	ed 91       	ld	r30, X+
    3190:	fc 91       	ld	r31, X
    3192:	11 97       	sbiw	r26, 0x01	; 1
    3194:	11 82       	std	Z+1, r1	; 0x01
  }
}
    3196:	0f 90       	pop	r0
    3198:	cf 91       	pop	r28
    319a:	df 91       	pop	r29
    319c:	1f 91       	pop	r17
    319e:	0f 91       	pop	r16
    31a0:	08 95       	ret
    31a2:	13 96       	adiw	r26, 0x03	; 3
    31a4:	1c 92       	st	X, r1
    31a6:	1e 92       	st	-X, r1
    31a8:	12 97       	sbiw	r26, 0x02	; 2
    31aa:	15 96       	adiw	r26, 0x05	; 5
    31ac:	1c 92       	st	X, r1
    31ae:	1e 92       	st	-X, r1
    31b0:	14 97       	sbiw	r26, 0x04	; 4
    31b2:	0f 90       	pop	r0
    31b4:	cf 91       	pop	r28
    31b6:	df 91       	pop	r29
    31b8:	1f 91       	pop	r17
    31ba:	0f 91       	pop	r16
    31bc:	08 95       	ret

000031be <_ZN6StringC2Ec>:
  getBuffer( _length = value._length );
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
}

String::String( const char value )
    31be:	0f 93       	push	r16
    31c0:	1f 93       	push	r17
    31c2:	df 93       	push	r29
    31c4:	cf 93       	push	r28
    31c6:	0f 92       	push	r0
    31c8:	cd b7       	in	r28, 0x3d	; 61
    31ca:	de b7       	in	r29, 0x3e	; 62
    31cc:	8c 01       	movw	r16, r24
{
  _length = 1;
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	d8 01       	movw	r26, r16
    31d4:	15 96       	adiw	r26, 0x05	; 5
    31d6:	9c 93       	st	X, r25
    31d8:	8e 93       	st	-X, r24
    31da:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    31dc:	13 96       	adiw	r26, 0x03	; 3
    31de:	9c 93       	st	X, r25
    31e0:	8e 93       	st	-X, r24
    31e2:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    31e4:	82 e0       	ldi	r24, 0x02	; 2
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	69 83       	std	Y+1, r22	; 0x01
    31ea:	0e 94 97 2a 	call	0x552e	; 0x552e <malloc>
    31ee:	fc 01       	movw	r30, r24
    31f0:	d8 01       	movw	r26, r16
    31f2:	11 96       	adiw	r26, 0x01	; 1
    31f4:	9c 93       	st	X, r25
    31f6:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    31f8:	69 81       	ldd	r22, Y+1	; 0x01
    31fa:	00 97       	sbiw	r24, 0x00	; 0
    31fc:	61 f0       	breq	.+24     	; 0x3216 <_ZN6StringC2Ec+0x58>
  getBuffer(1);
  if ( _buffer != NULL ) {
    _buffer[0] = value;
    31fe:	60 83       	st	Z, r22
    _buffer[1] = 0;
    3200:	d8 01       	movw	r26, r16
    3202:	ed 91       	ld	r30, X+
    3204:	fc 91       	ld	r31, X
    3206:	11 97       	sbiw	r26, 0x01	; 1
    3208:	11 82       	std	Z+1, r1	; 0x01
  }
}
    320a:	0f 90       	pop	r0
    320c:	cf 91       	pop	r28
    320e:	df 91       	pop	r29
    3210:	1f 91       	pop	r17
    3212:	0f 91       	pop	r16
    3214:	08 95       	ret
    3216:	13 96       	adiw	r26, 0x03	; 3
    3218:	1c 92       	st	X, r1
    321a:	1e 92       	st	-X, r1
    321c:	12 97       	sbiw	r26, 0x02	; 2
    321e:	15 96       	adiw	r26, 0x05	; 5
    3220:	1c 92       	st	X, r1
    3222:	1e 92       	st	-X, r1
    3224:	14 97       	sbiw	r26, 0x04	; 4
    3226:	0f 90       	pop	r0
    3228:	cf 91       	pop	r28
    322a:	df 91       	pop	r29
    322c:	1f 91       	pop	r17
    322e:	0f 91       	pop	r16
    3230:	08 95       	ret

00003232 <_ZN6StringC1ERKS_>:
  getBuffer( _length = strlen( value ) );
  if ( _buffer != NULL )
    strcpy( _buffer, value );
}

String::String( const String &value )
    3232:	0f 93       	push	r16
    3234:	1f 93       	push	r17
    3236:	cf 93       	push	r28
    3238:	df 93       	push	r29
    323a:	ec 01       	movw	r28, r24
    323c:	8b 01       	movw	r16, r22
{
  getBuffer( _length = value._length );
    323e:	fb 01       	movw	r30, r22
    3240:	84 81       	ldd	r24, Z+4	; 0x04
    3242:	95 81       	ldd	r25, Z+5	; 0x05
    3244:	9d 83       	std	Y+5, r25	; 0x05
    3246:	8c 83       	std	Y+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3248:	9b 83       	std	Y+3, r25	; 0x03
    324a:	8a 83       	std	Y+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    324c:	01 96       	adiw	r24, 0x01	; 1
    324e:	0e 94 97 2a 	call	0x552e	; 0x552e <malloc>
    3252:	99 83       	std	Y+1, r25	; 0x01
    3254:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3256:	00 97       	sbiw	r24, 0x00	; 0
    3258:	51 f0       	breq	.+20     	; 0x326e <_ZN6StringC1ERKS_+0x3c>
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
    325a:	f8 01       	movw	r30, r16
    325c:	60 81       	ld	r22, Z
    325e:	71 81       	ldd	r23, Z+1	; 0x01
    3260:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <strcpy>
}
    3264:	df 91       	pop	r29
    3266:	cf 91       	pop	r28
    3268:	1f 91       	pop	r17
    326a:	0f 91       	pop	r16
    326c:	08 95       	ret
    326e:	1b 82       	std	Y+3, r1	; 0x03
    3270:	1a 82       	std	Y+2, r1	; 0x02
    3272:	1d 82       	std	Y+5, r1	; 0x05
    3274:	1c 82       	std	Y+4, r1	; 0x04
    3276:	df 91       	pop	r29
    3278:	cf 91       	pop	r28
    327a:	1f 91       	pop	r17
    327c:	0f 91       	pop	r16
    327e:	08 95       	ret

00003280 <_ZN6StringC2ERKS_>:
  getBuffer( _length = strlen( value ) );
  if ( _buffer != NULL )
    strcpy( _buffer, value );
}

String::String( const String &value )
    3280:	0f 93       	push	r16
    3282:	1f 93       	push	r17
    3284:	cf 93       	push	r28
    3286:	df 93       	push	r29
    3288:	ec 01       	movw	r28, r24
    328a:	8b 01       	movw	r16, r22
{
  getBuffer( _length = value._length );
    328c:	fb 01       	movw	r30, r22
    328e:	84 81       	ldd	r24, Z+4	; 0x04
    3290:	95 81       	ldd	r25, Z+5	; 0x05
    3292:	9d 83       	std	Y+5, r25	; 0x05
    3294:	8c 83       	std	Y+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3296:	9b 83       	std	Y+3, r25	; 0x03
    3298:	8a 83       	std	Y+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    329a:	01 96       	adiw	r24, 0x01	; 1
    329c:	0e 94 97 2a 	call	0x552e	; 0x552e <malloc>
    32a0:	99 83       	std	Y+1, r25	; 0x01
    32a2:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    32a4:	00 97       	sbiw	r24, 0x00	; 0
    32a6:	51 f0       	breq	.+20     	; 0x32bc <_ZN6StringC2ERKS_+0x3c>
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
    32a8:	f8 01       	movw	r30, r16
    32aa:	60 81       	ld	r22, Z
    32ac:	71 81       	ldd	r23, Z+1	; 0x01
    32ae:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <strcpy>
}
    32b2:	df 91       	pop	r29
    32b4:	cf 91       	pop	r28
    32b6:	1f 91       	pop	r17
    32b8:	0f 91       	pop	r16
    32ba:	08 95       	ret
    32bc:	1b 82       	std	Y+3, r1	; 0x03
    32be:	1a 82       	std	Y+2, r1	; 0x02
    32c0:	1d 82       	std	Y+5, r1	; 0x05
    32c2:	1c 82       	std	Y+4, r1	; 0x04
    32c4:	df 91       	pop	r29
    32c6:	cf 91       	pop	r28
    32c8:	1f 91       	pop	r17
    32ca:	0f 91       	pop	r16
    32cc:	08 95       	ret

000032ce <_ZN6StringC1Emi>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned long value, const int base )
    32ce:	ef 92       	push	r14
    32d0:	ff 92       	push	r15
    32d2:	0f 93       	push	r16
    32d4:	1f 93       	push	r17
    32d6:	df 93       	push	r29
    32d8:	cf 93       	push	r28
    32da:	cd b7       	in	r28, 0x3d	; 61
    32dc:	de b7       	in	r29, 0x3e	; 62
    32de:	a1 97       	sbiw	r28, 0x21	; 33
    32e0:	0f b6       	in	r0, 0x3f	; 63
    32e2:	f8 94       	cli
    32e4:	de bf       	out	0x3e, r29	; 62
    32e6:	0f be       	out	0x3f, r0	; 63
    32e8:	cd bf       	out	0x3d, r28	; 61
    32ea:	7c 01       	movw	r14, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ultoa(value, buf, 10);
    32f0:	8e 01       	movw	r16, r28
    32f2:	0f 5f       	subi	r16, 0xFF	; 255
    32f4:	1f 4f       	sbci	r17, 0xFF	; 255
    32f6:	a8 01       	movw	r20, r16
    32f8:	2a e0       	ldi	r18, 0x0A	; 10
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <ultoa>
  getBuffer( _length = strlen(buf) );
    3300:	f8 01       	movw	r30, r16
    3302:	01 90       	ld	r0, Z+
    3304:	00 20       	and	r0, r0
    3306:	e9 f7       	brne	.-6      	; 0x3302 <_ZN6StringC1Emi+0x34>
    3308:	cf 01       	movw	r24, r30
    330a:	01 97       	sbiw	r24, 0x01	; 1
    330c:	80 1b       	sub	r24, r16
    330e:	91 0b       	sbc	r25, r17
    3310:	f7 01       	movw	r30, r14
    3312:	95 83       	std	Z+5, r25	; 0x05
    3314:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3316:	93 83       	std	Z+3, r25	; 0x03
    3318:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    331a:	01 96       	adiw	r24, 0x01	; 1
    331c:	0e 94 97 2a 	call	0x552e	; 0x552e <malloc>
    3320:	f7 01       	movw	r30, r14
    3322:	91 83       	std	Z+1, r25	; 0x01
    3324:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3326:	00 97       	sbiw	r24, 0x00	; 0
    3328:	81 f0       	breq	.+32     	; 0x334a <_ZN6StringC1Emi+0x7c>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    332a:	b8 01       	movw	r22, r16
    332c:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <strcpy>
}
    3330:	a1 96       	adiw	r28, 0x21	; 33
    3332:	0f b6       	in	r0, 0x3f	; 63
    3334:	f8 94       	cli
    3336:	de bf       	out	0x3e, r29	; 62
    3338:	0f be       	out	0x3f, r0	; 63
    333a:	cd bf       	out	0x3d, r28	; 61
    333c:	cf 91       	pop	r28
    333e:	df 91       	pop	r29
    3340:	1f 91       	pop	r17
    3342:	0f 91       	pop	r16
    3344:	ff 90       	pop	r15
    3346:	ef 90       	pop	r14
    3348:	08 95       	ret
    334a:	13 82       	std	Z+3, r1	; 0x03
    334c:	12 82       	std	Z+2, r1	; 0x02
    334e:	15 82       	std	Z+5, r1	; 0x05
    3350:	14 82       	std	Z+4, r1	; 0x04
    3352:	ee cf       	rjmp	.-36     	; 0x3330 <_ZN6StringC1Emi+0x62>

00003354 <_ZN6StringC2Emi>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned long value, const int base )
    3354:	ef 92       	push	r14
    3356:	ff 92       	push	r15
    3358:	0f 93       	push	r16
    335a:	1f 93       	push	r17
    335c:	df 93       	push	r29
    335e:	cf 93       	push	r28
    3360:	cd b7       	in	r28, 0x3d	; 61
    3362:	de b7       	in	r29, 0x3e	; 62
    3364:	a1 97       	sbiw	r28, 0x21	; 33
    3366:	0f b6       	in	r0, 0x3f	; 63
    3368:	f8 94       	cli
    336a:	de bf       	out	0x3e, r29	; 62
    336c:	0f be       	out	0x3f, r0	; 63
    336e:	cd bf       	out	0x3d, r28	; 61
    3370:	7c 01       	movw	r14, r24
    3372:	cb 01       	movw	r24, r22
    3374:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ultoa(value, buf, 10);
    3376:	8e 01       	movw	r16, r28
    3378:	0f 5f       	subi	r16, 0xFF	; 255
    337a:	1f 4f       	sbci	r17, 0xFF	; 255
    337c:	a8 01       	movw	r20, r16
    337e:	2a e0       	ldi	r18, 0x0A	; 10
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <ultoa>
  getBuffer( _length = strlen(buf) );
    3386:	f8 01       	movw	r30, r16
    3388:	01 90       	ld	r0, Z+
    338a:	00 20       	and	r0, r0
    338c:	e9 f7       	brne	.-6      	; 0x3388 <_ZN6StringC2Emi+0x34>
    338e:	cf 01       	movw	r24, r30
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	80 1b       	sub	r24, r16
    3394:	91 0b       	sbc	r25, r17
    3396:	f7 01       	movw	r30, r14
    3398:	95 83       	std	Z+5, r25	; 0x05
    339a:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    339c:	93 83       	std	Z+3, r25	; 0x03
    339e:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    33a0:	01 96       	adiw	r24, 0x01	; 1
    33a2:	0e 94 97 2a 	call	0x552e	; 0x552e <malloc>
    33a6:	f7 01       	movw	r30, r14
    33a8:	91 83       	std	Z+1, r25	; 0x01
    33aa:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    33ac:	00 97       	sbiw	r24, 0x00	; 0
    33ae:	81 f0       	breq	.+32     	; 0x33d0 <_ZN6StringC2Emi+0x7c>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    33b0:	b8 01       	movw	r22, r16
    33b2:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <strcpy>
}
    33b6:	a1 96       	adiw	r28, 0x21	; 33
    33b8:	0f b6       	in	r0, 0x3f	; 63
    33ba:	f8 94       	cli
    33bc:	de bf       	out	0x3e, r29	; 62
    33be:	0f be       	out	0x3f, r0	; 63
    33c0:	cd bf       	out	0x3d, r28	; 61
    33c2:	cf 91       	pop	r28
    33c4:	df 91       	pop	r29
    33c6:	1f 91       	pop	r17
    33c8:	0f 91       	pop	r16
    33ca:	ff 90       	pop	r15
    33cc:	ef 90       	pop	r14
    33ce:	08 95       	ret
    33d0:	13 82       	std	Z+3, r1	; 0x03
    33d2:	12 82       	std	Z+2, r1	; 0x02
    33d4:	15 82       	std	Z+5, r1	; 0x05
    33d6:	14 82       	std	Z+4, r1	; 0x04
    33d8:	ee cf       	rjmp	.-36     	; 0x33b6 <_ZN6StringC2Emi+0x62>

000033da <_ZN6StringC1Eji>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned int value, const int base )
    33da:	ef 92       	push	r14
    33dc:	ff 92       	push	r15
    33de:	0f 93       	push	r16
    33e0:	1f 93       	push	r17
    33e2:	df 93       	push	r29
    33e4:	cf 93       	push	r28
    33e6:	cd b7       	in	r28, 0x3d	; 61
    33e8:	de b7       	in	r29, 0x3e	; 62
    33ea:	a1 97       	sbiw	r28, 0x21	; 33
    33ec:	0f b6       	in	r0, 0x3f	; 63
    33ee:	f8 94       	cli
    33f0:	de bf       	out	0x3e, r29	; 62
    33f2:	0f be       	out	0x3f, r0	; 63
    33f4:	cd bf       	out	0x3d, r28	; 61
    33f6:	7c 01       	movw	r14, r24
    33f8:	9a 01       	movw	r18, r20
{
  char buf[33];   
  ultoa((unsigned long)value, buf, base);
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	8e 01       	movw	r16, r28
    3400:	0f 5f       	subi	r16, 0xFF	; 255
    3402:	1f 4f       	sbci	r17, 0xFF	; 255
    3404:	a8 01       	movw	r20, r16
    3406:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <ultoa>
  getBuffer( _length = strlen(buf) );
    340a:	f8 01       	movw	r30, r16
    340c:	01 90       	ld	r0, Z+
    340e:	00 20       	and	r0, r0
    3410:	e9 f7       	brne	.-6      	; 0x340c <_ZN6StringC1Eji+0x32>
    3412:	cf 01       	movw	r24, r30
    3414:	01 97       	sbiw	r24, 0x01	; 1
    3416:	80 1b       	sub	r24, r16
    3418:	91 0b       	sbc	r25, r17
    341a:	f7 01       	movw	r30, r14
    341c:	95 83       	std	Z+5, r25	; 0x05
    341e:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3420:	93 83       	std	Z+3, r25	; 0x03
    3422:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3424:	01 96       	adiw	r24, 0x01	; 1
    3426:	0e 94 97 2a 	call	0x552e	; 0x552e <malloc>
    342a:	f7 01       	movw	r30, r14
    342c:	91 83       	std	Z+1, r25	; 0x01
    342e:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3430:	00 97       	sbiw	r24, 0x00	; 0
    3432:	81 f0       	breq	.+32     	; 0x3454 <_ZN6StringC1Eji+0x7a>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    3434:	b8 01       	movw	r22, r16
    3436:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <strcpy>
}
    343a:	a1 96       	adiw	r28, 0x21	; 33
    343c:	0f b6       	in	r0, 0x3f	; 63
    343e:	f8 94       	cli
    3440:	de bf       	out	0x3e, r29	; 62
    3442:	0f be       	out	0x3f, r0	; 63
    3444:	cd bf       	out	0x3d, r28	; 61
    3446:	cf 91       	pop	r28
    3448:	df 91       	pop	r29
    344a:	1f 91       	pop	r17
    344c:	0f 91       	pop	r16
    344e:	ff 90       	pop	r15
    3450:	ef 90       	pop	r14
    3452:	08 95       	ret
    3454:	13 82       	std	Z+3, r1	; 0x03
    3456:	12 82       	std	Z+2, r1	; 0x02
    3458:	15 82       	std	Z+5, r1	; 0x05
    345a:	14 82       	std	Z+4, r1	; 0x04
    345c:	ee cf       	rjmp	.-36     	; 0x343a <_ZN6StringC1Eji+0x60>

0000345e <_ZN6StringC2Eji>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned int value, const int base )
    345e:	ef 92       	push	r14
    3460:	ff 92       	push	r15
    3462:	0f 93       	push	r16
    3464:	1f 93       	push	r17
    3466:	df 93       	push	r29
    3468:	cf 93       	push	r28
    346a:	cd b7       	in	r28, 0x3d	; 61
    346c:	de b7       	in	r29, 0x3e	; 62
    346e:	a1 97       	sbiw	r28, 0x21	; 33
    3470:	0f b6       	in	r0, 0x3f	; 63
    3472:	f8 94       	cli
    3474:	de bf       	out	0x3e, r29	; 62
    3476:	0f be       	out	0x3f, r0	; 63
    3478:	cd bf       	out	0x3d, r28	; 61
    347a:	7c 01       	movw	r14, r24
    347c:	9a 01       	movw	r18, r20
{
  char buf[33];   
  ultoa((unsigned long)value, buf, base);
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	8e 01       	movw	r16, r28
    3484:	0f 5f       	subi	r16, 0xFF	; 255
    3486:	1f 4f       	sbci	r17, 0xFF	; 255
    3488:	a8 01       	movw	r20, r16
    348a:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <ultoa>
  getBuffer( _length = strlen(buf) );
    348e:	f8 01       	movw	r30, r16
    3490:	01 90       	ld	r0, Z+
    3492:	00 20       	and	r0, r0
    3494:	e9 f7       	brne	.-6      	; 0x3490 <_ZN6StringC2Eji+0x32>
    3496:	cf 01       	movw	r24, r30
    3498:	01 97       	sbiw	r24, 0x01	; 1
    349a:	80 1b       	sub	r24, r16
    349c:	91 0b       	sbc	r25, r17
    349e:	f7 01       	movw	r30, r14
    34a0:	95 83       	std	Z+5, r25	; 0x05
    34a2:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    34a4:	93 83       	std	Z+3, r25	; 0x03
    34a6:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    34a8:	01 96       	adiw	r24, 0x01	; 1
    34aa:	0e 94 97 2a 	call	0x552e	; 0x552e <malloc>
    34ae:	f7 01       	movw	r30, r14
    34b0:	91 83       	std	Z+1, r25	; 0x01
    34b2:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    34b4:	00 97       	sbiw	r24, 0x00	; 0
    34b6:	81 f0       	breq	.+32     	; 0x34d8 <_ZN6StringC2Eji+0x7a>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    34b8:	b8 01       	movw	r22, r16
    34ba:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <strcpy>
}
    34be:	a1 96       	adiw	r28, 0x21	; 33
    34c0:	0f b6       	in	r0, 0x3f	; 63
    34c2:	f8 94       	cli
    34c4:	de bf       	out	0x3e, r29	; 62
    34c6:	0f be       	out	0x3f, r0	; 63
    34c8:	cd bf       	out	0x3d, r28	; 61
    34ca:	cf 91       	pop	r28
    34cc:	df 91       	pop	r29
    34ce:	1f 91       	pop	r17
    34d0:	0f 91       	pop	r16
    34d2:	ff 90       	pop	r15
    34d4:	ef 90       	pop	r14
    34d6:	08 95       	ret
    34d8:	13 82       	std	Z+3, r1	; 0x03
    34da:	12 82       	std	Z+2, r1	; 0x02
    34dc:	15 82       	std	Z+5, r1	; 0x05
    34de:	14 82       	std	Z+4, r1	; 0x04
    34e0:	ee cf       	rjmp	.-36     	; 0x34be <_ZN6StringC2Eji+0x60>

000034e2 <_ZN6StringC1EPKc>:
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    34e2:	0f 93       	push	r16
    34e4:	1f 93       	push	r17
    34e6:	cf 93       	push	r28
    34e8:	df 93       	push	r29
    34ea:	ec 01       	movw	r28, r24
    34ec:	8b 01       	movw	r16, r22
{
  if ( value == NULL )
    34ee:	61 15       	cp	r22, r1
    34f0:	71 05       	cpc	r23, r1
    34f2:	21 f1       	breq	.+72     	; 0x353c <_ZN6StringC1EPKc+0x5a>
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    34f4:	fb 01       	movw	r30, r22
    34f6:	01 90       	ld	r0, Z+
    34f8:	00 20       	and	r0, r0
    34fa:	e9 f7       	brne	.-6      	; 0x34f6 <_ZN6StringC1EPKc+0x14>
    34fc:	31 97       	sbiw	r30, 0x01	; 1
    34fe:	e6 1b       	sub	r30, r22
    3500:	f7 0b       	sbc	r31, r23
    3502:	cf 01       	movw	r24, r30
    3504:	01 96       	adiw	r24, 0x01	; 1
{
  if ( value == NULL )
    value = "";
  getBuffer( _length = strlen( value ) );
    3506:	fd 83       	std	Y+5, r31	; 0x05
    3508:	ec 83       	std	Y+4, r30	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    350a:	fb 83       	std	Y+3, r31	; 0x03
    350c:	ea 83       	std	Y+2, r30	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    350e:	0e 94 97 2a 	call	0x552e	; 0x552e <malloc>
    3512:	99 83       	std	Y+1, r25	; 0x01
    3514:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3516:	00 97       	sbiw	r24, 0x00	; 0
    3518:	41 f0       	breq	.+16     	; 0x352a <_ZN6StringC1EPKc+0x48>
  if ( _buffer != NULL )
    strcpy( _buffer, value );
    351a:	b8 01       	movw	r22, r16
    351c:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <strcpy>
}
    3520:	df 91       	pop	r29
    3522:	cf 91       	pop	r28
    3524:	1f 91       	pop	r17
    3526:	0f 91       	pop	r16
    3528:	08 95       	ret
    352a:	1b 82       	std	Y+3, r1	; 0x03
    352c:	1a 82       	std	Y+2, r1	; 0x02
    352e:	1d 82       	std	Y+5, r1	; 0x05
    3530:	1c 82       	std	Y+4, r1	; 0x04
    3532:	df 91       	pop	r29
    3534:	cf 91       	pop	r28
    3536:	1f 91       	pop	r17
    3538:	0f 91       	pop	r16
    353a:	08 95       	ret
#include "WString.h"


String::String( const char *value )
{
  if ( value == NULL )
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	e0 e0       	ldi	r30, 0x00	; 0
    3542:	f0 e0       	ldi	r31, 0x00	; 0
    3544:	0a ec       	ldi	r16, 0xCA	; 202
    3546:	11 e0       	ldi	r17, 0x01	; 1
    3548:	de cf       	rjmp	.-68     	; 0x3506 <_ZN6StringC1EPKc+0x24>

0000354a <_ZNK6String11toUpperCaseEv>:
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
  return temp;
}

String String::toUpperCase() const
{
    354a:	af 92       	push	r10
    354c:	bf 92       	push	r11
    354e:	cf 92       	push	r12
    3550:	df 92       	push	r13
    3552:	ef 92       	push	r14
    3554:	ff 92       	push	r15
    3556:	0f 93       	push	r16
    3558:	1f 93       	push	r17
    355a:	cf 93       	push	r28
    355c:	df 93       	push	r29
    355e:	7c 01       	movw	r14, r24
    3560:	8b 01       	movw	r16, r22
  String temp = _buffer;
    3562:	c8 2e       	mov	r12, r24
    3564:	e6 01       	movw	r28, r12
    3566:	6e 01       	movw	r12, r28
    3568:	df 2c       	mov	r13, r15
    356a:	e6 01       	movw	r28, r12
    356c:	fb 01       	movw	r30, r22
    356e:	60 81       	ld	r22, Z
    3570:	71 81       	ldd	r23, Z+1	; 0x01
    3572:	c6 01       	movw	r24, r12
    3574:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <_ZN6StringC1EPKc>

  for ( unsigned int i = 0; i < _length; i++ )
    3578:	f8 01       	movw	r30, r16
    357a:	84 81       	ldd	r24, Z+4	; 0x04
    357c:	95 81       	ldd	r25, Z+5	; 0x05
    357e:	00 97       	sbiw	r24, 0x00	; 0
    3580:	b1 f0       	breq	.+44     	; 0x35ae <_ZNK6String11toUpperCaseEv+0x64>
    3582:	aa 24       	eor	r10, r10
    3584:	bb 24       	eor	r11, r11
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
    3586:	c8 80       	ld	r12, Y
    3588:	d9 80       	ldd	r13, Y+1	; 0x01
    358a:	ca 0c       	add	r12, r10
    358c:	db 1c       	adc	r13, r11
    358e:	f6 01       	movw	r30, r12
    3590:	80 81       	ld	r24, Z
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	0e 94 d8 2c 	call	0x59b0	; 0x59b0 <toupper>
    3598:	f6 01       	movw	r30, r12
    359a:	80 83       	st	Z, r24

String String::toUpperCase() const
{
  String temp = _buffer;

  for ( unsigned int i = 0; i < _length; i++ )
    359c:	08 94       	sec
    359e:	a1 1c       	adc	r10, r1
    35a0:	b1 1c       	adc	r11, r1
    35a2:	f8 01       	movw	r30, r16
    35a4:	84 81       	ldd	r24, Z+4	; 0x04
    35a6:	95 81       	ldd	r25, Z+5	; 0x05
    35a8:	a8 16       	cp	r10, r24
    35aa:	b9 06       	cpc	r11, r25
    35ac:	60 f3       	brcs	.-40     	; 0x3586 <_ZNK6String11toUpperCaseEv+0x3c>
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
  return temp;
}
    35ae:	c7 01       	movw	r24, r14
    35b0:	df 91       	pop	r29
    35b2:	cf 91       	pop	r28
    35b4:	1f 91       	pop	r17
    35b6:	0f 91       	pop	r16
    35b8:	ff 90       	pop	r15
    35ba:	ef 90       	pop	r14
    35bc:	df 90       	pop	r13
    35be:	cf 90       	pop	r12
    35c0:	bf 90       	pop	r11
    35c2:	af 90       	pop	r10
    35c4:	08 95       	ret

000035c6 <_ZNK6String11toLowerCaseEv>:
  _buffer[ right ] = temp;  //restore character
  return outPut;
}

String String::toLowerCase() const
{
    35c6:	af 92       	push	r10
    35c8:	bf 92       	push	r11
    35ca:	cf 92       	push	r12
    35cc:	df 92       	push	r13
    35ce:	ef 92       	push	r14
    35d0:	ff 92       	push	r15
    35d2:	0f 93       	push	r16
    35d4:	1f 93       	push	r17
    35d6:	cf 93       	push	r28
    35d8:	df 93       	push	r29
    35da:	7c 01       	movw	r14, r24
    35dc:	8b 01       	movw	r16, r22
  String temp = _buffer;
    35de:	c8 2e       	mov	r12, r24
    35e0:	e6 01       	movw	r28, r12
    35e2:	6e 01       	movw	r12, r28
    35e4:	df 2c       	mov	r13, r15
    35e6:	e6 01       	movw	r28, r12
    35e8:	fb 01       	movw	r30, r22
    35ea:	60 81       	ld	r22, Z
    35ec:	71 81       	ldd	r23, Z+1	; 0x01
    35ee:	c6 01       	movw	r24, r12
    35f0:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <_ZN6StringC1EPKc>

  for ( unsigned int i = 0; i < _length; i++ )
    35f4:	f8 01       	movw	r30, r16
    35f6:	84 81       	ldd	r24, Z+4	; 0x04
    35f8:	95 81       	ldd	r25, Z+5	; 0x05
    35fa:	00 97       	sbiw	r24, 0x00	; 0
    35fc:	b1 f0       	breq	.+44     	; 0x362a <_ZNK6String11toLowerCaseEv+0x64>
    35fe:	aa 24       	eor	r10, r10
    3600:	bb 24       	eor	r11, r11
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
    3602:	c8 80       	ld	r12, Y
    3604:	d9 80       	ldd	r13, Y+1	; 0x01
    3606:	ca 0c       	add	r12, r10
    3608:	db 1c       	adc	r13, r11
    360a:	f6 01       	movw	r30, r12
    360c:	80 81       	ld	r24, Z
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <tolower>
    3614:	f6 01       	movw	r30, r12
    3616:	80 83       	st	Z, r24

String String::toLowerCase() const
{
  String temp = _buffer;

  for ( unsigned int i = 0; i < _length; i++ )
    3618:	08 94       	sec
    361a:	a1 1c       	adc	r10, r1
    361c:	b1 1c       	adc	r11, r1
    361e:	f8 01       	movw	r30, r16
    3620:	84 81       	ldd	r24, Z+4	; 0x04
    3622:	95 81       	ldd	r25, Z+5	; 0x05
    3624:	a8 16       	cp	r10, r24
    3626:	b9 06       	cpc	r11, r25
    3628:	60 f3       	brcs	.-40     	; 0x3602 <_ZNK6String11toLowerCaseEv+0x3c>
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
  return temp;
}
    362a:	c7 01       	movw	r24, r14
    362c:	df 91       	pop	r29
    362e:	cf 91       	pop	r28
    3630:	1f 91       	pop	r17
    3632:	0f 91       	pop	r16
    3634:	ff 90       	pop	r15
    3636:	ef 90       	pop	r14
    3638:	df 90       	pop	r13
    363a:	cf 90       	pop	r12
    363c:	bf 90       	pop	r11
    363e:	af 90       	pop	r10
    3640:	08 95       	ret

00003642 <_ZNK6String16equalsIgnoreCaseERKS_>:
{
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
}

boolean String::equalsIgnoreCase( const String &s2 ) const
{
    3642:	ef 92       	push	r14
    3644:	ff 92       	push	r15
    3646:	0f 93       	push	r16
    3648:	1f 93       	push	r17
    364a:	df 93       	push	r29
    364c:	cf 93       	push	r28
    364e:	cd b7       	in	r28, 0x3d	; 61
    3650:	de b7       	in	r29, 0x3e	; 62
    3652:	2d 97       	sbiw	r28, 0x0d	; 13
    3654:	0f b6       	in	r0, 0x3f	; 63
    3656:	f8 94       	cli
    3658:	de bf       	out	0x3e, r29	; 62
    365a:	0f be       	out	0x3f, r0	; 63
    365c:	cd bf       	out	0x3d, r28	; 61
    365e:	fc 01       	movw	r30, r24
    3660:	8b 01       	movw	r16, r22
  if ( this == &s2 )
    3662:	86 17       	cp	r24, r22
    3664:	97 07       	cpc	r25, r23
    3666:	e9 f1       	breq	.+122    	; 0x36e2 <_ZNK6String16equalsIgnoreCaseERKS_+0xa0>
    return true; //1;
  else if ( _length != s2._length )
    3668:	24 81       	ldd	r18, Z+4	; 0x04
    366a:	35 81       	ldd	r19, Z+5	; 0x05
    366c:	db 01       	movw	r26, r22
    366e:	14 96       	adiw	r26, 0x04	; 4
    3670:	8d 91       	ld	r24, X+
    3672:	9c 91       	ld	r25, X
    3674:	15 97       	sbiw	r26, 0x05	; 5
    3676:	28 17       	cp	r18, r24
    3678:	39 07       	cpc	r19, r25
    367a:	79 f0       	breq	.+30     	; 0x369a <_ZNK6String16equalsIgnoreCaseERKS_+0x58>
    367c:	20 e0       	ldi	r18, 0x00	; 0
    return false; //0;

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}
    367e:	82 2f       	mov	r24, r18
    3680:	2d 96       	adiw	r28, 0x0d	; 13
    3682:	0f b6       	in	r0, 0x3f	; 63
    3684:	f8 94       	cli
    3686:	de bf       	out	0x3e, r29	; 62
    3688:	0f be       	out	0x3f, r0	; 63
    368a:	cd bf       	out	0x3d, r28	; 61
    368c:	cf 91       	pop	r28
    368e:	df 91       	pop	r29
    3690:	1f 91       	pop	r17
    3692:	0f 91       	pop	r16
    3694:	ff 90       	pop	r15
    3696:	ef 90       	pop	r14
    3698:	08 95       	ret
  if ( this == &s2 )
    return true; //1;
  else if ( _length != s2._length )
    return false; //0;

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
    369a:	ce 01       	movw	r24, r28
    369c:	01 96       	adiw	r24, 0x01	; 1
    369e:	bf 01       	movw	r22, r30
    36a0:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZNK6String11toLowerCaseEv>
    36a4:	e9 80       	ldd	r14, Y+1	; 0x01
    36a6:	fa 80       	ldd	r15, Y+2	; 0x02
    36a8:	ce 01       	movw	r24, r28
    36aa:	07 96       	adiw	r24, 0x07	; 7
    36ac:	b8 01       	movw	r22, r16
    36ae:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_ZNK6String11toLowerCaseEv>
    36b2:	0f 81       	ldd	r16, Y+7	; 0x07
    36b4:	18 85       	ldd	r17, Y+8	; 0x08
    36b6:	c7 01       	movw	r24, r14
    36b8:	b8 01       	movw	r22, r16
    36ba:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <strcmp>
    36be:	20 e0       	ldi	r18, 0x00	; 0
    36c0:	00 97       	sbiw	r24, 0x00	; 0
    36c2:	09 f4       	brne	.+2      	; 0x36c6 <_ZNK6String16equalsIgnoreCaseERKS_+0x84>
    36c4:	21 e0       	ldi	r18, 0x01	; 1
    String( const unsigned char );
    String( const int, const int base=10);
    String( const unsigned int, const int base=10 );
    String( const long, const int base=10 );
    String( const unsigned long, const int base=10 );
    ~String() { free(_buffer); _length = _capacity = 0;}     //added _length = _capacity = 0;
    36c6:	c8 01       	movw	r24, r16
    36c8:	2d 87       	std	Y+13, r18	; 0x0d
    36ca:	0e 94 39 2b 	call	0x5672	; 0x5672 <free>
    36ce:	1a 86       	std	Y+10, r1	; 0x0a
    36d0:	19 86       	std	Y+9, r1	; 0x09
    36d2:	1c 86       	std	Y+12, r1	; 0x0c
    36d4:	1b 86       	std	Y+11, r1	; 0x0b
    36d6:	89 81       	ldd	r24, Y+1	; 0x01
    36d8:	9a 81       	ldd	r25, Y+2	; 0x02
    36da:	0e 94 39 2b 	call	0x5672	; 0x5672 <free>
    36de:	2d 85       	ldd	r18, Y+13	; 0x0d
    36e0:	ce cf       	rjmp	.-100    	; 0x367e <_ZNK6String16equalsIgnoreCaseERKS_+0x3c>
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
}

boolean String::equalsIgnoreCase( const String &s2 ) const
{
  if ( this == &s2 )
    36e2:	21 e0       	ldi	r18, 0x01	; 1
    36e4:	cc cf       	rjmp	.-104    	; 0x367e <_ZNK6String16equalsIgnoreCaseERKS_+0x3c>

000036e6 <_ZNK6String9substringEjj>:
{
  return substring( left, _length );
}

String String::substring( unsigned int left, unsigned int right ) const
{
    36e6:	df 92       	push	r13
    36e8:	ef 92       	push	r14
    36ea:	ff 92       	push	r15
    36ec:	0f 93       	push	r16
    36ee:	1f 93       	push	r17
    36f0:	cf 93       	push	r28
    36f2:	df 93       	push	r29
    36f4:	8c 01       	movw	r16, r24
    36f6:	eb 01       	movw	r28, r22
    36f8:	79 01       	movw	r14, r18
  if ( left > right )
    36fa:	24 17       	cp	r18, r20
    36fc:	35 07       	cpc	r19, r21
    36fe:	30 f4       	brcc	.+12     	; 0x370c <_ZNK6String9substringEjj+0x26>
    3700:	34 2f       	mov	r19, r20
    3702:	25 2f       	mov	r18, r21
    3704:	a7 01       	movw	r20, r14
    3706:	c9 01       	movw	r24, r18
    3708:	e9 2e       	mov	r14, r25
    370a:	f8 2e       	mov	r15, r24
    370c:	8c 81       	ldd	r24, Y+4	; 0x04
    370e:	9d 81       	ldd	r25, Y+5	; 0x05
    3710:	8e 15       	cp	r24, r14
    3712:	9f 05       	cpc	r25, r15
    3714:	08 f4       	brcc	.+2      	; 0x3718 <_ZNK6String9substringEjj+0x32>
    3716:	7c 01       	movw	r14, r24
  if ( right > _length )
  {
    right = _length;
  } 

  char temp = _buffer[ right ];  // save the replaced character
    3718:	e8 81       	ld	r30, Y
    371a:	f9 81       	ldd	r31, Y+1	; 0x01
    371c:	ee 0d       	add	r30, r14
    371e:	ff 1d       	adc	r31, r15
    3720:	d0 80       	ld	r13, Z
  _buffer[ right ] = '\0';	
    3722:	10 82       	st	Z, r1
  String outPut = ( _buffer + left );  // pointer arithmetic
    3724:	68 81       	ld	r22, Y
    3726:	79 81       	ldd	r23, Y+1	; 0x01
    3728:	64 0f       	add	r22, r20
    372a:	75 1f       	adc	r23, r21
    372c:	c8 01       	movw	r24, r16
    372e:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <_ZN6StringC1EPKc>
  _buffer[ right ] = temp;  //restore character
    3732:	e8 81       	ld	r30, Y
    3734:	f9 81       	ldd	r31, Y+1	; 0x01
    3736:	ee 0d       	add	r30, r14
    3738:	ff 1d       	adc	r31, r15
    373a:	d0 82       	st	Z, r13
  return outPut;
}
    373c:	c8 01       	movw	r24, r16
    373e:	df 91       	pop	r29
    3740:	cf 91       	pop	r28
    3742:	1f 91       	pop	r17
    3744:	0f 91       	pop	r16
    3746:	ff 90       	pop	r15
    3748:	ef 90       	pop	r14
    374a:	df 90       	pop	r13
    374c:	08 95       	ret

0000374e <_ZNK6String9substringEj>:

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
}

String String::substring( unsigned int left ) const
{
    374e:	cf 93       	push	r28
    3750:	df 93       	push	r29
    3752:	ec 01       	movw	r28, r24
  return substring( left, _length );
    3754:	fb 01       	movw	r30, r22
    3756:	24 81       	ldd	r18, Z+4	; 0x04
    3758:	35 81       	ldd	r19, Z+5	; 0x05
    375a:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <_ZNK6String9substringEjj>
}
    375e:	ce 01       	movw	r24, r28
    3760:	df 91       	pop	r29
    3762:	cf 91       	pop	r28
    3764:	08 95       	ret

00003766 <_ZNK6String11lastIndexOfERKS_j>:
{
  return lastIndexOf( s2, _length - s2._length );
}

int String::lastIndexOf( const String &s2, unsigned int fromIndex ) const
{
    3766:	8f 92       	push	r8
    3768:	9f 92       	push	r9
    376a:	af 92       	push	r10
    376c:	bf 92       	push	r11
    376e:	cf 92       	push	r12
    3770:	df 92       	push	r13
    3772:	ef 92       	push	r14
    3774:	ff 92       	push	r15
    3776:	0f 93       	push	r16
    3778:	1f 93       	push	r17
    377a:	df 93       	push	r29
    377c:	cf 93       	push	r28
    377e:	00 d0       	rcall	.+0      	; 0x3780 <_ZNK6String11lastIndexOfERKS_j+0x1a>
    3780:	00 d0       	rcall	.+0      	; 0x3782 <_ZNK6String11lastIndexOfERKS_j+0x1c>
    3782:	00 d0       	rcall	.+0      	; 0x3784 <_ZNK6String11lastIndexOfERKS_j+0x1e>
    3784:	cd b7       	in	r28, 0x3d	; 61
    3786:	de b7       	in	r29, 0x3e	; 62
    3788:	6c 01       	movw	r12, r24
    378a:	7b 01       	movw	r14, r22
  // check for empty strings
  if ( s2._length == 0 || s2._length - 1 > fromIndex || fromIndex >= _length )
    378c:	db 01       	movw	r26, r22
    378e:	14 96       	adiw	r26, 0x04	; 4
    3790:	8d 91       	ld	r24, X+
    3792:	9c 91       	ld	r25, X
    3794:	15 97       	sbiw	r26, 0x05	; 5
    3796:	00 97       	sbiw	r24, 0x00	; 0
    3798:	b1 f4       	brne	.+44     	; 0x37c6 <_ZNK6String11lastIndexOfERKS_j+0x60>
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    379a:	0f ef       	ldi	r16, 0xFF	; 255
    379c:	1f ef       	ldi	r17, 0xFF	; 255
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    return i;
  }
  return -1;
}
    379e:	c8 01       	movw	r24, r16
    37a0:	26 96       	adiw	r28, 0x06	; 6
    37a2:	0f b6       	in	r0, 0x3f	; 63
    37a4:	f8 94       	cli
    37a6:	de bf       	out	0x3e, r29	; 62
    37a8:	0f be       	out	0x3f, r0	; 63
    37aa:	cd bf       	out	0x3d, r28	; 61
    37ac:	cf 91       	pop	r28
    37ae:	df 91       	pop	r29
    37b0:	1f 91       	pop	r17
    37b2:	0f 91       	pop	r16
    37b4:	ff 90       	pop	r15
    37b6:	ef 90       	pop	r14
    37b8:	df 90       	pop	r13
    37ba:	cf 90       	pop	r12
    37bc:	bf 90       	pop	r11
    37be:	af 90       	pop	r10
    37c0:	9f 90       	pop	r9
    37c2:	8f 90       	pop	r8
    37c4:	08 95       	ret
}

int String::lastIndexOf( const String &s2, unsigned int fromIndex ) const
{
  // check for empty strings
  if ( s2._length == 0 || s2._length - 1 > fromIndex || fromIndex >= _length )
    37c6:	01 97       	sbiw	r24, 0x01	; 1
    37c8:	48 17       	cp	r20, r24
    37ca:	59 07       	cpc	r21, r25
    37cc:	30 f3       	brcs	.-52     	; 0x379a <_ZNK6String11lastIndexOfERKS_j+0x34>
    37ce:	f6 01       	movw	r30, r12
    37d0:	84 81       	ldd	r24, Z+4	; 0x04
    37d2:	95 81       	ldd	r25, Z+5	; 0x05
    37d4:	48 17       	cp	r20, r24
    37d6:	59 07       	cpc	r21, r25
    37d8:	00 f7       	brcc	.-64     	; 0x379a <_ZNK6String11lastIndexOfERKS_j+0x34>
}

char String::operator[]( unsigned int index ) const
{
  // need to check for valid index, to do later
  return _buffer[ index ];
    37da:	ed 91       	ld	r30, X+
    37dc:	fc 91       	ld	r31, X
    37de:	11 97       	sbiw	r26, 0x01	; 1
    37e0:	90 80       	ld	r9, Z
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    37e2:	8a 01       	movw	r16, r20
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    37e4:	5e 01       	movw	r10, r28
    37e6:	08 94       	sec
    37e8:	a1 1c       	adc	r10, r1
    37ea:	b1 1c       	adc	r11, r1
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    37ec:	02 c0       	rjmp	.+4      	; 0x37f2 <_ZNK6String11lastIndexOfERKS_j+0x8c>
    37ee:	01 50       	subi	r16, 0x01	; 1
    37f0:	10 40       	sbci	r17, 0x00	; 0
    37f2:	17 fd       	sbrc	r17, 7
    37f4:	d2 cf       	rjmp	.-92     	; 0x379a <_ZNK6String11lastIndexOfERKS_j+0x34>
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    37f6:	d6 01       	movw	r26, r12
    37f8:	ed 91       	ld	r30, X+
    37fa:	fc 91       	ld	r31, X
    37fc:	11 97       	sbiw	r26, 0x01	; 1
    37fe:	e0 0f       	add	r30, r16
    3800:	f1 1f       	adc	r31, r17
    3802:	80 81       	ld	r24, Z
    3804:	89 15       	cp	r24, r9
    3806:	99 f7       	brne	.-26     	; 0x37ee <_ZNK6String11lastIndexOfERKS_j+0x88>
    3808:	f7 01       	movw	r30, r14
    380a:	24 81       	ldd	r18, Z+4	; 0x04
    380c:	35 81       	ldd	r19, Z+5	; 0x05
    380e:	20 0f       	add	r18, r16
    3810:	31 1f       	adc	r19, r17
    3812:	c5 01       	movw	r24, r10
    3814:	b6 01       	movw	r22, r12
    3816:	a8 01       	movw	r20, r16
    3818:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <_ZNK6String9substringEjj>
    381c:	c5 01       	movw	r24, r10
    381e:	b7 01       	movw	r22, r14
    3820:	0e 94 e7 16 	call	0x2dce	; 0x2dce <_ZNK6String6equalsERKS_>
    3824:	88 2e       	mov	r8, r24
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	9a 81       	ldd	r25, Y+2	; 0x02
    382a:	0e 94 39 2b 	call	0x5672	; 0x5672 <free>
    382e:	88 20       	and	r8, r8
    3830:	09 f0       	breq	.+2      	; 0x3834 <_ZNK6String11lastIndexOfERKS_j+0xce>
    3832:	b5 cf       	rjmp	.-150    	; 0x379e <_ZNK6String11lastIndexOfERKS_j+0x38>
    3834:	1c 82       	std	Y+4, r1	; 0x04
    3836:	1b 82       	std	Y+3, r1	; 0x03
    3838:	1e 82       	std	Y+6, r1	; 0x06
    383a:	1d 82       	std	Y+5, r1	; 0x05
    383c:	d8 cf       	rjmp	.-80     	; 0x37ee <_ZNK6String11lastIndexOfERKS_j+0x88>

0000383e <_ZNK6String11lastIndexOfERKS_>:
  return temp - _buffer;
}

int String::lastIndexOf( const String &s2 ) const
{
  return lastIndexOf( s2, _length - s2._length );
    383e:	fc 01       	movw	r30, r24
    3840:	44 81       	ldd	r20, Z+4	; 0x04
    3842:	55 81       	ldd	r21, Z+5	; 0x05
    3844:	fb 01       	movw	r30, r22
    3846:	24 81       	ldd	r18, Z+4	; 0x04
    3848:	35 81       	ldd	r19, Z+5	; 0x05
    384a:	42 1b       	sub	r20, r18
    384c:	53 0b       	sbc	r21, r19
    384e:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_ZNK6String11lastIndexOfERKS_j>
}
    3852:	08 95       	ret

00003854 <_ZNK6String4trimEv>:
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
  return temp;
}

String String::trim() const
{
    3854:	6f 92       	push	r6
    3856:	7f 92       	push	r7
    3858:	8f 92       	push	r8
    385a:	9f 92       	push	r9
    385c:	af 92       	push	r10
    385e:	bf 92       	push	r11
    3860:	cf 92       	push	r12
    3862:	df 92       	push	r13
    3864:	ef 92       	push	r14
    3866:	ff 92       	push	r15
    3868:	0f 93       	push	r16
    386a:	1f 93       	push	r17
    386c:	df 93       	push	r29
    386e:	cf 93       	push	r28
    3870:	00 d0       	rcall	.+0      	; 0x3872 <_ZNK6String4trimEv+0x1e>
    3872:	00 d0       	rcall	.+0      	; 0x3874 <_ZNK6String4trimEv+0x20>
    3874:	00 d0       	rcall	.+0      	; 0x3876 <_ZNK6String4trimEv+0x22>
    3876:	cd b7       	in	r28, 0x3d	; 61
    3878:	de b7       	in	r29, 0x3e	; 62
    387a:	8c 01       	movw	r16, r24
    387c:	6b 01       	movw	r12, r22
  if ( _buffer == NULL ) return *this;
    387e:	fb 01       	movw	r30, r22
    3880:	60 81       	ld	r22, Z
    3882:	71 81       	ldd	r23, Z+1	; 0x01
    3884:	61 15       	cp	r22, r1
    3886:	71 05       	cpc	r23, r1
    3888:	09 f4       	brne	.+2      	; 0x388c <_ZNK6String4trimEv+0x38>
    388a:	63 c0       	rjmp	.+198    	; 0x3952 <_ZNK6String4trimEv+0xfe>
  String temp = _buffer;
    388c:	5e 01       	movw	r10, r28
    388e:	08 94       	sec
    3890:	a1 1c       	adc	r10, r1
    3892:	b1 1c       	adc	r11, r1
    3894:	c5 01       	movw	r24, r10
    3896:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <_ZN6StringC1EPKc>
  unsigned int i,j;

  for ( i = 0; i < _length; i++ )
    389a:	f6 01       	movw	r30, r12
    389c:	84 80       	ldd	r8, Z+4	; 0x04
    389e:	95 80       	ldd	r9, Z+5	; 0x05
    38a0:	81 14       	cp	r8, r1
    38a2:	91 04       	cpc	r9, r1
    38a4:	09 f4       	brne	.+2      	; 0x38a8 <_ZNK6String4trimEv+0x54>
    38a6:	59 c0       	rjmp	.+178    	; 0x395a <_ZNK6String4trimEv+0x106>
    38a8:	f6 01       	movw	r30, r12
    38aa:	60 80       	ld	r6, Z
    38ac:	71 80       	ldd	r7, Z+1	; 0x01
    38ae:	ee 24       	eor	r14, r14
    38b0:	ff 24       	eor	r15, r15
    38b2:	06 c0       	rjmp	.+12     	; 0x38c0 <_ZNK6String4trimEv+0x6c>
    38b4:	08 94       	sec
    38b6:	e1 1c       	adc	r14, r1
    38b8:	f1 1c       	adc	r15, r1
    38ba:	e8 14       	cp	r14, r8
    38bc:	f9 04       	cpc	r15, r9
    38be:	48 f4       	brcc	.+18     	; 0x38d2 <_ZNK6String4trimEv+0x7e>
  {
    if ( !isspace(_buffer[i]) )
    38c0:	f3 01       	movw	r30, r6
    38c2:	ee 0d       	add	r30, r14
    38c4:	ff 1d       	adc	r31, r15
    38c6:	80 81       	ld	r24, Z
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	0e 94 c8 2c 	call	0x5990	; 0x5990 <isspace>
    38ce:	00 97       	sbiw	r24, 0x00	; 0
    38d0:	89 f7       	brne	.-30     	; 0x38b4 <_ZNK6String4trimEv+0x60>
      break;
  }

  for ( j = temp._length - 1; j > i; j-- )
    38d2:	8d 80       	ldd	r8, Y+5	; 0x05
    38d4:	9e 80       	ldd	r9, Y+6	; 0x06
    38d6:	08 94       	sec
    38d8:	81 08       	sbc	r8, r1
    38da:	91 08       	sbc	r9, r1
    38dc:	e8 14       	cp	r14, r8
    38de:	f9 04       	cpc	r15, r9
    38e0:	b0 f4       	brcc	.+44     	; 0x390e <_ZNK6String4trimEv+0xba>
    38e2:	f6 01       	movw	r30, r12
    38e4:	c0 80       	ld	r12, Z
    38e6:	d1 80       	ldd	r13, Z+1	; 0x01
    38e8:	c8 0c       	add	r12, r8
    38ea:	d9 1c       	adc	r13, r9
    38ec:	09 c0       	rjmp	.+18     	; 0x3900 <_ZNK6String4trimEv+0xac>
    38ee:	08 94       	sec
    38f0:	81 08       	sbc	r8, r1
    38f2:	91 08       	sbc	r9, r1
    38f4:	08 94       	sec
    38f6:	c1 08       	sbc	r12, r1
    38f8:	d1 08       	sbc	r13, r1
    38fa:	e8 14       	cp	r14, r8
    38fc:	f9 04       	cpc	r15, r9
    38fe:	38 f4       	brcc	.+14     	; 0x390e <_ZNK6String4trimEv+0xba>
  {
    if ( !isspace(_buffer[j]) )
    3900:	f6 01       	movw	r30, r12
    3902:	80 81       	ld	r24, Z
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	0e 94 c8 2c 	call	0x5990	; 0x5990 <isspace>
    390a:	00 97       	sbiw	r24, 0x00	; 0
    390c:	81 f7       	brne	.-32     	; 0x38ee <_ZNK6String4trimEv+0x9a>
      break;
  }

  return temp.substring( i, j + 1);
    390e:	94 01       	movw	r18, r8
    3910:	2f 5f       	subi	r18, 0xFF	; 255
    3912:	3f 4f       	sbci	r19, 0xFF	; 255
    3914:	c8 01       	movw	r24, r16
    3916:	b5 01       	movw	r22, r10
    3918:	a7 01       	movw	r20, r14
    391a:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <_ZNK6String9substringEjj>
    391e:	89 81       	ldd	r24, Y+1	; 0x01
    3920:	9a 81       	ldd	r25, Y+2	; 0x02
    3922:	0e 94 39 2b 	call	0x5672	; 0x5672 <free>
}
    3926:	c8 01       	movw	r24, r16
    3928:	26 96       	adiw	r28, 0x06	; 6
    392a:	0f b6       	in	r0, 0x3f	; 63
    392c:	f8 94       	cli
    392e:	de bf       	out	0x3e, r29	; 62
    3930:	0f be       	out	0x3f, r0	; 63
    3932:	cd bf       	out	0x3d, r28	; 61
    3934:	cf 91       	pop	r28
    3936:	df 91       	pop	r29
    3938:	1f 91       	pop	r17
    393a:	0f 91       	pop	r16
    393c:	ff 90       	pop	r15
    393e:	ef 90       	pop	r14
    3940:	df 90       	pop	r13
    3942:	cf 90       	pop	r12
    3944:	bf 90       	pop	r11
    3946:	af 90       	pop	r10
    3948:	9f 90       	pop	r9
    394a:	8f 90       	pop	r8
    394c:	7f 90       	pop	r7
    394e:	6f 90       	pop	r6
    3950:	08 95       	ret
  return temp;
}

String String::trim() const
{
  if ( _buffer == NULL ) return *this;
    3952:	b6 01       	movw	r22, r12
    3954:	0e 94 19 19 	call	0x3232	; 0x3232 <_ZN6StringC1ERKS_>
    3958:	e6 cf       	rjmp	.-52     	; 0x3926 <_ZNK6String4trimEv+0xd2>
  String temp = _buffer;
  unsigned int i,j;

  for ( i = 0; i < _length; i++ )
    395a:	ee 24       	eor	r14, r14
    395c:	ff 24       	eor	r15, r15
    395e:	b9 cf       	rjmp	.-142    	; 0x38d2 <_ZNK6String4trimEv+0x7e>

00003960 <_ZN6String7replaceERKS_S1_>:

  return theReturn;
}

String String::replace( const String& match, const String& replace )
{
    3960:	2f 92       	push	r2
    3962:	3f 92       	push	r3
    3964:	4f 92       	push	r4
    3966:	5f 92       	push	r5
    3968:	6f 92       	push	r6
    396a:	7f 92       	push	r7
    396c:	8f 92       	push	r8
    396e:	9f 92       	push	r9
    3970:	af 92       	push	r10
    3972:	bf 92       	push	r11
    3974:	cf 92       	push	r12
    3976:	df 92       	push	r13
    3978:	ef 92       	push	r14
    397a:	ff 92       	push	r15
    397c:	0f 93       	push	r16
    397e:	1f 93       	push	r17
    3980:	df 93       	push	r29
    3982:	cf 93       	push	r28
    3984:	cd b7       	in	r28, 0x3d	; 61
    3986:	de b7       	in	r29, 0x3e	; 62
    3988:	68 97       	sbiw	r28, 0x18	; 24
    398a:	0f b6       	in	r0, 0x3f	; 63
    398c:	f8 94       	cli
    398e:	de bf       	out	0x3e, r29	; 62
    3990:	0f be       	out	0x3f, r0	; 63
    3992:	cd bf       	out	0x3d, r28	; 61
    3994:	1c 01       	movw	r2, r24
    3996:	fb 01       	movw	r30, r22
    3998:	5a 01       	movw	r10, r20
    399a:	29 01       	movw	r4, r18
  if ( _buffer == NULL ) return *this;
    399c:	60 81       	ld	r22, Z
    399e:	71 81       	ldd	r23, Z+1	; 0x01
    39a0:	61 15       	cp	r22, r1
    39a2:	71 05       	cpc	r23, r1
    39a4:	09 f4       	brne	.+2      	; 0x39a8 <_ZN6String7replaceERKS_S1_+0x48>
    39a6:	7e c0       	rjmp	.+252    	; 0x3aa4 <_ZN6String7replaceERKS_S1_+0x144>
  String temp = _buffer, newString;
    39a8:	8e 01       	movw	r16, r28
    39aa:	0f 5f       	subi	r16, 0xFF	; 255
    39ac:	1f 4f       	sbci	r17, 0xFF	; 255
    39ae:	c8 01       	movw	r24, r16
    39b0:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <_ZN6StringC1EPKc>
    39b4:	47 e0       	ldi	r20, 0x07	; 7
    39b6:	c4 2e       	mov	r12, r20
    39b8:	d1 2c       	mov	r13, r1
    39ba:	cc 0e       	add	r12, r28
    39bc:	dd 1e       	adc	r13, r29
    39be:	c6 01       	movw	r24, r12
    39c0:	6a ec       	ldi	r22, 0xCA	; 202
    39c2:	71 e0       	ldi	r23, 0x01	; 1
    39c4:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <_ZN6StringC1EPKc>

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
  {
    newString += temp.substring( 0, loc );
    39c8:	3d e0       	ldi	r19, 0x0D	; 13
    39ca:	83 2e       	mov	r8, r19
    39cc:	91 2c       	mov	r9, r1
    39ce:	8c 0e       	add	r8, r28
    39d0:	9d 1e       	adc	r9, r29
    newString += replace;
    temp = temp.substring( loc + match._length );
    39d2:	23 e1       	ldi	r18, 0x13	; 19
    39d4:	62 2e       	mov	r6, r18
    39d6:	71 2c       	mov	r7, r1
    39d8:	6c 0e       	add	r6, r28
    39da:	7d 1e       	adc	r7, r29
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer, newString;

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
    39dc:	2c c0       	rjmp	.+88     	; 0x3a36 <_ZN6String7replaceERKS_S1_+0xd6>
  {
    newString += temp.substring( 0, loc );
    39de:	c4 01       	movw	r24, r8
    39e0:	b8 01       	movw	r22, r16
    39e2:	40 e0       	ldi	r20, 0x00	; 0
    39e4:	50 e0       	ldi	r21, 0x00	; 0
    39e6:	97 01       	movw	r18, r14
    39e8:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <_ZNK6String9substringEjj>
    39ec:	c6 01       	movw	r24, r12
    39ee:	b4 01       	movw	r22, r8
    39f0:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <_ZN6StringpLERKS_>
    39f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    39f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    39f8:	0e 94 39 2b 	call	0x5672	; 0x5672 <free>
    39fc:	18 8a       	std	Y+16, r1	; 0x10
    39fe:	1f 86       	std	Y+15, r1	; 0x0f
    3a00:	1a 8a       	std	Y+18, r1	; 0x12
    3a02:	19 8a       	std	Y+17, r1	; 0x11
    newString += replace;
    3a04:	c6 01       	movw	r24, r12
    3a06:	b2 01       	movw	r22, r4
    3a08:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <_ZN6StringpLERKS_>
    temp = temp.substring( loc + match._length );
    3a0c:	f5 01       	movw	r30, r10
    3a0e:	44 81       	ldd	r20, Z+4	; 0x04
    3a10:	55 81       	ldd	r21, Z+5	; 0x05
    3a12:	4e 0d       	add	r20, r14
    3a14:	5f 1d       	adc	r21, r15
    3a16:	c3 01       	movw	r24, r6
    3a18:	b8 01       	movw	r22, r16
    3a1a:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZNK6String9substringEj>
    3a1e:	c8 01       	movw	r24, r16
    3a20:	b3 01       	movw	r22, r6
    3a22:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <_ZN6StringaSERKS_>
    3a26:	8b 89       	ldd	r24, Y+19	; 0x13
    3a28:	9c 89       	ldd	r25, Y+20	; 0x14
    3a2a:	0e 94 39 2b 	call	0x5672	; 0x5672 <free>
    3a2e:	1e 8a       	std	Y+22, r1	; 0x16
    3a30:	1d 8a       	std	Y+21, r1	; 0x15
    3a32:	18 8e       	std	Y+24, r1	; 0x18
    3a34:	1f 8a       	std	Y+23, r1	; 0x17
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer, newString;

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
    3a36:	c8 01       	movw	r24, r16
    3a38:	b5 01       	movw	r22, r10
    3a3a:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <_ZNK6String7indexOfERKS_>
    3a3e:	7c 01       	movw	r14, r24
    3a40:	ff ef       	ldi	r31, 0xFF	; 255
    3a42:	8f 3f       	cpi	r24, 0xFF	; 255
    3a44:	9f 07       	cpc	r25, r31
    3a46:	59 f6       	brne	.-106    	; 0x39de <_ZN6String7replaceERKS_S1_+0x7e>
  {
    newString += temp.substring( 0, loc );
    newString += replace;
    temp = temp.substring( loc + match._length );
  }
  newString += temp;  
    3a48:	c6 01       	movw	r24, r12
    3a4a:	b8 01       	movw	r22, r16
    3a4c:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <_ZN6StringpLERKS_>
  return newString;
    3a50:	c1 01       	movw	r24, r2
    3a52:	b6 01       	movw	r22, r12
    3a54:	0e 94 19 19 	call	0x3232	; 0x3232 <_ZN6StringC1ERKS_>
    3a58:	8f 81       	ldd	r24, Y+7	; 0x07
    3a5a:	98 85       	ldd	r25, Y+8	; 0x08
    3a5c:	0e 94 39 2b 	call	0x5672	; 0x5672 <free>
    3a60:	1a 86       	std	Y+10, r1	; 0x0a
    3a62:	19 86       	std	Y+9, r1	; 0x09
    3a64:	1c 86       	std	Y+12, r1	; 0x0c
    3a66:	1b 86       	std	Y+11, r1	; 0x0b
    3a68:	89 81       	ldd	r24, Y+1	; 0x01
    3a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a6c:	0e 94 39 2b 	call	0x5672	; 0x5672 <free>
}
    3a70:	c1 01       	movw	r24, r2
    3a72:	68 96       	adiw	r28, 0x18	; 24
    3a74:	0f b6       	in	r0, 0x3f	; 63
    3a76:	f8 94       	cli
    3a78:	de bf       	out	0x3e, r29	; 62
    3a7a:	0f be       	out	0x3f, r0	; 63
    3a7c:	cd bf       	out	0x3d, r28	; 61
    3a7e:	cf 91       	pop	r28
    3a80:	df 91       	pop	r29
    3a82:	1f 91       	pop	r17
    3a84:	0f 91       	pop	r16
    3a86:	ff 90       	pop	r15
    3a88:	ef 90       	pop	r14
    3a8a:	df 90       	pop	r13
    3a8c:	cf 90       	pop	r12
    3a8e:	bf 90       	pop	r11
    3a90:	af 90       	pop	r10
    3a92:	9f 90       	pop	r9
    3a94:	8f 90       	pop	r8
    3a96:	7f 90       	pop	r7
    3a98:	6f 90       	pop	r6
    3a9a:	5f 90       	pop	r5
    3a9c:	4f 90       	pop	r4
    3a9e:	3f 90       	pop	r3
    3aa0:	2f 90       	pop	r2
    3aa2:	08 95       	ret
  return theReturn;
}

String String::replace( const String& match, const String& replace )
{
  if ( _buffer == NULL ) return *this;
    3aa4:	bf 01       	movw	r22, r30
    3aa6:	0e 94 19 19 	call	0x3232	; 0x3232 <_ZN6StringC1ERKS_>
    3aaa:	e2 cf       	rjmp	.-60     	; 0x3a70 <_ZN6String7replaceERKS_S1_+0x110>

00003aac <_ZN6String7replaceEcc>:

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}

String String::replace( char findChar, char replaceChar )
{
    3aac:	cf 92       	push	r12
    3aae:	df 92       	push	r13
    3ab0:	ef 92       	push	r14
    3ab2:	ff 92       	push	r15
    3ab4:	0f 93       	push	r16
    3ab6:	1f 93       	push	r17
    3ab8:	df 93       	push	r29
    3aba:	cf 93       	push	r28
    3abc:	00 d0       	rcall	.+0      	; 0x3abe <_ZN6String7replaceEcc+0x12>
    3abe:	00 d0       	rcall	.+0      	; 0x3ac0 <_ZN6String7replaceEcc+0x14>
    3ac0:	00 d0       	rcall	.+0      	; 0x3ac2 <_ZN6String7replaceEcc+0x16>
    3ac2:	cd b7       	in	r28, 0x3d	; 61
    3ac4:	de b7       	in	r29, 0x3e	; 62
    3ac6:	8c 01       	movw	r16, r24
    3ac8:	fb 01       	movw	r30, r22
    3aca:	f4 2e       	mov	r15, r20
    3acc:	e2 2e       	mov	r14, r18
  if ( _buffer == NULL ) return *this;
    3ace:	60 81       	ld	r22, Z
    3ad0:	71 81       	ldd	r23, Z+1	; 0x01
    3ad2:	61 15       	cp	r22, r1
    3ad4:	71 05       	cpc	r23, r1
    3ad6:	51 f1       	breq	.+84     	; 0x3b2c <_ZN6String7replaceEcc+0x80>
  String theReturn = _buffer;
    3ad8:	6e 01       	movw	r12, r28
    3ada:	08 94       	sec
    3adc:	c1 1c       	adc	r12, r1
    3ade:	d1 1c       	adc	r13, r1
    3ae0:	c6 01       	movw	r24, r12
    3ae2:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <_ZN6StringC1EPKc>
  char* temp = theReturn._buffer;
    3ae6:	89 81       	ldd	r24, Y+1	; 0x01
    3ae8:	9a 81       	ldd	r25, Y+2	; 0x02
  while( (temp = strchr( temp, findChar )) != 0 )
    3aea:	01 c0       	rjmp	.+2      	; 0x3aee <_ZN6String7replaceEcc+0x42>
    *temp = replaceChar;
    3aec:	e0 82       	st	Z, r14
String String::replace( char findChar, char replaceChar )
{
  if ( _buffer == NULL ) return *this;
  String theReturn = _buffer;
  char* temp = theReturn._buffer;
  while( (temp = strchr( temp, findChar )) != 0 )
    3aee:	6f 2d       	mov	r22, r15
    3af0:	70 e0       	ldi	r23, 0x00	; 0
    3af2:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <strchr>
    3af6:	fc 01       	movw	r30, r24
    3af8:	00 97       	sbiw	r24, 0x00	; 0
    3afa:	c1 f7       	brne	.-16     	; 0x3aec <_ZN6String7replaceEcc+0x40>
    *temp = replaceChar;

  return theReturn;
    3afc:	c8 01       	movw	r24, r16
    3afe:	b6 01       	movw	r22, r12
    3b00:	0e 94 19 19 	call	0x3232	; 0x3232 <_ZN6StringC1ERKS_>
    3b04:	89 81       	ldd	r24, Y+1	; 0x01
    3b06:	9a 81       	ldd	r25, Y+2	; 0x02
    3b08:	0e 94 39 2b 	call	0x5672	; 0x5672 <free>
}
    3b0c:	c8 01       	movw	r24, r16
    3b0e:	26 96       	adiw	r28, 0x06	; 6
    3b10:	0f b6       	in	r0, 0x3f	; 63
    3b12:	f8 94       	cli
    3b14:	de bf       	out	0x3e, r29	; 62
    3b16:	0f be       	out	0x3f, r0	; 63
    3b18:	cd bf       	out	0x3d, r28	; 61
    3b1a:	cf 91       	pop	r28
    3b1c:	df 91       	pop	r29
    3b1e:	1f 91       	pop	r17
    3b20:	0f 91       	pop	r16
    3b22:	ff 90       	pop	r15
    3b24:	ef 90       	pop	r14
    3b26:	df 90       	pop	r13
    3b28:	cf 90       	pop	r12
    3b2a:	08 95       	ret
  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}

String String::replace( char findChar, char replaceChar )
{
  if ( _buffer == NULL ) return *this;
    3b2c:	bf 01       	movw	r22, r30
    3b2e:	0e 94 19 19 	call	0x3232	; 0x3232 <_ZN6StringC1ERKS_>
    3b32:	ec cf       	rjmp	.-40     	; 0x3b0c <_ZN6String7replaceEcc+0x60>

00003b34 <_ZN6StringC2EPKc>:
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    3b34:	0f 93       	push	r16
    3b36:	1f 93       	push	r17
    3b38:	cf 93       	push	r28
    3b3a:	df 93       	push	r29
    3b3c:	ec 01       	movw	r28, r24
    3b3e:	8b 01       	movw	r16, r22
{
  if ( value == NULL )
    3b40:	61 15       	cp	r22, r1
    3b42:	71 05       	cpc	r23, r1
    3b44:	21 f1       	breq	.+72     	; 0x3b8e <_ZN6StringC2EPKc+0x5a>
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    3b46:	fb 01       	movw	r30, r22
    3b48:	01 90       	ld	r0, Z+
    3b4a:	00 20       	and	r0, r0
    3b4c:	e9 f7       	brne	.-6      	; 0x3b48 <_ZN6StringC2EPKc+0x14>
    3b4e:	31 97       	sbiw	r30, 0x01	; 1
    3b50:	e6 1b       	sub	r30, r22
    3b52:	f7 0b       	sbc	r31, r23
    3b54:	cf 01       	movw	r24, r30
    3b56:	01 96       	adiw	r24, 0x01	; 1
{
  if ( value == NULL )
    value = "";
  getBuffer( _length = strlen( value ) );
    3b58:	fd 83       	std	Y+5, r31	; 0x05
    3b5a:	ec 83       	std	Y+4, r30	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3b5c:	fb 83       	std	Y+3, r31	; 0x03
    3b5e:	ea 83       	std	Y+2, r30	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3b60:	0e 94 97 2a 	call	0x552e	; 0x552e <malloc>
    3b64:	99 83       	std	Y+1, r25	; 0x01
    3b66:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3b68:	00 97       	sbiw	r24, 0x00	; 0
    3b6a:	41 f0       	breq	.+16     	; 0x3b7c <_ZN6StringC2EPKc+0x48>
  if ( _buffer != NULL )
    strcpy( _buffer, value );
    3b6c:	b8 01       	movw	r22, r16
    3b6e:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <strcpy>
}
    3b72:	df 91       	pop	r29
    3b74:	cf 91       	pop	r28
    3b76:	1f 91       	pop	r17
    3b78:	0f 91       	pop	r16
    3b7a:	08 95       	ret
    3b7c:	1b 82       	std	Y+3, r1	; 0x03
    3b7e:	1a 82       	std	Y+2, r1	; 0x02
    3b80:	1d 82       	std	Y+5, r1	; 0x05
    3b82:	1c 82       	std	Y+4, r1	; 0x04
    3b84:	df 91       	pop	r29
    3b86:	cf 91       	pop	r28
    3b88:	1f 91       	pop	r17
    3b8a:	0f 91       	pop	r16
    3b8c:	08 95       	ret
#include "WString.h"


String::String( const char *value )
{
  if ( value == NULL )
    3b8e:	81 e0       	ldi	r24, 0x01	; 1
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	e0 e0       	ldi	r30, 0x00	; 0
    3b94:	f0 e0       	ldi	r31, 0x00	; 0
    3b96:	0a ec       	ldi	r16, 0xCA	; 202
    3b98:	11 e0       	ldi	r17, 0x01	; 1
    3b9a:	de cf       	rjmp	.-68     	; 0x3b58 <_ZN6StringC2EPKc+0x24>

00003b9c <_ZN6StringC1Eli>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const long value, const int base )
    3b9c:	ef 92       	push	r14
    3b9e:	ff 92       	push	r15
    3ba0:	0f 93       	push	r16
    3ba2:	1f 93       	push	r17
    3ba4:	df 93       	push	r29
    3ba6:	cf 93       	push	r28
    3ba8:	cd b7       	in	r28, 0x3d	; 61
    3baa:	de b7       	in	r29, 0x3e	; 62
    3bac:	a1 97       	sbiw	r28, 0x21	; 33
    3bae:	0f b6       	in	r0, 0x3f	; 63
    3bb0:	f8 94       	cli
    3bb2:	de bf       	out	0x3e, r29	; 62
    3bb4:	0f be       	out	0x3f, r0	; 63
    3bb6:	cd bf       	out	0x3d, r28	; 61
    3bb8:	7c 01       	movw	r14, r24
    3bba:	cb 01       	movw	r24, r22
    3bbc:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ltoa(value, buf, base);
    3bbe:	8e 01       	movw	r16, r28
    3bc0:	0f 5f       	subi	r16, 0xFF	; 255
    3bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc4:	a8 01       	movw	r20, r16
    3bc6:	0e 94 79 2d 	call	0x5af2	; 0x5af2 <ltoa>
  getBuffer( _length = strlen(buf) );
    3bca:	f8 01       	movw	r30, r16
    3bcc:	01 90       	ld	r0, Z+
    3bce:	00 20       	and	r0, r0
    3bd0:	e9 f7       	brne	.-6      	; 0x3bcc <_ZN6StringC1Eli+0x30>
    3bd2:	cf 01       	movw	r24, r30
    3bd4:	01 97       	sbiw	r24, 0x01	; 1
    3bd6:	80 1b       	sub	r24, r16
    3bd8:	91 0b       	sbc	r25, r17
    3bda:	f7 01       	movw	r30, r14
    3bdc:	95 83       	std	Z+5, r25	; 0x05
    3bde:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3be0:	93 83       	std	Z+3, r25	; 0x03
    3be2:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3be4:	01 96       	adiw	r24, 0x01	; 1
    3be6:	0e 94 97 2a 	call	0x552e	; 0x552e <malloc>
    3bea:	f7 01       	movw	r30, r14
    3bec:	91 83       	std	Z+1, r25	; 0x01
    3bee:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3bf0:	00 97       	sbiw	r24, 0x00	; 0
    3bf2:	81 f0       	breq	.+32     	; 0x3c14 <_ZN6StringC1Eli+0x78>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    3bf4:	b8 01       	movw	r22, r16
    3bf6:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <strcpy>
}
    3bfa:	a1 96       	adiw	r28, 0x21	; 33
    3bfc:	0f b6       	in	r0, 0x3f	; 63
    3bfe:	f8 94       	cli
    3c00:	de bf       	out	0x3e, r29	; 62
    3c02:	0f be       	out	0x3f, r0	; 63
    3c04:	cd bf       	out	0x3d, r28	; 61
    3c06:	cf 91       	pop	r28
    3c08:	df 91       	pop	r29
    3c0a:	1f 91       	pop	r17
    3c0c:	0f 91       	pop	r16
    3c0e:	ff 90       	pop	r15
    3c10:	ef 90       	pop	r14
    3c12:	08 95       	ret
    3c14:	13 82       	std	Z+3, r1	; 0x03
    3c16:	12 82       	std	Z+2, r1	; 0x02
    3c18:	15 82       	std	Z+5, r1	; 0x05
    3c1a:	14 82       	std	Z+4, r1	; 0x04
    3c1c:	ee cf       	rjmp	.-36     	; 0x3bfa <_ZN6StringC1Eli+0x5e>

00003c1e <_ZN6StringC2Eli>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const long value, const int base )
    3c1e:	ef 92       	push	r14
    3c20:	ff 92       	push	r15
    3c22:	0f 93       	push	r16
    3c24:	1f 93       	push	r17
    3c26:	df 93       	push	r29
    3c28:	cf 93       	push	r28
    3c2a:	cd b7       	in	r28, 0x3d	; 61
    3c2c:	de b7       	in	r29, 0x3e	; 62
    3c2e:	a1 97       	sbiw	r28, 0x21	; 33
    3c30:	0f b6       	in	r0, 0x3f	; 63
    3c32:	f8 94       	cli
    3c34:	de bf       	out	0x3e, r29	; 62
    3c36:	0f be       	out	0x3f, r0	; 63
    3c38:	cd bf       	out	0x3d, r28	; 61
    3c3a:	7c 01       	movw	r14, r24
    3c3c:	cb 01       	movw	r24, r22
    3c3e:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ltoa(value, buf, base);
    3c40:	8e 01       	movw	r16, r28
    3c42:	0f 5f       	subi	r16, 0xFF	; 255
    3c44:	1f 4f       	sbci	r17, 0xFF	; 255
    3c46:	a8 01       	movw	r20, r16
    3c48:	0e 94 79 2d 	call	0x5af2	; 0x5af2 <ltoa>
  getBuffer( _length = strlen(buf) );
    3c4c:	f8 01       	movw	r30, r16
    3c4e:	01 90       	ld	r0, Z+
    3c50:	00 20       	and	r0, r0
    3c52:	e9 f7       	brne	.-6      	; 0x3c4e <_ZN6StringC2Eli+0x30>
    3c54:	cf 01       	movw	r24, r30
    3c56:	01 97       	sbiw	r24, 0x01	; 1
    3c58:	80 1b       	sub	r24, r16
    3c5a:	91 0b       	sbc	r25, r17
    3c5c:	f7 01       	movw	r30, r14
    3c5e:	95 83       	std	Z+5, r25	; 0x05
    3c60:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3c62:	93 83       	std	Z+3, r25	; 0x03
    3c64:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3c66:	01 96       	adiw	r24, 0x01	; 1
    3c68:	0e 94 97 2a 	call	0x552e	; 0x552e <malloc>
    3c6c:	f7 01       	movw	r30, r14
    3c6e:	91 83       	std	Z+1, r25	; 0x01
    3c70:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3c72:	00 97       	sbiw	r24, 0x00	; 0
    3c74:	81 f0       	breq	.+32     	; 0x3c96 <_ZN6StringC2Eli+0x78>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    3c76:	b8 01       	movw	r22, r16
    3c78:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <strcpy>
}
    3c7c:	a1 96       	adiw	r28, 0x21	; 33
    3c7e:	0f b6       	in	r0, 0x3f	; 63
    3c80:	f8 94       	cli
    3c82:	de bf       	out	0x3e, r29	; 62
    3c84:	0f be       	out	0x3f, r0	; 63
    3c86:	cd bf       	out	0x3d, r28	; 61
    3c88:	cf 91       	pop	r28
    3c8a:	df 91       	pop	r29
    3c8c:	1f 91       	pop	r17
    3c8e:	0f 91       	pop	r16
    3c90:	ff 90       	pop	r15
    3c92:	ef 90       	pop	r14
    3c94:	08 95       	ret
    3c96:	13 82       	std	Z+3, r1	; 0x03
    3c98:	12 82       	std	Z+2, r1	; 0x02
    3c9a:	15 82       	std	Z+5, r1	; 0x05
    3c9c:	14 82       	std	Z+4, r1	; 0x04
    3c9e:	ee cf       	rjmp	.-36     	; 0x3c7c <_ZN6StringC2Eli+0x5e>

00003ca0 <_ZN6StringC1Eii>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const int value, const int base )
    3ca0:	ef 92       	push	r14
    3ca2:	ff 92       	push	r15
    3ca4:	0f 93       	push	r16
    3ca6:	1f 93       	push	r17
    3ca8:	df 93       	push	r29
    3caa:	cf 93       	push	r28
    3cac:	cd b7       	in	r28, 0x3d	; 61
    3cae:	de b7       	in	r29, 0x3e	; 62
    3cb0:	a1 97       	sbiw	r28, 0x21	; 33
    3cb2:	0f b6       	in	r0, 0x3f	; 63
    3cb4:	f8 94       	cli
    3cb6:	de bf       	out	0x3e, r29	; 62
    3cb8:	0f be       	out	0x3f, r0	; 63
    3cba:	cd bf       	out	0x3d, r28	; 61
    3cbc:	7c 01       	movw	r14, r24
    3cbe:	cb 01       	movw	r24, r22
{
  char buf[33];   
  itoa((signed long)value, buf, base);
    3cc0:	8e 01       	movw	r16, r28
    3cc2:	0f 5f       	subi	r16, 0xFF	; 255
    3cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    3cc6:	b8 01       	movw	r22, r16
    3cc8:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <itoa>
  getBuffer( _length = strlen(buf) );
    3ccc:	f8 01       	movw	r30, r16
    3cce:	01 90       	ld	r0, Z+
    3cd0:	00 20       	and	r0, r0
    3cd2:	e9 f7       	brne	.-6      	; 0x3cce <_ZN6StringC1Eii+0x2e>
    3cd4:	cf 01       	movw	r24, r30
    3cd6:	01 97       	sbiw	r24, 0x01	; 1
    3cd8:	80 1b       	sub	r24, r16
    3cda:	91 0b       	sbc	r25, r17
    3cdc:	f7 01       	movw	r30, r14
    3cde:	95 83       	std	Z+5, r25	; 0x05
    3ce0:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3ce2:	93 83       	std	Z+3, r25	; 0x03
    3ce4:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3ce6:	01 96       	adiw	r24, 0x01	; 1
    3ce8:	0e 94 97 2a 	call	0x552e	; 0x552e <malloc>
    3cec:	f7 01       	movw	r30, r14
    3cee:	91 83       	std	Z+1, r25	; 0x01
    3cf0:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3cf2:	00 97       	sbiw	r24, 0x00	; 0
    3cf4:	81 f0       	breq	.+32     	; 0x3d16 <_ZN6StringC1Eii+0x76>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    3cf6:	b8 01       	movw	r22, r16
    3cf8:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <strcpy>
}
    3cfc:	a1 96       	adiw	r28, 0x21	; 33
    3cfe:	0f b6       	in	r0, 0x3f	; 63
    3d00:	f8 94       	cli
    3d02:	de bf       	out	0x3e, r29	; 62
    3d04:	0f be       	out	0x3f, r0	; 63
    3d06:	cd bf       	out	0x3d, r28	; 61
    3d08:	cf 91       	pop	r28
    3d0a:	df 91       	pop	r29
    3d0c:	1f 91       	pop	r17
    3d0e:	0f 91       	pop	r16
    3d10:	ff 90       	pop	r15
    3d12:	ef 90       	pop	r14
    3d14:	08 95       	ret
    3d16:	13 82       	std	Z+3, r1	; 0x03
    3d18:	12 82       	std	Z+2, r1	; 0x02
    3d1a:	15 82       	std	Z+5, r1	; 0x05
    3d1c:	14 82       	std	Z+4, r1	; 0x04
    3d1e:	ee cf       	rjmp	.-36     	; 0x3cfc <_ZN6StringC1Eii+0x5c>

00003d20 <_ZN6StringC2Eii>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const int value, const int base )
    3d20:	ef 92       	push	r14
    3d22:	ff 92       	push	r15
    3d24:	0f 93       	push	r16
    3d26:	1f 93       	push	r17
    3d28:	df 93       	push	r29
    3d2a:	cf 93       	push	r28
    3d2c:	cd b7       	in	r28, 0x3d	; 61
    3d2e:	de b7       	in	r29, 0x3e	; 62
    3d30:	a1 97       	sbiw	r28, 0x21	; 33
    3d32:	0f b6       	in	r0, 0x3f	; 63
    3d34:	f8 94       	cli
    3d36:	de bf       	out	0x3e, r29	; 62
    3d38:	0f be       	out	0x3f, r0	; 63
    3d3a:	cd bf       	out	0x3d, r28	; 61
    3d3c:	7c 01       	movw	r14, r24
    3d3e:	cb 01       	movw	r24, r22
{
  char buf[33];   
  itoa((signed long)value, buf, base);
    3d40:	8e 01       	movw	r16, r28
    3d42:	0f 5f       	subi	r16, 0xFF	; 255
    3d44:	1f 4f       	sbci	r17, 0xFF	; 255
    3d46:	b8 01       	movw	r22, r16
    3d48:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <itoa>
  getBuffer( _length = strlen(buf) );
    3d4c:	f8 01       	movw	r30, r16
    3d4e:	01 90       	ld	r0, Z+
    3d50:	00 20       	and	r0, r0
    3d52:	e9 f7       	brne	.-6      	; 0x3d4e <_ZN6StringC2Eii+0x2e>
    3d54:	cf 01       	movw	r24, r30
    3d56:	01 97       	sbiw	r24, 0x01	; 1
    3d58:	80 1b       	sub	r24, r16
    3d5a:	91 0b       	sbc	r25, r17
    3d5c:	f7 01       	movw	r30, r14
    3d5e:	95 83       	std	Z+5, r25	; 0x05
    3d60:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    3d62:	93 83       	std	Z+3, r25	; 0x03
    3d64:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    3d66:	01 96       	adiw	r24, 0x01	; 1
    3d68:	0e 94 97 2a 	call	0x552e	; 0x552e <malloc>
    3d6c:	f7 01       	movw	r30, r14
    3d6e:	91 83       	std	Z+1, r25	; 0x01
    3d70:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    3d72:	00 97       	sbiw	r24, 0x00	; 0
    3d74:	81 f0       	breq	.+32     	; 0x3d96 <_ZN6StringC2Eii+0x76>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    3d76:	b8 01       	movw	r22, r16
    3d78:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <strcpy>
}
    3d7c:	a1 96       	adiw	r28, 0x21	; 33
    3d7e:	0f b6       	in	r0, 0x3f	; 63
    3d80:	f8 94       	cli
    3d82:	de bf       	out	0x3e, r29	; 62
    3d84:	0f be       	out	0x3f, r0	; 63
    3d86:	cd bf       	out	0x3d, r28	; 61
    3d88:	cf 91       	pop	r28
    3d8a:	df 91       	pop	r29
    3d8c:	1f 91       	pop	r17
    3d8e:	0f 91       	pop	r16
    3d90:	ff 90       	pop	r15
    3d92:	ef 90       	pop	r14
    3d94:	08 95       	ret
    3d96:	13 82       	std	Z+3, r1	; 0x03
    3d98:	12 82       	std	Z+2, r1	; 0x02
    3d9a:	15 82       	std	Z+5, r1	; 0x05
    3d9c:	14 82       	std	Z+4, r1	; 0x04
    3d9e:	ee cf       	rjmp	.-36     	; 0x3d7c <_ZN6StringC2Eii+0x5c>

00003da0 <__cxa_pure_virtual>:
#include "cplusplushelper.h"
#include <stdlib.h>

void __cxa_pure_virtual(void)
{

    3da0:	08 95       	ret

00003da2 <__cxa_guard_acquire>:
}

int __cxa_guard_acquire(__guard *g)
    3da2:	20 e0       	ldi	r18, 0x00	; 0
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	fc 01       	movw	r30, r24
    3da8:	80 81       	ld	r24, Z
    3daa:	88 23       	and	r24, r24
    3dac:	11 f4       	brne	.+4      	; 0x3db2 <__cxa_guard_acquire+0x10>
    3dae:	21 e0       	ldi	r18, 0x01	; 1
    3db0:	30 e0       	ldi	r19, 0x00	; 0
{
	return !*(char *)(g);
    3db2:	c9 01       	movw	r24, r18
    3db4:	08 95       	ret

00003db6 <__cxa_guard_release>:
}
 
void __cxa_guard_release (__guard *g)
{
    3db6:	21 e0       	ldi	r18, 0x01	; 1
    3db8:	fc 01       	movw	r30, r24
    3dba:	20 83       	st	Z, r18
	*(char *)g = 1;
    3dbc:	08 95       	ret

00003dbe <__cxa_guard_abort>:
}
 
void __cxa_guard_abort (__guard *)
{

    3dbe:	08 95       	ret

00003dc0 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    3dc0:	10 92 51 07 	sts	0x0751, r1

  #if defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega328P__)
    // activate internal pull-ups for twi
    // as per note from atmega8 manual pg167
    sbi(PORTC, 4);
    3dc4:	44 9a       	sbi	0x08, 4	; 8
    sbi(PORTC, 5);
    3dc6:	45 9a       	sbi	0x08, 5	; 8
    sbi(PORTD, 0);
    sbi(PORTD, 1);
  #endif

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    3dc8:	e9 eb       	ldi	r30, 0xB9	; 185
    3dca:	f0 e0       	ldi	r31, 0x00	; 0
    3dcc:	80 81       	ld	r24, Z
    3dce:	8e 7f       	andi	r24, 0xFE	; 254
    3dd0:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    3dd2:	80 81       	ld	r24, Z
    3dd4:	8d 7f       	andi	r24, 0xFD	; 253
    3dd6:	80 83       	st	Z, r24
  TWBR = ((CPU_FREQ / TWI_FREQ) - 16) / 2;
    3dd8:	88 e4       	ldi	r24, 0x48	; 72
    3dda:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    3dde:	85 e4       	ldi	r24, 0x45	; 69
    3de0:	80 93 bc 00 	sts	0x00BC, r24
}
    3de4:	08 95       	ret

00003de6 <twi_setAddress>:
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
    3de6:	88 0f       	add	r24, r24
    3de8:	80 93 ba 00 	sts	0x00BA, r24
}
    3dec:	08 95       	ret

00003dee <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3dee:	41 32       	cpi	r20, 0x21	; 33
    3df0:	a0 f5       	brcc	.+104    	; 0x3e5a <twi_readFrom+0x6c>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    3df2:	90 91 51 07 	lds	r25, 0x0751
    3df6:	99 23       	and	r25, r25
    3df8:	e1 f7       	brne	.-8      	; 0x3df2 <twi_readFrom+0x4>
    continue;
  }
  twi_state = TWI_MRX;
    3dfa:	91 e0       	ldi	r25, 0x01	; 1
    3dfc:	90 93 51 07 	sts	0x0751, r25
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    3e00:	9f ef       	ldi	r25, 0xFF	; 255
    3e02:	90 93 50 07 	sts	0x0750, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    3e06:	10 92 2e 07 	sts	0x072E, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    3e0a:	94 2f       	mov	r25, r20
    3e0c:	91 50       	subi	r25, 0x01	; 1
    3e0e:	90 93 2f 07 	sts	0x072F, r25
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
  twi_slarw |= address << 1;
    3e12:	88 0f       	add	r24, r24
    3e14:	81 60       	ori	r24, 0x01	; 1
    3e16:	80 93 2d 07 	sts	0x072D, r24

  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    3e1a:	85 ee       	ldi	r24, 0xE5	; 229
    3e1c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    3e20:	80 91 51 07 	lds	r24, 0x0751
    3e24:	81 30       	cpi	r24, 0x01	; 1
    3e26:	e1 f3       	breq	.-8      	; 0x3e20 <twi_readFrom+0x32>
    continue;
  }

  if (twi_masterBufferIndex < length)
    3e28:	80 91 2e 07 	lds	r24, 0x072E
    3e2c:	84 17       	cp	r24, r20
    3e2e:	90 f0       	brcs	.+36     	; 0x3e54 <twi_readFrom+0x66>
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    3e30:	44 23       	and	r20, r20
    3e32:	71 f0       	breq	.+28     	; 0x3e50 <twi_readFrom+0x62>
    3e34:	20 e0       	ldi	r18, 0x00	; 0
    3e36:	30 e0       	ldi	r19, 0x00	; 0
    data[i] = twi_masterBuffer[i];
    3e38:	fb 01       	movw	r30, r22
    3e3a:	e2 0f       	add	r30, r18
    3e3c:	f3 1f       	adc	r31, r19
    3e3e:	d9 01       	movw	r26, r18
    3e40:	a0 5d       	subi	r26, 0xD0	; 208
    3e42:	b8 4f       	sbci	r27, 0xF8	; 248
    3e44:	9c 91       	ld	r25, X
    3e46:	90 83       	st	Z, r25
    3e48:	2f 5f       	subi	r18, 0xFF	; 255
    3e4a:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    3e4c:	24 17       	cp	r18, r20
    3e4e:	a0 f3       	brcs	.-24     	; 0x3e38 <twi_readFrom+0x4a>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    3e50:	84 2f       	mov	r24, r20
    3e52:	08 95       	ret
  while(TWI_MRX == twi_state){
    continue;
  }

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;
    3e54:	40 91 2e 07 	lds	r20, 0x072E
    3e58:	eb cf       	rjmp	.-42     	; 0x3e30 <twi_readFrom+0x42>
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3e5a:	40 e0       	ldi	r20, 0x00	; 0
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    3e5c:	84 2f       	mov	r24, r20
    3e5e:	08 95       	ret

00003e60 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait)
{
    3e60:	cf 93       	push	r28
    3e62:	df 93       	push	r29
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3e64:	41 32       	cpi	r20, 0x21	; 33
    3e66:	08 f0       	brcs	.+2      	; 0x3e6a <twi_writeTo+0xa>
    3e68:	43 c0       	rjmp	.+134    	; 0x3ef0 <twi_writeTo+0x90>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    3e6a:	90 91 51 07 	lds	r25, 0x0751
    3e6e:	99 23       	and	r25, r25
    3e70:	e1 f7       	brne	.-8      	; 0x3e6a <twi_writeTo+0xa>
    continue;
  }
  twi_state = TWI_MTX;
    3e72:	92 e0       	ldi	r25, 0x02	; 2
    3e74:	90 93 51 07 	sts	0x0751, r25
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    3e78:	9f ef       	ldi	r25, 0xFF	; 255
    3e7a:	90 93 50 07 	sts	0x0750, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    3e7e:	10 92 2e 07 	sts	0x072E, r1
  twi_masterBufferLength = length;
    3e82:	40 93 2f 07 	sts	0x072F, r20
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    3e86:	44 23       	and	r20, r20
    3e88:	69 f0       	breq	.+26     	; 0x3ea4 <twi_writeTo+0x44>
    3e8a:	e0 e0       	ldi	r30, 0x00	; 0
    3e8c:	f0 e0       	ldi	r31, 0x00	; 0
    twi_masterBuffer[i] = data[i];
    3e8e:	df 01       	movw	r26, r30
    3e90:	a0 5d       	subi	r26, 0xD0	; 208
    3e92:	b8 4f       	sbci	r27, 0xF8	; 248
    3e94:	eb 01       	movw	r28, r22
    3e96:	ce 0f       	add	r28, r30
    3e98:	df 1f       	adc	r29, r31
    3e9a:	98 81       	ld	r25, Y
    3e9c:	9c 93       	st	X, r25
    3e9e:	31 96       	adiw	r30, 0x01	; 1
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    3ea0:	e4 17       	cp	r30, r20
    3ea2:	a8 f3       	brcs	.-22     	; 0x3e8e <twi_writeTo+0x2e>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
  twi_slarw |= address << 1;
    3ea4:	90 e0       	ldi	r25, 0x00	; 0
    3ea6:	88 0f       	add	r24, r24
    3ea8:	99 1f       	adc	r25, r25
    3eaa:	80 93 2d 07 	sts	0x072D, r24
  
  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    3eae:	85 ee       	ldi	r24, 0xE5	; 229
    3eb0:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    3eb4:	22 23       	and	r18, r18
    3eb6:	81 f4       	brne	.+32     	; 0x3ed8 <twi_writeTo+0x78>
    continue;
  }
  
  if (twi_error == 0xFF)
    3eb8:	80 91 50 07 	lds	r24, 0x0750
    3ebc:	8f 3f       	cpi	r24, 0xFF	; 255
    3ebe:	a1 f0       	breq	.+40     	; 0x3ee8 <twi_writeTo+0x88>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    3ec0:	80 91 50 07 	lds	r24, 0x0750
    3ec4:	80 32       	cpi	r24, 0x20	; 32
    3ec6:	c1 f0       	breq	.+48     	; 0x3ef8 <twi_writeTo+0x98>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    3ec8:	80 91 50 07 	lds	r24, 0x0750
    3ecc:	80 33       	cpi	r24, 0x30	; 48
    3ece:	b1 f0       	breq	.+44     	; 0x3efc <twi_writeTo+0x9c>
    3ed0:	84 e0       	ldi	r24, 0x04	; 4
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    3ed2:	df 91       	pop	r29
    3ed4:	cf 91       	pop	r28
    3ed6:	08 95       	ret
  
  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    3ed8:	80 91 51 07 	lds	r24, 0x0751
    3edc:	82 30       	cpi	r24, 0x02	; 2
    3ede:	e1 f3       	breq	.-8      	; 0x3ed8 <twi_writeTo+0x78>
    continue;
  }
  
  if (twi_error == 0xFF)
    3ee0:	80 91 50 07 	lds	r24, 0x0750
    3ee4:	8f 3f       	cpi	r24, 0xFF	; 255
    3ee6:	61 f7       	brne	.-40     	; 0x3ec0 <twi_writeTo+0x60>
    3ee8:	80 e0       	ldi	r24, 0x00	; 0
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    3eea:	df 91       	pop	r29
    3eec:	cf 91       	pop	r28
    3eee:	08 95       	ret
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3ef0:	81 e0       	ldi	r24, 0x01	; 1
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    3ef2:	df 91       	pop	r29
    3ef4:	cf 91       	pop	r28
    3ef6:	08 95       	ret
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    3ef8:	82 e0       	ldi	r24, 0x02	; 2
    3efa:	eb cf       	rjmp	.-42     	; 0x3ed2 <twi_writeTo+0x72>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    3efc:	83 e0       	ldi	r24, 0x03	; 3
    3efe:	e9 cf       	rjmp	.-46     	; 0x3ed2 <twi_writeTo+0x72>

00003f00 <twi_transmit>:
uint8_t twi_transmit(uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3f00:	61 32       	cpi	r22, 0x21	; 33
    3f02:	d0 f4       	brcc	.+52     	; 0x3f38 <twi_transmit+0x38>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    3f04:	20 91 51 07 	lds	r18, 0x0751
    3f08:	24 30       	cpi	r18, 0x04	; 4
    3f0a:	11 f0       	breq	.+4      	; 0x3f10 <twi_transmit+0x10>
    3f0c:	82 e0       	ldi	r24, 0x02	; 2
    3f0e:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    3f10:	60 93 76 07 	sts	0x0776, r22
  for(i = 0; i < length; ++i){
    3f14:	66 23       	and	r22, r22
    3f16:	71 f0       	breq	.+28     	; 0x3f34 <twi_transmit+0x34>
    3f18:	20 e0       	ldi	r18, 0x00	; 0
    3f1a:	30 e0       	ldi	r19, 0x00	; 0
    twi_txBuffer[i] = data[i];
    3f1c:	f9 01       	movw	r30, r18
    3f1e:	e7 58       	subi	r30, 0x87	; 135
    3f20:	f8 4f       	sbci	r31, 0xF8	; 248
    3f22:	dc 01       	movw	r26, r24
    3f24:	a2 0f       	add	r26, r18
    3f26:	b3 1f       	adc	r27, r19
    3f28:	4c 91       	ld	r20, X
    3f2a:	40 83       	st	Z, r20
    3f2c:	2f 5f       	subi	r18, 0xFF	; 255
    3f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    3f30:	26 17       	cp	r18, r22
    3f32:	a0 f3       	brcs	.-24     	; 0x3f1c <twi_transmit+0x1c>
    3f34:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    3f36:	08 95       	ret
uint8_t twi_transmit(uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3f38:	81 e0       	ldi	r24, 0x01	; 1
    3f3a:	08 95       	ret

00003f3c <twi_attachSlaveRxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    3f3c:	90 93 74 07 	sts	0x0774, r25
    3f40:	80 93 73 07 	sts	0x0773, r24
}
    3f44:	08 95       	ret

00003f46 <twi_attachSlaveTxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    3f46:	90 93 78 07 	sts	0x0778, r25
    3f4a:	80 93 77 07 	sts	0x0777, r24
}
    3f4e:	08 95       	ret

00003f50 <twi_reply>:
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    3f50:	88 23       	and	r24, r24
    3f52:	21 f4       	brne	.+8      	; 0x3f5c <twi_reply+0xc>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3f54:	85 e8       	ldi	r24, 0x85	; 133
    3f56:	80 93 bc 00 	sts	0x00BC, r24
    3f5a:	08 95       	ret
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3f5c:	85 ec       	ldi	r24, 0xC5	; 197
    3f5e:	80 93 bc 00 	sts	0x00BC, r24
    3f62:	08 95       	ret

00003f64 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3f64:	85 ed       	ldi	r24, 0xD5	; 213
    3f66:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3f6a:	80 91 bc 00 	lds	r24, 0x00BC
    3f6e:	84 fd       	sbrc	r24, 4
    3f70:	fc cf       	rjmp	.-8      	; 0x3f6a <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3f72:	10 92 51 07 	sts	0x0751, r1
}
    3f76:	08 95       	ret

00003f78 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3f78:	85 ec       	ldi	r24, 0xC5	; 197
    3f7a:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    3f7e:	10 92 51 07 	sts	0x0751, r1
}
    3f82:	08 95       	ret

00003f84 <__vector_24>:

SIGNAL(TWI_vect)
{
    3f84:	1f 92       	push	r1
    3f86:	0f 92       	push	r0
    3f88:	0f b6       	in	r0, 0x3f	; 63
    3f8a:	0f 92       	push	r0
    3f8c:	11 24       	eor	r1, r1
    3f8e:	2f 93       	push	r18
    3f90:	3f 93       	push	r19
    3f92:	4f 93       	push	r20
    3f94:	5f 93       	push	r21
    3f96:	6f 93       	push	r22
    3f98:	7f 93       	push	r23
    3f9a:	8f 93       	push	r24
    3f9c:	9f 93       	push	r25
    3f9e:	af 93       	push	r26
    3fa0:	bf 93       	push	r27
    3fa2:	ef 93       	push	r30
    3fa4:	ff 93       	push	r31
  switch(TW_STATUS){
    3fa6:	80 91 b9 00 	lds	r24, 0x00B9
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	a0 e0       	ldi	r26, 0x00	; 0
    3fae:	b0 e0       	ldi	r27, 0x00	; 0
    3fb0:	88 7f       	andi	r24, 0xF8	; 248
    3fb2:	90 70       	andi	r25, 0x00	; 0
    3fb4:	a0 70       	andi	r26, 0x00	; 0
    3fb6:	b0 70       	andi	r27, 0x00	; 0
    3fb8:	89 3c       	cpi	r24, 0xC9	; 201
    3fba:	91 05       	cpc	r25, r1
    3fbc:	98 f5       	brcc	.+102    	; 0x4024 <__vector_24+0xa0>
    3fbe:	8c 5c       	subi	r24, 0xCC	; 204
    3fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fc2:	fc 01       	movw	r30, r24
    3fc4:	ee 0f       	add	r30, r30
    3fc6:	ff 1f       	adc	r31, r31
    3fc8:	05 90       	lpm	r0, Z+
    3fca:	f4 91       	lpm	r31, Z+
    3fcc:	e0 2d       	mov	r30, r0
    3fce:	09 94       	ijmp
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3fd0:	84 e0       	ldi	r24, 0x04	; 4
    3fd2:	80 93 51 07 	sts	0x0751, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3fd6:	10 92 75 07 	sts	0x0775, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3fda:	10 92 76 07 	sts	0x0776, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3fde:	e0 91 77 07 	lds	r30, 0x0777
    3fe2:	f0 91 78 07 	lds	r31, 0x0778
    3fe6:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3fe8:	80 91 76 07 	lds	r24, 0x0776
    3fec:	88 23       	and	r24, r24
    3fee:	29 f4       	brne	.+10     	; 0x3ffa <__vector_24+0x76>
        twi_txBufferLength = 1;
    3ff0:	81 e0       	ldi	r24, 0x01	; 1
    3ff2:	80 93 76 07 	sts	0x0776, r24
        twi_txBuffer[0] = 0x00;
    3ff6:	10 92 79 07 	sts	0x0779, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3ffa:	80 91 75 07 	lds	r24, 0x0775
    3ffe:	e8 2f       	mov	r30, r24
    4000:	f0 e0       	ldi	r31, 0x00	; 0
    4002:	e7 58       	subi	r30, 0x87	; 135
    4004:	f8 4f       	sbci	r31, 0xF8	; 248
    4006:	90 81       	ld	r25, Z
    4008:	90 93 bb 00 	sts	0x00BB, r25
    400c:	8f 5f       	subi	r24, 0xFF	; 255
    400e:	80 93 75 07 	sts	0x0775, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4012:	90 91 75 07 	lds	r25, 0x0775
    4016:	80 91 76 07 	lds	r24, 0x0776
    401a:	98 17       	cp	r25, r24
    401c:	c8 f4       	brcc	.+50     	; 0x4050 <__vector_24+0xcc>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    401e:	85 ec       	ldi	r24, 0xC5	; 197
    4020:	80 93 bc 00 	sts	0x00BC, r24
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    4024:	ff 91       	pop	r31
    4026:	ef 91       	pop	r30
    4028:	bf 91       	pop	r27
    402a:	af 91       	pop	r26
    402c:	9f 91       	pop	r25
    402e:	8f 91       	pop	r24
    4030:	7f 91       	pop	r23
    4032:	6f 91       	pop	r22
    4034:	5f 91       	pop	r21
    4036:	4f 91       	pop	r20
    4038:	3f 91       	pop	r19
    403a:	2f 91       	pop	r18
    403c:	0f 90       	pop	r0
    403e:	0f be       	out	0x3f, r0	; 63
    4040:	0f 90       	pop	r0
    4042:	1f 90       	pop	r1
    4044:	18 95       	reti
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4046:	80 91 52 07 	lds	r24, 0x0752
    404a:	80 32       	cpi	r24, 0x20	; 32
    404c:	08 f4       	brcc	.+2      	; 0x4050 <__vector_24+0xcc>
    404e:	9c c0       	rjmp	.+312    	; 0x4188 <__vector_24+0x204>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4050:	85 e8       	ldi	r24, 0x85	; 133
    4052:	80 93 bc 00 	sts	0x00BC, r24
    4056:	e6 cf       	rjmp	.-52     	; 0x4024 <__vector_24+0xa0>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4058:	80 91 2e 07 	lds	r24, 0x072E
    405c:	90 91 bb 00 	lds	r25, 0x00BB
    4060:	e8 2f       	mov	r30, r24
    4062:	f0 e0       	ldi	r31, 0x00	; 0
    4064:	e0 5d       	subi	r30, 0xD0	; 208
    4066:	f8 4f       	sbci	r31, 0xF8	; 248
    4068:	90 83       	st	Z, r25
    406a:	8f 5f       	subi	r24, 0xFF	; 255
    406c:	80 93 2e 07 	sts	0x072E, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4070:	90 91 2e 07 	lds	r25, 0x072E
    4074:	80 91 2f 07 	lds	r24, 0x072F
    4078:	98 17       	cp	r25, r24
    407a:	50 f7       	brcc	.-44     	; 0x4050 <__vector_24+0xcc>
    407c:	d0 cf       	rjmp	.-96     	; 0x401e <__vector_24+0x9a>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    407e:	80 91 2e 07 	lds	r24, 0x072E
    4082:	90 91 bb 00 	lds	r25, 0x00BB
    4086:	e8 2f       	mov	r30, r24
    4088:	f0 e0       	ldi	r31, 0x00	; 0
    408a:	e0 5d       	subi	r30, 0xD0	; 208
    408c:	f8 4f       	sbci	r31, 0xF8	; 248
    408e:	90 83       	st	Z, r25
    4090:	8f 5f       	subi	r24, 0xFF	; 255
    4092:	80 93 2e 07 	sts	0x072E, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4096:	85 ed       	ldi	r24, 0xD5	; 213
    4098:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    409c:	80 91 bc 00 	lds	r24, 0x00BC
    40a0:	84 fd       	sbrc	r24, 4
    40a2:	fc cf       	rjmp	.-8      	; 0x409c <__vector_24+0x118>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    40a4:	10 92 51 07 	sts	0x0751, r1
    40a8:	bd cf       	rjmp	.-134    	; 0x4024 <__vector_24+0xa0>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    40aa:	85 ec       	ldi	r24, 0xC5	; 197
    40ac:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    40b0:	10 92 51 07 	sts	0x0751, r1
      break;
    40b4:	b7 cf       	rjmp	.-146    	; 0x4024 <__vector_24+0xa0>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    40b6:	83 e0       	ldi	r24, 0x03	; 3
    40b8:	80 93 51 07 	sts	0x0751, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    40bc:	10 92 52 07 	sts	0x0752, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    40c0:	85 ec       	ldi	r24, 0xC5	; 197
    40c2:	80 93 bc 00 	sts	0x00BC, r24
    40c6:	ae cf       	rjmp	.-164    	; 0x4024 <__vector_24+0xa0>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    40c8:	10 92 50 07 	sts	0x0750, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    40cc:	85 ed       	ldi	r24, 0xD5	; 213
    40ce:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    40d2:	80 91 bc 00 	lds	r24, 0x00BC
    40d6:	84 fd       	sbrc	r24, 4
    40d8:	fc cf       	rjmp	.-8      	; 0x40d2 <__vector_24+0x14e>
    40da:	e4 cf       	rjmp	.-56     	; 0x40a4 <__vector_24+0x120>
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    40dc:	80 91 2d 07 	lds	r24, 0x072D
    40e0:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    40e4:	85 ec       	ldi	r24, 0xC5	; 197
    40e6:	80 93 bc 00 	sts	0x00BC, r24
    40ea:	9c cf       	rjmp	.-200    	; 0x4024 <__vector_24+0xa0>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    40ec:	90 91 2e 07 	lds	r25, 0x072E
    40f0:	80 91 2f 07 	lds	r24, 0x072F
    40f4:	98 17       	cp	r25, r24
    40f6:	08 f4       	brcc	.+2      	; 0x40fa <__vector_24+0x176>
    40f8:	5e c0       	rjmp	.+188    	; 0x41b6 <__vector_24+0x232>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    40fa:	85 ed       	ldi	r24, 0xD5	; 213
    40fc:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4100:	80 91 bc 00 	lds	r24, 0x00BC
    4104:	84 fd       	sbrc	r24, 4
    4106:	fc cf       	rjmp	.-8      	; 0x4100 <__vector_24+0x17c>
    4108:	cd cf       	rjmp	.-102    	; 0x40a4 <__vector_24+0x120>
      }else{
        twi_stop();
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    410a:	80 e2       	ldi	r24, 0x20	; 32
    410c:	80 93 50 07 	sts	0x0750, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4110:	85 ed       	ldi	r24, 0xD5	; 213
    4112:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4116:	80 91 bc 00 	lds	r24, 0x00BC
    411a:	84 fd       	sbrc	r24, 4
    411c:	fc cf       	rjmp	.-8      	; 0x4116 <__vector_24+0x192>
    411e:	c2 cf       	rjmp	.-124    	; 0x40a4 <__vector_24+0x120>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4120:	80 91 52 07 	lds	r24, 0x0752
    4124:	80 32       	cpi	r24, 0x20	; 32
    4126:	08 f4       	brcc	.+2      	; 0x412a <__vector_24+0x1a6>
    4128:	3f c0       	rjmp	.+126    	; 0x41a8 <__vector_24+0x224>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    412a:	85 ed       	ldi	r24, 0xD5	; 213
    412c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4130:	80 91 bc 00 	lds	r24, 0x00BC
    4134:	84 fd       	sbrc	r24, 4
    4136:	fc cf       	rjmp	.-8      	; 0x4130 <__vector_24+0x1ac>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    4138:	10 92 51 07 	sts	0x0751, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    413c:	60 91 52 07 	lds	r22, 0x0752
    4140:	e0 91 73 07 	lds	r30, 0x0773
    4144:	f0 91 74 07 	lds	r31, 0x0774
    4148:	83 e5       	ldi	r24, 0x53	; 83
    414a:	97 e0       	ldi	r25, 0x07	; 7
    414c:	70 e0       	ldi	r23, 0x00	; 0
    414e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4150:	10 92 52 07 	sts	0x0752, r1
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    4154:	85 ec       	ldi	r24, 0xC5	; 197
    4156:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    415a:	10 92 51 07 	sts	0x0751, r1
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      break;
    415e:	62 cf       	rjmp	.-316    	; 0x4024 <__vector_24+0xa0>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4160:	80 e3       	ldi	r24, 0x30	; 48
    4162:	80 93 50 07 	sts	0x0750, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4166:	85 ed       	ldi	r24, 0xD5	; 213
    4168:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    416c:	80 91 bc 00 	lds	r24, 0x00BC
    4170:	84 fd       	sbrc	r24, 4
    4172:	fc cf       	rjmp	.-8      	; 0x416c <__vector_24+0x1e8>
    4174:	97 cf       	rjmp	.-210    	; 0x40a4 <__vector_24+0x120>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4176:	88 e3       	ldi	r24, 0x38	; 56
    4178:	80 93 50 07 	sts	0x0750, r24
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    417c:	85 ec       	ldi	r24, 0xC5	; 197
    417e:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    4182:	10 92 51 07 	sts	0x0751, r1
    4186:	4e cf       	rjmp	.-356    	; 0x4024 <__vector_24+0xa0>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4188:	80 91 52 07 	lds	r24, 0x0752
    418c:	90 91 bb 00 	lds	r25, 0x00BB
    4190:	e8 2f       	mov	r30, r24
    4192:	f0 e0       	ldi	r31, 0x00	; 0
    4194:	ed 5a       	subi	r30, 0xAD	; 173
    4196:	f8 4f       	sbci	r31, 0xF8	; 248
    4198:	90 83       	st	Z, r25
    419a:	8f 5f       	subi	r24, 0xFF	; 255
    419c:	80 93 52 07 	sts	0x0752, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    41a0:	85 ec       	ldi	r24, 0xC5	; 197
    41a2:	80 93 bc 00 	sts	0x00BC, r24
    41a6:	3e cf       	rjmp	.-388    	; 0x4024 <__vector_24+0xa0>
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    41a8:	e0 91 52 07 	lds	r30, 0x0752
    41ac:	f0 e0       	ldi	r31, 0x00	; 0
    41ae:	ed 5a       	subi	r30, 0xAD	; 173
    41b0:	f8 4f       	sbci	r31, 0xF8	; 248
    41b2:	10 82       	st	Z, r1
    41b4:	ba cf       	rjmp	.-140    	; 0x412a <__vector_24+0x1a6>
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    41b6:	80 91 2e 07 	lds	r24, 0x072E
    41ba:	e8 2f       	mov	r30, r24
    41bc:	f0 e0       	ldi	r31, 0x00	; 0
    41be:	e0 5d       	subi	r30, 0xD0	; 208
    41c0:	f8 4f       	sbci	r31, 0xF8	; 248
    41c2:	90 81       	ld	r25, Z
    41c4:	90 93 bb 00 	sts	0x00BB, r25
    41c8:	8f 5f       	subi	r24, 0xFF	; 255
    41ca:	80 93 2e 07 	sts	0x072E, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    41ce:	85 ec       	ldi	r24, 0xC5	; 197
    41d0:	80 93 bc 00 	sts	0x00BC, r24
    41d4:	27 cf       	rjmp	.-434    	; 0x4024 <__vector_24+0xa0>

000041d6 <__fixunssfsi>:
    41d6:	ef 92       	push	r14
    41d8:	ff 92       	push	r15
    41da:	0f 93       	push	r16
    41dc:	1f 93       	push	r17
    41de:	7b 01       	movw	r14, r22
    41e0:	8c 01       	movw	r16, r24
    41e2:	20 e0       	ldi	r18, 0x00	; 0
    41e4:	30 e0       	ldi	r19, 0x00	; 0
    41e6:	40 e0       	ldi	r20, 0x00	; 0
    41e8:	5f e4       	ldi	r21, 0x4F	; 79
    41ea:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <__gesf2>
    41ee:	88 23       	and	r24, r24
    41f0:	8c f0       	brlt	.+34     	; 0x4214 <__fixunssfsi+0x3e>
    41f2:	c8 01       	movw	r24, r16
    41f4:	b7 01       	movw	r22, r14
    41f6:	20 e0       	ldi	r18, 0x00	; 0
    41f8:	30 e0       	ldi	r19, 0x00	; 0
    41fa:	40 e0       	ldi	r20, 0x00	; 0
    41fc:	5f e4       	ldi	r21, 0x4F	; 79
    41fe:	0e 94 67 22 	call	0x44ce	; 0x44ce <__subsf3>
    4202:	0e 94 28 25 	call	0x4a50	; 0x4a50 <__fixsfsi>
    4206:	9b 01       	movw	r18, r22
    4208:	ac 01       	movw	r20, r24
    420a:	20 50       	subi	r18, 0x00	; 0
    420c:	30 40       	sbci	r19, 0x00	; 0
    420e:	40 40       	sbci	r20, 0x00	; 0
    4210:	50 48       	sbci	r21, 0x80	; 128
    4212:	06 c0       	rjmp	.+12     	; 0x4220 <__fixunssfsi+0x4a>
    4214:	c8 01       	movw	r24, r16
    4216:	b7 01       	movw	r22, r14
    4218:	0e 94 28 25 	call	0x4a50	; 0x4a50 <__fixsfsi>
    421c:	9b 01       	movw	r18, r22
    421e:	ac 01       	movw	r20, r24
    4220:	b9 01       	movw	r22, r18
    4222:	ca 01       	movw	r24, r20
    4224:	1f 91       	pop	r17
    4226:	0f 91       	pop	r16
    4228:	ff 90       	pop	r15
    422a:	ef 90       	pop	r14
    422c:	08 95       	ret

0000422e <_fpadd_parts>:
    422e:	a0 e0       	ldi	r26, 0x00	; 0
    4230:	b0 e0       	ldi	r27, 0x00	; 0
    4232:	ed e1       	ldi	r30, 0x1D	; 29
    4234:	f1 e2       	ldi	r31, 0x21	; 33
    4236:	0c 94 33 28 	jmp	0x5066	; 0x5066 <__prologue_saves__+0x4>
    423a:	fc 01       	movw	r30, r24
    423c:	2b 01       	movw	r4, r22
    423e:	ea 01       	movw	r28, r20
    4240:	80 81       	ld	r24, Z
    4242:	82 30       	cpi	r24, 0x02	; 2
    4244:	08 f4       	brcc	.+2      	; 0x4248 <_fpadd_parts+0x1a>
    4246:	3d c1       	rjmp	.+634    	; 0x44c2 <_fpadd_parts+0x294>
    4248:	db 01       	movw	r26, r22
    424a:	9c 91       	ld	r25, X
    424c:	92 30       	cpi	r25, 0x02	; 2
    424e:	08 f4       	brcc	.+2      	; 0x4252 <_fpadd_parts+0x24>
    4250:	37 c1       	rjmp	.+622    	; 0x44c0 <_fpadd_parts+0x292>
    4252:	84 30       	cpi	r24, 0x04	; 4
    4254:	69 f4       	brne	.+26     	; 0x4270 <_fpadd_parts+0x42>
    4256:	94 30       	cpi	r25, 0x04	; 4
    4258:	09 f0       	breq	.+2      	; 0x425c <_fpadd_parts+0x2e>
    425a:	33 c1       	rjmp	.+614    	; 0x44c2 <_fpadd_parts+0x294>
    425c:	91 81       	ldd	r25, Z+1	; 0x01
    425e:	11 96       	adiw	r26, 0x01	; 1
    4260:	8c 91       	ld	r24, X
    4262:	11 97       	sbiw	r26, 0x01	; 1
    4264:	98 17       	cp	r25, r24
    4266:	09 f4       	brne	.+2      	; 0x426a <_fpadd_parts+0x3c>
    4268:	2c c1       	rjmp	.+600    	; 0x44c2 <_fpadd_parts+0x294>
    426a:	eb ec       	ldi	r30, 0xCB	; 203
    426c:	f1 e0       	ldi	r31, 0x01	; 1
    426e:	29 c1       	rjmp	.+594    	; 0x44c2 <_fpadd_parts+0x294>
    4270:	94 30       	cpi	r25, 0x04	; 4
    4272:	09 f4       	brne	.+2      	; 0x4276 <_fpadd_parts+0x48>
    4274:	25 c1       	rjmp	.+586    	; 0x44c0 <_fpadd_parts+0x292>
    4276:	92 30       	cpi	r25, 0x02	; 2
    4278:	a9 f4       	brne	.+42     	; 0x42a4 <_fpadd_parts+0x76>
    427a:	82 30       	cpi	r24, 0x02	; 2
    427c:	09 f0       	breq	.+2      	; 0x4280 <_fpadd_parts+0x52>
    427e:	21 c1       	rjmp	.+578    	; 0x44c2 <_fpadd_parts+0x294>
    4280:	9f 01       	movw	r18, r30
    4282:	88 e0       	ldi	r24, 0x08	; 8
    4284:	d9 01       	movw	r26, r18
    4286:	0d 90       	ld	r0, X+
    4288:	9d 01       	movw	r18, r26
    428a:	da 01       	movw	r26, r20
    428c:	0d 92       	st	X+, r0
    428e:	ad 01       	movw	r20, r26
    4290:	81 50       	subi	r24, 0x01	; 1
    4292:	c1 f7       	brne	.-16     	; 0x4284 <_fpadd_parts+0x56>
    4294:	d2 01       	movw	r26, r4
    4296:	11 96       	adiw	r26, 0x01	; 1
    4298:	8c 91       	ld	r24, X
    429a:	11 97       	sbiw	r26, 0x01	; 1
    429c:	91 81       	ldd	r25, Z+1	; 0x01
    429e:	89 23       	and	r24, r25
    42a0:	89 83       	std	Y+1, r24	; 0x01
    42a2:	0c c1       	rjmp	.+536    	; 0x44bc <_fpadd_parts+0x28e>
    42a4:	82 30       	cpi	r24, 0x02	; 2
    42a6:	09 f4       	brne	.+2      	; 0x42aa <_fpadd_parts+0x7c>
    42a8:	0b c1       	rjmp	.+534    	; 0x44c0 <_fpadd_parts+0x292>
    42aa:	82 81       	ldd	r24, Z+2	; 0x02
    42ac:	93 81       	ldd	r25, Z+3	; 0x03
    42ae:	db 01       	movw	r26, r22
    42b0:	12 96       	adiw	r26, 0x02	; 2
    42b2:	4d 91       	ld	r20, X+
    42b4:	5c 91       	ld	r21, X
    42b6:	13 97       	sbiw	r26, 0x03	; 3
    42b8:	e4 80       	ldd	r14, Z+4	; 0x04
    42ba:	f5 80       	ldd	r15, Z+5	; 0x05
    42bc:	06 81       	ldd	r16, Z+6	; 0x06
    42be:	17 81       	ldd	r17, Z+7	; 0x07
    42c0:	14 96       	adiw	r26, 0x04	; 4
    42c2:	ad 90       	ld	r10, X+
    42c4:	bd 90       	ld	r11, X+
    42c6:	cd 90       	ld	r12, X+
    42c8:	dc 90       	ld	r13, X
    42ca:	17 97       	sbiw	r26, 0x07	; 7
    42cc:	9c 01       	movw	r18, r24
    42ce:	24 1b       	sub	r18, r20
    42d0:	35 0b       	sbc	r19, r21
    42d2:	b9 01       	movw	r22, r18
    42d4:	37 ff       	sbrs	r19, 7
    42d6:	04 c0       	rjmp	.+8      	; 0x42e0 <_fpadd_parts+0xb2>
    42d8:	66 27       	eor	r22, r22
    42da:	77 27       	eor	r23, r23
    42dc:	62 1b       	sub	r22, r18
    42de:	73 0b       	sbc	r23, r19
    42e0:	60 32       	cpi	r22, 0x20	; 32
    42e2:	71 05       	cpc	r23, r1
    42e4:	0c f0       	brlt	.+2      	; 0x42e8 <_fpadd_parts+0xba>
    42e6:	62 c0       	rjmp	.+196    	; 0x43ac <_fpadd_parts+0x17e>
    42e8:	12 16       	cp	r1, r18
    42ea:	13 06       	cpc	r1, r19
    42ec:	6c f5       	brge	.+90     	; 0x4348 <_fpadd_parts+0x11a>
    42ee:	35 01       	movw	r6, r10
    42f0:	46 01       	movw	r8, r12
    42f2:	06 2e       	mov	r0, r22
    42f4:	04 c0       	rjmp	.+8      	; 0x42fe <_fpadd_parts+0xd0>
    42f6:	96 94       	lsr	r9
    42f8:	87 94       	ror	r8
    42fa:	77 94       	ror	r7
    42fc:	67 94       	ror	r6
    42fe:	0a 94       	dec	r0
    4300:	d2 f7       	brpl	.-12     	; 0x42f6 <_fpadd_parts+0xc8>
    4302:	21 e0       	ldi	r18, 0x01	; 1
    4304:	30 e0       	ldi	r19, 0x00	; 0
    4306:	40 e0       	ldi	r20, 0x00	; 0
    4308:	50 e0       	ldi	r21, 0x00	; 0
    430a:	04 c0       	rjmp	.+8      	; 0x4314 <_fpadd_parts+0xe6>
    430c:	22 0f       	add	r18, r18
    430e:	33 1f       	adc	r19, r19
    4310:	44 1f       	adc	r20, r20
    4312:	55 1f       	adc	r21, r21
    4314:	6a 95       	dec	r22
    4316:	d2 f7       	brpl	.-12     	; 0x430c <_fpadd_parts+0xde>
    4318:	21 50       	subi	r18, 0x01	; 1
    431a:	30 40       	sbci	r19, 0x00	; 0
    431c:	40 40       	sbci	r20, 0x00	; 0
    431e:	50 40       	sbci	r21, 0x00	; 0
    4320:	2a 21       	and	r18, r10
    4322:	3b 21       	and	r19, r11
    4324:	4c 21       	and	r20, r12
    4326:	5d 21       	and	r21, r13
    4328:	21 15       	cp	r18, r1
    432a:	31 05       	cpc	r19, r1
    432c:	41 05       	cpc	r20, r1
    432e:	51 05       	cpc	r21, r1
    4330:	21 f0       	breq	.+8      	; 0x433a <_fpadd_parts+0x10c>
    4332:	21 e0       	ldi	r18, 0x01	; 1
    4334:	30 e0       	ldi	r19, 0x00	; 0
    4336:	40 e0       	ldi	r20, 0x00	; 0
    4338:	50 e0       	ldi	r21, 0x00	; 0
    433a:	59 01       	movw	r10, r18
    433c:	6a 01       	movw	r12, r20
    433e:	a6 28       	or	r10, r6
    4340:	b7 28       	or	r11, r7
    4342:	c8 28       	or	r12, r8
    4344:	d9 28       	or	r13, r9
    4346:	3d c0       	rjmp	.+122    	; 0x43c2 <_fpadd_parts+0x194>
    4348:	21 15       	cp	r18, r1
    434a:	31 05       	cpc	r19, r1
    434c:	d1 f1       	breq	.+116    	; 0x43c2 <_fpadd_parts+0x194>
    434e:	86 0f       	add	r24, r22
    4350:	97 1f       	adc	r25, r23
    4352:	37 01       	movw	r6, r14
    4354:	48 01       	movw	r8, r16
    4356:	06 2e       	mov	r0, r22
    4358:	04 c0       	rjmp	.+8      	; 0x4362 <_fpadd_parts+0x134>
    435a:	96 94       	lsr	r9
    435c:	87 94       	ror	r8
    435e:	77 94       	ror	r7
    4360:	67 94       	ror	r6
    4362:	0a 94       	dec	r0
    4364:	d2 f7       	brpl	.-12     	; 0x435a <_fpadd_parts+0x12c>
    4366:	21 e0       	ldi	r18, 0x01	; 1
    4368:	30 e0       	ldi	r19, 0x00	; 0
    436a:	40 e0       	ldi	r20, 0x00	; 0
    436c:	50 e0       	ldi	r21, 0x00	; 0
    436e:	04 c0       	rjmp	.+8      	; 0x4378 <_fpadd_parts+0x14a>
    4370:	22 0f       	add	r18, r18
    4372:	33 1f       	adc	r19, r19
    4374:	44 1f       	adc	r20, r20
    4376:	55 1f       	adc	r21, r21
    4378:	6a 95       	dec	r22
    437a:	d2 f7       	brpl	.-12     	; 0x4370 <_fpadd_parts+0x142>
    437c:	21 50       	subi	r18, 0x01	; 1
    437e:	30 40       	sbci	r19, 0x00	; 0
    4380:	40 40       	sbci	r20, 0x00	; 0
    4382:	50 40       	sbci	r21, 0x00	; 0
    4384:	2e 21       	and	r18, r14
    4386:	3f 21       	and	r19, r15
    4388:	40 23       	and	r20, r16
    438a:	51 23       	and	r21, r17
    438c:	21 15       	cp	r18, r1
    438e:	31 05       	cpc	r19, r1
    4390:	41 05       	cpc	r20, r1
    4392:	51 05       	cpc	r21, r1
    4394:	21 f0       	breq	.+8      	; 0x439e <_fpadd_parts+0x170>
    4396:	21 e0       	ldi	r18, 0x01	; 1
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	40 e0       	ldi	r20, 0x00	; 0
    439c:	50 e0       	ldi	r21, 0x00	; 0
    439e:	79 01       	movw	r14, r18
    43a0:	8a 01       	movw	r16, r20
    43a2:	e6 28       	or	r14, r6
    43a4:	f7 28       	or	r15, r7
    43a6:	08 29       	or	r16, r8
    43a8:	19 29       	or	r17, r9
    43aa:	0b c0       	rjmp	.+22     	; 0x43c2 <_fpadd_parts+0x194>
    43ac:	48 17       	cp	r20, r24
    43ae:	59 07       	cpc	r21, r25
    43b0:	2c f0       	brlt	.+10     	; 0x43bc <_fpadd_parts+0x18e>
    43b2:	ca 01       	movw	r24, r20
    43b4:	ee 24       	eor	r14, r14
    43b6:	ff 24       	eor	r15, r15
    43b8:	87 01       	movw	r16, r14
    43ba:	03 c0       	rjmp	.+6      	; 0x43c2 <_fpadd_parts+0x194>
    43bc:	aa 24       	eor	r10, r10
    43be:	bb 24       	eor	r11, r11
    43c0:	65 01       	movw	r12, r10
    43c2:	21 81       	ldd	r18, Z+1	; 0x01
    43c4:	f2 01       	movw	r30, r4
    43c6:	31 81       	ldd	r19, Z+1	; 0x01
    43c8:	23 17       	cp	r18, r19
    43ca:	09 f4       	brne	.+2      	; 0x43ce <_fpadd_parts+0x1a0>
    43cc:	4a c0       	rjmp	.+148    	; 0x4462 <_fpadd_parts+0x234>
    43ce:	22 23       	and	r18, r18
    43d0:	49 f0       	breq	.+18     	; 0x43e4 <_fpadd_parts+0x1b6>
    43d2:	a6 01       	movw	r20, r12
    43d4:	95 01       	movw	r18, r10
    43d6:	2e 19       	sub	r18, r14
    43d8:	3f 09       	sbc	r19, r15
    43da:	40 0b       	sbc	r20, r16
    43dc:	51 0b       	sbc	r21, r17
    43de:	79 01       	movw	r14, r18
    43e0:	8a 01       	movw	r16, r20
    43e2:	04 c0       	rjmp	.+8      	; 0x43ec <_fpadd_parts+0x1be>
    43e4:	ea 18       	sub	r14, r10
    43e6:	fb 08       	sbc	r15, r11
    43e8:	0c 09       	sbc	r16, r12
    43ea:	1d 09       	sbc	r17, r13
    43ec:	17 fd       	sbrc	r17, 7
    43ee:	0c c0       	rjmp	.+24     	; 0x4408 <_fpadd_parts+0x1da>
    43f0:	19 82       	std	Y+1, r1	; 0x01
    43f2:	9b 83       	std	Y+3, r25	; 0x03
    43f4:	8a 83       	std	Y+2, r24	; 0x02
    43f6:	ec 82       	std	Y+4, r14	; 0x04
    43f8:	fd 82       	std	Y+5, r15	; 0x05
    43fa:	0e 83       	std	Y+6, r16	; 0x06
    43fc:	1f 83       	std	Y+7, r17	; 0x07
    43fe:	8c 81       	ldd	r24, Y+4	; 0x04
    4400:	9d 81       	ldd	r25, Y+5	; 0x05
    4402:	ae 81       	ldd	r26, Y+6	; 0x06
    4404:	bf 81       	ldd	r27, Y+7	; 0x07
    4406:	1a c0       	rjmp	.+52     	; 0x443c <_fpadd_parts+0x20e>
    4408:	21 e0       	ldi	r18, 0x01	; 1
    440a:	29 83       	std	Y+1, r18	; 0x01
    440c:	9b 83       	std	Y+3, r25	; 0x03
    440e:	8a 83       	std	Y+2, r24	; 0x02
    4410:	88 27       	eor	r24, r24
    4412:	99 27       	eor	r25, r25
    4414:	dc 01       	movw	r26, r24
    4416:	8e 19       	sub	r24, r14
    4418:	9f 09       	sbc	r25, r15
    441a:	a0 0b       	sbc	r26, r16
    441c:	b1 0b       	sbc	r27, r17
    441e:	8c 83       	std	Y+4, r24	; 0x04
    4420:	9d 83       	std	Y+5, r25	; 0x05
    4422:	ae 83       	std	Y+6, r26	; 0x06
    4424:	bf 83       	std	Y+7, r27	; 0x07
    4426:	eb cf       	rjmp	.-42     	; 0x43fe <_fpadd_parts+0x1d0>
    4428:	88 0f       	add	r24, r24
    442a:	99 1f       	adc	r25, r25
    442c:	aa 1f       	adc	r26, r26
    442e:	bb 1f       	adc	r27, r27
    4430:	2a 81       	ldd	r18, Y+2	; 0x02
    4432:	3b 81       	ldd	r19, Y+3	; 0x03
    4434:	21 50       	subi	r18, 0x01	; 1
    4436:	30 40       	sbci	r19, 0x00	; 0
    4438:	3b 83       	std	Y+3, r19	; 0x03
    443a:	2a 83       	std	Y+2, r18	; 0x02
    443c:	9c 01       	movw	r18, r24
    443e:	ad 01       	movw	r20, r26
    4440:	21 50       	subi	r18, 0x01	; 1
    4442:	30 40       	sbci	r19, 0x00	; 0
    4444:	40 40       	sbci	r20, 0x00	; 0
    4446:	50 40       	sbci	r21, 0x00	; 0
    4448:	2f 3f       	cpi	r18, 0xFF	; 255
    444a:	6f ef       	ldi	r22, 0xFF	; 255
    444c:	36 07       	cpc	r19, r22
    444e:	6f ef       	ldi	r22, 0xFF	; 255
    4450:	46 07       	cpc	r20, r22
    4452:	6f e3       	ldi	r22, 0x3F	; 63
    4454:	56 07       	cpc	r21, r22
    4456:	40 f3       	brcs	.-48     	; 0x4428 <_fpadd_parts+0x1fa>
    4458:	8c 83       	std	Y+4, r24	; 0x04
    445a:	9d 83       	std	Y+5, r25	; 0x05
    445c:	ae 83       	std	Y+6, r26	; 0x06
    445e:	bf 83       	std	Y+7, r27	; 0x07
    4460:	0b c0       	rjmp	.+22     	; 0x4478 <_fpadd_parts+0x24a>
    4462:	29 83       	std	Y+1, r18	; 0x01
    4464:	9b 83       	std	Y+3, r25	; 0x03
    4466:	8a 83       	std	Y+2, r24	; 0x02
    4468:	ea 0c       	add	r14, r10
    446a:	fb 1c       	adc	r15, r11
    446c:	0c 1d       	adc	r16, r12
    446e:	1d 1d       	adc	r17, r13
    4470:	ec 82       	std	Y+4, r14	; 0x04
    4472:	fd 82       	std	Y+5, r15	; 0x05
    4474:	0e 83       	std	Y+6, r16	; 0x06
    4476:	1f 83       	std	Y+7, r17	; 0x07
    4478:	83 e0       	ldi	r24, 0x03	; 3
    447a:	88 83       	st	Y, r24
    447c:	2c 81       	ldd	r18, Y+4	; 0x04
    447e:	3d 81       	ldd	r19, Y+5	; 0x05
    4480:	4e 81       	ldd	r20, Y+6	; 0x06
    4482:	5f 81       	ldd	r21, Y+7	; 0x07
    4484:	57 ff       	sbrs	r21, 7
    4486:	1a c0       	rjmp	.+52     	; 0x44bc <_fpadd_parts+0x28e>
    4488:	c9 01       	movw	r24, r18
    448a:	aa 27       	eor	r26, r26
    448c:	97 fd       	sbrc	r25, 7
    448e:	a0 95       	com	r26
    4490:	ba 2f       	mov	r27, r26
    4492:	81 70       	andi	r24, 0x01	; 1
    4494:	90 70       	andi	r25, 0x00	; 0
    4496:	a0 70       	andi	r26, 0x00	; 0
    4498:	b0 70       	andi	r27, 0x00	; 0
    449a:	56 95       	lsr	r21
    449c:	47 95       	ror	r20
    449e:	37 95       	ror	r19
    44a0:	27 95       	ror	r18
    44a2:	82 2b       	or	r24, r18
    44a4:	93 2b       	or	r25, r19
    44a6:	a4 2b       	or	r26, r20
    44a8:	b5 2b       	or	r27, r21
    44aa:	8c 83       	std	Y+4, r24	; 0x04
    44ac:	9d 83       	std	Y+5, r25	; 0x05
    44ae:	ae 83       	std	Y+6, r26	; 0x06
    44b0:	bf 83       	std	Y+7, r27	; 0x07
    44b2:	8a 81       	ldd	r24, Y+2	; 0x02
    44b4:	9b 81       	ldd	r25, Y+3	; 0x03
    44b6:	01 96       	adiw	r24, 0x01	; 1
    44b8:	9b 83       	std	Y+3, r25	; 0x03
    44ba:	8a 83       	std	Y+2, r24	; 0x02
    44bc:	fe 01       	movw	r30, r28
    44be:	01 c0       	rjmp	.+2      	; 0x44c2 <_fpadd_parts+0x294>
    44c0:	f2 01       	movw	r30, r4
    44c2:	cf 01       	movw	r24, r30
    44c4:	cd b7       	in	r28, 0x3d	; 61
    44c6:	de b7       	in	r29, 0x3e	; 62
    44c8:	e0 e1       	ldi	r30, 0x10	; 16
    44ca:	0c 94 4f 28 	jmp	0x509e	; 0x509e <__epilogue_restores__+0x4>

000044ce <__subsf3>:
    44ce:	a0 e2       	ldi	r26, 0x20	; 32
    44d0:	b0 e0       	ldi	r27, 0x00	; 0
    44d2:	ed e6       	ldi	r30, 0x6D	; 109
    44d4:	f2 e2       	ldi	r31, 0x22	; 34
    44d6:	0c 94 3d 28 	jmp	0x507a	; 0x507a <__prologue_saves__+0x18>
    44da:	69 83       	std	Y+1, r22	; 0x01
    44dc:	7a 83       	std	Y+2, r23	; 0x02
    44de:	8b 83       	std	Y+3, r24	; 0x03
    44e0:	9c 83       	std	Y+4, r25	; 0x04
    44e2:	2d 83       	std	Y+5, r18	; 0x05
    44e4:	3e 83       	std	Y+6, r19	; 0x06
    44e6:	4f 83       	std	Y+7, r20	; 0x07
    44e8:	58 87       	std	Y+8, r21	; 0x08
    44ea:	e9 e0       	ldi	r30, 0x09	; 9
    44ec:	ee 2e       	mov	r14, r30
    44ee:	f1 2c       	mov	r15, r1
    44f0:	ec 0e       	add	r14, r28
    44f2:	fd 1e       	adc	r15, r29
    44f4:	ce 01       	movw	r24, r28
    44f6:	01 96       	adiw	r24, 0x01	; 1
    44f8:	b7 01       	movw	r22, r14
    44fa:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__unpack_f>
    44fe:	8e 01       	movw	r16, r28
    4500:	0f 5e       	subi	r16, 0xEF	; 239
    4502:	1f 4f       	sbci	r17, 0xFF	; 255
    4504:	ce 01       	movw	r24, r28
    4506:	05 96       	adiw	r24, 0x05	; 5
    4508:	b8 01       	movw	r22, r16
    450a:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__unpack_f>
    450e:	8a 89       	ldd	r24, Y+18	; 0x12
    4510:	91 e0       	ldi	r25, 0x01	; 1
    4512:	89 27       	eor	r24, r25
    4514:	8a 8b       	std	Y+18, r24	; 0x12
    4516:	c7 01       	movw	r24, r14
    4518:	b8 01       	movw	r22, r16
    451a:	ae 01       	movw	r20, r28
    451c:	47 5e       	subi	r20, 0xE7	; 231
    451e:	5f 4f       	sbci	r21, 0xFF	; 255
    4520:	0e 94 17 21 	call	0x422e	; 0x422e <_fpadd_parts>
    4524:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__pack_f>
    4528:	a0 96       	adiw	r28, 0x20	; 32
    452a:	e6 e0       	ldi	r30, 0x06	; 6
    452c:	0c 94 59 28 	jmp	0x50b2	; 0x50b2 <__epilogue_restores__+0x18>

00004530 <__addsf3>:
    4530:	a0 e2       	ldi	r26, 0x20	; 32
    4532:	b0 e0       	ldi	r27, 0x00	; 0
    4534:	ee e9       	ldi	r30, 0x9E	; 158
    4536:	f2 e2       	ldi	r31, 0x22	; 34
    4538:	0c 94 3d 28 	jmp	0x507a	; 0x507a <__prologue_saves__+0x18>
    453c:	69 83       	std	Y+1, r22	; 0x01
    453e:	7a 83       	std	Y+2, r23	; 0x02
    4540:	8b 83       	std	Y+3, r24	; 0x03
    4542:	9c 83       	std	Y+4, r25	; 0x04
    4544:	2d 83       	std	Y+5, r18	; 0x05
    4546:	3e 83       	std	Y+6, r19	; 0x06
    4548:	4f 83       	std	Y+7, r20	; 0x07
    454a:	58 87       	std	Y+8, r21	; 0x08
    454c:	f9 e0       	ldi	r31, 0x09	; 9
    454e:	ef 2e       	mov	r14, r31
    4550:	f1 2c       	mov	r15, r1
    4552:	ec 0e       	add	r14, r28
    4554:	fd 1e       	adc	r15, r29
    4556:	ce 01       	movw	r24, r28
    4558:	01 96       	adiw	r24, 0x01	; 1
    455a:	b7 01       	movw	r22, r14
    455c:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__unpack_f>
    4560:	8e 01       	movw	r16, r28
    4562:	0f 5e       	subi	r16, 0xEF	; 239
    4564:	1f 4f       	sbci	r17, 0xFF	; 255
    4566:	ce 01       	movw	r24, r28
    4568:	05 96       	adiw	r24, 0x05	; 5
    456a:	b8 01       	movw	r22, r16
    456c:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__unpack_f>
    4570:	c7 01       	movw	r24, r14
    4572:	b8 01       	movw	r22, r16
    4574:	ae 01       	movw	r20, r28
    4576:	47 5e       	subi	r20, 0xE7	; 231
    4578:	5f 4f       	sbci	r21, 0xFF	; 255
    457a:	0e 94 17 21 	call	0x422e	; 0x422e <_fpadd_parts>
    457e:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__pack_f>
    4582:	a0 96       	adiw	r28, 0x20	; 32
    4584:	e6 e0       	ldi	r30, 0x06	; 6
    4586:	0c 94 59 28 	jmp	0x50b2	; 0x50b2 <__epilogue_restores__+0x18>

0000458a <__mulsf3>:
    458a:	a0 e2       	ldi	r26, 0x20	; 32
    458c:	b0 e0       	ldi	r27, 0x00	; 0
    458e:	eb ec       	ldi	r30, 0xCB	; 203
    4590:	f2 e2       	ldi	r31, 0x22	; 34
    4592:	0c 94 31 28 	jmp	0x5062	; 0x5062 <__prologue_saves__>
    4596:	69 83       	std	Y+1, r22	; 0x01
    4598:	7a 83       	std	Y+2, r23	; 0x02
    459a:	8b 83       	std	Y+3, r24	; 0x03
    459c:	9c 83       	std	Y+4, r25	; 0x04
    459e:	2d 83       	std	Y+5, r18	; 0x05
    45a0:	3e 83       	std	Y+6, r19	; 0x06
    45a2:	4f 83       	std	Y+7, r20	; 0x07
    45a4:	58 87       	std	Y+8, r21	; 0x08
    45a6:	ce 01       	movw	r24, r28
    45a8:	01 96       	adiw	r24, 0x01	; 1
    45aa:	be 01       	movw	r22, r28
    45ac:	67 5f       	subi	r22, 0xF7	; 247
    45ae:	7f 4f       	sbci	r23, 0xFF	; 255
    45b0:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__unpack_f>
    45b4:	ce 01       	movw	r24, r28
    45b6:	05 96       	adiw	r24, 0x05	; 5
    45b8:	be 01       	movw	r22, r28
    45ba:	6f 5e       	subi	r22, 0xEF	; 239
    45bc:	7f 4f       	sbci	r23, 0xFF	; 255
    45be:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__unpack_f>
    45c2:	99 85       	ldd	r25, Y+9	; 0x09
    45c4:	92 30       	cpi	r25, 0x02	; 2
    45c6:	88 f0       	brcs	.+34     	; 0x45ea <__mulsf3+0x60>
    45c8:	89 89       	ldd	r24, Y+17	; 0x11
    45ca:	82 30       	cpi	r24, 0x02	; 2
    45cc:	c8 f0       	brcs	.+50     	; 0x4600 <__mulsf3+0x76>
    45ce:	94 30       	cpi	r25, 0x04	; 4
    45d0:	19 f4       	brne	.+6      	; 0x45d8 <__mulsf3+0x4e>
    45d2:	82 30       	cpi	r24, 0x02	; 2
    45d4:	51 f4       	brne	.+20     	; 0x45ea <__mulsf3+0x60>
    45d6:	04 c0       	rjmp	.+8      	; 0x45e0 <__mulsf3+0x56>
    45d8:	84 30       	cpi	r24, 0x04	; 4
    45da:	29 f4       	brne	.+10     	; 0x45e6 <__mulsf3+0x5c>
    45dc:	92 30       	cpi	r25, 0x02	; 2
    45de:	81 f4       	brne	.+32     	; 0x4600 <__mulsf3+0x76>
    45e0:	8b ec       	ldi	r24, 0xCB	; 203
    45e2:	91 e0       	ldi	r25, 0x01	; 1
    45e4:	c4 c0       	rjmp	.+392    	; 0x476e <__mulsf3+0x1e4>
    45e6:	92 30       	cpi	r25, 0x02	; 2
    45e8:	49 f4       	brne	.+18     	; 0x45fc <__mulsf3+0x72>
    45ea:	80 e0       	ldi	r24, 0x00	; 0
    45ec:	2a 85       	ldd	r18, Y+10	; 0x0a
    45ee:	9a 89       	ldd	r25, Y+18	; 0x12
    45f0:	29 13       	cpse	r18, r25
    45f2:	81 e0       	ldi	r24, 0x01	; 1
    45f4:	8a 87       	std	Y+10, r24	; 0x0a
    45f6:	ce 01       	movw	r24, r28
    45f8:	09 96       	adiw	r24, 0x09	; 9
    45fa:	b9 c0       	rjmp	.+370    	; 0x476e <__mulsf3+0x1e4>
    45fc:	82 30       	cpi	r24, 0x02	; 2
    45fe:	49 f4       	brne	.+18     	; 0x4612 <__mulsf3+0x88>
    4600:	80 e0       	ldi	r24, 0x00	; 0
    4602:	2a 85       	ldd	r18, Y+10	; 0x0a
    4604:	9a 89       	ldd	r25, Y+18	; 0x12
    4606:	29 13       	cpse	r18, r25
    4608:	81 e0       	ldi	r24, 0x01	; 1
    460a:	8a 8b       	std	Y+18, r24	; 0x12
    460c:	ce 01       	movw	r24, r28
    460e:	41 96       	adiw	r24, 0x11	; 17
    4610:	ae c0       	rjmp	.+348    	; 0x476e <__mulsf3+0x1e4>
    4612:	6d 84       	ldd	r6, Y+13	; 0x0d
    4614:	7e 84       	ldd	r7, Y+14	; 0x0e
    4616:	8f 84       	ldd	r8, Y+15	; 0x0f
    4618:	98 88       	ldd	r9, Y+16	; 0x10
    461a:	ad 88       	ldd	r10, Y+21	; 0x15
    461c:	be 88       	ldd	r11, Y+22	; 0x16
    461e:	cf 88       	ldd	r12, Y+23	; 0x17
    4620:	d8 8c       	ldd	r13, Y+24	; 0x18
    4622:	60 e0       	ldi	r22, 0x00	; 0
    4624:	70 e0       	ldi	r23, 0x00	; 0
    4626:	80 e0       	ldi	r24, 0x00	; 0
    4628:	90 e0       	ldi	r25, 0x00	; 0
    462a:	dc 01       	movw	r26, r24
    462c:	ee 24       	eor	r14, r14
    462e:	ff 24       	eor	r15, r15
    4630:	87 01       	movw	r16, r14
    4632:	20 e0       	ldi	r18, 0x00	; 0
    4634:	30 e0       	ldi	r19, 0x00	; 0
    4636:	a9 01       	movw	r20, r18
    4638:	f3 01       	movw	r30, r6
    463a:	e1 70       	andi	r30, 0x01	; 1
    463c:	f0 70       	andi	r31, 0x00	; 0
    463e:	30 97       	sbiw	r30, 0x00	; 0
    4640:	c9 f0       	breq	.+50     	; 0x4674 <__mulsf3+0xea>
    4642:	2a 0d       	add	r18, r10
    4644:	3b 1d       	adc	r19, r11
    4646:	4c 1d       	adc	r20, r12
    4648:	5d 1d       	adc	r21, r13
    464a:	8e 0d       	add	r24, r14
    464c:	9f 1d       	adc	r25, r15
    464e:	a0 1f       	adc	r26, r16
    4650:	b1 1f       	adc	r27, r17
    4652:	22 24       	eor	r2, r2
    4654:	33 24       	eor	r3, r3
    4656:	21 01       	movw	r4, r2
    4658:	2a 15       	cp	r18, r10
    465a:	3b 05       	cpc	r19, r11
    465c:	4c 05       	cpc	r20, r12
    465e:	5d 05       	cpc	r21, r13
    4660:	28 f4       	brcc	.+10     	; 0x466c <__mulsf3+0xe2>
    4662:	e1 e0       	ldi	r30, 0x01	; 1
    4664:	2e 2e       	mov	r2, r30
    4666:	31 2c       	mov	r3, r1
    4668:	41 2c       	mov	r4, r1
    466a:	51 2c       	mov	r5, r1
    466c:	82 0d       	add	r24, r2
    466e:	93 1d       	adc	r25, r3
    4670:	a4 1d       	adc	r26, r4
    4672:	b5 1d       	adc	r27, r5
    4674:	ee 0c       	add	r14, r14
    4676:	ff 1c       	adc	r15, r15
    4678:	00 1f       	adc	r16, r16
    467a:	11 1f       	adc	r17, r17
    467c:	d7 fe       	sbrs	r13, 7
    467e:	09 c0       	rjmp	.+18     	; 0x4692 <__mulsf3+0x108>
    4680:	e1 e0       	ldi	r30, 0x01	; 1
    4682:	2e 2e       	mov	r2, r30
    4684:	31 2c       	mov	r3, r1
    4686:	41 2c       	mov	r4, r1
    4688:	51 2c       	mov	r5, r1
    468a:	e2 28       	or	r14, r2
    468c:	f3 28       	or	r15, r3
    468e:	04 29       	or	r16, r4
    4690:	15 29       	or	r17, r5
    4692:	6f 5f       	subi	r22, 0xFF	; 255
    4694:	7f 4f       	sbci	r23, 0xFF	; 255
    4696:	60 32       	cpi	r22, 0x20	; 32
    4698:	71 05       	cpc	r23, r1
    469a:	49 f0       	breq	.+18     	; 0x46ae <__mulsf3+0x124>
    469c:	aa 0c       	add	r10, r10
    469e:	bb 1c       	adc	r11, r11
    46a0:	cc 1c       	adc	r12, r12
    46a2:	dd 1c       	adc	r13, r13
    46a4:	96 94       	lsr	r9
    46a6:	87 94       	ror	r8
    46a8:	77 94       	ror	r7
    46aa:	67 94       	ror	r6
    46ac:	c5 cf       	rjmp	.-118    	; 0x4638 <__mulsf3+0xae>
    46ae:	6b 89       	ldd	r22, Y+19	; 0x13
    46b0:	7c 89       	ldd	r23, Y+20	; 0x14
    46b2:	eb 85       	ldd	r30, Y+11	; 0x0b
    46b4:	fc 85       	ldd	r31, Y+12	; 0x0c
    46b6:	6e 0f       	add	r22, r30
    46b8:	7f 1f       	adc	r23, r31
    46ba:	6e 5f       	subi	r22, 0xFE	; 254
    46bc:	7f 4f       	sbci	r23, 0xFF	; 255
    46be:	7c 8f       	std	Y+28, r23	; 0x1c
    46c0:	6b 8f       	std	Y+27, r22	; 0x1b
    46c2:	1a 8e       	std	Y+26, r1	; 0x1a
    46c4:	7a 85       	ldd	r23, Y+10	; 0x0a
    46c6:	6a 89       	ldd	r22, Y+18	; 0x12
    46c8:	76 17       	cp	r23, r22
    46ca:	11 f0       	breq	.+4      	; 0x46d0 <__mulsf3+0x146>
    46cc:	61 e0       	ldi	r22, 0x01	; 1
    46ce:	6a 8f       	std	Y+26, r22	; 0x1a
    46d0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    46d2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    46d4:	10 c0       	rjmp	.+32     	; 0x46f6 <__mulsf3+0x16c>
    46d6:	fc 01       	movw	r30, r24
    46d8:	e1 70       	andi	r30, 0x01	; 1
    46da:	f0 70       	andi	r31, 0x00	; 0
    46dc:	30 97       	sbiw	r30, 0x00	; 0
    46de:	29 f0       	breq	.+10     	; 0x46ea <__mulsf3+0x160>
    46e0:	56 95       	lsr	r21
    46e2:	47 95       	ror	r20
    46e4:	37 95       	ror	r19
    46e6:	27 95       	ror	r18
    46e8:	50 68       	ori	r21, 0x80	; 128
    46ea:	b6 95       	lsr	r27
    46ec:	a7 95       	ror	r26
    46ee:	97 95       	ror	r25
    46f0:	87 95       	ror	r24
    46f2:	6f 5f       	subi	r22, 0xFF	; 255
    46f4:	7f 4f       	sbci	r23, 0xFF	; 255
    46f6:	b7 fd       	sbrc	r27, 7
    46f8:	ee cf       	rjmp	.-36     	; 0x46d6 <__mulsf3+0x14c>
    46fa:	0c c0       	rjmp	.+24     	; 0x4714 <__mulsf3+0x18a>
    46fc:	88 0f       	add	r24, r24
    46fe:	99 1f       	adc	r25, r25
    4700:	aa 1f       	adc	r26, r26
    4702:	bb 1f       	adc	r27, r27
    4704:	57 fd       	sbrc	r21, 7
    4706:	81 60       	ori	r24, 0x01	; 1
    4708:	22 0f       	add	r18, r18
    470a:	33 1f       	adc	r19, r19
    470c:	44 1f       	adc	r20, r20
    470e:	55 1f       	adc	r21, r21
    4710:	61 50       	subi	r22, 0x01	; 1
    4712:	70 40       	sbci	r23, 0x00	; 0
    4714:	80 30       	cpi	r24, 0x00	; 0
    4716:	e0 e0       	ldi	r30, 0x00	; 0
    4718:	9e 07       	cpc	r25, r30
    471a:	e0 e0       	ldi	r30, 0x00	; 0
    471c:	ae 07       	cpc	r26, r30
    471e:	e0 e4       	ldi	r30, 0x40	; 64
    4720:	be 07       	cpc	r27, r30
    4722:	60 f3       	brcs	.-40     	; 0x46fc <__mulsf3+0x172>
    4724:	6b 8f       	std	Y+27, r22	; 0x1b
    4726:	7c 8f       	std	Y+28, r23	; 0x1c
    4728:	6f e7       	ldi	r22, 0x7F	; 127
    472a:	e6 2e       	mov	r14, r22
    472c:	f1 2c       	mov	r15, r1
    472e:	01 2d       	mov	r16, r1
    4730:	11 2d       	mov	r17, r1
    4732:	e8 22       	and	r14, r24
    4734:	f9 22       	and	r15, r25
    4736:	0a 23       	and	r16, r26
    4738:	1b 23       	and	r17, r27
    473a:	60 e4       	ldi	r22, 0x40	; 64
    473c:	e6 16       	cp	r14, r22
    473e:	f1 04       	cpc	r15, r1
    4740:	01 05       	cpc	r16, r1
    4742:	11 05       	cpc	r17, r1
    4744:	61 f4       	brne	.+24     	; 0x475e <__mulsf3+0x1d4>
    4746:	87 fd       	sbrc	r24, 7
    4748:	0a c0       	rjmp	.+20     	; 0x475e <__mulsf3+0x1d4>
    474a:	21 15       	cp	r18, r1
    474c:	31 05       	cpc	r19, r1
    474e:	41 05       	cpc	r20, r1
    4750:	51 05       	cpc	r21, r1
    4752:	29 f0       	breq	.+10     	; 0x475e <__mulsf3+0x1d4>
    4754:	80 5c       	subi	r24, 0xC0	; 192
    4756:	9f 4f       	sbci	r25, 0xFF	; 255
    4758:	af 4f       	sbci	r26, 0xFF	; 255
    475a:	bf 4f       	sbci	r27, 0xFF	; 255
    475c:	80 78       	andi	r24, 0x80	; 128
    475e:	8d 8f       	std	Y+29, r24	; 0x1d
    4760:	9e 8f       	std	Y+30, r25	; 0x1e
    4762:	af 8f       	std	Y+31, r26	; 0x1f
    4764:	b8 a3       	std	Y+32, r27	; 0x20
    4766:	83 e0       	ldi	r24, 0x03	; 3
    4768:	89 8f       	std	Y+25, r24	; 0x19
    476a:	ce 01       	movw	r24, r28
    476c:	49 96       	adiw	r24, 0x19	; 25
    476e:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__pack_f>
    4772:	a0 96       	adiw	r28, 0x20	; 32
    4774:	e2 e1       	ldi	r30, 0x12	; 18
    4776:	0c 94 4d 28 	jmp	0x509a	; 0x509a <__epilogue_restores__>

0000477a <__divsf3>:
    477a:	a8 e1       	ldi	r26, 0x18	; 24
    477c:	b0 e0       	ldi	r27, 0x00	; 0
    477e:	e3 ec       	ldi	r30, 0xC3	; 195
    4780:	f3 e2       	ldi	r31, 0x23	; 35
    4782:	0c 94 39 28 	jmp	0x5072	; 0x5072 <__prologue_saves__+0x10>
    4786:	69 83       	std	Y+1, r22	; 0x01
    4788:	7a 83       	std	Y+2, r23	; 0x02
    478a:	8b 83       	std	Y+3, r24	; 0x03
    478c:	9c 83       	std	Y+4, r25	; 0x04
    478e:	2d 83       	std	Y+5, r18	; 0x05
    4790:	3e 83       	std	Y+6, r19	; 0x06
    4792:	4f 83       	std	Y+7, r20	; 0x07
    4794:	58 87       	std	Y+8, r21	; 0x08
    4796:	8e 01       	movw	r16, r28
    4798:	07 5f       	subi	r16, 0xF7	; 247
    479a:	1f 4f       	sbci	r17, 0xFF	; 255
    479c:	ce 01       	movw	r24, r28
    479e:	01 96       	adiw	r24, 0x01	; 1
    47a0:	b8 01       	movw	r22, r16
    47a2:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__unpack_f>
    47a6:	81 e1       	ldi	r24, 0x11	; 17
    47a8:	e8 2e       	mov	r14, r24
    47aa:	f1 2c       	mov	r15, r1
    47ac:	ec 0e       	add	r14, r28
    47ae:	fd 1e       	adc	r15, r29
    47b0:	ce 01       	movw	r24, r28
    47b2:	05 96       	adiw	r24, 0x05	; 5
    47b4:	b7 01       	movw	r22, r14
    47b6:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__unpack_f>
    47ba:	99 85       	ldd	r25, Y+9	; 0x09
    47bc:	92 30       	cpi	r25, 0x02	; 2
    47be:	08 f4       	brcc	.+2      	; 0x47c2 <__divsf3+0x48>
    47c0:	83 c0       	rjmp	.+262    	; 0x48c8 <__divsf3+0x14e>
    47c2:	89 89       	ldd	r24, Y+17	; 0x11
    47c4:	82 30       	cpi	r24, 0x02	; 2
    47c6:	10 f4       	brcc	.+4      	; 0x47cc <__divsf3+0x52>
    47c8:	87 01       	movw	r16, r14
    47ca:	7e c0       	rjmp	.+252    	; 0x48c8 <__divsf3+0x14e>
    47cc:	2a 85       	ldd	r18, Y+10	; 0x0a
    47ce:	3a 89       	ldd	r19, Y+18	; 0x12
    47d0:	23 27       	eor	r18, r19
    47d2:	2a 87       	std	Y+10, r18	; 0x0a
    47d4:	94 30       	cpi	r25, 0x04	; 4
    47d6:	11 f0       	breq	.+4      	; 0x47dc <__divsf3+0x62>
    47d8:	92 30       	cpi	r25, 0x02	; 2
    47da:	31 f4       	brne	.+12     	; 0x47e8 <__divsf3+0x6e>
    47dc:	98 17       	cp	r25, r24
    47de:	09 f0       	breq	.+2      	; 0x47e2 <__divsf3+0x68>
    47e0:	70 c0       	rjmp	.+224    	; 0x48c2 <__divsf3+0x148>
    47e2:	0b ec       	ldi	r16, 0xCB	; 203
    47e4:	11 e0       	ldi	r17, 0x01	; 1
    47e6:	70 c0       	rjmp	.+224    	; 0x48c8 <__divsf3+0x14e>
    47e8:	84 30       	cpi	r24, 0x04	; 4
    47ea:	39 f4       	brne	.+14     	; 0x47fa <__divsf3+0x80>
    47ec:	1d 86       	std	Y+13, r1	; 0x0d
    47ee:	1e 86       	std	Y+14, r1	; 0x0e
    47f0:	1f 86       	std	Y+15, r1	; 0x0f
    47f2:	18 8a       	std	Y+16, r1	; 0x10
    47f4:	1c 86       	std	Y+12, r1	; 0x0c
    47f6:	1b 86       	std	Y+11, r1	; 0x0b
    47f8:	67 c0       	rjmp	.+206    	; 0x48c8 <__divsf3+0x14e>
    47fa:	82 30       	cpi	r24, 0x02	; 2
    47fc:	19 f4       	brne	.+6      	; 0x4804 <__divsf3+0x8a>
    47fe:	84 e0       	ldi	r24, 0x04	; 4
    4800:	89 87       	std	Y+9, r24	; 0x09
    4802:	62 c0       	rjmp	.+196    	; 0x48c8 <__divsf3+0x14e>
    4804:	8b 85       	ldd	r24, Y+11	; 0x0b
    4806:	9c 85       	ldd	r25, Y+12	; 0x0c
    4808:	2b 89       	ldd	r18, Y+19	; 0x13
    480a:	3c 89       	ldd	r19, Y+20	; 0x14
    480c:	82 1b       	sub	r24, r18
    480e:	93 0b       	sbc	r25, r19
    4810:	9c 87       	std	Y+12, r25	; 0x0c
    4812:	8b 87       	std	Y+11, r24	; 0x0b
    4814:	2d 85       	ldd	r18, Y+13	; 0x0d
    4816:	3e 85       	ldd	r19, Y+14	; 0x0e
    4818:	4f 85       	ldd	r20, Y+15	; 0x0f
    481a:	58 89       	ldd	r21, Y+16	; 0x10
    481c:	ad 88       	ldd	r10, Y+21	; 0x15
    481e:	be 88       	ldd	r11, Y+22	; 0x16
    4820:	cf 88       	ldd	r12, Y+23	; 0x17
    4822:	d8 8c       	ldd	r13, Y+24	; 0x18
    4824:	2a 15       	cp	r18, r10
    4826:	3b 05       	cpc	r19, r11
    4828:	4c 05       	cpc	r20, r12
    482a:	5d 05       	cpc	r21, r13
    482c:	38 f4       	brcc	.+14     	; 0x483c <__divsf3+0xc2>
    482e:	22 0f       	add	r18, r18
    4830:	33 1f       	adc	r19, r19
    4832:	44 1f       	adc	r20, r20
    4834:	55 1f       	adc	r21, r21
    4836:	01 97       	sbiw	r24, 0x01	; 1
    4838:	9c 87       	std	Y+12, r25	; 0x0c
    483a:	8b 87       	std	Y+11, r24	; 0x0b
    483c:	60 e0       	ldi	r22, 0x00	; 0
    483e:	70 e0       	ldi	r23, 0x00	; 0
    4840:	e1 2c       	mov	r14, r1
    4842:	f1 2c       	mov	r15, r1
    4844:	01 2d       	mov	r16, r1
    4846:	a0 e4       	ldi	r26, 0x40	; 64
    4848:	1a 2f       	mov	r17, r26
    484a:	80 e0       	ldi	r24, 0x00	; 0
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	dc 01       	movw	r26, r24
    4850:	2a 15       	cp	r18, r10
    4852:	3b 05       	cpc	r19, r11
    4854:	4c 05       	cpc	r20, r12
    4856:	5d 05       	cpc	r21, r13
    4858:	40 f0       	brcs	.+16     	; 0x486a <__divsf3+0xf0>
    485a:	8e 29       	or	r24, r14
    485c:	9f 29       	or	r25, r15
    485e:	a0 2b       	or	r26, r16
    4860:	b1 2b       	or	r27, r17
    4862:	2a 19       	sub	r18, r10
    4864:	3b 09       	sbc	r19, r11
    4866:	4c 09       	sbc	r20, r12
    4868:	5d 09       	sbc	r21, r13
    486a:	16 95       	lsr	r17
    486c:	07 95       	ror	r16
    486e:	f7 94       	ror	r15
    4870:	e7 94       	ror	r14
    4872:	22 0f       	add	r18, r18
    4874:	33 1f       	adc	r19, r19
    4876:	44 1f       	adc	r20, r20
    4878:	55 1f       	adc	r21, r21
    487a:	6f 5f       	subi	r22, 0xFF	; 255
    487c:	7f 4f       	sbci	r23, 0xFF	; 255
    487e:	6f 31       	cpi	r22, 0x1F	; 31
    4880:	71 05       	cpc	r23, r1
    4882:	31 f7       	brne	.-52     	; 0x4850 <__divsf3+0xd6>
    4884:	6f e7       	ldi	r22, 0x7F	; 127
    4886:	e6 2e       	mov	r14, r22
    4888:	f1 2c       	mov	r15, r1
    488a:	01 2d       	mov	r16, r1
    488c:	11 2d       	mov	r17, r1
    488e:	e8 22       	and	r14, r24
    4890:	f9 22       	and	r15, r25
    4892:	0a 23       	and	r16, r26
    4894:	1b 23       	and	r17, r27
    4896:	60 e4       	ldi	r22, 0x40	; 64
    4898:	e6 16       	cp	r14, r22
    489a:	f1 04       	cpc	r15, r1
    489c:	01 05       	cpc	r16, r1
    489e:	11 05       	cpc	r17, r1
    48a0:	61 f4       	brne	.+24     	; 0x48ba <__divsf3+0x140>
    48a2:	87 fd       	sbrc	r24, 7
    48a4:	0a c0       	rjmp	.+20     	; 0x48ba <__divsf3+0x140>
    48a6:	21 15       	cp	r18, r1
    48a8:	31 05       	cpc	r19, r1
    48aa:	41 05       	cpc	r20, r1
    48ac:	51 05       	cpc	r21, r1
    48ae:	29 f0       	breq	.+10     	; 0x48ba <__divsf3+0x140>
    48b0:	80 5c       	subi	r24, 0xC0	; 192
    48b2:	9f 4f       	sbci	r25, 0xFF	; 255
    48b4:	af 4f       	sbci	r26, 0xFF	; 255
    48b6:	bf 4f       	sbci	r27, 0xFF	; 255
    48b8:	80 78       	andi	r24, 0x80	; 128
    48ba:	8d 87       	std	Y+13, r24	; 0x0d
    48bc:	9e 87       	std	Y+14, r25	; 0x0e
    48be:	af 87       	std	Y+15, r26	; 0x0f
    48c0:	b8 8b       	std	Y+16, r27	; 0x10
    48c2:	8e 01       	movw	r16, r28
    48c4:	07 5f       	subi	r16, 0xF7	; 247
    48c6:	1f 4f       	sbci	r17, 0xFF	; 255
    48c8:	c8 01       	movw	r24, r16
    48ca:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__pack_f>
    48ce:	68 96       	adiw	r28, 0x18	; 24
    48d0:	ea e0       	ldi	r30, 0x0A	; 10
    48d2:	0c 94 55 28 	jmp	0x50aa	; 0x50aa <__epilogue_restores__+0x10>

000048d6 <__gesf2>:
    48d6:	a8 e1       	ldi	r26, 0x18	; 24
    48d8:	b0 e0       	ldi	r27, 0x00	; 0
    48da:	e1 e7       	ldi	r30, 0x71	; 113
    48dc:	f4 e2       	ldi	r31, 0x24	; 36
    48de:	0c 94 3d 28 	jmp	0x507a	; 0x507a <__prologue_saves__+0x18>
    48e2:	69 83       	std	Y+1, r22	; 0x01
    48e4:	7a 83       	std	Y+2, r23	; 0x02
    48e6:	8b 83       	std	Y+3, r24	; 0x03
    48e8:	9c 83       	std	Y+4, r25	; 0x04
    48ea:	2d 83       	std	Y+5, r18	; 0x05
    48ec:	3e 83       	std	Y+6, r19	; 0x06
    48ee:	4f 83       	std	Y+7, r20	; 0x07
    48f0:	58 87       	std	Y+8, r21	; 0x08
    48f2:	89 e0       	ldi	r24, 0x09	; 9
    48f4:	e8 2e       	mov	r14, r24
    48f6:	f1 2c       	mov	r15, r1
    48f8:	ec 0e       	add	r14, r28
    48fa:	fd 1e       	adc	r15, r29
    48fc:	ce 01       	movw	r24, r28
    48fe:	01 96       	adiw	r24, 0x01	; 1
    4900:	b7 01       	movw	r22, r14
    4902:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__unpack_f>
    4906:	8e 01       	movw	r16, r28
    4908:	0f 5e       	subi	r16, 0xEF	; 239
    490a:	1f 4f       	sbci	r17, 0xFF	; 255
    490c:	ce 01       	movw	r24, r28
    490e:	05 96       	adiw	r24, 0x05	; 5
    4910:	b8 01       	movw	r22, r16
    4912:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__unpack_f>
    4916:	89 85       	ldd	r24, Y+9	; 0x09
    4918:	82 30       	cpi	r24, 0x02	; 2
    491a:	40 f0       	brcs	.+16     	; 0x492c <__gesf2+0x56>
    491c:	89 89       	ldd	r24, Y+17	; 0x11
    491e:	82 30       	cpi	r24, 0x02	; 2
    4920:	28 f0       	brcs	.+10     	; 0x492c <__gesf2+0x56>
    4922:	c7 01       	movw	r24, r14
    4924:	b8 01       	movw	r22, r16
    4926:	0e 94 89 27 	call	0x4f12	; 0x4f12 <__fpcmp_parts_f>
    492a:	01 c0       	rjmp	.+2      	; 0x492e <__gesf2+0x58>
    492c:	8f ef       	ldi	r24, 0xFF	; 255
    492e:	68 96       	adiw	r28, 0x18	; 24
    4930:	e6 e0       	ldi	r30, 0x06	; 6
    4932:	0c 94 59 28 	jmp	0x50b2	; 0x50b2 <__epilogue_restores__+0x18>

00004936 <__ltsf2>:
    4936:	a8 e1       	ldi	r26, 0x18	; 24
    4938:	b0 e0       	ldi	r27, 0x00	; 0
    493a:	e1 ea       	ldi	r30, 0xA1	; 161
    493c:	f4 e2       	ldi	r31, 0x24	; 36
    493e:	0c 94 3d 28 	jmp	0x507a	; 0x507a <__prologue_saves__+0x18>
    4942:	69 83       	std	Y+1, r22	; 0x01
    4944:	7a 83       	std	Y+2, r23	; 0x02
    4946:	8b 83       	std	Y+3, r24	; 0x03
    4948:	9c 83       	std	Y+4, r25	; 0x04
    494a:	2d 83       	std	Y+5, r18	; 0x05
    494c:	3e 83       	std	Y+6, r19	; 0x06
    494e:	4f 83       	std	Y+7, r20	; 0x07
    4950:	58 87       	std	Y+8, r21	; 0x08
    4952:	89 e0       	ldi	r24, 0x09	; 9
    4954:	e8 2e       	mov	r14, r24
    4956:	f1 2c       	mov	r15, r1
    4958:	ec 0e       	add	r14, r28
    495a:	fd 1e       	adc	r15, r29
    495c:	ce 01       	movw	r24, r28
    495e:	01 96       	adiw	r24, 0x01	; 1
    4960:	b7 01       	movw	r22, r14
    4962:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__unpack_f>
    4966:	8e 01       	movw	r16, r28
    4968:	0f 5e       	subi	r16, 0xEF	; 239
    496a:	1f 4f       	sbci	r17, 0xFF	; 255
    496c:	ce 01       	movw	r24, r28
    496e:	05 96       	adiw	r24, 0x05	; 5
    4970:	b8 01       	movw	r22, r16
    4972:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__unpack_f>
    4976:	89 85       	ldd	r24, Y+9	; 0x09
    4978:	82 30       	cpi	r24, 0x02	; 2
    497a:	40 f0       	brcs	.+16     	; 0x498c <__ltsf2+0x56>
    497c:	89 89       	ldd	r24, Y+17	; 0x11
    497e:	82 30       	cpi	r24, 0x02	; 2
    4980:	28 f0       	brcs	.+10     	; 0x498c <__ltsf2+0x56>
    4982:	c7 01       	movw	r24, r14
    4984:	b8 01       	movw	r22, r16
    4986:	0e 94 89 27 	call	0x4f12	; 0x4f12 <__fpcmp_parts_f>
    498a:	01 c0       	rjmp	.+2      	; 0x498e <__ltsf2+0x58>
    498c:	81 e0       	ldi	r24, 0x01	; 1
    498e:	68 96       	adiw	r28, 0x18	; 24
    4990:	e6 e0       	ldi	r30, 0x06	; 6
    4992:	0c 94 59 28 	jmp	0x50b2	; 0x50b2 <__epilogue_restores__+0x18>

00004996 <__floatsisf>:
    4996:	a8 e0       	ldi	r26, 0x08	; 8
    4998:	b0 e0       	ldi	r27, 0x00	; 0
    499a:	e1 ed       	ldi	r30, 0xD1	; 209
    499c:	f4 e2       	ldi	r31, 0x24	; 36
    499e:	0c 94 3b 28 	jmp	0x5076	; 0x5076 <__prologue_saves__+0x14>
    49a2:	23 e0       	ldi	r18, 0x03	; 3
    49a4:	29 83       	std	Y+1, r18	; 0x01
    49a6:	9b 01       	movw	r18, r22
    49a8:	ac 01       	movw	r20, r24
    49aa:	22 27       	eor	r18, r18
    49ac:	57 fd       	sbrc	r21, 7
    49ae:	23 95       	inc	r18
    49b0:	33 27       	eor	r19, r19
    49b2:	44 27       	eor	r20, r20
    49b4:	55 27       	eor	r21, r21
    49b6:	2a 83       	std	Y+2, r18	; 0x02
    49b8:	61 15       	cp	r22, r1
    49ba:	71 05       	cpc	r23, r1
    49bc:	81 05       	cpc	r24, r1
    49be:	91 05       	cpc	r25, r1
    49c0:	19 f4       	brne	.+6      	; 0x49c8 <__floatsisf+0x32>
    49c2:	82 e0       	ldi	r24, 0x02	; 2
    49c4:	89 83       	std	Y+1, r24	; 0x01
    49c6:	3c c0       	rjmp	.+120    	; 0x4a40 <__floatsisf+0xaa>
    49c8:	22 23       	and	r18, r18
    49ca:	a9 f0       	breq	.+42     	; 0x49f6 <__floatsisf+0x60>
    49cc:	60 30       	cpi	r22, 0x00	; 0
    49ce:	20 e0       	ldi	r18, 0x00	; 0
    49d0:	72 07       	cpc	r23, r18
    49d2:	20 e0       	ldi	r18, 0x00	; 0
    49d4:	82 07       	cpc	r24, r18
    49d6:	20 e8       	ldi	r18, 0x80	; 128
    49d8:	92 07       	cpc	r25, r18
    49da:	29 f4       	brne	.+10     	; 0x49e6 <__floatsisf+0x50>
    49dc:	60 e0       	ldi	r22, 0x00	; 0
    49de:	70 e0       	ldi	r23, 0x00	; 0
    49e0:	80 e0       	ldi	r24, 0x00	; 0
    49e2:	9f ec       	ldi	r25, 0xCF	; 207
    49e4:	31 c0       	rjmp	.+98     	; 0x4a48 <__floatsisf+0xb2>
    49e6:	ee 24       	eor	r14, r14
    49e8:	ff 24       	eor	r15, r15
    49ea:	87 01       	movw	r16, r14
    49ec:	e6 1a       	sub	r14, r22
    49ee:	f7 0a       	sbc	r15, r23
    49f0:	08 0b       	sbc	r16, r24
    49f2:	19 0b       	sbc	r17, r25
    49f4:	02 c0       	rjmp	.+4      	; 0x49fa <__floatsisf+0x64>
    49f6:	7b 01       	movw	r14, r22
    49f8:	8c 01       	movw	r16, r24
    49fa:	8e e1       	ldi	r24, 0x1E	; 30
    49fc:	c8 2e       	mov	r12, r24
    49fe:	d1 2c       	mov	r13, r1
    4a00:	dc 82       	std	Y+4, r13	; 0x04
    4a02:	cb 82       	std	Y+3, r12	; 0x03
    4a04:	ed 82       	std	Y+5, r14	; 0x05
    4a06:	fe 82       	std	Y+6, r15	; 0x06
    4a08:	0f 83       	std	Y+7, r16	; 0x07
    4a0a:	18 87       	std	Y+8, r17	; 0x08
    4a0c:	c8 01       	movw	r24, r16
    4a0e:	b7 01       	movw	r22, r14
    4a10:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <__clzsi2>
    4a14:	9c 01       	movw	r18, r24
    4a16:	21 50       	subi	r18, 0x01	; 1
    4a18:	30 40       	sbci	r19, 0x00	; 0
    4a1a:	12 16       	cp	r1, r18
    4a1c:	13 06       	cpc	r1, r19
    4a1e:	84 f4       	brge	.+32     	; 0x4a40 <__floatsisf+0xaa>
    4a20:	02 2e       	mov	r0, r18
    4a22:	04 c0       	rjmp	.+8      	; 0x4a2c <__floatsisf+0x96>
    4a24:	ee 0c       	add	r14, r14
    4a26:	ff 1c       	adc	r15, r15
    4a28:	00 1f       	adc	r16, r16
    4a2a:	11 1f       	adc	r17, r17
    4a2c:	0a 94       	dec	r0
    4a2e:	d2 f7       	brpl	.-12     	; 0x4a24 <__floatsisf+0x8e>
    4a30:	ed 82       	std	Y+5, r14	; 0x05
    4a32:	fe 82       	std	Y+6, r15	; 0x06
    4a34:	0f 83       	std	Y+7, r16	; 0x07
    4a36:	18 87       	std	Y+8, r17	; 0x08
    4a38:	c2 1a       	sub	r12, r18
    4a3a:	d3 0a       	sbc	r13, r19
    4a3c:	dc 82       	std	Y+4, r13	; 0x04
    4a3e:	cb 82       	std	Y+3, r12	; 0x03
    4a40:	ce 01       	movw	r24, r28
    4a42:	01 96       	adiw	r24, 0x01	; 1
    4a44:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__pack_f>
    4a48:	28 96       	adiw	r28, 0x08	; 8
    4a4a:	e8 e0       	ldi	r30, 0x08	; 8
    4a4c:	0c 94 57 28 	jmp	0x50ae	; 0x50ae <__epilogue_restores__+0x14>

00004a50 <__fixsfsi>:
    4a50:	ac e0       	ldi	r26, 0x0C	; 12
    4a52:	b0 e0       	ldi	r27, 0x00	; 0
    4a54:	ee e2       	ldi	r30, 0x2E	; 46
    4a56:	f5 e2       	ldi	r31, 0x25	; 37
    4a58:	0c 94 41 28 	jmp	0x5082	; 0x5082 <__prologue_saves__+0x20>
    4a5c:	69 83       	std	Y+1, r22	; 0x01
    4a5e:	7a 83       	std	Y+2, r23	; 0x02
    4a60:	8b 83       	std	Y+3, r24	; 0x03
    4a62:	9c 83       	std	Y+4, r25	; 0x04
    4a64:	ce 01       	movw	r24, r28
    4a66:	01 96       	adiw	r24, 0x01	; 1
    4a68:	be 01       	movw	r22, r28
    4a6a:	6b 5f       	subi	r22, 0xFB	; 251
    4a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a6e:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__unpack_f>
    4a72:	8d 81       	ldd	r24, Y+5	; 0x05
    4a74:	82 30       	cpi	r24, 0x02	; 2
    4a76:	61 f1       	breq	.+88     	; 0x4ad0 <__fixsfsi+0x80>
    4a78:	82 30       	cpi	r24, 0x02	; 2
    4a7a:	50 f1       	brcs	.+84     	; 0x4ad0 <__fixsfsi+0x80>
    4a7c:	84 30       	cpi	r24, 0x04	; 4
    4a7e:	21 f4       	brne	.+8      	; 0x4a88 <__fixsfsi+0x38>
    4a80:	8e 81       	ldd	r24, Y+6	; 0x06
    4a82:	88 23       	and	r24, r24
    4a84:	49 f1       	breq	.+82     	; 0x4ad8 <__fixsfsi+0x88>
    4a86:	2d c0       	rjmp	.+90     	; 0x4ae2 <__fixsfsi+0x92>
    4a88:	2f 81       	ldd	r18, Y+7	; 0x07
    4a8a:	38 85       	ldd	r19, Y+8	; 0x08
    4a8c:	37 fd       	sbrc	r19, 7
    4a8e:	20 c0       	rjmp	.+64     	; 0x4ad0 <__fixsfsi+0x80>
    4a90:	6e 81       	ldd	r22, Y+6	; 0x06
    4a92:	2f 31       	cpi	r18, 0x1F	; 31
    4a94:	31 05       	cpc	r19, r1
    4a96:	1c f0       	brlt	.+6      	; 0x4a9e <__fixsfsi+0x4e>
    4a98:	66 23       	and	r22, r22
    4a9a:	f1 f0       	breq	.+60     	; 0x4ad8 <__fixsfsi+0x88>
    4a9c:	22 c0       	rjmp	.+68     	; 0x4ae2 <__fixsfsi+0x92>
    4a9e:	8e e1       	ldi	r24, 0x1E	; 30
    4aa0:	90 e0       	ldi	r25, 0x00	; 0
    4aa2:	82 1b       	sub	r24, r18
    4aa4:	93 0b       	sbc	r25, r19
    4aa6:	29 85       	ldd	r18, Y+9	; 0x09
    4aa8:	3a 85       	ldd	r19, Y+10	; 0x0a
    4aaa:	4b 85       	ldd	r20, Y+11	; 0x0b
    4aac:	5c 85       	ldd	r21, Y+12	; 0x0c
    4aae:	04 c0       	rjmp	.+8      	; 0x4ab8 <__fixsfsi+0x68>
    4ab0:	56 95       	lsr	r21
    4ab2:	47 95       	ror	r20
    4ab4:	37 95       	ror	r19
    4ab6:	27 95       	ror	r18
    4ab8:	8a 95       	dec	r24
    4aba:	d2 f7       	brpl	.-12     	; 0x4ab0 <__fixsfsi+0x60>
    4abc:	66 23       	and	r22, r22
    4abe:	a9 f0       	breq	.+42     	; 0x4aea <__fixsfsi+0x9a>
    4ac0:	50 95       	com	r21
    4ac2:	40 95       	com	r20
    4ac4:	30 95       	com	r19
    4ac6:	21 95       	neg	r18
    4ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    4aca:	4f 4f       	sbci	r20, 0xFF	; 255
    4acc:	5f 4f       	sbci	r21, 0xFF	; 255
    4ace:	0d c0       	rjmp	.+26     	; 0x4aea <__fixsfsi+0x9a>
    4ad0:	20 e0       	ldi	r18, 0x00	; 0
    4ad2:	30 e0       	ldi	r19, 0x00	; 0
    4ad4:	a9 01       	movw	r20, r18
    4ad6:	09 c0       	rjmp	.+18     	; 0x4aea <__fixsfsi+0x9a>
    4ad8:	2f ef       	ldi	r18, 0xFF	; 255
    4ada:	3f ef       	ldi	r19, 0xFF	; 255
    4adc:	4f ef       	ldi	r20, 0xFF	; 255
    4ade:	5f e7       	ldi	r21, 0x7F	; 127
    4ae0:	04 c0       	rjmp	.+8      	; 0x4aea <__fixsfsi+0x9a>
    4ae2:	20 e0       	ldi	r18, 0x00	; 0
    4ae4:	30 e0       	ldi	r19, 0x00	; 0
    4ae6:	40 e0       	ldi	r20, 0x00	; 0
    4ae8:	50 e8       	ldi	r21, 0x80	; 128
    4aea:	b9 01       	movw	r22, r18
    4aec:	ca 01       	movw	r24, r20
    4aee:	2c 96       	adiw	r28, 0x0c	; 12
    4af0:	e2 e0       	ldi	r30, 0x02	; 2
    4af2:	0c 94 5d 28 	jmp	0x50ba	; 0x50ba <__epilogue_restores__+0x20>

00004af6 <__floatunsisf>:
    4af6:	a8 e0       	ldi	r26, 0x08	; 8
    4af8:	b0 e0       	ldi	r27, 0x00	; 0
    4afa:	e1 e8       	ldi	r30, 0x81	; 129
    4afc:	f5 e2       	ldi	r31, 0x25	; 37
    4afe:	0c 94 3b 28 	jmp	0x5076	; 0x5076 <__prologue_saves__+0x14>
    4b02:	7b 01       	movw	r14, r22
    4b04:	8c 01       	movw	r16, r24
    4b06:	1a 82       	std	Y+2, r1	; 0x02
    4b08:	61 15       	cp	r22, r1
    4b0a:	71 05       	cpc	r23, r1
    4b0c:	81 05       	cpc	r24, r1
    4b0e:	91 05       	cpc	r25, r1
    4b10:	19 f4       	brne	.+6      	; 0x4b18 <__floatunsisf+0x22>
    4b12:	82 e0       	ldi	r24, 0x02	; 2
    4b14:	89 83       	std	Y+1, r24	; 0x01
    4b16:	5f c0       	rjmp	.+190    	; 0x4bd6 <__floatunsisf+0xe0>
    4b18:	83 e0       	ldi	r24, 0x03	; 3
    4b1a:	89 83       	std	Y+1, r24	; 0x01
    4b1c:	8e e1       	ldi	r24, 0x1E	; 30
    4b1e:	c8 2e       	mov	r12, r24
    4b20:	d1 2c       	mov	r13, r1
    4b22:	dc 82       	std	Y+4, r13	; 0x04
    4b24:	cb 82       	std	Y+3, r12	; 0x03
    4b26:	ed 82       	std	Y+5, r14	; 0x05
    4b28:	fe 82       	std	Y+6, r15	; 0x06
    4b2a:	0f 83       	std	Y+7, r16	; 0x07
    4b2c:	18 87       	std	Y+8, r17	; 0x08
    4b2e:	c8 01       	movw	r24, r16
    4b30:	b7 01       	movw	r22, r14
    4b32:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <__clzsi2>
    4b36:	9c 01       	movw	r18, r24
    4b38:	21 50       	subi	r18, 0x01	; 1
    4b3a:	30 40       	sbci	r19, 0x00	; 0
    4b3c:	37 ff       	sbrs	r19, 7
    4b3e:	38 c0       	rjmp	.+112    	; 0x4bb0 <__floatunsisf+0xba>
    4b40:	ee 27       	eor	r30, r30
    4b42:	ff 27       	eor	r31, r31
    4b44:	e2 1b       	sub	r30, r18
    4b46:	f3 0b       	sbc	r31, r19
    4b48:	40 e0       	ldi	r20, 0x00	; 0
    4b4a:	50 e0       	ldi	r21, 0x00	; 0
    4b4c:	ba 01       	movw	r22, r20
    4b4e:	81 e0       	ldi	r24, 0x01	; 1
    4b50:	90 e0       	ldi	r25, 0x00	; 0
    4b52:	a0 e0       	ldi	r26, 0x00	; 0
    4b54:	b0 e0       	ldi	r27, 0x00	; 0
    4b56:	0e 2e       	mov	r0, r30
    4b58:	04 c0       	rjmp	.+8      	; 0x4b62 <__floatunsisf+0x6c>
    4b5a:	88 0f       	add	r24, r24
    4b5c:	99 1f       	adc	r25, r25
    4b5e:	aa 1f       	adc	r26, r26
    4b60:	bb 1f       	adc	r27, r27
    4b62:	0a 94       	dec	r0
    4b64:	d2 f7       	brpl	.-12     	; 0x4b5a <__floatunsisf+0x64>
    4b66:	01 97       	sbiw	r24, 0x01	; 1
    4b68:	a1 09       	sbc	r26, r1
    4b6a:	b1 09       	sbc	r27, r1
    4b6c:	8e 21       	and	r24, r14
    4b6e:	9f 21       	and	r25, r15
    4b70:	a0 23       	and	r26, r16
    4b72:	b1 23       	and	r27, r17
    4b74:	00 97       	sbiw	r24, 0x00	; 0
    4b76:	a1 05       	cpc	r26, r1
    4b78:	b1 05       	cpc	r27, r1
    4b7a:	21 f0       	breq	.+8      	; 0x4b84 <__floatunsisf+0x8e>
    4b7c:	41 e0       	ldi	r20, 0x01	; 1
    4b7e:	50 e0       	ldi	r21, 0x00	; 0
    4b80:	60 e0       	ldi	r22, 0x00	; 0
    4b82:	70 e0       	ldi	r23, 0x00	; 0
    4b84:	04 c0       	rjmp	.+8      	; 0x4b8e <__floatunsisf+0x98>
    4b86:	16 95       	lsr	r17
    4b88:	07 95       	ror	r16
    4b8a:	f7 94       	ror	r15
    4b8c:	e7 94       	ror	r14
    4b8e:	ea 95       	dec	r30
    4b90:	d2 f7       	brpl	.-12     	; 0x4b86 <__floatunsisf+0x90>
    4b92:	e4 2a       	or	r14, r20
    4b94:	f5 2a       	or	r15, r21
    4b96:	06 2b       	or	r16, r22
    4b98:	17 2b       	or	r17, r23
    4b9a:	ed 82       	std	Y+5, r14	; 0x05
    4b9c:	fe 82       	std	Y+6, r15	; 0x06
    4b9e:	0f 83       	std	Y+7, r16	; 0x07
    4ba0:	18 87       	std	Y+8, r17	; 0x08
    4ba2:	8e e1       	ldi	r24, 0x1E	; 30
    4ba4:	90 e0       	ldi	r25, 0x00	; 0
    4ba6:	82 1b       	sub	r24, r18
    4ba8:	93 0b       	sbc	r25, r19
    4baa:	9c 83       	std	Y+4, r25	; 0x04
    4bac:	8b 83       	std	Y+3, r24	; 0x03
    4bae:	13 c0       	rjmp	.+38     	; 0x4bd6 <__floatunsisf+0xe0>
    4bb0:	21 15       	cp	r18, r1
    4bb2:	31 05       	cpc	r19, r1
    4bb4:	81 f0       	breq	.+32     	; 0x4bd6 <__floatunsisf+0xe0>
    4bb6:	02 2e       	mov	r0, r18
    4bb8:	04 c0       	rjmp	.+8      	; 0x4bc2 <__floatunsisf+0xcc>
    4bba:	ee 0c       	add	r14, r14
    4bbc:	ff 1c       	adc	r15, r15
    4bbe:	00 1f       	adc	r16, r16
    4bc0:	11 1f       	adc	r17, r17
    4bc2:	0a 94       	dec	r0
    4bc4:	d2 f7       	brpl	.-12     	; 0x4bba <__floatunsisf+0xc4>
    4bc6:	ed 82       	std	Y+5, r14	; 0x05
    4bc8:	fe 82       	std	Y+6, r15	; 0x06
    4bca:	0f 83       	std	Y+7, r16	; 0x07
    4bcc:	18 87       	std	Y+8, r17	; 0x08
    4bce:	c2 1a       	sub	r12, r18
    4bd0:	d3 0a       	sbc	r13, r19
    4bd2:	dc 82       	std	Y+4, r13	; 0x04
    4bd4:	cb 82       	std	Y+3, r12	; 0x03
    4bd6:	ce 01       	movw	r24, r28
    4bd8:	01 96       	adiw	r24, 0x01	; 1
    4bda:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__pack_f>
    4bde:	28 96       	adiw	r28, 0x08	; 8
    4be0:	e8 e0       	ldi	r30, 0x08	; 8
    4be2:	0c 94 57 28 	jmp	0x50ae	; 0x50ae <__epilogue_restores__+0x14>

00004be6 <__clzsi2>:
    4be6:	af 92       	push	r10
    4be8:	bf 92       	push	r11
    4bea:	cf 92       	push	r12
    4bec:	df 92       	push	r13
    4bee:	ef 92       	push	r14
    4bf0:	ff 92       	push	r15
    4bf2:	0f 93       	push	r16
    4bf4:	1f 93       	push	r17
    4bf6:	7b 01       	movw	r14, r22
    4bf8:	8c 01       	movw	r16, r24
    4bfa:	80 e0       	ldi	r24, 0x00	; 0
    4bfc:	e8 16       	cp	r14, r24
    4bfe:	80 e0       	ldi	r24, 0x00	; 0
    4c00:	f8 06       	cpc	r15, r24
    4c02:	81 e0       	ldi	r24, 0x01	; 1
    4c04:	08 07       	cpc	r16, r24
    4c06:	80 e0       	ldi	r24, 0x00	; 0
    4c08:	18 07       	cpc	r17, r24
    4c0a:	80 f4       	brcc	.+32     	; 0x4c2c <__clzsi2+0x46>
    4c0c:	8f ef       	ldi	r24, 0xFF	; 255
    4c0e:	e8 16       	cp	r14, r24
    4c10:	f1 04       	cpc	r15, r1
    4c12:	01 05       	cpc	r16, r1
    4c14:	11 05       	cpc	r17, r1
    4c16:	31 f0       	breq	.+12     	; 0x4c24 <__clzsi2+0x3e>
    4c18:	28 f0       	brcs	.+10     	; 0x4c24 <__clzsi2+0x3e>
    4c1a:	88 e0       	ldi	r24, 0x08	; 8
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	a0 e0       	ldi	r26, 0x00	; 0
    4c20:	b0 e0       	ldi	r27, 0x00	; 0
    4c22:	16 c0       	rjmp	.+44     	; 0x4c50 <__clzsi2+0x6a>
    4c24:	80 e0       	ldi	r24, 0x00	; 0
    4c26:	90 e0       	ldi	r25, 0x00	; 0
    4c28:	dc 01       	movw	r26, r24
    4c2a:	12 c0       	rjmp	.+36     	; 0x4c50 <__clzsi2+0x6a>
    4c2c:	80 e0       	ldi	r24, 0x00	; 0
    4c2e:	e8 16       	cp	r14, r24
    4c30:	80 e0       	ldi	r24, 0x00	; 0
    4c32:	f8 06       	cpc	r15, r24
    4c34:	80 e0       	ldi	r24, 0x00	; 0
    4c36:	08 07       	cpc	r16, r24
    4c38:	81 e0       	ldi	r24, 0x01	; 1
    4c3a:	18 07       	cpc	r17, r24
    4c3c:	28 f0       	brcs	.+10     	; 0x4c48 <__clzsi2+0x62>
    4c3e:	88 e1       	ldi	r24, 0x18	; 24
    4c40:	90 e0       	ldi	r25, 0x00	; 0
    4c42:	a0 e0       	ldi	r26, 0x00	; 0
    4c44:	b0 e0       	ldi	r27, 0x00	; 0
    4c46:	04 c0       	rjmp	.+8      	; 0x4c50 <__clzsi2+0x6a>
    4c48:	80 e1       	ldi	r24, 0x10	; 16
    4c4a:	90 e0       	ldi	r25, 0x00	; 0
    4c4c:	a0 e0       	ldi	r26, 0x00	; 0
    4c4e:	b0 e0       	ldi	r27, 0x00	; 0
    4c50:	20 e2       	ldi	r18, 0x20	; 32
    4c52:	30 e0       	ldi	r19, 0x00	; 0
    4c54:	40 e0       	ldi	r20, 0x00	; 0
    4c56:	50 e0       	ldi	r21, 0x00	; 0
    4c58:	28 1b       	sub	r18, r24
    4c5a:	39 0b       	sbc	r19, r25
    4c5c:	4a 0b       	sbc	r20, r26
    4c5e:	5b 0b       	sbc	r21, r27
    4c60:	57 01       	movw	r10, r14
    4c62:	68 01       	movw	r12, r16
    4c64:	04 c0       	rjmp	.+8      	; 0x4c6e <__clzsi2+0x88>
    4c66:	d6 94       	lsr	r13
    4c68:	c7 94       	ror	r12
    4c6a:	b7 94       	ror	r11
    4c6c:	a7 94       	ror	r10
    4c6e:	8a 95       	dec	r24
    4c70:	d2 f7       	brpl	.-12     	; 0x4c66 <__clzsi2+0x80>
    4c72:	f5 01       	movw	r30, r10
    4c74:	ed 52       	subi	r30, 0x2D	; 45
    4c76:	fe 4f       	sbci	r31, 0xFE	; 254
    4c78:	80 81       	ld	r24, Z
    4c7a:	28 1b       	sub	r18, r24
    4c7c:	31 09       	sbc	r19, r1
    4c7e:	41 09       	sbc	r20, r1
    4c80:	51 09       	sbc	r21, r1
    4c82:	c9 01       	movw	r24, r18
    4c84:	1f 91       	pop	r17
    4c86:	0f 91       	pop	r16
    4c88:	ff 90       	pop	r15
    4c8a:	ef 90       	pop	r14
    4c8c:	df 90       	pop	r13
    4c8e:	cf 90       	pop	r12
    4c90:	bf 90       	pop	r11
    4c92:	af 90       	pop	r10
    4c94:	08 95       	ret

00004c96 <__pack_f>:
    4c96:	cf 92       	push	r12
    4c98:	df 92       	push	r13
    4c9a:	ef 92       	push	r14
    4c9c:	ff 92       	push	r15
    4c9e:	0f 93       	push	r16
    4ca0:	1f 93       	push	r17
    4ca2:	fc 01       	movw	r30, r24
    4ca4:	24 81       	ldd	r18, Z+4	; 0x04
    4ca6:	35 81       	ldd	r19, Z+5	; 0x05
    4ca8:	46 81       	ldd	r20, Z+6	; 0x06
    4caa:	57 81       	ldd	r21, Z+7	; 0x07
    4cac:	01 81       	ldd	r16, Z+1	; 0x01
    4cae:	80 81       	ld	r24, Z
    4cb0:	82 30       	cpi	r24, 0x02	; 2
    4cb2:	20 f4       	brcc	.+8      	; 0x4cbc <__pack_f+0x26>
    4cb4:	40 61       	ori	r20, 0x10	; 16
    4cb6:	8f ef       	ldi	r24, 0xFF	; 255
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	a2 c0       	rjmp	.+324    	; 0x4e00 <__pack_f+0x16a>
    4cbc:	84 30       	cpi	r24, 0x04	; 4
    4cbe:	09 f4       	brne	.+2      	; 0x4cc2 <__pack_f+0x2c>
    4cc0:	9a c0       	rjmp	.+308    	; 0x4df6 <__pack_f+0x160>
    4cc2:	82 30       	cpi	r24, 0x02	; 2
    4cc4:	19 f4       	brne	.+6      	; 0x4ccc <__pack_f+0x36>
    4cc6:	80 e0       	ldi	r24, 0x00	; 0
    4cc8:	90 e0       	ldi	r25, 0x00	; 0
    4cca:	97 c0       	rjmp	.+302    	; 0x4dfa <__pack_f+0x164>
    4ccc:	21 15       	cp	r18, r1
    4cce:	31 05       	cpc	r19, r1
    4cd0:	41 05       	cpc	r20, r1
    4cd2:	51 05       	cpc	r21, r1
    4cd4:	19 f4       	brne	.+6      	; 0x4cdc <__pack_f+0x46>
    4cd6:	80 e0       	ldi	r24, 0x00	; 0
    4cd8:	90 e0       	ldi	r25, 0x00	; 0
    4cda:	92 c0       	rjmp	.+292    	; 0x4e00 <__pack_f+0x16a>
    4cdc:	82 81       	ldd	r24, Z+2	; 0x02
    4cde:	93 81       	ldd	r25, Z+3	; 0x03
    4ce0:	6f ef       	ldi	r22, 0xFF	; 255
    4ce2:	82 38       	cpi	r24, 0x82	; 130
    4ce4:	96 07       	cpc	r25, r22
    4ce6:	0c f0       	brlt	.+2      	; 0x4cea <__pack_f+0x54>
    4ce8:	58 c0       	rjmp	.+176    	; 0x4d9a <__pack_f+0x104>
    4cea:	62 e8       	ldi	r22, 0x82	; 130
    4cec:	7f ef       	ldi	r23, 0xFF	; 255
    4cee:	68 1b       	sub	r22, r24
    4cf0:	79 0b       	sbc	r23, r25
    4cf2:	6a 31       	cpi	r22, 0x1A	; 26
    4cf4:	71 05       	cpc	r23, r1
    4cf6:	24 f0       	brlt	.+8      	; 0x4d00 <__pack_f+0x6a>
    4cf8:	20 e0       	ldi	r18, 0x00	; 0
    4cfa:	30 e0       	ldi	r19, 0x00	; 0
    4cfc:	a9 01       	movw	r20, r18
    4cfe:	2a c0       	rjmp	.+84     	; 0x4d54 <__pack_f+0xbe>
    4d00:	69 01       	movw	r12, r18
    4d02:	7a 01       	movw	r14, r20
    4d04:	06 2e       	mov	r0, r22
    4d06:	04 c0       	rjmp	.+8      	; 0x4d10 <__pack_f+0x7a>
    4d08:	f6 94       	lsr	r15
    4d0a:	e7 94       	ror	r14
    4d0c:	d7 94       	ror	r13
    4d0e:	c7 94       	ror	r12
    4d10:	0a 94       	dec	r0
    4d12:	d2 f7       	brpl	.-12     	; 0x4d08 <__pack_f+0x72>
    4d14:	81 e0       	ldi	r24, 0x01	; 1
    4d16:	90 e0       	ldi	r25, 0x00	; 0
    4d18:	a0 e0       	ldi	r26, 0x00	; 0
    4d1a:	b0 e0       	ldi	r27, 0x00	; 0
    4d1c:	04 c0       	rjmp	.+8      	; 0x4d26 <__pack_f+0x90>
    4d1e:	88 0f       	add	r24, r24
    4d20:	99 1f       	adc	r25, r25
    4d22:	aa 1f       	adc	r26, r26
    4d24:	bb 1f       	adc	r27, r27
    4d26:	6a 95       	dec	r22
    4d28:	d2 f7       	brpl	.-12     	; 0x4d1e <__pack_f+0x88>
    4d2a:	01 97       	sbiw	r24, 0x01	; 1
    4d2c:	a1 09       	sbc	r26, r1
    4d2e:	b1 09       	sbc	r27, r1
    4d30:	82 23       	and	r24, r18
    4d32:	93 23       	and	r25, r19
    4d34:	a4 23       	and	r26, r20
    4d36:	b5 23       	and	r27, r21
    4d38:	00 97       	sbiw	r24, 0x00	; 0
    4d3a:	a1 05       	cpc	r26, r1
    4d3c:	b1 05       	cpc	r27, r1
    4d3e:	21 f0       	breq	.+8      	; 0x4d48 <__pack_f+0xb2>
    4d40:	81 e0       	ldi	r24, 0x01	; 1
    4d42:	90 e0       	ldi	r25, 0x00	; 0
    4d44:	a0 e0       	ldi	r26, 0x00	; 0
    4d46:	b0 e0       	ldi	r27, 0x00	; 0
    4d48:	9c 01       	movw	r18, r24
    4d4a:	ad 01       	movw	r20, r26
    4d4c:	2c 29       	or	r18, r12
    4d4e:	3d 29       	or	r19, r13
    4d50:	4e 29       	or	r20, r14
    4d52:	5f 29       	or	r21, r15
    4d54:	da 01       	movw	r26, r20
    4d56:	c9 01       	movw	r24, r18
    4d58:	8f 77       	andi	r24, 0x7F	; 127
    4d5a:	90 70       	andi	r25, 0x00	; 0
    4d5c:	a0 70       	andi	r26, 0x00	; 0
    4d5e:	b0 70       	andi	r27, 0x00	; 0
    4d60:	80 34       	cpi	r24, 0x40	; 64
    4d62:	91 05       	cpc	r25, r1
    4d64:	a1 05       	cpc	r26, r1
    4d66:	b1 05       	cpc	r27, r1
    4d68:	39 f4       	brne	.+14     	; 0x4d78 <__pack_f+0xe2>
    4d6a:	27 ff       	sbrs	r18, 7
    4d6c:	09 c0       	rjmp	.+18     	; 0x4d80 <__pack_f+0xea>
    4d6e:	20 5c       	subi	r18, 0xC0	; 192
    4d70:	3f 4f       	sbci	r19, 0xFF	; 255
    4d72:	4f 4f       	sbci	r20, 0xFF	; 255
    4d74:	5f 4f       	sbci	r21, 0xFF	; 255
    4d76:	04 c0       	rjmp	.+8      	; 0x4d80 <__pack_f+0xea>
    4d78:	21 5c       	subi	r18, 0xC1	; 193
    4d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d7c:	4f 4f       	sbci	r20, 0xFF	; 255
    4d7e:	5f 4f       	sbci	r21, 0xFF	; 255
    4d80:	80 e0       	ldi	r24, 0x00	; 0
    4d82:	90 e0       	ldi	r25, 0x00	; 0
    4d84:	20 30       	cpi	r18, 0x00	; 0
    4d86:	60 e0       	ldi	r22, 0x00	; 0
    4d88:	36 07       	cpc	r19, r22
    4d8a:	60 e0       	ldi	r22, 0x00	; 0
    4d8c:	46 07       	cpc	r20, r22
    4d8e:	60 e4       	ldi	r22, 0x40	; 64
    4d90:	56 07       	cpc	r21, r22
    4d92:	48 f1       	brcs	.+82     	; 0x4de6 <__pack_f+0x150>
    4d94:	81 e0       	ldi	r24, 0x01	; 1
    4d96:	90 e0       	ldi	r25, 0x00	; 0
    4d98:	26 c0       	rjmp	.+76     	; 0x4de6 <__pack_f+0x150>
    4d9a:	80 38       	cpi	r24, 0x80	; 128
    4d9c:	91 05       	cpc	r25, r1
    4d9e:	5c f5       	brge	.+86     	; 0x4df6 <__pack_f+0x160>
    4da0:	81 58       	subi	r24, 0x81	; 129
    4da2:	9f 4f       	sbci	r25, 0xFF	; 255
    4da4:	7f e7       	ldi	r23, 0x7F	; 127
    4da6:	c7 2e       	mov	r12, r23
    4da8:	d1 2c       	mov	r13, r1
    4daa:	e1 2c       	mov	r14, r1
    4dac:	f1 2c       	mov	r15, r1
    4dae:	c2 22       	and	r12, r18
    4db0:	d3 22       	and	r13, r19
    4db2:	e4 22       	and	r14, r20
    4db4:	f5 22       	and	r15, r21
    4db6:	60 e4       	ldi	r22, 0x40	; 64
    4db8:	c6 16       	cp	r12, r22
    4dba:	d1 04       	cpc	r13, r1
    4dbc:	e1 04       	cpc	r14, r1
    4dbe:	f1 04       	cpc	r15, r1
    4dc0:	39 f4       	brne	.+14     	; 0x4dd0 <__pack_f+0x13a>
    4dc2:	27 ff       	sbrs	r18, 7
    4dc4:	09 c0       	rjmp	.+18     	; 0x4dd8 <__pack_f+0x142>
    4dc6:	20 5c       	subi	r18, 0xC0	; 192
    4dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    4dca:	4f 4f       	sbci	r20, 0xFF	; 255
    4dcc:	5f 4f       	sbci	r21, 0xFF	; 255
    4dce:	04 c0       	rjmp	.+8      	; 0x4dd8 <__pack_f+0x142>
    4dd0:	21 5c       	subi	r18, 0xC1	; 193
    4dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    4dd4:	4f 4f       	sbci	r20, 0xFF	; 255
    4dd6:	5f 4f       	sbci	r21, 0xFF	; 255
    4dd8:	57 ff       	sbrs	r21, 7
    4dda:	05 c0       	rjmp	.+10     	; 0x4de6 <__pack_f+0x150>
    4ddc:	56 95       	lsr	r21
    4dde:	47 95       	ror	r20
    4de0:	37 95       	ror	r19
    4de2:	27 95       	ror	r18
    4de4:	01 96       	adiw	r24, 0x01	; 1
    4de6:	97 e0       	ldi	r25, 0x07	; 7
    4de8:	56 95       	lsr	r21
    4dea:	47 95       	ror	r20
    4dec:	37 95       	ror	r19
    4dee:	27 95       	ror	r18
    4df0:	9a 95       	dec	r25
    4df2:	d1 f7       	brne	.-12     	; 0x4de8 <__pack_f+0x152>
    4df4:	05 c0       	rjmp	.+10     	; 0x4e00 <__pack_f+0x16a>
    4df6:	8f ef       	ldi	r24, 0xFF	; 255
    4df8:	90 e0       	ldi	r25, 0x00	; 0
    4dfa:	20 e0       	ldi	r18, 0x00	; 0
    4dfc:	30 e0       	ldi	r19, 0x00	; 0
    4dfe:	a9 01       	movw	r20, r18
    4e00:	78 2f       	mov	r23, r24
    4e02:	77 95       	ror	r23
    4e04:	77 27       	eor	r23, r23
    4e06:	77 95       	ror	r23
    4e08:	14 2f       	mov	r17, r20
    4e0a:	1f 77       	andi	r17, 0x7F	; 127
    4e0c:	60 2f       	mov	r22, r16
    4e0e:	67 95       	ror	r22
    4e10:	66 27       	eor	r22, r22
    4e12:	67 95       	ror	r22
    4e14:	86 95       	lsr	r24
    4e16:	f1 2f       	mov	r31, r17
    4e18:	f7 2b       	or	r31, r23
    4e1a:	e8 2f       	mov	r30, r24
    4e1c:	e6 2b       	or	r30, r22
    4e1e:	62 2f       	mov	r22, r18
    4e20:	73 2f       	mov	r23, r19
    4e22:	8f 2f       	mov	r24, r31
    4e24:	9e 2f       	mov	r25, r30
    4e26:	1f 91       	pop	r17
    4e28:	0f 91       	pop	r16
    4e2a:	ff 90       	pop	r15
    4e2c:	ef 90       	pop	r14
    4e2e:	df 90       	pop	r13
    4e30:	cf 90       	pop	r12
    4e32:	08 95       	ret

00004e34 <__unpack_f>:
    4e34:	fc 01       	movw	r30, r24
    4e36:	db 01       	movw	r26, r22
    4e38:	20 81       	ld	r18, Z
    4e3a:	31 81       	ldd	r19, Z+1	; 0x01
    4e3c:	82 81       	ldd	r24, Z+2	; 0x02
    4e3e:	48 2f       	mov	r20, r24
    4e40:	4f 77       	andi	r20, 0x7F	; 127
    4e42:	50 e0       	ldi	r21, 0x00	; 0
    4e44:	98 2f       	mov	r25, r24
    4e46:	99 1f       	adc	r25, r25
    4e48:	99 27       	eor	r25, r25
    4e4a:	99 1f       	adc	r25, r25
    4e4c:	63 81       	ldd	r22, Z+3	; 0x03
    4e4e:	86 2f       	mov	r24, r22
    4e50:	88 0f       	add	r24, r24
    4e52:	89 2b       	or	r24, r25
    4e54:	90 e0       	ldi	r25, 0x00	; 0
    4e56:	66 1f       	adc	r22, r22
    4e58:	66 27       	eor	r22, r22
    4e5a:	66 1f       	adc	r22, r22
    4e5c:	11 96       	adiw	r26, 0x01	; 1
    4e5e:	6c 93       	st	X, r22
    4e60:	11 97       	sbiw	r26, 0x01	; 1
    4e62:	00 97       	sbiw	r24, 0x00	; 0
    4e64:	69 f5       	brne	.+90     	; 0x4ec0 <__unpack_f+0x8c>
    4e66:	21 15       	cp	r18, r1
    4e68:	31 05       	cpc	r19, r1
    4e6a:	41 05       	cpc	r20, r1
    4e6c:	51 05       	cpc	r21, r1
    4e6e:	11 f4       	brne	.+4      	; 0x4e74 <__unpack_f+0x40>
    4e70:	82 e0       	ldi	r24, 0x02	; 2
    4e72:	2f c0       	rjmp	.+94     	; 0x4ed2 <__unpack_f+0x9e>
    4e74:	82 e8       	ldi	r24, 0x82	; 130
    4e76:	9f ef       	ldi	r25, 0xFF	; 255
    4e78:	13 96       	adiw	r26, 0x03	; 3
    4e7a:	9c 93       	st	X, r25
    4e7c:	8e 93       	st	-X, r24
    4e7e:	12 97       	sbiw	r26, 0x02	; 2
    4e80:	67 e0       	ldi	r22, 0x07	; 7
    4e82:	22 0f       	add	r18, r18
    4e84:	33 1f       	adc	r19, r19
    4e86:	44 1f       	adc	r20, r20
    4e88:	55 1f       	adc	r21, r21
    4e8a:	6a 95       	dec	r22
    4e8c:	d1 f7       	brne	.-12     	; 0x4e82 <__unpack_f+0x4e>
    4e8e:	83 e0       	ldi	r24, 0x03	; 3
    4e90:	8c 93       	st	X, r24
    4e92:	0d c0       	rjmp	.+26     	; 0x4eae <__unpack_f+0x7a>
    4e94:	22 0f       	add	r18, r18
    4e96:	33 1f       	adc	r19, r19
    4e98:	44 1f       	adc	r20, r20
    4e9a:	55 1f       	adc	r21, r21
    4e9c:	12 96       	adiw	r26, 0x02	; 2
    4e9e:	8d 91       	ld	r24, X+
    4ea0:	9c 91       	ld	r25, X
    4ea2:	13 97       	sbiw	r26, 0x03	; 3
    4ea4:	01 97       	sbiw	r24, 0x01	; 1
    4ea6:	13 96       	adiw	r26, 0x03	; 3
    4ea8:	9c 93       	st	X, r25
    4eaa:	8e 93       	st	-X, r24
    4eac:	12 97       	sbiw	r26, 0x02	; 2
    4eae:	20 30       	cpi	r18, 0x00	; 0
    4eb0:	80 e0       	ldi	r24, 0x00	; 0
    4eb2:	38 07       	cpc	r19, r24
    4eb4:	80 e0       	ldi	r24, 0x00	; 0
    4eb6:	48 07       	cpc	r20, r24
    4eb8:	80 e4       	ldi	r24, 0x40	; 64
    4eba:	58 07       	cpc	r21, r24
    4ebc:	58 f3       	brcs	.-42     	; 0x4e94 <__unpack_f+0x60>
    4ebe:	22 c0       	rjmp	.+68     	; 0x4f04 <__unpack_f+0xd0>
    4ec0:	8f 3f       	cpi	r24, 0xFF	; 255
    4ec2:	91 05       	cpc	r25, r1
    4ec4:	79 f4       	brne	.+30     	; 0x4ee4 <__unpack_f+0xb0>
    4ec6:	21 15       	cp	r18, r1
    4ec8:	31 05       	cpc	r19, r1
    4eca:	41 05       	cpc	r20, r1
    4ecc:	51 05       	cpc	r21, r1
    4ece:	19 f4       	brne	.+6      	; 0x4ed6 <__unpack_f+0xa2>
    4ed0:	84 e0       	ldi	r24, 0x04	; 4
    4ed2:	8c 93       	st	X, r24
    4ed4:	08 95       	ret
    4ed6:	44 ff       	sbrs	r20, 4
    4ed8:	03 c0       	rjmp	.+6      	; 0x4ee0 <__unpack_f+0xac>
    4eda:	81 e0       	ldi	r24, 0x01	; 1
    4edc:	8c 93       	st	X, r24
    4ede:	12 c0       	rjmp	.+36     	; 0x4f04 <__unpack_f+0xd0>
    4ee0:	1c 92       	st	X, r1
    4ee2:	10 c0       	rjmp	.+32     	; 0x4f04 <__unpack_f+0xd0>
    4ee4:	8f 57       	subi	r24, 0x7F	; 127
    4ee6:	90 40       	sbci	r25, 0x00	; 0
    4ee8:	13 96       	adiw	r26, 0x03	; 3
    4eea:	9c 93       	st	X, r25
    4eec:	8e 93       	st	-X, r24
    4eee:	12 97       	sbiw	r26, 0x02	; 2
    4ef0:	83 e0       	ldi	r24, 0x03	; 3
    4ef2:	8c 93       	st	X, r24
    4ef4:	87 e0       	ldi	r24, 0x07	; 7
    4ef6:	22 0f       	add	r18, r18
    4ef8:	33 1f       	adc	r19, r19
    4efa:	44 1f       	adc	r20, r20
    4efc:	55 1f       	adc	r21, r21
    4efe:	8a 95       	dec	r24
    4f00:	d1 f7       	brne	.-12     	; 0x4ef6 <__unpack_f+0xc2>
    4f02:	50 64       	ori	r21, 0x40	; 64
    4f04:	14 96       	adiw	r26, 0x04	; 4
    4f06:	2d 93       	st	X+, r18
    4f08:	3d 93       	st	X+, r19
    4f0a:	4d 93       	st	X+, r20
    4f0c:	5c 93       	st	X, r21
    4f0e:	17 97       	sbiw	r26, 0x07	; 7
    4f10:	08 95       	ret

00004f12 <__fpcmp_parts_f>:
    4f12:	ef 92       	push	r14
    4f14:	ff 92       	push	r15
    4f16:	0f 93       	push	r16
    4f18:	1f 93       	push	r17
    4f1a:	fc 01       	movw	r30, r24
    4f1c:	db 01       	movw	r26, r22
    4f1e:	80 81       	ld	r24, Z
    4f20:	82 30       	cpi	r24, 0x02	; 2
    4f22:	08 f4       	brcc	.+2      	; 0x4f26 <__fpcmp_parts_f+0x14>
    4f24:	47 c0       	rjmp	.+142    	; 0x4fb4 <__fpcmp_parts_f+0xa2>
    4f26:	9c 91       	ld	r25, X
    4f28:	92 30       	cpi	r25, 0x02	; 2
    4f2a:	08 f4       	brcc	.+2      	; 0x4f2e <__fpcmp_parts_f+0x1c>
    4f2c:	43 c0       	rjmp	.+134    	; 0x4fb4 <__fpcmp_parts_f+0xa2>
    4f2e:	84 30       	cpi	r24, 0x04	; 4
    4f30:	51 f4       	brne	.+20     	; 0x4f46 <__fpcmp_parts_f+0x34>
    4f32:	81 81       	ldd	r24, Z+1	; 0x01
    4f34:	94 30       	cpi	r25, 0x04	; 4
    4f36:	a1 f5       	brne	.+104    	; 0x4fa0 <__fpcmp_parts_f+0x8e>
    4f38:	11 96       	adiw	r26, 0x01	; 1
    4f3a:	2c 91       	ld	r18, X
    4f3c:	11 97       	sbiw	r26, 0x01	; 1
    4f3e:	30 e0       	ldi	r19, 0x00	; 0
    4f40:	28 1b       	sub	r18, r24
    4f42:	31 09       	sbc	r19, r1
    4f44:	3f c0       	rjmp	.+126    	; 0x4fc4 <__fpcmp_parts_f+0xb2>
    4f46:	94 30       	cpi	r25, 0x04	; 4
    4f48:	21 f0       	breq	.+8      	; 0x4f52 <__fpcmp_parts_f+0x40>
    4f4a:	82 30       	cpi	r24, 0x02	; 2
    4f4c:	31 f4       	brne	.+12     	; 0x4f5a <__fpcmp_parts_f+0x48>
    4f4e:	92 30       	cpi	r25, 0x02	; 2
    4f50:	b9 f1       	breq	.+110    	; 0x4fc0 <__fpcmp_parts_f+0xae>
    4f52:	11 96       	adiw	r26, 0x01	; 1
    4f54:	8c 91       	ld	r24, X
    4f56:	11 97       	sbiw	r26, 0x01	; 1
    4f58:	2b c0       	rjmp	.+86     	; 0x4fb0 <__fpcmp_parts_f+0x9e>
    4f5a:	81 81       	ldd	r24, Z+1	; 0x01
    4f5c:	92 30       	cpi	r25, 0x02	; 2
    4f5e:	01 f1       	breq	.+64     	; 0x4fa0 <__fpcmp_parts_f+0x8e>
    4f60:	11 96       	adiw	r26, 0x01	; 1
    4f62:	9c 91       	ld	r25, X
    4f64:	11 97       	sbiw	r26, 0x01	; 1
    4f66:	89 17       	cp	r24, r25
    4f68:	d9 f4       	brne	.+54     	; 0x4fa0 <__fpcmp_parts_f+0x8e>
    4f6a:	42 81       	ldd	r20, Z+2	; 0x02
    4f6c:	53 81       	ldd	r21, Z+3	; 0x03
    4f6e:	12 96       	adiw	r26, 0x02	; 2
    4f70:	2d 91       	ld	r18, X+
    4f72:	3c 91       	ld	r19, X
    4f74:	13 97       	sbiw	r26, 0x03	; 3
    4f76:	24 17       	cp	r18, r20
    4f78:	35 07       	cpc	r19, r21
    4f7a:	94 f0       	brlt	.+36     	; 0x4fa0 <__fpcmp_parts_f+0x8e>
    4f7c:	42 17       	cp	r20, r18
    4f7e:	53 07       	cpc	r21, r19
    4f80:	bc f0       	brlt	.+46     	; 0x4fb0 <__fpcmp_parts_f+0x9e>
    4f82:	e4 80       	ldd	r14, Z+4	; 0x04
    4f84:	f5 80       	ldd	r15, Z+5	; 0x05
    4f86:	06 81       	ldd	r16, Z+6	; 0x06
    4f88:	17 81       	ldd	r17, Z+7	; 0x07
    4f8a:	14 96       	adiw	r26, 0x04	; 4
    4f8c:	2d 91       	ld	r18, X+
    4f8e:	3d 91       	ld	r19, X+
    4f90:	4d 91       	ld	r20, X+
    4f92:	5c 91       	ld	r21, X
    4f94:	17 97       	sbiw	r26, 0x07	; 7
    4f96:	2e 15       	cp	r18, r14
    4f98:	3f 05       	cpc	r19, r15
    4f9a:	40 07       	cpc	r20, r16
    4f9c:	51 07       	cpc	r21, r17
    4f9e:	18 f4       	brcc	.+6      	; 0x4fa6 <__fpcmp_parts_f+0x94>
    4fa0:	88 23       	and	r24, r24
    4fa2:	41 f0       	breq	.+16     	; 0x4fb4 <__fpcmp_parts_f+0xa2>
    4fa4:	0a c0       	rjmp	.+20     	; 0x4fba <__fpcmp_parts_f+0xa8>
    4fa6:	e2 16       	cp	r14, r18
    4fa8:	f3 06       	cpc	r15, r19
    4faa:	04 07       	cpc	r16, r20
    4fac:	15 07       	cpc	r17, r21
    4fae:	40 f4       	brcc	.+16     	; 0x4fc0 <__fpcmp_parts_f+0xae>
    4fb0:	88 23       	and	r24, r24
    4fb2:	19 f0       	breq	.+6      	; 0x4fba <__fpcmp_parts_f+0xa8>
    4fb4:	21 e0       	ldi	r18, 0x01	; 1
    4fb6:	30 e0       	ldi	r19, 0x00	; 0
    4fb8:	05 c0       	rjmp	.+10     	; 0x4fc4 <__fpcmp_parts_f+0xb2>
    4fba:	2f ef       	ldi	r18, 0xFF	; 255
    4fbc:	3f ef       	ldi	r19, 0xFF	; 255
    4fbe:	02 c0       	rjmp	.+4      	; 0x4fc4 <__fpcmp_parts_f+0xb2>
    4fc0:	20 e0       	ldi	r18, 0x00	; 0
    4fc2:	30 e0       	ldi	r19, 0x00	; 0
    4fc4:	c9 01       	movw	r24, r18
    4fc6:	1f 91       	pop	r17
    4fc8:	0f 91       	pop	r16
    4fca:	ff 90       	pop	r15
    4fcc:	ef 90       	pop	r14
    4fce:	08 95       	ret

00004fd0 <__udivmodhi4>:
    4fd0:	aa 1b       	sub	r26, r26
    4fd2:	bb 1b       	sub	r27, r27
    4fd4:	51 e1       	ldi	r21, 0x11	; 17
    4fd6:	07 c0       	rjmp	.+14     	; 0x4fe6 <__udivmodhi4_ep>

00004fd8 <__udivmodhi4_loop>:
    4fd8:	aa 1f       	adc	r26, r26
    4fda:	bb 1f       	adc	r27, r27
    4fdc:	a6 17       	cp	r26, r22
    4fde:	b7 07       	cpc	r27, r23
    4fe0:	10 f0       	brcs	.+4      	; 0x4fe6 <__udivmodhi4_ep>
    4fe2:	a6 1b       	sub	r26, r22
    4fe4:	b7 0b       	sbc	r27, r23

00004fe6 <__udivmodhi4_ep>:
    4fe6:	88 1f       	adc	r24, r24
    4fe8:	99 1f       	adc	r25, r25
    4fea:	5a 95       	dec	r21
    4fec:	a9 f7       	brne	.-22     	; 0x4fd8 <__udivmodhi4_loop>
    4fee:	80 95       	com	r24
    4ff0:	90 95       	com	r25
    4ff2:	bc 01       	movw	r22, r24
    4ff4:	cd 01       	movw	r24, r26
    4ff6:	08 95       	ret

00004ff8 <__divmodhi4>:
    4ff8:	97 fb       	bst	r25, 7
    4ffa:	09 2e       	mov	r0, r25
    4ffc:	07 26       	eor	r0, r23
    4ffe:	0a d0       	rcall	.+20     	; 0x5014 <__divmodhi4_neg1>
    5000:	77 fd       	sbrc	r23, 7
    5002:	04 d0       	rcall	.+8      	; 0x500c <__divmodhi4_neg2>
    5004:	e5 df       	rcall	.-54     	; 0x4fd0 <__udivmodhi4>
    5006:	06 d0       	rcall	.+12     	; 0x5014 <__divmodhi4_neg1>
    5008:	00 20       	and	r0, r0
    500a:	1a f4       	brpl	.+6      	; 0x5012 <__divmodhi4_exit>

0000500c <__divmodhi4_neg2>:
    500c:	70 95       	com	r23
    500e:	61 95       	neg	r22
    5010:	7f 4f       	sbci	r23, 0xFF	; 255

00005012 <__divmodhi4_exit>:
    5012:	08 95       	ret

00005014 <__divmodhi4_neg1>:
    5014:	f6 f7       	brtc	.-4      	; 0x5012 <__divmodhi4_exit>
    5016:	90 95       	com	r25
    5018:	81 95       	neg	r24
    501a:	9f 4f       	sbci	r25, 0xFF	; 255
    501c:	08 95       	ret

0000501e <__udivmodsi4>:
    501e:	a1 e2       	ldi	r26, 0x21	; 33
    5020:	1a 2e       	mov	r1, r26
    5022:	aa 1b       	sub	r26, r26
    5024:	bb 1b       	sub	r27, r27
    5026:	fd 01       	movw	r30, r26
    5028:	0d c0       	rjmp	.+26     	; 0x5044 <__udivmodsi4_ep>

0000502a <__udivmodsi4_loop>:
    502a:	aa 1f       	adc	r26, r26
    502c:	bb 1f       	adc	r27, r27
    502e:	ee 1f       	adc	r30, r30
    5030:	ff 1f       	adc	r31, r31
    5032:	a2 17       	cp	r26, r18
    5034:	b3 07       	cpc	r27, r19
    5036:	e4 07       	cpc	r30, r20
    5038:	f5 07       	cpc	r31, r21
    503a:	20 f0       	brcs	.+8      	; 0x5044 <__udivmodsi4_ep>
    503c:	a2 1b       	sub	r26, r18
    503e:	b3 0b       	sbc	r27, r19
    5040:	e4 0b       	sbc	r30, r20
    5042:	f5 0b       	sbc	r31, r21

00005044 <__udivmodsi4_ep>:
    5044:	66 1f       	adc	r22, r22
    5046:	77 1f       	adc	r23, r23
    5048:	88 1f       	adc	r24, r24
    504a:	99 1f       	adc	r25, r25
    504c:	1a 94       	dec	r1
    504e:	69 f7       	brne	.-38     	; 0x502a <__udivmodsi4_loop>
    5050:	60 95       	com	r22
    5052:	70 95       	com	r23
    5054:	80 95       	com	r24
    5056:	90 95       	com	r25
    5058:	9b 01       	movw	r18, r22
    505a:	ac 01       	movw	r20, r24
    505c:	bd 01       	movw	r22, r26
    505e:	cf 01       	movw	r24, r30
    5060:	08 95       	ret

00005062 <__prologue_saves__>:
    5062:	2f 92       	push	r2
    5064:	3f 92       	push	r3
    5066:	4f 92       	push	r4
    5068:	5f 92       	push	r5
    506a:	6f 92       	push	r6
    506c:	7f 92       	push	r7
    506e:	8f 92       	push	r8
    5070:	9f 92       	push	r9
    5072:	af 92       	push	r10
    5074:	bf 92       	push	r11
    5076:	cf 92       	push	r12
    5078:	df 92       	push	r13
    507a:	ef 92       	push	r14
    507c:	ff 92       	push	r15
    507e:	0f 93       	push	r16
    5080:	1f 93       	push	r17
    5082:	cf 93       	push	r28
    5084:	df 93       	push	r29
    5086:	cd b7       	in	r28, 0x3d	; 61
    5088:	de b7       	in	r29, 0x3e	; 62
    508a:	ca 1b       	sub	r28, r26
    508c:	db 0b       	sbc	r29, r27
    508e:	0f b6       	in	r0, 0x3f	; 63
    5090:	f8 94       	cli
    5092:	de bf       	out	0x3e, r29	; 62
    5094:	0f be       	out	0x3f, r0	; 63
    5096:	cd bf       	out	0x3d, r28	; 61
    5098:	09 94       	ijmp

0000509a <__epilogue_restores__>:
    509a:	2a 88       	ldd	r2, Y+18	; 0x12
    509c:	39 88       	ldd	r3, Y+17	; 0x11
    509e:	48 88       	ldd	r4, Y+16	; 0x10
    50a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    50a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    50a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    50a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    50a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    50aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    50ac:	b9 84       	ldd	r11, Y+9	; 0x09
    50ae:	c8 84       	ldd	r12, Y+8	; 0x08
    50b0:	df 80       	ldd	r13, Y+7	; 0x07
    50b2:	ee 80       	ldd	r14, Y+6	; 0x06
    50b4:	fd 80       	ldd	r15, Y+5	; 0x05
    50b6:	0c 81       	ldd	r16, Y+4	; 0x04
    50b8:	1b 81       	ldd	r17, Y+3	; 0x03
    50ba:	aa 81       	ldd	r26, Y+2	; 0x02
    50bc:	b9 81       	ldd	r27, Y+1	; 0x01
    50be:	ce 0f       	add	r28, r30
    50c0:	d1 1d       	adc	r29, r1
    50c2:	0f b6       	in	r0, 0x3f	; 63
    50c4:	f8 94       	cli
    50c6:	de bf       	out	0x3e, r29	; 62
    50c8:	0f be       	out	0x3f, r0	; 63
    50ca:	cd bf       	out	0x3d, r28	; 61
    50cc:	ed 01       	movw	r28, r26
    50ce:	08 95       	ret

000050d0 <__tablejump2__>:
    50d0:	ee 0f       	add	r30, r30
    50d2:	ff 1f       	adc	r31, r31

000050d4 <__tablejump__>:
    50d4:	05 90       	lpm	r0, Z+
    50d6:	f4 91       	lpm	r31, Z+
    50d8:	e0 2d       	mov	r30, r0
    50da:	09 94       	ijmp

000050dc <acos>:
    50dc:	9f 93       	push	r25
    50de:	9f 77       	andi	r25, 0x7F	; 127
    50e0:	6e d0       	rcall	.+220    	; 0x51be <__fp_arccos>
    50e2:	0f 90       	pop	r0
    50e4:	00 20       	and	r0, r0
    50e6:	3a f4       	brpl	.+14     	; 0x50f6 <acos+0x1a>
    50e8:	90 58       	subi	r25, 0x80	; 128
    50ea:	a2 ea       	ldi	r26, 0xA2	; 162
    50ec:	2a ed       	ldi	r18, 0xDA	; 218
    50ee:	3f e0       	ldi	r19, 0x0F	; 15
    50f0:	49 e4       	ldi	r20, 0x49	; 73
    50f2:	50 e4       	ldi	r21, 0x40	; 64
    50f4:	0e d0       	rcall	.+28     	; 0x5112 <__addsf3x>
    50f6:	e2 c0       	rjmp	.+452    	; 0x52bc <__fp_round>
    50f8:	ab d0       	rcall	.+342    	; 0x5250 <__fp_pscA>
    50fa:	30 f0       	brcs	.+12     	; 0x5108 <acos+0x2c>
    50fc:	b0 d0       	rcall	.+352    	; 0x525e <__fp_pscB>
    50fe:	20 f0       	brcs	.+8      	; 0x5108 <acos+0x2c>
    5100:	31 f4       	brne	.+12     	; 0x510e <acos+0x32>
    5102:	9f 3f       	cpi	r25, 0xFF	; 255
    5104:	11 f4       	brne	.+4      	; 0x510a <acos+0x2e>
    5106:	1e f4       	brtc	.+6      	; 0x510e <acos+0x32>
    5108:	7b c0       	rjmp	.+246    	; 0x5200 <__fp_nan>
    510a:	0e f4       	brtc	.+2      	; 0x510e <acos+0x32>
    510c:	e0 95       	com	r30
    510e:	e7 fb       	bst	r30, 7
    5110:	71 c0       	rjmp	.+226    	; 0x51f4 <__fp_inf>

00005112 <__addsf3x>:
    5112:	e9 2f       	mov	r30, r25
    5114:	f5 d0       	rcall	.+490    	; 0x5300 <__fp_split3>
    5116:	80 f3       	brcs	.-32     	; 0x50f8 <acos+0x1c>
    5118:	ba 17       	cp	r27, r26
    511a:	62 07       	cpc	r22, r18
    511c:	73 07       	cpc	r23, r19
    511e:	84 07       	cpc	r24, r20
    5120:	95 07       	cpc	r25, r21
    5122:	18 f0       	brcs	.+6      	; 0x512a <__addsf3x+0x18>
    5124:	71 f4       	brne	.+28     	; 0x5142 <__addsf3x+0x30>
    5126:	9e f5       	brtc	.+102    	; 0x518e <__addsf3x+0x7c>
    5128:	0d c1       	rjmp	.+538    	; 0x5344 <__fp_zero>
    512a:	0e f4       	brtc	.+2      	; 0x512e <__addsf3x+0x1c>
    512c:	e0 95       	com	r30
    512e:	0b 2e       	mov	r0, r27
    5130:	ba 2f       	mov	r27, r26
    5132:	a0 2d       	mov	r26, r0
    5134:	0b 01       	movw	r0, r22
    5136:	b9 01       	movw	r22, r18
    5138:	90 01       	movw	r18, r0
    513a:	0c 01       	movw	r0, r24
    513c:	ca 01       	movw	r24, r20
    513e:	a0 01       	movw	r20, r0
    5140:	11 24       	eor	r1, r1
    5142:	ff 27       	eor	r31, r31
    5144:	59 1b       	sub	r21, r25
    5146:	99 f0       	breq	.+38     	; 0x516e <__addsf3x+0x5c>
    5148:	59 3f       	cpi	r21, 0xF9	; 249
    514a:	50 f4       	brcc	.+20     	; 0x5160 <__addsf3x+0x4e>
    514c:	50 3e       	cpi	r21, 0xE0	; 224
    514e:	68 f1       	brcs	.+90     	; 0x51aa <__addsf3x+0x98>
    5150:	1a 16       	cp	r1, r26
    5152:	f0 40       	sbci	r31, 0x00	; 0
    5154:	a2 2f       	mov	r26, r18
    5156:	23 2f       	mov	r18, r19
    5158:	34 2f       	mov	r19, r20
    515a:	44 27       	eor	r20, r20
    515c:	58 5f       	subi	r21, 0xF8	; 248
    515e:	f3 cf       	rjmp	.-26     	; 0x5146 <__addsf3x+0x34>
    5160:	46 95       	lsr	r20
    5162:	37 95       	ror	r19
    5164:	27 95       	ror	r18
    5166:	a7 95       	ror	r26
    5168:	f0 40       	sbci	r31, 0x00	; 0
    516a:	53 95       	inc	r21
    516c:	c9 f7       	brne	.-14     	; 0x5160 <__addsf3x+0x4e>
    516e:	7e f4       	brtc	.+30     	; 0x518e <__addsf3x+0x7c>
    5170:	1f 16       	cp	r1, r31
    5172:	ba 0b       	sbc	r27, r26
    5174:	62 0b       	sbc	r22, r18
    5176:	73 0b       	sbc	r23, r19
    5178:	84 0b       	sbc	r24, r20
    517a:	ba f0       	brmi	.+46     	; 0x51aa <__addsf3x+0x98>
    517c:	91 50       	subi	r25, 0x01	; 1
    517e:	a1 f0       	breq	.+40     	; 0x51a8 <__addsf3x+0x96>
    5180:	ff 0f       	add	r31, r31
    5182:	bb 1f       	adc	r27, r27
    5184:	66 1f       	adc	r22, r22
    5186:	77 1f       	adc	r23, r23
    5188:	88 1f       	adc	r24, r24
    518a:	c2 f7       	brpl	.-16     	; 0x517c <__addsf3x+0x6a>
    518c:	0e c0       	rjmp	.+28     	; 0x51aa <__addsf3x+0x98>
    518e:	ba 0f       	add	r27, r26
    5190:	62 1f       	adc	r22, r18
    5192:	73 1f       	adc	r23, r19
    5194:	84 1f       	adc	r24, r20
    5196:	48 f4       	brcc	.+18     	; 0x51aa <__addsf3x+0x98>
    5198:	87 95       	ror	r24
    519a:	77 95       	ror	r23
    519c:	67 95       	ror	r22
    519e:	b7 95       	ror	r27
    51a0:	f7 95       	ror	r31
    51a2:	9e 3f       	cpi	r25, 0xFE	; 254
    51a4:	08 f0       	brcs	.+2      	; 0x51a8 <__addsf3x+0x96>
    51a6:	b3 cf       	rjmp	.-154    	; 0x510e <acos+0x32>
    51a8:	93 95       	inc	r25
    51aa:	88 0f       	add	r24, r24
    51ac:	08 f0       	brcs	.+2      	; 0x51b0 <__addsf3x+0x9e>
    51ae:	99 27       	eor	r25, r25
    51b0:	ee 0f       	add	r30, r30
    51b2:	97 95       	ror	r25
    51b4:	87 95       	ror	r24
    51b6:	08 95       	ret

000051b8 <cos>:
    51b8:	5a d0       	rcall	.+180    	; 0x526e <__fp_rempio2>
    51ba:	e3 95       	inc	r30
    51bc:	90 c0       	rjmp	.+288    	; 0x52de <__fp_sinus>

000051be <__fp_arccos>:
    51be:	df 93       	push	r29
    51c0:	cf 93       	push	r28
    51c2:	1f 93       	push	r17
    51c4:	0f 93       	push	r16
    51c6:	8b 01       	movw	r16, r22
    51c8:	ec 01       	movw	r28, r24
    51ca:	ea ef       	ldi	r30, 0xFA	; 250
    51cc:	f1 e0       	ldi	r31, 0x01	; 1
    51ce:	1b d0       	rcall	.+54     	; 0x5206 <__fp_powser>
    51d0:	75 d0       	rcall	.+234    	; 0x52bc <__fp_round>
    51d2:	98 01       	movw	r18, r16
    51d4:	ae 01       	movw	r20, r28
    51d6:	8b 01       	movw	r16, r22
    51d8:	ec 01       	movw	r28, r24
    51da:	60 e0       	ldi	r22, 0x00	; 0
    51dc:	70 e0       	ldi	r23, 0x00	; 0
    51de:	80 e8       	ldi	r24, 0x80	; 128
    51e0:	9f e3       	ldi	r25, 0x3F	; 63
    51e2:	75 d9       	rcall	.-3350   	; 0x44ce <__subsf3>
    51e4:	1b d1       	rcall	.+566    	; 0x541c <sqrt>
    51e6:	98 01       	movw	r18, r16
    51e8:	ae 01       	movw	r20, r28
    51ea:	0f 91       	pop	r16
    51ec:	1f 91       	pop	r17
    51ee:	cf 91       	pop	r28
    51f0:	df 91       	pop	r29
    51f2:	b9 c0       	rjmp	.+370    	; 0x5366 <__mulsf3x>

000051f4 <__fp_inf>:
    51f4:	97 f9       	bld	r25, 7
    51f6:	9f 67       	ori	r25, 0x7F	; 127
    51f8:	80 e8       	ldi	r24, 0x80	; 128
    51fa:	70 e0       	ldi	r23, 0x00	; 0
    51fc:	60 e0       	ldi	r22, 0x00	; 0
    51fe:	08 95       	ret

00005200 <__fp_nan>:
    5200:	9f ef       	ldi	r25, 0xFF	; 255
    5202:	80 ec       	ldi	r24, 0xC0	; 192
    5204:	08 95       	ret

00005206 <__fp_powser>:
    5206:	df 93       	push	r29
    5208:	cf 93       	push	r28
    520a:	1f 93       	push	r17
    520c:	0f 93       	push	r16
    520e:	ff 92       	push	r15
    5210:	ef 92       	push	r14
    5212:	df 92       	push	r13
    5214:	7b 01       	movw	r14, r22
    5216:	8c 01       	movw	r16, r24
    5218:	68 94       	set
    521a:	05 c0       	rjmp	.+10     	; 0x5226 <__fp_powser+0x20>
    521c:	da 2e       	mov	r13, r26
    521e:	ef 01       	movw	r28, r30
    5220:	a2 d0       	rcall	.+324    	; 0x5366 <__mulsf3x>
    5222:	fe 01       	movw	r30, r28
    5224:	e8 94       	clt
    5226:	a5 91       	lpm	r26, Z+
    5228:	25 91       	lpm	r18, Z+
    522a:	35 91       	lpm	r19, Z+
    522c:	45 91       	lpm	r20, Z+
    522e:	55 91       	lpm	r21, Z+
    5230:	ae f3       	brts	.-22     	; 0x521c <__fp_powser+0x16>
    5232:	ef 01       	movw	r28, r30
    5234:	6e df       	rcall	.-292    	; 0x5112 <__addsf3x>
    5236:	fe 01       	movw	r30, r28
    5238:	97 01       	movw	r18, r14
    523a:	a8 01       	movw	r20, r16
    523c:	da 94       	dec	r13
    523e:	79 f7       	brne	.-34     	; 0x521e <__fp_powser+0x18>
    5240:	df 90       	pop	r13
    5242:	ef 90       	pop	r14
    5244:	ff 90       	pop	r15
    5246:	0f 91       	pop	r16
    5248:	1f 91       	pop	r17
    524a:	cf 91       	pop	r28
    524c:	df 91       	pop	r29
    524e:	08 95       	ret

00005250 <__fp_pscA>:
    5250:	00 24       	eor	r0, r0
    5252:	0a 94       	dec	r0
    5254:	16 16       	cp	r1, r22
    5256:	17 06       	cpc	r1, r23
    5258:	18 06       	cpc	r1, r24
    525a:	09 06       	cpc	r0, r25
    525c:	08 95       	ret

0000525e <__fp_pscB>:
    525e:	00 24       	eor	r0, r0
    5260:	0a 94       	dec	r0
    5262:	12 16       	cp	r1, r18
    5264:	13 06       	cpc	r1, r19
    5266:	14 06       	cpc	r1, r20
    5268:	05 06       	cpc	r0, r21
    526a:	08 95       	ret
    526c:	c9 cf       	rjmp	.-110    	; 0x5200 <__fp_nan>

0000526e <__fp_rempio2>:
    526e:	50 d0       	rcall	.+160    	; 0x5310 <__fp_splitA>
    5270:	e8 f3       	brcs	.-6      	; 0x526c <__fp_pscB+0xe>
    5272:	e8 94       	clt
    5274:	e0 e0       	ldi	r30, 0x00	; 0
    5276:	bb 27       	eor	r27, r27
    5278:	9f 57       	subi	r25, 0x7F	; 127
    527a:	f0 f0       	brcs	.+60     	; 0x52b8 <__fp_rempio2+0x4a>
    527c:	2a ed       	ldi	r18, 0xDA	; 218
    527e:	3f e0       	ldi	r19, 0x0F	; 15
    5280:	49 ec       	ldi	r20, 0xC9	; 201
    5282:	06 c0       	rjmp	.+12     	; 0x5290 <__fp_rempio2+0x22>
    5284:	ee 0f       	add	r30, r30
    5286:	bb 0f       	add	r27, r27
    5288:	66 1f       	adc	r22, r22
    528a:	77 1f       	adc	r23, r23
    528c:	88 1f       	adc	r24, r24
    528e:	28 f0       	brcs	.+10     	; 0x529a <__fp_rempio2+0x2c>
    5290:	b2 3a       	cpi	r27, 0xA2	; 162
    5292:	62 07       	cpc	r22, r18
    5294:	73 07       	cpc	r23, r19
    5296:	84 07       	cpc	r24, r20
    5298:	28 f0       	brcs	.+10     	; 0x52a4 <__fp_rempio2+0x36>
    529a:	b2 5a       	subi	r27, 0xA2	; 162
    529c:	62 0b       	sbc	r22, r18
    529e:	73 0b       	sbc	r23, r19
    52a0:	84 0b       	sbc	r24, r20
    52a2:	e3 95       	inc	r30
    52a4:	9a 95       	dec	r25
    52a6:	72 f7       	brpl	.-36     	; 0x5284 <__fp_rempio2+0x16>
    52a8:	80 38       	cpi	r24, 0x80	; 128
    52aa:	30 f4       	brcc	.+12     	; 0x52b8 <__fp_rempio2+0x4a>
    52ac:	9a 95       	dec	r25
    52ae:	bb 0f       	add	r27, r27
    52b0:	66 1f       	adc	r22, r22
    52b2:	77 1f       	adc	r23, r23
    52b4:	88 1f       	adc	r24, r24
    52b6:	d2 f7       	brpl	.-12     	; 0x52ac <__fp_rempio2+0x3e>
    52b8:	90 48       	sbci	r25, 0x80	; 128
    52ba:	f0 c0       	rjmp	.+480    	; 0x549c <__fp_mpack_finite>

000052bc <__fp_round>:
    52bc:	09 2e       	mov	r0, r25
    52be:	03 94       	inc	r0
    52c0:	00 0c       	add	r0, r0
    52c2:	11 f4       	brne	.+4      	; 0x52c8 <__fp_round+0xc>
    52c4:	88 23       	and	r24, r24
    52c6:	52 f0       	brmi	.+20     	; 0x52dc <__fp_round+0x20>
    52c8:	bb 0f       	add	r27, r27
    52ca:	40 f4       	brcc	.+16     	; 0x52dc <__fp_round+0x20>
    52cc:	bf 2b       	or	r27, r31
    52ce:	11 f4       	brne	.+4      	; 0x52d4 <__fp_round+0x18>
    52d0:	60 ff       	sbrs	r22, 0
    52d2:	04 c0       	rjmp	.+8      	; 0x52dc <__fp_round+0x20>
    52d4:	6f 5f       	subi	r22, 0xFF	; 255
    52d6:	7f 4f       	sbci	r23, 0xFF	; 255
    52d8:	8f 4f       	sbci	r24, 0xFF	; 255
    52da:	9f 4f       	sbci	r25, 0xFF	; 255
    52dc:	08 95       	ret

000052de <__fp_sinus>:
    52de:	ef 93       	push	r30
    52e0:	e0 ff       	sbrs	r30, 0
    52e2:	06 c0       	rjmp	.+12     	; 0x52f0 <__fp_sinus+0x12>
    52e4:	a2 ea       	ldi	r26, 0xA2	; 162
    52e6:	2a ed       	ldi	r18, 0xDA	; 218
    52e8:	3f e0       	ldi	r19, 0x0F	; 15
    52ea:	49 ec       	ldi	r20, 0xC9	; 201
    52ec:	5f eb       	ldi	r21, 0xBF	; 191
    52ee:	11 df       	rcall	.-478    	; 0x5112 <__addsf3x>
    52f0:	e5 df       	rcall	.-54     	; 0x52bc <__fp_round>
    52f2:	0f 90       	pop	r0
    52f4:	03 94       	inc	r0
    52f6:	01 fc       	sbrc	r0, 1
    52f8:	90 58       	subi	r25, 0x80	; 128
    52fa:	e2 e2       	ldi	r30, 0x22	; 34
    52fc:	f2 e0       	ldi	r31, 0x02	; 2
    52fe:	e1 c0       	rjmp	.+450    	; 0x54c2 <__fp_powsodd>

00005300 <__fp_split3>:
    5300:	57 fd       	sbrc	r21, 7
    5302:	90 58       	subi	r25, 0x80	; 128
    5304:	44 0f       	add	r20, r20
    5306:	55 1f       	adc	r21, r21
    5308:	59 f0       	breq	.+22     	; 0x5320 <__fp_splitA+0x10>
    530a:	5f 3f       	cpi	r21, 0xFF	; 255
    530c:	71 f0       	breq	.+28     	; 0x532a <__fp_splitA+0x1a>
    530e:	47 95       	ror	r20

00005310 <__fp_splitA>:
    5310:	88 0f       	add	r24, r24
    5312:	97 fb       	bst	r25, 7
    5314:	99 1f       	adc	r25, r25
    5316:	61 f0       	breq	.+24     	; 0x5330 <__fp_splitA+0x20>
    5318:	9f 3f       	cpi	r25, 0xFF	; 255
    531a:	79 f0       	breq	.+30     	; 0x533a <__fp_splitA+0x2a>
    531c:	87 95       	ror	r24
    531e:	08 95       	ret
    5320:	12 16       	cp	r1, r18
    5322:	13 06       	cpc	r1, r19
    5324:	14 06       	cpc	r1, r20
    5326:	55 1f       	adc	r21, r21
    5328:	f2 cf       	rjmp	.-28     	; 0x530e <__fp_split3+0xe>
    532a:	46 95       	lsr	r20
    532c:	f1 df       	rcall	.-30     	; 0x5310 <__fp_splitA>
    532e:	08 c0       	rjmp	.+16     	; 0x5340 <__fp_splitA+0x30>
    5330:	16 16       	cp	r1, r22
    5332:	17 06       	cpc	r1, r23
    5334:	18 06       	cpc	r1, r24
    5336:	99 1f       	adc	r25, r25
    5338:	f1 cf       	rjmp	.-30     	; 0x531c <__fp_splitA+0xc>
    533a:	86 95       	lsr	r24
    533c:	71 05       	cpc	r23, r1
    533e:	61 05       	cpc	r22, r1
    5340:	08 94       	sec
    5342:	08 95       	ret

00005344 <__fp_zero>:
    5344:	e8 94       	clt

00005346 <__fp_szero>:
    5346:	bb 27       	eor	r27, r27
    5348:	66 27       	eor	r22, r22
    534a:	77 27       	eor	r23, r23
    534c:	cb 01       	movw	r24, r22
    534e:	97 f9       	bld	r25, 7
    5350:	08 95       	ret
    5352:	7e df       	rcall	.-260    	; 0x5250 <__fp_pscA>
    5354:	28 f0       	brcs	.+10     	; 0x5360 <__fp_szero+0x1a>
    5356:	83 df       	rcall	.-250    	; 0x525e <__fp_pscB>
    5358:	18 f0       	brcs	.+6      	; 0x5360 <__fp_szero+0x1a>
    535a:	95 23       	and	r25, r21
    535c:	09 f0       	breq	.+2      	; 0x5360 <__fp_szero+0x1a>
    535e:	4a cf       	rjmp	.-364    	; 0x51f4 <__fp_inf>
    5360:	4f cf       	rjmp	.-354    	; 0x5200 <__fp_nan>
    5362:	11 24       	eor	r1, r1
    5364:	f0 cf       	rjmp	.-32     	; 0x5346 <__fp_szero>

00005366 <__mulsf3x>:
    5366:	cc df       	rcall	.-104    	; 0x5300 <__fp_split3>
    5368:	a0 f3       	brcs	.-24     	; 0x5352 <__fp_szero+0xc>

0000536a <__mulsf3_pse>:
    536a:	95 9f       	mul	r25, r21
    536c:	d1 f3       	breq	.-12     	; 0x5362 <__fp_szero+0x1c>
    536e:	95 0f       	add	r25, r21
    5370:	50 e0       	ldi	r21, 0x00	; 0
    5372:	55 1f       	adc	r21, r21
    5374:	62 9f       	mul	r22, r18
    5376:	f0 01       	movw	r30, r0
    5378:	72 9f       	mul	r23, r18
    537a:	bb 27       	eor	r27, r27
    537c:	f0 0d       	add	r31, r0
    537e:	b1 1d       	adc	r27, r1
    5380:	63 9f       	mul	r22, r19
    5382:	aa 27       	eor	r26, r26
    5384:	f0 0d       	add	r31, r0
    5386:	b1 1d       	adc	r27, r1
    5388:	aa 1f       	adc	r26, r26
    538a:	64 9f       	mul	r22, r20
    538c:	66 27       	eor	r22, r22
    538e:	b0 0d       	add	r27, r0
    5390:	a1 1d       	adc	r26, r1
    5392:	66 1f       	adc	r22, r22
    5394:	82 9f       	mul	r24, r18
    5396:	22 27       	eor	r18, r18
    5398:	b0 0d       	add	r27, r0
    539a:	a1 1d       	adc	r26, r1
    539c:	62 1f       	adc	r22, r18
    539e:	73 9f       	mul	r23, r19
    53a0:	b0 0d       	add	r27, r0
    53a2:	a1 1d       	adc	r26, r1
    53a4:	62 1f       	adc	r22, r18
    53a6:	83 9f       	mul	r24, r19
    53a8:	a0 0d       	add	r26, r0
    53aa:	61 1d       	adc	r22, r1
    53ac:	22 1f       	adc	r18, r18
    53ae:	74 9f       	mul	r23, r20
    53b0:	33 27       	eor	r19, r19
    53b2:	a0 0d       	add	r26, r0
    53b4:	61 1d       	adc	r22, r1
    53b6:	23 1f       	adc	r18, r19
    53b8:	84 9f       	mul	r24, r20
    53ba:	60 0d       	add	r22, r0
    53bc:	21 1d       	adc	r18, r1
    53be:	82 2f       	mov	r24, r18
    53c0:	76 2f       	mov	r23, r22
    53c2:	6a 2f       	mov	r22, r26
    53c4:	11 24       	eor	r1, r1
    53c6:	9f 57       	subi	r25, 0x7F	; 127
    53c8:	50 40       	sbci	r21, 0x00	; 0
    53ca:	8a f0       	brmi	.+34     	; 0x53ee <__mulsf3_pse+0x84>
    53cc:	e1 f0       	breq	.+56     	; 0x5406 <__mulsf3_pse+0x9c>
    53ce:	88 23       	and	r24, r24
    53d0:	4a f0       	brmi	.+18     	; 0x53e4 <__mulsf3_pse+0x7a>
    53d2:	ee 0f       	add	r30, r30
    53d4:	ff 1f       	adc	r31, r31
    53d6:	bb 1f       	adc	r27, r27
    53d8:	66 1f       	adc	r22, r22
    53da:	77 1f       	adc	r23, r23
    53dc:	88 1f       	adc	r24, r24
    53de:	91 50       	subi	r25, 0x01	; 1
    53e0:	50 40       	sbci	r21, 0x00	; 0
    53e2:	a9 f7       	brne	.-22     	; 0x53ce <__mulsf3_pse+0x64>
    53e4:	9e 3f       	cpi	r25, 0xFE	; 254
    53e6:	51 05       	cpc	r21, r1
    53e8:	70 f0       	brcs	.+28     	; 0x5406 <__mulsf3_pse+0x9c>
    53ea:	04 cf       	rjmp	.-504    	; 0x51f4 <__fp_inf>
    53ec:	ac cf       	rjmp	.-168    	; 0x5346 <__fp_szero>
    53ee:	5f 3f       	cpi	r21, 0xFF	; 255
    53f0:	ec f3       	brlt	.-6      	; 0x53ec <__mulsf3_pse+0x82>
    53f2:	98 3e       	cpi	r25, 0xE8	; 232
    53f4:	dc f3       	brlt	.-10     	; 0x53ec <__mulsf3_pse+0x82>
    53f6:	86 95       	lsr	r24
    53f8:	77 95       	ror	r23
    53fa:	67 95       	ror	r22
    53fc:	b7 95       	ror	r27
    53fe:	f7 95       	ror	r31
    5400:	e7 95       	ror	r30
    5402:	9f 5f       	subi	r25, 0xFF	; 255
    5404:	c1 f7       	brne	.-16     	; 0x53f6 <__mulsf3_pse+0x8c>
    5406:	fe 2b       	or	r31, r30
    5408:	88 0f       	add	r24, r24
    540a:	91 1d       	adc	r25, r1
    540c:	96 95       	lsr	r25
    540e:	87 95       	ror	r24
    5410:	97 f9       	bld	r25, 7
    5412:	08 95       	ret
    5414:	11 f4       	brne	.+4      	; 0x541a <__mulsf3_pse+0xb0>
    5416:	0e f4       	brtc	.+2      	; 0x541a <__mulsf3_pse+0xb0>
    5418:	f3 ce       	rjmp	.-538    	; 0x5200 <__fp_nan>
    541a:	3e c0       	rjmp	.+124    	; 0x5498 <__fp_mpack>

0000541c <sqrt>:
    541c:	79 df       	rcall	.-270    	; 0x5310 <__fp_splitA>
    541e:	d0 f3       	brcs	.-12     	; 0x5414 <__mulsf3_pse+0xaa>
    5420:	99 23       	and	r25, r25
    5422:	d9 f3       	breq	.-10     	; 0x541a <__mulsf3_pse+0xb0>
    5424:	ce f3       	brts	.-14     	; 0x5418 <__mulsf3_pse+0xae>
    5426:	9f 57       	subi	r25, 0x7F	; 127
    5428:	55 0b       	sbc	r21, r21
    542a:	87 ff       	sbrs	r24, 7
    542c:	43 d0       	rcall	.+134    	; 0x54b4 <__fp_norm2>
    542e:	00 24       	eor	r0, r0
    5430:	a0 e6       	ldi	r26, 0x60	; 96
    5432:	40 ea       	ldi	r20, 0xA0	; 160
    5434:	90 01       	movw	r18, r0
    5436:	80 58       	subi	r24, 0x80	; 128
    5438:	56 95       	lsr	r21
    543a:	97 95       	ror	r25
    543c:	28 f4       	brcc	.+10     	; 0x5448 <sqrt+0x2c>
    543e:	80 5c       	subi	r24, 0xC0	; 192
    5440:	66 0f       	add	r22, r22
    5442:	77 1f       	adc	r23, r23
    5444:	88 1f       	adc	r24, r24
    5446:	20 f0       	brcs	.+8      	; 0x5450 <sqrt+0x34>
    5448:	26 17       	cp	r18, r22
    544a:	37 07       	cpc	r19, r23
    544c:	48 07       	cpc	r20, r24
    544e:	30 f4       	brcc	.+12     	; 0x545c <sqrt+0x40>
    5450:	62 1b       	sub	r22, r18
    5452:	73 0b       	sbc	r23, r19
    5454:	84 0b       	sbc	r24, r20
    5456:	20 29       	or	r18, r0
    5458:	31 29       	or	r19, r1
    545a:	4a 2b       	or	r20, r26
    545c:	a6 95       	lsr	r26
    545e:	17 94       	ror	r1
    5460:	07 94       	ror	r0
    5462:	20 25       	eor	r18, r0
    5464:	31 25       	eor	r19, r1
    5466:	4a 27       	eor	r20, r26
    5468:	58 f7       	brcc	.-42     	; 0x5440 <sqrt+0x24>
    546a:	66 0f       	add	r22, r22
    546c:	77 1f       	adc	r23, r23
    546e:	88 1f       	adc	r24, r24
    5470:	20 f0       	brcs	.+8      	; 0x547a <sqrt+0x5e>
    5472:	26 17       	cp	r18, r22
    5474:	37 07       	cpc	r19, r23
    5476:	48 07       	cpc	r20, r24
    5478:	30 f4       	brcc	.+12     	; 0x5486 <sqrt+0x6a>
    547a:	62 0b       	sbc	r22, r18
    547c:	73 0b       	sbc	r23, r19
    547e:	84 0b       	sbc	r24, r20
    5480:	20 0d       	add	r18, r0
    5482:	31 1d       	adc	r19, r1
    5484:	41 1d       	adc	r20, r1
    5486:	a0 95       	com	r26
    5488:	81 f7       	brne	.-32     	; 0x546a <sqrt+0x4e>
    548a:	b9 01       	movw	r22, r18
    548c:	84 2f       	mov	r24, r20
    548e:	91 58       	subi	r25, 0x81	; 129
    5490:	88 0f       	add	r24, r24
    5492:	96 95       	lsr	r25
    5494:	87 95       	ror	r24
    5496:	08 95       	ret

00005498 <__fp_mpack>:
    5498:	9f 3f       	cpi	r25, 0xFF	; 255
    549a:	31 f0       	breq	.+12     	; 0x54a8 <__fp_mpack_finite+0xc>

0000549c <__fp_mpack_finite>:
    549c:	91 50       	subi	r25, 0x01	; 1
    549e:	20 f4       	brcc	.+8      	; 0x54a8 <__fp_mpack_finite+0xc>
    54a0:	87 95       	ror	r24
    54a2:	77 95       	ror	r23
    54a4:	67 95       	ror	r22
    54a6:	b7 95       	ror	r27
    54a8:	88 0f       	add	r24, r24
    54aa:	91 1d       	adc	r25, r1
    54ac:	96 95       	lsr	r25
    54ae:	87 95       	ror	r24
    54b0:	97 f9       	bld	r25, 7
    54b2:	08 95       	ret

000054b4 <__fp_norm2>:
    54b4:	91 50       	subi	r25, 0x01	; 1
    54b6:	50 40       	sbci	r21, 0x00	; 0
    54b8:	66 0f       	add	r22, r22
    54ba:	77 1f       	adc	r23, r23
    54bc:	88 1f       	adc	r24, r24
    54be:	d2 f7       	brpl	.-12     	; 0x54b4 <__fp_norm2>
    54c0:	08 95       	ret

000054c2 <__fp_powsodd>:
    54c2:	9f 93       	push	r25
    54c4:	8f 93       	push	r24
    54c6:	7f 93       	push	r23
    54c8:	6f 93       	push	r22
    54ca:	ff 93       	push	r31
    54cc:	ef 93       	push	r30
    54ce:	9b 01       	movw	r18, r22
    54d0:	ac 01       	movw	r20, r24
    54d2:	5b d8       	rcall	.-3914   	; 0x458a <__mulsf3>
    54d4:	ef 91       	pop	r30
    54d6:	ff 91       	pop	r31
    54d8:	96 de       	rcall	.-724    	; 0x5206 <__fp_powser>
    54da:	2f 91       	pop	r18
    54dc:	3f 91       	pop	r19
    54de:	4f 91       	pop	r20
    54e0:	5f 91       	pop	r21
    54e2:	53 c8       	rjmp	.-3930   	; 0x458a <__mulsf3>

000054e4 <calloc>:
    54e4:	ef 92       	push	r14
    54e6:	ff 92       	push	r15
    54e8:	0f 93       	push	r16
    54ea:	1f 93       	push	r17
    54ec:	cf 93       	push	r28
    54ee:	df 93       	push	r29
    54f0:	68 9f       	mul	r22, r24
    54f2:	80 01       	movw	r16, r0
    54f4:	69 9f       	mul	r22, r25
    54f6:	10 0d       	add	r17, r0
    54f8:	78 9f       	mul	r23, r24
    54fa:	10 0d       	add	r17, r0
    54fc:	11 24       	eor	r1, r1
    54fe:	c8 01       	movw	r24, r16
    5500:	0e 94 97 2a 	call	0x552e	; 0x552e <malloc>
    5504:	e8 2e       	mov	r14, r24
    5506:	e7 01       	movw	r28, r14
    5508:	7e 01       	movw	r14, r28
    550a:	f9 2e       	mov	r15, r25
    550c:	e7 01       	movw	r28, r14
    550e:	e1 14       	cp	r14, r1
    5510:	f1 04       	cpc	r15, r1
    5512:	31 f0       	breq	.+12     	; 0x5520 <calloc+0x3c>
    5514:	8e 2d       	mov	r24, r14
    5516:	60 e0       	ldi	r22, 0x00	; 0
    5518:	70 e0       	ldi	r23, 0x00	; 0
    551a:	a8 01       	movw	r20, r16
    551c:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <memset>
    5520:	7e 01       	movw	r14, r28
    5522:	ce 01       	movw	r24, r28
    5524:	cd b7       	in	r28, 0x3d	; 61
    5526:	de b7       	in	r29, 0x3e	; 62
    5528:	e6 e0       	ldi	r30, 0x06	; 6
    552a:	0c 94 59 28 	jmp	0x50b2	; 0x50b2 <__epilogue_restores__+0x18>

0000552e <malloc>:
    552e:	ef 92       	push	r14
    5530:	ff 92       	push	r15
    5532:	0f 93       	push	r16
    5534:	1f 93       	push	r17
    5536:	cf 93       	push	r28
    5538:	df 93       	push	r29
    553a:	82 30       	cpi	r24, 0x02	; 2
    553c:	91 05       	cpc	r25, r1
    553e:	10 f4       	brcc	.+4      	; 0x5544 <malloc+0x16>
    5540:	82 e0       	ldi	r24, 0x02	; 2
    5542:	90 e0       	ldi	r25, 0x00	; 0
    5544:	c0 91 9b 07 	lds	r28, 0x079B
    5548:	d0 91 9c 07 	lds	r29, 0x079C
    554c:	20 e0       	ldi	r18, 0x00	; 0
    554e:	30 e0       	ldi	r19, 0x00	; 0
    5550:	40 e0       	ldi	r20, 0x00	; 0
    5552:	50 e0       	ldi	r21, 0x00	; 0
    5554:	29 c0       	rjmp	.+82     	; 0x55a8 <malloc+0x7a>
    5556:	68 81       	ld	r22, Y
    5558:	79 81       	ldd	r23, Y+1	; 0x01
    555a:	68 17       	cp	r22, r24
    555c:	79 07       	cpc	r23, r25
    555e:	d8 f0       	brcs	.+54     	; 0x5596 <malloc+0x68>
    5560:	68 17       	cp	r22, r24
    5562:	79 07       	cpc	r23, r25
    5564:	79 f4       	brne	.+30     	; 0x5584 <malloc+0x56>
    5566:	8a 81       	ldd	r24, Y+2	; 0x02
    5568:	9b 81       	ldd	r25, Y+3	; 0x03
    556a:	21 15       	cp	r18, r1
    556c:	31 05       	cpc	r19, r1
    556e:	21 f0       	breq	.+8      	; 0x5578 <malloc+0x4a>
    5570:	f9 01       	movw	r30, r18
    5572:	93 83       	std	Z+3, r25	; 0x03
    5574:	82 83       	std	Z+2, r24	; 0x02
    5576:	04 c0       	rjmp	.+8      	; 0x5580 <malloc+0x52>
    5578:	90 93 9c 07 	sts	0x079C, r25
    557c:	80 93 9b 07 	sts	0x079B, r24
    5580:	de 01       	movw	r26, r28
    5582:	2a c0       	rjmp	.+84     	; 0x55d8 <malloc+0xaa>
    5584:	41 15       	cp	r20, r1
    5586:	51 05       	cpc	r21, r1
    5588:	19 f0       	breq	.+6      	; 0x5590 <malloc+0x62>
    558a:	64 17       	cp	r22, r20
    558c:	75 07       	cpc	r23, r21
    558e:	18 f4       	brcc	.+6      	; 0x5596 <malloc+0x68>
    5590:	fe 01       	movw	r30, r28
    5592:	ab 01       	movw	r20, r22
    5594:	d9 01       	movw	r26, r18
    5596:	9e 01       	movw	r18, r28
    5598:	7a 81       	ldd	r23, Y+2	; 0x02
    559a:	6b 81       	ldd	r22, Y+3	; 0x03
    559c:	e7 2e       	mov	r14, r23
    559e:	e7 01       	movw	r28, r14
    55a0:	7e 01       	movw	r14, r28
    55a2:	06 2f       	mov	r16, r22
    55a4:	f6 2e       	mov	r15, r22
    55a6:	e7 01       	movw	r28, r14
    55a8:	20 97       	sbiw	r28, 0x00	; 0
    55aa:	a9 f6       	brne	.-86     	; 0x5556 <malloc+0x28>
    55ac:	41 15       	cp	r20, r1
    55ae:	51 05       	cpc	r21, r1
    55b0:	f9 f0       	breq	.+62     	; 0x55f0 <malloc+0xc2>
    55b2:	48 1b       	sub	r20, r24
    55b4:	59 0b       	sbc	r21, r25
    55b6:	44 30       	cpi	r20, 0x04	; 4
    55b8:	51 05       	cpc	r21, r1
    55ba:	80 f4       	brcc	.+32     	; 0x55dc <malloc+0xae>
    55bc:	82 81       	ldd	r24, Z+2	; 0x02
    55be:	93 81       	ldd	r25, Z+3	; 0x03
    55c0:	10 97       	sbiw	r26, 0x00	; 0
    55c2:	29 f0       	breq	.+10     	; 0x55ce <malloc+0xa0>
    55c4:	13 96       	adiw	r26, 0x03	; 3
    55c6:	9c 93       	st	X, r25
    55c8:	8e 93       	st	-X, r24
    55ca:	12 97       	sbiw	r26, 0x02	; 2
    55cc:	04 c0       	rjmp	.+8      	; 0x55d6 <malloc+0xa8>
    55ce:	90 93 9c 07 	sts	0x079C, r25
    55d2:	80 93 9b 07 	sts	0x079B, r24
    55d6:	df 01       	movw	r26, r30
    55d8:	12 96       	adiw	r26, 0x02	; 2
    55da:	45 c0       	rjmp	.+138    	; 0x5666 <malloc+0x138>
    55dc:	df 01       	movw	r26, r30
    55de:	a4 0f       	add	r26, r20
    55e0:	b5 1f       	adc	r27, r21
    55e2:	8d 93       	st	X+, r24
    55e4:	9d 93       	st	X+, r25
    55e6:	42 50       	subi	r20, 0x02	; 2
    55e8:	50 40       	sbci	r21, 0x00	; 0
    55ea:	51 83       	std	Z+1, r21	; 0x01
    55ec:	40 83       	st	Z, r20
    55ee:	3b c0       	rjmp	.+118    	; 0x5666 <malloc+0x138>
    55f0:	20 91 99 07 	lds	r18, 0x0799
    55f4:	30 91 9a 07 	lds	r19, 0x079A
    55f8:	21 15       	cp	r18, r1
    55fa:	31 05       	cpc	r19, r1
    55fc:	41 f4       	brne	.+16     	; 0x560e <malloc+0xe0>
    55fe:	20 91 d5 02 	lds	r18, 0x02D5
    5602:	30 91 d6 02 	lds	r19, 0x02D6
    5606:	30 93 9a 07 	sts	0x079A, r19
    560a:	20 93 99 07 	sts	0x0799, r18
    560e:	20 91 d7 02 	lds	r18, 0x02D7
    5612:	30 91 d8 02 	lds	r19, 0x02D8
    5616:	21 15       	cp	r18, r1
    5618:	31 05       	cpc	r19, r1
    561a:	41 f4       	brne	.+16     	; 0x562c <malloc+0xfe>
    561c:	2d b7       	in	r18, 0x3d	; 61
    561e:	3e b7       	in	r19, 0x3e	; 62
    5620:	40 91 d3 02 	lds	r20, 0x02D3
    5624:	50 91 d4 02 	lds	r21, 0x02D4
    5628:	24 1b       	sub	r18, r20
    562a:	35 0b       	sbc	r19, r21
    562c:	a0 91 99 07 	lds	r26, 0x0799
    5630:	b0 91 9a 07 	lds	r27, 0x079A
    5634:	a2 17       	cp	r26, r18
    5636:	b3 07       	cpc	r27, r19
    5638:	a0 f4       	brcc	.+40     	; 0x5662 <malloc+0x134>
    563a:	2a 1b       	sub	r18, r26
    563c:	3b 0b       	sbc	r19, r27
    563e:	28 17       	cp	r18, r24
    5640:	39 07       	cpc	r19, r25
    5642:	78 f0       	brcs	.+30     	; 0x5662 <malloc+0x134>
    5644:	ac 01       	movw	r20, r24
    5646:	4e 5f       	subi	r20, 0xFE	; 254
    5648:	5f 4f       	sbci	r21, 0xFF	; 255
    564a:	24 17       	cp	r18, r20
    564c:	35 07       	cpc	r19, r21
    564e:	48 f0       	brcs	.+18     	; 0x5662 <malloc+0x134>
    5650:	4a 0f       	add	r20, r26
    5652:	5b 1f       	adc	r21, r27
    5654:	50 93 9a 07 	sts	0x079A, r21
    5658:	40 93 99 07 	sts	0x0799, r20
    565c:	8d 93       	st	X+, r24
    565e:	9d 93       	st	X+, r25
    5660:	02 c0       	rjmp	.+4      	; 0x5666 <malloc+0x138>
    5662:	a0 e0       	ldi	r26, 0x00	; 0
    5664:	b0 e0       	ldi	r27, 0x00	; 0
    5666:	cd 01       	movw	r24, r26
    5668:	cd b7       	in	r28, 0x3d	; 61
    566a:	de b7       	in	r29, 0x3e	; 62
    566c:	e6 e0       	ldi	r30, 0x06	; 6
    566e:	0c 94 59 28 	jmp	0x50b2	; 0x50b2 <__epilogue_restores__+0x18>

00005672 <free>:
    5672:	cf 93       	push	r28
    5674:	df 93       	push	r29
    5676:	00 97       	sbiw	r24, 0x00	; 0
    5678:	09 f4       	brne	.+2      	; 0x567c <free+0xa>
    567a:	8f c0       	rjmp	.+286    	; 0x579a <free+0x128>
    567c:	fc 01       	movw	r30, r24
    567e:	32 97       	sbiw	r30, 0x02	; 2
    5680:	13 82       	std	Z+3, r1	; 0x03
    5682:	12 82       	std	Z+2, r1	; 0x02
    5684:	60 91 9b 07 	lds	r22, 0x079B
    5688:	70 91 9c 07 	lds	r23, 0x079C
    568c:	61 15       	cp	r22, r1
    568e:	71 05       	cpc	r23, r1
    5690:	81 f4       	brne	.+32     	; 0x56b2 <free+0x40>
    5692:	20 81       	ld	r18, Z
    5694:	31 81       	ldd	r19, Z+1	; 0x01
    5696:	28 0f       	add	r18, r24
    5698:	39 1f       	adc	r19, r25
    569a:	80 91 99 07 	lds	r24, 0x0799
    569e:	90 91 9a 07 	lds	r25, 0x079A
    56a2:	82 17       	cp	r24, r18
    56a4:	93 07       	cpc	r25, r19
    56a6:	61 f5       	brne	.+88     	; 0x5700 <free+0x8e>
    56a8:	f0 93 9a 07 	sts	0x079A, r31
    56ac:	e0 93 99 07 	sts	0x0799, r30
    56b0:	74 c0       	rjmp	.+232    	; 0x579a <free+0x128>
    56b2:	eb 01       	movw	r28, r22
    56b4:	80 e0       	ldi	r24, 0x00	; 0
    56b6:	90 e0       	ldi	r25, 0x00	; 0
    56b8:	ce 17       	cp	r28, r30
    56ba:	df 07       	cpc	r29, r31
    56bc:	40 f4       	brcc	.+16     	; 0x56ce <free+0x5c>
    56be:	2a 81       	ldd	r18, Y+2	; 0x02
    56c0:	3b 81       	ldd	r19, Y+3	; 0x03
    56c2:	ce 01       	movw	r24, r28
    56c4:	21 15       	cp	r18, r1
    56c6:	31 05       	cpc	r19, r1
    56c8:	01 f1       	breq	.+64     	; 0x570a <free+0x98>
    56ca:	e9 01       	movw	r28, r18
    56cc:	f5 cf       	rjmp	.-22     	; 0x56b8 <free+0x46>
    56ce:	d3 83       	std	Z+3, r29	; 0x03
    56d0:	c2 83       	std	Z+2, r28	; 0x02
    56d2:	df 01       	movw	r26, r30
    56d4:	4d 91       	ld	r20, X+
    56d6:	5d 91       	ld	r21, X+
    56d8:	9d 01       	movw	r18, r26
    56da:	24 0f       	add	r18, r20
    56dc:	35 1f       	adc	r19, r21
    56de:	c2 17       	cp	r28, r18
    56e0:	d3 07       	cpc	r29, r19
    56e2:	61 f4       	brne	.+24     	; 0x56fc <free+0x8a>
    56e4:	28 81       	ld	r18, Y
    56e6:	39 81       	ldd	r19, Y+1	; 0x01
    56e8:	24 0f       	add	r18, r20
    56ea:	35 1f       	adc	r19, r21
    56ec:	2e 5f       	subi	r18, 0xFE	; 254
    56ee:	3f 4f       	sbci	r19, 0xFF	; 255
    56f0:	31 83       	std	Z+1, r19	; 0x01
    56f2:	20 83       	st	Z, r18
    56f4:	2a 81       	ldd	r18, Y+2	; 0x02
    56f6:	3b 81       	ldd	r19, Y+3	; 0x03
    56f8:	33 83       	std	Z+3, r19	; 0x03
    56fa:	22 83       	std	Z+2, r18	; 0x02
    56fc:	00 97       	sbiw	r24, 0x00	; 0
    56fe:	29 f4       	brne	.+10     	; 0x570a <free+0x98>
    5700:	f0 93 9c 07 	sts	0x079C, r31
    5704:	e0 93 9b 07 	sts	0x079B, r30
    5708:	48 c0       	rjmp	.+144    	; 0x579a <free+0x128>
    570a:	dc 01       	movw	r26, r24
    570c:	13 96       	adiw	r26, 0x03	; 3
    570e:	fc 93       	st	X, r31
    5710:	ee 93       	st	-X, r30
    5712:	12 97       	sbiw	r26, 0x02	; 2
    5714:	ec 01       	movw	r28, r24
    5716:	49 91       	ld	r20, Y+
    5718:	59 91       	ld	r21, Y+
    571a:	c4 0f       	add	r28, r20
    571c:	d5 1f       	adc	r29, r21
    571e:	ec 17       	cp	r30, r28
    5720:	fd 07       	cpc	r31, r29
    5722:	79 f4       	brne	.+30     	; 0x5742 <free+0xd0>
    5724:	20 81       	ld	r18, Z
    5726:	31 81       	ldd	r19, Z+1	; 0x01
    5728:	24 0f       	add	r18, r20
    572a:	35 1f       	adc	r19, r21
    572c:	2e 5f       	subi	r18, 0xFE	; 254
    572e:	3f 4f       	sbci	r19, 0xFF	; 255
    5730:	11 96       	adiw	r26, 0x01	; 1
    5732:	3c 93       	st	X, r19
    5734:	2e 93       	st	-X, r18
    5736:	22 81       	ldd	r18, Z+2	; 0x02
    5738:	33 81       	ldd	r19, Z+3	; 0x03
    573a:	13 96       	adiw	r26, 0x03	; 3
    573c:	3c 93       	st	X, r19
    573e:	2e 93       	st	-X, r18
    5740:	12 97       	sbiw	r26, 0x02	; 2
    5742:	e0 e0       	ldi	r30, 0x00	; 0
    5744:	f0 e0       	ldi	r31, 0x00	; 0
    5746:	db 01       	movw	r26, r22
    5748:	12 96       	adiw	r26, 0x02	; 2
    574a:	8d 91       	ld	r24, X+
    574c:	9c 91       	ld	r25, X
    574e:	13 97       	sbiw	r26, 0x03	; 3
    5750:	00 97       	sbiw	r24, 0x00	; 0
    5752:	21 f0       	breq	.+8      	; 0x575c <free+0xea>
    5754:	e6 2f       	mov	r30, r22
    5756:	f7 2f       	mov	r31, r23
    5758:	bc 01       	movw	r22, r24
    575a:	f5 cf       	rjmp	.-22     	; 0x5746 <free+0xd4>
    575c:	9b 01       	movw	r18, r22
    575e:	2e 5f       	subi	r18, 0xFE	; 254
    5760:	3f 4f       	sbci	r19, 0xFF	; 255
    5762:	db 01       	movw	r26, r22
    5764:	8d 91       	ld	r24, X+
    5766:	9c 91       	ld	r25, X
    5768:	11 97       	sbiw	r26, 0x01	; 1
    576a:	82 0f       	add	r24, r18
    576c:	93 1f       	adc	r25, r19
    576e:	40 91 99 07 	lds	r20, 0x0799
    5772:	50 91 9a 07 	lds	r21, 0x079A
    5776:	48 17       	cp	r20, r24
    5778:	59 07       	cpc	r21, r25
    577a:	79 f4       	brne	.+30     	; 0x579a <free+0x128>
    577c:	30 97       	sbiw	r30, 0x00	; 0
    577e:	29 f4       	brne	.+10     	; 0x578a <free+0x118>
    5780:	10 92 9c 07 	sts	0x079C, r1
    5784:	10 92 9b 07 	sts	0x079B, r1
    5788:	02 c0       	rjmp	.+4      	; 0x578e <free+0x11c>
    578a:	13 82       	std	Z+3, r1	; 0x03
    578c:	12 82       	std	Z+2, r1	; 0x02
    578e:	22 50       	subi	r18, 0x02	; 2
    5790:	30 40       	sbci	r19, 0x00	; 0
    5792:	30 93 9a 07 	sts	0x079A, r19
    5796:	20 93 99 07 	sts	0x0799, r18
    579a:	df 91       	pop	r29
    579c:	cf 91       	pop	r28
    579e:	08 95       	ret

000057a0 <realloc>:
    57a0:	a0 e0       	ldi	r26, 0x00	; 0
    57a2:	b0 e0       	ldi	r27, 0x00	; 0
    57a4:	e6 ed       	ldi	r30, 0xD6	; 214
    57a6:	fb e2       	ldi	r31, 0x2B	; 43
    57a8:	0c 94 35 28 	jmp	0x506a	; 0x506a <__prologue_saves__+0x8>
    57ac:	ec 01       	movw	r28, r24
    57ae:	cb 01       	movw	r24, r22
    57b0:	20 97       	sbiw	r28, 0x00	; 0
    57b2:	41 f4       	brne	.+16     	; 0x57c4 <realloc+0x24>
    57b4:	0e 94 97 2a 	call	0x552e	; 0x552e <malloc>
    57b8:	e8 2e       	mov	r14, r24
    57ba:	e7 01       	movw	r28, r14
    57bc:	7e 01       	movw	r14, r28
    57be:	f9 2e       	mov	r15, r25
    57c0:	e7 01       	movw	r28, r14
    57c2:	b9 c0       	rjmp	.+370    	; 0x5936 <realloc+0x196>
    57c4:	be ef       	ldi	r27, 0xFE	; 254
    57c6:	eb 2e       	mov	r14, r27
    57c8:	bf ef       	ldi	r27, 0xFF	; 255
    57ca:	fb 2e       	mov	r15, r27
    57cc:	ec 0e       	add	r14, r28
    57ce:	fd 1e       	adc	r15, r29
    57d0:	ae 01       	movw	r20, r28
    57d2:	46 0f       	add	r20, r22
    57d4:	57 1f       	adc	r21, r23
    57d6:	4e 15       	cp	r20, r14
    57d8:	5f 05       	cpc	r21, r15
    57da:	08 f4       	brcc	.+2      	; 0x57de <realloc+0x3e>
    57dc:	aa c0       	rjmp	.+340    	; 0x5932 <realloc+0x192>
    57de:	d7 01       	movw	r26, r14
    57e0:	2d 91       	ld	r18, X+
    57e2:	3c 91       	ld	r19, X
    57e4:	11 97       	sbiw	r26, 0x01	; 1
    57e6:	26 17       	cp	r18, r22
    57e8:	37 07       	cpc	r19, r23
    57ea:	c0 f0       	brcs	.+48     	; 0x581c <realloc+0x7c>
    57ec:	25 30       	cpi	r18, 0x05	; 5
    57ee:	31 05       	cpc	r19, r1
    57f0:	08 f4       	brcc	.+2      	; 0x57f4 <realloc+0x54>
    57f2:	a1 c0       	rjmp	.+322    	; 0x5936 <realloc+0x196>
    57f4:	b9 01       	movw	r22, r18
    57f6:	64 50       	subi	r22, 0x04	; 4
    57f8:	70 40       	sbci	r23, 0x00	; 0
    57fa:	68 17       	cp	r22, r24
    57fc:	79 07       	cpc	r23, r25
    57fe:	08 f4       	brcc	.+2      	; 0x5802 <realloc+0x62>
    5800:	9a c0       	rjmp	.+308    	; 0x5936 <realloc+0x196>
    5802:	22 50       	subi	r18, 0x02	; 2
    5804:	30 40       	sbci	r19, 0x00	; 0
    5806:	28 1b       	sub	r18, r24
    5808:	39 0b       	sbc	r19, r25
    580a:	fa 01       	movw	r30, r20
    580c:	21 93       	st	Z+, r18
    580e:	31 93       	st	Z+, r19
    5810:	8d 93       	st	X+, r24
    5812:	9c 93       	st	X, r25
    5814:	cf 01       	movw	r24, r30
    5816:	0e 94 39 2b 	call	0x5672	; 0x5672 <free>
    581a:	8d c0       	rjmp	.+282    	; 0x5936 <realloc+0x196>
    581c:	6b 01       	movw	r12, r22
    581e:	c2 1a       	sub	r12, r18
    5820:	d3 0a       	sbc	r13, r19
    5822:	5e 01       	movw	r10, r28
    5824:	a2 0e       	add	r10, r18
    5826:	b3 1e       	adc	r11, r19
    5828:	e0 91 9b 07 	lds	r30, 0x079B
    582c:	f0 91 9c 07 	lds	r31, 0x079C
    5830:	66 24       	eor	r6, r6
    5832:	77 24       	eor	r7, r7
    5834:	00 e0       	ldi	r16, 0x00	; 0
    5836:	10 e0       	ldi	r17, 0x00	; 0
    5838:	45 c0       	rjmp	.+138    	; 0x58c4 <realloc+0x124>
    583a:	ea 15       	cp	r30, r10
    583c:	fb 05       	cpc	r31, r11
    583e:	b9 f5       	brne	.+110    	; 0x58ae <realloc+0x10e>
    5840:	60 81       	ld	r22, Z
    5842:	71 81       	ldd	r23, Z+1	; 0x01
    5844:	a2 e0       	ldi	r26, 0x02	; 2
    5846:	8a 2e       	mov	r8, r26
    5848:	91 2c       	mov	r9, r1
    584a:	86 0e       	add	r8, r22
    584c:	97 1e       	adc	r9, r23
    584e:	8c 14       	cp	r8, r12
    5850:	9d 04       	cpc	r9, r13
    5852:	68 f1       	brcs	.+90     	; 0x58ae <realloc+0x10e>
    5854:	8b 01       	movw	r16, r22
    5856:	0c 19       	sub	r16, r12
    5858:	1d 09       	sbc	r17, r13
    585a:	0e 5f       	subi	r16, 0xFE	; 254
    585c:	1f 4f       	sbci	r17, 0xFF	; 255
    585e:	b2 80       	ldd	r11, Z+2	; 0x02
    5860:	a3 80       	ldd	r10, Z+3	; 0x03
    5862:	05 30       	cpi	r16, 0x05	; 5
    5864:	11 05       	cpc	r17, r1
    5866:	60 f0       	brcs	.+24     	; 0x5880 <realloc+0xe0>
    5868:	fa 01       	movw	r30, r20
    586a:	b2 82       	std	Z+2, r11	; 0x02
    586c:	a3 82       	std	Z+3, r10	; 0x03
    586e:	6c 19       	sub	r22, r12
    5870:	7d 09       	sbc	r23, r13
    5872:	71 83       	std	Z+1, r23	; 0x01
    5874:	60 83       	st	Z, r22
    5876:	d7 01       	movw	r26, r14
    5878:	11 96       	adiw	r26, 0x01	; 1
    587a:	9c 93       	st	X, r25
    587c:	8e 93       	st	-X, r24
    587e:	09 c0       	rjmp	.+18     	; 0x5892 <realloc+0xf2>
    5880:	2e 5f       	subi	r18, 0xFE	; 254
    5882:	3f 4f       	sbci	r19, 0xFF	; 255
    5884:	26 0f       	add	r18, r22
    5886:	37 1f       	adc	r19, r23
    5888:	f7 01       	movw	r30, r14
    588a:	31 83       	std	Z+1, r19	; 0x01
    588c:	20 83       	st	Z, r18
    588e:	eb 2d       	mov	r30, r11
    5890:	fa 2d       	mov	r31, r10
    5892:	61 14       	cp	r6, r1
    5894:	71 04       	cpc	r7, r1
    5896:	31 f0       	breq	.+12     	; 0x58a4 <realloc+0x104>
    5898:	d3 01       	movw	r26, r6
    589a:	13 96       	adiw	r26, 0x03	; 3
    589c:	fc 93       	st	X, r31
    589e:	ee 93       	st	-X, r30
    58a0:	12 97       	sbiw	r26, 0x02	; 2
    58a2:	49 c0       	rjmp	.+146    	; 0x5936 <realloc+0x196>
    58a4:	f0 93 9c 07 	sts	0x079C, r31
    58a8:	e0 93 9b 07 	sts	0x079B, r30
    58ac:	44 c0       	rjmp	.+136    	; 0x5936 <realloc+0x196>
    58ae:	60 81       	ld	r22, Z
    58b0:	71 81       	ldd	r23, Z+1	; 0x01
    58b2:	06 17       	cp	r16, r22
    58b4:	17 07       	cpc	r17, r23
    58b6:	08 f4       	brcc	.+2      	; 0x58ba <realloc+0x11a>
    58b8:	8b 01       	movw	r16, r22
    58ba:	3f 01       	movw	r6, r30
    58bc:	72 81       	ldd	r23, Z+2	; 0x02
    58be:	63 81       	ldd	r22, Z+3	; 0x03
    58c0:	e7 2f       	mov	r30, r23
    58c2:	f6 2f       	mov	r31, r22
    58c4:	30 97       	sbiw	r30, 0x00	; 0
    58c6:	09 f0       	breq	.+2      	; 0x58ca <realloc+0x12a>
    58c8:	b8 cf       	rjmp	.-144    	; 0x583a <realloc+0x9a>
    58ca:	20 91 99 07 	lds	r18, 0x0799
    58ce:	30 91 9a 07 	lds	r19, 0x079A
    58d2:	2a 15       	cp	r18, r10
    58d4:	3b 05       	cpc	r19, r11
    58d6:	e9 f4       	brne	.+58     	; 0x5912 <realloc+0x172>
    58d8:	08 17       	cp	r16, r24
    58da:	19 07       	cpc	r17, r25
    58dc:	d0 f4       	brcc	.+52     	; 0x5912 <realloc+0x172>
    58de:	20 91 d7 02 	lds	r18, 0x02D7
    58e2:	30 91 d8 02 	lds	r19, 0x02D8
    58e6:	21 15       	cp	r18, r1
    58e8:	31 05       	cpc	r19, r1
    58ea:	41 f4       	brne	.+16     	; 0x58fc <realloc+0x15c>
    58ec:	2d b7       	in	r18, 0x3d	; 61
    58ee:	3e b7       	in	r19, 0x3e	; 62
    58f0:	60 91 d3 02 	lds	r22, 0x02D3
    58f4:	70 91 d4 02 	lds	r23, 0x02D4
    58f8:	26 1b       	sub	r18, r22
    58fa:	37 0b       	sbc	r19, r23
    58fc:	42 17       	cp	r20, r18
    58fe:	53 07       	cpc	r21, r19
    5900:	c0 f4       	brcc	.+48     	; 0x5932 <realloc+0x192>
    5902:	50 93 9a 07 	sts	0x079A, r21
    5906:	40 93 99 07 	sts	0x0799, r20
    590a:	f7 01       	movw	r30, r14
    590c:	91 83       	std	Z+1, r25	; 0x01
    590e:	80 83       	st	Z, r24
    5910:	12 c0       	rjmp	.+36     	; 0x5936 <realloc+0x196>
    5912:	0e 94 97 2a 	call	0x552e	; 0x552e <malloc>
    5916:	8c 01       	movw	r16, r24
    5918:	00 97       	sbiw	r24, 0x00	; 0
    591a:	59 f0       	breq	.+22     	; 0x5932 <realloc+0x192>
    591c:	d7 01       	movw	r26, r14
    591e:	4d 91       	ld	r20, X+
    5920:	5c 91       	ld	r21, X
    5922:	be 01       	movw	r22, r28
    5924:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <memcpy>
    5928:	ce 01       	movw	r24, r28
    592a:	0e 94 39 2b 	call	0x5672	; 0x5672 <free>
    592e:	e8 01       	movw	r28, r16
    5930:	02 c0       	rjmp	.+4      	; 0x5936 <realloc+0x196>
    5932:	c0 e0       	ldi	r28, 0x00	; 0
    5934:	d0 e0       	ldi	r29, 0x00	; 0
    5936:	ce 01       	movw	r24, r28
    5938:	cd b7       	in	r28, 0x3d	; 61
    593a:	de b7       	in	r29, 0x3e	; 62
    593c:	ee e0       	ldi	r30, 0x0E	; 14
    593e:	0c 94 51 28 	jmp	0x50a2	; 0x50a2 <__epilogue_restores__+0x8>

00005942 <atol>:
    5942:	1f 93       	push	r17
    5944:	fc 01       	movw	r30, r24
    5946:	99 27       	eor	r25, r25
    5948:	88 27       	eor	r24, r24
    594a:	bc 01       	movw	r22, r24
    594c:	e8 94       	clt
    594e:	11 91       	ld	r17, Z+
    5950:	10 32       	cpi	r17, 0x20	; 32
    5952:	e9 f3       	breq	.-6      	; 0x594e <atol+0xc>
    5954:	19 30       	cpi	r17, 0x09	; 9
    5956:	10 f0       	brcs	.+4      	; 0x595c <atol+0x1a>
    5958:	1e 30       	cpi	r17, 0x0E	; 14
    595a:	c8 f3       	brcs	.-14     	; 0x594e <atol+0xc>
    595c:	1b 32       	cpi	r17, 0x2B	; 43
    595e:	51 f0       	breq	.+20     	; 0x5974 <atol+0x32>
    5960:	1d 32       	cpi	r17, 0x2D	; 45
    5962:	49 f4       	brne	.+18     	; 0x5976 <atol+0x34>
    5964:	68 94       	set
    5966:	06 c0       	rjmp	.+12     	; 0x5974 <atol+0x32>
    5968:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__mulsi_const_10>
    596c:	61 0f       	add	r22, r17
    596e:	71 1d       	adc	r23, r1
    5970:	81 1d       	adc	r24, r1
    5972:	91 1d       	adc	r25, r1
    5974:	11 91       	ld	r17, Z+
    5976:	10 53       	subi	r17, 0x30	; 48
    5978:	1a 30       	cpi	r17, 0x0A	; 10
    597a:	b0 f3       	brcs	.-20     	; 0x5968 <atol+0x26>
    597c:	3e f4       	brtc	.+14     	; 0x598c <atol+0x4a>
    597e:	90 95       	com	r25
    5980:	80 95       	com	r24
    5982:	70 95       	com	r23
    5984:	61 95       	neg	r22
    5986:	7f 4f       	sbci	r23, 0xFF	; 255
    5988:	8f 4f       	sbci	r24, 0xFF	; 255
    598a:	9f 4f       	sbci	r25, 0xFF	; 255
    598c:	1f 91       	pop	r17
    598e:	08 95       	ret

00005990 <isspace>:
    5990:	91 11       	cpse	r25, r1
    5992:	19 c3       	rjmp	.+1586   	; 0x5fc6 <__ctype_isfalse>
    5994:	80 32       	cpi	r24, 0x20	; 32
    5996:	19 f0       	breq	.+6      	; 0x599e <isspace+0xe>
    5998:	89 50       	subi	r24, 0x09	; 9
    599a:	85 50       	subi	r24, 0x05	; 5
    599c:	d0 f7       	brcc	.-12     	; 0x5992 <isspace+0x2>
    599e:	08 95       	ret

000059a0 <tolower>:
    59a0:	91 11       	cpse	r25, r1
    59a2:	08 95       	ret
    59a4:	81 54       	subi	r24, 0x41	; 65
    59a6:	8a 51       	subi	r24, 0x1A	; 26
    59a8:	08 f4       	brcc	.+2      	; 0x59ac <tolower+0xc>
    59aa:	80 5e       	subi	r24, 0xE0	; 224
    59ac:	85 5a       	subi	r24, 0xA5	; 165
    59ae:	08 95       	ret

000059b0 <toupper>:
    59b0:	91 11       	cpse	r25, r1
    59b2:	08 95       	ret
    59b4:	81 56       	subi	r24, 0x61	; 97
    59b6:	8a 51       	subi	r24, 0x1A	; 26
    59b8:	08 f4       	brcc	.+2      	; 0x59bc <toupper+0xc>
    59ba:	80 52       	subi	r24, 0x20	; 32
    59bc:	85 58       	subi	r24, 0x85	; 133
    59be:	08 95       	ret

000059c0 <memcpy>:
    59c0:	fb 01       	movw	r30, r22
    59c2:	dc 01       	movw	r26, r24
    59c4:	02 c0       	rjmp	.+4      	; 0x59ca <memcpy+0xa>
    59c6:	01 90       	ld	r0, Z+
    59c8:	0d 92       	st	X+, r0
    59ca:	41 50       	subi	r20, 0x01	; 1
    59cc:	50 40       	sbci	r21, 0x00	; 0
    59ce:	d8 f7       	brcc	.-10     	; 0x59c6 <memcpy+0x6>
    59d0:	08 95       	ret

000059d2 <memset>:
    59d2:	dc 01       	movw	r26, r24
    59d4:	01 c0       	rjmp	.+2      	; 0x59d8 <memset+0x6>
    59d6:	6d 93       	st	X+, r22
    59d8:	41 50       	subi	r20, 0x01	; 1
    59da:	50 40       	sbci	r21, 0x00	; 0
    59dc:	e0 f7       	brcc	.-8      	; 0x59d6 <memset+0x4>
    59de:	08 95       	ret

000059e0 <strcat>:
    59e0:	fb 01       	movw	r30, r22
    59e2:	dc 01       	movw	r26, r24
    59e4:	0d 90       	ld	r0, X+
    59e6:	00 20       	and	r0, r0
    59e8:	e9 f7       	brne	.-6      	; 0x59e4 <strcat+0x4>
    59ea:	11 97       	sbiw	r26, 0x01	; 1
    59ec:	01 90       	ld	r0, Z+
    59ee:	0d 92       	st	X+, r0
    59f0:	00 20       	and	r0, r0
    59f2:	e1 f7       	brne	.-8      	; 0x59ec <strcat+0xc>
    59f4:	08 95       	ret

000059f6 <strchr>:
    59f6:	fc 01       	movw	r30, r24
    59f8:	81 91       	ld	r24, Z+
    59fa:	86 17       	cp	r24, r22
    59fc:	21 f0       	breq	.+8      	; 0x5a06 <strchr+0x10>
    59fe:	88 23       	and	r24, r24
    5a00:	d9 f7       	brne	.-10     	; 0x59f8 <strchr+0x2>
    5a02:	99 27       	eor	r25, r25
    5a04:	08 95       	ret
    5a06:	31 97       	sbiw	r30, 0x01	; 1
    5a08:	cf 01       	movw	r24, r30
    5a0a:	08 95       	ret

00005a0c <strcmp>:
    5a0c:	fb 01       	movw	r30, r22
    5a0e:	dc 01       	movw	r26, r24
    5a10:	8d 91       	ld	r24, X+
    5a12:	01 90       	ld	r0, Z+
    5a14:	80 19       	sub	r24, r0
    5a16:	01 10       	cpse	r0, r1
    5a18:	d9 f3       	breq	.-10     	; 0x5a10 <strcmp+0x4>
    5a1a:	99 0b       	sbc	r25, r25
    5a1c:	08 95       	ret

00005a1e <strcpy>:
    5a1e:	fb 01       	movw	r30, r22
    5a20:	dc 01       	movw	r26, r24
    5a22:	01 90       	ld	r0, Z+
    5a24:	0d 92       	st	X+, r0
    5a26:	00 20       	and	r0, r0
    5a28:	e1 f7       	brne	.-8      	; 0x5a22 <strcpy+0x4>
    5a2a:	08 95       	ret

00005a2c <strncmp>:
    5a2c:	fb 01       	movw	r30, r22
    5a2e:	dc 01       	movw	r26, r24
    5a30:	41 50       	subi	r20, 0x01	; 1
    5a32:	50 40       	sbci	r21, 0x00	; 0
    5a34:	30 f0       	brcs	.+12     	; 0x5a42 <strncmp+0x16>
    5a36:	8d 91       	ld	r24, X+
    5a38:	01 90       	ld	r0, Z+
    5a3a:	80 19       	sub	r24, r0
    5a3c:	19 f4       	brne	.+6      	; 0x5a44 <strncmp+0x18>
    5a3e:	00 20       	and	r0, r0
    5a40:	b9 f7       	brne	.-18     	; 0x5a30 <strncmp+0x4>
    5a42:	88 1b       	sub	r24, r24
    5a44:	99 0b       	sbc	r25, r25
    5a46:	08 95       	ret

00005a48 <strncpy>:
    5a48:	fb 01       	movw	r30, r22
    5a4a:	dc 01       	movw	r26, r24
    5a4c:	41 50       	subi	r20, 0x01	; 1
    5a4e:	50 40       	sbci	r21, 0x00	; 0
    5a50:	48 f0       	brcs	.+18     	; 0x5a64 <strncpy+0x1c>
    5a52:	01 90       	ld	r0, Z+
    5a54:	0d 92       	st	X+, r0
    5a56:	00 20       	and	r0, r0
    5a58:	c9 f7       	brne	.-14     	; 0x5a4c <strncpy+0x4>
    5a5a:	01 c0       	rjmp	.+2      	; 0x5a5e <strncpy+0x16>
    5a5c:	1d 92       	st	X+, r1
    5a5e:	41 50       	subi	r20, 0x01	; 1
    5a60:	50 40       	sbci	r21, 0x00	; 0
    5a62:	e0 f7       	brcc	.-8      	; 0x5a5c <strncpy+0x14>
    5a64:	08 95       	ret

00005a66 <strrchr>:
    5a66:	fc 01       	movw	r30, r24
    5a68:	81 e0       	ldi	r24, 0x01	; 1
    5a6a:	90 e0       	ldi	r25, 0x00	; 0
    5a6c:	01 90       	ld	r0, Z+
    5a6e:	06 16       	cp	r0, r22
    5a70:	09 f4       	brne	.+2      	; 0x5a74 <strrchr+0xe>
    5a72:	cf 01       	movw	r24, r30
    5a74:	00 20       	and	r0, r0
    5a76:	d1 f7       	brne	.-12     	; 0x5a6c <strrchr+0x6>
    5a78:	01 97       	sbiw	r24, 0x01	; 1
    5a7a:	08 95       	ret

00005a7c <strstr>:
    5a7c:	fb 01       	movw	r30, r22
    5a7e:	51 91       	ld	r21, Z+
    5a80:	55 23       	and	r21, r21
    5a82:	a9 f0       	breq	.+42     	; 0x5aae <strstr+0x32>
    5a84:	bf 01       	movw	r22, r30
    5a86:	dc 01       	movw	r26, r24
    5a88:	4d 91       	ld	r20, X+
    5a8a:	45 17       	cp	r20, r21
    5a8c:	41 11       	cpse	r20, r1
    5a8e:	e1 f7       	brne	.-8      	; 0x5a88 <strstr+0xc>
    5a90:	59 f4       	brne	.+22     	; 0x5aa8 <strstr+0x2c>
    5a92:	cd 01       	movw	r24, r26
    5a94:	01 90       	ld	r0, Z+
    5a96:	00 20       	and	r0, r0
    5a98:	49 f0       	breq	.+18     	; 0x5aac <strstr+0x30>
    5a9a:	4d 91       	ld	r20, X+
    5a9c:	40 15       	cp	r20, r0
    5a9e:	41 11       	cpse	r20, r1
    5aa0:	c9 f3       	breq	.-14     	; 0x5a94 <strstr+0x18>
    5aa2:	fb 01       	movw	r30, r22
    5aa4:	41 11       	cpse	r20, r1
    5aa6:	ef cf       	rjmp	.-34     	; 0x5a86 <strstr+0xa>
    5aa8:	81 e0       	ldi	r24, 0x01	; 1
    5aaa:	90 e0       	ldi	r25, 0x00	; 0
    5aac:	01 97       	sbiw	r24, 0x01	; 1
    5aae:	08 95       	ret

00005ab0 <itoa>:
    5ab0:	fb 01       	movw	r30, r22
    5ab2:	9f 01       	movw	r18, r30
    5ab4:	e8 94       	clt
    5ab6:	42 30       	cpi	r20, 0x02	; 2
    5ab8:	c4 f0       	brlt	.+48     	; 0x5aea <itoa+0x3a>
    5aba:	45 32       	cpi	r20, 0x25	; 37
    5abc:	b4 f4       	brge	.+44     	; 0x5aea <itoa+0x3a>
    5abe:	4a 30       	cpi	r20, 0x0A	; 10
    5ac0:	29 f4       	brne	.+10     	; 0x5acc <itoa+0x1c>
    5ac2:	97 fb       	bst	r25, 7
    5ac4:	1e f4       	brtc	.+6      	; 0x5acc <itoa+0x1c>
    5ac6:	90 95       	com	r25
    5ac8:	81 95       	neg	r24
    5aca:	9f 4f       	sbci	r25, 0xFF	; 255
    5acc:	64 2f       	mov	r22, r20
    5ace:	77 27       	eor	r23, r23
    5ad0:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <__udivmodhi4>
    5ad4:	80 5d       	subi	r24, 0xD0	; 208
    5ad6:	8a 33       	cpi	r24, 0x3A	; 58
    5ad8:	0c f0       	brlt	.+2      	; 0x5adc <itoa+0x2c>
    5ada:	89 5d       	subi	r24, 0xD9	; 217
    5adc:	81 93       	st	Z+, r24
    5ade:	cb 01       	movw	r24, r22
    5ae0:	00 97       	sbiw	r24, 0x00	; 0
    5ae2:	a1 f7       	brne	.-24     	; 0x5acc <itoa+0x1c>
    5ae4:	16 f4       	brtc	.+4      	; 0x5aea <itoa+0x3a>
    5ae6:	5d e2       	ldi	r21, 0x2D	; 45
    5ae8:	51 93       	st	Z+, r21
    5aea:	10 82       	st	Z, r1
    5aec:	c9 01       	movw	r24, r18
    5aee:	0c 94 fc 2f 	jmp	0x5ff8	; 0x5ff8 <strrev>

00005af2 <ltoa>:
    5af2:	fa 01       	movw	r30, r20
    5af4:	cf 93       	push	r28
    5af6:	ff 93       	push	r31
    5af8:	ef 93       	push	r30
    5afa:	22 30       	cpi	r18, 0x02	; 2
    5afc:	44 f1       	brlt	.+80     	; 0x5b4e <ltoa+0x5c>
    5afe:	25 32       	cpi	r18, 0x25	; 37
    5b00:	34 f5       	brge	.+76     	; 0x5b4e <ltoa+0x5c>
    5b02:	c2 2f       	mov	r28, r18
    5b04:	e8 94       	clt
    5b06:	ca 30       	cpi	r28, 0x0A	; 10
    5b08:	49 f4       	brne	.+18     	; 0x5b1c <ltoa+0x2a>
    5b0a:	97 fb       	bst	r25, 7
    5b0c:	3e f4       	brtc	.+14     	; 0x5b1c <ltoa+0x2a>
    5b0e:	90 95       	com	r25
    5b10:	80 95       	com	r24
    5b12:	70 95       	com	r23
    5b14:	61 95       	neg	r22
    5b16:	7f 4f       	sbci	r23, 0xFF	; 255
    5b18:	8f 4f       	sbci	r24, 0xFF	; 255
    5b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5b1c:	2c 2f       	mov	r18, r28
    5b1e:	33 27       	eor	r19, r19
    5b20:	44 27       	eor	r20, r20
    5b22:	55 27       	eor	r21, r21
    5b24:	ff 93       	push	r31
    5b26:	ef 93       	push	r30
    5b28:	0e 94 0f 28 	call	0x501e	; 0x501e <__udivmodsi4>
    5b2c:	ef 91       	pop	r30
    5b2e:	ff 91       	pop	r31
    5b30:	60 5d       	subi	r22, 0xD0	; 208
    5b32:	6a 33       	cpi	r22, 0x3A	; 58
    5b34:	0c f0       	brlt	.+2      	; 0x5b38 <ltoa+0x46>
    5b36:	69 5d       	subi	r22, 0xD9	; 217
    5b38:	61 93       	st	Z+, r22
    5b3a:	b9 01       	movw	r22, r18
    5b3c:	ca 01       	movw	r24, r20
    5b3e:	60 50       	subi	r22, 0x00	; 0
    5b40:	70 40       	sbci	r23, 0x00	; 0
    5b42:	80 40       	sbci	r24, 0x00	; 0
    5b44:	90 40       	sbci	r25, 0x00	; 0
    5b46:	51 f7       	brne	.-44     	; 0x5b1c <ltoa+0x2a>
    5b48:	16 f4       	brtc	.+4      	; 0x5b4e <ltoa+0x5c>
    5b4a:	cd e2       	ldi	r28, 0x2D	; 45
    5b4c:	c1 93       	st	Z+, r28
    5b4e:	10 82       	st	Z, r1
    5b50:	8f 91       	pop	r24
    5b52:	9f 91       	pop	r25
    5b54:	cf 91       	pop	r28
    5b56:	0c 94 fc 2f 	jmp	0x5ff8	; 0x5ff8 <strrev>

00005b5a <__mulsi_const_10>:
    5b5a:	59 2f       	mov	r21, r25
    5b5c:	48 2f       	mov	r20, r24
    5b5e:	37 2f       	mov	r19, r23
    5b60:	26 2f       	mov	r18, r22
    5b62:	66 0f       	add	r22, r22
    5b64:	77 1f       	adc	r23, r23
    5b66:	88 1f       	adc	r24, r24
    5b68:	99 1f       	adc	r25, r25
    5b6a:	66 0f       	add	r22, r22
    5b6c:	77 1f       	adc	r23, r23
    5b6e:	88 1f       	adc	r24, r24
    5b70:	99 1f       	adc	r25, r25
    5b72:	62 0f       	add	r22, r18
    5b74:	73 1f       	adc	r23, r19
    5b76:	84 1f       	adc	r24, r20
    5b78:	95 1f       	adc	r25, r21
    5b7a:	66 0f       	add	r22, r22
    5b7c:	77 1f       	adc	r23, r23
    5b7e:	88 1f       	adc	r24, r24
    5b80:	99 1f       	adc	r25, r25
    5b82:	08 95       	ret

00005b84 <ultoa>:
    5b84:	fa 01       	movw	r30, r20
    5b86:	cf 93       	push	r28
    5b88:	ff 93       	push	r31
    5b8a:	ef 93       	push	r30
    5b8c:	22 30       	cpi	r18, 0x02	; 2
    5b8e:	cc f0       	brlt	.+50     	; 0x5bc2 <ultoa+0x3e>
    5b90:	25 32       	cpi	r18, 0x25	; 37
    5b92:	bc f4       	brge	.+46     	; 0x5bc2 <ultoa+0x3e>
    5b94:	c2 2f       	mov	r28, r18
    5b96:	2c 2f       	mov	r18, r28
    5b98:	33 27       	eor	r19, r19
    5b9a:	44 27       	eor	r20, r20
    5b9c:	55 27       	eor	r21, r21
    5b9e:	ff 93       	push	r31
    5ba0:	ef 93       	push	r30
    5ba2:	0e 94 0f 28 	call	0x501e	; 0x501e <__udivmodsi4>
    5ba6:	ef 91       	pop	r30
    5ba8:	ff 91       	pop	r31
    5baa:	60 5d       	subi	r22, 0xD0	; 208
    5bac:	6a 33       	cpi	r22, 0x3A	; 58
    5bae:	0c f0       	brlt	.+2      	; 0x5bb2 <ultoa+0x2e>
    5bb0:	69 5d       	subi	r22, 0xD9	; 217
    5bb2:	61 93       	st	Z+, r22
    5bb4:	b9 01       	movw	r22, r18
    5bb6:	ca 01       	movw	r24, r20
    5bb8:	60 50       	subi	r22, 0x00	; 0
    5bba:	70 40       	sbci	r23, 0x00	; 0
    5bbc:	80 40       	sbci	r24, 0x00	; 0
    5bbe:	90 40       	sbci	r25, 0x00	; 0
    5bc0:	51 f7       	brne	.-44     	; 0x5b96 <ultoa+0x12>
    5bc2:	10 82       	st	Z, r1
    5bc4:	8f 91       	pop	r24
    5bc6:	9f 91       	pop	r25
    5bc8:	cf 91       	pop	r28
    5bca:	0c 94 fc 2f 	jmp	0x5ff8	; 0x5ff8 <strrev>

00005bce <sprintf>:
    5bce:	ae e0       	ldi	r26, 0x0E	; 14
    5bd0:	b0 e0       	ldi	r27, 0x00	; 0
    5bd2:	ed ee       	ldi	r30, 0xED	; 237
    5bd4:	fd e2       	ldi	r31, 0x2D	; 45
    5bd6:	0c 94 3f 28 	jmp	0x507e	; 0x507e <__prologue_saves__+0x1c>
    5bda:	0d 89       	ldd	r16, Y+21	; 0x15
    5bdc:	1e 89       	ldd	r17, Y+22	; 0x16
    5bde:	86 e0       	ldi	r24, 0x06	; 6
    5be0:	8c 83       	std	Y+4, r24	; 0x04
    5be2:	1a 83       	std	Y+2, r17	; 0x02
    5be4:	09 83       	std	Y+1, r16	; 0x01
    5be6:	8f ef       	ldi	r24, 0xFF	; 255
    5be8:	9f e7       	ldi	r25, 0x7F	; 127
    5bea:	9e 83       	std	Y+6, r25	; 0x06
    5bec:	8d 83       	std	Y+5, r24	; 0x05
    5bee:	9e 01       	movw	r18, r28
    5bf0:	27 5e       	subi	r18, 0xE7	; 231
    5bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    5bf4:	ce 01       	movw	r24, r28
    5bf6:	01 96       	adiw	r24, 0x01	; 1
    5bf8:	6f 89       	ldd	r22, Y+23	; 0x17
    5bfa:	78 8d       	ldd	r23, Y+24	; 0x18
    5bfc:	a9 01       	movw	r20, r18
    5bfe:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <vfprintf>
    5c02:	ef 81       	ldd	r30, Y+7	; 0x07
    5c04:	f8 85       	ldd	r31, Y+8	; 0x08
    5c06:	e0 0f       	add	r30, r16
    5c08:	f1 1f       	adc	r31, r17
    5c0a:	10 82       	st	Z, r1
    5c0c:	2e 96       	adiw	r28, 0x0e	; 14
    5c0e:	e4 e0       	ldi	r30, 0x04	; 4
    5c10:	0c 94 5b 28 	jmp	0x50b6	; 0x50b6 <__epilogue_restores__+0x1c>

00005c14 <vfprintf>:
    5c14:	ac e0       	ldi	r26, 0x0C	; 12
    5c16:	b0 e0       	ldi	r27, 0x00	; 0
    5c18:	e0 e1       	ldi	r30, 0x10	; 16
    5c1a:	fe e2       	ldi	r31, 0x2E	; 46
    5c1c:	0c 94 32 28 	jmp	0x5064	; 0x5064 <__prologue_saves__+0x2>
    5c20:	6c 01       	movw	r12, r24
    5c22:	2b 01       	movw	r4, r22
    5c24:	8a 01       	movw	r16, r20
    5c26:	fc 01       	movw	r30, r24
    5c28:	17 82       	std	Z+7, r1	; 0x07
    5c2a:	16 82       	std	Z+6, r1	; 0x06
    5c2c:	83 81       	ldd	r24, Z+3	; 0x03
    5c2e:	81 fd       	sbrc	r24, 1
    5c30:	03 c0       	rjmp	.+6      	; 0x5c38 <vfprintf+0x24>
    5c32:	2f ef       	ldi	r18, 0xFF	; 255
    5c34:	3f ef       	ldi	r19, 0xFF	; 255
    5c36:	c2 c1       	rjmp	.+900    	; 0x5fbc <vfprintf+0x3a8>
    5c38:	4e 01       	movw	r8, r28
    5c3a:	08 94       	sec
    5c3c:	81 1c       	adc	r8, r1
    5c3e:	91 1c       	adc	r9, r1
    5c40:	6f e3       	ldi	r22, 0x3F	; 63
    5c42:	36 2e       	mov	r3, r22
    5c44:	f6 01       	movw	r30, r12
    5c46:	93 81       	ldd	r25, Z+3	; 0x03
    5c48:	f2 01       	movw	r30, r4
    5c4a:	93 fd       	sbrc	r25, 3
    5c4c:	85 91       	lpm	r24, Z+
    5c4e:	93 ff       	sbrs	r25, 3
    5c50:	81 91       	ld	r24, Z+
    5c52:	2f 01       	movw	r4, r30
    5c54:	88 23       	and	r24, r24
    5c56:	09 f4       	brne	.+2      	; 0x5c5a <vfprintf+0x46>
    5c58:	ae c1       	rjmp	.+860    	; 0x5fb6 <vfprintf+0x3a2>
    5c5a:	85 32       	cpi	r24, 0x25	; 37
    5c5c:	39 f4       	brne	.+14     	; 0x5c6c <vfprintf+0x58>
    5c5e:	93 fd       	sbrc	r25, 3
    5c60:	85 91       	lpm	r24, Z+
    5c62:	93 ff       	sbrs	r25, 3
    5c64:	81 91       	ld	r24, Z+
    5c66:	2f 01       	movw	r4, r30
    5c68:	85 32       	cpi	r24, 0x25	; 37
    5c6a:	29 f4       	brne	.+10     	; 0x5c76 <vfprintf+0x62>
    5c6c:	90 e0       	ldi	r25, 0x00	; 0
    5c6e:	b6 01       	movw	r22, r12
    5c70:	0e 94 0c 30 	call	0x6018	; 0x6018 <fputc>
    5c74:	e7 cf       	rjmp	.-50     	; 0x5c44 <vfprintf+0x30>
    5c76:	ee 24       	eor	r14, r14
    5c78:	ff 24       	eor	r15, r15
    5c7a:	20 e0       	ldi	r18, 0x00	; 0
    5c7c:	20 32       	cpi	r18, 0x20	; 32
    5c7e:	b0 f4       	brcc	.+44     	; 0x5cac <vfprintf+0x98>
    5c80:	8b 32       	cpi	r24, 0x2B	; 43
    5c82:	69 f0       	breq	.+26     	; 0x5c9e <vfprintf+0x8a>
    5c84:	8c 32       	cpi	r24, 0x2C	; 44
    5c86:	28 f4       	brcc	.+10     	; 0x5c92 <vfprintf+0x7e>
    5c88:	80 32       	cpi	r24, 0x20	; 32
    5c8a:	51 f0       	breq	.+20     	; 0x5ca0 <vfprintf+0x8c>
    5c8c:	83 32       	cpi	r24, 0x23	; 35
    5c8e:	71 f4       	brne	.+28     	; 0x5cac <vfprintf+0x98>
    5c90:	0b c0       	rjmp	.+22     	; 0x5ca8 <vfprintf+0x94>
    5c92:	8d 32       	cpi	r24, 0x2D	; 45
    5c94:	39 f0       	breq	.+14     	; 0x5ca4 <vfprintf+0x90>
    5c96:	80 33       	cpi	r24, 0x30	; 48
    5c98:	49 f4       	brne	.+18     	; 0x5cac <vfprintf+0x98>
    5c9a:	21 60       	ori	r18, 0x01	; 1
    5c9c:	2c c0       	rjmp	.+88     	; 0x5cf6 <vfprintf+0xe2>
    5c9e:	22 60       	ori	r18, 0x02	; 2
    5ca0:	24 60       	ori	r18, 0x04	; 4
    5ca2:	29 c0       	rjmp	.+82     	; 0x5cf6 <vfprintf+0xe2>
    5ca4:	28 60       	ori	r18, 0x08	; 8
    5ca6:	27 c0       	rjmp	.+78     	; 0x5cf6 <vfprintf+0xe2>
    5ca8:	20 61       	ori	r18, 0x10	; 16
    5caa:	25 c0       	rjmp	.+74     	; 0x5cf6 <vfprintf+0xe2>
    5cac:	27 fd       	sbrc	r18, 7
    5cae:	2c c0       	rjmp	.+88     	; 0x5d08 <vfprintf+0xf4>
    5cb0:	38 2f       	mov	r19, r24
    5cb2:	30 53       	subi	r19, 0x30	; 48
    5cb4:	3a 30       	cpi	r19, 0x0A	; 10
    5cb6:	98 f4       	brcc	.+38     	; 0x5cde <vfprintf+0xca>
    5cb8:	26 ff       	sbrs	r18, 6
    5cba:	08 c0       	rjmp	.+16     	; 0x5ccc <vfprintf+0xb8>
    5cbc:	8e 2d       	mov	r24, r14
    5cbe:	88 0f       	add	r24, r24
    5cc0:	e8 2e       	mov	r14, r24
    5cc2:	ee 0c       	add	r14, r14
    5cc4:	ee 0c       	add	r14, r14
    5cc6:	e8 0e       	add	r14, r24
    5cc8:	e3 0e       	add	r14, r19
    5cca:	15 c0       	rjmp	.+42     	; 0x5cf6 <vfprintf+0xe2>
    5ccc:	8f 2d       	mov	r24, r15
    5cce:	88 0f       	add	r24, r24
    5cd0:	f8 2e       	mov	r15, r24
    5cd2:	ff 0c       	add	r15, r15
    5cd4:	ff 0c       	add	r15, r15
    5cd6:	f8 0e       	add	r15, r24
    5cd8:	f3 0e       	add	r15, r19
    5cda:	20 62       	ori	r18, 0x20	; 32
    5cdc:	0c c0       	rjmp	.+24     	; 0x5cf6 <vfprintf+0xe2>
    5cde:	8e 32       	cpi	r24, 0x2E	; 46
    5ce0:	21 f4       	brne	.+8      	; 0x5cea <vfprintf+0xd6>
    5ce2:	26 fd       	sbrc	r18, 6
    5ce4:	68 c1       	rjmp	.+720    	; 0x5fb6 <vfprintf+0x3a2>
    5ce6:	20 64       	ori	r18, 0x40	; 64
    5ce8:	06 c0       	rjmp	.+12     	; 0x5cf6 <vfprintf+0xe2>
    5cea:	8c 36       	cpi	r24, 0x6C	; 108
    5cec:	11 f4       	brne	.+4      	; 0x5cf2 <vfprintf+0xde>
    5cee:	20 68       	ori	r18, 0x80	; 128
    5cf0:	02 c0       	rjmp	.+4      	; 0x5cf6 <vfprintf+0xe2>
    5cf2:	88 36       	cpi	r24, 0x68	; 104
    5cf4:	49 f4       	brne	.+18     	; 0x5d08 <vfprintf+0xf4>
    5cf6:	f2 01       	movw	r30, r4
    5cf8:	93 fd       	sbrc	r25, 3
    5cfa:	85 91       	lpm	r24, Z+
    5cfc:	93 ff       	sbrs	r25, 3
    5cfe:	81 91       	ld	r24, Z+
    5d00:	2f 01       	movw	r4, r30
    5d02:	88 23       	and	r24, r24
    5d04:	09 f0       	breq	.+2      	; 0x5d08 <vfprintf+0xf4>
    5d06:	ba cf       	rjmp	.-140    	; 0x5c7c <vfprintf+0x68>
    5d08:	98 2f       	mov	r25, r24
    5d0a:	95 54       	subi	r25, 0x45	; 69
    5d0c:	93 30       	cpi	r25, 0x03	; 3
    5d0e:	18 f0       	brcs	.+6      	; 0x5d16 <vfprintf+0x102>
    5d10:	90 52       	subi	r25, 0x20	; 32
    5d12:	93 30       	cpi	r25, 0x03	; 3
    5d14:	20 f4       	brcc	.+8      	; 0x5d1e <vfprintf+0x10a>
    5d16:	0c 5f       	subi	r16, 0xFC	; 252
    5d18:	1f 4f       	sbci	r17, 0xFF	; 255
    5d1a:	39 82       	std	Y+1, r3	; 0x01
    5d1c:	0d c0       	rjmp	.+26     	; 0x5d38 <vfprintf+0x124>
    5d1e:	83 36       	cpi	r24, 0x63	; 99
    5d20:	31 f0       	breq	.+12     	; 0x5d2e <vfprintf+0x11a>
    5d22:	83 37       	cpi	r24, 0x73	; 115
    5d24:	71 f0       	breq	.+28     	; 0x5d42 <vfprintf+0x12e>
    5d26:	83 35       	cpi	r24, 0x53	; 83
    5d28:	09 f0       	breq	.+2      	; 0x5d2c <vfprintf+0x118>
    5d2a:	58 c0       	rjmp	.+176    	; 0x5ddc <vfprintf+0x1c8>
    5d2c:	1e c0       	rjmp	.+60     	; 0x5d6a <vfprintf+0x156>
    5d2e:	f8 01       	movw	r30, r16
    5d30:	80 81       	ld	r24, Z
    5d32:	89 83       	std	Y+1, r24	; 0x01
    5d34:	0e 5f       	subi	r16, 0xFE	; 254
    5d36:	1f 4f       	sbci	r17, 0xFF	; 255
    5d38:	54 01       	movw	r10, r8
    5d3a:	51 e0       	ldi	r21, 0x01	; 1
    5d3c:	65 2e       	mov	r6, r21
    5d3e:	71 2c       	mov	r7, r1
    5d40:	12 c0       	rjmp	.+36     	; 0x5d66 <vfprintf+0x152>
    5d42:	f8 01       	movw	r30, r16
    5d44:	a0 80       	ld	r10, Z
    5d46:	b1 80       	ldd	r11, Z+1	; 0x01
    5d48:	26 fd       	sbrc	r18, 6
    5d4a:	03 c0       	rjmp	.+6      	; 0x5d52 <vfprintf+0x13e>
    5d4c:	6f ef       	ldi	r22, 0xFF	; 255
    5d4e:	7f ef       	ldi	r23, 0xFF	; 255
    5d50:	02 c0       	rjmp	.+4      	; 0x5d56 <vfprintf+0x142>
    5d52:	6e 2d       	mov	r22, r14
    5d54:	70 e0       	ldi	r23, 0x00	; 0
    5d56:	0e 5f       	subi	r16, 0xFE	; 254
    5d58:	1f 4f       	sbci	r17, 0xFF	; 255
    5d5a:	c5 01       	movw	r24, r10
    5d5c:	2c 87       	std	Y+12, r18	; 0x0c
    5d5e:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <strnlen>
    5d62:	3c 01       	movw	r6, r24
    5d64:	2c 85       	ldd	r18, Y+12	; 0x0c
    5d66:	2f 77       	andi	r18, 0x7F	; 127
    5d68:	13 c0       	rjmp	.+38     	; 0x5d90 <vfprintf+0x17c>
    5d6a:	f8 01       	movw	r30, r16
    5d6c:	a0 80       	ld	r10, Z
    5d6e:	b1 80       	ldd	r11, Z+1	; 0x01
    5d70:	26 fd       	sbrc	r18, 6
    5d72:	03 c0       	rjmp	.+6      	; 0x5d7a <vfprintf+0x166>
    5d74:	6f ef       	ldi	r22, 0xFF	; 255
    5d76:	7f ef       	ldi	r23, 0xFF	; 255
    5d78:	02 c0       	rjmp	.+4      	; 0x5d7e <vfprintf+0x16a>
    5d7a:	6e 2d       	mov	r22, r14
    5d7c:	70 e0       	ldi	r23, 0x00	; 0
    5d7e:	0e 5f       	subi	r16, 0xFE	; 254
    5d80:	1f 4f       	sbci	r17, 0xFF	; 255
    5d82:	c5 01       	movw	r24, r10
    5d84:	2c 87       	std	Y+12, r18	; 0x0c
    5d86:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <strnlen_P>
    5d8a:	3c 01       	movw	r6, r24
    5d8c:	2c 85       	ldd	r18, Y+12	; 0x0c
    5d8e:	20 68       	ori	r18, 0x80	; 128
    5d90:	23 ff       	sbrs	r18, 3
    5d92:	09 c0       	rjmp	.+18     	; 0x5da6 <vfprintf+0x192>
    5d94:	1f c0       	rjmp	.+62     	; 0x5dd4 <vfprintf+0x1c0>
    5d96:	80 e2       	ldi	r24, 0x20	; 32
    5d98:	90 e0       	ldi	r25, 0x00	; 0
    5d9a:	b6 01       	movw	r22, r12
    5d9c:	2c 87       	std	Y+12, r18	; 0x0c
    5d9e:	0e 94 0c 30 	call	0x6018	; 0x6018 <fputc>
    5da2:	fa 94       	dec	r15
    5da4:	2c 85       	ldd	r18, Y+12	; 0x0c
    5da6:	8f 2d       	mov	r24, r15
    5da8:	90 e0       	ldi	r25, 0x00	; 0
    5daa:	68 16       	cp	r6, r24
    5dac:	79 06       	cpc	r7, r25
    5dae:	98 f3       	brcs	.-26     	; 0x5d96 <vfprintf+0x182>
    5db0:	11 c0       	rjmp	.+34     	; 0x5dd4 <vfprintf+0x1c0>
    5db2:	f5 01       	movw	r30, r10
    5db4:	27 fd       	sbrc	r18, 7
    5db6:	85 91       	lpm	r24, Z+
    5db8:	27 ff       	sbrs	r18, 7
    5dba:	81 91       	ld	r24, Z+
    5dbc:	5f 01       	movw	r10, r30
    5dbe:	90 e0       	ldi	r25, 0x00	; 0
    5dc0:	b6 01       	movw	r22, r12
    5dc2:	2c 87       	std	Y+12, r18	; 0x0c
    5dc4:	0e 94 0c 30 	call	0x6018	; 0x6018 <fputc>
    5dc8:	2c 85       	ldd	r18, Y+12	; 0x0c
    5dca:	f1 10       	cpse	r15, r1
    5dcc:	fa 94       	dec	r15
    5dce:	08 94       	sec
    5dd0:	61 08       	sbc	r6, r1
    5dd2:	71 08       	sbc	r7, r1
    5dd4:	61 14       	cp	r6, r1
    5dd6:	71 04       	cpc	r7, r1
    5dd8:	61 f7       	brne	.-40     	; 0x5db2 <vfprintf+0x19e>
    5dda:	ea c0       	rjmp	.+468    	; 0x5fb0 <vfprintf+0x39c>
    5ddc:	84 36       	cpi	r24, 0x64	; 100
    5dde:	11 f0       	breq	.+4      	; 0x5de4 <vfprintf+0x1d0>
    5de0:	89 36       	cpi	r24, 0x69	; 105
    5de2:	51 f5       	brne	.+84     	; 0x5e38 <vfprintf+0x224>
    5de4:	27 ff       	sbrs	r18, 7
    5de6:	08 c0       	rjmp	.+16     	; 0x5df8 <vfprintf+0x1e4>
    5de8:	f8 01       	movw	r30, r16
    5dea:	60 81       	ld	r22, Z
    5dec:	71 81       	ldd	r23, Z+1	; 0x01
    5dee:	82 81       	ldd	r24, Z+2	; 0x02
    5df0:	93 81       	ldd	r25, Z+3	; 0x03
    5df2:	0c 5f       	subi	r16, 0xFC	; 252
    5df4:	1f 4f       	sbci	r17, 0xFF	; 255
    5df6:	0a c0       	rjmp	.+20     	; 0x5e0c <vfprintf+0x1f8>
    5df8:	f8 01       	movw	r30, r16
    5dfa:	40 81       	ld	r20, Z
    5dfc:	51 81       	ldd	r21, Z+1	; 0x01
    5dfe:	ba 01       	movw	r22, r20
    5e00:	88 27       	eor	r24, r24
    5e02:	77 fd       	sbrc	r23, 7
    5e04:	80 95       	com	r24
    5e06:	98 2f       	mov	r25, r24
    5e08:	0e 5f       	subi	r16, 0xFE	; 254
    5e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    5e0c:	4f e6       	ldi	r20, 0x6F	; 111
    5e0e:	b4 2e       	mov	r11, r20
    5e10:	b2 22       	and	r11, r18
    5e12:	97 ff       	sbrs	r25, 7
    5e14:	09 c0       	rjmp	.+18     	; 0x5e28 <vfprintf+0x214>
    5e16:	90 95       	com	r25
    5e18:	80 95       	com	r24
    5e1a:	70 95       	com	r23
    5e1c:	61 95       	neg	r22
    5e1e:	7f 4f       	sbci	r23, 0xFF	; 255
    5e20:	8f 4f       	sbci	r24, 0xFF	; 255
    5e22:	9f 4f       	sbci	r25, 0xFF	; 255
    5e24:	f0 e8       	ldi	r31, 0x80	; 128
    5e26:	bf 2a       	or	r11, r31
    5e28:	a4 01       	movw	r20, r8
    5e2a:	2a e0       	ldi	r18, 0x0A	; 10
    5e2c:	30 e0       	ldi	r19, 0x00	; 0
    5e2e:	0e 94 38 30 	call	0x6070	; 0x6070 <__ultoa_invert>
    5e32:	78 2e       	mov	r7, r24
    5e34:	78 18       	sub	r7, r8
    5e36:	43 c0       	rjmp	.+134    	; 0x5ebe <vfprintf+0x2aa>
    5e38:	85 37       	cpi	r24, 0x75	; 117
    5e3a:	31 f4       	brne	.+12     	; 0x5e48 <vfprintf+0x234>
    5e3c:	3f ee       	ldi	r19, 0xEF	; 239
    5e3e:	b3 2e       	mov	r11, r19
    5e40:	b2 22       	and	r11, r18
    5e42:	2a e0       	ldi	r18, 0x0A	; 10
    5e44:	30 e0       	ldi	r19, 0x00	; 0
    5e46:	23 c0       	rjmp	.+70     	; 0x5e8e <vfprintf+0x27a>
    5e48:	99 ef       	ldi	r25, 0xF9	; 249
    5e4a:	b9 2e       	mov	r11, r25
    5e4c:	b2 22       	and	r11, r18
    5e4e:	8f 36       	cpi	r24, 0x6F	; 111
    5e50:	61 f0       	breq	.+24     	; 0x5e6a <vfprintf+0x256>
    5e52:	80 37       	cpi	r24, 0x70	; 112
    5e54:	20 f4       	brcc	.+8      	; 0x5e5e <vfprintf+0x24a>
    5e56:	88 35       	cpi	r24, 0x58	; 88
    5e58:	09 f0       	breq	.+2      	; 0x5e5c <vfprintf+0x248>
    5e5a:	ad c0       	rjmp	.+346    	; 0x5fb6 <vfprintf+0x3a2>
    5e5c:	12 c0       	rjmp	.+36     	; 0x5e82 <vfprintf+0x26e>
    5e5e:	80 37       	cpi	r24, 0x70	; 112
    5e60:	39 f0       	breq	.+14     	; 0x5e70 <vfprintf+0x25c>
    5e62:	88 37       	cpi	r24, 0x78	; 120
    5e64:	09 f0       	breq	.+2      	; 0x5e68 <vfprintf+0x254>
    5e66:	a7 c0       	rjmp	.+334    	; 0x5fb6 <vfprintf+0x3a2>
    5e68:	05 c0       	rjmp	.+10     	; 0x5e74 <vfprintf+0x260>
    5e6a:	28 e0       	ldi	r18, 0x08	; 8
    5e6c:	30 e0       	ldi	r19, 0x00	; 0
    5e6e:	0f c0       	rjmp	.+30     	; 0x5e8e <vfprintf+0x27a>
    5e70:	20 e1       	ldi	r18, 0x10	; 16
    5e72:	b2 2a       	or	r11, r18
    5e74:	b4 fe       	sbrs	r11, 4
    5e76:	02 c0       	rjmp	.+4      	; 0x5e7c <vfprintf+0x268>
    5e78:	84 e0       	ldi	r24, 0x04	; 4
    5e7a:	b8 2a       	or	r11, r24
    5e7c:	20 e1       	ldi	r18, 0x10	; 16
    5e7e:	30 e0       	ldi	r19, 0x00	; 0
    5e80:	06 c0       	rjmp	.+12     	; 0x5e8e <vfprintf+0x27a>
    5e82:	b4 fe       	sbrs	r11, 4
    5e84:	02 c0       	rjmp	.+4      	; 0x5e8a <vfprintf+0x276>
    5e86:	e6 e0       	ldi	r30, 0x06	; 6
    5e88:	be 2a       	or	r11, r30
    5e8a:	20 e1       	ldi	r18, 0x10	; 16
    5e8c:	32 e0       	ldi	r19, 0x02	; 2
    5e8e:	b7 fe       	sbrs	r11, 7
    5e90:	08 c0       	rjmp	.+16     	; 0x5ea2 <vfprintf+0x28e>
    5e92:	f8 01       	movw	r30, r16
    5e94:	60 81       	ld	r22, Z
    5e96:	71 81       	ldd	r23, Z+1	; 0x01
    5e98:	82 81       	ldd	r24, Z+2	; 0x02
    5e9a:	93 81       	ldd	r25, Z+3	; 0x03
    5e9c:	0c 5f       	subi	r16, 0xFC	; 252
    5e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    5ea0:	07 c0       	rjmp	.+14     	; 0x5eb0 <vfprintf+0x29c>
    5ea2:	f8 01       	movw	r30, r16
    5ea4:	60 81       	ld	r22, Z
    5ea6:	71 81       	ldd	r23, Z+1	; 0x01
    5ea8:	80 e0       	ldi	r24, 0x00	; 0
    5eaa:	90 e0       	ldi	r25, 0x00	; 0
    5eac:	0e 5f       	subi	r16, 0xFE	; 254
    5eae:	1f 4f       	sbci	r17, 0xFF	; 255
    5eb0:	a4 01       	movw	r20, r8
    5eb2:	0e 94 38 30 	call	0x6070	; 0x6070 <__ultoa_invert>
    5eb6:	78 2e       	mov	r7, r24
    5eb8:	78 18       	sub	r7, r8
    5eba:	ff e7       	ldi	r31, 0x7F	; 127
    5ebc:	bf 22       	and	r11, r31
    5ebe:	b6 fe       	sbrs	r11, 6
    5ec0:	0b c0       	rjmp	.+22     	; 0x5ed8 <vfprintf+0x2c4>
    5ec2:	2e ef       	ldi	r18, 0xFE	; 254
    5ec4:	b2 22       	and	r11, r18
    5ec6:	7e 14       	cp	r7, r14
    5ec8:	38 f4       	brcc	.+14     	; 0x5ed8 <vfprintf+0x2c4>
    5eca:	b4 fe       	sbrs	r11, 4
    5ecc:	07 c0       	rjmp	.+14     	; 0x5edc <vfprintf+0x2c8>
    5ece:	b2 fc       	sbrc	r11, 2
    5ed0:	05 c0       	rjmp	.+10     	; 0x5edc <vfprintf+0x2c8>
    5ed2:	8f ee       	ldi	r24, 0xEF	; 239
    5ed4:	b8 22       	and	r11, r24
    5ed6:	02 c0       	rjmp	.+4      	; 0x5edc <vfprintf+0x2c8>
    5ed8:	a7 2c       	mov	r10, r7
    5eda:	01 c0       	rjmp	.+2      	; 0x5ede <vfprintf+0x2ca>
    5edc:	ae 2c       	mov	r10, r14
    5ede:	8b 2d       	mov	r24, r11
    5ee0:	b4 fe       	sbrs	r11, 4
    5ee2:	0d c0       	rjmp	.+26     	; 0x5efe <vfprintf+0x2ea>
    5ee4:	fe 01       	movw	r30, r28
    5ee6:	e7 0d       	add	r30, r7
    5ee8:	f1 1d       	adc	r31, r1
    5eea:	90 81       	ld	r25, Z
    5eec:	90 33       	cpi	r25, 0x30	; 48
    5eee:	19 f4       	brne	.+6      	; 0x5ef6 <vfprintf+0x2e2>
    5ef0:	e9 ee       	ldi	r30, 0xE9	; 233
    5ef2:	be 22       	and	r11, r30
    5ef4:	07 c0       	rjmp	.+14     	; 0x5f04 <vfprintf+0x2f0>
    5ef6:	a3 94       	inc	r10
    5ef8:	b2 fe       	sbrs	r11, 2
    5efa:	04 c0       	rjmp	.+8      	; 0x5f04 <vfprintf+0x2f0>
    5efc:	02 c0       	rjmp	.+4      	; 0x5f02 <vfprintf+0x2ee>
    5efe:	86 78       	andi	r24, 0x86	; 134
    5f00:	09 f0       	breq	.+2      	; 0x5f04 <vfprintf+0x2f0>
    5f02:	a3 94       	inc	r10
    5f04:	6b 2c       	mov	r6, r11
    5f06:	b3 fc       	sbrc	r11, 3
    5f08:	14 c0       	rjmp	.+40     	; 0x5f32 <vfprintf+0x31e>
    5f0a:	b0 fe       	sbrs	r11, 0
    5f0c:	0f c0       	rjmp	.+30     	; 0x5f2c <vfprintf+0x318>
    5f0e:	af 14       	cp	r10, r15
    5f10:	10 f0       	brcs	.+4      	; 0x5f16 <vfprintf+0x302>
    5f12:	e7 2c       	mov	r14, r7
    5f14:	0b c0       	rjmp	.+22     	; 0x5f2c <vfprintf+0x318>
    5f16:	e7 2c       	mov	r14, r7
    5f18:	ef 0c       	add	r14, r15
    5f1a:	ea 18       	sub	r14, r10
    5f1c:	af 2c       	mov	r10, r15
    5f1e:	06 c0       	rjmp	.+12     	; 0x5f2c <vfprintf+0x318>
    5f20:	80 e2       	ldi	r24, 0x20	; 32
    5f22:	90 e0       	ldi	r25, 0x00	; 0
    5f24:	b6 01       	movw	r22, r12
    5f26:	0e 94 0c 30 	call	0x6018	; 0x6018 <fputc>
    5f2a:	a3 94       	inc	r10
    5f2c:	af 14       	cp	r10, r15
    5f2e:	c0 f3       	brcs	.-16     	; 0x5f20 <vfprintf+0x30c>
    5f30:	04 c0       	rjmp	.+8      	; 0x5f3a <vfprintf+0x326>
    5f32:	af 14       	cp	r10, r15
    5f34:	10 f4       	brcc	.+4      	; 0x5f3a <vfprintf+0x326>
    5f36:	fa 18       	sub	r15, r10
    5f38:	01 c0       	rjmp	.+2      	; 0x5f3c <vfprintf+0x328>
    5f3a:	ff 24       	eor	r15, r15
    5f3c:	64 fe       	sbrs	r6, 4
    5f3e:	0f c0       	rjmp	.+30     	; 0x5f5e <vfprintf+0x34a>
    5f40:	80 e3       	ldi	r24, 0x30	; 48
    5f42:	90 e0       	ldi	r25, 0x00	; 0
    5f44:	b6 01       	movw	r22, r12
    5f46:	0e 94 0c 30 	call	0x6018	; 0x6018 <fputc>
    5f4a:	62 fe       	sbrs	r6, 2
    5f4c:	1d c0       	rjmp	.+58     	; 0x5f88 <vfprintf+0x374>
    5f4e:	61 fc       	sbrc	r6, 1
    5f50:	03 c0       	rjmp	.+6      	; 0x5f58 <vfprintf+0x344>
    5f52:	88 e7       	ldi	r24, 0x78	; 120
    5f54:	90 e0       	ldi	r25, 0x00	; 0
    5f56:	0e c0       	rjmp	.+28     	; 0x5f74 <vfprintf+0x360>
    5f58:	88 e5       	ldi	r24, 0x58	; 88
    5f5a:	90 e0       	ldi	r25, 0x00	; 0
    5f5c:	0b c0       	rjmp	.+22     	; 0x5f74 <vfprintf+0x360>
    5f5e:	86 2d       	mov	r24, r6
    5f60:	86 78       	andi	r24, 0x86	; 134
    5f62:	91 f0       	breq	.+36     	; 0x5f88 <vfprintf+0x374>
    5f64:	61 fe       	sbrs	r6, 1
    5f66:	02 c0       	rjmp	.+4      	; 0x5f6c <vfprintf+0x358>
    5f68:	8b e2       	ldi	r24, 0x2B	; 43
    5f6a:	01 c0       	rjmp	.+2      	; 0x5f6e <vfprintf+0x35a>
    5f6c:	80 e2       	ldi	r24, 0x20	; 32
    5f6e:	b7 fc       	sbrc	r11, 7
    5f70:	8d e2       	ldi	r24, 0x2D	; 45
    5f72:	90 e0       	ldi	r25, 0x00	; 0
    5f74:	b6 01       	movw	r22, r12
    5f76:	0e 94 0c 30 	call	0x6018	; 0x6018 <fputc>
    5f7a:	06 c0       	rjmp	.+12     	; 0x5f88 <vfprintf+0x374>
    5f7c:	80 e3       	ldi	r24, 0x30	; 48
    5f7e:	90 e0       	ldi	r25, 0x00	; 0
    5f80:	b6 01       	movw	r22, r12
    5f82:	0e 94 0c 30 	call	0x6018	; 0x6018 <fputc>
    5f86:	ea 94       	dec	r14
    5f88:	7e 14       	cp	r7, r14
    5f8a:	c0 f3       	brcs	.-16     	; 0x5f7c <vfprintf+0x368>
    5f8c:	7a 94       	dec	r7
    5f8e:	f4 01       	movw	r30, r8
    5f90:	e7 0d       	add	r30, r7
    5f92:	f1 1d       	adc	r31, r1
    5f94:	80 81       	ld	r24, Z
    5f96:	90 e0       	ldi	r25, 0x00	; 0
    5f98:	b6 01       	movw	r22, r12
    5f9a:	0e 94 0c 30 	call	0x6018	; 0x6018 <fputc>
    5f9e:	77 20       	and	r7, r7
    5fa0:	a9 f7       	brne	.-22     	; 0x5f8c <vfprintf+0x378>
    5fa2:	06 c0       	rjmp	.+12     	; 0x5fb0 <vfprintf+0x39c>
    5fa4:	80 e2       	ldi	r24, 0x20	; 32
    5fa6:	90 e0       	ldi	r25, 0x00	; 0
    5fa8:	b6 01       	movw	r22, r12
    5faa:	0e 94 0c 30 	call	0x6018	; 0x6018 <fputc>
    5fae:	fa 94       	dec	r15
    5fb0:	ff 20       	and	r15, r15
    5fb2:	c1 f7       	brne	.-16     	; 0x5fa4 <vfprintf+0x390>
    5fb4:	47 ce       	rjmp	.-882    	; 0x5c44 <vfprintf+0x30>
    5fb6:	f6 01       	movw	r30, r12
    5fb8:	26 81       	ldd	r18, Z+6	; 0x06
    5fba:	37 81       	ldd	r19, Z+7	; 0x07
    5fbc:	c9 01       	movw	r24, r18
    5fbe:	2c 96       	adiw	r28, 0x0c	; 12
    5fc0:	e1 e1       	ldi	r30, 0x11	; 17
    5fc2:	0c 94 4e 28 	jmp	0x509c	; 0x509c <__epilogue_restores__+0x2>

00005fc6 <__ctype_isfalse>:
    5fc6:	99 27       	eor	r25, r25
    5fc8:	88 27       	eor	r24, r24

00005fca <__ctype_istrue>:
    5fca:	08 95       	ret

00005fcc <strnlen_P>:
    5fcc:	fc 01       	movw	r30, r24
    5fce:	05 90       	lpm	r0, Z+
    5fd0:	61 50       	subi	r22, 0x01	; 1
    5fd2:	70 40       	sbci	r23, 0x00	; 0
    5fd4:	01 10       	cpse	r0, r1
    5fd6:	d8 f7       	brcc	.-10     	; 0x5fce <strnlen_P+0x2>
    5fd8:	80 95       	com	r24
    5fda:	90 95       	com	r25
    5fdc:	8e 0f       	add	r24, r30
    5fde:	9f 1f       	adc	r25, r31
    5fe0:	08 95       	ret

00005fe2 <strnlen>:
    5fe2:	fc 01       	movw	r30, r24
    5fe4:	61 50       	subi	r22, 0x01	; 1
    5fe6:	70 40       	sbci	r23, 0x00	; 0
    5fe8:	01 90       	ld	r0, Z+
    5fea:	01 10       	cpse	r0, r1
    5fec:	d8 f7       	brcc	.-10     	; 0x5fe4 <strnlen+0x2>
    5fee:	80 95       	com	r24
    5ff0:	90 95       	com	r25
    5ff2:	8e 0f       	add	r24, r30
    5ff4:	9f 1f       	adc	r25, r31
    5ff6:	08 95       	ret

00005ff8 <strrev>:
    5ff8:	dc 01       	movw	r26, r24
    5ffa:	fc 01       	movw	r30, r24
    5ffc:	67 2f       	mov	r22, r23
    5ffe:	71 91       	ld	r23, Z+
    6000:	77 23       	and	r23, r23
    6002:	e1 f7       	brne	.-8      	; 0x5ffc <strrev+0x4>
    6004:	32 97       	sbiw	r30, 0x02	; 2
    6006:	04 c0       	rjmp	.+8      	; 0x6010 <strrev+0x18>
    6008:	7c 91       	ld	r23, X
    600a:	6d 93       	st	X+, r22
    600c:	70 83       	st	Z, r23
    600e:	62 91       	ld	r22, -Z
    6010:	ae 17       	cp	r26, r30
    6012:	bf 07       	cpc	r27, r31
    6014:	c8 f3       	brcs	.-14     	; 0x6008 <strrev+0x10>
    6016:	08 95       	ret

00006018 <fputc>:
    6018:	0f 93       	push	r16
    601a:	1f 93       	push	r17
    601c:	cf 93       	push	r28
    601e:	df 93       	push	r29
    6020:	8c 01       	movw	r16, r24
    6022:	eb 01       	movw	r28, r22
    6024:	8b 81       	ldd	r24, Y+3	; 0x03
    6026:	81 ff       	sbrs	r24, 1
    6028:	1b c0       	rjmp	.+54     	; 0x6060 <fputc+0x48>
    602a:	82 ff       	sbrs	r24, 2
    602c:	0d c0       	rjmp	.+26     	; 0x6048 <fputc+0x30>
    602e:	2e 81       	ldd	r18, Y+6	; 0x06
    6030:	3f 81       	ldd	r19, Y+7	; 0x07
    6032:	8c 81       	ldd	r24, Y+4	; 0x04
    6034:	9d 81       	ldd	r25, Y+5	; 0x05
    6036:	28 17       	cp	r18, r24
    6038:	39 07       	cpc	r19, r25
    603a:	64 f4       	brge	.+24     	; 0x6054 <fputc+0x3c>
    603c:	e8 81       	ld	r30, Y
    603e:	f9 81       	ldd	r31, Y+1	; 0x01
    6040:	01 93       	st	Z+, r16
    6042:	f9 83       	std	Y+1, r31	; 0x01
    6044:	e8 83       	st	Y, r30
    6046:	06 c0       	rjmp	.+12     	; 0x6054 <fputc+0x3c>
    6048:	e8 85       	ldd	r30, Y+8	; 0x08
    604a:	f9 85       	ldd	r31, Y+9	; 0x09
    604c:	80 2f       	mov	r24, r16
    604e:	09 95       	icall
    6050:	00 97       	sbiw	r24, 0x00	; 0
    6052:	31 f4       	brne	.+12     	; 0x6060 <fputc+0x48>
    6054:	8e 81       	ldd	r24, Y+6	; 0x06
    6056:	9f 81       	ldd	r25, Y+7	; 0x07
    6058:	01 96       	adiw	r24, 0x01	; 1
    605a:	9f 83       	std	Y+7, r25	; 0x07
    605c:	8e 83       	std	Y+6, r24	; 0x06
    605e:	02 c0       	rjmp	.+4      	; 0x6064 <fputc+0x4c>
    6060:	0f ef       	ldi	r16, 0xFF	; 255
    6062:	1f ef       	ldi	r17, 0xFF	; 255
    6064:	c8 01       	movw	r24, r16
    6066:	df 91       	pop	r29
    6068:	cf 91       	pop	r28
    606a:	1f 91       	pop	r17
    606c:	0f 91       	pop	r16
    606e:	08 95       	ret

00006070 <__ultoa_invert>:
    6070:	fa 01       	movw	r30, r20
    6072:	aa 27       	eor	r26, r26
    6074:	28 30       	cpi	r18, 0x08	; 8
    6076:	51 f1       	breq	.+84     	; 0x60cc <__ultoa_invert+0x5c>
    6078:	20 31       	cpi	r18, 0x10	; 16
    607a:	81 f1       	breq	.+96     	; 0x60dc <__ultoa_invert+0x6c>
    607c:	e8 94       	clt
    607e:	6f 93       	push	r22
    6080:	6e 7f       	andi	r22, 0xFE	; 254
    6082:	6e 5f       	subi	r22, 0xFE	; 254
    6084:	7f 4f       	sbci	r23, 0xFF	; 255
    6086:	8f 4f       	sbci	r24, 0xFF	; 255
    6088:	9f 4f       	sbci	r25, 0xFF	; 255
    608a:	af 4f       	sbci	r26, 0xFF	; 255
    608c:	b1 e0       	ldi	r27, 0x01	; 1
    608e:	3e d0       	rcall	.+124    	; 0x610c <__ultoa_invert+0x9c>
    6090:	b4 e0       	ldi	r27, 0x04	; 4
    6092:	3c d0       	rcall	.+120    	; 0x610c <__ultoa_invert+0x9c>
    6094:	67 0f       	add	r22, r23
    6096:	78 1f       	adc	r23, r24
    6098:	89 1f       	adc	r24, r25
    609a:	9a 1f       	adc	r25, r26
    609c:	a1 1d       	adc	r26, r1
    609e:	68 0f       	add	r22, r24
    60a0:	79 1f       	adc	r23, r25
    60a2:	8a 1f       	adc	r24, r26
    60a4:	91 1d       	adc	r25, r1
    60a6:	a1 1d       	adc	r26, r1
    60a8:	6a 0f       	add	r22, r26
    60aa:	71 1d       	adc	r23, r1
    60ac:	81 1d       	adc	r24, r1
    60ae:	91 1d       	adc	r25, r1
    60b0:	a1 1d       	adc	r26, r1
    60b2:	20 d0       	rcall	.+64     	; 0x60f4 <__ultoa_invert+0x84>
    60b4:	09 f4       	brne	.+2      	; 0x60b8 <__ultoa_invert+0x48>
    60b6:	68 94       	set
    60b8:	3f 91       	pop	r19
    60ba:	2a e0       	ldi	r18, 0x0A	; 10
    60bc:	26 9f       	mul	r18, r22
    60be:	11 24       	eor	r1, r1
    60c0:	30 19       	sub	r19, r0
    60c2:	30 5d       	subi	r19, 0xD0	; 208
    60c4:	31 93       	st	Z+, r19
    60c6:	de f6       	brtc	.-74     	; 0x607e <__ultoa_invert+0xe>
    60c8:	cf 01       	movw	r24, r30
    60ca:	08 95       	ret
    60cc:	46 2f       	mov	r20, r22
    60ce:	47 70       	andi	r20, 0x07	; 7
    60d0:	40 5d       	subi	r20, 0xD0	; 208
    60d2:	41 93       	st	Z+, r20
    60d4:	b3 e0       	ldi	r27, 0x03	; 3
    60d6:	0f d0       	rcall	.+30     	; 0x60f6 <__ultoa_invert+0x86>
    60d8:	c9 f7       	brne	.-14     	; 0x60cc <__ultoa_invert+0x5c>
    60da:	f6 cf       	rjmp	.-20     	; 0x60c8 <__ultoa_invert+0x58>
    60dc:	46 2f       	mov	r20, r22
    60de:	4f 70       	andi	r20, 0x0F	; 15
    60e0:	40 5d       	subi	r20, 0xD0	; 208
    60e2:	4a 33       	cpi	r20, 0x3A	; 58
    60e4:	18 f0       	brcs	.+6      	; 0x60ec <__ultoa_invert+0x7c>
    60e6:	49 5d       	subi	r20, 0xD9	; 217
    60e8:	31 fd       	sbrc	r19, 1
    60ea:	40 52       	subi	r20, 0x20	; 32
    60ec:	41 93       	st	Z+, r20
    60ee:	02 d0       	rcall	.+4      	; 0x60f4 <__ultoa_invert+0x84>
    60f0:	a9 f7       	brne	.-22     	; 0x60dc <__ultoa_invert+0x6c>
    60f2:	ea cf       	rjmp	.-44     	; 0x60c8 <__ultoa_invert+0x58>
    60f4:	b4 e0       	ldi	r27, 0x04	; 4
    60f6:	a6 95       	lsr	r26
    60f8:	97 95       	ror	r25
    60fa:	87 95       	ror	r24
    60fc:	77 95       	ror	r23
    60fe:	67 95       	ror	r22
    6100:	ba 95       	dec	r27
    6102:	c9 f7       	brne	.-14     	; 0x60f6 <__ultoa_invert+0x86>
    6104:	00 97       	sbiw	r24, 0x00	; 0
    6106:	61 05       	cpc	r22, r1
    6108:	71 05       	cpc	r23, r1
    610a:	08 95       	ret
    610c:	9b 01       	movw	r18, r22
    610e:	ac 01       	movw	r20, r24
    6110:	0a 2e       	mov	r0, r26
    6112:	06 94       	lsr	r0
    6114:	57 95       	ror	r21
    6116:	47 95       	ror	r20
    6118:	37 95       	ror	r19
    611a:	27 95       	ror	r18
    611c:	ba 95       	dec	r27
    611e:	c9 f7       	brne	.-14     	; 0x6112 <__ultoa_invert+0xa2>
    6120:	62 0f       	add	r22, r18
    6122:	73 1f       	adc	r23, r19
    6124:	84 1f       	adc	r24, r20
    6126:	95 1f       	adc	r25, r21
    6128:	a0 1d       	adc	r26, r0
    612a:	08 95       	ret

0000612c <__do_global_dtors>:
    612c:	14 e0       	ldi	r17, 0x04	; 4
    612e:	ca e2       	ldi	r28, 0x2A	; 42
    6130:	d4 e0       	ldi	r29, 0x04	; 4
    6132:	04 c0       	rjmp	.+8      	; 0x613c <__do_global_dtors+0x10>
    6134:	fe 01       	movw	r30, r28
    6136:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <__tablejump__>
    613a:	22 96       	adiw	r28, 0x02	; 2
    613c:	cc 32       	cpi	r28, 0x2C	; 44
    613e:	d1 07       	cpc	r29, r17
    6140:	c9 f7       	brne	.-14     	; 0x6134 <__do_global_dtors+0x8>
    6142:	f8 94       	cli

00006144 <__stop_program>:
    6144:	ff cf       	rjmp	.-2      	; 0x6144 <__stop_program>
